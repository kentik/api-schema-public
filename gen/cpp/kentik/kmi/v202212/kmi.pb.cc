// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/kmi/v202212/kmi.proto

#include "kentik/kmi/v202212/kmi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkmi_2fv202212_2fkmi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkmi_2fv202212_2fkmi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkmi_2fv202212_2fkmi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkmi_2fv202212_2fkmi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkmi_2fv202212_2fkmi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto;
namespace kentik {
namespace kmi {
namespace v202212 {
class MarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Market> _instance;
} _Market_default_instance_;
class RankingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ranking> _instance;
} _Ranking_default_instance_;
class CustomerProviderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerProvider> _instance;
} _CustomerProvider_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Peer> _instance;
} _Peer_default_instance_;
class ASNDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ASNDetails> _instance;
} _ASNDetails_default_instance_;
class ListMarketsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMarketsRequest> _instance;
} _ListMarketsRequest_default_instance_;
class ListMarketsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMarketsResponse> _instance;
} _ListMarketsResponse_default_instance_;
class GetRankingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRankingsRequest> _instance;
} _GetRankingsRequest_default_instance_;
class GetRankingsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRankingsResponse> _instance;
} _GetRankingsResponse_default_instance_;
class GetASNDetailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetASNDetailsRequest> _instance;
} _GetASNDetailsRequest_default_instance_;
class GetASNDetailsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetASNDetailsResponse> _instance;
} _GetASNDetailsResponse_default_instance_;
}  // namespace v202212
}  // namespace kmi
}  // namespace kentik
static void InitDefaultsscc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_ASNDetails_default_instance_;
    new (ptr) ::kentik::kmi::v202212::ASNDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::ASNDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {
      &scc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
      &scc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,}};

static void InitDefaultsscc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_CustomerProvider_default_instance_;
    new (ptr) ::kentik::kmi::v202212::CustomerProvider();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::CustomerProvider::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static void InitDefaultsscc_info_GetASNDetailsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_GetASNDetailsRequest_default_instance_;
    new (ptr) ::kentik::kmi::v202212::GetASNDetailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::GetASNDetailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetASNDetailsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetASNDetailsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static void InitDefaultsscc_info_GetASNDetailsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_GetASNDetailsResponse_default_instance_;
    new (ptr) ::kentik::kmi::v202212::GetASNDetailsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::GetASNDetailsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetASNDetailsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetASNDetailsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {
      &scc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,}};

static void InitDefaultsscc_info_GetRankingsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_GetRankingsRequest_default_instance_;
    new (ptr) ::kentik::kmi::v202212::GetRankingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::GetRankingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRankingsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRankingsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static void InitDefaultsscc_info_GetRankingsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_GetRankingsResponse_default_instance_;
    new (ptr) ::kentik::kmi::v202212::GetRankingsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::GetRankingsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRankingsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRankingsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {
      &scc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,}};

static void InitDefaultsscc_info_ListMarketsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_ListMarketsRequest_default_instance_;
    new (ptr) ::kentik::kmi::v202212::ListMarketsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::ListMarketsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMarketsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListMarketsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static void InitDefaultsscc_info_ListMarketsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_ListMarketsResponse_default_instance_;
    new (ptr) ::kentik::kmi::v202212::ListMarketsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::ListMarketsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListMarketsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListMarketsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {
      &scc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,}};

static void InitDefaultsscc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_Market_default_instance_;
    new (ptr) ::kentik::kmi::v202212::Market();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::Market::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static void InitDefaultsscc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_Peer_default_instance_;
    new (ptr) ::kentik::kmi::v202212::Peer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::Peer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static void InitDefaultsscc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kmi::v202212::_Ranking_default_instance_;
    new (ptr) ::kentik::kmi::v202212::Ranking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kmi::v202212::Ranking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fkmi_2fv202212_2fkmi_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fkmi_2fv202212_2fkmi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fkmi_2fv202212_2fkmi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Market, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Market, market_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Market, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, rank_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, rank_change_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, score_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Ranking, score_change_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, score_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, singlehomed_customer_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, mutual_customer_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::CustomerProvider, mutual_provider_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Peer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Peer, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Peer, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::Peer, pfx_count_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, country_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, customers_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, providers_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ASNDetails, peers_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ListMarketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ListMarketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::ListMarketsResponse, markets_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsRequest, rank_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsRequest, limit_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsResponse, rankings_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetRankingsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, market_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, mutual_provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, mutual_customer_),
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsRequest, singlehomed_customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kmi::v202212::GetASNDetailsResponse, asn_details_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::kmi::v202212::Market)},
  { 7, 18, sizeof(::kentik::kmi::v202212::Ranking)},
  { 24, 35, sizeof(::kentik::kmi::v202212::CustomerProvider)},
  { 41, 49, sizeof(::kentik::kmi::v202212::Peer)},
  { 52, 63, sizeof(::kentik::kmi::v202212::ASNDetails)},
  { 69, -1, sizeof(::kentik::kmi::v202212::ListMarketsRequest)},
  { 74, -1, sizeof(::kentik::kmi::v202212::ListMarketsResponse)},
  { 80, 89, sizeof(::kentik::kmi::v202212::GetRankingsRequest)},
  { 93, -1, sizeof(::kentik::kmi::v202212::GetRankingsResponse)},
  { 100, -1, sizeof(::kentik::kmi::v202212::GetASNDetailsRequest)},
  { 112, -1, sizeof(::kentik::kmi::v202212::GetASNDetailsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_Market_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_Ranking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_CustomerProvider_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_ASNDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_ListMarketsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_ListMarketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_GetRankingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_GetRankingsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_GetASNDetailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kmi::v202212::_GetASNDetailsResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fkmi_2fv202212_2fkmi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034kentik/kmi/v202212/kmi.proto\022\022kentik.k"
  "mi.v202212\032\034google/api/annotations.proto"
  "\032\027google/api/client.proto\032\037google/api/fi"
  "eld_behavior.proto\032\037google/protobuf/time"
  "stamp.proto\032.protoc-gen-openapiv2/option"
  "s/annotations.proto\032+kentik/core/v202012"
  "alpha1/annotations.proto\"z\n\006Market\022B\n\tma"
  "rket_id\030\001 \001(\tB%\222A\0362\034Unique Geo Market id"
  "entifier\342A\001\003R\010marketId\022,\n\004name\030\002 \001(\tB\030\222A"
  "\0212\017Geo Market Name\342A\001\003R\004name\"\363\003\n\007Ranking"
  "\022>\n\003asn\030\001 \001(\rB\'\222A 2\036Autonomous System Nu"
  "mber (ASN)\342A\001\003H\000R\003asn\210\001\001\022:\n\004name\030\002 \001(\tB&"
  "\222A\0372\035Name of the Autonomous System\342A\001\003R\004"
  "name\022\?\n\004rank\030\003 \001(\rB&\222A\0372\035Rank of the Aut"
  "onomous System\342A\001\003H\001R\004rank\210\001\001\022S\n\013rank_ch"
  "ange\030\004 \001(\rB-\222A&2$Rank Change of the Auto"
  "nomous System\342A\001\003H\002R\nrankChange\210\001\001\022B\n\005sc"
  "ore\030\005 \001(\rB\'\222A 2\036Score of the Autonomous "
  "System\342A\001\003H\003R\005score\210\001\001\022V\n\014score_change\030\006"
  " \001(\rB.\222A\'2%Score Change of the Autonomou"
  "s System\342A\001\003H\004R\013scoreChange\210\001\001B\006\n\004_asnB\007"
  "\n\005_rankB\016\n\014_rank_changeB\010\n\006_scoreB\017\n\r_sc"
  "ore_change\"\272\004\n\020CustomerProvider\022>\n\003asn\030\001"
  " \001(\rB\'\222A 2\036Autonomous System Number (ASN"
  ")\342A\001\003H\000R\003asn\210\001\001\022:\n\004name\030\002 \001(\tB&\222A\0372\035Name"
  " of the Autonomous System\342A\001\003R\004name\022B\n\005s"
  "core\030\003 \001(\rB\'\222A 2\036Score of the Autonomous"
  " System\342A\001\003H\001R\005score\210\001\001\022\202\001\n\024singlehomed_"
  "customer\030\004 \001(\010BJ\222AC2ASinglehomed custome"
  "r (only one upstream provider to the int"
  "ernet)\342A\001\003H\002R\023singlehomedCustomer\210\001\001\022F\n\017"
  "mutual_customer\030\005 \001(\010B\030\222A\0212\017Mutual custo"
  "mer\342A\001\003H\003R\016mutualCustomer\210\001\001\022F\n\017mutual_p"
  "rovider\030\006 \001(\010B\030\222A\0212\017Mutual provider\342A\001\003H"
  "\004R\016mutualProvider\210\001\001B\006\n\004_asnB\010\n\006_scoreB\027"
  "\n\025_singlehomed_customerB\022\n\020_mutual_custo"
  "merB\022\n\020_mutual_provider\"\210\002\n\004Peer\022>\n\003asn\030"
  "\001 \001(\rB\'\222A 2\036Autonomous System Number (AS"
  "N)\342A\001\003H\000R\003asn\210\001\001\022:\n\004name\030\002 \001(\tB&\222A\0372\035Nam"
  "e of the Autonomous System\342A\001\003R\004name\022n\n\t"
  "pfx_count\030\003 \001(\rBL\222AE2CPrefix Count (numb"
  "er of distinct IP address blocks announc"
  "ed by AS)\342A\001\003H\001R\010pfxCount\210\001\001B\006\n\004_asnB\014\n\n"
  "_pfx_count\"\353\003\n\nASNDetails\022>\n\003asn\030\001 \001(\rB\'"
  "\222A 2\036Autonomous System Number (ASN)\342A\001\003H"
  "\000R\003asn\210\001\001\022:\n\004name\030\002 \001(\tB&\222A\0372\035Name of th"
  "e Autonomous System\342A\001\003R\004name\022Q\n\014country"
  "_name\030\003 \001(\tB.\222A\'2%Country Name of the Au"
  "tonomous System\342A\001\003R\013countryName\022^\n\tcust"
  "omers\030\004 \003(\0132$.kentik.kmi.v202212.Custome"
  "rProviderB\032\222A\0232\021List of Customers\342A\001\003R\tc"
  "ustomers\022^\n\tproviders\030\005 \003(\0132$.kentik.kmi"
  ".v202212.CustomerProviderB\032\222A\0232\021List of "
  "Providers\342A\001\003R\tproviders\022F\n\005peers\030\006 \003(\0132"
  "\030.kentik.kmi.v202212.PeerB\026\222A\0172\rList of "
  "Peers\342A\001\003R\005peersB\006\n\004_asn\"\024\n\022ListMarketsR"
  "equest\"]\n\023ListMarketsResponse\022F\n\007markets"
  "\030\001 \003(\0132\032.kentik.kmi.v202212.MarketB\020\222A\t2"
  "\007Markets\342A\001\003R\007markets\"\240\004\n\022GetRankingsReq"
  "uest\022g\n\tmarket_id\030\001 \001(\tBJ\222AC2AUnique Geo"
  " Market identifier (as provided by the L"
  "istMarkets RPC)\342A\001\002R\010marketId\022\342\001\n\trank_t"
  "ype\030\002 \001(\tB\304\001\222A\300\0012\275\001Type of the requested"
  " ranking (\'customer_base\', \'customer_bas"
  "e_retail\', \'customer_base_wholesome\', \'c"
  "ustomer_base_backbone\', \'customer_growth"
  "\', \'peering_base\'). Defaults to \'custome"
  "r_base\'.R\010rankType\022]\n\002ip\030\003 \001(\tBM\222AJ2HIP "
  "Address Family (\'v4\' or \'v6\') of request"
  "ed ranking. Defaults to \'v4\'.R\002ip\022S\n\005lim"
  "it\030\004 \001(\rB8\222A523Maximum number of entries"
  " returned. (Default: 600).H\000R\005limit\210\001\001B\010"
  "\n\006_limit\"\314\001\n\023GetRankingsResponse\022N\n\010rank"
  "ings\030\001 \003(\0132\033.kentik.kmi.v202212.RankingB"
  "\025\222A\0222\020List of rankingsR\010rankings\022e\n\rinva"
  "lid_count\030\002 \001(\rB@\222A=2;Number of invalid "
  "entries encountered while collecting dat"
  "aR\014invalidCount\"\354\005\n\024GetASNDetailsRequest"
  "\022g\n\tmarket_id\030\001 \001(\tBJ\222AC2AUnique Geo Mar"
  "ket identifier (as provided by the ListM"
  "arkets RPC)\342A\001\002R\010marketId\0229\n\003asn\030\002 \001(\tB\'"
  "\222A 2\036Autonomous System Number (ASN)\342A\001\002R"
  "\003asn\022H\n\002ip\030\003 \001(\tB8\222A523IP Address Family"
  " (\'v4\' or \'v6\'). Defaults to \'v4\'.R\002ip\022n"
  "\n\004type\030\004 \001(\tBZ\222AW2UType of the requested"
  " ASN (\'all\', \'customer\', \'provider\', \'pe"
  "er\'). Defaults to \'all\'.R\004type\022v\n\017mutual"
  "_provider\030\005 \001(\tBM\222AJ2HFilter by mutual p"
  "rovider (\'all\', \'only\', \'exclude\'). Defa"
  "ults to \'all\'.R\016mutualProvider\022v\n\017mutual"
  "_customer\030\006 \001(\tBM\222AJ2HFilter by mutual c"
  "ustomer (\'all\', \'only\', \'exclude\'). Defa"
  "ults to \'all\'.R\016mutualCustomer\022\205\001\n\024singl"
  "ehomed_customer\030\007 \001(\tBR\222AO2MFilter by si"
  "nglehomed customer (\'all\', \'only\', \'excl"
  "ude\'). Defaults to \'all\'.R\023singlehomedCu"
  "stomer\"\255\001\n\025GetASNDetailsResponse\022\223\001\n\013asn"
  "_details\030\001 \001(\0132\036.kentik.kmi.v202212.ASND"
  "etailsBR\222AO2MMetadata and list of custom"
  "ers, providers, and peers for an Autonom"
  "ous SystemR\nasnDetails2\253\007\n\nKmiService\022\344\001"
  "\n\013ListMarkets\022&.kentik.kmi.v202212.ListM"
  "arketsRequest\032\'.kentik.kmi.v202212.ListM"
  "arketsResponse\"\203\001\222AR\022\035List all geo marke"
  "ts for KMI.\032$Returns list of geo markets"
  " for KMI.*\013ListMarkets\362\327\002\016admin.kmi:read"
  "\202\323\344\223\002\026\022\024/kmi/v202212/markets\022\221\002\n\013GetRank"
  "ings\022&.kentik.kmi.v202212.GetRankingsReq"
  "uest\032\'.kentik.kmi.v202212.GetRankingsRes"
  "ponse\"\260\001\222A\\\022.List KMI rankings by geo ma"
  "rket and rank type.\032\035Returns list of KMI"
  " rankings.*\013GetRankings\362\327\002\016admin.kmi:rea"
  "d\202\323\344\223\0029\"4/kmi/v202212/market/{market_id}"
  "/rankings/{rank_type}:\001*\022\370\002\n\rGetASNDetai"
  "ls\022(.kentik.kmi.v202212.GetASNDetailsReq"
  "uest\032).kentik.kmi.v202212.GetASNDetailsR"
  "esponse\"\221\002\222A\274\001\022SList metadata and list o"
  "f customers, providers, and peers for an"
  " Autonomous System.\032VReturns metadata an"
  "d list of customers, providers, and peer"
  "s for an Autonomous System.*\rGetASNDetai"
  "ls\362\327\002\016admin.kmi:read\202\323\344\223\0029\"4/kmi/v202212"
  "/market/{market_id}/network/{asn}/{type}"
  ":\001*\032\'\312A\023grpc.api.kentik.com\352\327\002\tadmin.kmi"
  "\220\330\002\003B\302\017Z:github.com/kentik/api-schema/ge"
  "n/go/kentik/kmi/v202212;kmi\222A\202\017\022\233\r\n$Kent"
  "ik Market Intelligence (KMI) API\022\242\014# Ove"
  "rview\nThe Kentik Market Intelligence (KM"
  "I) API provides programmatic access to i"
  "nformation related to KMI rankings, KMI "
  "markets, and the customers, providers, a"
  "nd peers of individual Autonomous System"
  "s (ASes). This information is derived fr"
  "om analysis of the global routing table,"
  " which enables us to classify the peerin"
  "g and transit relationships between ASes"
  " and to identify the providers, peers, a"
  "nd customers of a given AS in any geogra"
  "phy (market). KMI estimates the volume o"
  "f IP space transited by ASes in differen"
  "t geographies and produces rankings base"
  "d on that volume, thereby enabling users"
  " to compare ASes in various markets.\n\n# "
  "KMI Ranking Types\n\nThe following types o"
  "f rankings are shown:\n- **Customer Base*"
  "*: Ranked by the size of the overall cus"
  "tomer base, estimated by determining how"
  " much IP address space a given AS transi"
  "ts relative to other ASes:\n    - Retail "
  "networks  provide services (e.g. origina"
  "te content) or have end-users that are c"
  "onsumers of services (e.g. ISPs or \"eyeb"
  "all\" networks).\n    - Wholesale networks"
  "  connect retail networks to backbone ne"
  "tworks.\n    - Backbone networks carry hi"
  "gh volumes of traffic between wholesale "
  "networks.\n- **Customer Growth**: Ranked "
  "by the change in overall customer base ("
  "gain/loss of prefixes) over the last 20 "
  "days.\n- **Peering**: Ranked by the amoun"
  "t of IP address space sent to the AS ove"
  "r a settlement-free peering session.\n\nBo"
  "th REST endpoint and gRPC RPCs are provi"
  "ded.\n\n**_Note:_** More information about"
  " KMI can be found at [Kentik Market Inte"
  "lligence](https://kb.kentik.com/v4/Ha04."
  "htm).\"E\n\026Kentik API Engineering\022+https:/"
  "/github.com/kentik/api-schema-public2\007v2"
  "02212*\001\0022\020application/json:\020application/"
  "jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Email \002\n\""
  "\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005"
  "email\022\000\n\t\n\005token\022\000r]\n%General informatio"
  "n about Kentik APIs\0224https://kb.kentik.c"
  "om/v0/Ab09.htm#Ab09-APIs_Overviewb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto_sccs[11] = {
  &scc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_GetASNDetailsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_GetASNDetailsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_GetRankingsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_GetRankingsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_ListMarketsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_ListMarketsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
  &scc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fkmi_2fv202212_2fkmi_2eproto, "kentik/kmi/v202212/kmi.proto", 6961,
  &descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto_once, descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto_sccs, descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto_deps, 11, 6,
  schemas, file_default_instances, TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto::offsets,
  file_level_metadata_kentik_2fkmi_2fv202212_2fkmi_2eproto, 11, file_level_enum_descriptors_kentik_2fkmi_2fv202212_2fkmi_2eproto, file_level_service_descriptors_kentik_2fkmi_2fv202212_2fkmi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fkmi_2fv202212_2fkmi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto)), true);
namespace kentik {
namespace kmi {
namespace v202212 {

// ===================================================================

void Market::InitAsDefaultInstance() {
}
class Market::_Internal {
 public:
};

Market::Market(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.Market)
}
Market::Market(const Market& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_market_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.Market)
}

void Market::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Market::~Market() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.Market)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Market::ArenaDtor(void* object) {
  Market* _this = reinterpret_cast< Market* >(object);
  (void)_this;
}
void Market::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Market& Market::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Market_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void Market::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.Market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.Market.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.Market.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.Market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.Market.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.Market.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.Market)
  return target;
}

size_t Market::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.Market)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.Market)
  GOOGLE_DCHECK_NE(&from, this);
  const Market* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.Market)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.Market)
    MergeFrom(*source);
  }
}

void Market::MergeFrom(const Market& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.Market)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Market::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.Market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market::CopyFrom(const Market& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.Market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market::IsInitialized() const {
  return true;
}

void Market::InternalSwap(Market* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Market::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ranking::InitAsDefaultInstance() {
}
class Ranking::_Internal {
 public:
  using HasBits = decltype(std::declval<Ranking>()._has_bits_);
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Ranking::Ranking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.Ranking)
}
Ranking::Ranking(const Ranking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_change_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(score_change_));
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.Ranking)
}

void Ranking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_change_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(score_change_));
}

Ranking::~Ranking() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.Ranking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ranking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ranking::ArenaDtor(void* object) {
  Ranking* _this = reinterpret_cast< Ranking* >(object);
  (void)_this;
}
void Ranking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ranking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ranking& Ranking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ranking_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void Ranking::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.Ranking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&asn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_change_) -
        reinterpret_cast<char*>(&asn_)) + sizeof(score_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ranking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_asn(&has_bits);
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.Ranking.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank = 3[json_name = "rank", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank_change = 4[json_name = "rankChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rank_change(&has_bits);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 score = 5[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 score_change = 6[json_name = "scoreChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_score_change(&has_bits);
          score_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ranking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.Ranking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_asn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.Ranking.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 rank = 3[json_name = "rank", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rank(), target);
  }

  // uint32 rank_change = 4[json_name = "rankChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_rank_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rank_change(), target);
  }

  // uint32 score = 5[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_score(), target);
  }

  // uint32 score_change = 6[json_name = "scoreChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_score_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_score_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.Ranking)
  return target;
}

size_t Ranking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.Ranking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_asn());
    }

    // uint32 rank = 3[json_name = "rank", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // uint32 rank_change = 4[json_name = "rankChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_change());
    }

    // uint32 score = 5[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // uint32 score_change = 6[json_name = "scoreChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_change());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ranking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  const Ranking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ranking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.Ranking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.Ranking)
    MergeFrom(*source);
  }
}

void Ranking::MergeFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      asn_ = from.asn_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_change_ = from.score_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ranking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking::CopyFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking::IsInitialized() const {
  return true;
}

void Ranking::InternalSwap(Ranking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ranking, score_change_)
      + sizeof(Ranking::score_change_)
      - PROTOBUF_FIELD_OFFSET(Ranking, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ranking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomerProvider::InitAsDefaultInstance() {
}
class CustomerProvider::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomerProvider>()._has_bits_);
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_singlehomed_customer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mutual_customer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mutual_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CustomerProvider::CustomerProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.CustomerProvider)
}
CustomerProvider::CustomerProvider(const CustomerProvider& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&mutual_provider_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(mutual_provider_));
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.CustomerProvider)
}

void CustomerProvider::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mutual_provider_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(mutual_provider_));
}

CustomerProvider::~CustomerProvider() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.CustomerProvider)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomerProvider::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomerProvider::ArenaDtor(void* object) {
  CustomerProvider* _this = reinterpret_cast< CustomerProvider* >(object);
  (void)_this;
}
void CustomerProvider::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerProvider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerProvider& CustomerProvider::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerProvider_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void CustomerProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.CustomerProvider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&asn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mutual_provider_) -
        reinterpret_cast<char*>(&asn_)) + sizeof(mutual_provider_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerProvider::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_asn(&has_bits);
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.CustomerProvider.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 score = 3[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool singlehomed_customer = 4[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_singlehomed_customer(&has_bits);
          singlehomed_customer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mutual_customer = 5[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mutual_customer(&has_bits);
          mutual_customer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mutual_provider = 6[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mutual_provider(&has_bits);
          mutual_provider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerProvider::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.CustomerProvider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_asn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.CustomerProvider.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 score = 3[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_score(), target);
  }

  // bool singlehomed_customer = 4[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_singlehomed_customer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_singlehomed_customer(), target);
  }

  // bool mutual_customer = 5[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_mutual_customer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mutual_customer(), target);
  }

  // bool mutual_provider = 6[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_mutual_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mutual_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.CustomerProvider)
  return target;
}

size_t CustomerProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.CustomerProvider)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_asn());
    }

    // uint32 score = 3[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // bool singlehomed_customer = 4[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // bool mutual_customer = 5[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool mutual_provider = 6[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerProvider::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.CustomerProvider)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerProvider* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerProvider>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.CustomerProvider)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.CustomerProvider)
    MergeFrom(*source);
  }
}

void CustomerProvider::MergeFrom(const CustomerProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.CustomerProvider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      asn_ = from.asn_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      singlehomed_customer_ = from.singlehomed_customer_;
    }
    if (cached_has_bits & 0x00000008u) {
      mutual_customer_ = from.mutual_customer_;
    }
    if (cached_has_bits & 0x00000010u) {
      mutual_provider_ = from.mutual_provider_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomerProvider::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.CustomerProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerProvider::CopyFrom(const CustomerProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.CustomerProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerProvider::IsInitialized() const {
  return true;
}

void CustomerProvider::InternalSwap(CustomerProvider* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomerProvider, mutual_provider_)
      + sizeof(CustomerProvider::mutual_provider_)
      - PROTOBUF_FIELD_OFFSET(CustomerProvider, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerProvider::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
}
class Peer::_Internal {
 public:
  using HasBits = decltype(std::declval<Peer>()._has_bits_);
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pfx_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Peer::Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&pfx_count_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(pfx_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.Peer)
}

void Peer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pfx_count_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(pfx_count_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.Peer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Peer::ArenaDtor(void* object) {
  Peer* _this = reinterpret_cast< Peer* >(object);
  (void)_this;
}
void Peer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Peer& Peer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Peer_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&asn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pfx_count_) -
        reinterpret_cast<char*>(&asn_)) + sizeof(pfx_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_asn(&has_bits);
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.Peer.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pfx_count = 3[json_name = "pfxCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pfx_count(&has_bits);
          pfx_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_asn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.Peer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 pfx_count = 3[json_name = "pfxCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_pfx_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pfx_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_asn());
    }

    // uint32 pfx_count = 3[json_name = "pfxCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pfx_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      asn_ = from.asn_;
    }
    if (cached_has_bits & 0x00000002u) {
      pfx_count_ = from.pfx_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Peer, pfx_count_)
      + sizeof(Peer::pfx_count_)
      - PROTOBUF_FIELD_OFFSET(Peer, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ASNDetails::InitAsDefaultInstance() {
}
class ASNDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ASNDetails>()._has_bits_);
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ASNDetails::ASNDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  customers_(arena),
  providers_(arena),
  peers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.ASNDetails)
}
ASNDetails::ASNDetails(const ASNDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      customers_(from.customers_),
      providers_(from.providers_),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  country_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country_name().empty()) {
    country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country_name(),
      GetArena());
  }
  asn_ = from.asn_;
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.ASNDetails)
}

void ASNDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_ = 0u;
}

ASNDetails::~ASNDetails() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.ASNDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASNDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ASNDetails::ArenaDtor(void* object) {
  ASNDetails* _this = reinterpret_cast< ASNDetails* >(object);
  (void)_this;
}
void ASNDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASNDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ASNDetails& ASNDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ASNDetails_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void ASNDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.ASNDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customers_.Clear();
  providers_.Clear();
  peers_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASNDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_asn(&has_bits);
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.ASNDetails.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country_name = 3[json_name = "countryName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.ASNDetails.country_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kmi.v202212.CustomerProvider customers = 4[json_name = "customers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_customers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kmi.v202212.CustomerProvider providers = 5[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kmi.v202212.Peer peers = 6[json_name = "peers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASNDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.ASNDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_asn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.ASNDetails.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string country_name = 3[json_name = "countryName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_name().data(), static_cast<int>(this->_internal_country_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.ASNDetails.country_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_name(), target);
  }

  // repeated .kentik.kmi.v202212.CustomerProvider customers = 4[json_name = "customers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_customers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_customers(i), target, stream);
  }

  // repeated .kentik.kmi.v202212.CustomerProvider providers = 5[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_providers(i), target, stream);
  }

  // repeated .kentik.kmi.v202212.Peer peers = 6[json_name = "peers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.ASNDetails)
  return target;
}

size_t ASNDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.ASNDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.kmi.v202212.CustomerProvider customers = 4[json_name = "customers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_customers_size();
  for (const auto& msg : this->customers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kmi.v202212.CustomerProvider providers = 5[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kmi.v202212.Peer peers = 6[json_name = "peers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string country_name = 3[json_name = "countryName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_name());
  }

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASNDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.ASNDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ASNDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASNDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.ASNDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.ASNDetails)
    MergeFrom(*source);
  }
}

void ASNDetails::MergeFrom(const ASNDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.ASNDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  customers_.MergeFrom(from.customers_);
  providers_.MergeFrom(from.providers_);
  peers_.MergeFrom(from.peers_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.country_name().size() > 0) {
    _internal_set_country_name(from._internal_country_name());
  }
  if (from._internal_has_asn()) {
    _internal_set_asn(from._internal_asn());
  }
}

void ASNDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.ASNDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASNDetails::CopyFrom(const ASNDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.ASNDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASNDetails::IsInitialized() const {
  return true;
}

void ASNDetails::InternalSwap(ASNDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  customers_.InternalSwap(&other->customers_);
  providers_.InternalSwap(&other->providers_);
  peers_.InternalSwap(&other->peers_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_name_.Swap(&other->country_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(asn_, other->asn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASNDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMarketsRequest::InitAsDefaultInstance() {
}
class ListMarketsRequest::_Internal {
 public:
};

ListMarketsRequest::ListMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.ListMarketsRequest)
}
ListMarketsRequest::ListMarketsRequest(const ListMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.ListMarketsRequest)
}

void ListMarketsRequest::SharedCtor() {
}

ListMarketsRequest::~ListMarketsRequest() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.ListMarketsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMarketsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListMarketsRequest::ArenaDtor(void* object) {
  ListMarketsRequest* _this = reinterpret_cast< ListMarketsRequest* >(object);
  (void)_this;
}
void ListMarketsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMarketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMarketsRequest& ListMarketsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMarketsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void ListMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.ListMarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMarketsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.ListMarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.ListMarketsRequest)
  return target;
}

size_t ListMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.ListMarketsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMarketsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.ListMarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMarketsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMarketsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.ListMarketsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.ListMarketsRequest)
    MergeFrom(*source);
  }
}

void ListMarketsRequest::MergeFrom(const ListMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.ListMarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListMarketsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.ListMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMarketsRequest::CopyFrom(const ListMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.ListMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketsRequest::IsInitialized() const {
  return true;
}

void ListMarketsRequest::InternalSwap(ListMarketsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMarketsResponse::InitAsDefaultInstance() {
}
class ListMarketsResponse::_Internal {
 public:
};

ListMarketsResponse::ListMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.ListMarketsResponse)
}
ListMarketsResponse::ListMarketsResponse(const ListMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markets_(from.markets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.ListMarketsResponse)
}

void ListMarketsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMarketsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
}

ListMarketsResponse::~ListMarketsResponse() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.ListMarketsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListMarketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListMarketsResponse::ArenaDtor(void* object) {
  ListMarketsResponse* _this = reinterpret_cast< ListMarketsResponse* >(object);
  (void)_this;
}
void ListMarketsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMarketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMarketsResponse& ListMarketsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMarketsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void ListMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.ListMarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.kmi.v202212.Market markets = 1[json_name = "markets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMarketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.ListMarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.kmi.v202212.Market markets = 1[json_name = "markets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.ListMarketsResponse)
  return target;
}

size_t ListMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.ListMarketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.kmi.v202212.Market markets = 1[json_name = "markets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->markets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMarketsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.ListMarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMarketsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMarketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.ListMarketsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.ListMarketsResponse)
    MergeFrom(*source);
  }
}

void ListMarketsResponse::MergeFrom(const ListMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.ListMarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_.MergeFrom(from.markets_);
}

void ListMarketsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.ListMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMarketsResponse::CopyFrom(const ListMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.ListMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketsResponse::IsInitialized() const {
  return true;
}

void ListMarketsResponse::InternalSwap(ListMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markets_.InternalSwap(&other->markets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRankingsRequest::InitAsDefaultInstance() {
}
class GetRankingsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRankingsRequest>()._has_bits_);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRankingsRequest::GetRankingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.GetRankingsRequest)
}
GetRankingsRequest::GetRankingsRequest(const GetRankingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_market_id(),
      GetArena());
  }
  rank_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rank_type().empty()) {
    rank_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rank_type(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.GetRankingsRequest)
}

void GetRankingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRankingsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rank_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = 0u;
}

GetRankingsRequest::~GetRankingsRequest() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.GetRankingsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRankingsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rank_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRankingsRequest::ArenaDtor(void* object) {
  GetRankingsRequest* _this = reinterpret_cast< GetRankingsRequest* >(object);
  (void)_this;
}
void GetRankingsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRankingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRankingsRequest& GetRankingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRankingsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void GetRankingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.GetRankingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rank_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  limit_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRankingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetRankingsRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rank_type = 2[json_name = "rankType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rank_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetRankingsRequest.rank_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetRankingsRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 4[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRankingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.GetRankingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetRankingsRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string rank_type = 2[json_name = "rankType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->rank_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rank_type().data(), static_cast<int>(this->_internal_rank_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetRankingsRequest.rank_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rank_type(), target);
  }

  // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetRankingsRequest.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 limit = 4[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.GetRankingsRequest)
  return target;
}

size_t GetRankingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.GetRankingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string rank_type = 2[json_name = "rankType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->rank_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rank_type());
  }

  // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 limit = 4[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRankingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.GetRankingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRankingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRankingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.GetRankingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.GetRankingsRequest)
    MergeFrom(*source);
  }
}

void GetRankingsRequest::MergeFrom(const GetRankingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.GetRankingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.rank_type().size() > 0) {
    _internal_set_rank_type(from._internal_rank_type());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_limit()) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetRankingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.GetRankingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRankingsRequest::CopyFrom(const GetRankingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.GetRankingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRankingsRequest::IsInitialized() const {
  return true;
}

void GetRankingsRequest::InternalSwap(GetRankingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rank_type_.Swap(&other->rank_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRankingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRankingsResponse::InitAsDefaultInstance() {
}
class GetRankingsResponse::_Internal {
 public:
};

GetRankingsResponse::GetRankingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rankings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.GetRankingsResponse)
}
GetRankingsResponse::GetRankingsResponse(const GetRankingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rankings_(from.rankings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.GetRankingsResponse)
}

void GetRankingsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRankingsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  invalid_count_ = 0u;
}

GetRankingsResponse::~GetRankingsResponse() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.GetRankingsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRankingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetRankingsResponse::ArenaDtor(void* object) {
  GetRankingsResponse* _this = reinterpret_cast< GetRankingsResponse* >(object);
  (void)_this;
}
void GetRankingsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRankingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRankingsResponse& GetRankingsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRankingsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void GetRankingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.GetRankingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankings_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRankingsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.kmi.v202212.Ranking rankings = 1[json_name = "rankings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRankingsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.GetRankingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.kmi.v202212.Ranking rankings = 1[json_name = "rankings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rankings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rankings(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.GetRankingsResponse)
  return target;
}

size_t GetRankingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.GetRankingsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.kmi.v202212.Ranking rankings = 1[json_name = "rankings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_rankings_size();
  for (const auto& msg : this->rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRankingsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.GetRankingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRankingsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRankingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.GetRankingsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.GetRankingsResponse)
    MergeFrom(*source);
  }
}

void GetRankingsResponse::MergeFrom(const GetRankingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.GetRankingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankings_.MergeFrom(from.rankings_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void GetRankingsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.GetRankingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRankingsResponse::CopyFrom(const GetRankingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.GetRankingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRankingsResponse::IsInitialized() const {
  return true;
}

void GetRankingsResponse::InternalSwap(GetRankingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rankings_.InternalSwap(&other->rankings_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRankingsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetASNDetailsRequest::InitAsDefaultInstance() {
}
class GetASNDetailsRequest::_Internal {
 public:
};

GetASNDetailsRequest::GetASNDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.GetASNDetailsRequest)
}
GetASNDetailsRequest::GetASNDetailsRequest(const GetASNDetailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_id().empty()) {
    market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_market_id(),
      GetArena());
  }
  asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asn().empty()) {
    asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asn(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  mutual_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mutual_provider().empty()) {
    mutual_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mutual_provider(),
      GetArena());
  }
  mutual_customer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mutual_customer().empty()) {
    mutual_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mutual_customer(),
      GetArena());
  }
  singlehomed_customer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_singlehomed_customer().empty()) {
    singlehomed_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_singlehomed_customer(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.GetASNDetailsRequest)
}

void GetASNDetailsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetASNDetailsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  market_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mutual_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mutual_customer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  singlehomed_customer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetASNDetailsRequest::~GetASNDetailsRequest() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.GetASNDetailsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetASNDetailsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mutual_provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mutual_customer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  singlehomed_customer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetASNDetailsRequest::ArenaDtor(void* object) {
  GetASNDetailsRequest* _this = reinterpret_cast< GetASNDetailsRequest* >(object);
  (void)_this;
}
void GetASNDetailsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetASNDetailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetASNDetailsRequest& GetASNDetailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetASNDetailsRequest_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void GetASNDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.GetASNDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mutual_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mutual_customer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  singlehomed_customer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetASNDetailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.market_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asn = 2[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.asn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mutual_provider = 5[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mutual_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mutual_customer = 6[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mutual_customer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_singlehomed_customer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetASNDetailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.GetASNDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->market_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_id().data(), static_cast<int>(this->_internal_market_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.market_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market_id(), target);
  }

  // string asn = 2[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asn().data(), static_cast<int>(this->_internal_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.asn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asn(), target);
  }

  // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // string type = 4[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string mutual_provider = 5[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->mutual_provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mutual_provider().data(), static_cast<int>(this->_internal_mutual_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mutual_provider(), target);
  }

  // string mutual_customer = 6[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->mutual_customer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mutual_customer().data(), static_cast<int>(this->_internal_mutual_customer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mutual_customer(), target);
  }

  // string singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->singlehomed_customer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_singlehomed_customer().data(), static_cast<int>(this->_internal_singlehomed_customer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_singlehomed_customer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.GetASNDetailsRequest)
  return target;
}

size_t GetASNDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.GetASNDetailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->market_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_id());
  }

  // string asn = 2[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asn());
  }

  // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string type = 4[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string mutual_provider = 5[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->mutual_provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mutual_provider());
  }

  // string mutual_customer = 6[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->mutual_customer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mutual_customer());
  }

  // string singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->singlehomed_customer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_singlehomed_customer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetASNDetailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.GetASNDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetASNDetailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetASNDetailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.GetASNDetailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.GetASNDetailsRequest)
    MergeFrom(*source);
  }
}

void GetASNDetailsRequest::MergeFrom(const GetASNDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.GetASNDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id().size() > 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.asn().size() > 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.mutual_provider().size() > 0) {
    _internal_set_mutual_provider(from._internal_mutual_provider());
  }
  if (from.mutual_customer().size() > 0) {
    _internal_set_mutual_customer(from._internal_mutual_customer());
  }
  if (from.singlehomed_customer().size() > 0) {
    _internal_set_singlehomed_customer(from._internal_singlehomed_customer());
  }
}

void GetASNDetailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.GetASNDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetASNDetailsRequest::CopyFrom(const GetASNDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.GetASNDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetASNDetailsRequest::IsInitialized() const {
  return true;
}

void GetASNDetailsRequest::InternalSwap(GetASNDetailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_id_.Swap(&other->market_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_.Swap(&other->asn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mutual_provider_.Swap(&other->mutual_provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mutual_customer_.Swap(&other->mutual_customer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  singlehomed_customer_.Swap(&other->singlehomed_customer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetASNDetailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetASNDetailsResponse::InitAsDefaultInstance() {
  ::kentik::kmi::v202212::_GetASNDetailsResponse_default_instance_._instance.get_mutable()->asn_details_ = const_cast< ::kentik::kmi::v202212::ASNDetails*>(
      ::kentik::kmi::v202212::ASNDetails::internal_default_instance());
}
class GetASNDetailsResponse::_Internal {
 public:
  static const ::kentik::kmi::v202212::ASNDetails& asn_details(const GetASNDetailsResponse* msg);
};

const ::kentik::kmi::v202212::ASNDetails&
GetASNDetailsResponse::_Internal::asn_details(const GetASNDetailsResponse* msg) {
  return *msg->asn_details_;
}
GetASNDetailsResponse::GetASNDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kmi.v202212.GetASNDetailsResponse)
}
GetASNDetailsResponse::GetASNDetailsResponse(const GetASNDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asn_details()) {
    asn_details_ = new ::kentik::kmi::v202212::ASNDetails(*from.asn_details_);
  } else {
    asn_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kmi.v202212.GetASNDetailsResponse)
}

void GetASNDetailsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetASNDetailsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  asn_details_ = nullptr;
}

GetASNDetailsResponse::~GetASNDetailsResponse() {
  // @@protoc_insertion_point(destructor:kentik.kmi.v202212.GetASNDetailsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetASNDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asn_details_;
}

void GetASNDetailsResponse::ArenaDtor(void* object) {
  GetASNDetailsResponse* _this = reinterpret_cast< GetASNDetailsResponse* >(object);
  (void)_this;
}
void GetASNDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetASNDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetASNDetailsResponse& GetASNDetailsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetASNDetailsResponse_kentik_2fkmi_2fv202212_2fkmi_2eproto.base);
  return *internal_default_instance();
}


void GetASNDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kmi.v202212.GetASNDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asn_details_ != nullptr) {
    delete asn_details_;
  }
  asn_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetASNDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kmi.v202212.ASNDetails asn_details = 1[json_name = "asnDetails", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asn_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetASNDetailsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kmi.v202212.GetASNDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kmi.v202212.ASNDetails asn_details = 1[json_name = "asnDetails", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_asn_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asn_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kmi.v202212.GetASNDetailsResponse)
  return target;
}

size_t GetASNDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kmi.v202212.GetASNDetailsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.kmi.v202212.ASNDetails asn_details = 1[json_name = "asnDetails", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_asn_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asn_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetASNDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kmi.v202212.GetASNDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetASNDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetASNDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kmi.v202212.GetASNDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kmi.v202212.GetASNDetailsResponse)
    MergeFrom(*source);
  }
}

void GetASNDetailsResponse::MergeFrom(const GetASNDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kmi.v202212.GetASNDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asn_details()) {
    _internal_mutable_asn_details()->::kentik::kmi::v202212::ASNDetails::MergeFrom(from._internal_asn_details());
  }
}

void GetASNDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kmi.v202212.GetASNDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetASNDetailsResponse::CopyFrom(const GetASNDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kmi.v202212.GetASNDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetASNDetailsResponse::IsInitialized() const {
  return true;
}

void GetASNDetailsResponse::InternalSwap(GetASNDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(asn_details_, other->asn_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetASNDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202212
}  // namespace kmi
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::Market* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::Market >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::Market >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::Ranking* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::Ranking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::Ranking >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::CustomerProvider* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::CustomerProvider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::CustomerProvider >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::Peer* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::ASNDetails* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::ASNDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::ASNDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::ListMarketsRequest* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::ListMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::ListMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::ListMarketsResponse* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::ListMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::ListMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::GetRankingsRequest* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::GetRankingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::GetRankingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::GetRankingsResponse* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::GetRankingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::GetRankingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::GetASNDetailsRequest* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::GetASNDetailsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::GetASNDetailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kmi::v202212::GetASNDetailsResponse* Arena::CreateMaybeMessage< ::kentik::kmi::v202212::GetASNDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kmi::v202212::GetASNDetailsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
