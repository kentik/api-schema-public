// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/ktrac/route/v202104/annotations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto;
namespace kentik {
namespace ktrac {
namespace route {
namespace v202104 {
class Annotations;
class AnnotationsDefaultTypeInternal;
extern AnnotationsDefaultTypeInternal _Annotations_default_instance_;
}  // namespace v202104
}  // namespace route
}  // namespace ktrac
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::ktrac::route::v202104::Annotations* Arena::CreateMaybeMessage<::kentik::ktrac::route::v202104::Annotations>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace ktrac {
namespace route {
namespace v202104 {

enum RpkiStatus : int {
  RPKI_STATUS_UNSPECIFIED = 0,
  RPKI_STATUS_NOT_FOUND = 1,
  RPKI_STATUS_EXPLICIT_INVALID = 2,
  RPKI_STATUS_INVALID_PREFIX = 3,
  RPKI_STATUS_INVALID = 4,
  RPKI_STATUS_VALID = 5,
  RPKI_STATUS_ERROR = 8,
  RpkiStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpkiStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpkiStatus_IsValid(int value);
constexpr RpkiStatus RpkiStatus_MIN = RPKI_STATUS_UNSPECIFIED;
constexpr RpkiStatus RpkiStatus_MAX = RPKI_STATUS_ERROR;
constexpr int RpkiStatus_ARRAYSIZE = RpkiStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpkiStatus_descriptor();
template<typename T>
inline const std::string& RpkiStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpkiStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpkiStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpkiStatus_descriptor(), enum_t_value);
}
inline bool RpkiStatus_Parse(
    const std::string& name, RpkiStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpkiStatus>(
    RpkiStatus_descriptor(), name, value);
}
// ===================================================================

class Annotations PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.ktrac.route.v202104.Annotations) */ {
 public:
  inline Annotations() : Annotations(nullptr) {};
  virtual ~Annotations();

  Annotations(const Annotations& from);
  Annotations(Annotations&& from) noexcept
    : Annotations() {
    *this = ::std::move(from);
  }

  inline Annotations& operator=(const Annotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotations& operator=(Annotations&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotations* internal_default_instance() {
    return reinterpret_cast<const Annotations*>(
               &_Annotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Annotations& a, Annotations& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotations* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotations* New() const final {
    return CreateMaybeMessage<Annotations>(nullptr);
  }

  Annotations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotations& from);
  void MergeFrom(const Annotations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.ktrac.route.v202104.Annotations";
  }
  protected:
  explicit Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto);
    return ::descriptor_table_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpkiStatusFieldNumber = 1,
  };
  // .kentik.ktrac.route.v202104.RpkiStatus rpki_status = 1[json_name = "rpkiStatus"];
  void clear_rpki_status();
  ::kentik::ktrac::route::v202104::RpkiStatus rpki_status() const;
  void set_rpki_status(::kentik::ktrac::route::v202104::RpkiStatus value);
  private:
  ::kentik::ktrac::route::v202104::RpkiStatus _internal_rpki_status() const;
  void _internal_set_rpki_status(::kentik::ktrac::route::v202104::RpkiStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.ktrac.route.v202104.Annotations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int rpki_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Annotations

// .kentik.ktrac.route.v202104.RpkiStatus rpki_status = 1[json_name = "rpkiStatus"];
inline void Annotations::clear_rpki_status() {
  rpki_status_ = 0;
}
inline ::kentik::ktrac::route::v202104::RpkiStatus Annotations::_internal_rpki_status() const {
  return static_cast< ::kentik::ktrac::route::v202104::RpkiStatus >(rpki_status_);
}
inline ::kentik::ktrac::route::v202104::RpkiStatus Annotations::rpki_status() const {
  // @@protoc_insertion_point(field_get:kentik.ktrac.route.v202104.Annotations.rpki_status)
  return _internal_rpki_status();
}
inline void Annotations::_internal_set_rpki_status(::kentik::ktrac::route::v202104::RpkiStatus value) {
  
  rpki_status_ = value;
}
inline void Annotations::set_rpki_status(::kentik::ktrac::route::v202104::RpkiStatus value) {
  _internal_set_rpki_status(value);
  // @@protoc_insertion_point(field_set:kentik.ktrac.route.v202104.Annotations.rpki_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v202104
}  // namespace route
}  // namespace ktrac
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::ktrac::route::v202104::RpkiStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::ktrac::route::v202104::RpkiStatus>() {
  return ::kentik::ktrac::route::v202104::RpkiStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fktrac_2froute_2fv202104_2fannotations_2eproto
