// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/ktrac/route/v202104/elem.proto

#include "kentik/ktrac/route/v202104/elem.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fktrac_2froute_2fv202104_2felem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto;
namespace kentik {
namespace ktrac {
namespace route {
namespace v202104 {
class ElemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Elem> _instance;
} _Elem_default_instance_;
class VantagePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VantagePoint> _instance;
} _VantagePoint_default_instance_;
class VantagePointTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VantagePointTable> _instance;
} _VantagePointTable_default_instance_;
class UnicastNlriDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnicastNlri> _instance;
} _UnicastNlri_default_instance_;
class L3vpnNlriDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L3vpnNlri> _instance;
} _L3vpnNlri_default_instance_;
class MplsLabelStackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MplsLabelStack> _instance;
} _MplsLabelStack_default_instance_;
class PeerStateElemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerStateElem> _instance;
} _PeerStateElem_default_instance_;
class AttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attributes> _instance;
} _Attributes_default_instance_;
class RibEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RibEntry> _instance;
} _RibEntry_default_instance_;
}  // namespace v202104
}  // namespace route
}  // namespace ktrac
}  // namespace kentik
static void InitDefaultsscc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_Attributes_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::Attributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::Attributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {}};

static void InitDefaultsscc_info_Elem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_Elem_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::Elem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::Elem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Elem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Elem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
      &scc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
      &scc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
      &scc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
      &scc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
      &scc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,}};

static void InitDefaultsscc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_L3vpnNlri_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::L3vpnNlri();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::L3vpnNlri::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {
      &scc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,}};

static void InitDefaultsscc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_MplsLabelStack_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::MplsLabelStack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::MplsLabelStack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {}};

static void InitDefaultsscc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_PeerStateElem_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::PeerStateElem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::PeerStateElem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {}};

static void InitDefaultsscc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_RibEntry_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::RibEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::RibEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_UnicastNlri_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::UnicastNlri();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::UnicastNlri::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {}};

static void InitDefaultsscc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_VantagePoint_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::VantagePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::VantagePoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {}};

static void InitDefaultsscc_info_VantagePointTable_kentik_2fktrac_2froute_2fv202104_2felem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::ktrac::route::v202104::_VantagePointTable_default_instance_;
    new (ptr) ::kentik::ktrac::route::v202104::VantagePointTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::ktrac::route::v202104::VantagePointTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VantagePointTable_kentik_2fktrac_2froute_2fv202104_2felem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VantagePointTable_kentik_2fktrac_2froute_2fv202104_2felem_2eproto}, {
      &scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fktrac_2froute_2fv202104_2felem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, time_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, record_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, vantage_point_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, message_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, serial_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, afi_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, safi_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, unicast_nlris_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, l3vpn_nlris_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, peer_state_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, attributes_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Elem, rib_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePoint, dataset_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePoint, collector_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePoint, peer_asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePoint, peer_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePointTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePointTable, vantage_point_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePointTable, afi_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::VantagePointTable, safi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::UnicastNlri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::UnicastNlri, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::L3vpnNlri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::L3vpnNlri, prefix_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::L3vpnNlri, labels_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::L3vpnNlri, rd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::MplsLabelStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::MplsLabelStack, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::PeerStateElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::PeerStateElem, new_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Attributes, origin_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Attributes, next_hop_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Attributes, as_path_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Attributes, communities_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::Attributes, extended_communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::RibEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::RibEntry, dump_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::RibEntry, dump_position_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::RibEntry, rib_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::ktrac::route::v202104::RibEntry, elem_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::ktrac::route::v202104::Elem)},
  { 18, -1, sizeof(::kentik::ktrac::route::v202104::VantagePoint)},
  { 27, -1, sizeof(::kentik::ktrac::route::v202104::VantagePointTable)},
  { 35, -1, sizeof(::kentik::ktrac::route::v202104::UnicastNlri)},
  { 41, -1, sizeof(::kentik::ktrac::route::v202104::L3vpnNlri)},
  { 49, -1, sizeof(::kentik::ktrac::route::v202104::MplsLabelStack)},
  { 55, -1, sizeof(::kentik::ktrac::route::v202104::PeerStateElem)},
  { 61, -1, sizeof(::kentik::ktrac::route::v202104::Attributes)},
  { 71, -1, sizeof(::kentik::ktrac::route::v202104::RibEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_Elem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_VantagePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_VantagePointTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_UnicastNlri_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_L3vpnNlri_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_MplsLabelStack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_PeerStateElem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_Attributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::ktrac::route::v202104::_RibEntry_default_instance_),
};

const char descriptor_table_protodef_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%kentik/ktrac/route/v202104/elem.proto\022"
  "\032kentik.ktrac.route.v202104\032\037google/prot"
  "obuf/timestamp.proto\032\037google/api/field_b"
  "ehavior.proto\032.protoc-gen-openapiv2/opti"
  "ons/annotations.proto\"\223\006\n\004Elem\022.\n\004time\030\001"
  " \001(\0132\032.google.protobuf.TimestampR\004time\022G"
  "\n\013record_type\030\002 \001(\0162&.kentik.ktrac.route"
  ".v202104.RecordTypeR\nrecordType\022M\n\rvanta"
  "ge_point\030\003 \001(\0132(.kentik.ktrac.route.v202"
  "104.VantagePointR\014vantagePoint\022\035\n\nmessag"
  "e_id\030\004 \001(\014R\tmessageId\022\026\n\006serial\030\005 \001(\004R\006s"
  "erial\0221\n\003afi\030\006 \001(\0162\037.kentik.ktrac.route."
  "v202104.AfiR\003afi\0224\n\004safi\030\007 \001(\0162 .kentik."
  "ktrac.route.v202104.SafiR\004safi\0228\n\004type\030\010"
  " \001(\0162$.kentik.ktrac.route.v202104.ElemTy"
  "peR\004type\022L\n\runicast_nlris\030\t \003(\0132\'.kentik"
  ".ktrac.route.v202104.UnicastNlriR\014unicas"
  "tNlris\022F\n\013l3vpn_nlris\030\n \003(\0132%.kentik.ktr"
  "ac.route.v202104.L3vpnNlriR\nl3vpnNlris\022H"
  "\n\npeer_state\030\013 \001(\0132).kentik.ktrac.route."
  "v202104.PeerStateElemR\tpeerState\022F\n\nattr"
  "ibutes\030\014 \001(\0132&.kentik.ktrac.route.v20210"
  "4.AttributesR\nattributes\022A\n\trib_entry\030\r "
  "\001(\0132$.kentik.ktrac.route.v202104.RibEntr"
  "yR\010ribEntry\"\324\002\n\014VantagePoint\022A\n\007dataset\030"
  "\001 \001(\tB\'\222A 2\036Name of the collector data s"
  "et\342A\001\003R\007dataset\022<\n\tcollector\030\002 \001(\tB\036\222A\0272"
  "\025Name of the collector\342A\001\003R\tcollector\022^\n"
  "\010peer_asn\030\003 \001(\rBC\222A<2:ASN of the peer fr"
  "om which the collector receives BGP data"
  "\342A\001\003R\007peerAsn\022c\n\007peer_ip\030\004 \001(\tBJ\222AC2AIP "
  "address of the peer from which the colle"
  "ctor receives BGP data\342A\001\003R\006peerIp\"\313\001\n\021V"
  "antagePointTable\022M\n\rvantage_point\030\001 \001(\0132"
  "(.kentik.ktrac.route.v202104.VantagePoin"
  "tR\014vantagePoint\0221\n\003afi\030\002 \001(\0162\037.kentik.kt"
  "rac.route.v202104.AfiR\003afi\0224\n\004safi\030\003 \001(\016"
  "2 .kentik.ktrac.route.v202104.SafiR\004safi"
  "\"%\n\013UnicastNlri\022\026\n\006prefix\030\001 \001(\tR\006prefix\""
  "w\n\tL3vpnNlri\022\026\n\006prefix\030\001 \001(\tR\006prefix\022B\n\006"
  "labels\030\002 \003(\0132*.kentik.ktrac.route.v20210"
  "4.MplsLabelStackR\006labels\022\016\n\002rd\030\003 \001(\tR\002rd"
  "\"&\n\016MplsLabelStack\022\024\n\005label\030\001 \003(\rR\005label"
  "\"S\n\rPeerStateElem\022B\n\tnew_state\030\001 \001(\0162%.k"
  "entik.ktrac.route.v202104.PeerStateR\010new"
  "State\"\321\001\n\nAttributes\022:\n\006origin\030\001 \001(\0162\".k"
  "entik.ktrac.route.v202104.OriginR\006origin"
  "\022\031\n\010next_hop\030\002 \001(\tR\007nextHop\022\027\n\007as_path\030\003"
  " \003(\tR\006asPath\022 \n\013communities\030\004 \003(\rR\013commu"
  "nities\0221\n\024extended_communities\030\005 \003(\tR\023ex"
  "tendedCommunities\"\310\001\n\010RibEntry\0227\n\tdump_t"
  "ime\030\001 \001(\0132\032.google.protobuf.TimestampR\010d"
  "umpTime\022M\n\rdump_position\030\002 \001(\0162(.kentik."
  "ktrac.route.v202104.DumpPositionR\014dumpPo"
  "sition\022\025\n\006rib_id\030\003 \001(\014R\005ribId\022\035\n\nelem_co"
  "unt\030\004 \001(\rR\telemCount*V\n\nRecordType\022\033\n\027RE"
  "CORD_TYPE_UNSPECIFIED\020\000\022\026\n\022RECORD_TYPE_U"
  "PDATE\020\001\022\023\n\017RECORD_TYPE_RIB\020\002*4\n\003Afi\022\023\n\017A"
  "FI_UNSPECIFIED\020\000\022\013\n\007AFI_IP4\020\001\022\013\n\007AFI_IP6"
  "\020\002*N\n\004Safi\022\024\n\020SAFI_UNSPECIFIED\020\000\022\020\n\014SAFI"
  "_UNICAST\020\001\022\r\n\tSAFI_MPLS\020\004\022\017\n\nSAFI_L3VPN\020"
  "\200\001*W\n\006Origin\022\026\n\022ORIGIN_UNSPECIFIED\020\000\022\016\n\n"
  "ORIGIN_IGP\020\n\022\016\n\nORIGIN_EGP\020\013\022\025\n\021ORIGIN_I"
  "NCOMPLETE\020\014*\241\001\n\010ElemType\022\031\n\025ELEM_TYPE_UN"
  "SPECIFIED\020\000\022\027\n\023ELEM_TYPE_PEERSTATE\020\n\022\032\n\026"
  "ELEM_TYPE_ANNOUNCEMENT\020\013\022\030\n\024ELEM_TYPE_WI"
  "THDRAWAL\020\014\022\027\n\023ELEM_TYPE_RIB_ENTRY\020\r\022\022\n\016E"
  "LEM_TYPE_SYNC\020\016*O\n\tPeerState\022\032\n\026PEER_STA"
  "TE_UNSPECIFIED\020\000\022\021\n\rPEER_STATE_UP\020\n\022\023\n\017P"
  "EER_STATE_DOWN\020\013*t\n\014DumpPosition\022\035\n\031DUMP"
  "_POSITION_UNSPECIFIED\020\000\022\027\n\023DUMP_POSITION"
  "_START\020\001\022\025\n\021DUMP_POSITION_MID\020\002\022\025\n\021DUMP_"
  "POSITION_END\020\003B&Z$github.com/kentik/ktra"
  "c/pkg/route/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto_sccs[9] = {
  &scc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_Elem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
  &scc_info_VantagePointTable_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fktrac_2froute_2fv202104_2felem_2eproto, "kentik/ktrac/route/v202104/elem.proto", 2942,
  &descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto_once, descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto_sccs, descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto_deps, 9, 3,
  schemas, file_default_instances, TableStruct_kentik_2fktrac_2froute_2fv202104_2felem_2eproto::offsets,
  file_level_metadata_kentik_2fktrac_2froute_2fv202104_2felem_2eproto, 9, file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto, file_level_service_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fktrac_2froute_2fv202104_2felem_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto)), true);
namespace kentik {
namespace ktrac {
namespace route {
namespace v202104 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[0];
}
bool RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Afi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[1];
}
bool Afi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Safi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[2];
}
bool Safi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Origin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[3];
}
bool Origin_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[4];
}
bool ElemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[5];
}
bool PeerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DumpPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fktrac_2froute_2fv202104_2felem_2eproto);
  return file_level_enum_descriptors_kentik_2fktrac_2froute_2fv202104_2felem_2eproto[6];
}
bool DumpPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Elem::InitAsDefaultInstance() {
  ::kentik::ktrac::route::v202104::_Elem_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::ktrac::route::v202104::_Elem_default_instance_._instance.get_mutable()->vantage_point_ = const_cast< ::kentik::ktrac::route::v202104::VantagePoint*>(
      ::kentik::ktrac::route::v202104::VantagePoint::internal_default_instance());
  ::kentik::ktrac::route::v202104::_Elem_default_instance_._instance.get_mutable()->peer_state_ = const_cast< ::kentik::ktrac::route::v202104::PeerStateElem*>(
      ::kentik::ktrac::route::v202104::PeerStateElem::internal_default_instance());
  ::kentik::ktrac::route::v202104::_Elem_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::kentik::ktrac::route::v202104::Attributes*>(
      ::kentik::ktrac::route::v202104::Attributes::internal_default_instance());
  ::kentik::ktrac::route::v202104::_Elem_default_instance_._instance.get_mutable()->rib_entry_ = const_cast< ::kentik::ktrac::route::v202104::RibEntry*>(
      ::kentik::ktrac::route::v202104::RibEntry::internal_default_instance());
}
class Elem::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Elem* msg);
  static const ::kentik::ktrac::route::v202104::VantagePoint& vantage_point(const Elem* msg);
  static const ::kentik::ktrac::route::v202104::PeerStateElem& peer_state(const Elem* msg);
  static const ::kentik::ktrac::route::v202104::Attributes& attributes(const Elem* msg);
  static const ::kentik::ktrac::route::v202104::RibEntry& rib_entry(const Elem* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Elem::_Internal::time(const Elem* msg) {
  return *msg->time_;
}
const ::kentik::ktrac::route::v202104::VantagePoint&
Elem::_Internal::vantage_point(const Elem* msg) {
  return *msg->vantage_point_;
}
const ::kentik::ktrac::route::v202104::PeerStateElem&
Elem::_Internal::peer_state(const Elem* msg) {
  return *msg->peer_state_;
}
const ::kentik::ktrac::route::v202104::Attributes&
Elem::_Internal::attributes(const Elem* msg) {
  return *msg->attributes_;
}
const ::kentik::ktrac::route::v202104::RibEntry&
Elem::_Internal::rib_entry(const Elem* msg) {
  return *msg->rib_entry_;
}
void Elem::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Elem::Elem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unicast_nlris_(arena),
  l3vpn_nlris_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.Elem)
}
Elem::Elem(const Elem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unicast_nlris_(from.unicast_nlris_),
      l3vpn_nlris_(from.l3vpn_nlris_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_vantage_point()) {
    vantage_point_ = new ::kentik::ktrac::route::v202104::VantagePoint(*from.vantage_point_);
  } else {
    vantage_point_ = nullptr;
  }
  if (from._internal_has_peer_state()) {
    peer_state_ = new ::kentik::ktrac::route::v202104::PeerStateElem(*from.peer_state_);
  } else {
    peer_state_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::kentik::ktrac::route::v202104::Attributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from._internal_has_rib_entry()) {
    rib_entry_ = new ::kentik::ktrac::route::v202104::RibEntry(*from.rib_entry_);
  } else {
    rib_entry_ = nullptr;
  }
  ::memcpy(&record_type_, &from.record_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&record_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.Elem)
}

void Elem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Elem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&time_)) + sizeof(type_));
}

Elem::~Elem() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.Elem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Elem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete vantage_point_;
  if (this != internal_default_instance()) delete peer_state_;
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete rib_entry_;
}

void Elem::ArenaDtor(void* object) {
  Elem* _this = reinterpret_cast< Elem* >(object);
  (void)_this;
}
void Elem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Elem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Elem& Elem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Elem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void Elem::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unicast_nlris_.Clear();
  l3vpn_nlris_.Clear();
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArena() == nullptr && vantage_point_ != nullptr) {
    delete vantage_point_;
  }
  vantage_point_ = nullptr;
  if (GetArena() == nullptr && peer_state_ != nullptr) {
    delete peer_state_;
  }
  peer_state_ = nullptr;
  if (GetArena() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  if (GetArena() == nullptr && rib_entry_ != nullptr) {
    delete rib_entry_;
  }
  rib_entry_ = nullptr;
  ::memset(&record_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&record_type_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Elem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1[json_name = "time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.RecordType record_type = 2[json_name = "recordType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_record_type(static_cast<::kentik::ktrac::route::v202104::RecordType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.VantagePoint vantage_point = 3[json_name = "vantagePoint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vantage_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message_id = 4[json_name = "messageId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 serial = 5[json_name = "serial"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.Afi afi = 6[json_name = "afi"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::kentik::ktrac::route::v202104::Afi>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.Safi safi = 7[json_name = "safi"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::kentik::ktrac::route::v202104::Safi>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.ElemType type = 8[json_name = "type"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::ktrac::route::v202104::ElemType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.ktrac.route.v202104.UnicastNlri unicast_nlris = 9[json_name = "unicastNlris"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unicast_nlris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.ktrac.route.v202104.L3vpnNlri l3vpn_nlris = 10[json_name = "l3vpnNlris"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_l3vpn_nlris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.PeerStateElem peer_state = 11[json_name = "peerState"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.Attributes attributes = 12[json_name = "attributes"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.RibEntry rib_entry = 13[json_name = "ribEntry"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_rib_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Elem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // .kentik.ktrac.route.v202104.RecordType record_type = 2[json_name = "recordType"];
  if (this->record_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_record_type(), target);
  }

  // .kentik.ktrac.route.v202104.VantagePoint vantage_point = 3[json_name = "vantagePoint"];
  if (this->has_vantage_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vantage_point(this), target, stream);
  }

  // bytes message_id = 4[json_name = "messageId"];
  if (this->message_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message_id(), target);
  }

  // uint64 serial = 5[json_name = "serial"];
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_serial(), target);
  }

  // .kentik.ktrac.route.v202104.Afi afi = 6[json_name = "afi"];
  if (this->afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_afi(), target);
  }

  // .kentik.ktrac.route.v202104.Safi safi = 7[json_name = "safi"];
  if (this->safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_safi(), target);
  }

  // .kentik.ktrac.route.v202104.ElemType type = 8[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_type(), target);
  }

  // repeated .kentik.ktrac.route.v202104.UnicastNlri unicast_nlris = 9[json_name = "unicastNlris"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unicast_nlris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_unicast_nlris(i), target, stream);
  }

  // repeated .kentik.ktrac.route.v202104.L3vpnNlri l3vpn_nlris = 10[json_name = "l3vpnNlris"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_l3vpn_nlris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_l3vpn_nlris(i), target, stream);
  }

  // .kentik.ktrac.route.v202104.PeerStateElem peer_state = 11[json_name = "peerState"];
  if (this->has_peer_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::peer_state(this), target, stream);
  }

  // .kentik.ktrac.route.v202104.Attributes attributes = 12[json_name = "attributes"];
  if (this->has_attributes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::attributes(this), target, stream);
  }

  // .kentik.ktrac.route.v202104.RibEntry rib_entry = 13[json_name = "ribEntry"];
  if (this->has_rib_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::rib_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.Elem)
  return target;
}

size_t Elem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.Elem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.ktrac.route.v202104.UnicastNlri unicast_nlris = 9[json_name = "unicastNlris"];
  total_size += 1UL * this->_internal_unicast_nlris_size();
  for (const auto& msg : this->unicast_nlris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.ktrac.route.v202104.L3vpnNlri l3vpn_nlris = 10[json_name = "l3vpnNlris"];
  total_size += 1UL * this->_internal_l3vpn_nlris_size();
  for (const auto& msg : this->l3vpn_nlris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes message_id = 4[json_name = "messageId"];
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_id());
  }

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .kentik.ktrac.route.v202104.VantagePoint vantage_point = 3[json_name = "vantagePoint"];
  if (this->has_vantage_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vantage_point_);
  }

  // .kentik.ktrac.route.v202104.PeerStateElem peer_state = 11[json_name = "peerState"];
  if (this->has_peer_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_state_);
  }

  // .kentik.ktrac.route.v202104.Attributes attributes = 12[json_name = "attributes"];
  if (this->has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  // .kentik.ktrac.route.v202104.RibEntry rib_entry = 13[json_name = "ribEntry"];
  if (this->has_rib_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rib_entry_);
  }

  // .kentik.ktrac.route.v202104.RecordType record_type = 2[json_name = "recordType"];
  if (this->record_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_record_type());
  }

  // .kentik.ktrac.route.v202104.Afi afi = 6[json_name = "afi"];
  if (this->afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // uint64 serial = 5[json_name = "serial"];
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_serial());
  }

  // .kentik.ktrac.route.v202104.Safi safi = 7[json_name = "safi"];
  if (this->safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  // .kentik.ktrac.route.v202104.ElemType type = 8[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Elem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.Elem)
  GOOGLE_DCHECK_NE(&from, this);
  const Elem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Elem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.Elem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.Elem)
    MergeFrom(*source);
  }
}

void Elem::MergeFrom(const Elem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.Elem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unicast_nlris_.MergeFrom(from.unicast_nlris_);
  l3vpn_nlris_.MergeFrom(from.l3vpn_nlris_);
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.has_vantage_point()) {
    _internal_mutable_vantage_point()->::kentik::ktrac::route::v202104::VantagePoint::MergeFrom(from._internal_vantage_point());
  }
  if (from.has_peer_state()) {
    _internal_mutable_peer_state()->::kentik::ktrac::route::v202104::PeerStateElem::MergeFrom(from._internal_peer_state());
  }
  if (from.has_attributes()) {
    _internal_mutable_attributes()->::kentik::ktrac::route::v202104::Attributes::MergeFrom(from._internal_attributes());
  }
  if (from.has_rib_entry()) {
    _internal_mutable_rib_entry()->::kentik::ktrac::route::v202104::RibEntry::MergeFrom(from._internal_rib_entry());
  }
  if (from.record_type() != 0) {
    _internal_set_record_type(from._internal_record_type());
  }
  if (from.afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Elem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.Elem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Elem::CopyFrom(const Elem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.Elem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Elem::IsInitialized() const {
  return true;
}

void Elem::InternalSwap(Elem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unicast_nlris_.InternalSwap(&other->unicast_nlris_);
  l3vpn_nlris_.InternalSwap(&other->l3vpn_nlris_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Elem, type_)
      + sizeof(Elem::type_)
      - PROTOBUF_FIELD_OFFSET(Elem, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Elem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VantagePoint::InitAsDefaultInstance() {
}
class VantagePoint::_Internal {
 public:
};

VantagePoint::VantagePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.VantagePoint)
}
VantagePoint::VantagePoint(const VantagePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset().empty()) {
    dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset(),
      GetArena());
  }
  collector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collector().empty()) {
    collector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collector(),
      GetArena());
  }
  peer_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_ip().empty()) {
    peer_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_ip(),
      GetArena());
  }
  peer_asn_ = from.peer_asn_;
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.VantagePoint)
}

void VantagePoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_asn_ = 0u;
}

VantagePoint::~VantagePoint() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.VantagePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VantagePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VantagePoint::ArenaDtor(void* object) {
  VantagePoint* _this = reinterpret_cast< VantagePoint* >(object);
  (void)_this;
}
void VantagePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VantagePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VantagePoint& VantagePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VantagePoint_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void VantagePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.VantagePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_asn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VantagePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataset = 1[json_name = "dataset", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.VantagePoint.dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collector = 2[json_name = "collector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.VantagePoint.collector"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_asn = 3[json_name = "peerAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          peer_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_ip = 4[json_name = "peerIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_peer_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.VantagePoint.peer_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VantagePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.VantagePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset = 1[json_name = "dataset", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset().data(), static_cast<int>(this->_internal_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.VantagePoint.dataset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset(), target);
  }

  // string collector = 2[json_name = "collector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->collector().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collector().data(), static_cast<int>(this->_internal_collector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.VantagePoint.collector");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collector(), target);
  }

  // uint32 peer_asn = 3[json_name = "peerAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->peer_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_peer_asn(), target);
  }

  // string peer_ip = 4[json_name = "peerIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->peer_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_ip().data(), static_cast<int>(this->_internal_peer_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.VantagePoint.peer_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_peer_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.VantagePoint)
  return target;
}

size_t VantagePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.VantagePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset = 1[json_name = "dataset", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset());
  }

  // string collector = 2[json_name = "collector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->collector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collector());
  }

  // string peer_ip = 4[json_name = "peerIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->peer_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_ip());
  }

  // uint32 peer_asn = 3[json_name = "peerAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->peer_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_asn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VantagePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.VantagePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VantagePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VantagePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.VantagePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.VantagePoint)
    MergeFrom(*source);
  }
}

void VantagePoint::MergeFrom(const VantagePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.VantagePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataset().size() > 0) {
    _internal_set_dataset(from._internal_dataset());
  }
  if (from.collector().size() > 0) {
    _internal_set_collector(from._internal_collector());
  }
  if (from.peer_ip().size() > 0) {
    _internal_set_peer_ip(from._internal_peer_ip());
  }
  if (from.peer_asn() != 0) {
    _internal_set_peer_asn(from._internal_peer_asn());
  }
}

void VantagePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.VantagePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VantagePoint::CopyFrom(const VantagePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.VantagePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VantagePoint::IsInitialized() const {
  return true;
}

void VantagePoint::InternalSwap(VantagePoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collector_.Swap(&other->collector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_ip_.Swap(&other->peer_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(peer_asn_, other->peer_asn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VantagePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VantagePointTable::InitAsDefaultInstance() {
  ::kentik::ktrac::route::v202104::_VantagePointTable_default_instance_._instance.get_mutable()->vantage_point_ = const_cast< ::kentik::ktrac::route::v202104::VantagePoint*>(
      ::kentik::ktrac::route::v202104::VantagePoint::internal_default_instance());
}
class VantagePointTable::_Internal {
 public:
  static const ::kentik::ktrac::route::v202104::VantagePoint& vantage_point(const VantagePointTable* msg);
};

const ::kentik::ktrac::route::v202104::VantagePoint&
VantagePointTable::_Internal::vantage_point(const VantagePointTable* msg) {
  return *msg->vantage_point_;
}
VantagePointTable::VantagePointTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.VantagePointTable)
}
VantagePointTable::VantagePointTable(const VantagePointTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vantage_point()) {
    vantage_point_ = new ::kentik::ktrac::route::v202104::VantagePoint(*from.vantage_point_);
  } else {
    vantage_point_ = nullptr;
  }
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&safi_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.VantagePointTable)
}

void VantagePointTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VantagePointTable_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  ::memset(&vantage_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&vantage_point_)) + sizeof(safi_));
}

VantagePointTable::~VantagePointTable() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.VantagePointTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VantagePointTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vantage_point_;
}

void VantagePointTable::ArenaDtor(void* object) {
  VantagePointTable* _this = reinterpret_cast< VantagePointTable* >(object);
  (void)_this;
}
void VantagePointTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VantagePointTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VantagePointTable& VantagePointTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VantagePointTable_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void VantagePointTable::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.VantagePointTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vantage_point_ != nullptr) {
    delete vantage_point_;
  }
  vantage_point_ = nullptr;
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VantagePointTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.ktrac.route.v202104.VantagePoint vantage_point = 1[json_name = "vantagePoint"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vantage_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.Afi afi = 2[json_name = "afi"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::kentik::ktrac::route::v202104::Afi>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.Safi safi = 3[json_name = "safi"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::kentik::ktrac::route::v202104::Safi>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VantagePointTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.VantagePointTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.ktrac.route.v202104.VantagePoint vantage_point = 1[json_name = "vantagePoint"];
  if (this->has_vantage_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vantage_point(this), target, stream);
  }

  // .kentik.ktrac.route.v202104.Afi afi = 2[json_name = "afi"];
  if (this->afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_afi(), target);
  }

  // .kentik.ktrac.route.v202104.Safi safi = 3[json_name = "safi"];
  if (this->safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_safi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.VantagePointTable)
  return target;
}

size_t VantagePointTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.VantagePointTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.ktrac.route.v202104.VantagePoint vantage_point = 1[json_name = "vantagePoint"];
  if (this->has_vantage_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vantage_point_);
  }

  // .kentik.ktrac.route.v202104.Afi afi = 2[json_name = "afi"];
  if (this->afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .kentik.ktrac.route.v202104.Safi safi = 3[json_name = "safi"];
  if (this->safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VantagePointTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.VantagePointTable)
  GOOGLE_DCHECK_NE(&from, this);
  const VantagePointTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VantagePointTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.VantagePointTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.VantagePointTable)
    MergeFrom(*source);
  }
}

void VantagePointTable::MergeFrom(const VantagePointTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.VantagePointTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vantage_point()) {
    _internal_mutable_vantage_point()->::kentik::ktrac::route::v202104::VantagePoint::MergeFrom(from._internal_vantage_point());
  }
  if (from.afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from.safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
}

void VantagePointTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.VantagePointTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VantagePointTable::CopyFrom(const VantagePointTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.VantagePointTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VantagePointTable::IsInitialized() const {
  return true;
}

void VantagePointTable::InternalSwap(VantagePointTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VantagePointTable, safi_)
      + sizeof(VantagePointTable::safi_)
      - PROTOBUF_FIELD_OFFSET(VantagePointTable, vantage_point_)>(
          reinterpret_cast<char*>(&vantage_point_),
          reinterpret_cast<char*>(&other->vantage_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VantagePointTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnicastNlri::InitAsDefaultInstance() {
}
class UnicastNlri::_Internal {
 public:
};

UnicastNlri::UnicastNlri(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.UnicastNlri)
}
UnicastNlri::UnicastNlri(const UnicastNlri& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.UnicastNlri)
}

void UnicastNlri::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnicastNlri::~UnicastNlri() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.UnicastNlri)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnicastNlri::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnicastNlri::ArenaDtor(void* object) {
  UnicastNlri* _this = reinterpret_cast< UnicastNlri* >(object);
  (void)_this;
}
void UnicastNlri::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnicastNlri::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnicastNlri& UnicastNlri::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnicastNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void UnicastNlri::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.UnicastNlri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnicastNlri::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1[json_name = "prefix"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.UnicastNlri.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnicastNlri::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.UnicastNlri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1[json_name = "prefix"];
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.UnicastNlri.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.UnicastNlri)
  return target;
}

size_t UnicastNlri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.UnicastNlri)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1[json_name = "prefix"];
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnicastNlri::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.UnicastNlri)
  GOOGLE_DCHECK_NE(&from, this);
  const UnicastNlri* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnicastNlri>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.UnicastNlri)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.UnicastNlri)
    MergeFrom(*source);
  }
}

void UnicastNlri::MergeFrom(const UnicastNlri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.UnicastNlri)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
}

void UnicastNlri::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.UnicastNlri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnicastNlri::CopyFrom(const UnicastNlri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.UnicastNlri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnicastNlri::IsInitialized() const {
  return true;
}

void UnicastNlri::InternalSwap(UnicastNlri* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnicastNlri::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void L3vpnNlri::InitAsDefaultInstance() {
}
class L3vpnNlri::_Internal {
 public:
};

L3vpnNlri::L3vpnNlri(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.L3vpnNlri)
}
L3vpnNlri::L3vpnNlri(const L3vpnNlri& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  rd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rd().empty()) {
    rd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rd(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.L3vpnNlri)
}

void L3vpnNlri::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

L3vpnNlri::~L3vpnNlri() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.L3vpnNlri)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void L3vpnNlri::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void L3vpnNlri::ArenaDtor(void* object) {
  L3vpnNlri* _this = reinterpret_cast< L3vpnNlri* >(object);
  (void)_this;
}
void L3vpnNlri::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void L3vpnNlri::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L3vpnNlri& L3vpnNlri::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L3vpnNlri_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void L3vpnNlri::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.L3vpnNlri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L3vpnNlri::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1[json_name = "prefix"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.L3vpnNlri.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.ktrac.route.v202104.MplsLabelStack labels = 2[json_name = "labels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string rd = 3[json_name = "rd"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.L3vpnNlri.rd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* L3vpnNlri::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.L3vpnNlri)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1[json_name = "prefix"];
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.L3vpnNlri.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // repeated .kentik.ktrac.route.v202104.MplsLabelStack labels = 2[json_name = "labels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_labels(i), target, stream);
  }

  // string rd = 3[json_name = "rd"];
  if (this->rd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rd().data(), static_cast<int>(this->_internal_rd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.L3vpnNlri.rd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.L3vpnNlri)
  return target;
}

size_t L3vpnNlri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.L3vpnNlri)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.ktrac.route.v202104.MplsLabelStack labels = 2[json_name = "labels"];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string prefix = 1[json_name = "prefix"];
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string rd = 3[json_name = "rd"];
  if (this->rd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L3vpnNlri::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.L3vpnNlri)
  GOOGLE_DCHECK_NE(&from, this);
  const L3vpnNlri* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<L3vpnNlri>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.L3vpnNlri)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.L3vpnNlri)
    MergeFrom(*source);
  }
}

void L3vpnNlri::MergeFrom(const L3vpnNlri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.L3vpnNlri)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.rd().size() > 0) {
    _internal_set_rd(from._internal_rd());
  }
}

void L3vpnNlri::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.L3vpnNlri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L3vpnNlri::CopyFrom(const L3vpnNlri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.L3vpnNlri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L3vpnNlri::IsInitialized() const {
  return true;
}

void L3vpnNlri::InternalSwap(L3vpnNlri* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rd_.Swap(&other->rd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata L3vpnNlri::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MplsLabelStack::InitAsDefaultInstance() {
}
class MplsLabelStack::_Internal {
 public:
};

MplsLabelStack::MplsLabelStack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.MplsLabelStack)
}
MplsLabelStack::MplsLabelStack(const MplsLabelStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_(from.label_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.MplsLabelStack)
}

void MplsLabelStack::SharedCtor() {
}

MplsLabelStack::~MplsLabelStack() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.MplsLabelStack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MplsLabelStack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MplsLabelStack::ArenaDtor(void* object) {
  MplsLabelStack* _this = reinterpret_cast< MplsLabelStack* >(object);
  (void)_this;
}
void MplsLabelStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MplsLabelStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MplsLabelStack& MplsLabelStack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MplsLabelStack_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void MplsLabelStack::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.MplsLabelStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MplsLabelStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 label = 1[json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_label(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MplsLabelStack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.MplsLabelStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 label = 1[json_name = "label"];
  {
    int byte_size = _label_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_label(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.MplsLabelStack)
  return target;
}

size_t MplsLabelStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.MplsLabelStack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 label = 1[json_name = "label"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->label_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _label_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MplsLabelStack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.MplsLabelStack)
  GOOGLE_DCHECK_NE(&from, this);
  const MplsLabelStack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MplsLabelStack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.MplsLabelStack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.MplsLabelStack)
    MergeFrom(*source);
  }
}

void MplsLabelStack::MergeFrom(const MplsLabelStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.MplsLabelStack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
}

void MplsLabelStack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.MplsLabelStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MplsLabelStack::CopyFrom(const MplsLabelStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.MplsLabelStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MplsLabelStack::IsInitialized() const {
  return true;
}

void MplsLabelStack::InternalSwap(MplsLabelStack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_.InternalSwap(&other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MplsLabelStack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerStateElem::InitAsDefaultInstance() {
}
class PeerStateElem::_Internal {
 public:
};

PeerStateElem::PeerStateElem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.PeerStateElem)
}
PeerStateElem::PeerStateElem(const PeerStateElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_state_ = from.new_state_;
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.PeerStateElem)
}

void PeerStateElem::SharedCtor() {
  new_state_ = 0;
}

PeerStateElem::~PeerStateElem() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.PeerStateElem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerStateElem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeerStateElem::ArenaDtor(void* object) {
  PeerStateElem* _this = reinterpret_cast< PeerStateElem* >(object);
  (void)_this;
}
void PeerStateElem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerStateElem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerStateElem& PeerStateElem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerStateElem_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void PeerStateElem::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.PeerStateElem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerStateElem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.ktrac.route.v202104.PeerState new_state = 1[json_name = "newState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_state(static_cast<::kentik::ktrac::route::v202104::PeerState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerStateElem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.PeerStateElem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.ktrac.route.v202104.PeerState new_state = 1[json_name = "newState"];
  if (this->new_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_new_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.PeerStateElem)
  return target;
}

size_t PeerStateElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.PeerStateElem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.ktrac.route.v202104.PeerState new_state = 1[json_name = "newState"];
  if (this->new_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerStateElem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.PeerStateElem)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerStateElem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerStateElem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.PeerStateElem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.PeerStateElem)
    MergeFrom(*source);
  }
}

void PeerStateElem::MergeFrom(const PeerStateElem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.PeerStateElem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_state() != 0) {
    _internal_set_new_state(from._internal_new_state());
  }
}

void PeerStateElem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.PeerStateElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerStateElem::CopyFrom(const PeerStateElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.PeerStateElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerStateElem::IsInitialized() const {
  return true;
}

void PeerStateElem::InternalSwap(PeerStateElem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(new_state_, other->new_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerStateElem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Attributes::InitAsDefaultInstance() {
}
class Attributes::_Internal {
 public:
};

Attributes::Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  as_path_(arena),
  communities_(arena),
  extended_communities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.Attributes)
}
Attributes::Attributes(const Attributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      as_path_(from.as_path_),
      communities_(from.communities_),
      extended_communities_(from.extended_communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_hop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_hop().empty()) {
    next_hop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_hop(),
      GetArena());
  }
  origin_ = from.origin_;
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.Attributes)
}

void Attributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  next_hop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_ = 0;
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.Attributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_hop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Attributes::ArenaDtor(void* object) {
  Attributes* _this = reinterpret_cast< Attributes* >(object);
  (void)_this;
}
void Attributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attributes& Attributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attributes_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void Attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.Attributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  as_path_.Clear();
  communities_.Clear();
  extended_communities_.Clear();
  next_hop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  origin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.ktrac.route.v202104.Origin origin = 1[json_name = "origin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_origin(static_cast<::kentik::ktrac::route::v202104::Origin>(val));
        } else goto handle_unusual;
        continue;
      // string next_hop = 2[json_name = "nextHop"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_hop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.Attributes.next_hop"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string as_path = 3[json_name = "asPath"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_as_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.Attributes.as_path"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 communities = 4[json_name = "communities"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_communities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_communities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string extended_communities = 5[json_name = "extendedCommunities"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_extended_communities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.ktrac.route.v202104.Attributes.extended_communities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.Attributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.ktrac.route.v202104.Origin origin = 1[json_name = "origin"];
  if (this->origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_origin(), target);
  }

  // string next_hop = 2[json_name = "nextHop"];
  if (this->next_hop().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_hop().data(), static_cast<int>(this->_internal_next_hop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.Attributes.next_hop");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_hop(), target);
  }

  // repeated string as_path = 3[json_name = "asPath"];
  for (int i = 0, n = this->_internal_as_path_size(); i < n; i++) {
    const auto& s = this->_internal_as_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.Attributes.as_path");
    target = stream->WriteString(3, s, target);
  }

  // repeated uint32 communities = 4[json_name = "communities"];
  {
    int byte_size = _communities_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_communities(), byte_size, target);
    }
  }

  // repeated string extended_communities = 5[json_name = "extendedCommunities"];
  for (int i = 0, n = this->_internal_extended_communities_size(); i < n; i++) {
    const auto& s = this->_internal_extended_communities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.ktrac.route.v202104.Attributes.extended_communities");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.Attributes)
  return target;
}

size_t Attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.Attributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string as_path = 3[json_name = "asPath"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(as_path_.size());
  for (int i = 0, n = as_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      as_path_.Get(i));
  }

  // repeated uint32 communities = 4[json_name = "communities"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->communities_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _communities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string extended_communities = 5[json_name = "extendedCommunities"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(extended_communities_.size());
  for (int i = 0, n = extended_communities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      extended_communities_.Get(i));
  }

  // string next_hop = 2[json_name = "nextHop"];
  if (this->next_hop().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_hop());
  }

  // .kentik.ktrac.route.v202104.Origin origin = 1[json_name = "origin"];
  if (this->origin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_origin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const Attributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.Attributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.Attributes)
    MergeFrom(*source);
  }
}

void Attributes::MergeFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  as_path_.MergeFrom(from.as_path_);
  communities_.MergeFrom(from.communities_);
  extended_communities_.MergeFrom(from.extended_communities_);
  if (from.next_hop().size() > 0) {
    _internal_set_next_hop(from._internal_next_hop());
  }
  if (from.origin() != 0) {
    _internal_set_origin(from._internal_origin());
  }
}

void Attributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attributes::CopyFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {
  return true;
}

void Attributes::InternalSwap(Attributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  as_path_.InternalSwap(&other->as_path_);
  communities_.InternalSwap(&other->communities_);
  extended_communities_.InternalSwap(&other->extended_communities_);
  next_hop_.Swap(&other->next_hop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(origin_, other->origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RibEntry::InitAsDefaultInstance() {
  ::kentik::ktrac::route::v202104::_RibEntry_default_instance_._instance.get_mutable()->dump_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class RibEntry::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& dump_time(const RibEntry* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RibEntry::_Internal::dump_time(const RibEntry* msg) {
  return *msg->dump_time_;
}
void RibEntry::clear_dump_time() {
  if (GetArena() == nullptr && dump_time_ != nullptr) {
    delete dump_time_;
  }
  dump_time_ = nullptr;
}
RibEntry::RibEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.ktrac.route.v202104.RibEntry)
}
RibEntry::RibEntry(const RibEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rib_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rib_id().empty()) {
    rib_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rib_id(),
      GetArena());
  }
  if (from._internal_has_dump_time()) {
    dump_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.dump_time_);
  } else {
    dump_time_ = nullptr;
  }
  ::memcpy(&dump_position_, &from.dump_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&elem_count_) -
    reinterpret_cast<char*>(&dump_position_)) + sizeof(elem_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.ktrac.route.v202104.RibEntry)
}

void RibEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  rib_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dump_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elem_count_) -
      reinterpret_cast<char*>(&dump_time_)) + sizeof(elem_count_));
}

RibEntry::~RibEntry() {
  // @@protoc_insertion_point(destructor:kentik.ktrac.route.v202104.RibEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RibEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rib_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dump_time_;
}

void RibEntry::ArenaDtor(void* object) {
  RibEntry* _this = reinterpret_cast< RibEntry* >(object);
  (void)_this;
}
void RibEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RibEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RibEntry& RibEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RibEntry_kentik_2fktrac_2froute_2fv202104_2felem_2eproto.base);
  return *internal_default_instance();
}


void RibEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.ktrac.route.v202104.RibEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rib_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && dump_time_ != nullptr) {
    delete dump_time_;
  }
  dump_time_ = nullptr;
  ::memset(&dump_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elem_count_) -
      reinterpret_cast<char*>(&dump_position_)) + sizeof(elem_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RibEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp dump_time = 1[json_name = "dumpTime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dump_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.ktrac.route.v202104.DumpPosition dump_position = 2[json_name = "dumpPosition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dump_position(static_cast<::kentik::ktrac::route::v202104::DumpPosition>(val));
        } else goto handle_unusual;
        continue;
      // bytes rib_id = 3[json_name = "ribId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rib_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 elem_count = 4[json_name = "elemCount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          elem_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RibEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.ktrac.route.v202104.RibEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp dump_time = 1[json_name = "dumpTime"];
  if (this->has_dump_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dump_time(this), target, stream);
  }

  // .kentik.ktrac.route.v202104.DumpPosition dump_position = 2[json_name = "dumpPosition"];
  if (this->dump_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dump_position(), target);
  }

  // bytes rib_id = 3[json_name = "ribId"];
  if (this->rib_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rib_id(), target);
  }

  // uint32 elem_count = 4[json_name = "elemCount"];
  if (this->elem_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_elem_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.ktrac.route.v202104.RibEntry)
  return target;
}

size_t RibEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.ktrac.route.v202104.RibEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rib_id = 3[json_name = "ribId"];
  if (this->rib_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rib_id());
  }

  // .google.protobuf.Timestamp dump_time = 1[json_name = "dumpTime"];
  if (this->has_dump_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dump_time_);
  }

  // .kentik.ktrac.route.v202104.DumpPosition dump_position = 2[json_name = "dumpPosition"];
  if (this->dump_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dump_position());
  }

  // uint32 elem_count = 4[json_name = "elemCount"];
  if (this->elem_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_elem_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RibEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.ktrac.route.v202104.RibEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RibEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RibEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.ktrac.route.v202104.RibEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.ktrac.route.v202104.RibEntry)
    MergeFrom(*source);
  }
}

void RibEntry::MergeFrom(const RibEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.ktrac.route.v202104.RibEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rib_id().size() > 0) {
    _internal_set_rib_id(from._internal_rib_id());
  }
  if (from.has_dump_time()) {
    _internal_mutable_dump_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_dump_time());
  }
  if (from.dump_position() != 0) {
    _internal_set_dump_position(from._internal_dump_position());
  }
  if (from.elem_count() != 0) {
    _internal_set_elem_count(from._internal_elem_count());
  }
}

void RibEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.ktrac.route.v202104.RibEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RibEntry::CopyFrom(const RibEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.ktrac.route.v202104.RibEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RibEntry::IsInitialized() const {
  return true;
}

void RibEntry::InternalSwap(RibEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rib_id_.Swap(&other->rib_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RibEntry, elem_count_)
      + sizeof(RibEntry::elem_count_)
      - PROTOBUF_FIELD_OFFSET(RibEntry, dump_time_)>(
          reinterpret_cast<char*>(&dump_time_),
          reinterpret_cast<char*>(&other->dump_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RibEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202104
}  // namespace route
}  // namespace ktrac
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::Elem* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::Elem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::Elem >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::VantagePoint* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::VantagePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::VantagePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::VantagePointTable* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::VantagePointTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::VantagePointTable >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::UnicastNlri* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::UnicastNlri >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::UnicastNlri >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::L3vpnNlri* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::L3vpnNlri >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::L3vpnNlri >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::MplsLabelStack* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::MplsLabelStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::MplsLabelStack >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::PeerStateElem* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::PeerStateElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::PeerStateElem >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::Attributes* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::Attributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::Attributes >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::ktrac::route::v202104::RibEntry* Arena::CreateMaybeMessage< ::kentik::ktrac::route::v202104::RibEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::ktrac::route::v202104::RibEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
