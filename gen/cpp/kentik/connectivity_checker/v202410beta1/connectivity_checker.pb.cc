// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/connectivity_checker/v202410beta1/connectivity_checker.proto

#include "kentik/connectivity_checker/v202410beta1/connectivity_checker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace kentik {
namespace connectivity_checker {
namespace v202410beta1 {
class CreateConnectivityReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateConnectivityReportRequest> _instance;
} _CreateConnectivityReportRequest_default_instance_;
class CreateConnectivityReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateConnectivityReportResponse> _instance;
} _CreateConnectivityReportResponse_default_instance_;
}  // namespace v202410beta1
}  // namespace connectivity_checker
}  // namespace kentik
static void InitDefaultsscc_info_CreateConnectivityReportRequest_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::connectivity_checker::v202410beta1::_CreateConnectivityReportRequest_default_instance_;
    new (ptr) ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateConnectivityReportRequest_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateConnectivityReportRequest_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CreateConnectivityReportResponse_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::connectivity_checker::v202410beta1::_CreateConnectivityReportResponse_default_instance_;
    new (ptr) ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateConnectivityReportResponse_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateConnectivityReportResponse_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, cloud_provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, src_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, dst_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, dst_port_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, src_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, dst_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, reachable_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, return_reachable_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, query_status_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, report_url_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, paths_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, return_paths_),
  PROTOBUF_FIELD_OFFSET(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse, last_metadata_fetch_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest)},
  { 15, -1, sizeof(::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::connectivity_checker::v202410beta1::_CreateConnectivityReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::connectivity_checker::v202410beta1::_CreateConnectivityReportResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCkentik/connectivity_checker/v202410bet"
  "a1/connectivity_checker.proto\022(kentik.co"
  "nnectivity_checker.v202410beta1\032\034google/"
  "api/annotations.proto\032\027google/api/client"
  ".proto\032\037google/api/field_behavior.proto\032"
  ".protoc-gen-openapiv2/options/annotation"
  "s.proto\032\037google/protobuf/timestamp.proto"
  "\032%kentik/core/v202303/annotations.proto\""
  "\351\006\n\037CreateConnectivityReportRequest\022\206\001\n\016"
  "cloud_provider\030\001 \001(\01627.kentik.connectivi"
  "ty_checker.v202410beta1.CloudProviderB&\222"
  "A\0372\035Cloud provider identification\342A\001\002R\rc"
  "loudProvider\022!\n\003src\030\002 \001(\tB\017\222A\0102\006Source\342A"
  "\001\002R\003src\022&\n\003dst\030\003 \001(\tB\024\222A\r2\013Destination\342A"
  "\001\002R\003dst\0224\n\010dst_port\030\004 \001(\tB\031\222A\0222\020Destinat"
  "ion Port\342A\001\002R\007dstPort\022-\n\010protocol\030\005 \001(\tB"
  "\021\222A\n2\010Protocol\342A\001\002R\010protocol\022h\n\010src_type"
  "\030\006 \001(\01624.kentik.connectivity_checker.v20"
  "2410beta1.EntityTypeB\027\222A\0242\022Source Entity"
  " TypeR\007srcType\022m\n\010dst_type\030\007 \001(\01624.kenti"
  "k.connectivity_checker.v202410beta1.Enti"
  "tyTypeB\034\222A\0312\027Destination Entity TypeR\007ds"
  "tType\022\206\001\n\nstart_time\030\010 \001(\0132\032.google.prot"
  "obuf.TimestampBK\222AD2BStart Timestamp (UT"
  "C) which defines the time range for the "
  "report.\342A\001\002R\tstartTime\022\200\001\n\010end_time\030\t \001("
  "\0132\032.google.protobuf.TimestampBI\222AB2@End "
  "timestamp (UTC) which defines the time r"
  "ange for the report.\342A\001\002R\007endTime\022(\n\004nam"
  "e\030\n \001(\tB\024\222A\r2\013Report Name\342A\001\001R\004name\"\336\005\n "
  "CreateConnectivityReportResponse\022[\n\treac"
  "hable\030\001 \001(\010B=\222A624Attribute controlling "
  "whether the instance is active\342A\001\003R\treac"
  "hable\022h\n\020return_reachable\030\002 \001(\010B=\222A624At"
  "tribute controlling whether the instance"
  " is active\342A\001\003R\017returnReachable\022@\n\014query"
  "_status\030\003 \001(\tB\035\222A\0262\024Status of the query."
  "\342A\001\003R\013queryStatus\022k\n\nreport_url\030\004 \001(\tBL\222"
  "AE2CURL to view the connectivity checker"
  " report in the Kentik platform.\342A\001\003R\trep"
  "ortUrl\022D\n\005paths\030\005 \003(\tB.\222A\'2%The connecti"
  "on paths in your network.\342A\001\003R\005paths\022X\n\014"
  "return_paths\030\006 \003(\tB5\222A.2,The return conn"
  "ection paths in your network.\342A\001\003R\013retur"
  "nPaths\022\243\001\n\023last_metadata_fetch\030\007 \001(\tBs\222A"
  "l2jThe timestamp indicating when the met"
  "adata used to build the connectivity che"
  "cker report was last fetched.\342A\001\003R\021lastM"
  "etadataFetch*a\n\rCloudProvider\022\036\n\032CLOUD_P"
  "ROVIDER_UNSPECIFIED\020\000\022\026\n\022CLOUD_PROVIDER_"
  "AWS\020\001\022\030\n\024CLOUD_PROVIDER_AZURE\020\002*~\n\nEntit"
  "yType\022\033\n\027ENTITY_TYPE_UNSPECIFIED\020\000\022\026\n\022EN"
  "TITY_TYPE_SUBNET\020\001\022\030\n\024ENTITY_TYPE_INSTAN"
  "CE\020\002\022!\n\035ENTITY_TYPE_NETWORK_INTERFACE\020\0032"
  "\205\004\n\037ConnectivityCheckerAdminService\022\247\003\n\030"
  "CreateConnectivityReport\022I.kentik.connec"
  "tivity_checker.v202410beta1.CreateConnec"
  "tivityReportRequest\032J.kentik.connectivit"
  "y_checker.v202410beta1.CreateConnectivit"
  "yReportResponse\"\363\001\222A\227\001\022%Create a Connect"
  "ivity Checker Report.\032TCreate a connecti"
  "vity checker report based on configurati"
  "on provided in the request.*\030CreateConne"
  "ctivityReport\362\327\002 admin.connectivity_chec"
  "ker:write\202\323\344\223\002.\")/connectivity_checker/v"
  "202410beta1/create:\001*\0328\312A\023grpc.api.kenti"
  "k.com\352\327\002\032admin.connectivity_checker\220\330\002\003B"
  "\336\022Zhgithub.com/kentik/api-schema-public/"
  "gen/go/kentik/connectivity_checker/v2024"
  "10beta1;connectivity_checker\222A\360\021\022\376\017\n\037Ken"
  "tik Connectivity Checker API\022\205\017# Overvie"
  "w\nThe Connectivity Checker API provides "
  "programmatic access to Kentik\'s Connecti"
  "vity Checker, which allows the checking "
  "and monitoring of forward and return pat"
  "hs between two points on your cloud netw"
  "ork, over a specified time range interva"
  "l, for entities such as Instances, Subne"
  "ts, and Network Interfaces.### Supported"
  " Cloud Providers\nThe functionality and c"
  "onfiguration parameters supported by thi"
  "s API differ by cloud provider. The API "
  "currently supports the following provide"
  "rs:\n* [Amazon Web Services](https://kb.k"
  "entik.com/v0/Bd06.htm) (AWS)\n* [Microsof"
  "t Azure](https://kb.kentik.com/v0/Bd08.h"
  "tm)\n\n### Supported Entity Types\nFor AWS,"
  " the API currently support checking conn"
  "ectivity between the following entities:"
  "\n* Subnets* Instances* Network Interface"
  "s\nFor Azure, the API currently support c"
  "hecking connectivity between the followi"
  "ng entities:\n* Subnets\n### Requirements\n"
  "For Kentik\'s Connectivity Checker API to"
  " successfully query the connection betwe"
  "en entity resources, aKentik Cloud Expor"
  "t must be configured for a supported Clo"
  "ud Provider (Aws or Azure)(see [Cloud Ex"
  "ports and Devices] (https://kb.kentik.co"
  "m/v4/Na00.htm#Na00-Cloud_Exports_and_Dev"
  "ices)).Once a cloud export has been succ"
  "essfully configured, Kentik will pull me"
  "tadata at regular intervals from the acc"
  "ount specified in the cloud export, and "
  "the Connectivity Checker will use this m"
  "etadata to: * Visualize the path for a c"
  "onnection between any two points in your"
  " AWS network* Check routing and NACL/SG "
  "configuration to quickly highlight where"
  " a connection is blocked* Get a direct l"
  "ink to the misconfigured gateway or secu"
  "rity policy in the cloud dashboard to qu"
  "ickly fix the issue\n### Frequency of ava"
  "ilable data\nBecause Connectivity Checker"
  " relies upon what\'s discovered during me"
  "tadata retrieval, query results will be "
  "limited to the timeframe of the latest m"
  "etadata-retrieval fetch.  Currently this"
  " is limited to 15-minutes intervals.\"E\n\026"
  "Kentik API Engineering\022+https://github.c"
  "om/kentik/api-schema-public2\014v202410beta"
  "1*\001\0022\020application/json:\020application/json"
  "ZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005to"
  "ken\022\031\010\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005emai"
  "l\022\000\n\t\n\005token\022\000rh\n)Kentik Connectivity Ch"
  "ecker documentation\022;https://kb.kentik.c"
  "om/v4/Na05.htm#Na05-Connectivity_Checker"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto_sccs[2] = {
  &scc_info_CreateConnectivityReportRequest_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto.base,
  &scc_info_CreateConnectivityReportResponse_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto, "kentik/connectivity_checker/v202410beta1/connectivity_checker.proto", 5088,
  &descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto_once, descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto_sccs, descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto::offsets,
  file_level_metadata_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto, 2, file_level_enum_descriptors_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto, file_level_service_descriptors_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto)), true);
namespace kentik {
namespace connectivity_checker {
namespace v202410beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto);
  return file_level_enum_descriptors_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto[0];
}
bool CloudProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto);
  return file_level_enum_descriptors_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto[1];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CreateConnectivityReportRequest::InitAsDefaultInstance() {
  ::kentik::connectivity_checker::v202410beta1::_CreateConnectivityReportRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::connectivity_checker::v202410beta1::_CreateConnectivityReportRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CreateConnectivityReportRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const CreateConnectivityReportRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const CreateConnectivityReportRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CreateConnectivityReportRequest::_Internal::start_time(const CreateConnectivityReportRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CreateConnectivityReportRequest::_Internal::end_time(const CreateConnectivityReportRequest* msg) {
  return *msg->end_time_;
}
void CreateConnectivityReportRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void CreateConnectivityReportRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
CreateConnectivityReportRequest::CreateConnectivityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
}
CreateConnectivityReportRequest::CreateConnectivityReportRequest(const CreateConnectivityReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src().empty()) {
    src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src(),
      GetArena());
  }
  dst_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst().empty()) {
    dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst(),
      GetArena());
  }
  dst_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst_port().empty()) {
    dst_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst_port(),
      GetArena());
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&cloud_provider_, &from.cloud_provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_type_) -
    reinterpret_cast<char*>(&cloud_provider_)) + sizeof(dst_type_));
  // @@protoc_insertion_point(copy_constructor:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
}

void CreateConnectivityReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateConnectivityReportRequest_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto.base);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_type_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(dst_type_));
}

CreateConnectivityReportRequest::~CreateConnectivityReportRequest() {
  // @@protoc_insertion_point(destructor:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateConnectivityReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void CreateConnectivityReportRequest::ArenaDtor(void* object) {
  CreateConnectivityReportRequest* _this = reinterpret_cast< CreateConnectivityReportRequest* >(object);
  (void)_this;
}
void CreateConnectivityReportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateConnectivityReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateConnectivityReportRequest& CreateConnectivityReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateConnectivityReportRequest_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto.base);
  return *internal_default_instance();
}


void CreateConnectivityReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&cloud_provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_type_) -
      reinterpret_cast<char*>(&cloud_provider_)) + sizeof(dst_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateConnectivityReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.connectivity_checker.v202410beta1.CloudProvider cloud_provider = 1[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cloud_provider(static_cast<::kentik::connectivity_checker::v202410beta1::CloudProvider>(val));
        } else goto handle_unusual;
        continue;
      // string src = 2[json_name = "src", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.src"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst = 3[json_name = "dst", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dst();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.dst"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_port = 4[json_name = "dstPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dst_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.dst_port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 5[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.connectivity_checker.v202410beta1.EntityType src_type = 6[json_name = "srcType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_src_type(static_cast<::kentik::connectivity_checker::v202410beta1::EntityType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.connectivity_checker.v202410beta1.EntityType dst_type = 7[json_name = "dstType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dst_type(static_cast<::kentik::connectivity_checker::v202410beta1::EntityType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 8[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 9[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 10[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateConnectivityReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.connectivity_checker.v202410beta1.CloudProvider cloud_provider = 1[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cloud_provider(), target);
  }

  // string src = 2[json_name = "src", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->src().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.src");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src(), target);
  }

  // string dst = 3[json_name = "dst", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst().data(), static_cast<int>(this->_internal_dst().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.dst");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dst(), target);
  }

  // string dst_port = 4[json_name = "dstPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst_port().data(), static_cast<int>(this->_internal_dst_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.dst_port");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dst_port(), target);
  }

  // string protocol = 5[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.protocol");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_protocol(), target);
  }

  // .kentik.connectivity_checker.v202410beta1.EntityType src_type = 6[json_name = "srcType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->src_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_src_type(), target);
  }

  // .kentik.connectivity_checker.v202410beta1.EntityType dst_type = 7[json_name = "dstType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_dst_type(), target);
  }

  // .google.protobuf.Timestamp start_time = 8[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 9[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::end_time(this), target, stream);
  }

  // string name = 10[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  return target;
}

size_t CreateConnectivityReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 2[json_name = "src", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->src().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string dst = 3[json_name = "dst", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst());
  }

  // string dst_port = 4[json_name = "dstPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_port());
  }

  // string protocol = 5[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string name = 10[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp start_time = 8[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 9[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .kentik.connectivity_checker.v202410beta1.CloudProvider cloud_provider = 1[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_provider() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cloud_provider());
  }

  // .kentik.connectivity_checker.v202410beta1.EntityType src_type = 6[json_name = "srcType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->src_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_src_type());
  }

  // .kentik.connectivity_checker.v202410beta1.EntityType dst_type = 7[json_name = "dstType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateConnectivityReportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateConnectivityReportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateConnectivityReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
    MergeFrom(*source);
  }
}

void CreateConnectivityReportRequest::MergeFrom(const CreateConnectivityReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src().size() > 0) {
    _internal_set_src(from._internal_src());
  }
  if (from.dst().size() > 0) {
    _internal_set_dst(from._internal_dst());
  }
  if (from.dst_port().size() > 0) {
    _internal_set_dst_port(from._internal_dst_port());
  }
  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.cloud_provider() != 0) {
    _internal_set_cloud_provider(from._internal_cloud_provider());
  }
  if (from.src_type() != 0) {
    _internal_set_src_type(from._internal_src_type());
  }
  if (from.dst_type() != 0) {
    _internal_set_dst_type(from._internal_dst_type());
  }
}

void CreateConnectivityReportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateConnectivityReportRequest::CopyFrom(const CreateConnectivityReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConnectivityReportRequest::IsInitialized() const {
  return true;
}

void CreateConnectivityReportRequest::InternalSwap(CreateConnectivityReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  src_.Swap(&other->src_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_.Swap(&other->dst_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_port_.Swap(&other->dst_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateConnectivityReportRequest, dst_type_)
      + sizeof(CreateConnectivityReportRequest::dst_type_)
      - PROTOBUF_FIELD_OFFSET(CreateConnectivityReportRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConnectivityReportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateConnectivityReportResponse::InitAsDefaultInstance() {
}
class CreateConnectivityReportResponse::_Internal {
 public:
};

CreateConnectivityReportResponse::CreateConnectivityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena),
  return_paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
}
CreateConnectivityReportResponse::CreateConnectivityReportResponse(const CreateConnectivityReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_),
      return_paths_(from.return_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_status().empty()) {
    query_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query_status(),
      GetArena());
  }
  report_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_url().empty()) {
    report_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_report_url(),
      GetArena());
  }
  last_metadata_fetch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_metadata_fetch().empty()) {
    last_metadata_fetch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_metadata_fetch(),
      GetArena());
  }
  ::memcpy(&reachable_, &from.reachable_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_reachable_) -
    reinterpret_cast<char*>(&reachable_)) + sizeof(return_reachable_));
  // @@protoc_insertion_point(copy_constructor:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
}

void CreateConnectivityReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateConnectivityReportResponse_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto.base);
  query_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_metadata_fetch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reachable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_reachable_) -
      reinterpret_cast<char*>(&reachable_)) + sizeof(return_reachable_));
}

CreateConnectivityReportResponse::~CreateConnectivityReportResponse() {
  // @@protoc_insertion_point(destructor:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateConnectivityReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_metadata_fetch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateConnectivityReportResponse::ArenaDtor(void* object) {
  CreateConnectivityReportResponse* _this = reinterpret_cast< CreateConnectivityReportResponse* >(object);
  (void)_this;
}
void CreateConnectivityReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateConnectivityReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateConnectivityReportResponse& CreateConnectivityReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateConnectivityReportResponse_kentik_2fconnectivity_5fchecker_2fv202410beta1_2fconnectivity_5fchecker_2eproto.base);
  return *internal_default_instance();
}


void CreateConnectivityReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  return_paths_.Clear();
  query_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  report_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_metadata_fetch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&reachable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_reachable_) -
      reinterpret_cast<char*>(&reachable_)) + sizeof(return_reachable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateConnectivityReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool reachable = 1[json_name = "reachable", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_reachable = 2[json_name = "returnReachable", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          return_reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query_status = 3[json_name = "queryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.query_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string report_url = 4[json_name = "reportUrl", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_report_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.report_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string paths = 5[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string return_paths = 6[json_name = "returnPaths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_return_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.return_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string last_metadata_fetch = 7[json_name = "lastMetadataFetch", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_last_metadata_fetch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.last_metadata_fetch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateConnectivityReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reachable = 1[json_name = "reachable", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->reachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reachable(), target);
  }

  // bool return_reachable = 2[json_name = "returnReachable", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->return_reachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_return_reachable(), target);
  }

  // string query_status = 3[json_name = "queryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->query_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_status().data(), static_cast<int>(this->_internal_query_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.query_status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query_status(), target);
  }

  // string report_url = 4[json_name = "reportUrl", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->report_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_url().data(), static_cast<int>(this->_internal_report_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.report_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_report_url(), target);
  }

  // repeated string paths = 5[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_paths_size(); i < n; i++) {
    const auto& s = this->_internal_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.paths");
    target = stream->WriteString(5, s, target);
  }

  // repeated string return_paths = 6[json_name = "returnPaths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_return_paths_size(); i < n; i++) {
    const auto& s = this->_internal_return_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.return_paths");
    target = stream->WriteString(6, s, target);
  }

  // string last_metadata_fetch = 7[json_name = "lastMetadataFetch", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->last_metadata_fetch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_metadata_fetch().data(), static_cast<int>(this->_internal_last_metadata_fetch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse.last_metadata_fetch");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_last_metadata_fetch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  return target;
}

size_t CreateConnectivityReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 5[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(paths_.size());
  for (int i = 0, n = paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      paths_.Get(i));
  }

  // repeated string return_paths = 6[json_name = "returnPaths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(return_paths_.size());
  for (int i = 0, n = return_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      return_paths_.Get(i));
  }

  // string query_status = 3[json_name = "queryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->query_status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_status());
  }

  // string report_url = 4[json_name = "reportUrl", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->report_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_url());
  }

  // string last_metadata_fetch = 7[json_name = "lastMetadataFetch", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->last_metadata_fetch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_metadata_fetch());
  }

  // bool reachable = 1[json_name = "reachable", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool return_reachable = 2[json_name = "returnReachable", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->return_reachable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateConnectivityReportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateConnectivityReportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateConnectivityReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
    MergeFrom(*source);
  }
}

void CreateConnectivityReportResponse::MergeFrom(const CreateConnectivityReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  return_paths_.MergeFrom(from.return_paths_);
  if (from.query_status().size() > 0) {
    _internal_set_query_status(from._internal_query_status());
  }
  if (from.report_url().size() > 0) {
    _internal_set_report_url(from._internal_report_url());
  }
  if (from.last_metadata_fetch().size() > 0) {
    _internal_set_last_metadata_fetch(from._internal_last_metadata_fetch());
  }
  if (from.reachable() != 0) {
    _internal_set_reachable(from._internal_reachable());
  }
  if (from.return_reachable() != 0) {
    _internal_set_return_reachable(from._internal_return_reachable());
  }
}

void CreateConnectivityReportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateConnectivityReportResponse::CopyFrom(const CreateConnectivityReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.connectivity_checker.v202410beta1.CreateConnectivityReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConnectivityReportResponse::IsInitialized() const {
  return true;
}

void CreateConnectivityReportResponse::InternalSwap(CreateConnectivityReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  return_paths_.InternalSwap(&other->return_paths_);
  query_status_.Swap(&other->query_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  report_url_.Swap(&other->report_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_metadata_fetch_.Swap(&other->last_metadata_fetch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateConnectivityReportResponse, return_reachable_)
      + sizeof(CreateConnectivityReportResponse::return_reachable_)
      - PROTOBUF_FIELD_OFFSET(CreateConnectivityReportResponse, reachable_)>(
          reinterpret_cast<char*>(&reachable_),
          reinterpret_cast<char*>(&other->reachable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConnectivityReportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202410beta1
}  // namespace connectivity_checker
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest* Arena::CreateMaybeMessage< ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse* Arena::CreateMaybeMessage< ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::connectivity_checker::v202410beta1::CreateConnectivityReportResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
