// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/as_group/v202212/as_group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
namespace kentik {
namespace as_group {
namespace v202212 {
class ASGroupConcise;
class ASGroupConciseDefaultTypeInternal;
extern ASGroupConciseDefaultTypeInternal _ASGroupConcise_default_instance_;
class ASGroupDetailed;
class ASGroupDetailedDefaultTypeInternal;
extern ASGroupDetailedDefaultTypeInternal _ASGroupDetailed_default_instance_;
class AutonomousSystem;
class AutonomousSystemDefaultTypeInternal;
extern AutonomousSystemDefaultTypeInternal _AutonomousSystem_default_instance_;
class CreateASGroupRequest;
class CreateASGroupRequestDefaultTypeInternal;
extern CreateASGroupRequestDefaultTypeInternal _CreateASGroupRequest_default_instance_;
class CreateASGroupResponse;
class CreateASGroupResponseDefaultTypeInternal;
extern CreateASGroupResponseDefaultTypeInternal _CreateASGroupResponse_default_instance_;
class DeleteASGroupRequest;
class DeleteASGroupRequestDefaultTypeInternal;
extern DeleteASGroupRequestDefaultTypeInternal _DeleteASGroupRequest_default_instance_;
class DeleteASGroupResponse;
class DeleteASGroupResponseDefaultTypeInternal;
extern DeleteASGroupResponseDefaultTypeInternal _DeleteASGroupResponse_default_instance_;
class GetASGroupRequest;
class GetASGroupRequestDefaultTypeInternal;
extern GetASGroupRequestDefaultTypeInternal _GetASGroupRequest_default_instance_;
class GetASGroupResponse;
class GetASGroupResponseDefaultTypeInternal;
extern GetASGroupResponseDefaultTypeInternal _GetASGroupResponse_default_instance_;
class ListASGroupsRequest;
class ListASGroupsRequestDefaultTypeInternal;
extern ListASGroupsRequestDefaultTypeInternal _ListASGroupsRequest_default_instance_;
class ListASGroupsResponse;
class ListASGroupsResponseDefaultTypeInternal;
extern ListASGroupsResponseDefaultTypeInternal _ListASGroupsResponse_default_instance_;
class UpdateASGroupRequest;
class UpdateASGroupRequestDefaultTypeInternal;
extern UpdateASGroupRequestDefaultTypeInternal _UpdateASGroupRequest_default_instance_;
class UpdateASGroupResponse;
class UpdateASGroupResponseDefaultTypeInternal;
extern UpdateASGroupResponseDefaultTypeInternal _UpdateASGroupResponse_default_instance_;
}  // namespace v202212
}  // namespace as_group
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::as_group::v202212::ASGroupConcise* Arena::CreateMaybeMessage<::kentik::as_group::v202212::ASGroupConcise>(Arena*);
template<> ::kentik::as_group::v202212::ASGroupDetailed* Arena::CreateMaybeMessage<::kentik::as_group::v202212::ASGroupDetailed>(Arena*);
template<> ::kentik::as_group::v202212::AutonomousSystem* Arena::CreateMaybeMessage<::kentik::as_group::v202212::AutonomousSystem>(Arena*);
template<> ::kentik::as_group::v202212::CreateASGroupRequest* Arena::CreateMaybeMessage<::kentik::as_group::v202212::CreateASGroupRequest>(Arena*);
template<> ::kentik::as_group::v202212::CreateASGroupResponse* Arena::CreateMaybeMessage<::kentik::as_group::v202212::CreateASGroupResponse>(Arena*);
template<> ::kentik::as_group::v202212::DeleteASGroupRequest* Arena::CreateMaybeMessage<::kentik::as_group::v202212::DeleteASGroupRequest>(Arena*);
template<> ::kentik::as_group::v202212::DeleteASGroupResponse* Arena::CreateMaybeMessage<::kentik::as_group::v202212::DeleteASGroupResponse>(Arena*);
template<> ::kentik::as_group::v202212::GetASGroupRequest* Arena::CreateMaybeMessage<::kentik::as_group::v202212::GetASGroupRequest>(Arena*);
template<> ::kentik::as_group::v202212::GetASGroupResponse* Arena::CreateMaybeMessage<::kentik::as_group::v202212::GetASGroupResponse>(Arena*);
template<> ::kentik::as_group::v202212::ListASGroupsRequest* Arena::CreateMaybeMessage<::kentik::as_group::v202212::ListASGroupsRequest>(Arena*);
template<> ::kentik::as_group::v202212::ListASGroupsResponse* Arena::CreateMaybeMessage<::kentik::as_group::v202212::ListASGroupsResponse>(Arena*);
template<> ::kentik::as_group::v202212::UpdateASGroupRequest* Arena::CreateMaybeMessage<::kentik::as_group::v202212::UpdateASGroupRequest>(Arena*);
template<> ::kentik::as_group::v202212::UpdateASGroupResponse* Arena::CreateMaybeMessage<::kentik::as_group::v202212::UpdateASGroupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace as_group {
namespace v202212 {

// ===================================================================

class AutonomousSystem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.AutonomousSystem) */ {
 public:
  inline AutonomousSystem() : AutonomousSystem(nullptr) {};
  virtual ~AutonomousSystem();

  AutonomousSystem(const AutonomousSystem& from);
  AutonomousSystem(AutonomousSystem&& from) noexcept
    : AutonomousSystem() {
    *this = ::std::move(from);
  }

  inline AutonomousSystem& operator=(const AutonomousSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomousSystem& operator=(AutonomousSystem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutonomousSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutonomousSystem* internal_default_instance() {
    return reinterpret_cast<const AutonomousSystem*>(
               &_AutonomousSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutonomousSystem& a, AutonomousSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomousSystem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomousSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutonomousSystem* New() const final {
    return CreateMaybeMessage<AutonomousSystem>(nullptr);
  }

  AutonomousSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutonomousSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutonomousSystem& from);
  void MergeFrom(const AutonomousSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomousSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.AutonomousSystem";
  }
  protected:
  explicit AutonomousSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAsnFieldNumber = 1,
  };
  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 asn = 1[json_name = "asn"];
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.AutonomousSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class ASGroupConcise PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.ASGroupConcise) */ {
 public:
  inline ASGroupConcise() : ASGroupConcise(nullptr) {};
  virtual ~ASGroupConcise();

  ASGroupConcise(const ASGroupConcise& from);
  ASGroupConcise(ASGroupConcise&& from) noexcept
    : ASGroupConcise() {
    *this = ::std::move(from);
  }

  inline ASGroupConcise& operator=(const ASGroupConcise& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASGroupConcise& operator=(ASGroupConcise&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ASGroupConcise& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ASGroupConcise* internal_default_instance() {
    return reinterpret_cast<const ASGroupConcise*>(
               &_ASGroupConcise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ASGroupConcise& a, ASGroupConcise& b) {
    a.Swap(&b);
  }
  inline void Swap(ASGroupConcise* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASGroupConcise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASGroupConcise* New() const final {
    return CreateMaybeMessage<ASGroupConcise>(nullptr);
  }

  ASGroupConcise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASGroupConcise>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASGroupConcise& from);
  void MergeFrom(const ASGroupConcise& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASGroupConcise* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.ASGroupConcise";
  }
  protected:
  explicit ASGroupConcise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCreatedDateFieldNumber = 5,
    kUpdatedDateFieldNumber = 6,
  };
  // repeated string asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int asn_size() const;
  private:
  int _internal_asn_size() const;
  public:
  void clear_asn();
  const std::string& asn(int index) const;
  std::string* mutable_asn(int index);
  void set_asn(int index, const std::string& value);
  void set_asn(int index, std::string&& value);
  void set_asn(int index, const char* value);
  void set_asn(int index, const char* value, size_t size);
  std::string* add_asn();
  void add_asn(const std::string& value);
  void add_asn(std::string&& value);
  void add_asn(const char* value);
  void add_asn(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& asn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_asn();
  private:
  const std::string& _internal_asn(int index) const;
  std::string* _internal_add_asn();
  public:

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_date = 5[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_created_date() const;
  private:
  bool _internal_has_created_date() const;
  public:
  void clear_created_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_date();
  void set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_date();
  public:
  void unsafe_arena_set_allocated_created_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_date();

  // .google.protobuf.Timestamp updated_date = 6[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_updated_date() const;
  private:
  bool _internal_has_updated_date() const;
  public:
  void clear_updated_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_date();
  void set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_date();
  public:
  void unsafe_arena_set_allocated_updated_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_date();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.ASGroupConcise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class ASGroupDetailed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.ASGroupDetailed) */ {
 public:
  inline ASGroupDetailed() : ASGroupDetailed(nullptr) {};
  virtual ~ASGroupDetailed();

  ASGroupDetailed(const ASGroupDetailed& from);
  ASGroupDetailed(ASGroupDetailed&& from) noexcept
    : ASGroupDetailed() {
    *this = ::std::move(from);
  }

  inline ASGroupDetailed& operator=(const ASGroupDetailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASGroupDetailed& operator=(ASGroupDetailed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ASGroupDetailed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ASGroupDetailed* internal_default_instance() {
    return reinterpret_cast<const ASGroupDetailed*>(
               &_ASGroupDetailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ASGroupDetailed& a, ASGroupDetailed& b) {
    a.Swap(&b);
  }
  inline void Swap(ASGroupDetailed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASGroupDetailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASGroupDetailed* New() const final {
    return CreateMaybeMessage<ASGroupDetailed>(nullptr);
  }

  ASGroupDetailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASGroupDetailed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASGroupDetailed& from);
  void MergeFrom(const ASGroupDetailed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASGroupDetailed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.ASGroupDetailed";
  }
  protected:
  explicit ASGroupDetailed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCreatedDateFieldNumber = 5,
    kUpdatedDateFieldNumber = 6,
  };
  // repeated .kentik.as_group.v202212.AutonomousSystem asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int asn_size() const;
  private:
  int _internal_asn_size() const;
  public:
  void clear_asn();
  ::kentik::as_group::v202212::AutonomousSystem* mutable_asn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::AutonomousSystem >*
      mutable_asn();
  private:
  const ::kentik::as_group::v202212::AutonomousSystem& _internal_asn(int index) const;
  ::kentik::as_group::v202212::AutonomousSystem* _internal_add_asn();
  public:
  const ::kentik::as_group::v202212::AutonomousSystem& asn(int index) const;
  ::kentik::as_group::v202212::AutonomousSystem* add_asn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::AutonomousSystem >&
      asn() const;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_date = 5[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_created_date() const;
  private:
  bool _internal_has_created_date() const;
  public:
  void clear_created_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_date();
  void set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_date();
  public:
  void unsafe_arena_set_allocated_created_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_date();

  // .google.protobuf.Timestamp updated_date = 6[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_updated_date() const;
  private:
  bool _internal_has_updated_date() const;
  public:
  void clear_updated_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_date();
  void set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_date();
  public:
  void unsafe_arena_set_allocated_updated_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_date();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.ASGroupDetailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::AutonomousSystem > asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class ListASGroupsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.ListASGroupsRequest) */ {
 public:
  inline ListASGroupsRequest() : ListASGroupsRequest(nullptr) {};
  virtual ~ListASGroupsRequest();

  ListASGroupsRequest(const ListASGroupsRequest& from);
  ListASGroupsRequest(ListASGroupsRequest&& from) noexcept
    : ListASGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListASGroupsRequest& operator=(const ListASGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListASGroupsRequest& operator=(ListASGroupsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListASGroupsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListASGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListASGroupsRequest*>(
               &_ListASGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListASGroupsRequest& a, ListASGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListASGroupsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListASGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListASGroupsRequest* New() const final {
    return CreateMaybeMessage<ListASGroupsRequest>(nullptr);
  }

  ListASGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListASGroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListASGroupsRequest& from);
  void MergeFrom(const ListASGroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListASGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.ListASGroupsRequest";
  }
  protected:
  explicit ListASGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.ListASGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class ListASGroupsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.ListASGroupsResponse) */ {
 public:
  inline ListASGroupsResponse() : ListASGroupsResponse(nullptr) {};
  virtual ~ListASGroupsResponse();

  ListASGroupsResponse(const ListASGroupsResponse& from);
  ListASGroupsResponse(ListASGroupsResponse&& from) noexcept
    : ListASGroupsResponse() {
    *this = ::std::move(from);
  }

  inline ListASGroupsResponse& operator=(const ListASGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListASGroupsResponse& operator=(ListASGroupsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListASGroupsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListASGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListASGroupsResponse*>(
               &_ListASGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListASGroupsResponse& a, ListASGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListASGroupsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListASGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListASGroupsResponse* New() const final {
    return CreateMaybeMessage<ListASGroupsResponse>(nullptr);
  }

  ListASGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListASGroupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListASGroupsResponse& from);
  void MergeFrom(const ListASGroupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListASGroupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.ListASGroupsResponse";
  }
  protected:
  explicit ListASGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsGroupsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.as_group.v202212.ASGroupDetailed as_groups = 1[json_name = "asGroups", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int as_groups_size() const;
  private:
  int _internal_as_groups_size() const;
  public:
  void clear_as_groups();
  ::kentik::as_group::v202212::ASGroupDetailed* mutable_as_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::ASGroupDetailed >*
      mutable_as_groups();
  private:
  const ::kentik::as_group::v202212::ASGroupDetailed& _internal_as_groups(int index) const;
  ::kentik::as_group::v202212::ASGroupDetailed* _internal_add_as_groups();
  public:
  const ::kentik::as_group::v202212::ASGroupDetailed& as_groups(int index) const;
  ::kentik::as_group::v202212::ASGroupDetailed* add_as_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::ASGroupDetailed >&
      as_groups() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.ListASGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::ASGroupDetailed > as_groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class GetASGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.GetASGroupRequest) */ {
 public:
  inline GetASGroupRequest() : GetASGroupRequest(nullptr) {};
  virtual ~GetASGroupRequest();

  GetASGroupRequest(const GetASGroupRequest& from);
  GetASGroupRequest(GetASGroupRequest&& from) noexcept
    : GetASGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetASGroupRequest& operator=(const GetASGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetASGroupRequest& operator=(GetASGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetASGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetASGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetASGroupRequest*>(
               &_GetASGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetASGroupRequest& a, GetASGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetASGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetASGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetASGroupRequest* New() const final {
    return CreateMaybeMessage<GetASGroupRequest>(nullptr);
  }

  GetASGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetASGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetASGroupRequest& from);
  void MergeFrom(const GetASGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetASGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.GetASGroupRequest";
  }
  protected:
  explicit GetASGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.GetASGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class GetASGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.GetASGroupResponse) */ {
 public:
  inline GetASGroupResponse() : GetASGroupResponse(nullptr) {};
  virtual ~GetASGroupResponse();

  GetASGroupResponse(const GetASGroupResponse& from);
  GetASGroupResponse(GetASGroupResponse&& from) noexcept
    : GetASGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetASGroupResponse& operator=(const GetASGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetASGroupResponse& operator=(GetASGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetASGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetASGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetASGroupResponse*>(
               &_GetASGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetASGroupResponse& a, GetASGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetASGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetASGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetASGroupResponse* New() const final {
    return CreateMaybeMessage<GetASGroupResponse>(nullptr);
  }

  GetASGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetASGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetASGroupResponse& from);
  void MergeFrom(const GetASGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetASGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.GetASGroupResponse";
  }
  protected:
  explicit GetASGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsGroupFieldNumber = 1,
  };
  // .kentik.as_group.v202212.ASGroupDetailed as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_as_group() const;
  private:
  bool _internal_has_as_group() const;
  public:
  void clear_as_group();
  const ::kentik::as_group::v202212::ASGroupDetailed& as_group() const;
  ::kentik::as_group::v202212::ASGroupDetailed* release_as_group();
  ::kentik::as_group::v202212::ASGroupDetailed* mutable_as_group();
  void set_allocated_as_group(::kentik::as_group::v202212::ASGroupDetailed* as_group);
  private:
  const ::kentik::as_group::v202212::ASGroupDetailed& _internal_as_group() const;
  ::kentik::as_group::v202212::ASGroupDetailed* _internal_mutable_as_group();
  public:
  void unsafe_arena_set_allocated_as_group(
      ::kentik::as_group::v202212::ASGroupDetailed* as_group);
  ::kentik::as_group::v202212::ASGroupDetailed* unsafe_arena_release_as_group();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.GetASGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::as_group::v202212::ASGroupDetailed* as_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class CreateASGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.CreateASGroupRequest) */ {
 public:
  inline CreateASGroupRequest() : CreateASGroupRequest(nullptr) {};
  virtual ~CreateASGroupRequest();

  CreateASGroupRequest(const CreateASGroupRequest& from);
  CreateASGroupRequest(CreateASGroupRequest&& from) noexcept
    : CreateASGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateASGroupRequest& operator=(const CreateASGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateASGroupRequest& operator=(CreateASGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateASGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateASGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateASGroupRequest*>(
               &_CreateASGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateASGroupRequest& a, CreateASGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateASGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateASGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateASGroupRequest* New() const final {
    return CreateMaybeMessage<CreateASGroupRequest>(nullptr);
  }

  CreateASGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateASGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateASGroupRequest& from);
  void MergeFrom(const CreateASGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateASGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.CreateASGroupRequest";
  }
  protected:
  explicit CreateASGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsGroupFieldNumber = 1,
  };
  // .kentik.as_group.v202212.ASGroupConcise as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_as_group() const;
  private:
  bool _internal_has_as_group() const;
  public:
  void clear_as_group();
  const ::kentik::as_group::v202212::ASGroupConcise& as_group() const;
  ::kentik::as_group::v202212::ASGroupConcise* release_as_group();
  ::kentik::as_group::v202212::ASGroupConcise* mutable_as_group();
  void set_allocated_as_group(::kentik::as_group::v202212::ASGroupConcise* as_group);
  private:
  const ::kentik::as_group::v202212::ASGroupConcise& _internal_as_group() const;
  ::kentik::as_group::v202212::ASGroupConcise* _internal_mutable_as_group();
  public:
  void unsafe_arena_set_allocated_as_group(
      ::kentik::as_group::v202212::ASGroupConcise* as_group);
  ::kentik::as_group::v202212::ASGroupConcise* unsafe_arena_release_as_group();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.CreateASGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::as_group::v202212::ASGroupConcise* as_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class CreateASGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.CreateASGroupResponse) */ {
 public:
  inline CreateASGroupResponse() : CreateASGroupResponse(nullptr) {};
  virtual ~CreateASGroupResponse();

  CreateASGroupResponse(const CreateASGroupResponse& from);
  CreateASGroupResponse(CreateASGroupResponse&& from) noexcept
    : CreateASGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateASGroupResponse& operator=(const CreateASGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateASGroupResponse& operator=(CreateASGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateASGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateASGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateASGroupResponse*>(
               &_CreateASGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateASGroupResponse& a, CreateASGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateASGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateASGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateASGroupResponse* New() const final {
    return CreateMaybeMessage<CreateASGroupResponse>(nullptr);
  }

  CreateASGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateASGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateASGroupResponse& from);
  void MergeFrom(const CreateASGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateASGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.CreateASGroupResponse";
  }
  protected:
  explicit CreateASGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsGroupFieldNumber = 1,
  };
  // .kentik.as_group.v202212.ASGroupDetailed as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_as_group() const;
  private:
  bool _internal_has_as_group() const;
  public:
  void clear_as_group();
  const ::kentik::as_group::v202212::ASGroupDetailed& as_group() const;
  ::kentik::as_group::v202212::ASGroupDetailed* release_as_group();
  ::kentik::as_group::v202212::ASGroupDetailed* mutable_as_group();
  void set_allocated_as_group(::kentik::as_group::v202212::ASGroupDetailed* as_group);
  private:
  const ::kentik::as_group::v202212::ASGroupDetailed& _internal_as_group() const;
  ::kentik::as_group::v202212::ASGroupDetailed* _internal_mutable_as_group();
  public:
  void unsafe_arena_set_allocated_as_group(
      ::kentik::as_group::v202212::ASGroupDetailed* as_group);
  ::kentik::as_group::v202212::ASGroupDetailed* unsafe_arena_release_as_group();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.CreateASGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::as_group::v202212::ASGroupDetailed* as_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class UpdateASGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.UpdateASGroupRequest) */ {
 public:
  inline UpdateASGroupRequest() : UpdateASGroupRequest(nullptr) {};
  virtual ~UpdateASGroupRequest();

  UpdateASGroupRequest(const UpdateASGroupRequest& from);
  UpdateASGroupRequest(UpdateASGroupRequest&& from) noexcept
    : UpdateASGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateASGroupRequest& operator=(const UpdateASGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateASGroupRequest& operator=(UpdateASGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateASGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateASGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateASGroupRequest*>(
               &_UpdateASGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateASGroupRequest& a, UpdateASGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateASGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateASGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateASGroupRequest* New() const final {
    return CreateMaybeMessage<UpdateASGroupRequest>(nullptr);
  }

  UpdateASGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateASGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateASGroupRequest& from);
  void MergeFrom(const UpdateASGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateASGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.UpdateASGroupRequest";
  }
  protected:
  explicit UpdateASGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsGroupFieldNumber = 1,
  };
  // .kentik.as_group.v202212.ASGroupConcise as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_as_group() const;
  private:
  bool _internal_has_as_group() const;
  public:
  void clear_as_group();
  const ::kentik::as_group::v202212::ASGroupConcise& as_group() const;
  ::kentik::as_group::v202212::ASGroupConcise* release_as_group();
  ::kentik::as_group::v202212::ASGroupConcise* mutable_as_group();
  void set_allocated_as_group(::kentik::as_group::v202212::ASGroupConcise* as_group);
  private:
  const ::kentik::as_group::v202212::ASGroupConcise& _internal_as_group() const;
  ::kentik::as_group::v202212::ASGroupConcise* _internal_mutable_as_group();
  public:
  void unsafe_arena_set_allocated_as_group(
      ::kentik::as_group::v202212::ASGroupConcise* as_group);
  ::kentik::as_group::v202212::ASGroupConcise* unsafe_arena_release_as_group();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.UpdateASGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::as_group::v202212::ASGroupConcise* as_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class UpdateASGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.UpdateASGroupResponse) */ {
 public:
  inline UpdateASGroupResponse() : UpdateASGroupResponse(nullptr) {};
  virtual ~UpdateASGroupResponse();

  UpdateASGroupResponse(const UpdateASGroupResponse& from);
  UpdateASGroupResponse(UpdateASGroupResponse&& from) noexcept
    : UpdateASGroupResponse() {
    *this = ::std::move(from);
  }

  inline UpdateASGroupResponse& operator=(const UpdateASGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateASGroupResponse& operator=(UpdateASGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateASGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateASGroupResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateASGroupResponse*>(
               &_UpdateASGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateASGroupResponse& a, UpdateASGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateASGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateASGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateASGroupResponse* New() const final {
    return CreateMaybeMessage<UpdateASGroupResponse>(nullptr);
  }

  UpdateASGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateASGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateASGroupResponse& from);
  void MergeFrom(const UpdateASGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateASGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.UpdateASGroupResponse";
  }
  protected:
  explicit UpdateASGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsGroupFieldNumber = 1,
  };
  // .kentik.as_group.v202212.ASGroupDetailed as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_as_group() const;
  private:
  bool _internal_has_as_group() const;
  public:
  void clear_as_group();
  const ::kentik::as_group::v202212::ASGroupDetailed& as_group() const;
  ::kentik::as_group::v202212::ASGroupDetailed* release_as_group();
  ::kentik::as_group::v202212::ASGroupDetailed* mutable_as_group();
  void set_allocated_as_group(::kentik::as_group::v202212::ASGroupDetailed* as_group);
  private:
  const ::kentik::as_group::v202212::ASGroupDetailed& _internal_as_group() const;
  ::kentik::as_group::v202212::ASGroupDetailed* _internal_mutable_as_group();
  public:
  void unsafe_arena_set_allocated_as_group(
      ::kentik::as_group::v202212::ASGroupDetailed* as_group);
  ::kentik::as_group::v202212::ASGroupDetailed* unsafe_arena_release_as_group();

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.UpdateASGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::as_group::v202212::ASGroupDetailed* as_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class DeleteASGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.DeleteASGroupRequest) */ {
 public:
  inline DeleteASGroupRequest() : DeleteASGroupRequest(nullptr) {};
  virtual ~DeleteASGroupRequest();

  DeleteASGroupRequest(const DeleteASGroupRequest& from);
  DeleteASGroupRequest(DeleteASGroupRequest&& from) noexcept
    : DeleteASGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteASGroupRequest& operator=(const DeleteASGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteASGroupRequest& operator=(DeleteASGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteASGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteASGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteASGroupRequest*>(
               &_DeleteASGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteASGroupRequest& a, DeleteASGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteASGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteASGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteASGroupRequest* New() const final {
    return CreateMaybeMessage<DeleteASGroupRequest>(nullptr);
  }

  DeleteASGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteASGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteASGroupRequest& from);
  void MergeFrom(const DeleteASGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteASGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.DeleteASGroupRequest";
  }
  protected:
  explicit DeleteASGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.DeleteASGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class DeleteASGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.as_group.v202212.DeleteASGroupResponse) */ {
 public:
  inline DeleteASGroupResponse() : DeleteASGroupResponse(nullptr) {};
  virtual ~DeleteASGroupResponse();

  DeleteASGroupResponse(const DeleteASGroupResponse& from);
  DeleteASGroupResponse(DeleteASGroupResponse&& from) noexcept
    : DeleteASGroupResponse() {
    *this = ::std::move(from);
  }

  inline DeleteASGroupResponse& operator=(const DeleteASGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteASGroupResponse& operator=(DeleteASGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteASGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteASGroupResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteASGroupResponse*>(
               &_DeleteASGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteASGroupResponse& a, DeleteASGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteASGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteASGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteASGroupResponse* New() const final {
    return CreateMaybeMessage<DeleteASGroupResponse>(nullptr);
  }

  DeleteASGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteASGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteASGroupResponse& from);
  void MergeFrom(const DeleteASGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteASGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.as_group.v202212.DeleteASGroupResponse";
  }
  protected:
  explicit DeleteASGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto);
    return ::descriptor_table_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.as_group.v202212.DeleteASGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutonomousSystem

// uint32 asn = 1[json_name = "asn"];
inline void AutonomousSystem::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AutonomousSystem::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AutonomousSystem::asn() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.AutonomousSystem.asn)
  return _internal_asn();
}
inline void AutonomousSystem::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void AutonomousSystem::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.AutonomousSystem.asn)
}

// string name = 2[json_name = "name"];
inline void AutonomousSystem::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AutonomousSystem::name() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.AutonomousSystem.name)
  return _internal_name();
}
inline void AutonomousSystem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.AutonomousSystem.name)
}
inline std::string* AutonomousSystem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.AutonomousSystem.name)
  return _internal_mutable_name();
}
inline const std::string& AutonomousSystem::_internal_name() const {
  return name_.Get();
}
inline void AutonomousSystem::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutonomousSystem::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.AutonomousSystem.name)
}
inline void AutonomousSystem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.AutonomousSystem.name)
}
inline void AutonomousSystem::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.AutonomousSystem.name)
}
inline std::string* AutonomousSystem::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutonomousSystem::release_name() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.AutonomousSystem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutonomousSystem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.AutonomousSystem.name)
}
inline std::string* AutonomousSystem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.AutonomousSystem.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutonomousSystem::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.AutonomousSystem.name)
}

// -------------------------------------------------------------------

// ASGroupConcise

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ASGroupConcise::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASGroupConcise::id() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupConcise.id)
  return _internal_id();
}
inline void ASGroupConcise::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ASGroupConcise.id)
}
inline std::string* ASGroupConcise::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupConcise.id)
  return _internal_mutable_id();
}
inline const std::string& ASGroupConcise::_internal_id() const {
  return id_.Get();
}
inline void ASGroupConcise::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASGroupConcise::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.ASGroupConcise.id)
}
inline void ASGroupConcise::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.ASGroupConcise.id)
}
inline void ASGroupConcise::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.ASGroupConcise.id)
}
inline std::string* ASGroupConcise::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASGroupConcise::release_id() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupConcise.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASGroupConcise::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupConcise.id)
}
inline std::string* ASGroupConcise::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.ASGroupConcise.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASGroupConcise::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupConcise.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ASGroupConcise::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASGroupConcise::name() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupConcise.name)
  return _internal_name();
}
inline void ASGroupConcise::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ASGroupConcise.name)
}
inline std::string* ASGroupConcise::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupConcise.name)
  return _internal_mutable_name();
}
inline const std::string& ASGroupConcise::_internal_name() const {
  return name_.Get();
}
inline void ASGroupConcise::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASGroupConcise::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.ASGroupConcise.name)
}
inline void ASGroupConcise::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.ASGroupConcise.name)
}
inline void ASGroupConcise::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.ASGroupConcise.name)
}
inline std::string* ASGroupConcise::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASGroupConcise::release_name() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupConcise.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASGroupConcise::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupConcise.name)
}
inline std::string* ASGroupConcise::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.ASGroupConcise.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASGroupConcise::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupConcise.name)
}

// repeated string asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ASGroupConcise::_internal_asn_size() const {
  return asn_.size();
}
inline int ASGroupConcise::asn_size() const {
  return _internal_asn_size();
}
inline void ASGroupConcise::clear_asn() {
  asn_.Clear();
}
inline std::string* ASGroupConcise::add_asn() {
  // @@protoc_insertion_point(field_add_mutable:kentik.as_group.v202212.ASGroupConcise.asn)
  return _internal_add_asn();
}
inline const std::string& ASGroupConcise::_internal_asn(int index) const {
  return asn_.Get(index);
}
inline const std::string& ASGroupConcise::asn(int index) const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupConcise.asn)
  return _internal_asn(index);
}
inline std::string* ASGroupConcise::mutable_asn(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupConcise.asn)
  return asn_.Mutable(index);
}
inline void ASGroupConcise::set_asn(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ASGroupConcise.asn)
  asn_.Mutable(index)->assign(value);
}
inline void ASGroupConcise::set_asn(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ASGroupConcise.asn)
  asn_.Mutable(index)->assign(std::move(value));
}
inline void ASGroupConcise::set_asn(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  asn_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.ASGroupConcise.asn)
}
inline void ASGroupConcise::set_asn(int index, const char* value, size_t size) {
  asn_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.ASGroupConcise.asn)
}
inline std::string* ASGroupConcise::_internal_add_asn() {
  return asn_.Add();
}
inline void ASGroupConcise::add_asn(const std::string& value) {
  asn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.as_group.v202212.ASGroupConcise.asn)
}
inline void ASGroupConcise::add_asn(std::string&& value) {
  asn_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.as_group.v202212.ASGroupConcise.asn)
}
inline void ASGroupConcise::add_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  asn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.as_group.v202212.ASGroupConcise.asn)
}
inline void ASGroupConcise::add_asn(const char* value, size_t size) {
  asn_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.as_group.v202212.ASGroupConcise.asn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ASGroupConcise::asn() const {
  // @@protoc_insertion_point(field_list:kentik.as_group.v202212.ASGroupConcise.asn)
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ASGroupConcise::mutable_asn() {
  // @@protoc_insertion_point(field_mutable_list:kentik.as_group.v202212.ASGroupConcise.asn)
  return &asn_;
}

// .google.protobuf.Timestamp created_date = 5[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool ASGroupConcise::_internal_has_created_date() const {
  return this != internal_default_instance() && created_date_ != nullptr;
}
inline bool ASGroupConcise::has_created_date() const {
  return _internal_has_created_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupConcise::_internal_created_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupConcise::created_date() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupConcise.created_date)
  return _internal_created_date();
}
inline void ASGroupConcise::unsafe_arena_set_allocated_created_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  created_date_ = created_date;
  if (created_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupConcise.created_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::release_created_date() {
  auto temp = unsafe_arena_release_created_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::unsafe_arena_release_created_date() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupConcise.created_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_date_;
  created_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::_internal_mutable_created_date() {
  
  if (created_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_date_ = p;
  }
  return created_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::mutable_created_date() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupConcise.created_date)
  return _internal_mutable_created_date();
}
inline void ASGroupConcise::set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  if (created_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date)->GetArena();
    if (message_arena != submessage_arena) {
      created_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_date, submessage_arena);
    }
    
  } else {
    
  }
  created_date_ = created_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupConcise.created_date)
}

// .google.protobuf.Timestamp updated_date = 6[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool ASGroupConcise::_internal_has_updated_date() const {
  return this != internal_default_instance() && updated_date_ != nullptr;
}
inline bool ASGroupConcise::has_updated_date() const {
  return _internal_has_updated_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupConcise::_internal_updated_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupConcise::updated_date() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupConcise.updated_date)
  return _internal_updated_date();
}
inline void ASGroupConcise::unsafe_arena_set_allocated_updated_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  updated_date_ = updated_date;
  if (updated_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupConcise.updated_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::release_updated_date() {
  auto temp = unsafe_arena_release_updated_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::unsafe_arena_release_updated_date() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupConcise.updated_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_date_;
  updated_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::_internal_mutable_updated_date() {
  
  if (updated_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_date_ = p;
  }
  return updated_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupConcise::mutable_updated_date() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupConcise.updated_date)
  return _internal_mutable_updated_date();
}
inline void ASGroupConcise::set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  if (updated_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date)->GetArena();
    if (message_arena != submessage_arena) {
      updated_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_date, submessage_arena);
    }
    
  } else {
    
  }
  updated_date_ = updated_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupConcise.updated_date)
}

// -------------------------------------------------------------------

// ASGroupDetailed

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ASGroupDetailed::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASGroupDetailed::id() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupDetailed.id)
  return _internal_id();
}
inline void ASGroupDetailed::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ASGroupDetailed.id)
}
inline std::string* ASGroupDetailed::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupDetailed.id)
  return _internal_mutable_id();
}
inline const std::string& ASGroupDetailed::_internal_id() const {
  return id_.Get();
}
inline void ASGroupDetailed::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASGroupDetailed::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.ASGroupDetailed.id)
}
inline void ASGroupDetailed::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.ASGroupDetailed.id)
}
inline void ASGroupDetailed::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.ASGroupDetailed.id)
}
inline std::string* ASGroupDetailed::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASGroupDetailed::release_id() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupDetailed.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASGroupDetailed::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupDetailed.id)
}
inline std::string* ASGroupDetailed::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.ASGroupDetailed.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASGroupDetailed::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupDetailed.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ASGroupDetailed::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASGroupDetailed::name() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupDetailed.name)
  return _internal_name();
}
inline void ASGroupDetailed::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ASGroupDetailed.name)
}
inline std::string* ASGroupDetailed::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupDetailed.name)
  return _internal_mutable_name();
}
inline const std::string& ASGroupDetailed::_internal_name() const {
  return name_.Get();
}
inline void ASGroupDetailed::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASGroupDetailed::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.ASGroupDetailed.name)
}
inline void ASGroupDetailed::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.ASGroupDetailed.name)
}
inline void ASGroupDetailed::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.ASGroupDetailed.name)
}
inline std::string* ASGroupDetailed::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASGroupDetailed::release_name() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupDetailed.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASGroupDetailed::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupDetailed.name)
}
inline std::string* ASGroupDetailed::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.ASGroupDetailed.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASGroupDetailed::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupDetailed.name)
}

// repeated .kentik.as_group.v202212.AutonomousSystem asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ASGroupDetailed::_internal_asn_size() const {
  return asn_.size();
}
inline int ASGroupDetailed::asn_size() const {
  return _internal_asn_size();
}
inline void ASGroupDetailed::clear_asn() {
  asn_.Clear();
}
inline ::kentik::as_group::v202212::AutonomousSystem* ASGroupDetailed::mutable_asn(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupDetailed.asn)
  return asn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::AutonomousSystem >*
ASGroupDetailed::mutable_asn() {
  // @@protoc_insertion_point(field_mutable_list:kentik.as_group.v202212.ASGroupDetailed.asn)
  return &asn_;
}
inline const ::kentik::as_group::v202212::AutonomousSystem& ASGroupDetailed::_internal_asn(int index) const {
  return asn_.Get(index);
}
inline const ::kentik::as_group::v202212::AutonomousSystem& ASGroupDetailed::asn(int index) const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupDetailed.asn)
  return _internal_asn(index);
}
inline ::kentik::as_group::v202212::AutonomousSystem* ASGroupDetailed::_internal_add_asn() {
  return asn_.Add();
}
inline ::kentik::as_group::v202212::AutonomousSystem* ASGroupDetailed::add_asn() {
  // @@protoc_insertion_point(field_add:kentik.as_group.v202212.ASGroupDetailed.asn)
  return _internal_add_asn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::AutonomousSystem >&
ASGroupDetailed::asn() const {
  // @@protoc_insertion_point(field_list:kentik.as_group.v202212.ASGroupDetailed.asn)
  return asn_;
}

// .google.protobuf.Timestamp created_date = 5[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool ASGroupDetailed::_internal_has_created_date() const {
  return this != internal_default_instance() && created_date_ != nullptr;
}
inline bool ASGroupDetailed::has_created_date() const {
  return _internal_has_created_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupDetailed::_internal_created_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupDetailed::created_date() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupDetailed.created_date)
  return _internal_created_date();
}
inline void ASGroupDetailed::unsafe_arena_set_allocated_created_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  created_date_ = created_date;
  if (created_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupDetailed.created_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::release_created_date() {
  auto temp = unsafe_arena_release_created_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::unsafe_arena_release_created_date() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupDetailed.created_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_date_;
  created_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::_internal_mutable_created_date() {
  
  if (created_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_date_ = p;
  }
  return created_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::mutable_created_date() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupDetailed.created_date)
  return _internal_mutable_created_date();
}
inline void ASGroupDetailed::set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  if (created_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date)->GetArena();
    if (message_arena != submessage_arena) {
      created_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_date, submessage_arena);
    }
    
  } else {
    
  }
  created_date_ = created_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupDetailed.created_date)
}

// .google.protobuf.Timestamp updated_date = 6[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool ASGroupDetailed::_internal_has_updated_date() const {
  return this != internal_default_instance() && updated_date_ != nullptr;
}
inline bool ASGroupDetailed::has_updated_date() const {
  return _internal_has_updated_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupDetailed::_internal_updated_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ASGroupDetailed::updated_date() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ASGroupDetailed.updated_date)
  return _internal_updated_date();
}
inline void ASGroupDetailed::unsafe_arena_set_allocated_updated_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  updated_date_ = updated_date;
  if (updated_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.ASGroupDetailed.updated_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::release_updated_date() {
  auto temp = unsafe_arena_release_updated_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::unsafe_arena_release_updated_date() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.ASGroupDetailed.updated_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_date_;
  updated_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::_internal_mutable_updated_date() {
  
  if (updated_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_date_ = p;
  }
  return updated_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ASGroupDetailed::mutable_updated_date() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ASGroupDetailed.updated_date)
  return _internal_mutable_updated_date();
}
inline void ASGroupDetailed::set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  if (updated_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date)->GetArena();
    if (message_arena != submessage_arena) {
      updated_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_date, submessage_arena);
    }
    
  } else {
    
  }
  updated_date_ = updated_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.ASGroupDetailed.updated_date)
}

// -------------------------------------------------------------------

// ListASGroupsRequest

// -------------------------------------------------------------------

// ListASGroupsResponse

// repeated .kentik.as_group.v202212.ASGroupDetailed as_groups = 1[json_name = "asGroups", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListASGroupsResponse::_internal_as_groups_size() const {
  return as_groups_.size();
}
inline int ListASGroupsResponse::as_groups_size() const {
  return _internal_as_groups_size();
}
inline void ListASGroupsResponse::clear_as_groups() {
  as_groups_.Clear();
}
inline ::kentik::as_group::v202212::ASGroupDetailed* ListASGroupsResponse::mutable_as_groups(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.ListASGroupsResponse.as_groups)
  return as_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::ASGroupDetailed >*
ListASGroupsResponse::mutable_as_groups() {
  // @@protoc_insertion_point(field_mutable_list:kentik.as_group.v202212.ListASGroupsResponse.as_groups)
  return &as_groups_;
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& ListASGroupsResponse::_internal_as_groups(int index) const {
  return as_groups_.Get(index);
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& ListASGroupsResponse::as_groups(int index) const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ListASGroupsResponse.as_groups)
  return _internal_as_groups(index);
}
inline ::kentik::as_group::v202212::ASGroupDetailed* ListASGroupsResponse::_internal_add_as_groups() {
  return as_groups_.Add();
}
inline ::kentik::as_group::v202212::ASGroupDetailed* ListASGroupsResponse::add_as_groups() {
  // @@protoc_insertion_point(field_add:kentik.as_group.v202212.ListASGroupsResponse.as_groups)
  return _internal_add_as_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::as_group::v202212::ASGroupDetailed >&
ListASGroupsResponse::as_groups() const {
  // @@protoc_insertion_point(field_list:kentik.as_group.v202212.ListASGroupsResponse.as_groups)
  return as_groups_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListASGroupsResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListASGroupsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListASGroupsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.ListASGroupsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListASGroupsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListASGroupsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.ListASGroupsResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetASGroupRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASGroupRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.GetASGroupRequest.id)
  return _internal_id();
}
inline void GetASGroupRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.GetASGroupRequest.id)
}
inline std::string* GetASGroupRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.GetASGroupRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetASGroupRequest::_internal_id() const {
  return id_.Get();
}
inline void GetASGroupRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASGroupRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.GetASGroupRequest.id)
}
inline void GetASGroupRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.GetASGroupRequest.id)
}
inline void GetASGroupRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.GetASGroupRequest.id)
}
inline std::string* GetASGroupRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.GetASGroupRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.GetASGroupRequest.id)
}
inline std::string* GetASGroupRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.GetASGroupRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASGroupRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.GetASGroupRequest.id)
}

// -------------------------------------------------------------------

// GetASGroupResponse

// .kentik.as_group.v202212.ASGroupDetailed as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetASGroupResponse::_internal_has_as_group() const {
  return this != internal_default_instance() && as_group_ != nullptr;
}
inline bool GetASGroupResponse::has_as_group() const {
  return _internal_has_as_group();
}
inline void GetASGroupResponse::clear_as_group() {
  if (GetArena() == nullptr && as_group_ != nullptr) {
    delete as_group_;
  }
  as_group_ = nullptr;
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& GetASGroupResponse::_internal_as_group() const {
  const ::kentik::as_group::v202212::ASGroupDetailed* p = as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::as_group::v202212::ASGroupDetailed*>(
      &::kentik::as_group::v202212::_ASGroupDetailed_default_instance_);
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& GetASGroupResponse::as_group() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.GetASGroupResponse.as_group)
  return _internal_as_group();
}
inline void GetASGroupResponse::unsafe_arena_set_allocated_as_group(
    ::kentik::as_group::v202212::ASGroupDetailed* as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_group_);
  }
  as_group_ = as_group;
  if (as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.GetASGroupResponse.as_group)
}
inline ::kentik::as_group::v202212::ASGroupDetailed* GetASGroupResponse::release_as_group() {
  auto temp = unsafe_arena_release_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* GetASGroupResponse::unsafe_arena_release_as_group() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.GetASGroupResponse.as_group)
  
  ::kentik::as_group::v202212::ASGroupDetailed* temp = as_group_;
  as_group_ = nullptr;
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* GetASGroupResponse::_internal_mutable_as_group() {
  
  if (as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::as_group::v202212::ASGroupDetailed>(GetArena());
    as_group_ = p;
  }
  return as_group_;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* GetASGroupResponse::mutable_as_group() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.GetASGroupResponse.as_group)
  return _internal_mutable_as_group();
}
inline void GetASGroupResponse::set_allocated_as_group(::kentik::as_group::v202212::ASGroupDetailed* as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete as_group_;
  }
  if (as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(as_group);
    if (message_arena != submessage_arena) {
      as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_group, submessage_arena);
    }
    
  } else {
    
  }
  as_group_ = as_group;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.GetASGroupResponse.as_group)
}

// -------------------------------------------------------------------

// CreateASGroupRequest

// .kentik.as_group.v202212.ASGroupConcise as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateASGroupRequest::_internal_has_as_group() const {
  return this != internal_default_instance() && as_group_ != nullptr;
}
inline bool CreateASGroupRequest::has_as_group() const {
  return _internal_has_as_group();
}
inline void CreateASGroupRequest::clear_as_group() {
  if (GetArena() == nullptr && as_group_ != nullptr) {
    delete as_group_;
  }
  as_group_ = nullptr;
}
inline const ::kentik::as_group::v202212::ASGroupConcise& CreateASGroupRequest::_internal_as_group() const {
  const ::kentik::as_group::v202212::ASGroupConcise* p = as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::as_group::v202212::ASGroupConcise*>(
      &::kentik::as_group::v202212::_ASGroupConcise_default_instance_);
}
inline const ::kentik::as_group::v202212::ASGroupConcise& CreateASGroupRequest::as_group() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.CreateASGroupRequest.as_group)
  return _internal_as_group();
}
inline void CreateASGroupRequest::unsafe_arena_set_allocated_as_group(
    ::kentik::as_group::v202212::ASGroupConcise* as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_group_);
  }
  as_group_ = as_group;
  if (as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.CreateASGroupRequest.as_group)
}
inline ::kentik::as_group::v202212::ASGroupConcise* CreateASGroupRequest::release_as_group() {
  auto temp = unsafe_arena_release_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupConcise* CreateASGroupRequest::unsafe_arena_release_as_group() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.CreateASGroupRequest.as_group)
  
  ::kentik::as_group::v202212::ASGroupConcise* temp = as_group_;
  as_group_ = nullptr;
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupConcise* CreateASGroupRequest::_internal_mutable_as_group() {
  
  if (as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::as_group::v202212::ASGroupConcise>(GetArena());
    as_group_ = p;
  }
  return as_group_;
}
inline ::kentik::as_group::v202212::ASGroupConcise* CreateASGroupRequest::mutable_as_group() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.CreateASGroupRequest.as_group)
  return _internal_mutable_as_group();
}
inline void CreateASGroupRequest::set_allocated_as_group(::kentik::as_group::v202212::ASGroupConcise* as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete as_group_;
  }
  if (as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(as_group);
    if (message_arena != submessage_arena) {
      as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_group, submessage_arena);
    }
    
  } else {
    
  }
  as_group_ = as_group;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.CreateASGroupRequest.as_group)
}

// -------------------------------------------------------------------

// CreateASGroupResponse

// .kentik.as_group.v202212.ASGroupDetailed as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateASGroupResponse::_internal_has_as_group() const {
  return this != internal_default_instance() && as_group_ != nullptr;
}
inline bool CreateASGroupResponse::has_as_group() const {
  return _internal_has_as_group();
}
inline void CreateASGroupResponse::clear_as_group() {
  if (GetArena() == nullptr && as_group_ != nullptr) {
    delete as_group_;
  }
  as_group_ = nullptr;
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& CreateASGroupResponse::_internal_as_group() const {
  const ::kentik::as_group::v202212::ASGroupDetailed* p = as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::as_group::v202212::ASGroupDetailed*>(
      &::kentik::as_group::v202212::_ASGroupDetailed_default_instance_);
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& CreateASGroupResponse::as_group() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.CreateASGroupResponse.as_group)
  return _internal_as_group();
}
inline void CreateASGroupResponse::unsafe_arena_set_allocated_as_group(
    ::kentik::as_group::v202212::ASGroupDetailed* as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_group_);
  }
  as_group_ = as_group;
  if (as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.CreateASGroupResponse.as_group)
}
inline ::kentik::as_group::v202212::ASGroupDetailed* CreateASGroupResponse::release_as_group() {
  auto temp = unsafe_arena_release_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* CreateASGroupResponse::unsafe_arena_release_as_group() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.CreateASGroupResponse.as_group)
  
  ::kentik::as_group::v202212::ASGroupDetailed* temp = as_group_;
  as_group_ = nullptr;
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* CreateASGroupResponse::_internal_mutable_as_group() {
  
  if (as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::as_group::v202212::ASGroupDetailed>(GetArena());
    as_group_ = p;
  }
  return as_group_;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* CreateASGroupResponse::mutable_as_group() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.CreateASGroupResponse.as_group)
  return _internal_mutable_as_group();
}
inline void CreateASGroupResponse::set_allocated_as_group(::kentik::as_group::v202212::ASGroupDetailed* as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete as_group_;
  }
  if (as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(as_group);
    if (message_arena != submessage_arena) {
      as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_group, submessage_arena);
    }
    
  } else {
    
  }
  as_group_ = as_group;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.CreateASGroupResponse.as_group)
}

// -------------------------------------------------------------------

// UpdateASGroupRequest

// .kentik.as_group.v202212.ASGroupConcise as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateASGroupRequest::_internal_has_as_group() const {
  return this != internal_default_instance() && as_group_ != nullptr;
}
inline bool UpdateASGroupRequest::has_as_group() const {
  return _internal_has_as_group();
}
inline void UpdateASGroupRequest::clear_as_group() {
  if (GetArena() == nullptr && as_group_ != nullptr) {
    delete as_group_;
  }
  as_group_ = nullptr;
}
inline const ::kentik::as_group::v202212::ASGroupConcise& UpdateASGroupRequest::_internal_as_group() const {
  const ::kentik::as_group::v202212::ASGroupConcise* p = as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::as_group::v202212::ASGroupConcise*>(
      &::kentik::as_group::v202212::_ASGroupConcise_default_instance_);
}
inline const ::kentik::as_group::v202212::ASGroupConcise& UpdateASGroupRequest::as_group() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.UpdateASGroupRequest.as_group)
  return _internal_as_group();
}
inline void UpdateASGroupRequest::unsafe_arena_set_allocated_as_group(
    ::kentik::as_group::v202212::ASGroupConcise* as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_group_);
  }
  as_group_ = as_group;
  if (as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.UpdateASGroupRequest.as_group)
}
inline ::kentik::as_group::v202212::ASGroupConcise* UpdateASGroupRequest::release_as_group() {
  auto temp = unsafe_arena_release_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupConcise* UpdateASGroupRequest::unsafe_arena_release_as_group() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.UpdateASGroupRequest.as_group)
  
  ::kentik::as_group::v202212::ASGroupConcise* temp = as_group_;
  as_group_ = nullptr;
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupConcise* UpdateASGroupRequest::_internal_mutable_as_group() {
  
  if (as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::as_group::v202212::ASGroupConcise>(GetArena());
    as_group_ = p;
  }
  return as_group_;
}
inline ::kentik::as_group::v202212::ASGroupConcise* UpdateASGroupRequest::mutable_as_group() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.UpdateASGroupRequest.as_group)
  return _internal_mutable_as_group();
}
inline void UpdateASGroupRequest::set_allocated_as_group(::kentik::as_group::v202212::ASGroupConcise* as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete as_group_;
  }
  if (as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(as_group);
    if (message_arena != submessage_arena) {
      as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_group, submessage_arena);
    }
    
  } else {
    
  }
  as_group_ = as_group;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.UpdateASGroupRequest.as_group)
}

// -------------------------------------------------------------------

// UpdateASGroupResponse

// .kentik.as_group.v202212.ASGroupDetailed as_group = 1[json_name = "asGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateASGroupResponse::_internal_has_as_group() const {
  return this != internal_default_instance() && as_group_ != nullptr;
}
inline bool UpdateASGroupResponse::has_as_group() const {
  return _internal_has_as_group();
}
inline void UpdateASGroupResponse::clear_as_group() {
  if (GetArena() == nullptr && as_group_ != nullptr) {
    delete as_group_;
  }
  as_group_ = nullptr;
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& UpdateASGroupResponse::_internal_as_group() const {
  const ::kentik::as_group::v202212::ASGroupDetailed* p = as_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::as_group::v202212::ASGroupDetailed*>(
      &::kentik::as_group::v202212::_ASGroupDetailed_default_instance_);
}
inline const ::kentik::as_group::v202212::ASGroupDetailed& UpdateASGroupResponse::as_group() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.UpdateASGroupResponse.as_group)
  return _internal_as_group();
}
inline void UpdateASGroupResponse::unsafe_arena_set_allocated_as_group(
    ::kentik::as_group::v202212::ASGroupDetailed* as_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_group_);
  }
  as_group_ = as_group;
  if (as_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.UpdateASGroupResponse.as_group)
}
inline ::kentik::as_group::v202212::ASGroupDetailed* UpdateASGroupResponse::release_as_group() {
  auto temp = unsafe_arena_release_as_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* UpdateASGroupResponse::unsafe_arena_release_as_group() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.UpdateASGroupResponse.as_group)
  
  ::kentik::as_group::v202212::ASGroupDetailed* temp = as_group_;
  as_group_ = nullptr;
  return temp;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* UpdateASGroupResponse::_internal_mutable_as_group() {
  
  if (as_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::as_group::v202212::ASGroupDetailed>(GetArena());
    as_group_ = p;
  }
  return as_group_;
}
inline ::kentik::as_group::v202212::ASGroupDetailed* UpdateASGroupResponse::mutable_as_group() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.UpdateASGroupResponse.as_group)
  return _internal_mutable_as_group();
}
inline void UpdateASGroupResponse::set_allocated_as_group(::kentik::as_group::v202212::ASGroupDetailed* as_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete as_group_;
  }
  if (as_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(as_group);
    if (message_arena != submessage_arena) {
      as_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_group, submessage_arena);
    }
    
  } else {
    
  }
  as_group_ = as_group;
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.UpdateASGroupResponse.as_group)
}

// -------------------------------------------------------------------

// DeleteASGroupRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteASGroupRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteASGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.as_group.v202212.DeleteASGroupRequest.id)
  return _internal_id();
}
inline void DeleteASGroupRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.as_group.v202212.DeleteASGroupRequest.id)
}
inline std::string* DeleteASGroupRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.as_group.v202212.DeleteASGroupRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteASGroupRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteASGroupRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteASGroupRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.as_group.v202212.DeleteASGroupRequest.id)
}
inline void DeleteASGroupRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.as_group.v202212.DeleteASGroupRequest.id)
}
inline void DeleteASGroupRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.as_group.v202212.DeleteASGroupRequest.id)
}
inline std::string* DeleteASGroupRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteASGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.as_group.v202212.DeleteASGroupRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteASGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.as_group.v202212.DeleteASGroupRequest.id)
}
inline std::string* DeleteASGroupRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.as_group.v202212.DeleteASGroupRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteASGroupRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.as_group.v202212.DeleteASGroupRequest.id)
}

// -------------------------------------------------------------------

// DeleteASGroupResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202212
}  // namespace as_group
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fas_5fgroup_2fv202212_2fas_5fgroup_2eproto
