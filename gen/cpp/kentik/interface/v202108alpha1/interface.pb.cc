// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/interface/v202108alpha1/interface.proto

#include "kentik/interface/v202108alpha1/interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
namespace kentik {
namespace interface {
namespace v202108alpha1 {
class InterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Interface> _instance;
} _Interface_default_instance_;
class InterfaceClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterfaceClassification> _instance;
} _InterfaceClassification_default_instance_;
class ClassifyCounterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassifyCounter> _instance;
} _ClassifyCounter_default_instance_;
class InterfaceClassifyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterfaceClassifyInfo> _instance;
} _InterfaceClassifyInfo_default_instance_;
class DeviceClassifyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceClassifyInfo> _instance;
} _DeviceClassifyInfo_default_instance_;
class InterfaceFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterfaceFilter> _instance;
} _InterfaceFilter_default_instance_;
class AutoClassifyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoClassifyRequest> _instance;
} _AutoClassifyRequest_default_instance_;
class AutoClassifyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoClassifyResponse> _instance;
} _AutoClassifyResponse_default_instance_;
class ManualClassifyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualClassifyRequest> _instance;
} _ManualClassifyRequest_default_instance_;
class ManualClassifyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualClassifyResponse> _instance;
} _ManualClassifyResponse_default_instance_;
class ListInterfaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListInterfaceRequest> _instance;
} _ListInterfaceRequest_default_instance_;
class ListInterfaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListInterfaceResponse> _instance;
} _ListInterfaceResponse_default_instance_;
class GetInterfaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInterfaceRequest> _instance;
} _GetInterfaceRequest_default_instance_;
class GetInterfaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInterfaceResponse> _instance;
} _GetInterfaceResponse_default_instance_;
class CreateInterfaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateInterfaceRequest> _instance;
} _CreateInterfaceRequest_default_instance_;
class CreateInterfaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateInterfaceResponse> _instance;
} _CreateInterfaceResponse_default_instance_;
class UpdateInterfaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateInterfaceRequest> _instance;
} _UpdateInterfaceRequest_default_instance_;
class UpdateInterfaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateInterfaceResponse> _instance;
} _UpdateInterfaceResponse_default_instance_;
class DeleteInterfaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteInterfaceRequest> _instance;
} _DeleteInterfaceRequest_default_instance_;
class DeleteInterfaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteInterfaceResponse> _instance;
} _DeleteInterfaceResponse_default_instance_;
class MatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Match> _instance;
} _Match_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class DeviceFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceFilter> _instance;
} _DeviceFilter_default_instance_;
class RuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rule> _instance;
} _Rule_default_instance_;
}  // namespace v202108alpha1
}  // namespace interface
}  // namespace kentik
static void InitDefaultsscc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_Action_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::Action::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_AutoClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_AutoClassifyRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::AutoClassifyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::AutoClassifyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_AutoClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_AutoClassifyResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::AutoClassifyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::AutoClassifyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutoClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AutoClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
      &scc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_ClassifyCounter_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::ClassifyCounter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::ClassifyCounter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_CreateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_CreateInterfaceRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::CreateInterfaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::CreateInterfaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_CreateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_CreateInterfaceResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::CreateInterfaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::CreateInterfaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_DeleteInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_DeleteInterfaceRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::DeleteInterfaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::DeleteInterfaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_DeleteInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_DeleteInterfaceResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::DeleteInterfaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::DeleteInterfaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_DeviceClassifyInfo_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::DeviceClassifyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::DeviceClassifyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
      &scc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_DeviceFilter_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::DeviceFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::DeviceFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_GetInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_GetInterfaceRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::GetInterfaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::GetInterfaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_GetInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_GetInterfaceResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::GetInterfaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::GetInterfaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_Interface_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::Interface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::Interface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_InterfaceClassification_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::InterfaceClassification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::InterfaceClassification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_InterfaceClassifyInfo_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::InterfaceClassifyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::InterfaceClassifyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_InterfaceFilter_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::InterfaceFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::InterfaceFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_ListInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_ListInterfaceRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::ListInterfaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::ListInterfaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_ListInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_ListInterfaceResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::ListInterfaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::ListInterfaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_ManualClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_ManualClassifyRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::ManualClassifyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::ManualClassifyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManualClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_ManualClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_ManualClassifyResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::ManualClassifyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::ManualClassifyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManualClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_Match_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::Match();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::Match::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {}};

static void InitDefaultsscc_info_Rule_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_Rule_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::Rule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::Rule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Rule_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Rule_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
      &scc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_UpdateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_UpdateInterfaceRequest_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::UpdateInterfaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::UpdateInterfaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static void InitDefaultsscc_info_UpdateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::interface::v202108alpha1::_UpdateInterfaceResponse_default_instance_;
    new (ptr) ::kentik::interface::v202108alpha1::UpdateInterfaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::interface::v202108alpha1::UpdateInterfaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto}, {
      &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, snmp_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, snmp_speed_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, snmp_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, snmp_alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, interface_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, interface_description_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, interface_ip_netmask_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, connectivity_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, network_boundary_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, top_nexthop_asns_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Interface, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassification, classified_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassification, connectivity_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassification, network_boundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, external_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, free_pni_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, ix_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, provider_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ClassifyCounter, transit_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, snmp_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, snmp_alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, interface_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, interface_ip_asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, is_internal_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, is_internal_asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, top_nexthop_asns_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, pdb_global_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, auto_classification_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, previous_classification_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, network_boundary_confidence_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, connectivity_type_confidence_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, provider_confidence_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, auto_classified_provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, previously_classified_provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, previously_classified_external_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, ip_asn_matched_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, ix_matched_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, nexthop_matched_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, connectivity_type_matched_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, provider_matched_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceClassifyInfo, changed_classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, total_interfaces_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, previously_classified_counter_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, auto_classified_counter_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, changed_classification_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, ip_asn_matched_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, ix_matched_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, nexthop_matched_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, connectivity_type_matched_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, provider_matched_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceClassifyInfo, interfaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, text_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, device_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, connectivity_types_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, network_boundaries_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, providers_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, snmp_speeds_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::InterfaceFilter, ip_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, perc_auto_classified_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, net_changed_transit_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, net_changed_ix_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, net_changed_provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, total_changed_classification_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, total_auto_classify_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, total_auto_classify_counter_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, total_previous_counter_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, total_interfaces_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::AutoClassifyResponse, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyRequest, interface_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyRequest, connectivity_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyRequest, network_boundary_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyRequest, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ManualClassifyResponse, device_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ListInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ListInterfaceRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ListInterfaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ListInterfaceResponse, interfaces_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ListInterfaceResponse, total_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::ListInterfaceResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::GetInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::GetInterfaceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::GetInterfaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::GetInterfaceResponse, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::CreateInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::CreateInterfaceRequest, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::CreateInterfaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::CreateInterfaceResponse, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::UpdateInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::UpdateInterfaceRequest, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::UpdateInterfaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::UpdateInterfaceResponse, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeleteInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeleteInterfaceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeleteInterfaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Match, match_attribute_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Match, match_operator_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Match, pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Action, set_connectivity_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Action, set_network_boundary_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Action, set_connected_asns_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Action, set_provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceFilter, all_devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceFilter, device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceFilter, device_labels_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceFilter, device_rules_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::DeviceFilter, device_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, enabled_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, rank_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, match_clause_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, action_set_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, included_devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::interface::v202108alpha1::Rule, excluded_devices_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::interface::v202108alpha1::Interface)},
  { 20, -1, sizeof(::kentik::interface::v202108alpha1::InterfaceClassification)},
  { 28, -1, sizeof(::kentik::interface::v202108alpha1::ClassifyCounter)},
  { 39, -1, sizeof(::kentik::interface::v202108alpha1::InterfaceClassifyInfo)},
  { 68, -1, sizeof(::kentik::interface::v202108alpha1::DeviceClassifyInfo)},
  { 84, -1, sizeof(::kentik::interface::v202108alpha1::InterfaceFilter)},
  { 96, -1, sizeof(::kentik::interface::v202108alpha1::AutoClassifyRequest)},
  { 101, -1, sizeof(::kentik::interface::v202108alpha1::AutoClassifyResponse)},
  { 116, -1, sizeof(::kentik::interface::v202108alpha1::ManualClassifyRequest)},
  { 125, -1, sizeof(::kentik::interface::v202108alpha1::ManualClassifyResponse)},
  { 131, -1, sizeof(::kentik::interface::v202108alpha1::ListInterfaceRequest)},
  { 137, -1, sizeof(::kentik::interface::v202108alpha1::ListInterfaceResponse)},
  { 145, -1, sizeof(::kentik::interface::v202108alpha1::GetInterfaceRequest)},
  { 151, -1, sizeof(::kentik::interface::v202108alpha1::GetInterfaceResponse)},
  { 157, -1, sizeof(::kentik::interface::v202108alpha1::CreateInterfaceRequest)},
  { 163, -1, sizeof(::kentik::interface::v202108alpha1::CreateInterfaceResponse)},
  { 169, -1, sizeof(::kentik::interface::v202108alpha1::UpdateInterfaceRequest)},
  { 175, -1, sizeof(::kentik::interface::v202108alpha1::UpdateInterfaceResponse)},
  { 181, -1, sizeof(::kentik::interface::v202108alpha1::DeleteInterfaceRequest)},
  { 187, -1, sizeof(::kentik::interface::v202108alpha1::DeleteInterfaceResponse)},
  { 192, -1, sizeof(::kentik::interface::v202108alpha1::Match)},
  { 200, -1, sizeof(::kentik::interface::v202108alpha1::Action)},
  { 209, -1, sizeof(::kentik::interface::v202108alpha1::DeviceFilter)},
  { 219, -1, sizeof(::kentik::interface::v202108alpha1::Rule)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_Interface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_InterfaceClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_ClassifyCounter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_InterfaceClassifyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_DeviceClassifyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_InterfaceFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_AutoClassifyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_AutoClassifyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_ManualClassifyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_ManualClassifyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_ListInterfaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_ListInterfaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_GetInterfaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_GetInterfaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_CreateInterfaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_CreateInterfaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_UpdateInterfaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_UpdateInterfaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_DeleteInterfaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_DeleteInterfaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_DeviceFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::interface::v202108alpha1::_Rule_default_instance_),
};

const char descriptor_table_protodef_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.kentik/interface/v202108alpha1/interfa"
  "ce.proto\022\036kentik.interface.v202108alpha1"
  "\032\034google/api/annotations.proto\032\027google/a"
  "pi/client.proto\032.protoc-gen-openapiv2/op"
  "tions/annotations.proto\032+kentik/core/v20"
  "2012alpha1/annotations.proto\032\037google/pro"
  "tobuf/timestamp.proto\"\233\005\n\tInterface\022\016\n\002i"
  "d\030\001 \001(\tR\002id\022\033\n\tdevice_id\030\002 \001(\tR\010deviceId"
  "\022\027\n\007snmp_id\030\003 \001(\tR\006snmpId\022\035\n\nsnmp_speed\030"
  "\004 \001(\005R\tsnmpSpeed\022\033\n\tsnmp_type\030\005 \001(\005R\010snm"
  "pType\022\035\n\nsnmp_alias\030\006 \001(\tR\tsnmpAlias\022!\n\014"
  "interface_ip\030\007 \001(\tR\013interfaceIp\0223\n\025inter"
  "face_description\030\010 \001(\tR\024interfaceDescrip"
  "tion\0220\n\005cdate\030\t \001(\0132\032.google.protobuf.Ti"
  "mestampR\005cdate\0220\n\005edate\030\n \001(\0132\032.google.p"
  "rotobuf.TimestampR\005edate\0220\n\024interface_ip"
  "_netmask\030\013 \001(\tR\022interfaceIpNetmask\022]\n\021co"
  "nnectivity_type\030\014 \001(\01620.kentik.interface"
  ".v202108alpha1.ConnectivityTypeR\020connect"
  "ivityType\022Z\n\020network_boundary\030\r \001(\0162/.ke"
  "ntik.interface.v202108alpha1.NetworkBoun"
  "daryR\017networkBoundary\022(\n\020top_nexthop_asn"
  "s\030\016 \003(\005R\016topNexthopAsns\022\032\n\010provider\030\017 \001("
  "\tR\010provider\"\364\001\n\027InterfaceClassification\022"
  "\036\n\nclassified\030\001 \001(\010R\nclassified\022]\n\021conne"
  "ctivity_type\030\002 \001(\01620.kentik.interface.v2"
  "02108alpha1.ConnectivityTypeR\020connectivi"
  "tyType\022Z\n\020network_boundary\030\003 \001(\0162/.kenti"
  "k.interface.v202108alpha1.NetworkBoundar"
  "yR\017networkBoundary\"\333\001\n\017ClassifyCounter\022\024"
  "\n\005count\030\001 \001(\005R\005count\022%\n\016external_count\030\002"
  " \001(\005R\rexternalCount\022$\n\016free_pni_count\030\003 "
  "\001(\005R\014freePniCount\022\031\n\010ix_count\030\004 \001(\005R\007ixC"
  "ount\022%\n\016provider_count\030\005 \001(\005R\rproviderCo"
  "unt\022#\n\rtransit_count\030\006 \001(\005R\014transitCount"
  "\"\326\t\n\025InterfaceClassifyInfo\022\033\n\tdevice_id\030"
  "\001 \001(\tR\010deviceId\022\027\n\007snmp_id\030\002 \001(\tR\006snmpId"
  "\022\035\n\nsnmp_alias\030\003 \001(\tR\tsnmpAlias\022!\n\014inter"
  "face_ip\030\004 \001(\tR\013interfaceIp\022(\n\020interface_"
  "ip_asn\030\005 \001(\tR\016interfaceIpAsn\022$\n\016is_inter"
  "nal_ip\030\006 \001(\010R\014isInternalIp\022&\n\017is_interna"
  "l_asn\030\007 \001(\010R\risInternalAsn\022(\n\020top_nextho"
  "p_asns\030\010 \003(\tR\016topNexthopAsns\022&\n\017pdb_glob"
  "al_name\030\t \001(\tR\rpdbGlobalName\022h\n\023auto_cla"
  "ssification\030\n \001(\01327.kentik.interface.v20"
  "2108alpha1.InterfaceClassificationR\022auto"
  "Classification\022p\n\027previous_classificatio"
  "n\030\013 \001(\01327.kentik.interface.v202108alpha1"
  ".InterfaceClassificationR\026previousClassi"
  "fication\022\032\n\010provider\030\014 \001(\tR\010provider\022>\n\033"
  "network_boundary_confidence\030\r \001(\005R\031netwo"
  "rkBoundaryConfidence\022@\n\034connectivity_typ"
  "e_confidence\030\016 \001(\005R\032connectivityTypeConf"
  "idence\022/\n\023provider_confidence\030\017 \001(\005R\022pro"
  "viderConfidence\0228\n\030auto_classified_provi"
  "der\030\020 \001(\010R\026autoClassifiedProvider\022D\n\036pre"
  "viously_classified_provider\030\021 \001(\tR\034previ"
  "ouslyClassifiedProvider\022D\n\036previously_cl"
  "assified_external\030\022 \001(\010R\034previouslyClass"
  "ifiedExternal\022$\n\016ip_asn_matched\030\023 \001(\010R\014i"
  "pAsnMatched\022\035\n\nix_matched\030\024 \001(\010R\tixMatch"
  "ed\022\'\n\017nexthop_matched\030\025 \001(\010R\016nexthopMatc"
  "hed\022:\n\031connectivity_type_matched\030\026 \001(\010R\027"
  "connectivityTypeMatched\022)\n\020provider_matc"
  "hed\030\027 \001(\010R\017providerMatched\0225\n\026changed_cl"
  "assification\030\030 \001(\010R\025changedClassificatio"
  "n\"\337\005\n\022DeviceClassifyInfo\022\033\n\tdevice_id\030\001 "
  "\001(\tR\010deviceId\022)\n\020total_interfaces\030\002 \001(\005R"
  "\017totalInterfaces\022s\n\035previously_classifie"
  "d_counter\030\003 \001(\0132/.kentik.interface.v2021"
  "08alpha1.ClassifyCounterR\033previouslyClas"
  "sifiedCounter\022g\n\027auto_classified_counter"
  "\030\004 \001(\0132/.kentik.interface.v202108alpha1."
  "ClassifyCounterR\025autoClassifiedCounter\022@"
  "\n\034changed_classification_count\030\017 \001(\005R\032ch"
  "angedClassificationCount\022/\n\024ip_asn_match"
  "ed_count\030\020 \001(\005R\021ipAsnMatchedCount\022(\n\020ix_"
  "matched_count\030\021 \001(\005R\016ixMatchedCount\0222\n\025n"
  "exthop_matched_count\030\022 \001(\005R\023nexthopMatch"
  "edCount\022E\n\037connectivity_type_matched_cou"
  "nt\030\023 \001(\005R\034connectivityTypeMatchedCount\0224"
  "\n\026provider_matched_count\030\024 \001(\005R\024provider"
  "MatchedCount\022U\n\ninterfaces\030\025 \003(\01325.kenti"
  "k.interface.v202108alpha1.InterfaceClass"
  "ifyInfoR\ninterfaces\"\211\003\n\017InterfaceFilter\022"
  "\022\n\004text\030\001 \001(\tR\004text\022\035\n\ndevice_ids\030\002 \003(\tR"
  "\tdeviceIds\022_\n\022connectivity_types\030\003 \003(\01620"
  ".kentik.interface.v202108alpha1.Connecti"
  "vityTypeR\021connectivityTypes\022^\n\022network_b"
  "oundaries\030\004 \003(\0162/.kentik.interface.v2021"
  "08alpha1.NetworkBoundaryR\021networkBoundar"
  "ies\022\034\n\tproviders\030\005 \003(\tR\tproviders\022\037\n\013snm"
  "p_speeds\030\006 \003(\005R\nsnmpSpeeds\022C\n\010ip_types\030\007"
  " \003(\0162(.kentik.interface.v202108alpha1.Ip"
  "FilterR\007ipTypes\"\025\n\023AutoClassifyRequest\"\250"
  "\005\n\024AutoClassifyResponse\0220\n\024perc_auto_cla"
  "ssified\030\001 \001(\001R\022percAutoClassified\022.\n\023net"
  "_changed_transit\030\002 \001(\005R\021netChangedTransi"
  "t\022$\n\016net_changed_ix\030\003 \001(\005R\014netChangedIx\022"
  "0\n\024net_changed_provider\030\004 \001(\005R\022netChange"
  "dProvider\022K\n\"total_changed_classificatio"
  "n_count\030\005 \001(\005R\037totalChangedClassificatio"
  "nCount\0229\n\031total_auto_classify_count\030\006 \001("
  "\005R\026totalAutoClassifyCount\022n\n\033total_auto_"
  "classify_counter\030\007 \001(\0132/.kentik.interfac"
  "e.v202108alpha1.ClassifyCounterR\030totalAu"
  "toClassifyCounter\022e\n\026total_previous_coun"
  "ter\030\010 \001(\0132/.kentik.interface.v202108alph"
  "a1.ClassifyCounterR\024totalPreviousCounter"
  "\022)\n\020total_interfaces\030\021 \001(\005R\017totalInterfa"
  "ces\022L\n\007devices\030\022 \003(\01322.kentik.interface."
  "v202108alpha1.DeviceClassifyInfoR\007device"
  "s\"\223\002\n\025ManualClassifyRequest\022#\n\rinterface"
  "_ids\030\001 \003(\tR\014interfaceIds\022]\n\021connectivity"
  "_type\030\002 \001(\01620.kentik.interface.v202108al"
  "pha1.ConnectivityTypeR\020connectivityType\022"
  "Z\n\020network_boundary\030\003 \001(\0162/.kentik.inter"
  "face.v202108alpha1.NetworkBoundaryR\017netw"
  "orkBoundary\022\032\n\010provider\030\004 \001(\tR\010provider\""
  "7\n\026ManualClassifyResponse\022\035\n\ndevice_ids\030"
  "\001 \003(\tR\tdeviceIds\"a\n\024ListInterfaceRequest"
  "\022I\n\007filters\030\001 \001(\0132/.kentik.interface.v20"
  "2108alpha1.InterfaceFilterR\007filters\"\250\001\n\025"
  "ListInterfaceResponse\022I\n\ninterfaces\030\001 \003("
  "\0132).kentik.interface.v202108alpha1.Inter"
  "faceR\ninterfaces\022\037\n\013total_count\030\002 \001(\005R\nt"
  "otalCount\022#\n\rinvalid_count\030\003 \001(\005R\014invali"
  "dCount\"%\n\023GetInterfaceRequest\022\016\n\002id\030\001 \001("
  "\tR\002id\"_\n\024GetInterfaceResponse\022G\n\tinterfa"
  "ce\030\001 \001(\0132).kentik.interface.v202108alpha"
  "1.InterfaceR\tinterface\"a\n\026CreateInterfac"
  "eRequest\022G\n\tinterface\030\001 \001(\0132).kentik.int"
  "erface.v202108alpha1.InterfaceR\tinterfac"
  "e\"b\n\027CreateInterfaceResponse\022G\n\tinterfac"
  "e\030\001 \001(\0132).kentik.interface.v202108alpha1"
  ".InterfaceR\tinterface\"a\n\026UpdateInterface"
  "Request\022G\n\tinterface\030\001 \001(\0132).kentik.inte"
  "rface.v202108alpha1.InterfaceR\tinterface"
  "\"b\n\027UpdateInterfaceResponse\022G\n\tinterface"
  "\030\001 \001(\0132).kentik.interface.v202108alpha1."
  "InterfaceR\tinterface\"(\n\026DeleteInterfaceR"
  "equest\022\016\n\002id\030\001 \001(\tR\002id\"\031\n\027DeleteInterfac"
  "eResponse\"\313\001\n\005Match\022W\n\017match_attribute\030\001"
  " \001(\0162..kentik.interface.v202108alpha1.Ma"
  "tchAttributeR\016matchAttribute\022O\n\016match_op"
  "erator\030\002 \001(\0162(.kentik.interface.v202108a"
  "lpha1.OperatorR\rmatchOperator\022\030\n\007pattern"
  "\030\003 \001(\tR\007pattern\"\242\002\n\006Action\022d\n\025set_connec"
  "tivity_type\030\001 \001(\01620.kentik.interface.v20"
  "2108alpha1.ConnectivityTypeR\023setConnecti"
  "vityType\022a\n\024set_network_boundary\030\002 \001(\0162/"
  ".kentik.interface.v202108alpha1.NetworkB"
  "oundaryR\022setNetworkBoundary\022,\n\022set_conne"
  "cted_asns\030\003 \001(\tR\020setConnectedAsns\022!\n\014set"
  "_provider\030\004 \001(\tR\013setProvider\"\273\001\n\014DeviceF"
  "ilter\022\037\n\013all_devices\030\001 \001(\010R\nallDevices\022\037"
  "\n\013device_name\030\002 \003(\tR\ndeviceName\022#\n\rdevic"
  "e_labels\030\003 \003(\tR\014deviceLabels\022!\n\014device_r"
  "ules\030\004 \003(\tR\013deviceRules\022!\n\014device_types\030"
  "\005 \003(\tR\013deviceTypes\"\353\003\n\004Rule\022\016\n\002id\030\001 \001(\tR"
  "\002id\022\030\n\007enabled\030\002 \001(\010R\007enabled\022\022\n\004rank\030\003 "
  "\001(\005R\004rank\022H\n\014match_clause\030\004 \001(\0132%.kentik"
  ".interface.v202108alpha1.MatchR\013matchCla"
  "use\022E\n\naction_set\030\005 \001(\0132&.kentik.interfa"
  "ce.v202108alpha1.ActionR\tactionSet\0220\n\005cd"
  "ate\030\006 \001(\0132\032.google.protobuf.TimestampR\005c"
  "date\0220\n\005edate\030\007 \001(\0132\032.google.protobuf.Ti"
  "mestampR\005edate\022W\n\020included_devices\030\010 \001(\013"
  "2,.kentik.interface.v202108alpha1.Device"
  "FilterR\017includedDevices\022W\n\020excluded_devi"
  "ces\030\t \001(\0132,.kentik.interface.v202108alph"
  "a1.DeviceFilterR\017excludedDevices*\355\004\n\020Con"
  "nectivityType\022!\n\035CONNECTIVITY_TYPE_UNSPE"
  "CIFIED\020\000\022.\n*CONNECTIVITY_TYPE_AGGREGATIO"
  "N_INTERCONNECT\020\001\022\037\n\033CONNECTIVITY_TYPE_AV"
  "AILABLE\020\002\022\036\n\032CONNECTIVITY_TYPE_BACKBONE\020"
  "\003\022(\n$CONNECTIVITY_TYPE_CLOUD_INTERCONNEC"
  "T\020\004\022\036\n\032CONNECTIVITY_TYPE_CUSTOMER\020\005\022\'\n#C"
  "ONNECTIVITY_TYPE_DATACENTER_FABRIC\020\006\022-\n)"
  "CONNECTIVITY_TYPE_DATACENTER_INTERCONNEC"
  "T\020\007\022$\n CONNECTIVITY_TYPE_EMBEDDED_CACHE\020"
  "\010\022\036\n\032CONNECTIVITY_TYPE_FREE_PNI\020\t\022\032\n\026CON"
  "NECTIVITY_TYPE_HOST\020\n\022\030\n\024CONNECTIVITY_TY"
  "PE_IX\020\013\022\033\n\027CONNECTIVITY_TYPE_OTHER\020\014\022\036\n\032"
  "CONNECTIVITY_TYPE_PAID_PNI\020\r\022\036\n\032CONNECTI"
  "VITY_TYPE_RESERVED\020\016\022\035\n\031CONNECTIVITY_TYP"
  "E_TRANSIT\020\017\022+\n\'CONNECTIVITY_TYPE_VIRTUAL"
  "_CROSS_CONNECT\020\020*\247\001\n\017NetworkBoundary\022 \n\034"
  "NETWORK_BOUNDARY_UNSPECIFIED\020\000\022\031\n\025NETWOR"
  "K_BOUNDARY_AUTO\020\001\022\035\n\031NETWORK_BOUNDARY_IN"
  "TERNAL\020\002\022\035\n\031NETWORK_BOUNDARY_EXTERNAL\020\003\022"
  "\031\n\025NETWORK_BOUNDARY_NONE\020\004*g\n\010IpFilter\022\031"
  "\n\025IP_FILTER_UNSPECIFIED\020\000\022\025\n\021IP_FILTER_P"
  "RIVATE\020\001\022\024\n\020IP_FILTER_PUBLIC\020\002\022\023\n\017IP_FIL"
  "TER_UNSET\020\003*\236\001\n\016MatchAttribute\022\037\n\033MATCH_"
  "ATTRIBUTE_UNSPECIFIED\020\000\022)\n%MATCH_ATTRIBU"
  "TE_INTERFACE_DESCRIPTION\020\001\022\036\n\032MATCH_ATTR"
  "IBUTE_SNMP_ALIAS\020\002\022 \n\034MATCH_ATTRIBUTE_IN"
  "TERFACE_IP\020\003*\321\001\n\010Operator\022\030\n\024OPERATOR_UN"
  "SPECIFIED\020\000\022\023\n\017OPERATOR_EQUALS\020\001\022\025\n\021OPER"
  "ATOR_CONTAINS\020\002\022\022\n\016OPERATOR_REGEX\020\003\022 \n\034O"
  "PERATOR_CONTAINED_IN_SUBNET\020\004\022\031\n\025OPERATO"
  "R_IS_PUBLIC_IP\020\005\022\032\n\026OPERATOR_IS_PRIVATE_"
  "IP\020\006\022\022\n\016OPERATOR_NO_IP\020\0072\301\016\n\020InterfaceSe"
  "rvice\022\247\002\n\016ManualClassify\0225.kentik.interf"
  "ace.v202108alpha1.ManualClassifyRequest\032"
  "6.kentik.interface.v202108alpha1.ManualC"
  "lassifyResponse\"\245\001\222AV\022\031Manual Classify I"
  "nterface\032)Manually set interface(s) clas"
  "sification.*\016ManualClassify\362\327\002\025admin.int"
  "erface:write\202\323\344\223\002-\"(/interface/v202108al"
  "pha1/manual_classify:\001*\022\240\002\n\rListInterfac"
  "e\0224.kentik.interface.v202108alpha1.ListI"
  "nterfaceRequest\0325.kentik.interface.v2021"
  "08alpha1.ListInterfaceResponse\"\241\001\222A[\022\027Fe"
  "tch Search Interfaces\0321Return list of in"
  "terfaces matches search critera.*\rListIn"
  "terface\362\327\002\024admin.interface:read\202\323\344\223\002%\022#/"
  "interface/v202108alpha1/interfaces\022\241\002\n\014G"
  "etInterface\0223.kentik.interface.v202108al"
  "pha1.GetInterfaceRequest\0324.kentik.interf"
  "ace.v202108alpha1.GetInterfaceResponse\"\245"
  "\001\222AZ\022\020Get a interface.\0328Returns informat"
  "ion about a interface specified with ID."
  "*\014InterfaceGet\362\327\002\024admin.interface:read\202\323"
  "\344\223\002*\022(/interface/v202108alpha1/interface"
  "s/{id}\022\250\002\n\017CreateInterface\0226.kentik.inte"
  "rface.v202108alpha1.CreateInterfaceReque"
  "st\0327.kentik.interface.v202108alpha1.Crea"
  "teInterfaceResponse\"\243\001\222AY\022\023Create a inte"
  "rface.\0321Create a interface from request."
  " returns created.*\017InterfaceCreate\362\327\002\025ad"
  "min.interface:write\202\323\344\223\002(\"#/interface/v2"
  "02108alpha1/interfaces:\001*\022\301\002\n\017UpdateInte"
  "rface\0226.kentik.interface.v202108alpha1.U"
  "pdateInterfaceRequest\0327.kentik.interface"
  ".v202108alpha1.UpdateInterfaceResponse\"\274"
  "\001\222Ac\022\023Update a interface.\032;Replaces the "
  "entire interface attributes specified wi"
  "th id.*\017InterfaceUpdate\362\327\002\025admin.interfa"
  "ce:write\202\323\344\223\0027\0322/interface/v202108alpha1"
  "/interfaces/{interface.id}:\001*\022\241\002\n\017Delete"
  "Interface\0226.kentik.interface.v202108alph"
  "a1.DeleteInterfaceRequest\0327.kentik.inter"
  "face.v202108alpha1.DeleteInterfaceRespon"
  "se\"\234\001\222AP\022\023Delete a interface.\032(Deletes t"
  "he interface specified with id.*\017Interfa"
  "ceDelete\362\327\002\025admin.interface:write\202\323\344\223\002**"
  "(/interface/v202108alpha1/interfaces/{id"
  "}\032)\312A\023grpc.api.kentik.com\352\327\002\017admin.inter"
  "faceB\303\002ZHgithub.com/kentik/api-schema/ge"
  "n/go/kentik/interface/v202108alpha1;ifac"
  "e\222A\365\001\0227\n\rInterface API\"\030\n\026Kentik API Eng"
  "ineering2\014202108alpha1*\001\0022\020application/j"
  "son:\020application/jsonZD\n\036\n\005email\022\025\010\002\032\017X-"
  "CH-Auth-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-"
  "API-Token \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r5\n\026M"
  "ore about Kentik APIs\022\033https://docs.kent"
  "ik.com/apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto_sccs[24] = {
  &scc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_AutoClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_AutoClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_CreateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_CreateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_DeleteInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_DeleteInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_GetInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_GetInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_ListInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_ListInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_ManualClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_ManualClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_Rule_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_UpdateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
  &scc_info_UpdateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto = {
  false, false, descriptor_table_protodef_kentik_2finterface_2fv202108alpha1_2finterface_2eproto, "kentik/interface/v202108alpha1/interface.proto", 10338,
  &descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto_once, descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto_sccs, descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto_deps, 24, 5,
  schemas, file_default_instances, TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto::offsets,
  file_level_metadata_kentik_2finterface_2fv202108alpha1_2finterface_2eproto, 24, file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto, file_level_service_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2finterface_2fv202108alpha1_2finterface_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto)), true);
namespace kentik {
namespace interface {
namespace v202108alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectivityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
  return file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[0];
}
bool ConnectivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkBoundary_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
  return file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[1];
}
bool NetworkBoundary_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
  return file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[2];
}
bool IpFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
  return file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[3];
}
bool MatchAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
  return file_level_enum_descriptors_kentik_2finterface_2fv202108alpha1_2finterface_2eproto[4];
}
bool Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Interface::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_Interface_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::interface::v202108alpha1::_Interface_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Interface::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const Interface* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const Interface* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Interface::_Internal::cdate(const Interface* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Interface::_Internal::edate(const Interface* msg) {
  return *msg->edate_;
}
void Interface::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void Interface::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_nexthop_asns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      top_nexthop_asns_(from.top_nexthop_asns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  snmp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_id().empty()) {
    snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_id(),
      GetArena());
  }
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_alias().empty()) {
    snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_alias(),
      GetArena());
  }
  interface_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_ip().empty()) {
    interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_ip(),
      GetArena());
  }
  interface_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_description().empty()) {
    interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_description(),
      GetArena());
  }
  interface_ip_netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_ip_netmask().empty()) {
    interface_ip_netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_ip_netmask(),
      GetArena());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_provider(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  ::memcpy(&snmp_speed_, &from.snmp_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_boundary_) -
    reinterpret_cast<char*>(&snmp_speed_)) + sizeof(network_boundary_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.Interface)
}

void Interface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_boundary_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(network_boundary_));
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.Interface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_netmask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
}

void Interface::ArenaDtor(void* object) {
  Interface* _this = reinterpret_cast< Interface* >(object);
  (void)_this;
}
void Interface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Interface& Interface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Interface_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.Interface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_nexthop_asns_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_netmask_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  ::memset(&snmp_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_boundary_) -
      reinterpret_cast<char*>(&snmp_speed_)) + sizeof(network_boundary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2[json_name = "deviceId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_id = 3[json_name = "snmpId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_snmp_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.snmp_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 snmp_speed = 4[json_name = "snmpSpeed"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          snmp_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 snmp_type = 5[json_name = "snmpType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          snmp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_alias = 6[json_name = "snmpAlias"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_snmp_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.snmp_alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_ip = 7[json_name = "interfaceIp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_interface_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.interface_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_description = 8[json_name = "interfaceDescription"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_interface_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.interface_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 9[json_name = "cdate"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 10[json_name = "edate"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_ip_netmask = 11[json_name = "interfaceIpNetmask"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_interface_ip_netmask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.interface_ip_netmask"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 12[json_name = "connectivityType"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectivity_type(static_cast<::kentik::interface::v202108alpha1::ConnectivityType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 13[json_name = "networkBoundary"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_boundary(static_cast<::kentik::interface::v202108alpha1::NetworkBoundary>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 top_nexthop_asns = 14[json_name = "topNexthopAsns"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_top_nexthop_asns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_top_nexthop_asns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 15[json_name = "provider"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Interface.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Interface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.Interface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string device_id = 2[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // string snmp_id = 3[json_name = "snmpId"];
  if (this->snmp_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_id().data(), static_cast<int>(this->_internal_snmp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.snmp_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snmp_id(), target);
  }

  // int32 snmp_speed = 4[json_name = "snmpSpeed"];
  if (this->snmp_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_snmp_speed(), target);
  }

  // int32 snmp_type = 5[json_name = "snmpType"];
  if (this->snmp_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_snmp_type(), target);
  }

  // string snmp_alias = 6[json_name = "snmpAlias"];
  if (this->snmp_alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_alias().data(), static_cast<int>(this->_internal_snmp_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.snmp_alias");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_snmp_alias(), target);
  }

  // string interface_ip = 7[json_name = "interfaceIp"];
  if (this->interface_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_ip().data(), static_cast<int>(this->_internal_interface_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.interface_ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_interface_ip(), target);
  }

  // string interface_description = 8[json_name = "interfaceDescription"];
  if (this->interface_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_description().data(), static_cast<int>(this->_internal_interface_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.interface_description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_interface_description(), target);
  }

  // .google.protobuf.Timestamp cdate = 9[json_name = "cdate"];
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 10[json_name = "edate"];
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::edate(this), target, stream);
  }

  // string interface_ip_netmask = 11[json_name = "interfaceIpNetmask"];
  if (this->interface_ip_netmask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_ip_netmask().data(), static_cast<int>(this->_internal_interface_ip_netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.interface_ip_netmask");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_interface_ip_netmask(), target);
  }

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 12[json_name = "connectivityType"];
  if (this->connectivity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_connectivity_type(), target);
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 13[json_name = "networkBoundary"];
  if (this->network_boundary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_network_boundary(), target);
  }

  // repeated int32 top_nexthop_asns = 14[json_name = "topNexthopAsns"];
  {
    int byte_size = _top_nexthop_asns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          14, _internal_top_nexthop_asns(), byte_size, target);
    }
  }

  // string provider = 15[json_name = "provider"];
  if (this->provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Interface.provider");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.Interface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 top_nexthop_asns = 14[json_name = "topNexthopAsns"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->top_nexthop_asns_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _top_nexthop_asns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string device_id = 2[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string snmp_id = 3[json_name = "snmpId"];
  if (this->snmp_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_id());
  }

  // string snmp_alias = 6[json_name = "snmpAlias"];
  if (this->snmp_alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_alias());
  }

  // string interface_ip = 7[json_name = "interfaceIp"];
  if (this->interface_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_ip());
  }

  // string interface_description = 8[json_name = "interfaceDescription"];
  if (this->interface_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_description());
  }

  // string interface_ip_netmask = 11[json_name = "interfaceIpNetmask"];
  if (this->interface_ip_netmask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_ip_netmask());
  }

  // string provider = 15[json_name = "provider"];
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // .google.protobuf.Timestamp cdate = 9[json_name = "cdate"];
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 10[json_name = "edate"];
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // int32 snmp_speed = 4[json_name = "snmpSpeed"];
  if (this->snmp_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_snmp_speed());
  }

  // int32 snmp_type = 5[json_name = "snmpType"];
  if (this->snmp_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_snmp_type());
  }

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 12[json_name = "connectivityType"];
  if (this->connectivity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectivity_type());
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 13[json_name = "networkBoundary"];
  if (this->network_boundary() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_boundary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Interface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  const Interface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Interface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.Interface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.Interface)
    MergeFrom(*source);
  }
}

void Interface::MergeFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_nexthop_asns_.MergeFrom(from.top_nexthop_asns_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.snmp_id().size() > 0) {
    _internal_set_snmp_id(from._internal_snmp_id());
  }
  if (from.snmp_alias().size() > 0) {
    _internal_set_snmp_alias(from._internal_snmp_alias());
  }
  if (from.interface_ip().size() > 0) {
    _internal_set_interface_ip(from._internal_interface_ip());
  }
  if (from.interface_description().size() > 0) {
    _internal_set_interface_description(from._internal_interface_description());
  }
  if (from.interface_ip_netmask().size() > 0) {
    _internal_set_interface_ip_netmask(from._internal_interface_ip_netmask());
  }
  if (from.provider().size() > 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.snmp_speed() != 0) {
    _internal_set_snmp_speed(from._internal_snmp_speed());
  }
  if (from.snmp_type() != 0) {
    _internal_set_snmp_type(from._internal_snmp_type());
  }
  if (from.connectivity_type() != 0) {
    _internal_set_connectivity_type(from._internal_connectivity_type());
  }
  if (from.network_boundary() != 0) {
    _internal_set_network_boundary(from._internal_network_boundary());
  }
}

void Interface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  top_nexthop_asns_.InternalSwap(&other->top_nexthop_asns_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_id_.Swap(&other->snmp_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.Swap(&other->snmp_alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_.Swap(&other->interface_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_description_.Swap(&other->interface_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_netmask_.Swap(&other->interface_ip_netmask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface, network_boundary_)
      + sizeof(Interface::network_boundary_)
      - PROTOBUF_FIELD_OFFSET(Interface, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InterfaceClassification::InitAsDefaultInstance() {
}
class InterfaceClassification::_Internal {
 public:
};

InterfaceClassification::InterfaceClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.InterfaceClassification)
}
InterfaceClassification::InterfaceClassification(const InterfaceClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&classified_, &from.classified_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_boundary_) -
    reinterpret_cast<char*>(&classified_)) + sizeof(network_boundary_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.InterfaceClassification)
}

void InterfaceClassification::SharedCtor() {
  ::memset(&classified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_boundary_) -
      reinterpret_cast<char*>(&classified_)) + sizeof(network_boundary_));
}

InterfaceClassification::~InterfaceClassification() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.InterfaceClassification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterfaceClassification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InterfaceClassification::ArenaDtor(void* object) {
  InterfaceClassification* _this = reinterpret_cast< InterfaceClassification* >(object);
  (void)_this;
}
void InterfaceClassification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterfaceClassification& InterfaceClassification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterfaceClassification_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void InterfaceClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.InterfaceClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&classified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_boundary_) -
      reinterpret_cast<char*>(&classified_)) + sizeof(network_boundary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool classified = 1[json_name = "classified"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          classified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectivity_type(static_cast<::kentik::interface::v202108alpha1::ConnectivityType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_boundary(static_cast<::kentik::interface::v202108alpha1::NetworkBoundary>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceClassification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.InterfaceClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool classified = 1[json_name = "classified"];
  if (this->classified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_classified(), target);
  }

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
  if (this->connectivity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connectivity_type(), target);
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
  if (this->network_boundary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_network_boundary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.InterfaceClassification)
  return target;
}

size_t InterfaceClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.InterfaceClassification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool classified = 1[json_name = "classified"];
  if (this->classified() != 0) {
    total_size += 1 + 1;
  }

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
  if (this->connectivity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectivity_type());
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
  if (this->network_boundary() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_boundary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceClassification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.InterfaceClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceClassification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterfaceClassification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.InterfaceClassification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.InterfaceClassification)
    MergeFrom(*source);
  }
}

void InterfaceClassification::MergeFrom(const InterfaceClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.InterfaceClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.classified() != 0) {
    _internal_set_classified(from._internal_classified());
  }
  if (from.connectivity_type() != 0) {
    _internal_set_connectivity_type(from._internal_connectivity_type());
  }
  if (from.network_boundary() != 0) {
    _internal_set_network_boundary(from._internal_network_boundary());
  }
}

void InterfaceClassification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.InterfaceClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceClassification::CopyFrom(const InterfaceClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.InterfaceClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceClassification::IsInitialized() const {
  return true;
}

void InterfaceClassification::InternalSwap(InterfaceClassification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceClassification, network_boundary_)
      + sizeof(InterfaceClassification::network_boundary_)
      - PROTOBUF_FIELD_OFFSET(InterfaceClassification, classified_)>(
          reinterpret_cast<char*>(&classified_),
          reinterpret_cast<char*>(&other->classified_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceClassification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassifyCounter::InitAsDefaultInstance() {
}
class ClassifyCounter::_Internal {
 public:
};

ClassifyCounter::ClassifyCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.ClassifyCounter)
}
ClassifyCounter::ClassifyCounter(const ClassifyCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&transit_count_) -
    reinterpret_cast<char*>(&count_)) + sizeof(transit_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.ClassifyCounter)
}

void ClassifyCounter::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transit_count_) -
      reinterpret_cast<char*>(&count_)) + sizeof(transit_count_));
}

ClassifyCounter::~ClassifyCounter() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.ClassifyCounter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClassifyCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClassifyCounter::ArenaDtor(void* object) {
  ClassifyCounter* _this = reinterpret_cast< ClassifyCounter* >(object);
  (void)_this;
}
void ClassifyCounter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassifyCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassifyCounter& ClassifyCounter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassifyCounter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void ClassifyCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.ClassifyCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transit_count_) -
      reinterpret_cast<char*>(&count_)) + sizeof(transit_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassifyCounter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1[json_name = "count"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 external_count = 2[json_name = "externalCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          external_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_pni_count = 3[json_name = "freePniCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          free_pni_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ix_count = 4[json_name = "ixCount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ix_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 provider_count = 5[json_name = "providerCount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          provider_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transit_count = 6[json_name = "transitCount"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          transit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassifyCounter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.ClassifyCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1[json_name = "count"];
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // int32 external_count = 2[json_name = "externalCount"];
  if (this->external_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_external_count(), target);
  }

  // int32 free_pni_count = 3[json_name = "freePniCount"];
  if (this->free_pni_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_free_pni_count(), target);
  }

  // int32 ix_count = 4[json_name = "ixCount"];
  if (this->ix_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ix_count(), target);
  }

  // int32 provider_count = 5[json_name = "providerCount"];
  if (this->provider_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_provider_count(), target);
  }

  // int32 transit_count = 6[json_name = "transitCount"];
  if (this->transit_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_transit_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.ClassifyCounter)
  return target;
}

size_t ClassifyCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.ClassifyCounter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1[json_name = "count"];
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 external_count = 2[json_name = "externalCount"];
  if (this->external_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_external_count());
  }

  // int32 free_pni_count = 3[json_name = "freePniCount"];
  if (this->free_pni_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_pni_count());
  }

  // int32 ix_count = 4[json_name = "ixCount"];
  if (this->ix_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ix_count());
  }

  // int32 provider_count = 5[json_name = "providerCount"];
  if (this->provider_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_provider_count());
  }

  // int32 transit_count = 6[json_name = "transitCount"];
  if (this->transit_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transit_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifyCounter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.ClassifyCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassifyCounter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassifyCounter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.ClassifyCounter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.ClassifyCounter)
    MergeFrom(*source);
  }
}

void ClassifyCounter::MergeFrom(const ClassifyCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.ClassifyCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.external_count() != 0) {
    _internal_set_external_count(from._internal_external_count());
  }
  if (from.free_pni_count() != 0) {
    _internal_set_free_pni_count(from._internal_free_pni_count());
  }
  if (from.ix_count() != 0) {
    _internal_set_ix_count(from._internal_ix_count());
  }
  if (from.provider_count() != 0) {
    _internal_set_provider_count(from._internal_provider_count());
  }
  if (from.transit_count() != 0) {
    _internal_set_transit_count(from._internal_transit_count());
  }
}

void ClassifyCounter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.ClassifyCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassifyCounter::CopyFrom(const ClassifyCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.ClassifyCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyCounter::IsInitialized() const {
  return true;
}

void ClassifyCounter::InternalSwap(ClassifyCounter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassifyCounter, transit_count_)
      + sizeof(ClassifyCounter::transit_count_)
      - PROTOBUF_FIELD_OFFSET(ClassifyCounter, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassifyCounter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InterfaceClassifyInfo::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_InterfaceClassifyInfo_default_instance_._instance.get_mutable()->auto_classification_ = const_cast< ::kentik::interface::v202108alpha1::InterfaceClassification*>(
      ::kentik::interface::v202108alpha1::InterfaceClassification::internal_default_instance());
  ::kentik::interface::v202108alpha1::_InterfaceClassifyInfo_default_instance_._instance.get_mutable()->previous_classification_ = const_cast< ::kentik::interface::v202108alpha1::InterfaceClassification*>(
      ::kentik::interface::v202108alpha1::InterfaceClassification::internal_default_instance());
}
class InterfaceClassifyInfo::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::InterfaceClassification& auto_classification(const InterfaceClassifyInfo* msg);
  static const ::kentik::interface::v202108alpha1::InterfaceClassification& previous_classification(const InterfaceClassifyInfo* msg);
};

const ::kentik::interface::v202108alpha1::InterfaceClassification&
InterfaceClassifyInfo::_Internal::auto_classification(const InterfaceClassifyInfo* msg) {
  return *msg->auto_classification_;
}
const ::kentik::interface::v202108alpha1::InterfaceClassification&
InterfaceClassifyInfo::_Internal::previous_classification(const InterfaceClassifyInfo* msg) {
  return *msg->previous_classification_;
}
InterfaceClassifyInfo::InterfaceClassifyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_nexthop_asns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
}
InterfaceClassifyInfo::InterfaceClassifyInfo(const InterfaceClassifyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      top_nexthop_asns_(from.top_nexthop_asns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  snmp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_id().empty()) {
    snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_id(),
      GetArena());
  }
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_alias().empty()) {
    snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_alias(),
      GetArena());
  }
  interface_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_ip().empty()) {
    interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_ip(),
      GetArena());
  }
  interface_ip_asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_ip_asn().empty()) {
    interface_ip_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_ip_asn(),
      GetArena());
  }
  pdb_global_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pdb_global_name().empty()) {
    pdb_global_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pdb_global_name(),
      GetArena());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_provider(),
      GetArena());
  }
  previously_classified_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previously_classified_provider().empty()) {
    previously_classified_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previously_classified_provider(),
      GetArena());
  }
  if (from._internal_has_auto_classification()) {
    auto_classification_ = new ::kentik::interface::v202108alpha1::InterfaceClassification(*from.auto_classification_);
  } else {
    auto_classification_ = nullptr;
  }
  if (from._internal_has_previous_classification()) {
    previous_classification_ = new ::kentik::interface::v202108alpha1::InterfaceClassification(*from.previous_classification_);
  } else {
    previous_classification_ = nullptr;
  }
  ::memcpy(&is_internal_ip_, &from.is_internal_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&changed_classification_) -
    reinterpret_cast<char*>(&is_internal_ip_)) + sizeof(changed_classification_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
}

void InterfaceClassifyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pdb_global_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previously_classified_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_classification_) -
      reinterpret_cast<char*>(&auto_classification_)) + sizeof(changed_classification_));
}

InterfaceClassifyInfo::~InterfaceClassifyInfo() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterfaceClassifyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_ip_asn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pdb_global_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previously_classified_provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auto_classification_;
  if (this != internal_default_instance()) delete previous_classification_;
}

void InterfaceClassifyInfo::ArenaDtor(void* object) {
  InterfaceClassifyInfo* _this = reinterpret_cast< InterfaceClassifyInfo* >(object);
  (void)_this;
}
void InterfaceClassifyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceClassifyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterfaceClassifyInfo& InterfaceClassifyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterfaceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void InterfaceClassifyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_nexthop_asns_.Clear();
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pdb_global_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previously_classified_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && auto_classification_ != nullptr) {
    delete auto_classification_;
  }
  auto_classification_ = nullptr;
  if (GetArena() == nullptr && previous_classification_ != nullptr) {
    delete previous_classification_;
  }
  previous_classification_ = nullptr;
  ::memset(&is_internal_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_classification_) -
      reinterpret_cast<char*>(&is_internal_ip_)) + sizeof(changed_classification_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceClassifyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1[json_name = "deviceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_id = 2[json_name = "snmpId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snmp_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_alias = 3[json_name = "snmpAlias"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_snmp_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_ip = 4[json_name = "interfaceIp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_interface_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_ip_asn = 5[json_name = "interfaceIpAsn"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_interface_ip_asn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_internal_ip = 6[json_name = "isInternalIp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_internal_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_internal_asn = 7[json_name = "isInternalAsn"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_internal_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string top_nexthop_asns = 8[json_name = "topNexthopAsns"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_top_nexthop_asns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string pdb_global_name = 9[json_name = "pdbGlobalName"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_pdb_global_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.InterfaceClassification auto_classification = 10[json_name = "autoClassification"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.InterfaceClassification previous_classification = 11[json_name = "previousClassification"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 12[json_name = "provider"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 network_boundary_confidence = 13[json_name = "networkBoundaryConfidence"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          network_boundary_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 connectivity_type_confidence = 14[json_name = "connectivityTypeConfidence"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          connectivity_type_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 provider_confidence = 15[json_name = "providerConfidence"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          provider_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_classified_provider = 16[json_name = "autoClassifiedProvider"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          auto_classified_provider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previously_classified_provider = 17[json_name = "previouslyClassifiedProvider"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_previously_classified_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool previously_classified_external = 18[json_name = "previouslyClassifiedExternal"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          previously_classified_external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ip_asn_matched = 19[json_name = "ipAsnMatched"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ip_asn_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ix_matched = 20[json_name = "ixMatched"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ix_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nexthop_matched = 21[json_name = "nexthopMatched"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          nexthop_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool connectivity_type_matched = 22[json_name = "connectivityTypeMatched"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          connectivity_type_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool provider_matched = 23[json_name = "providerMatched"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          provider_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool changed_classification = 24[json_name = "changedClassification"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          changed_classification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceClassifyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string snmp_id = 2[json_name = "snmpId"];
  if (this->snmp_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_id().data(), static_cast<int>(this->_internal_snmp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snmp_id(), target);
  }

  // string snmp_alias = 3[json_name = "snmpAlias"];
  if (this->snmp_alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_alias().data(), static_cast<int>(this->_internal_snmp_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snmp_alias(), target);
  }

  // string interface_ip = 4[json_name = "interfaceIp"];
  if (this->interface_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_ip().data(), static_cast<int>(this->_internal_interface_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_interface_ip(), target);
  }

  // string interface_ip_asn = 5[json_name = "interfaceIpAsn"];
  if (this->interface_ip_asn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_ip_asn().data(), static_cast<int>(this->_internal_interface_ip_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_interface_ip_asn(), target);
  }

  // bool is_internal_ip = 6[json_name = "isInternalIp"];
  if (this->is_internal_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_internal_ip(), target);
  }

  // bool is_internal_asn = 7[json_name = "isInternalAsn"];
  if (this->is_internal_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_internal_asn(), target);
  }

  // repeated string top_nexthop_asns = 8[json_name = "topNexthopAsns"];
  for (int i = 0, n = this->_internal_top_nexthop_asns_size(); i < n; i++) {
    const auto& s = this->_internal_top_nexthop_asns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns");
    target = stream->WriteString(8, s, target);
  }

  // string pdb_global_name = 9[json_name = "pdbGlobalName"];
  if (this->pdb_global_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pdb_global_name().data(), static_cast<int>(this->_internal_pdb_global_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_pdb_global_name(), target);
  }

  // .kentik.interface.v202108alpha1.InterfaceClassification auto_classification = 10[json_name = "autoClassification"];
  if (this->has_auto_classification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::auto_classification(this), target, stream);
  }

  // .kentik.interface.v202108alpha1.InterfaceClassification previous_classification = 11[json_name = "previousClassification"];
  if (this->has_previous_classification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::previous_classification(this), target, stream);
  }

  // string provider = 12[json_name = "provider"];
  if (this->provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_provider(), target);
  }

  // int32 network_boundary_confidence = 13[json_name = "networkBoundaryConfidence"];
  if (this->network_boundary_confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_network_boundary_confidence(), target);
  }

  // int32 connectivity_type_confidence = 14[json_name = "connectivityTypeConfidence"];
  if (this->connectivity_type_confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_connectivity_type_confidence(), target);
  }

  // int32 provider_confidence = 15[json_name = "providerConfidence"];
  if (this->provider_confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_provider_confidence(), target);
  }

  // bool auto_classified_provider = 16[json_name = "autoClassifiedProvider"];
  if (this->auto_classified_provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_auto_classified_provider(), target);
  }

  // string previously_classified_provider = 17[json_name = "previouslyClassifiedProvider"];
  if (this->previously_classified_provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previously_classified_provider().data(), static_cast<int>(this->_internal_previously_classified_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_previously_classified_provider(), target);
  }

  // bool previously_classified_external = 18[json_name = "previouslyClassifiedExternal"];
  if (this->previously_classified_external() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_previously_classified_external(), target);
  }

  // bool ip_asn_matched = 19[json_name = "ipAsnMatched"];
  if (this->ip_asn_matched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_ip_asn_matched(), target);
  }

  // bool ix_matched = 20[json_name = "ixMatched"];
  if (this->ix_matched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_ix_matched(), target);
  }

  // bool nexthop_matched = 21[json_name = "nexthopMatched"];
  if (this->nexthop_matched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_nexthop_matched(), target);
  }

  // bool connectivity_type_matched = 22[json_name = "connectivityTypeMatched"];
  if (this->connectivity_type_matched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_connectivity_type_matched(), target);
  }

  // bool provider_matched = 23[json_name = "providerMatched"];
  if (this->provider_matched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_provider_matched(), target);
  }

  // bool changed_classification = 24[json_name = "changedClassification"];
  if (this->changed_classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_changed_classification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  return target;
}

size_t InterfaceClassifyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string top_nexthop_asns = 8[json_name = "topNexthopAsns"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(top_nexthop_asns_.size());
  for (int i = 0, n = top_nexthop_asns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      top_nexthop_asns_.Get(i));
  }

  // string device_id = 1[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string snmp_id = 2[json_name = "snmpId"];
  if (this->snmp_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_id());
  }

  // string snmp_alias = 3[json_name = "snmpAlias"];
  if (this->snmp_alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_alias());
  }

  // string interface_ip = 4[json_name = "interfaceIp"];
  if (this->interface_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_ip());
  }

  // string interface_ip_asn = 5[json_name = "interfaceIpAsn"];
  if (this->interface_ip_asn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_ip_asn());
  }

  // string pdb_global_name = 9[json_name = "pdbGlobalName"];
  if (this->pdb_global_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pdb_global_name());
  }

  // string provider = 12[json_name = "provider"];
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // string previously_classified_provider = 17[json_name = "previouslyClassifiedProvider"];
  if (this->previously_classified_provider().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previously_classified_provider());
  }

  // .kentik.interface.v202108alpha1.InterfaceClassification auto_classification = 10[json_name = "autoClassification"];
  if (this->has_auto_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_classification_);
  }

  // .kentik.interface.v202108alpha1.InterfaceClassification previous_classification = 11[json_name = "previousClassification"];
  if (this->has_previous_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_classification_);
  }

  // bool is_internal_ip = 6[json_name = "isInternalIp"];
  if (this->is_internal_ip() != 0) {
    total_size += 1 + 1;
  }

  // bool is_internal_asn = 7[json_name = "isInternalAsn"];
  if (this->is_internal_asn() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_classified_provider = 16[json_name = "autoClassifiedProvider"];
  if (this->auto_classified_provider() != 0) {
    total_size += 2 + 1;
  }

  // bool previously_classified_external = 18[json_name = "previouslyClassifiedExternal"];
  if (this->previously_classified_external() != 0) {
    total_size += 2 + 1;
  }

  // int32 network_boundary_confidence = 13[json_name = "networkBoundaryConfidence"];
  if (this->network_boundary_confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_network_boundary_confidence());
  }

  // int32 connectivity_type_confidence = 14[json_name = "connectivityTypeConfidence"];
  if (this->connectivity_type_confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connectivity_type_confidence());
  }

  // int32 provider_confidence = 15[json_name = "providerConfidence"];
  if (this->provider_confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_provider_confidence());
  }

  // bool ip_asn_matched = 19[json_name = "ipAsnMatched"];
  if (this->ip_asn_matched() != 0) {
    total_size += 2 + 1;
  }

  // bool ix_matched = 20[json_name = "ixMatched"];
  if (this->ix_matched() != 0) {
    total_size += 2 + 1;
  }

  // bool nexthop_matched = 21[json_name = "nexthopMatched"];
  if (this->nexthop_matched() != 0) {
    total_size += 2 + 1;
  }

  // bool connectivity_type_matched = 22[json_name = "connectivityTypeMatched"];
  if (this->connectivity_type_matched() != 0) {
    total_size += 2 + 1;
  }

  // bool provider_matched = 23[json_name = "providerMatched"];
  if (this->provider_matched() != 0) {
    total_size += 2 + 1;
  }

  // bool changed_classification = 24[json_name = "changedClassification"];
  if (this->changed_classification() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceClassifyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceClassifyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterfaceClassifyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
    MergeFrom(*source);
  }
}

void InterfaceClassifyInfo::MergeFrom(const InterfaceClassifyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_nexthop_asns_.MergeFrom(from.top_nexthop_asns_);
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.snmp_id().size() > 0) {
    _internal_set_snmp_id(from._internal_snmp_id());
  }
  if (from.snmp_alias().size() > 0) {
    _internal_set_snmp_alias(from._internal_snmp_alias());
  }
  if (from.interface_ip().size() > 0) {
    _internal_set_interface_ip(from._internal_interface_ip());
  }
  if (from.interface_ip_asn().size() > 0) {
    _internal_set_interface_ip_asn(from._internal_interface_ip_asn());
  }
  if (from.pdb_global_name().size() > 0) {
    _internal_set_pdb_global_name(from._internal_pdb_global_name());
  }
  if (from.provider().size() > 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.previously_classified_provider().size() > 0) {
    _internal_set_previously_classified_provider(from._internal_previously_classified_provider());
  }
  if (from.has_auto_classification()) {
    _internal_mutable_auto_classification()->::kentik::interface::v202108alpha1::InterfaceClassification::MergeFrom(from._internal_auto_classification());
  }
  if (from.has_previous_classification()) {
    _internal_mutable_previous_classification()->::kentik::interface::v202108alpha1::InterfaceClassification::MergeFrom(from._internal_previous_classification());
  }
  if (from.is_internal_ip() != 0) {
    _internal_set_is_internal_ip(from._internal_is_internal_ip());
  }
  if (from.is_internal_asn() != 0) {
    _internal_set_is_internal_asn(from._internal_is_internal_asn());
  }
  if (from.auto_classified_provider() != 0) {
    _internal_set_auto_classified_provider(from._internal_auto_classified_provider());
  }
  if (from.previously_classified_external() != 0) {
    _internal_set_previously_classified_external(from._internal_previously_classified_external());
  }
  if (from.network_boundary_confidence() != 0) {
    _internal_set_network_boundary_confidence(from._internal_network_boundary_confidence());
  }
  if (from.connectivity_type_confidence() != 0) {
    _internal_set_connectivity_type_confidence(from._internal_connectivity_type_confidence());
  }
  if (from.provider_confidence() != 0) {
    _internal_set_provider_confidence(from._internal_provider_confidence());
  }
  if (from.ip_asn_matched() != 0) {
    _internal_set_ip_asn_matched(from._internal_ip_asn_matched());
  }
  if (from.ix_matched() != 0) {
    _internal_set_ix_matched(from._internal_ix_matched());
  }
  if (from.nexthop_matched() != 0) {
    _internal_set_nexthop_matched(from._internal_nexthop_matched());
  }
  if (from.connectivity_type_matched() != 0) {
    _internal_set_connectivity_type_matched(from._internal_connectivity_type_matched());
  }
  if (from.provider_matched() != 0) {
    _internal_set_provider_matched(from._internal_provider_matched());
  }
  if (from.changed_classification() != 0) {
    _internal_set_changed_classification(from._internal_changed_classification());
  }
}

void InterfaceClassifyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceClassifyInfo::CopyFrom(const InterfaceClassifyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceClassifyInfo::IsInitialized() const {
  return true;
}

void InterfaceClassifyInfo::InternalSwap(InterfaceClassifyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  top_nexthop_asns_.InternalSwap(&other->top_nexthop_asns_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_id_.Swap(&other->snmp_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.Swap(&other->snmp_alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_.Swap(&other->interface_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_ip_asn_.Swap(&other->interface_ip_asn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pdb_global_name_.Swap(&other->pdb_global_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previously_classified_provider_.Swap(&other->previously_classified_provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceClassifyInfo, changed_classification_)
      + sizeof(InterfaceClassifyInfo::changed_classification_)
      - PROTOBUF_FIELD_OFFSET(InterfaceClassifyInfo, auto_classification_)>(
          reinterpret_cast<char*>(&auto_classification_),
          reinterpret_cast<char*>(&other->auto_classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceClassifyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceClassifyInfo::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_DeviceClassifyInfo_default_instance_._instance.get_mutable()->previously_classified_counter_ = const_cast< ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      ::kentik::interface::v202108alpha1::ClassifyCounter::internal_default_instance());
  ::kentik::interface::v202108alpha1::_DeviceClassifyInfo_default_instance_._instance.get_mutable()->auto_classified_counter_ = const_cast< ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      ::kentik::interface::v202108alpha1::ClassifyCounter::internal_default_instance());
}
class DeviceClassifyInfo::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::ClassifyCounter& previously_classified_counter(const DeviceClassifyInfo* msg);
  static const ::kentik::interface::v202108alpha1::ClassifyCounter& auto_classified_counter(const DeviceClassifyInfo* msg);
};

const ::kentik::interface::v202108alpha1::ClassifyCounter&
DeviceClassifyInfo::_Internal::previously_classified_counter(const DeviceClassifyInfo* msg) {
  return *msg->previously_classified_counter_;
}
const ::kentik::interface::v202108alpha1::ClassifyCounter&
DeviceClassifyInfo::_Internal::auto_classified_counter(const DeviceClassifyInfo* msg) {
  return *msg->auto_classified_counter_;
}
DeviceClassifyInfo::DeviceClassifyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interfaces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.DeviceClassifyInfo)
}
DeviceClassifyInfo::DeviceClassifyInfo(const DeviceClassifyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  if (from._internal_has_previously_classified_counter()) {
    previously_classified_counter_ = new ::kentik::interface::v202108alpha1::ClassifyCounter(*from.previously_classified_counter_);
  } else {
    previously_classified_counter_ = nullptr;
  }
  if (from._internal_has_auto_classified_counter()) {
    auto_classified_counter_ = new ::kentik::interface::v202108alpha1::ClassifyCounter(*from.auto_classified_counter_);
  } else {
    auto_classified_counter_ = nullptr;
  }
  ::memcpy(&total_interfaces_, &from.total_interfaces_,
    static_cast<size_t>(reinterpret_cast<char*>(&connectivity_type_matched_count_) -
    reinterpret_cast<char*>(&total_interfaces_)) + sizeof(connectivity_type_matched_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.DeviceClassifyInfo)
}

void DeviceClassifyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&previously_classified_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectivity_type_matched_count_) -
      reinterpret_cast<char*>(&previously_classified_counter_)) + sizeof(connectivity_type_matched_count_));
}

DeviceClassifyInfo::~DeviceClassifyInfo() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceClassifyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previously_classified_counter_;
  if (this != internal_default_instance()) delete auto_classified_counter_;
}

void DeviceClassifyInfo::ArenaDtor(void* object) {
  DeviceClassifyInfo* _this = reinterpret_cast< DeviceClassifyInfo* >(object);
  (void)_this;
}
void DeviceClassifyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceClassifyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceClassifyInfo& DeviceClassifyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceClassifyInfo_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void DeviceClassifyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && previously_classified_counter_ != nullptr) {
    delete previously_classified_counter_;
  }
  previously_classified_counter_ = nullptr;
  if (GetArena() == nullptr && auto_classified_counter_ != nullptr) {
    delete auto_classified_counter_;
  }
  auto_classified_counter_ = nullptr;
  ::memset(&total_interfaces_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectivity_type_matched_count_) -
      reinterpret_cast<char*>(&total_interfaces_)) + sizeof(connectivity_type_matched_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceClassifyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1[json_name = "deviceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_interfaces = 2[json_name = "totalInterfaces"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_interfaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ClassifyCounter previously_classified_counter = 3[json_name = "previouslyClassifiedCounter"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previously_classified_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ClassifyCounter auto_classified_counter = 4[json_name = "autoClassifiedCounter"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_classified_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 changed_classification_count = 15[json_name = "changedClassificationCount"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          changed_classification_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip_asn_matched_count = 16[json_name = "ipAsnMatchedCount"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ip_asn_matched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ix_matched_count = 17[json_name = "ixMatchedCount"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ix_matched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nexthop_matched_count = 18[json_name = "nexthopMatchedCount"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          nexthop_matched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 connectivity_type_matched_count = 19[json_name = "connectivityTypeMatchedCount"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          connectivity_type_matched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 provider_matched_count = 20[json_name = "providerMatchedCount"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          provider_matched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.interface.v202108alpha1.InterfaceClassifyInfo interfaces = 21[json_name = "interfaces"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceClassifyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 total_interfaces = 2[json_name = "totalInterfaces"];
  if (this->total_interfaces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_interfaces(), target);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter previously_classified_counter = 3[json_name = "previouslyClassifiedCounter"];
  if (this->has_previously_classified_counter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::previously_classified_counter(this), target, stream);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter auto_classified_counter = 4[json_name = "autoClassifiedCounter"];
  if (this->has_auto_classified_counter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::auto_classified_counter(this), target, stream);
  }

  // int32 changed_classification_count = 15[json_name = "changedClassificationCount"];
  if (this->changed_classification_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_changed_classification_count(), target);
  }

  // int32 ip_asn_matched_count = 16[json_name = "ipAsnMatchedCount"];
  if (this->ip_asn_matched_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_ip_asn_matched_count(), target);
  }

  // int32 ix_matched_count = 17[json_name = "ixMatchedCount"];
  if (this->ix_matched_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_ix_matched_count(), target);
  }

  // int32 nexthop_matched_count = 18[json_name = "nexthopMatchedCount"];
  if (this->nexthop_matched_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_nexthop_matched_count(), target);
  }

  // int32 connectivity_type_matched_count = 19[json_name = "connectivityTypeMatchedCount"];
  if (this->connectivity_type_matched_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_connectivity_type_matched_count(), target);
  }

  // int32 provider_matched_count = 20[json_name = "providerMatchedCount"];
  if (this->provider_matched_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_provider_matched_count(), target);
  }

  // repeated .kentik.interface.v202108alpha1.InterfaceClassifyInfo interfaces = 21[json_name = "interfaces"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_interfaces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  return target;
}

size_t DeviceClassifyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.interface.v202108alpha1.InterfaceClassifyInfo interfaces = 21[json_name = "interfaces"];
  total_size += 2UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_id = 1[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter previously_classified_counter = 3[json_name = "previouslyClassifiedCounter"];
  if (this->has_previously_classified_counter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previously_classified_counter_);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter auto_classified_counter = 4[json_name = "autoClassifiedCounter"];
  if (this->has_auto_classified_counter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_classified_counter_);
  }

  // int32 total_interfaces = 2[json_name = "totalInterfaces"];
  if (this->total_interfaces() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_interfaces());
  }

  // int32 changed_classification_count = 15[json_name = "changedClassificationCount"];
  if (this->changed_classification_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changed_classification_count());
  }

  // int32 provider_matched_count = 20[json_name = "providerMatchedCount"];
  if (this->provider_matched_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_provider_matched_count());
  }

  // int32 ip_asn_matched_count = 16[json_name = "ipAsnMatchedCount"];
  if (this->ip_asn_matched_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip_asn_matched_count());
  }

  // int32 ix_matched_count = 17[json_name = "ixMatchedCount"];
  if (this->ix_matched_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ix_matched_count());
  }

  // int32 nexthop_matched_count = 18[json_name = "nexthopMatchedCount"];
  if (this->nexthop_matched_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nexthop_matched_count());
  }

  // int32 connectivity_type_matched_count = 19[json_name = "connectivityTypeMatchedCount"];
  if (this->connectivity_type_matched_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connectivity_type_matched_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceClassifyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceClassifyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceClassifyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.DeviceClassifyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.DeviceClassifyInfo)
    MergeFrom(*source);
  }
}

void DeviceClassifyInfo::MergeFrom(const DeviceClassifyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.has_previously_classified_counter()) {
    _internal_mutable_previously_classified_counter()->::kentik::interface::v202108alpha1::ClassifyCounter::MergeFrom(from._internal_previously_classified_counter());
  }
  if (from.has_auto_classified_counter()) {
    _internal_mutable_auto_classified_counter()->::kentik::interface::v202108alpha1::ClassifyCounter::MergeFrom(from._internal_auto_classified_counter());
  }
  if (from.total_interfaces() != 0) {
    _internal_set_total_interfaces(from._internal_total_interfaces());
  }
  if (from.changed_classification_count() != 0) {
    _internal_set_changed_classification_count(from._internal_changed_classification_count());
  }
  if (from.provider_matched_count() != 0) {
    _internal_set_provider_matched_count(from._internal_provider_matched_count());
  }
  if (from.ip_asn_matched_count() != 0) {
    _internal_set_ip_asn_matched_count(from._internal_ip_asn_matched_count());
  }
  if (from.ix_matched_count() != 0) {
    _internal_set_ix_matched_count(from._internal_ix_matched_count());
  }
  if (from.nexthop_matched_count() != 0) {
    _internal_set_nexthop_matched_count(from._internal_nexthop_matched_count());
  }
  if (from.connectivity_type_matched_count() != 0) {
    _internal_set_connectivity_type_matched_count(from._internal_connectivity_type_matched_count());
  }
}

void DeviceClassifyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceClassifyInfo::CopyFrom(const DeviceClassifyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.DeviceClassifyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceClassifyInfo::IsInitialized() const {
  return true;
}

void DeviceClassifyInfo::InternalSwap(DeviceClassifyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceClassifyInfo, connectivity_type_matched_count_)
      + sizeof(DeviceClassifyInfo::connectivity_type_matched_count_)
      - PROTOBUF_FIELD_OFFSET(DeviceClassifyInfo, previously_classified_counter_)>(
          reinterpret_cast<char*>(&previously_classified_counter_),
          reinterpret_cast<char*>(&other->previously_classified_counter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceClassifyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InterfaceFilter::InitAsDefaultInstance() {
}
class InterfaceFilter::_Internal {
 public:
};

InterfaceFilter::InterfaceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_ids_(arena),
  connectivity_types_(arena),
  network_boundaries_(arena),
  providers_(arena),
  snmp_speeds_(arena),
  ip_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.InterfaceFilter)
}
InterfaceFilter::InterfaceFilter(const InterfaceFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_ids_(from.device_ids_),
      connectivity_types_(from.connectivity_types_),
      network_boundaries_(from.network_boundaries_),
      providers_(from.providers_),
      snmp_speeds_(from.snmp_speeds_),
      ip_types_(from.ip_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.InterfaceFilter)
}

void InterfaceFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InterfaceFilter::~InterfaceFilter() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.InterfaceFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterfaceFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InterfaceFilter::ArenaDtor(void* object) {
  InterfaceFilter* _this = reinterpret_cast< InterfaceFilter* >(object);
  (void)_this;
}
void InterfaceFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterfaceFilter& InterfaceFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterfaceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void InterfaceFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.InterfaceFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ids_.Clear();
  connectivity_types_.Clear();
  network_boundaries_.Clear();
  providers_.Clear();
  snmp_speeds_.Clear();
  ip_types_.Clear();
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1[json_name = "text"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceFilter.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_ids = 2[json_name = "deviceIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceFilter.device_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.interface.v202108alpha1.ConnectivityType connectivity_types = 3[json_name = "connectivityTypes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_connectivity_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_connectivity_types(static_cast<::kentik::interface::v202108alpha1::ConnectivityType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.interface.v202108alpha1.NetworkBoundary network_boundaries = 4[json_name = "networkBoundaries"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_network_boundaries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_network_boundaries(static_cast<::kentik::interface::v202108alpha1::NetworkBoundary>(val));
        } else goto handle_unusual;
        continue;
      // repeated string providers = 5[json_name = "providers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_providers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.InterfaceFilter.providers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 snmp_speeds = 6[json_name = "snmpSpeeds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_snmp_speeds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_snmp_speeds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.interface.v202108alpha1.IpFilter ip_types = 7[json_name = "ipTypes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ip_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ip_types(static_cast<::kentik::interface::v202108alpha1::IpFilter>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.InterfaceFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1[json_name = "text"];
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceFilter.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // repeated string device_ids = 2[json_name = "deviceIds"];
  for (int i = 0, n = this->_internal_device_ids_size(); i < n; i++) {
    const auto& s = this->_internal_device_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceFilter.device_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated .kentik.interface.v202108alpha1.ConnectivityType connectivity_types = 3[json_name = "connectivityTypes"];
  {
    int byte_size = _connectivity_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, connectivity_types_, byte_size, target);
    }
  }

  // repeated .kentik.interface.v202108alpha1.NetworkBoundary network_boundaries = 4[json_name = "networkBoundaries"];
  {
    int byte_size = _network_boundaries_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, network_boundaries_, byte_size, target);
    }
  }

  // repeated string providers = 5[json_name = "providers"];
  for (int i = 0, n = this->_internal_providers_size(); i < n; i++) {
    const auto& s = this->_internal_providers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.InterfaceFilter.providers");
    target = stream->WriteString(5, s, target);
  }

  // repeated int32 snmp_speeds = 6[json_name = "snmpSpeeds"];
  {
    int byte_size = _snmp_speeds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_snmp_speeds(), byte_size, target);
    }
  }

  // repeated .kentik.interface.v202108alpha1.IpFilter ip_types = 7[json_name = "ipTypes"];
  {
    int byte_size = _ip_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, ip_types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.InterfaceFilter)
  return target;
}

size_t InterfaceFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.InterfaceFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_ids = 2[json_name = "deviceIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_ids_.size());
  for (int i = 0, n = device_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_ids_.Get(i));
  }

  // repeated .kentik.interface.v202108alpha1.ConnectivityType connectivity_types = 3[json_name = "connectivityTypes"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_connectivity_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_connectivity_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _connectivity_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kentik.interface.v202108alpha1.NetworkBoundary network_boundaries = 4[json_name = "networkBoundaries"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_network_boundaries_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_network_boundaries(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _network_boundaries_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string providers = 5[json_name = "providers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(providers_.size());
  for (int i = 0, n = providers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      providers_.Get(i));
  }

  // repeated int32 snmp_speeds = 6[json_name = "snmpSpeeds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->snmp_speeds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _snmp_speeds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kentik.interface.v202108alpha1.IpFilter ip_types = 7[json_name = "ipTypes"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ip_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ip_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ip_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string text = 1[json_name = "text"];
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.InterfaceFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterfaceFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.InterfaceFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.InterfaceFilter)
    MergeFrom(*source);
  }
}

void InterfaceFilter::MergeFrom(const InterfaceFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.InterfaceFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_ids_.MergeFrom(from.device_ids_);
  connectivity_types_.MergeFrom(from.connectivity_types_);
  network_boundaries_.MergeFrom(from.network_boundaries_);
  providers_.MergeFrom(from.providers_);
  snmp_speeds_.MergeFrom(from.snmp_speeds_);
  ip_types_.MergeFrom(from.ip_types_);
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
}

void InterfaceFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.InterfaceFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceFilter::CopyFrom(const InterfaceFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.InterfaceFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceFilter::IsInitialized() const {
  return true;
}

void InterfaceFilter::InternalSwap(InterfaceFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_ids_.InternalSwap(&other->device_ids_);
  connectivity_types_.InternalSwap(&other->connectivity_types_);
  network_boundaries_.InternalSwap(&other->network_boundaries_);
  providers_.InternalSwap(&other->providers_);
  snmp_speeds_.InternalSwap(&other->snmp_speeds_);
  ip_types_.InternalSwap(&other->ip_types_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoClassifyRequest::InitAsDefaultInstance() {
}
class AutoClassifyRequest::_Internal {
 public:
};

AutoClassifyRequest::AutoClassifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.AutoClassifyRequest)
}
AutoClassifyRequest::AutoClassifyRequest(const AutoClassifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.AutoClassifyRequest)
}

void AutoClassifyRequest::SharedCtor() {
}

AutoClassifyRequest::~AutoClassifyRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.AutoClassifyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoClassifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoClassifyRequest::ArenaDtor(void* object) {
  AutoClassifyRequest* _this = reinterpret_cast< AutoClassifyRequest* >(object);
  (void)_this;
}
void AutoClassifyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoClassifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoClassifyRequest& AutoClassifyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void AutoClassifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoClassifyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoClassifyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.AutoClassifyRequest)
  return target;
}

size_t AutoClassifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoClassifyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoClassifyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoClassifyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.AutoClassifyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.AutoClassifyRequest)
    MergeFrom(*source);
  }
}

void AutoClassifyRequest::MergeFrom(const AutoClassifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AutoClassifyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoClassifyRequest::CopyFrom(const AutoClassifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.AutoClassifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoClassifyRequest::IsInitialized() const {
  return true;
}

void AutoClassifyRequest::InternalSwap(AutoClassifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoClassifyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoClassifyResponse::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_AutoClassifyResponse_default_instance_._instance.get_mutable()->total_auto_classify_counter_ = const_cast< ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      ::kentik::interface::v202108alpha1::ClassifyCounter::internal_default_instance());
  ::kentik::interface::v202108alpha1::_AutoClassifyResponse_default_instance_._instance.get_mutable()->total_previous_counter_ = const_cast< ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      ::kentik::interface::v202108alpha1::ClassifyCounter::internal_default_instance());
}
class AutoClassifyResponse::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::ClassifyCounter& total_auto_classify_counter(const AutoClassifyResponse* msg);
  static const ::kentik::interface::v202108alpha1::ClassifyCounter& total_previous_counter(const AutoClassifyResponse* msg);
};

const ::kentik::interface::v202108alpha1::ClassifyCounter&
AutoClassifyResponse::_Internal::total_auto_classify_counter(const AutoClassifyResponse* msg) {
  return *msg->total_auto_classify_counter_;
}
const ::kentik::interface::v202108alpha1::ClassifyCounter&
AutoClassifyResponse::_Internal::total_previous_counter(const AutoClassifyResponse* msg) {
  return *msg->total_previous_counter_;
}
AutoClassifyResponse::AutoClassifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.AutoClassifyResponse)
}
AutoClassifyResponse::AutoClassifyResponse(const AutoClassifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_auto_classify_counter()) {
    total_auto_classify_counter_ = new ::kentik::interface::v202108alpha1::ClassifyCounter(*from.total_auto_classify_counter_);
  } else {
    total_auto_classify_counter_ = nullptr;
  }
  if (from._internal_has_total_previous_counter()) {
    total_previous_counter_ = new ::kentik::interface::v202108alpha1::ClassifyCounter(*from.total_previous_counter_);
  } else {
    total_previous_counter_ = nullptr;
  }
  ::memcpy(&perc_auto_classified_, &from.perc_auto_classified_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_interfaces_) -
    reinterpret_cast<char*>(&perc_auto_classified_)) + sizeof(total_interfaces_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.AutoClassifyResponse)
}

void AutoClassifyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  ::memset(&total_auto_classify_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_interfaces_) -
      reinterpret_cast<char*>(&total_auto_classify_counter_)) + sizeof(total_interfaces_));
}

AutoClassifyResponse::~AutoClassifyResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.AutoClassifyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoClassifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete total_auto_classify_counter_;
  if (this != internal_default_instance()) delete total_previous_counter_;
}

void AutoClassifyResponse::ArenaDtor(void* object) {
  AutoClassifyResponse* _this = reinterpret_cast< AutoClassifyResponse* >(object);
  (void)_this;
}
void AutoClassifyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoClassifyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoClassifyResponse& AutoClassifyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void AutoClassifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  if (GetArena() == nullptr && total_auto_classify_counter_ != nullptr) {
    delete total_auto_classify_counter_;
  }
  total_auto_classify_counter_ = nullptr;
  if (GetArena() == nullptr && total_previous_counter_ != nullptr) {
    delete total_previous_counter_;
  }
  total_previous_counter_ = nullptr;
  ::memset(&perc_auto_classified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_interfaces_) -
      reinterpret_cast<char*>(&perc_auto_classified_)) + sizeof(total_interfaces_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoClassifyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double perc_auto_classified = 1[json_name = "percAutoClassified"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          perc_auto_classified_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 net_changed_transit = 2[json_name = "netChangedTransit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          net_changed_transit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 net_changed_ix = 3[json_name = "netChangedIx"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          net_changed_ix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 net_changed_provider = 4[json_name = "netChangedProvider"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          net_changed_provider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_changed_classification_count = 5[json_name = "totalChangedClassificationCount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_changed_classification_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_auto_classify_count = 6[json_name = "totalAutoClassifyCount"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_auto_classify_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ClassifyCounter total_auto_classify_counter = 7[json_name = "totalAutoClassifyCounter"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_auto_classify_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ClassifyCounter total_previous_counter = 8[json_name = "totalPreviousCounter"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_previous_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_interfaces = 17[json_name = "totalInterfaces"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          total_interfaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.interface.v202108alpha1.DeviceClassifyInfo devices = 18[json_name = "devices"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoClassifyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double perc_auto_classified = 1[json_name = "percAutoClassified"];
  if (!(this->perc_auto_classified() <= 0 && this->perc_auto_classified() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_perc_auto_classified(), target);
  }

  // int32 net_changed_transit = 2[json_name = "netChangedTransit"];
  if (this->net_changed_transit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_net_changed_transit(), target);
  }

  // int32 net_changed_ix = 3[json_name = "netChangedIx"];
  if (this->net_changed_ix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_net_changed_ix(), target);
  }

  // int32 net_changed_provider = 4[json_name = "netChangedProvider"];
  if (this->net_changed_provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_net_changed_provider(), target);
  }

  // int32 total_changed_classification_count = 5[json_name = "totalChangedClassificationCount"];
  if (this->total_changed_classification_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_changed_classification_count(), target);
  }

  // int32 total_auto_classify_count = 6[json_name = "totalAutoClassifyCount"];
  if (this->total_auto_classify_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_auto_classify_count(), target);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter total_auto_classify_counter = 7[json_name = "totalAutoClassifyCounter"];
  if (this->has_total_auto_classify_counter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::total_auto_classify_counter(this), target, stream);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter total_previous_counter = 8[json_name = "totalPreviousCounter"];
  if (this->has_total_previous_counter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::total_previous_counter(this), target, stream);
  }

  // int32 total_interfaces = 17[json_name = "totalInterfaces"];
  if (this->total_interfaces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_total_interfaces(), target);
  }

  // repeated .kentik.interface.v202108alpha1.DeviceClassifyInfo devices = 18[json_name = "devices"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.AutoClassifyResponse)
  return target;
}

size_t AutoClassifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.interface.v202108alpha1.DeviceClassifyInfo devices = 18[json_name = "devices"];
  total_size += 2UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter total_auto_classify_counter = 7[json_name = "totalAutoClassifyCounter"];
  if (this->has_total_auto_classify_counter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_auto_classify_counter_);
  }

  // .kentik.interface.v202108alpha1.ClassifyCounter total_previous_counter = 8[json_name = "totalPreviousCounter"];
  if (this->has_total_previous_counter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_previous_counter_);
  }

  // double perc_auto_classified = 1[json_name = "percAutoClassified"];
  if (!(this->perc_auto_classified() <= 0 && this->perc_auto_classified() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 net_changed_transit = 2[json_name = "netChangedTransit"];
  if (this->net_changed_transit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_net_changed_transit());
  }

  // int32 net_changed_ix = 3[json_name = "netChangedIx"];
  if (this->net_changed_ix() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_net_changed_ix());
  }

  // int32 net_changed_provider = 4[json_name = "netChangedProvider"];
  if (this->net_changed_provider() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_net_changed_provider());
  }

  // int32 total_changed_classification_count = 5[json_name = "totalChangedClassificationCount"];
  if (this->total_changed_classification_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_changed_classification_count());
  }

  // int32 total_auto_classify_count = 6[json_name = "totalAutoClassifyCount"];
  if (this->total_auto_classify_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_auto_classify_count());
  }

  // int32 total_interfaces = 17[json_name = "totalInterfaces"];
  if (this->total_interfaces() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_interfaces());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoClassifyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoClassifyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoClassifyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.AutoClassifyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.AutoClassifyResponse)
    MergeFrom(*source);
  }
}

void AutoClassifyResponse::MergeFrom(const AutoClassifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.has_total_auto_classify_counter()) {
    _internal_mutable_total_auto_classify_counter()->::kentik::interface::v202108alpha1::ClassifyCounter::MergeFrom(from._internal_total_auto_classify_counter());
  }
  if (from.has_total_previous_counter()) {
    _internal_mutable_total_previous_counter()->::kentik::interface::v202108alpha1::ClassifyCounter::MergeFrom(from._internal_total_previous_counter());
  }
  if (!(from.perc_auto_classified() <= 0 && from.perc_auto_classified() >= 0)) {
    _internal_set_perc_auto_classified(from._internal_perc_auto_classified());
  }
  if (from.net_changed_transit() != 0) {
    _internal_set_net_changed_transit(from._internal_net_changed_transit());
  }
  if (from.net_changed_ix() != 0) {
    _internal_set_net_changed_ix(from._internal_net_changed_ix());
  }
  if (from.net_changed_provider() != 0) {
    _internal_set_net_changed_provider(from._internal_net_changed_provider());
  }
  if (from.total_changed_classification_count() != 0) {
    _internal_set_total_changed_classification_count(from._internal_total_changed_classification_count());
  }
  if (from.total_auto_classify_count() != 0) {
    _internal_set_total_auto_classify_count(from._internal_total_auto_classify_count());
  }
  if (from.total_interfaces() != 0) {
    _internal_set_total_interfaces(from._internal_total_interfaces());
  }
}

void AutoClassifyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoClassifyResponse::CopyFrom(const AutoClassifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.AutoClassifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoClassifyResponse::IsInitialized() const {
  return true;
}

void AutoClassifyResponse::InternalSwap(AutoClassifyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoClassifyResponse, total_interfaces_)
      + sizeof(AutoClassifyResponse::total_interfaces_)
      - PROTOBUF_FIELD_OFFSET(AutoClassifyResponse, total_auto_classify_counter_)>(
          reinterpret_cast<char*>(&total_auto_classify_counter_),
          reinterpret_cast<char*>(&other->total_auto_classify_counter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoClassifyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualClassifyRequest::InitAsDefaultInstance() {
}
class ManualClassifyRequest::_Internal {
 public:
};

ManualClassifyRequest::ManualClassifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interface_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.ManualClassifyRequest)
}
ManualClassifyRequest::ManualClassifyRequest(const ManualClassifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interface_ids_(from.interface_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_provider(),
      GetArena());
  }
  ::memcpy(&connectivity_type_, &from.connectivity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_boundary_) -
    reinterpret_cast<char*>(&connectivity_type_)) + sizeof(network_boundary_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.ManualClassifyRequest)
}

void ManualClassifyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&connectivity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_boundary_) -
      reinterpret_cast<char*>(&connectivity_type_)) + sizeof(network_boundary_));
}

ManualClassifyRequest::~ManualClassifyRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.ManualClassifyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualClassifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ManualClassifyRequest::ArenaDtor(void* object) {
  ManualClassifyRequest* _this = reinterpret_cast< ManualClassifyRequest* >(object);
  (void)_this;
}
void ManualClassifyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualClassifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualClassifyRequest& ManualClassifyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualClassifyRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void ManualClassifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_ids_.Clear();
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&connectivity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_boundary_) -
      reinterpret_cast<char*>(&connectivity_type_)) + sizeof(network_boundary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualClassifyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string interface_ids = 1[json_name = "interfaceIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_interface_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectivity_type(static_cast<::kentik::interface::v202108alpha1::ConnectivityType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_boundary(static_cast<::kentik::interface::v202108alpha1::NetworkBoundary>(val));
        } else goto handle_unusual;
        continue;
      // string provider = 4[json_name = "provider"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.ManualClassifyRequest.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualClassifyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string interface_ids = 1[json_name = "interfaceIds"];
  for (int i = 0, n = this->_internal_interface_ids_size(); i < n; i++) {
    const auto& s = this->_internal_interface_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids");
    target = stream->WriteString(1, s, target);
  }

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
  if (this->connectivity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connectivity_type(), target);
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
  if (this->network_boundary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_network_boundary(), target);
  }

  // string provider = 4[json_name = "provider"];
  if (this->provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.ManualClassifyRequest.provider");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.ManualClassifyRequest)
  return target;
}

size_t ManualClassifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string interface_ids = 1[json_name = "interfaceIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(interface_ids_.size());
  for (int i = 0, n = interface_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      interface_ids_.Get(i));
  }

  // string provider = 4[json_name = "provider"];
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
  if (this->connectivity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectivity_type());
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
  if (this->network_boundary() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_boundary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualClassifyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualClassifyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualClassifyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.ManualClassifyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.ManualClassifyRequest)
    MergeFrom(*source);
  }
}

void ManualClassifyRequest::MergeFrom(const ManualClassifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interface_ids_.MergeFrom(from.interface_ids_);
  if (from.provider().size() > 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.connectivity_type() != 0) {
    _internal_set_connectivity_type(from._internal_connectivity_type());
  }
  if (from.network_boundary() != 0) {
    _internal_set_network_boundary(from._internal_network_boundary());
  }
}

void ManualClassifyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualClassifyRequest::CopyFrom(const ManualClassifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.ManualClassifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualClassifyRequest::IsInitialized() const {
  return true;
}

void ManualClassifyRequest::InternalSwap(ManualClassifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interface_ids_.InternalSwap(&other->interface_ids_);
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualClassifyRequest, network_boundary_)
      + sizeof(ManualClassifyRequest::network_boundary_)
      - PROTOBUF_FIELD_OFFSET(ManualClassifyRequest, connectivity_type_)>(
          reinterpret_cast<char*>(&connectivity_type_),
          reinterpret_cast<char*>(&other->connectivity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualClassifyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualClassifyResponse::InitAsDefaultInstance() {
}
class ManualClassifyResponse::_Internal {
 public:
};

ManualClassifyResponse::ManualClassifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.ManualClassifyResponse)
}
ManualClassifyResponse::ManualClassifyResponse(const ManualClassifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_ids_(from.device_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.ManualClassifyResponse)
}

void ManualClassifyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
}

ManualClassifyResponse::~ManualClassifyResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.ManualClassifyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualClassifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManualClassifyResponse::ArenaDtor(void* object) {
  ManualClassifyResponse* _this = reinterpret_cast< ManualClassifyResponse* >(object);
  (void)_this;
}
void ManualClassifyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualClassifyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualClassifyResponse& ManualClassifyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualClassifyResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void ManualClassifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualClassifyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string device_ids = 1[json_name = "deviceIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualClassifyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string device_ids = 1[json_name = "deviceIds"];
  for (int i = 0, n = this->_internal_device_ids_size(); i < n; i++) {
    const auto& s = this->_internal_device_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.ManualClassifyResponse)
  return target;
}

size_t ManualClassifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_ids = 1[json_name = "deviceIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_ids_.size());
  for (int i = 0, n = device_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualClassifyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualClassifyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualClassifyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.ManualClassifyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.ManualClassifyResponse)
    MergeFrom(*source);
  }
}

void ManualClassifyResponse::MergeFrom(const ManualClassifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_ids_.MergeFrom(from.device_ids_);
}

void ManualClassifyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualClassifyResponse::CopyFrom(const ManualClassifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.ManualClassifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualClassifyResponse::IsInitialized() const {
  return true;
}

void ManualClassifyResponse::InternalSwap(ManualClassifyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_ids_.InternalSwap(&other->device_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualClassifyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListInterfaceRequest::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_ListInterfaceRequest_default_instance_._instance.get_mutable()->filters_ = const_cast< ::kentik::interface::v202108alpha1::InterfaceFilter*>(
      ::kentik::interface::v202108alpha1::InterfaceFilter::internal_default_instance());
}
class ListInterfaceRequest::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::InterfaceFilter& filters(const ListInterfaceRequest* msg);
};

const ::kentik::interface::v202108alpha1::InterfaceFilter&
ListInterfaceRequest::_Internal::filters(const ListInterfaceRequest* msg) {
  return *msg->filters_;
}
ListInterfaceRequest::ListInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.ListInterfaceRequest)
}
ListInterfaceRequest::ListInterfaceRequest(const ListInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filters()) {
    filters_ = new ::kentik::interface::v202108alpha1::InterfaceFilter(*from.filters_);
  } else {
    filters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.ListInterfaceRequest)
}

void ListInterfaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  filters_ = nullptr;
}

ListInterfaceRequest::~ListInterfaceRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.ListInterfaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filters_;
}

void ListInterfaceRequest::ArenaDtor(void* object) {
  ListInterfaceRequest* _this = reinterpret_cast< ListInterfaceRequest* >(object);
  (void)_this;
}
void ListInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInterfaceRequest& ListInterfaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void ListInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filters_ != nullptr) {
    delete filters_;
  }
  filters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.InterfaceFilter filters = 1[json_name = "filters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListInterfaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.InterfaceFilter filters = 1[json_name = "filters"];
  if (this->has_filters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.ListInterfaceRequest)
  return target;
}

size_t ListInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.InterfaceFilter filters = 1[json_name = "filters"];
  if (this->has_filters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filters_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInterfaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInterfaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListInterfaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.ListInterfaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.ListInterfaceRequest)
    MergeFrom(*source);
  }
}

void ListInterfaceRequest::MergeFrom(const ListInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filters()) {
    _internal_mutable_filters()->::kentik::interface::v202108alpha1::InterfaceFilter::MergeFrom(from._internal_filters());
  }
}

void ListInterfaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInterfaceRequest::CopyFrom(const ListInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.ListInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInterfaceRequest::IsInitialized() const {
  return true;
}

void ListInterfaceRequest::InternalSwap(ListInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(filters_, other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInterfaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListInterfaceResponse::InitAsDefaultInstance() {
}
class ListInterfaceResponse::_Internal {
 public:
};

ListInterfaceResponse::ListInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interfaces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.ListInterfaceResponse)
}
ListInterfaceResponse::ListInterfaceResponse(const ListInterfaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_count_, &from.total_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalid_count_) -
    reinterpret_cast<char*>(&total_count_)) + sizeof(invalid_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.ListInterfaceResponse)
}

void ListInterfaceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  ::memset(&total_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_count_) -
      reinterpret_cast<char*>(&total_count_)) + sizeof(invalid_count_));
}

ListInterfaceResponse::~ListInterfaceResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.ListInterfaceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListInterfaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListInterfaceResponse::ArenaDtor(void* object) {
  ListInterfaceResponse* _this = reinterpret_cast< ListInterfaceResponse* >(object);
  (void)_this;
}
void ListInterfaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListInterfaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInterfaceResponse& ListInterfaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void ListInterfaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  ::memset(&total_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_count_) -
      reinterpret_cast<char*>(&total_count_)) + sizeof(invalid_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInterfaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.interface.v202108alpha1.Interface interfaces = 1[json_name = "interfaces"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_count = 2[json_name = "totalCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 invalid_count = 3[json_name = "invalidCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListInterfaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.interface.v202108alpha1.Interface interfaces = 1[json_name = "interfaces"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interfaces(i), target, stream);
  }

  // int32 total_count = 2[json_name = "totalCount"];
  if (this->total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_count(), target);
  }

  // int32 invalid_count = 3[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.ListInterfaceResponse)
  return target;
}

size_t ListInterfaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.interface.v202108alpha1.Interface interfaces = 1[json_name = "interfaces"];
  total_size += 1UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_count = 2[json_name = "totalCount"];
  if (this->total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_count());
  }

  // int32 invalid_count = 3[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInterfaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInterfaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListInterfaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.ListInterfaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.ListInterfaceResponse)
    MergeFrom(*source);
  }
}

void ListInterfaceResponse::MergeFrom(const ListInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  if (from.total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListInterfaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInterfaceResponse::CopyFrom(const ListInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.ListInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInterfaceResponse::IsInitialized() const {
  return true;
}

void ListInterfaceResponse::InternalSwap(ListInterfaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListInterfaceResponse, invalid_count_)
      + sizeof(ListInterfaceResponse::invalid_count_)
      - PROTOBUF_FIELD_OFFSET(ListInterfaceResponse, total_count_)>(
          reinterpret_cast<char*>(&total_count_),
          reinterpret_cast<char*>(&other->total_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInterfaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInterfaceRequest::InitAsDefaultInstance() {
}
class GetInterfaceRequest::_Internal {
 public:
};

GetInterfaceRequest::GetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.GetInterfaceRequest)
}
GetInterfaceRequest::GetInterfaceRequest(const GetInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.GetInterfaceRequest)
}

void GetInterfaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetInterfaceRequest::~GetInterfaceRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.GetInterfaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInterfaceRequest::ArenaDtor(void* object) {
  GetInterfaceRequest* _this = reinterpret_cast< GetInterfaceRequest* >(object);
  (void)_this;
}
void GetInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInterfaceRequest& GetInterfaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void GetInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.GetInterfaceRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInterfaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.GetInterfaceRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.GetInterfaceRequest)
  return target;
}

size_t GetInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInterfaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInterfaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInterfaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.GetInterfaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.GetInterfaceRequest)
    MergeFrom(*source);
  }
}

void GetInterfaceRequest::MergeFrom(const GetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetInterfaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInterfaceRequest::CopyFrom(const GetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.GetInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInterfaceRequest::IsInitialized() const {
  return true;
}

void GetInterfaceRequest::InternalSwap(GetInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInterfaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInterfaceResponse::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_GetInterfaceResponse_default_instance_._instance.get_mutable()->interface_ = const_cast< ::kentik::interface::v202108alpha1::Interface*>(
      ::kentik::interface::v202108alpha1::Interface::internal_default_instance());
}
class GetInterfaceResponse::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::Interface& interface(const GetInterfaceResponse* msg);
};

const ::kentik::interface::v202108alpha1::Interface&
GetInterfaceResponse::_Internal::interface(const GetInterfaceResponse* msg) {
  return *msg->interface_;
}
GetInterfaceResponse::GetInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.GetInterfaceResponse)
}
GetInterfaceResponse::GetInterfaceResponse(const GetInterfaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::kentik::interface::v202108alpha1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.GetInterfaceResponse)
}

void GetInterfaceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  interface_ = nullptr;
}

GetInterfaceResponse::~GetInterfaceResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.GetInterfaceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInterfaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void GetInterfaceResponse::ArenaDtor(void* object) {
  GetInterfaceResponse* _this = reinterpret_cast< GetInterfaceResponse* >(object);
  (void)_this;
}
void GetInterfaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInterfaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInterfaceResponse& GetInterfaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void GetInterfaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInterfaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInterfaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.GetInterfaceResponse)
  return target;
}

size_t GetInterfaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInterfaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInterfaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInterfaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.GetInterfaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.GetInterfaceResponse)
    MergeFrom(*source);
  }
}

void GetInterfaceResponse::MergeFrom(const GetInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    _internal_mutable_interface()->::kentik::interface::v202108alpha1::Interface::MergeFrom(from._internal_interface());
  }
}

void GetInterfaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInterfaceResponse::CopyFrom(const GetInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.GetInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInterfaceResponse::IsInitialized() const {
  return true;
}

void GetInterfaceResponse::InternalSwap(GetInterfaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInterfaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateInterfaceRequest::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_CreateInterfaceRequest_default_instance_._instance.get_mutable()->interface_ = const_cast< ::kentik::interface::v202108alpha1::Interface*>(
      ::kentik::interface::v202108alpha1::Interface::internal_default_instance());
}
class CreateInterfaceRequest::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::Interface& interface(const CreateInterfaceRequest* msg);
};

const ::kentik::interface::v202108alpha1::Interface&
CreateInterfaceRequest::_Internal::interface(const CreateInterfaceRequest* msg) {
  return *msg->interface_;
}
CreateInterfaceRequest::CreateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.CreateInterfaceRequest)
}
CreateInterfaceRequest::CreateInterfaceRequest(const CreateInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::kentik::interface::v202108alpha1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.CreateInterfaceRequest)
}

void CreateInterfaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  interface_ = nullptr;
}

CreateInterfaceRequest::~CreateInterfaceRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void CreateInterfaceRequest::ArenaDtor(void* object) {
  CreateInterfaceRequest* _this = reinterpret_cast< CreateInterfaceRequest* >(object);
  (void)_this;
}
void CreateInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateInterfaceRequest& CreateInterfaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void CreateInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInterfaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  return target;
}

size_t CreateInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateInterfaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateInterfaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateInterfaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.CreateInterfaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.CreateInterfaceRequest)
    MergeFrom(*source);
  }
}

void CreateInterfaceRequest::MergeFrom(const CreateInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    _internal_mutable_interface()->::kentik::interface::v202108alpha1::Interface::MergeFrom(from._internal_interface());
  }
}

void CreateInterfaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInterfaceRequest::CopyFrom(const CreateInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.CreateInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInterfaceRequest::IsInitialized() const {
  return true;
}

void CreateInterfaceRequest::InternalSwap(CreateInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInterfaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateInterfaceResponse::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_CreateInterfaceResponse_default_instance_._instance.get_mutable()->interface_ = const_cast< ::kentik::interface::v202108alpha1::Interface*>(
      ::kentik::interface::v202108alpha1::Interface::internal_default_instance());
}
class CreateInterfaceResponse::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::Interface& interface(const CreateInterfaceResponse* msg);
};

const ::kentik::interface::v202108alpha1::Interface&
CreateInterfaceResponse::_Internal::interface(const CreateInterfaceResponse* msg) {
  return *msg->interface_;
}
CreateInterfaceResponse::CreateInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.CreateInterfaceResponse)
}
CreateInterfaceResponse::CreateInterfaceResponse(const CreateInterfaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::kentik::interface::v202108alpha1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.CreateInterfaceResponse)
}

void CreateInterfaceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  interface_ = nullptr;
}

CreateInterfaceResponse::~CreateInterfaceResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateInterfaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void CreateInterfaceResponse::ArenaDtor(void* object) {
  CreateInterfaceResponse* _this = reinterpret_cast< CreateInterfaceResponse* >(object);
  (void)_this;
}
void CreateInterfaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInterfaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateInterfaceResponse& CreateInterfaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void CreateInterfaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInterfaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInterfaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  return target;
}

size_t CreateInterfaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateInterfaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateInterfaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateInterfaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.CreateInterfaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.CreateInterfaceResponse)
    MergeFrom(*source);
  }
}

void CreateInterfaceResponse::MergeFrom(const CreateInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    _internal_mutable_interface()->::kentik::interface::v202108alpha1::Interface::MergeFrom(from._internal_interface());
  }
}

void CreateInterfaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInterfaceResponse::CopyFrom(const CreateInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.CreateInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInterfaceResponse::IsInitialized() const {
  return true;
}

void CreateInterfaceResponse::InternalSwap(CreateInterfaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInterfaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateInterfaceRequest::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_UpdateInterfaceRequest_default_instance_._instance.get_mutable()->interface_ = const_cast< ::kentik::interface::v202108alpha1::Interface*>(
      ::kentik::interface::v202108alpha1::Interface::internal_default_instance());
}
class UpdateInterfaceRequest::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::Interface& interface(const UpdateInterfaceRequest* msg);
};

const ::kentik::interface::v202108alpha1::Interface&
UpdateInterfaceRequest::_Internal::interface(const UpdateInterfaceRequest* msg) {
  return *msg->interface_;
}
UpdateInterfaceRequest::UpdateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
}
UpdateInterfaceRequest::UpdateInterfaceRequest(const UpdateInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::kentik::interface::v202108alpha1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
}

void UpdateInterfaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  interface_ = nullptr;
}

UpdateInterfaceRequest::~UpdateInterfaceRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void UpdateInterfaceRequest::ArenaDtor(void* object) {
  UpdateInterfaceRequest* _this = reinterpret_cast< UpdateInterfaceRequest* >(object);
  (void)_this;
}
void UpdateInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateInterfaceRequest& UpdateInterfaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void UpdateInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateInterfaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  return target;
}

size_t UpdateInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateInterfaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateInterfaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateInterfaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
    MergeFrom(*source);
  }
}

void UpdateInterfaceRequest::MergeFrom(const UpdateInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    _internal_mutable_interface()->::kentik::interface::v202108alpha1::Interface::MergeFrom(from._internal_interface());
  }
}

void UpdateInterfaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateInterfaceRequest::CopyFrom(const UpdateInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInterfaceRequest::IsInitialized() const {
  return true;
}

void UpdateInterfaceRequest::InternalSwap(UpdateInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateInterfaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateInterfaceResponse::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_UpdateInterfaceResponse_default_instance_._instance.get_mutable()->interface_ = const_cast< ::kentik::interface::v202108alpha1::Interface*>(
      ::kentik::interface::v202108alpha1::Interface::internal_default_instance());
}
class UpdateInterfaceResponse::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::Interface& interface(const UpdateInterfaceResponse* msg);
};

const ::kentik::interface::v202108alpha1::Interface&
UpdateInterfaceResponse::_Internal::interface(const UpdateInterfaceResponse* msg) {
  return *msg->interface_;
}
UpdateInterfaceResponse::UpdateInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
}
UpdateInterfaceResponse::UpdateInterfaceResponse(const UpdateInterfaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::kentik::interface::v202108alpha1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
}

void UpdateInterfaceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  interface_ = nullptr;
}

UpdateInterfaceResponse::~UpdateInterfaceResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateInterfaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void UpdateInterfaceResponse::ArenaDtor(void* object) {
  UpdateInterfaceResponse* _this = reinterpret_cast< UpdateInterfaceResponse* >(object);
  (void)_this;
}
void UpdateInterfaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateInterfaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateInterfaceResponse& UpdateInterfaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void UpdateInterfaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateInterfaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateInterfaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  return target;
}

size_t UpdateInterfaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  if (this->has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateInterfaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateInterfaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateInterfaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
    MergeFrom(*source);
  }
}

void UpdateInterfaceResponse::MergeFrom(const UpdateInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    _internal_mutable_interface()->::kentik::interface::v202108alpha1::Interface::MergeFrom(from._internal_interface());
  }
}

void UpdateInterfaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateInterfaceResponse::CopyFrom(const UpdateInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInterfaceResponse::IsInitialized() const {
  return true;
}

void UpdateInterfaceResponse::InternalSwap(UpdateInterfaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateInterfaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteInterfaceRequest::InitAsDefaultInstance() {
}
class DeleteInterfaceRequest::_Internal {
 public:
};

DeleteInterfaceRequest::DeleteInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
}
DeleteInterfaceRequest::DeleteInterfaceRequest(const DeleteInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
}

void DeleteInterfaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteInterfaceRequest::~DeleteInterfaceRequest() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteInterfaceRequest::ArenaDtor(void* object) {
  DeleteInterfaceRequest* _this = reinterpret_cast< DeleteInterfaceRequest* >(object);
  (void)_this;
}
void DeleteInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInterfaceRequest& DeleteInterfaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteInterfaceRequest_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void DeleteInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.DeleteInterfaceRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteInterfaceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.DeleteInterfaceRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  return target;
}

size_t DeleteInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInterfaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInterfaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteInterfaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
    MergeFrom(*source);
  }
}

void DeleteInterfaceRequest::MergeFrom(const DeleteInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteInterfaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInterfaceRequest::CopyFrom(const DeleteInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInterfaceRequest::IsInitialized() const {
  return true;
}

void DeleteInterfaceRequest::InternalSwap(DeleteInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInterfaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteInterfaceResponse::InitAsDefaultInstance() {
}
class DeleteInterfaceResponse::_Internal {
 public:
};

DeleteInterfaceResponse::DeleteInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
}
DeleteInterfaceResponse::DeleteInterfaceResponse(const DeleteInterfaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
}

void DeleteInterfaceResponse::SharedCtor() {
}

DeleteInterfaceResponse::~DeleteInterfaceResponse() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteInterfaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteInterfaceResponse::ArenaDtor(void* object) {
  DeleteInterfaceResponse* _this = reinterpret_cast< DeleteInterfaceResponse* >(object);
  (void)_this;
}
void DeleteInterfaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteInterfaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInterfaceResponse& DeleteInterfaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteInterfaceResponse_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void DeleteInterfaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInterfaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteInterfaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  return target;
}

size_t DeleteInterfaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInterfaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInterfaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteInterfaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
    MergeFrom(*source);
  }
}

void DeleteInterfaceResponse::MergeFrom(const DeleteInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteInterfaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInterfaceResponse::CopyFrom(const DeleteInterfaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInterfaceResponse::IsInitialized() const {
  return true;
}

void DeleteInterfaceResponse::InternalSwap(DeleteInterfaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInterfaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Match::InitAsDefaultInstance() {
}
class Match::_Internal {
 public:
};

Match::Match(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.Match)
}
Match::Match(const Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pattern().empty()) {
    pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pattern(),
      GetArena());
  }
  ::memcpy(&match_attribute_, &from.match_attribute_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_operator_) -
    reinterpret_cast<char*>(&match_attribute_)) + sizeof(match_operator_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.Match)
}

void Match::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_operator_) -
      reinterpret_cast<char*>(&match_attribute_)) + sizeof(match_operator_));
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.Match)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Match::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Match::ArenaDtor(void* object) {
  Match* _this = reinterpret_cast< Match* >(object);
  (void)_this;
}
void Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Match& Match::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Match_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&match_attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_operator_) -
      reinterpret_cast<char*>(&match_attribute_)) + sizeof(match_operator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.MatchAttribute match_attribute = 1[json_name = "matchAttribute"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_attribute(static_cast<::kentik::interface::v202108alpha1::MatchAttribute>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.Operator match_operator = 2[json_name = "matchOperator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_operator(static_cast<::kentik::interface::v202108alpha1::Operator>(val));
        } else goto handle_unusual;
        continue;
      // string pattern = 3[json_name = "pattern"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Match.pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Match::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.MatchAttribute match_attribute = 1[json_name = "matchAttribute"];
  if (this->match_attribute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_match_attribute(), target);
  }

  // .kentik.interface.v202108alpha1.Operator match_operator = 2[json_name = "matchOperator"];
  if (this->match_operator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_operator(), target);
  }

  // string pattern = 3[json_name = "pattern"];
  if (this->pattern().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Match.pattern");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.Match)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pattern = 3[json_name = "pattern"];
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // .kentik.interface.v202108alpha1.MatchAttribute match_attribute = 1[json_name = "matchAttribute"];
  if (this->match_attribute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_attribute());
  }

  // .kentik.interface.v202108alpha1.Operator match_operator = 2[json_name = "matchOperator"];
  if (this->match_operator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_operator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Match::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Match>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.Match)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pattern().size() > 0) {
    _internal_set_pattern(from._internal_pattern());
  }
  if (from.match_attribute() != 0) {
    _internal_set_match_attribute(from._internal_match_attribute());
  }
  if (from.match_operator() != 0) {
    _internal_set_match_operator(from._internal_match_operator());
  }
}

void Match::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::InternalSwap(Match* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pattern_.Swap(&other->pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Match, match_operator_)
      + sizeof(Match::match_operator_)
      - PROTOBUF_FIELD_OFFSET(Match, match_attribute_)>(
          reinterpret_cast<char*>(&match_attribute_),
          reinterpret_cast<char*>(&other->match_attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Match::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Action::InitAsDefaultInstance() {
}
class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_connected_asns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_connected_asns().empty()) {
    set_connected_asns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_set_connected_asns(),
      GetArena());
  }
  set_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_provider().empty()) {
    set_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_set_provider(),
      GetArena());
  }
  ::memcpy(&set_connectivity_type_, &from.set_connectivity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_network_boundary_) -
    reinterpret_cast<char*>(&set_connectivity_type_)) + sizeof(set_network_boundary_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  set_connected_asns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&set_connectivity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_network_boundary_) -
      reinterpret_cast<char*>(&set_connectivity_type_)) + sizeof(set_network_boundary_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  set_connected_asns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_connected_asns_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  set_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&set_connectivity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_network_boundary_) -
      reinterpret_cast<char*>(&set_connectivity_type_)) + sizeof(set_network_boundary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.interface.v202108alpha1.ConnectivityType set_connectivity_type = 1[json_name = "setConnectivityType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_connectivity_type(static_cast<::kentik::interface::v202108alpha1::ConnectivityType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.NetworkBoundary set_network_boundary = 2[json_name = "setNetworkBoundary"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_network_boundary(static_cast<::kentik::interface::v202108alpha1::NetworkBoundary>(val));
        } else goto handle_unusual;
        continue;
      // string set_connected_asns = 3[json_name = "setConnectedAsns"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_set_connected_asns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Action.set_connected_asns"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_provider = 4[json_name = "setProvider"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_set_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Action.set_provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.interface.v202108alpha1.ConnectivityType set_connectivity_type = 1[json_name = "setConnectivityType"];
  if (this->set_connectivity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_set_connectivity_type(), target);
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary set_network_boundary = 2[json_name = "setNetworkBoundary"];
  if (this->set_network_boundary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_set_network_boundary(), target);
  }

  // string set_connected_asns = 3[json_name = "setConnectedAsns"];
  if (this->set_connected_asns().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_connected_asns().data(), static_cast<int>(this->_internal_set_connected_asns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Action.set_connected_asns");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_set_connected_asns(), target);
  }

  // string set_provider = 4[json_name = "setProvider"];
  if (this->set_provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_provider().data(), static_cast<int>(this->_internal_set_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Action.set_provider");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_set_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string set_connected_asns = 3[json_name = "setConnectedAsns"];
  if (this->set_connected_asns().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_connected_asns());
  }

  // string set_provider = 4[json_name = "setProvider"];
  if (this->set_provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_provider());
  }

  // .kentik.interface.v202108alpha1.ConnectivityType set_connectivity_type = 1[json_name = "setConnectivityType"];
  if (this->set_connectivity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_set_connectivity_type());
  }

  // .kentik.interface.v202108alpha1.NetworkBoundary set_network_boundary = 2[json_name = "setNetworkBoundary"];
  if (this->set_network_boundary() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_set_network_boundary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.set_connected_asns().size() > 0) {
    _internal_set_set_connected_asns(from._internal_set_connected_asns());
  }
  if (from.set_provider().size() > 0) {
    _internal_set_set_provider(from._internal_set_provider());
  }
  if (from.set_connectivity_type() != 0) {
    _internal_set_set_connectivity_type(from._internal_set_connectivity_type());
  }
  if (from.set_network_boundary() != 0) {
    _internal_set_set_network_boundary(from._internal_set_network_boundary());
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  set_connected_asns_.Swap(&other->set_connected_asns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  set_provider_.Swap(&other->set_provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action, set_network_boundary_)
      + sizeof(Action::set_network_boundary_)
      - PROTOBUF_FIELD_OFFSET(Action, set_connectivity_type_)>(
          reinterpret_cast<char*>(&set_connectivity_type_),
          reinterpret_cast<char*>(&other->set_connectivity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceFilter::InitAsDefaultInstance() {
}
class DeviceFilter::_Internal {
 public:
};

DeviceFilter::DeviceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_name_(arena),
  device_labels_(arena),
  device_rules_(arena),
  device_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.DeviceFilter)
}
DeviceFilter::DeviceFilter(const DeviceFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_name_(from.device_name_),
      device_labels_(from.device_labels_),
      device_rules_(from.device_rules_),
      device_types_(from.device_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_devices_ = from.all_devices_;
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.DeviceFilter)
}

void DeviceFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  all_devices_ = false;
}

DeviceFilter::~DeviceFilter() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.DeviceFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceFilter::ArenaDtor(void* object) {
  DeviceFilter* _this = reinterpret_cast< DeviceFilter* >(object);
  (void)_this;
}
void DeviceFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceFilter& DeviceFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceFilter_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void DeviceFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.DeviceFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.Clear();
  device_labels_.Clear();
  device_rules_.Clear();
  device_types_.Clear();
  all_devices_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool all_devices = 1[json_name = "allDevices"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          all_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_name = 2[json_name = "deviceName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.DeviceFilter.device_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string device_labels = 3[json_name = "deviceLabels"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.DeviceFilter.device_labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string device_rules = 4[json_name = "deviceRules"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_rules();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.DeviceFilter.device_rules"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string device_types = 5[json_name = "deviceTypes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.DeviceFilter.device_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.DeviceFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all_devices = 1[json_name = "allDevices"];
  if (this->all_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_devices(), target);
  }

  // repeated string device_name = 2[json_name = "deviceName"];
  for (int i = 0, n = this->_internal_device_name_size(); i < n; i++) {
    const auto& s = this->_internal_device_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.DeviceFilter.device_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string device_labels = 3[json_name = "deviceLabels"];
  for (int i = 0, n = this->_internal_device_labels_size(); i < n; i++) {
    const auto& s = this->_internal_device_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.DeviceFilter.device_labels");
    target = stream->WriteString(3, s, target);
  }

  // repeated string device_rules = 4[json_name = "deviceRules"];
  for (int i = 0, n = this->_internal_device_rules_size(); i < n; i++) {
    const auto& s = this->_internal_device_rules(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.DeviceFilter.device_rules");
    target = stream->WriteString(4, s, target);
  }

  // repeated string device_types = 5[json_name = "deviceTypes"];
  for (int i = 0, n = this->_internal_device_types_size(); i < n; i++) {
    const auto& s = this->_internal_device_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.DeviceFilter.device_types");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.DeviceFilter)
  return target;
}

size_t DeviceFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.DeviceFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_name = 2[json_name = "deviceName"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_name_.size());
  for (int i = 0, n = device_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_name_.Get(i));
  }

  // repeated string device_labels = 3[json_name = "deviceLabels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_labels_.size());
  for (int i = 0, n = device_labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_labels_.Get(i));
  }

  // repeated string device_rules = 4[json_name = "deviceRules"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_rules_.size());
  for (int i = 0, n = device_rules_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_rules_.Get(i));
  }

  // repeated string device_types = 5[json_name = "deviceTypes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_types_.size());
  for (int i = 0, n = device_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_types_.Get(i));
  }

  // bool all_devices = 1[json_name = "allDevices"];
  if (this->all_devices() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.DeviceFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.DeviceFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.DeviceFilter)
    MergeFrom(*source);
  }
}

void DeviceFilter::MergeFrom(const DeviceFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.DeviceFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_name_.MergeFrom(from.device_name_);
  device_labels_.MergeFrom(from.device_labels_);
  device_rules_.MergeFrom(from.device_rules_);
  device_types_.MergeFrom(from.device_types_);
  if (from.all_devices() != 0) {
    _internal_set_all_devices(from._internal_all_devices());
  }
}

void DeviceFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.DeviceFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceFilter::CopyFrom(const DeviceFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.DeviceFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceFilter::IsInitialized() const {
  return true;
}

void DeviceFilter::InternalSwap(DeviceFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_name_.InternalSwap(&other->device_name_);
  device_labels_.InternalSwap(&other->device_labels_);
  device_rules_.InternalSwap(&other->device_rules_);
  device_types_.InternalSwap(&other->device_types_);
  swap(all_devices_, other->all_devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rule::InitAsDefaultInstance() {
  ::kentik::interface::v202108alpha1::_Rule_default_instance_._instance.get_mutable()->match_clause_ = const_cast< ::kentik::interface::v202108alpha1::Match*>(
      ::kentik::interface::v202108alpha1::Match::internal_default_instance());
  ::kentik::interface::v202108alpha1::_Rule_default_instance_._instance.get_mutable()->action_set_ = const_cast< ::kentik::interface::v202108alpha1::Action*>(
      ::kentik::interface::v202108alpha1::Action::internal_default_instance());
  ::kentik::interface::v202108alpha1::_Rule_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::interface::v202108alpha1::_Rule_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::interface::v202108alpha1::_Rule_default_instance_._instance.get_mutable()->included_devices_ = const_cast< ::kentik::interface::v202108alpha1::DeviceFilter*>(
      ::kentik::interface::v202108alpha1::DeviceFilter::internal_default_instance());
  ::kentik::interface::v202108alpha1::_Rule_default_instance_._instance.get_mutable()->excluded_devices_ = const_cast< ::kentik::interface::v202108alpha1::DeviceFilter*>(
      ::kentik::interface::v202108alpha1::DeviceFilter::internal_default_instance());
}
class Rule::_Internal {
 public:
  static const ::kentik::interface::v202108alpha1::Match& match_clause(const Rule* msg);
  static const ::kentik::interface::v202108alpha1::Action& action_set(const Rule* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const Rule* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const Rule* msg);
  static const ::kentik::interface::v202108alpha1::DeviceFilter& included_devices(const Rule* msg);
  static const ::kentik::interface::v202108alpha1::DeviceFilter& excluded_devices(const Rule* msg);
};

const ::kentik::interface::v202108alpha1::Match&
Rule::_Internal::match_clause(const Rule* msg) {
  return *msg->match_clause_;
}
const ::kentik::interface::v202108alpha1::Action&
Rule::_Internal::action_set(const Rule* msg) {
  return *msg->action_set_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Rule::_Internal::cdate(const Rule* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Rule::_Internal::edate(const Rule* msg) {
  return *msg->edate_;
}
const ::kentik::interface::v202108alpha1::DeviceFilter&
Rule::_Internal::included_devices(const Rule* msg) {
  return *msg->included_devices_;
}
const ::kentik::interface::v202108alpha1::DeviceFilter&
Rule::_Internal::excluded_devices(const Rule* msg) {
  return *msg->excluded_devices_;
}
void Rule::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void Rule::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
Rule::Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.interface.v202108alpha1.Rule)
}
Rule::Rule(const Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_match_clause()) {
    match_clause_ = new ::kentik::interface::v202108alpha1::Match(*from.match_clause_);
  } else {
    match_clause_ = nullptr;
  }
  if (from._internal_has_action_set()) {
    action_set_ = new ::kentik::interface::v202108alpha1::Action(*from.action_set_);
  } else {
    action_set_ = nullptr;
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  if (from._internal_has_included_devices()) {
    included_devices_ = new ::kentik::interface::v202108alpha1::DeviceFilter(*from.included_devices_);
  } else {
    included_devices_ = nullptr;
  }
  if (from._internal_has_excluded_devices()) {
    excluded_devices_ = new ::kentik::interface::v202108alpha1::DeviceFilter(*from.excluded_devices_);
  } else {
    excluded_devices_ = nullptr;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:kentik.interface.v202108alpha1.Rule)
}

void Rule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rule_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_clause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&match_clause_)) + sizeof(rank_));
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:kentik.interface.v202108alpha1.Rule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_clause_;
  if (this != internal_default_instance()) delete action_set_;
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
  if (this != internal_default_instance()) delete included_devices_;
  if (this != internal_default_instance()) delete excluded_devices_;
}

void Rule::ArenaDtor(void* object) {
  Rule* _this = reinterpret_cast< Rule* >(object);
  (void)_this;
}
void Rule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rule& Rule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rule_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.base);
  return *internal_default_instance();
}


void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.interface.v202108alpha1.Rule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && match_clause_ != nullptr) {
    delete match_clause_;
  }
  match_clause_ = nullptr;
  if (GetArena() == nullptr && action_set_ != nullptr) {
    delete action_set_;
  }
  action_set_ = nullptr;
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  if (GetArena() == nullptr && included_devices_ != nullptr) {
    delete included_devices_;
  }
  included_devices_ = nullptr;
  if (GetArena() == nullptr && excluded_devices_ != nullptr) {
    delete excluded_devices_;
  }
  excluded_devices_ = nullptr;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.interface.v202108alpha1.Rule.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 2[json_name = "enabled"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 3[json_name = "rank"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.Match match_clause = 4[json_name = "matchClause"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_clause(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.Action action_set = 5[json_name = "actionSet"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.DeviceFilter included_devices = 8[json_name = "includedDevices"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_included_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.interface.v202108alpha1.DeviceFilter excluded_devices = 9[json_name = "excludedDevices"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_excluded_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.interface.v202108alpha1.Rule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.interface.v202108alpha1.Rule.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool enabled = 2[json_name = "enabled"];
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // int32 rank = 3[json_name = "rank"];
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank(), target);
  }

  // .kentik.interface.v202108alpha1.Match match_clause = 4[json_name = "matchClause"];
  if (this->has_match_clause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::match_clause(this), target, stream);
  }

  // .kentik.interface.v202108alpha1.Action action_set = 5[json_name = "actionSet"];
  if (this->has_action_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::action_set(this), target, stream);
  }

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::edate(this), target, stream);
  }

  // .kentik.interface.v202108alpha1.DeviceFilter included_devices = 8[json_name = "includedDevices"];
  if (this->has_included_devices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::included_devices(this), target, stream);
  }

  // .kentik.interface.v202108alpha1.DeviceFilter excluded_devices = 9[json_name = "excludedDevices"];
  if (this->has_excluded_devices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::excluded_devices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.interface.v202108alpha1.Rule)
  return target;
}

size_t Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.interface.v202108alpha1.Rule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .kentik.interface.v202108alpha1.Match match_clause = 4[json_name = "matchClause"];
  if (this->has_match_clause()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_clause_);
  }

  // .kentik.interface.v202108alpha1.Action action_set = 5[json_name = "actionSet"];
  if (this->has_action_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_set_);
  }

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.interface.v202108alpha1.DeviceFilter included_devices = 8[json_name = "includedDevices"];
  if (this->has_included_devices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *included_devices_);
  }

  // .kentik.interface.v202108alpha1.DeviceFilter excluded_devices = 9[json_name = "excludedDevices"];
  if (this->has_excluded_devices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *excluded_devices_);
  }

  // bool enabled = 2[json_name = "enabled"];
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 rank = 3[json_name = "rank"];
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.interface.v202108alpha1.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const Rule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.interface.v202108alpha1.Rule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.interface.v202108alpha1.Rule)
    MergeFrom(*source);
  }
}

void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.interface.v202108alpha1.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_match_clause()) {
    _internal_mutable_match_clause()->::kentik::interface::v202108alpha1::Match::MergeFrom(from._internal_match_clause());
  }
  if (from.has_action_set()) {
    _internal_mutable_action_set()->::kentik::interface::v202108alpha1::Action::MergeFrom(from._internal_action_set());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.has_included_devices()) {
    _internal_mutable_included_devices()->::kentik::interface::v202108alpha1::DeviceFilter::MergeFrom(from._internal_included_devices());
  }
  if (from.has_excluded_devices()) {
    _internal_mutable_excluded_devices()->::kentik::interface::v202108alpha1::DeviceFilter::MergeFrom(from._internal_excluded_devices());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void Rule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.interface.v202108alpha1.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.interface.v202108alpha1.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  return true;
}

void Rule::InternalSwap(Rule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rule, rank_)
      + sizeof(Rule::rank_)
      - PROTOBUF_FIELD_OFFSET(Rule, match_clause_)>(
          reinterpret_cast<char*>(&match_clause_),
          reinterpret_cast<char*>(&other->match_clause_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rule::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202108alpha1
}  // namespace interface
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::Interface* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::InterfaceClassification* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::InterfaceClassification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::InterfaceClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::ClassifyCounter* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::ClassifyCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::ClassifyCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::DeviceClassifyInfo* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::DeviceClassifyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::DeviceClassifyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::InterfaceFilter* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::InterfaceFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::InterfaceFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::AutoClassifyRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::AutoClassifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::AutoClassifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::AutoClassifyResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::AutoClassifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::AutoClassifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::ManualClassifyRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::ManualClassifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::ManualClassifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::ManualClassifyResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::ManualClassifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::ManualClassifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::ListInterfaceRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::ListInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::ListInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::ListInterfaceResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::ListInterfaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::ListInterfaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::GetInterfaceRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::GetInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::GetInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::GetInterfaceResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::GetInterfaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::GetInterfaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::CreateInterfaceRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::CreateInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::CreateInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::CreateInterfaceResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::CreateInterfaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::CreateInterfaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::UpdateInterfaceRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::UpdateInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::UpdateInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::UpdateInterfaceResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::UpdateInterfaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::UpdateInterfaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::DeleteInterfaceRequest* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::DeleteInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::DeleteInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::DeleteInterfaceResponse* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::DeleteInterfaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::DeleteInterfaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::Match* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::Match >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::Action* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::DeviceFilter* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::DeviceFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::DeviceFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::interface::v202108alpha1::Rule* Arena::CreateMaybeMessage< ::kentik::interface::v202108alpha1::Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::interface::v202108alpha1::Rule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
