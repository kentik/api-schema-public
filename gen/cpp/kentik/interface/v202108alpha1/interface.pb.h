// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/interface/v202108alpha1/interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2finterface_2fv202108alpha1_2finterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2finterface_2fv202108alpha1_2finterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202012alpha1/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2finterface_2fv202108alpha1_2finterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
namespace kentik {
namespace interface {
namespace v202108alpha1 {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AutoClassifyRequest;
class AutoClassifyRequestDefaultTypeInternal;
extern AutoClassifyRequestDefaultTypeInternal _AutoClassifyRequest_default_instance_;
class AutoClassifyResponse;
class AutoClassifyResponseDefaultTypeInternal;
extern AutoClassifyResponseDefaultTypeInternal _AutoClassifyResponse_default_instance_;
class ClassifyCounter;
class ClassifyCounterDefaultTypeInternal;
extern ClassifyCounterDefaultTypeInternal _ClassifyCounter_default_instance_;
class CreateInterfaceRequest;
class CreateInterfaceRequestDefaultTypeInternal;
extern CreateInterfaceRequestDefaultTypeInternal _CreateInterfaceRequest_default_instance_;
class CreateInterfaceResponse;
class CreateInterfaceResponseDefaultTypeInternal;
extern CreateInterfaceResponseDefaultTypeInternal _CreateInterfaceResponse_default_instance_;
class DeleteInterfaceRequest;
class DeleteInterfaceRequestDefaultTypeInternal;
extern DeleteInterfaceRequestDefaultTypeInternal _DeleteInterfaceRequest_default_instance_;
class DeleteInterfaceResponse;
class DeleteInterfaceResponseDefaultTypeInternal;
extern DeleteInterfaceResponseDefaultTypeInternal _DeleteInterfaceResponse_default_instance_;
class DeviceClassifyInfo;
class DeviceClassifyInfoDefaultTypeInternal;
extern DeviceClassifyInfoDefaultTypeInternal _DeviceClassifyInfo_default_instance_;
class DeviceFilter;
class DeviceFilterDefaultTypeInternal;
extern DeviceFilterDefaultTypeInternal _DeviceFilter_default_instance_;
class GetInterfaceRequest;
class GetInterfaceRequestDefaultTypeInternal;
extern GetInterfaceRequestDefaultTypeInternal _GetInterfaceRequest_default_instance_;
class GetInterfaceResponse;
class GetInterfaceResponseDefaultTypeInternal;
extern GetInterfaceResponseDefaultTypeInternal _GetInterfaceResponse_default_instance_;
class Interface;
class InterfaceDefaultTypeInternal;
extern InterfaceDefaultTypeInternal _Interface_default_instance_;
class InterfaceClassification;
class InterfaceClassificationDefaultTypeInternal;
extern InterfaceClassificationDefaultTypeInternal _InterfaceClassification_default_instance_;
class InterfaceClassifyInfo;
class InterfaceClassifyInfoDefaultTypeInternal;
extern InterfaceClassifyInfoDefaultTypeInternal _InterfaceClassifyInfo_default_instance_;
class InterfaceFilter;
class InterfaceFilterDefaultTypeInternal;
extern InterfaceFilterDefaultTypeInternal _InterfaceFilter_default_instance_;
class ListInterfaceRequest;
class ListInterfaceRequestDefaultTypeInternal;
extern ListInterfaceRequestDefaultTypeInternal _ListInterfaceRequest_default_instance_;
class ListInterfaceResponse;
class ListInterfaceResponseDefaultTypeInternal;
extern ListInterfaceResponseDefaultTypeInternal _ListInterfaceResponse_default_instance_;
class ManualClassifyRequest;
class ManualClassifyRequestDefaultTypeInternal;
extern ManualClassifyRequestDefaultTypeInternal _ManualClassifyRequest_default_instance_;
class ManualClassifyResponse;
class ManualClassifyResponseDefaultTypeInternal;
extern ManualClassifyResponseDefaultTypeInternal _ManualClassifyResponse_default_instance_;
class Match;
class MatchDefaultTypeInternal;
extern MatchDefaultTypeInternal _Match_default_instance_;
class Rule;
class RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class UpdateInterfaceRequest;
class UpdateInterfaceRequestDefaultTypeInternal;
extern UpdateInterfaceRequestDefaultTypeInternal _UpdateInterfaceRequest_default_instance_;
class UpdateInterfaceResponse;
class UpdateInterfaceResponseDefaultTypeInternal;
extern UpdateInterfaceResponseDefaultTypeInternal _UpdateInterfaceResponse_default_instance_;
}  // namespace v202108alpha1
}  // namespace interface
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::interface::v202108alpha1::Action* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::Action>(Arena*);
template<> ::kentik::interface::v202108alpha1::AutoClassifyRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::AutoClassifyRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::AutoClassifyResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::AutoClassifyResponse>(Arena*);
template<> ::kentik::interface::v202108alpha1::ClassifyCounter* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::ClassifyCounter>(Arena*);
template<> ::kentik::interface::v202108alpha1::CreateInterfaceRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::CreateInterfaceRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::CreateInterfaceResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::CreateInterfaceResponse>(Arena*);
template<> ::kentik::interface::v202108alpha1::DeleteInterfaceRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::DeleteInterfaceRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::DeleteInterfaceResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::DeleteInterfaceResponse>(Arena*);
template<> ::kentik::interface::v202108alpha1::DeviceClassifyInfo* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::DeviceClassifyInfo>(Arena*);
template<> ::kentik::interface::v202108alpha1::DeviceFilter* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::DeviceFilter>(Arena*);
template<> ::kentik::interface::v202108alpha1::GetInterfaceRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::GetInterfaceRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::GetInterfaceResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::GetInterfaceResponse>(Arena*);
template<> ::kentik::interface::v202108alpha1::Interface* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::Interface>(Arena*);
template<> ::kentik::interface::v202108alpha1::InterfaceClassification* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::InterfaceClassification>(Arena*);
template<> ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::InterfaceClassifyInfo>(Arena*);
template<> ::kentik::interface::v202108alpha1::InterfaceFilter* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::InterfaceFilter>(Arena*);
template<> ::kentik::interface::v202108alpha1::ListInterfaceRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::ListInterfaceRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::ListInterfaceResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::ListInterfaceResponse>(Arena*);
template<> ::kentik::interface::v202108alpha1::ManualClassifyRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::ManualClassifyRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::ManualClassifyResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::ManualClassifyResponse>(Arena*);
template<> ::kentik::interface::v202108alpha1::Match* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::Match>(Arena*);
template<> ::kentik::interface::v202108alpha1::Rule* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::Rule>(Arena*);
template<> ::kentik::interface::v202108alpha1::UpdateInterfaceRequest* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::UpdateInterfaceRequest>(Arena*);
template<> ::kentik::interface::v202108alpha1::UpdateInterfaceResponse* Arena::CreateMaybeMessage<::kentik::interface::v202108alpha1::UpdateInterfaceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace interface {
namespace v202108alpha1 {

enum ConnectivityType : int {
  CONNECTIVITY_TYPE_UNSPECIFIED = 0,
  CONNECTIVITY_TYPE_AGGREGATION_INTERCONNECT = 1,
  CONNECTIVITY_TYPE_AVAILABLE = 2,
  CONNECTIVITY_TYPE_BACKBONE = 3,
  CONNECTIVITY_TYPE_CLOUD_INTERCONNECT = 4,
  CONNECTIVITY_TYPE_CUSTOMER = 5,
  CONNECTIVITY_TYPE_DATACENTER_FABRIC = 6,
  CONNECTIVITY_TYPE_DATACENTER_INTERCONNECT = 7,
  CONNECTIVITY_TYPE_EMBEDDED_CACHE = 8,
  CONNECTIVITY_TYPE_FREE_PNI = 9,
  CONNECTIVITY_TYPE_HOST = 10,
  CONNECTIVITY_TYPE_IX = 11,
  CONNECTIVITY_TYPE_OTHER = 12,
  CONNECTIVITY_TYPE_PAID_PNI = 13,
  CONNECTIVITY_TYPE_RESERVED = 14,
  CONNECTIVITY_TYPE_TRANSIT = 15,
  CONNECTIVITY_TYPE_VIRTUAL_CROSS_CONNECT = 16,
  ConnectivityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectivityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectivityType_IsValid(int value);
constexpr ConnectivityType ConnectivityType_MIN = CONNECTIVITY_TYPE_UNSPECIFIED;
constexpr ConnectivityType ConnectivityType_MAX = CONNECTIVITY_TYPE_VIRTUAL_CROSS_CONNECT;
constexpr int ConnectivityType_ARRAYSIZE = ConnectivityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectivityType_descriptor();
template<typename T>
inline const std::string& ConnectivityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectivityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectivityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectivityType_descriptor(), enum_t_value);
}
inline bool ConnectivityType_Parse(
    const std::string& name, ConnectivityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectivityType>(
    ConnectivityType_descriptor(), name, value);
}
enum NetworkBoundary : int {
  NETWORK_BOUNDARY_UNSPECIFIED = 0,
  NETWORK_BOUNDARY_AUTO = 1,
  NETWORK_BOUNDARY_INTERNAL = 2,
  NETWORK_BOUNDARY_EXTERNAL = 3,
  NETWORK_BOUNDARY_NONE = 4,
  NetworkBoundary_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetworkBoundary_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetworkBoundary_IsValid(int value);
constexpr NetworkBoundary NetworkBoundary_MIN = NETWORK_BOUNDARY_UNSPECIFIED;
constexpr NetworkBoundary NetworkBoundary_MAX = NETWORK_BOUNDARY_NONE;
constexpr int NetworkBoundary_ARRAYSIZE = NetworkBoundary_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkBoundary_descriptor();
template<typename T>
inline const std::string& NetworkBoundary_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkBoundary>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkBoundary_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkBoundary_descriptor(), enum_t_value);
}
inline bool NetworkBoundary_Parse(
    const std::string& name, NetworkBoundary* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkBoundary>(
    NetworkBoundary_descriptor(), name, value);
}
enum IpFilter : int {
  IP_FILTER_UNSPECIFIED = 0,
  IP_FILTER_PRIVATE = 1,
  IP_FILTER_PUBLIC = 2,
  IP_FILTER_UNSET = 3,
  IpFilter_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IpFilter_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IpFilter_IsValid(int value);
constexpr IpFilter IpFilter_MIN = IP_FILTER_UNSPECIFIED;
constexpr IpFilter IpFilter_MAX = IP_FILTER_UNSET;
constexpr int IpFilter_ARRAYSIZE = IpFilter_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpFilter_descriptor();
template<typename T>
inline const std::string& IpFilter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IpFilter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IpFilter_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IpFilter_descriptor(), enum_t_value);
}
inline bool IpFilter_Parse(
    const std::string& name, IpFilter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IpFilter>(
    IpFilter_descriptor(), name, value);
}
enum MatchAttribute : int {
  MATCH_ATTRIBUTE_UNSPECIFIED = 0,
  MATCH_ATTRIBUTE_INTERFACE_DESCRIPTION = 1,
  MATCH_ATTRIBUTE_SNMP_ALIAS = 2,
  MATCH_ATTRIBUTE_INTERFACE_IP = 3,
  MatchAttribute_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MatchAttribute_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MatchAttribute_IsValid(int value);
constexpr MatchAttribute MatchAttribute_MIN = MATCH_ATTRIBUTE_UNSPECIFIED;
constexpr MatchAttribute MatchAttribute_MAX = MATCH_ATTRIBUTE_INTERFACE_IP;
constexpr int MatchAttribute_ARRAYSIZE = MatchAttribute_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchAttribute_descriptor();
template<typename T>
inline const std::string& MatchAttribute_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchAttribute>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchAttribute_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchAttribute_descriptor(), enum_t_value);
}
inline bool MatchAttribute_Parse(
    const std::string& name, MatchAttribute* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchAttribute>(
    MatchAttribute_descriptor(), name, value);
}
enum Operator : int {
  OPERATOR_UNSPECIFIED = 0,
  OPERATOR_EQUALS = 1,
  OPERATOR_CONTAINS = 2,
  OPERATOR_REGEX = 3,
  OPERATOR_CONTAINED_IN_SUBNET = 4,
  OPERATOR_IS_PUBLIC_IP = 5,
  OPERATOR_IS_PRIVATE_IP = 6,
  OPERATOR_NO_IP = 7,
  Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Operator_IsValid(int value);
constexpr Operator Operator_MIN = OPERATOR_UNSPECIFIED;
constexpr Operator Operator_MAX = OPERATOR_NO_IP;
constexpr int Operator_ARRAYSIZE = Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor();
template<typename T>
inline const std::string& Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operator_descriptor(), enum_t_value);
}
inline bool Operator_Parse(
    const std::string& name, Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operator>(
    Operator_descriptor(), name, value);
}
// ===================================================================

class Interface PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.Interface) */ {
 public:
  inline Interface() : Interface(nullptr) {};
  virtual ~Interface();

  Interface(const Interface& from);
  Interface(Interface&& from) noexcept
    : Interface() {
    *this = ::std::move(from);
  }

  inline Interface& operator=(const Interface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface& operator=(Interface&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Interface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interface* internal_default_instance() {
    return reinterpret_cast<const Interface*>(
               &_Interface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Interface& a, Interface& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interface* New() const final {
    return CreateMaybeMessage<Interface>(nullptr);
  }

  Interface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interface& from);
  void MergeFrom(const Interface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.Interface";
  }
  protected:
  explicit Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopNexthopAsnsFieldNumber = 14,
    kIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kSnmpIdFieldNumber = 3,
    kSnmpAliasFieldNumber = 6,
    kInterfaceIpFieldNumber = 7,
    kInterfaceDescriptionFieldNumber = 8,
    kInterfaceIpNetmaskFieldNumber = 11,
    kProviderFieldNumber = 15,
    kCdateFieldNumber = 9,
    kEdateFieldNumber = 10,
    kSnmpSpeedFieldNumber = 4,
    kSnmpTypeFieldNumber = 5,
    kConnectivityTypeFieldNumber = 12,
    kNetworkBoundaryFieldNumber = 13,
  };
  // repeated int32 top_nexthop_asns = 14[json_name = "topNexthopAsns"];
  int top_nexthop_asns_size() const;
  private:
  int _internal_top_nexthop_asns_size() const;
  public:
  void clear_top_nexthop_asns();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_nexthop_asns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_top_nexthop_asns() const;
  void _internal_add_top_nexthop_asns(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_top_nexthop_asns();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 top_nexthop_asns(int index) const;
  void set_top_nexthop_asns(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_top_nexthop_asns(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      top_nexthop_asns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_top_nexthop_asns();

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string device_id = 2[json_name = "deviceId"];
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string snmp_id = 3[json_name = "snmpId"];
  void clear_snmp_id();
  const std::string& snmp_id() const;
  void set_snmp_id(const std::string& value);
  void set_snmp_id(std::string&& value);
  void set_snmp_id(const char* value);
  void set_snmp_id(const char* value, size_t size);
  std::string* mutable_snmp_id();
  std::string* release_snmp_id();
  void set_allocated_snmp_id(std::string* snmp_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_id(
      std::string* snmp_id);
  private:
  const std::string& _internal_snmp_id() const;
  void _internal_set_snmp_id(const std::string& value);
  std::string* _internal_mutable_snmp_id();
  public:

  // string snmp_alias = 6[json_name = "snmpAlias"];
  void clear_snmp_alias();
  const std::string& snmp_alias() const;
  void set_snmp_alias(const std::string& value);
  void set_snmp_alias(std::string&& value);
  void set_snmp_alias(const char* value);
  void set_snmp_alias(const char* value, size_t size);
  std::string* mutable_snmp_alias();
  std::string* release_snmp_alias();
  void set_allocated_snmp_alias(std::string* snmp_alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_alias(
      std::string* snmp_alias);
  private:
  const std::string& _internal_snmp_alias() const;
  void _internal_set_snmp_alias(const std::string& value);
  std::string* _internal_mutable_snmp_alias();
  public:

  // string interface_ip = 7[json_name = "interfaceIp"];
  void clear_interface_ip();
  const std::string& interface_ip() const;
  void set_interface_ip(const std::string& value);
  void set_interface_ip(std::string&& value);
  void set_interface_ip(const char* value);
  void set_interface_ip(const char* value, size_t size);
  std::string* mutable_interface_ip();
  std::string* release_interface_ip();
  void set_allocated_interface_ip(std::string* interface_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_ip(
      std::string* interface_ip);
  private:
  const std::string& _internal_interface_ip() const;
  void _internal_set_interface_ip(const std::string& value);
  std::string* _internal_mutable_interface_ip();
  public:

  // string interface_description = 8[json_name = "interfaceDescription"];
  void clear_interface_description();
  const std::string& interface_description() const;
  void set_interface_description(const std::string& value);
  void set_interface_description(std::string&& value);
  void set_interface_description(const char* value);
  void set_interface_description(const char* value, size_t size);
  std::string* mutable_interface_description();
  std::string* release_interface_description();
  void set_allocated_interface_description(std::string* interface_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_description(
      std::string* interface_description);
  private:
  const std::string& _internal_interface_description() const;
  void _internal_set_interface_description(const std::string& value);
  std::string* _internal_mutable_interface_description();
  public:

  // string interface_ip_netmask = 11[json_name = "interfaceIpNetmask"];
  void clear_interface_ip_netmask();
  const std::string& interface_ip_netmask() const;
  void set_interface_ip_netmask(const std::string& value);
  void set_interface_ip_netmask(std::string&& value);
  void set_interface_ip_netmask(const char* value);
  void set_interface_ip_netmask(const char* value, size_t size);
  std::string* mutable_interface_ip_netmask();
  std::string* release_interface_ip_netmask();
  void set_allocated_interface_ip_netmask(std::string* interface_ip_netmask);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_ip_netmask();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_ip_netmask(
      std::string* interface_ip_netmask);
  private:
  const std::string& _internal_interface_ip_netmask() const;
  void _internal_set_interface_ip_netmask(const std::string& value);
  std::string* _internal_mutable_interface_ip_netmask();
  public:

  // string provider = 15[json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_provider(
      std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // .google.protobuf.Timestamp cdate = 9[json_name = "cdate"];
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 10[json_name = "edate"];
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // int32 snmp_speed = 4[json_name = "snmpSpeed"];
  void clear_snmp_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 snmp_speed() const;
  void set_snmp_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_snmp_speed() const;
  void _internal_set_snmp_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 snmp_type = 5[json_name = "snmpType"];
  void clear_snmp_type();
  ::PROTOBUF_NAMESPACE_ID::int32 snmp_type() const;
  void set_snmp_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_snmp_type() const;
  void _internal_set_snmp_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 12[json_name = "connectivityType"];
  void clear_connectivity_type();
  ::kentik::interface::v202108alpha1::ConnectivityType connectivity_type() const;
  void set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  private:
  ::kentik::interface::v202108alpha1::ConnectivityType _internal_connectivity_type() const;
  void _internal_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  public:

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 13[json_name = "networkBoundary"];
  void clear_network_boundary();
  ::kentik::interface::v202108alpha1::NetworkBoundary network_boundary() const;
  void set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  private:
  ::kentik::interface::v202108alpha1::NetworkBoundary _internal_network_boundary() const;
  void _internal_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.Interface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > top_nexthop_asns_;
  mutable std::atomic<int> _top_nexthop_asns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_ip_netmask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::PROTOBUF_NAMESPACE_ID::int32 snmp_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 snmp_type_;
  int connectivity_type_;
  int network_boundary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class InterfaceClassification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.InterfaceClassification) */ {
 public:
  inline InterfaceClassification() : InterfaceClassification(nullptr) {};
  virtual ~InterfaceClassification();

  InterfaceClassification(const InterfaceClassification& from);
  InterfaceClassification(InterfaceClassification&& from) noexcept
    : InterfaceClassification() {
    *this = ::std::move(from);
  }

  inline InterfaceClassification& operator=(const InterfaceClassification& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceClassification& operator=(InterfaceClassification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceClassification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceClassification* internal_default_instance() {
    return reinterpret_cast<const InterfaceClassification*>(
               &_InterfaceClassification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InterfaceClassification& a, InterfaceClassification& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceClassification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceClassification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceClassification* New() const final {
    return CreateMaybeMessage<InterfaceClassification>(nullptr);
  }

  InterfaceClassification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceClassification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceClassification& from);
  void MergeFrom(const InterfaceClassification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceClassification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.InterfaceClassification";
  }
  protected:
  explicit InterfaceClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassifiedFieldNumber = 1,
    kConnectivityTypeFieldNumber = 2,
    kNetworkBoundaryFieldNumber = 3,
  };
  // bool classified = 1[json_name = "classified"];
  void clear_classified();
  bool classified() const;
  void set_classified(bool value);
  private:
  bool _internal_classified() const;
  void _internal_set_classified(bool value);
  public:

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
  void clear_connectivity_type();
  ::kentik::interface::v202108alpha1::ConnectivityType connectivity_type() const;
  void set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  private:
  ::kentik::interface::v202108alpha1::ConnectivityType _internal_connectivity_type() const;
  void _internal_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  public:

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
  void clear_network_boundary();
  ::kentik::interface::v202108alpha1::NetworkBoundary network_boundary() const;
  void set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  private:
  ::kentik::interface::v202108alpha1::NetworkBoundary _internal_network_boundary() const;
  void _internal_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.InterfaceClassification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool classified_;
  int connectivity_type_;
  int network_boundary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ClassifyCounter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.ClassifyCounter) */ {
 public:
  inline ClassifyCounter() : ClassifyCounter(nullptr) {};
  virtual ~ClassifyCounter();

  ClassifyCounter(const ClassifyCounter& from);
  ClassifyCounter(ClassifyCounter&& from) noexcept
    : ClassifyCounter() {
    *this = ::std::move(from);
  }

  inline ClassifyCounter& operator=(const ClassifyCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassifyCounter& operator=(ClassifyCounter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassifyCounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassifyCounter* internal_default_instance() {
    return reinterpret_cast<const ClassifyCounter*>(
               &_ClassifyCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClassifyCounter& a, ClassifyCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassifyCounter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassifyCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassifyCounter* New() const final {
    return CreateMaybeMessage<ClassifyCounter>(nullptr);
  }

  ClassifyCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassifyCounter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassifyCounter& from);
  void MergeFrom(const ClassifyCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassifyCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.ClassifyCounter";
  }
  protected:
  explicit ClassifyCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kExternalCountFieldNumber = 2,
    kFreePniCountFieldNumber = 3,
    kIxCountFieldNumber = 4,
    kProviderCountFieldNumber = 5,
    kTransitCountFieldNumber = 6,
  };
  // int32 count = 1[json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 external_count = 2[json_name = "externalCount"];
  void clear_external_count();
  ::PROTOBUF_NAMESPACE_ID::int32 external_count() const;
  void set_external_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_external_count() const;
  void _internal_set_external_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_pni_count = 3[json_name = "freePniCount"];
  void clear_free_pni_count();
  ::PROTOBUF_NAMESPACE_ID::int32 free_pni_count() const;
  void set_free_pni_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_pni_count() const;
  void _internal_set_free_pni_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ix_count = 4[json_name = "ixCount"];
  void clear_ix_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ix_count() const;
  void set_ix_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ix_count() const;
  void _internal_set_ix_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 provider_count = 5[json_name = "providerCount"];
  void clear_provider_count();
  ::PROTOBUF_NAMESPACE_ID::int32 provider_count() const;
  void set_provider_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_provider_count() const;
  void _internal_set_provider_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transit_count = 6[json_name = "transitCount"];
  void clear_transit_count();
  ::PROTOBUF_NAMESPACE_ID::int32 transit_count() const;
  void set_transit_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transit_count() const;
  void _internal_set_transit_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.ClassifyCounter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 external_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_pni_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ix_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 provider_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 transit_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class InterfaceClassifyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.InterfaceClassifyInfo) */ {
 public:
  inline InterfaceClassifyInfo() : InterfaceClassifyInfo(nullptr) {};
  virtual ~InterfaceClassifyInfo();

  InterfaceClassifyInfo(const InterfaceClassifyInfo& from);
  InterfaceClassifyInfo(InterfaceClassifyInfo&& from) noexcept
    : InterfaceClassifyInfo() {
    *this = ::std::move(from);
  }

  inline InterfaceClassifyInfo& operator=(const InterfaceClassifyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceClassifyInfo& operator=(InterfaceClassifyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceClassifyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceClassifyInfo* internal_default_instance() {
    return reinterpret_cast<const InterfaceClassifyInfo*>(
               &_InterfaceClassifyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InterfaceClassifyInfo& a, InterfaceClassifyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceClassifyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceClassifyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceClassifyInfo* New() const final {
    return CreateMaybeMessage<InterfaceClassifyInfo>(nullptr);
  }

  InterfaceClassifyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceClassifyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceClassifyInfo& from);
  void MergeFrom(const InterfaceClassifyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceClassifyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.InterfaceClassifyInfo";
  }
  protected:
  explicit InterfaceClassifyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopNexthopAsnsFieldNumber = 8,
    kDeviceIdFieldNumber = 1,
    kSnmpIdFieldNumber = 2,
    kSnmpAliasFieldNumber = 3,
    kInterfaceIpFieldNumber = 4,
    kInterfaceIpAsnFieldNumber = 5,
    kPdbGlobalNameFieldNumber = 9,
    kProviderFieldNumber = 12,
    kPreviouslyClassifiedProviderFieldNumber = 17,
    kAutoClassificationFieldNumber = 10,
    kPreviousClassificationFieldNumber = 11,
    kIsInternalIpFieldNumber = 6,
    kIsInternalAsnFieldNumber = 7,
    kAutoClassifiedProviderFieldNumber = 16,
    kPreviouslyClassifiedExternalFieldNumber = 18,
    kNetworkBoundaryConfidenceFieldNumber = 13,
    kConnectivityTypeConfidenceFieldNumber = 14,
    kProviderConfidenceFieldNumber = 15,
    kIpAsnMatchedFieldNumber = 19,
    kIxMatchedFieldNumber = 20,
    kNexthopMatchedFieldNumber = 21,
    kConnectivityTypeMatchedFieldNumber = 22,
    kProviderMatchedFieldNumber = 23,
    kChangedClassificationFieldNumber = 24,
  };
  // repeated string top_nexthop_asns = 8[json_name = "topNexthopAsns"];
  int top_nexthop_asns_size() const;
  private:
  int _internal_top_nexthop_asns_size() const;
  public:
  void clear_top_nexthop_asns();
  const std::string& top_nexthop_asns(int index) const;
  std::string* mutable_top_nexthop_asns(int index);
  void set_top_nexthop_asns(int index, const std::string& value);
  void set_top_nexthop_asns(int index, std::string&& value);
  void set_top_nexthop_asns(int index, const char* value);
  void set_top_nexthop_asns(int index, const char* value, size_t size);
  std::string* add_top_nexthop_asns();
  void add_top_nexthop_asns(const std::string& value);
  void add_top_nexthop_asns(std::string&& value);
  void add_top_nexthop_asns(const char* value);
  void add_top_nexthop_asns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& top_nexthop_asns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_top_nexthop_asns();
  private:
  const std::string& _internal_top_nexthop_asns(int index) const;
  std::string* _internal_add_top_nexthop_asns();
  public:

  // string device_id = 1[json_name = "deviceId"];
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string snmp_id = 2[json_name = "snmpId"];
  void clear_snmp_id();
  const std::string& snmp_id() const;
  void set_snmp_id(const std::string& value);
  void set_snmp_id(std::string&& value);
  void set_snmp_id(const char* value);
  void set_snmp_id(const char* value, size_t size);
  std::string* mutable_snmp_id();
  std::string* release_snmp_id();
  void set_allocated_snmp_id(std::string* snmp_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_id(
      std::string* snmp_id);
  private:
  const std::string& _internal_snmp_id() const;
  void _internal_set_snmp_id(const std::string& value);
  std::string* _internal_mutable_snmp_id();
  public:

  // string snmp_alias = 3[json_name = "snmpAlias"];
  void clear_snmp_alias();
  const std::string& snmp_alias() const;
  void set_snmp_alias(const std::string& value);
  void set_snmp_alias(std::string&& value);
  void set_snmp_alias(const char* value);
  void set_snmp_alias(const char* value, size_t size);
  std::string* mutable_snmp_alias();
  std::string* release_snmp_alias();
  void set_allocated_snmp_alias(std::string* snmp_alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_alias(
      std::string* snmp_alias);
  private:
  const std::string& _internal_snmp_alias() const;
  void _internal_set_snmp_alias(const std::string& value);
  std::string* _internal_mutable_snmp_alias();
  public:

  // string interface_ip = 4[json_name = "interfaceIp"];
  void clear_interface_ip();
  const std::string& interface_ip() const;
  void set_interface_ip(const std::string& value);
  void set_interface_ip(std::string&& value);
  void set_interface_ip(const char* value);
  void set_interface_ip(const char* value, size_t size);
  std::string* mutable_interface_ip();
  std::string* release_interface_ip();
  void set_allocated_interface_ip(std::string* interface_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_ip(
      std::string* interface_ip);
  private:
  const std::string& _internal_interface_ip() const;
  void _internal_set_interface_ip(const std::string& value);
  std::string* _internal_mutable_interface_ip();
  public:

  // string interface_ip_asn = 5[json_name = "interfaceIpAsn"];
  void clear_interface_ip_asn();
  const std::string& interface_ip_asn() const;
  void set_interface_ip_asn(const std::string& value);
  void set_interface_ip_asn(std::string&& value);
  void set_interface_ip_asn(const char* value);
  void set_interface_ip_asn(const char* value, size_t size);
  std::string* mutable_interface_ip_asn();
  std::string* release_interface_ip_asn();
  void set_allocated_interface_ip_asn(std::string* interface_ip_asn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_ip_asn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_ip_asn(
      std::string* interface_ip_asn);
  private:
  const std::string& _internal_interface_ip_asn() const;
  void _internal_set_interface_ip_asn(const std::string& value);
  std::string* _internal_mutable_interface_ip_asn();
  public:

  // string pdb_global_name = 9[json_name = "pdbGlobalName"];
  void clear_pdb_global_name();
  const std::string& pdb_global_name() const;
  void set_pdb_global_name(const std::string& value);
  void set_pdb_global_name(std::string&& value);
  void set_pdb_global_name(const char* value);
  void set_pdb_global_name(const char* value, size_t size);
  std::string* mutable_pdb_global_name();
  std::string* release_pdb_global_name();
  void set_allocated_pdb_global_name(std::string* pdb_global_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pdb_global_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pdb_global_name(
      std::string* pdb_global_name);
  private:
  const std::string& _internal_pdb_global_name() const;
  void _internal_set_pdb_global_name(const std::string& value);
  std::string* _internal_mutable_pdb_global_name();
  public:

  // string provider = 12[json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_provider(
      std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // string previously_classified_provider = 17[json_name = "previouslyClassifiedProvider"];
  void clear_previously_classified_provider();
  const std::string& previously_classified_provider() const;
  void set_previously_classified_provider(const std::string& value);
  void set_previously_classified_provider(std::string&& value);
  void set_previously_classified_provider(const char* value);
  void set_previously_classified_provider(const char* value, size_t size);
  std::string* mutable_previously_classified_provider();
  std::string* release_previously_classified_provider();
  void set_allocated_previously_classified_provider(std::string* previously_classified_provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_previously_classified_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_previously_classified_provider(
      std::string* previously_classified_provider);
  private:
  const std::string& _internal_previously_classified_provider() const;
  void _internal_set_previously_classified_provider(const std::string& value);
  std::string* _internal_mutable_previously_classified_provider();
  public:

  // .kentik.interface.v202108alpha1.InterfaceClassification auto_classification = 10[json_name = "autoClassification"];
  bool has_auto_classification() const;
  private:
  bool _internal_has_auto_classification() const;
  public:
  void clear_auto_classification();
  const ::kentik::interface::v202108alpha1::InterfaceClassification& auto_classification() const;
  ::kentik::interface::v202108alpha1::InterfaceClassification* release_auto_classification();
  ::kentik::interface::v202108alpha1::InterfaceClassification* mutable_auto_classification();
  void set_allocated_auto_classification(::kentik::interface::v202108alpha1::InterfaceClassification* auto_classification);
  private:
  const ::kentik::interface::v202108alpha1::InterfaceClassification& _internal_auto_classification() const;
  ::kentik::interface::v202108alpha1::InterfaceClassification* _internal_mutable_auto_classification();
  public:
  void unsafe_arena_set_allocated_auto_classification(
      ::kentik::interface::v202108alpha1::InterfaceClassification* auto_classification);
  ::kentik::interface::v202108alpha1::InterfaceClassification* unsafe_arena_release_auto_classification();

  // .kentik.interface.v202108alpha1.InterfaceClassification previous_classification = 11[json_name = "previousClassification"];
  bool has_previous_classification() const;
  private:
  bool _internal_has_previous_classification() const;
  public:
  void clear_previous_classification();
  const ::kentik::interface::v202108alpha1::InterfaceClassification& previous_classification() const;
  ::kentik::interface::v202108alpha1::InterfaceClassification* release_previous_classification();
  ::kentik::interface::v202108alpha1::InterfaceClassification* mutable_previous_classification();
  void set_allocated_previous_classification(::kentik::interface::v202108alpha1::InterfaceClassification* previous_classification);
  private:
  const ::kentik::interface::v202108alpha1::InterfaceClassification& _internal_previous_classification() const;
  ::kentik::interface::v202108alpha1::InterfaceClassification* _internal_mutable_previous_classification();
  public:
  void unsafe_arena_set_allocated_previous_classification(
      ::kentik::interface::v202108alpha1::InterfaceClassification* previous_classification);
  ::kentik::interface::v202108alpha1::InterfaceClassification* unsafe_arena_release_previous_classification();

  // bool is_internal_ip = 6[json_name = "isInternalIp"];
  void clear_is_internal_ip();
  bool is_internal_ip() const;
  void set_is_internal_ip(bool value);
  private:
  bool _internal_is_internal_ip() const;
  void _internal_set_is_internal_ip(bool value);
  public:

  // bool is_internal_asn = 7[json_name = "isInternalAsn"];
  void clear_is_internal_asn();
  bool is_internal_asn() const;
  void set_is_internal_asn(bool value);
  private:
  bool _internal_is_internal_asn() const;
  void _internal_set_is_internal_asn(bool value);
  public:

  // bool auto_classified_provider = 16[json_name = "autoClassifiedProvider"];
  void clear_auto_classified_provider();
  bool auto_classified_provider() const;
  void set_auto_classified_provider(bool value);
  private:
  bool _internal_auto_classified_provider() const;
  void _internal_set_auto_classified_provider(bool value);
  public:

  // bool previously_classified_external = 18[json_name = "previouslyClassifiedExternal"];
  void clear_previously_classified_external();
  bool previously_classified_external() const;
  void set_previously_classified_external(bool value);
  private:
  bool _internal_previously_classified_external() const;
  void _internal_set_previously_classified_external(bool value);
  public:

  // int32 network_boundary_confidence = 13[json_name = "networkBoundaryConfidence"];
  void clear_network_boundary_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 network_boundary_confidence() const;
  void set_network_boundary_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_network_boundary_confidence() const;
  void _internal_set_network_boundary_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connectivity_type_confidence = 14[json_name = "connectivityTypeConfidence"];
  void clear_connectivity_type_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 connectivity_type_confidence() const;
  void set_connectivity_type_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connectivity_type_confidence() const;
  void _internal_set_connectivity_type_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 provider_confidence = 15[json_name = "providerConfidence"];
  void clear_provider_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 provider_confidence() const;
  void set_provider_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_provider_confidence() const;
  void _internal_set_provider_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool ip_asn_matched = 19[json_name = "ipAsnMatched"];
  void clear_ip_asn_matched();
  bool ip_asn_matched() const;
  void set_ip_asn_matched(bool value);
  private:
  bool _internal_ip_asn_matched() const;
  void _internal_set_ip_asn_matched(bool value);
  public:

  // bool ix_matched = 20[json_name = "ixMatched"];
  void clear_ix_matched();
  bool ix_matched() const;
  void set_ix_matched(bool value);
  private:
  bool _internal_ix_matched() const;
  void _internal_set_ix_matched(bool value);
  public:

  // bool nexthop_matched = 21[json_name = "nexthopMatched"];
  void clear_nexthop_matched();
  bool nexthop_matched() const;
  void set_nexthop_matched(bool value);
  private:
  bool _internal_nexthop_matched() const;
  void _internal_set_nexthop_matched(bool value);
  public:

  // bool connectivity_type_matched = 22[json_name = "connectivityTypeMatched"];
  void clear_connectivity_type_matched();
  bool connectivity_type_matched() const;
  void set_connectivity_type_matched(bool value);
  private:
  bool _internal_connectivity_type_matched() const;
  void _internal_set_connectivity_type_matched(bool value);
  public:

  // bool provider_matched = 23[json_name = "providerMatched"];
  void clear_provider_matched();
  bool provider_matched() const;
  void set_provider_matched(bool value);
  private:
  bool _internal_provider_matched() const;
  void _internal_set_provider_matched(bool value);
  public:

  // bool changed_classification = 24[json_name = "changedClassification"];
  void clear_changed_classification();
  bool changed_classification() const;
  void set_changed_classification(bool value);
  private:
  bool _internal_changed_classification() const;
  void _internal_set_changed_classification(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.InterfaceClassifyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> top_nexthop_asns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_ip_asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pdb_global_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previously_classified_provider_;
  ::kentik::interface::v202108alpha1::InterfaceClassification* auto_classification_;
  ::kentik::interface::v202108alpha1::InterfaceClassification* previous_classification_;
  bool is_internal_ip_;
  bool is_internal_asn_;
  bool auto_classified_provider_;
  bool previously_classified_external_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_boundary_confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 connectivity_type_confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 provider_confidence_;
  bool ip_asn_matched_;
  bool ix_matched_;
  bool nexthop_matched_;
  bool connectivity_type_matched_;
  bool provider_matched_;
  bool changed_classification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class DeviceClassifyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.DeviceClassifyInfo) */ {
 public:
  inline DeviceClassifyInfo() : DeviceClassifyInfo(nullptr) {};
  virtual ~DeviceClassifyInfo();

  DeviceClassifyInfo(const DeviceClassifyInfo& from);
  DeviceClassifyInfo(DeviceClassifyInfo&& from) noexcept
    : DeviceClassifyInfo() {
    *this = ::std::move(from);
  }

  inline DeviceClassifyInfo& operator=(const DeviceClassifyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceClassifyInfo& operator=(DeviceClassifyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceClassifyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceClassifyInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceClassifyInfo*>(
               &_DeviceClassifyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceClassifyInfo& a, DeviceClassifyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceClassifyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceClassifyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceClassifyInfo* New() const final {
    return CreateMaybeMessage<DeviceClassifyInfo>(nullptr);
  }

  DeviceClassifyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceClassifyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceClassifyInfo& from);
  void MergeFrom(const DeviceClassifyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceClassifyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.DeviceClassifyInfo";
  }
  protected:
  explicit DeviceClassifyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 21,
    kDeviceIdFieldNumber = 1,
    kPreviouslyClassifiedCounterFieldNumber = 3,
    kAutoClassifiedCounterFieldNumber = 4,
    kTotalInterfacesFieldNumber = 2,
    kChangedClassificationCountFieldNumber = 15,
    kProviderMatchedCountFieldNumber = 20,
    kIpAsnMatchedCountFieldNumber = 16,
    kIxMatchedCountFieldNumber = 17,
    kNexthopMatchedCountFieldNumber = 18,
    kConnectivityTypeMatchedCountFieldNumber = 19,
  };
  // repeated .kentik.interface.v202108alpha1.InterfaceClassifyInfo interfaces = 21[json_name = "interfaces"];
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo >*
      mutable_interfaces();
  private:
  const ::kentik::interface::v202108alpha1::InterfaceClassifyInfo& _internal_interfaces(int index) const;
  ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* _internal_add_interfaces();
  public:
  const ::kentik::interface::v202108alpha1::InterfaceClassifyInfo& interfaces(int index) const;
  ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo >&
      interfaces() const;

  // string device_id = 1[json_name = "deviceId"];
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .kentik.interface.v202108alpha1.ClassifyCounter previously_classified_counter = 3[json_name = "previouslyClassifiedCounter"];
  bool has_previously_classified_counter() const;
  private:
  bool _internal_has_previously_classified_counter() const;
  public:
  void clear_previously_classified_counter();
  const ::kentik::interface::v202108alpha1::ClassifyCounter& previously_classified_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* release_previously_classified_counter();
  ::kentik::interface::v202108alpha1::ClassifyCounter* mutable_previously_classified_counter();
  void set_allocated_previously_classified_counter(::kentik::interface::v202108alpha1::ClassifyCounter* previously_classified_counter);
  private:
  const ::kentik::interface::v202108alpha1::ClassifyCounter& _internal_previously_classified_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* _internal_mutable_previously_classified_counter();
  public:
  void unsafe_arena_set_allocated_previously_classified_counter(
      ::kentik::interface::v202108alpha1::ClassifyCounter* previously_classified_counter);
  ::kentik::interface::v202108alpha1::ClassifyCounter* unsafe_arena_release_previously_classified_counter();

  // .kentik.interface.v202108alpha1.ClassifyCounter auto_classified_counter = 4[json_name = "autoClassifiedCounter"];
  bool has_auto_classified_counter() const;
  private:
  bool _internal_has_auto_classified_counter() const;
  public:
  void clear_auto_classified_counter();
  const ::kentik::interface::v202108alpha1::ClassifyCounter& auto_classified_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* release_auto_classified_counter();
  ::kentik::interface::v202108alpha1::ClassifyCounter* mutable_auto_classified_counter();
  void set_allocated_auto_classified_counter(::kentik::interface::v202108alpha1::ClassifyCounter* auto_classified_counter);
  private:
  const ::kentik::interface::v202108alpha1::ClassifyCounter& _internal_auto_classified_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* _internal_mutable_auto_classified_counter();
  public:
  void unsafe_arena_set_allocated_auto_classified_counter(
      ::kentik::interface::v202108alpha1::ClassifyCounter* auto_classified_counter);
  ::kentik::interface::v202108alpha1::ClassifyCounter* unsafe_arena_release_auto_classified_counter();

  // int32 total_interfaces = 2[json_name = "totalInterfaces"];
  void clear_total_interfaces();
  ::PROTOBUF_NAMESPACE_ID::int32 total_interfaces() const;
  void set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_interfaces() const;
  void _internal_set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 changed_classification_count = 15[json_name = "changedClassificationCount"];
  void clear_changed_classification_count();
  ::PROTOBUF_NAMESPACE_ID::int32 changed_classification_count() const;
  void set_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changed_classification_count() const;
  void _internal_set_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 provider_matched_count = 20[json_name = "providerMatchedCount"];
  void clear_provider_matched_count();
  ::PROTOBUF_NAMESPACE_ID::int32 provider_matched_count() const;
  void set_provider_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_provider_matched_count() const;
  void _internal_set_provider_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ip_asn_matched_count = 16[json_name = "ipAsnMatchedCount"];
  void clear_ip_asn_matched_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ip_asn_matched_count() const;
  void set_ip_asn_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip_asn_matched_count() const;
  void _internal_set_ip_asn_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ix_matched_count = 17[json_name = "ixMatchedCount"];
  void clear_ix_matched_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ix_matched_count() const;
  void set_ix_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ix_matched_count() const;
  void _internal_set_ix_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nexthop_matched_count = 18[json_name = "nexthopMatchedCount"];
  void clear_nexthop_matched_count();
  ::PROTOBUF_NAMESPACE_ID::int32 nexthop_matched_count() const;
  void set_nexthop_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nexthop_matched_count() const;
  void _internal_set_nexthop_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connectivity_type_matched_count = 19[json_name = "connectivityTypeMatchedCount"];
  void clear_connectivity_type_matched_count();
  ::PROTOBUF_NAMESPACE_ID::int32 connectivity_type_matched_count() const;
  void set_connectivity_type_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connectivity_type_matched_count() const;
  void _internal_set_connectivity_type_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.DeviceClassifyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo > interfaces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::kentik::interface::v202108alpha1::ClassifyCounter* previously_classified_counter_;
  ::kentik::interface::v202108alpha1::ClassifyCounter* auto_classified_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_interfaces_;
  ::PROTOBUF_NAMESPACE_ID::int32 changed_classification_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 provider_matched_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_asn_matched_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ix_matched_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 nexthop_matched_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 connectivity_type_matched_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class InterfaceFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.InterfaceFilter) */ {
 public:
  inline InterfaceFilter() : InterfaceFilter(nullptr) {};
  virtual ~InterfaceFilter();

  InterfaceFilter(const InterfaceFilter& from);
  InterfaceFilter(InterfaceFilter&& from) noexcept
    : InterfaceFilter() {
    *this = ::std::move(from);
  }

  inline InterfaceFilter& operator=(const InterfaceFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceFilter& operator=(InterfaceFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceFilter* internal_default_instance() {
    return reinterpret_cast<const InterfaceFilter*>(
               &_InterfaceFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InterfaceFilter& a, InterfaceFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceFilter* New() const final {
    return CreateMaybeMessage<InterfaceFilter>(nullptr);
  }

  InterfaceFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceFilter& from);
  void MergeFrom(const InterfaceFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.InterfaceFilter";
  }
  protected:
  explicit InterfaceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdsFieldNumber = 2,
    kConnectivityTypesFieldNumber = 3,
    kNetworkBoundariesFieldNumber = 4,
    kProvidersFieldNumber = 5,
    kSnmpSpeedsFieldNumber = 6,
    kIpTypesFieldNumber = 7,
    kTextFieldNumber = 1,
  };
  // repeated string device_ids = 2[json_name = "deviceIds"];
  int device_ids_size() const;
  private:
  int _internal_device_ids_size() const;
  public:
  void clear_device_ids();
  const std::string& device_ids(int index) const;
  std::string* mutable_device_ids(int index);
  void set_device_ids(int index, const std::string& value);
  void set_device_ids(int index, std::string&& value);
  void set_device_ids(int index, const char* value);
  void set_device_ids(int index, const char* value, size_t size);
  std::string* add_device_ids();
  void add_device_ids(const std::string& value);
  void add_device_ids(std::string&& value);
  void add_device_ids(const char* value);
  void add_device_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_ids();
  private:
  const std::string& _internal_device_ids(int index) const;
  std::string* _internal_add_device_ids();
  public:

  // repeated .kentik.interface.v202108alpha1.ConnectivityType connectivity_types = 3[json_name = "connectivityTypes"];
  int connectivity_types_size() const;
  private:
  int _internal_connectivity_types_size() const;
  public:
  void clear_connectivity_types();
  private:
  ::kentik::interface::v202108alpha1::ConnectivityType _internal_connectivity_types(int index) const;
  void _internal_add_connectivity_types(::kentik::interface::v202108alpha1::ConnectivityType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_connectivity_types();
  public:
  ::kentik::interface::v202108alpha1::ConnectivityType connectivity_types(int index) const;
  void set_connectivity_types(int index, ::kentik::interface::v202108alpha1::ConnectivityType value);
  void add_connectivity_types(::kentik::interface::v202108alpha1::ConnectivityType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& connectivity_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_connectivity_types();

  // repeated .kentik.interface.v202108alpha1.NetworkBoundary network_boundaries = 4[json_name = "networkBoundaries"];
  int network_boundaries_size() const;
  private:
  int _internal_network_boundaries_size() const;
  public:
  void clear_network_boundaries();
  private:
  ::kentik::interface::v202108alpha1::NetworkBoundary _internal_network_boundaries(int index) const;
  void _internal_add_network_boundaries(::kentik::interface::v202108alpha1::NetworkBoundary value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_network_boundaries();
  public:
  ::kentik::interface::v202108alpha1::NetworkBoundary network_boundaries(int index) const;
  void set_network_boundaries(int index, ::kentik::interface::v202108alpha1::NetworkBoundary value);
  void add_network_boundaries(::kentik::interface::v202108alpha1::NetworkBoundary value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& network_boundaries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_network_boundaries();

  // repeated string providers = 5[json_name = "providers"];
  int providers_size() const;
  private:
  int _internal_providers_size() const;
  public:
  void clear_providers();
  const std::string& providers(int index) const;
  std::string* mutable_providers(int index);
  void set_providers(int index, const std::string& value);
  void set_providers(int index, std::string&& value);
  void set_providers(int index, const char* value);
  void set_providers(int index, const char* value, size_t size);
  std::string* add_providers();
  void add_providers(const std::string& value);
  void add_providers(std::string&& value);
  void add_providers(const char* value);
  void add_providers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& providers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_providers();
  private:
  const std::string& _internal_providers(int index) const;
  std::string* _internal_add_providers();
  public:

  // repeated int32 snmp_speeds = 6[json_name = "snmpSpeeds"];
  int snmp_speeds_size() const;
  private:
  int _internal_snmp_speeds_size() const;
  public:
  void clear_snmp_speeds();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_snmp_speeds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_snmp_speeds() const;
  void _internal_add_snmp_speeds(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_snmp_speeds();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 snmp_speeds(int index) const;
  void set_snmp_speeds(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_snmp_speeds(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      snmp_speeds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_snmp_speeds();

  // repeated .kentik.interface.v202108alpha1.IpFilter ip_types = 7[json_name = "ipTypes"];
  int ip_types_size() const;
  private:
  int _internal_ip_types_size() const;
  public:
  void clear_ip_types();
  private:
  ::kentik::interface::v202108alpha1::IpFilter _internal_ip_types(int index) const;
  void _internal_add_ip_types(::kentik::interface::v202108alpha1::IpFilter value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ip_types();
  public:
  ::kentik::interface::v202108alpha1::IpFilter ip_types(int index) const;
  void set_ip_types(int index, ::kentik::interface::v202108alpha1::IpFilter value);
  void add_ip_types(::kentik::interface::v202108alpha1::IpFilter value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ip_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ip_types();

  // string text = 1[json_name = "text"];
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.InterfaceFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> connectivity_types_;
  mutable std::atomic<int> _connectivity_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> network_boundaries_;
  mutable std::atomic<int> _network_boundaries_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> providers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > snmp_speeds_;
  mutable std::atomic<int> _snmp_speeds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ip_types_;
  mutable std::atomic<int> _ip_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class AutoClassifyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.AutoClassifyRequest) */ {
 public:
  inline AutoClassifyRequest() : AutoClassifyRequest(nullptr) {};
  virtual ~AutoClassifyRequest();

  AutoClassifyRequest(const AutoClassifyRequest& from);
  AutoClassifyRequest(AutoClassifyRequest&& from) noexcept
    : AutoClassifyRequest() {
    *this = ::std::move(from);
  }

  inline AutoClassifyRequest& operator=(const AutoClassifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoClassifyRequest& operator=(AutoClassifyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoClassifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoClassifyRequest* internal_default_instance() {
    return reinterpret_cast<const AutoClassifyRequest*>(
               &_AutoClassifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AutoClassifyRequest& a, AutoClassifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoClassifyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoClassifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoClassifyRequest* New() const final {
    return CreateMaybeMessage<AutoClassifyRequest>(nullptr);
  }

  AutoClassifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoClassifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoClassifyRequest& from);
  void MergeFrom(const AutoClassifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoClassifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.AutoClassifyRequest";
  }
  protected:
  explicit AutoClassifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.AutoClassifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class AutoClassifyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.AutoClassifyResponse) */ {
 public:
  inline AutoClassifyResponse() : AutoClassifyResponse(nullptr) {};
  virtual ~AutoClassifyResponse();

  AutoClassifyResponse(const AutoClassifyResponse& from);
  AutoClassifyResponse(AutoClassifyResponse&& from) noexcept
    : AutoClassifyResponse() {
    *this = ::std::move(from);
  }

  inline AutoClassifyResponse& operator=(const AutoClassifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoClassifyResponse& operator=(AutoClassifyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoClassifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoClassifyResponse* internal_default_instance() {
    return reinterpret_cast<const AutoClassifyResponse*>(
               &_AutoClassifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AutoClassifyResponse& a, AutoClassifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoClassifyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoClassifyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoClassifyResponse* New() const final {
    return CreateMaybeMessage<AutoClassifyResponse>(nullptr);
  }

  AutoClassifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoClassifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoClassifyResponse& from);
  void MergeFrom(const AutoClassifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoClassifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.AutoClassifyResponse";
  }
  protected:
  explicit AutoClassifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 18,
    kTotalAutoClassifyCounterFieldNumber = 7,
    kTotalPreviousCounterFieldNumber = 8,
    kPercAutoClassifiedFieldNumber = 1,
    kNetChangedTransitFieldNumber = 2,
    kNetChangedIxFieldNumber = 3,
    kNetChangedProviderFieldNumber = 4,
    kTotalChangedClassificationCountFieldNumber = 5,
    kTotalAutoClassifyCountFieldNumber = 6,
    kTotalInterfacesFieldNumber = 17,
  };
  // repeated .kentik.interface.v202108alpha1.DeviceClassifyInfo devices = 18[json_name = "devices"];
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::interface::v202108alpha1::DeviceClassifyInfo* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::DeviceClassifyInfo >*
      mutable_devices();
  private:
  const ::kentik::interface::v202108alpha1::DeviceClassifyInfo& _internal_devices(int index) const;
  ::kentik::interface::v202108alpha1::DeviceClassifyInfo* _internal_add_devices();
  public:
  const ::kentik::interface::v202108alpha1::DeviceClassifyInfo& devices(int index) const;
  ::kentik::interface::v202108alpha1::DeviceClassifyInfo* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::DeviceClassifyInfo >&
      devices() const;

  // .kentik.interface.v202108alpha1.ClassifyCounter total_auto_classify_counter = 7[json_name = "totalAutoClassifyCounter"];
  bool has_total_auto_classify_counter() const;
  private:
  bool _internal_has_total_auto_classify_counter() const;
  public:
  void clear_total_auto_classify_counter();
  const ::kentik::interface::v202108alpha1::ClassifyCounter& total_auto_classify_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* release_total_auto_classify_counter();
  ::kentik::interface::v202108alpha1::ClassifyCounter* mutable_total_auto_classify_counter();
  void set_allocated_total_auto_classify_counter(::kentik::interface::v202108alpha1::ClassifyCounter* total_auto_classify_counter);
  private:
  const ::kentik::interface::v202108alpha1::ClassifyCounter& _internal_total_auto_classify_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* _internal_mutable_total_auto_classify_counter();
  public:
  void unsafe_arena_set_allocated_total_auto_classify_counter(
      ::kentik::interface::v202108alpha1::ClassifyCounter* total_auto_classify_counter);
  ::kentik::interface::v202108alpha1::ClassifyCounter* unsafe_arena_release_total_auto_classify_counter();

  // .kentik.interface.v202108alpha1.ClassifyCounter total_previous_counter = 8[json_name = "totalPreviousCounter"];
  bool has_total_previous_counter() const;
  private:
  bool _internal_has_total_previous_counter() const;
  public:
  void clear_total_previous_counter();
  const ::kentik::interface::v202108alpha1::ClassifyCounter& total_previous_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* release_total_previous_counter();
  ::kentik::interface::v202108alpha1::ClassifyCounter* mutable_total_previous_counter();
  void set_allocated_total_previous_counter(::kentik::interface::v202108alpha1::ClassifyCounter* total_previous_counter);
  private:
  const ::kentik::interface::v202108alpha1::ClassifyCounter& _internal_total_previous_counter() const;
  ::kentik::interface::v202108alpha1::ClassifyCounter* _internal_mutable_total_previous_counter();
  public:
  void unsafe_arena_set_allocated_total_previous_counter(
      ::kentik::interface::v202108alpha1::ClassifyCounter* total_previous_counter);
  ::kentik::interface::v202108alpha1::ClassifyCounter* unsafe_arena_release_total_previous_counter();

  // double perc_auto_classified = 1[json_name = "percAutoClassified"];
  void clear_perc_auto_classified();
  double perc_auto_classified() const;
  void set_perc_auto_classified(double value);
  private:
  double _internal_perc_auto_classified() const;
  void _internal_set_perc_auto_classified(double value);
  public:

  // int32 net_changed_transit = 2[json_name = "netChangedTransit"];
  void clear_net_changed_transit();
  ::PROTOBUF_NAMESPACE_ID::int32 net_changed_transit() const;
  void set_net_changed_transit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net_changed_transit() const;
  void _internal_set_net_changed_transit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 net_changed_ix = 3[json_name = "netChangedIx"];
  void clear_net_changed_ix();
  ::PROTOBUF_NAMESPACE_ID::int32 net_changed_ix() const;
  void set_net_changed_ix(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net_changed_ix() const;
  void _internal_set_net_changed_ix(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 net_changed_provider = 4[json_name = "netChangedProvider"];
  void clear_net_changed_provider();
  ::PROTOBUF_NAMESPACE_ID::int32 net_changed_provider() const;
  void set_net_changed_provider(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net_changed_provider() const;
  void _internal_set_net_changed_provider(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_changed_classification_count = 5[json_name = "totalChangedClassificationCount"];
  void clear_total_changed_classification_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_changed_classification_count() const;
  void set_total_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_changed_classification_count() const;
  void _internal_set_total_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_auto_classify_count = 6[json_name = "totalAutoClassifyCount"];
  void clear_total_auto_classify_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_auto_classify_count() const;
  void set_total_auto_classify_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_auto_classify_count() const;
  void _internal_set_total_auto_classify_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_interfaces = 17[json_name = "totalInterfaces"];
  void clear_total_interfaces();
  ::PROTOBUF_NAMESPACE_ID::int32 total_interfaces() const;
  void set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_interfaces() const;
  void _internal_set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.AutoClassifyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::DeviceClassifyInfo > devices_;
  ::kentik::interface::v202108alpha1::ClassifyCounter* total_auto_classify_counter_;
  ::kentik::interface::v202108alpha1::ClassifyCounter* total_previous_counter_;
  double perc_auto_classified_;
  ::PROTOBUF_NAMESPACE_ID::int32 net_changed_transit_;
  ::PROTOBUF_NAMESPACE_ID::int32 net_changed_ix_;
  ::PROTOBUF_NAMESPACE_ID::int32 net_changed_provider_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_changed_classification_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_auto_classify_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_interfaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ManualClassifyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.ManualClassifyRequest) */ {
 public:
  inline ManualClassifyRequest() : ManualClassifyRequest(nullptr) {};
  virtual ~ManualClassifyRequest();

  ManualClassifyRequest(const ManualClassifyRequest& from);
  ManualClassifyRequest(ManualClassifyRequest&& from) noexcept
    : ManualClassifyRequest() {
    *this = ::std::move(from);
  }

  inline ManualClassifyRequest& operator=(const ManualClassifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualClassifyRequest& operator=(ManualClassifyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualClassifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualClassifyRequest* internal_default_instance() {
    return reinterpret_cast<const ManualClassifyRequest*>(
               &_ManualClassifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ManualClassifyRequest& a, ManualClassifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualClassifyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManualClassifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualClassifyRequest* New() const final {
    return CreateMaybeMessage<ManualClassifyRequest>(nullptr);
  }

  ManualClassifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualClassifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualClassifyRequest& from);
  void MergeFrom(const ManualClassifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualClassifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.ManualClassifyRequest";
  }
  protected:
  explicit ManualClassifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceIdsFieldNumber = 1,
    kProviderFieldNumber = 4,
    kConnectivityTypeFieldNumber = 2,
    kNetworkBoundaryFieldNumber = 3,
  };
  // repeated string interface_ids = 1[json_name = "interfaceIds"];
  int interface_ids_size() const;
  private:
  int _internal_interface_ids_size() const;
  public:
  void clear_interface_ids();
  const std::string& interface_ids(int index) const;
  std::string* mutable_interface_ids(int index);
  void set_interface_ids(int index, const std::string& value);
  void set_interface_ids(int index, std::string&& value);
  void set_interface_ids(int index, const char* value);
  void set_interface_ids(int index, const char* value, size_t size);
  std::string* add_interface_ids();
  void add_interface_ids(const std::string& value);
  void add_interface_ids(std::string&& value);
  void add_interface_ids(const char* value);
  void add_interface_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& interface_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_interface_ids();
  private:
  const std::string& _internal_interface_ids(int index) const;
  std::string* _internal_add_interface_ids();
  public:

  // string provider = 4[json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_provider(
      std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
  void clear_connectivity_type();
  ::kentik::interface::v202108alpha1::ConnectivityType connectivity_type() const;
  void set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  private:
  ::kentik::interface::v202108alpha1::ConnectivityType _internal_connectivity_type() const;
  void _internal_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  public:

  // .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
  void clear_network_boundary();
  ::kentik::interface::v202108alpha1::NetworkBoundary network_boundary() const;
  void set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  private:
  ::kentik::interface::v202108alpha1::NetworkBoundary _internal_network_boundary() const;
  void _internal_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.ManualClassifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> interface_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  int connectivity_type_;
  int network_boundary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ManualClassifyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.ManualClassifyResponse) */ {
 public:
  inline ManualClassifyResponse() : ManualClassifyResponse(nullptr) {};
  virtual ~ManualClassifyResponse();

  ManualClassifyResponse(const ManualClassifyResponse& from);
  ManualClassifyResponse(ManualClassifyResponse&& from) noexcept
    : ManualClassifyResponse() {
    *this = ::std::move(from);
  }

  inline ManualClassifyResponse& operator=(const ManualClassifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualClassifyResponse& operator=(ManualClassifyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualClassifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualClassifyResponse* internal_default_instance() {
    return reinterpret_cast<const ManualClassifyResponse*>(
               &_ManualClassifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ManualClassifyResponse& a, ManualClassifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualClassifyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManualClassifyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualClassifyResponse* New() const final {
    return CreateMaybeMessage<ManualClassifyResponse>(nullptr);
  }

  ManualClassifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualClassifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualClassifyResponse& from);
  void MergeFrom(const ManualClassifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualClassifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.ManualClassifyResponse";
  }
  protected:
  explicit ManualClassifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdsFieldNumber = 1,
  };
  // repeated string device_ids = 1[json_name = "deviceIds"];
  int device_ids_size() const;
  private:
  int _internal_device_ids_size() const;
  public:
  void clear_device_ids();
  const std::string& device_ids(int index) const;
  std::string* mutable_device_ids(int index);
  void set_device_ids(int index, const std::string& value);
  void set_device_ids(int index, std::string&& value);
  void set_device_ids(int index, const char* value);
  void set_device_ids(int index, const char* value, size_t size);
  std::string* add_device_ids();
  void add_device_ids(const std::string& value);
  void add_device_ids(std::string&& value);
  void add_device_ids(const char* value);
  void add_device_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_ids();
  private:
  const std::string& _internal_device_ids(int index) const;
  std::string* _internal_add_device_ids();
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.ManualClassifyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ListInterfaceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.ListInterfaceRequest) */ {
 public:
  inline ListInterfaceRequest() : ListInterfaceRequest(nullptr) {};
  virtual ~ListInterfaceRequest();

  ListInterfaceRequest(const ListInterfaceRequest& from);
  ListInterfaceRequest(ListInterfaceRequest&& from) noexcept
    : ListInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline ListInterfaceRequest& operator=(const ListInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInterfaceRequest& operator=(ListInterfaceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListInterfaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const ListInterfaceRequest*>(
               &_ListInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListInterfaceRequest& a, ListInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInterfaceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInterfaceRequest* New() const final {
    return CreateMaybeMessage<ListInterfaceRequest>(nullptr);
  }

  ListInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInterfaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListInterfaceRequest& from);
  void MergeFrom(const ListInterfaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInterfaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.ListInterfaceRequest";
  }
  protected:
  explicit ListInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // .kentik.interface.v202108alpha1.InterfaceFilter filters = 1[json_name = "filters"];
  bool has_filters() const;
  private:
  bool _internal_has_filters() const;
  public:
  void clear_filters();
  const ::kentik::interface::v202108alpha1::InterfaceFilter& filters() const;
  ::kentik::interface::v202108alpha1::InterfaceFilter* release_filters();
  ::kentik::interface::v202108alpha1::InterfaceFilter* mutable_filters();
  void set_allocated_filters(::kentik::interface::v202108alpha1::InterfaceFilter* filters);
  private:
  const ::kentik::interface::v202108alpha1::InterfaceFilter& _internal_filters() const;
  ::kentik::interface::v202108alpha1::InterfaceFilter* _internal_mutable_filters();
  public:
  void unsafe_arena_set_allocated_filters(
      ::kentik::interface::v202108alpha1::InterfaceFilter* filters);
  ::kentik::interface::v202108alpha1::InterfaceFilter* unsafe_arena_release_filters();

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.ListInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::interface::v202108alpha1::InterfaceFilter* filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ListInterfaceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.ListInterfaceResponse) */ {
 public:
  inline ListInterfaceResponse() : ListInterfaceResponse(nullptr) {};
  virtual ~ListInterfaceResponse();

  ListInterfaceResponse(const ListInterfaceResponse& from);
  ListInterfaceResponse(ListInterfaceResponse&& from) noexcept
    : ListInterfaceResponse() {
    *this = ::std::move(from);
  }

  inline ListInterfaceResponse& operator=(const ListInterfaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInterfaceResponse& operator=(ListInterfaceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListInterfaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInterfaceResponse* internal_default_instance() {
    return reinterpret_cast<const ListInterfaceResponse*>(
               &_ListInterfaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListInterfaceResponse& a, ListInterfaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInterfaceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInterfaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInterfaceResponse* New() const final {
    return CreateMaybeMessage<ListInterfaceResponse>(nullptr);
  }

  ListInterfaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInterfaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListInterfaceResponse& from);
  void MergeFrom(const ListInterfaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInterfaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.ListInterfaceResponse";
  }
  protected:
  explicit ListInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 1,
    kTotalCountFieldNumber = 2,
    kInvalidCountFieldNumber = 3,
  };
  // repeated .kentik.interface.v202108alpha1.Interface interfaces = 1[json_name = "interfaces"];
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::kentik::interface::v202108alpha1::Interface* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::Interface >*
      mutable_interfaces();
  private:
  const ::kentik::interface::v202108alpha1::Interface& _internal_interfaces(int index) const;
  ::kentik::interface::v202108alpha1::Interface* _internal_add_interfaces();
  public:
  const ::kentik::interface::v202108alpha1::Interface& interfaces(int index) const;
  ::kentik::interface::v202108alpha1::Interface* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::Interface >&
      interfaces() const;

  // int32 total_count = 2[json_name = "totalCount"];
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 invalid_count = 3[json_name = "invalidCount"];
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.ListInterfaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::Interface > interfaces_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class GetInterfaceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.GetInterfaceRequest) */ {
 public:
  inline GetInterfaceRequest() : GetInterfaceRequest(nullptr) {};
  virtual ~GetInterfaceRequest();

  GetInterfaceRequest(const GetInterfaceRequest& from);
  GetInterfaceRequest(GetInterfaceRequest&& from) noexcept
    : GetInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline GetInterfaceRequest& operator=(const GetInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterfaceRequest& operator=(GetInterfaceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInterfaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterfaceRequest*>(
               &_GetInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetInterfaceRequest& a, GetInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterfaceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInterfaceRequest* New() const final {
    return CreateMaybeMessage<GetInterfaceRequest>(nullptr);
  }

  GetInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInterfaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInterfaceRequest& from);
  void MergeFrom(const GetInterfaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterfaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.GetInterfaceRequest";
  }
  protected:
  explicit GetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.GetInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class GetInterfaceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.GetInterfaceResponse) */ {
 public:
  inline GetInterfaceResponse() : GetInterfaceResponse(nullptr) {};
  virtual ~GetInterfaceResponse();

  GetInterfaceResponse(const GetInterfaceResponse& from);
  GetInterfaceResponse(GetInterfaceResponse&& from) noexcept
    : GetInterfaceResponse() {
    *this = ::std::move(from);
  }

  inline GetInterfaceResponse& operator=(const GetInterfaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterfaceResponse& operator=(GetInterfaceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInterfaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInterfaceResponse* internal_default_instance() {
    return reinterpret_cast<const GetInterfaceResponse*>(
               &_GetInterfaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetInterfaceResponse& a, GetInterfaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterfaceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterfaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInterfaceResponse* New() const final {
    return CreateMaybeMessage<GetInterfaceResponse>(nullptr);
  }

  GetInterfaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInterfaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInterfaceResponse& from);
  void MergeFrom(const GetInterfaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterfaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.GetInterfaceResponse";
  }
  protected:
  explicit GetInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::kentik::interface::v202108alpha1::Interface& interface() const;
  ::kentik::interface::v202108alpha1::Interface* release_interface();
  ::kentik::interface::v202108alpha1::Interface* mutable_interface();
  void set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface);
  private:
  const ::kentik::interface::v202108alpha1::Interface& _internal_interface() const;
  ::kentik::interface::v202108alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::kentik::interface::v202108alpha1::Interface* interface);
  ::kentik::interface::v202108alpha1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.GetInterfaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::interface::v202108alpha1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class CreateInterfaceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.CreateInterfaceRequest) */ {
 public:
  inline CreateInterfaceRequest() : CreateInterfaceRequest(nullptr) {};
  virtual ~CreateInterfaceRequest();

  CreateInterfaceRequest(const CreateInterfaceRequest& from);
  CreateInterfaceRequest(CreateInterfaceRequest&& from) noexcept
    : CreateInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInterfaceRequest& operator=(const CreateInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInterfaceRequest& operator=(CreateInterfaceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateInterfaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInterfaceRequest*>(
               &_CreateInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateInterfaceRequest& a, CreateInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInterfaceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInterfaceRequest* New() const final {
    return CreateMaybeMessage<CreateInterfaceRequest>(nullptr);
  }

  CreateInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInterfaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateInterfaceRequest& from);
  void MergeFrom(const CreateInterfaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInterfaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.CreateInterfaceRequest";
  }
  protected:
  explicit CreateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::kentik::interface::v202108alpha1::Interface& interface() const;
  ::kentik::interface::v202108alpha1::Interface* release_interface();
  ::kentik::interface::v202108alpha1::Interface* mutable_interface();
  void set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface);
  private:
  const ::kentik::interface::v202108alpha1::Interface& _internal_interface() const;
  ::kentik::interface::v202108alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::kentik::interface::v202108alpha1::Interface* interface);
  ::kentik::interface::v202108alpha1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.CreateInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::interface::v202108alpha1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class CreateInterfaceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.CreateInterfaceResponse) */ {
 public:
  inline CreateInterfaceResponse() : CreateInterfaceResponse(nullptr) {};
  virtual ~CreateInterfaceResponse();

  CreateInterfaceResponse(const CreateInterfaceResponse& from);
  CreateInterfaceResponse(CreateInterfaceResponse&& from) noexcept
    : CreateInterfaceResponse() {
    *this = ::std::move(from);
  }

  inline CreateInterfaceResponse& operator=(const CreateInterfaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInterfaceResponse& operator=(CreateInterfaceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateInterfaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInterfaceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateInterfaceResponse*>(
               &_CreateInterfaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateInterfaceResponse& a, CreateInterfaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInterfaceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInterfaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInterfaceResponse* New() const final {
    return CreateMaybeMessage<CreateInterfaceResponse>(nullptr);
  }

  CreateInterfaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInterfaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateInterfaceResponse& from);
  void MergeFrom(const CreateInterfaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInterfaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.CreateInterfaceResponse";
  }
  protected:
  explicit CreateInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::kentik::interface::v202108alpha1::Interface& interface() const;
  ::kentik::interface::v202108alpha1::Interface* release_interface();
  ::kentik::interface::v202108alpha1::Interface* mutable_interface();
  void set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface);
  private:
  const ::kentik::interface::v202108alpha1::Interface& _internal_interface() const;
  ::kentik::interface::v202108alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::kentik::interface::v202108alpha1::Interface* interface);
  ::kentik::interface::v202108alpha1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.CreateInterfaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::interface::v202108alpha1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class UpdateInterfaceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.UpdateInterfaceRequest) */ {
 public:
  inline UpdateInterfaceRequest() : UpdateInterfaceRequest(nullptr) {};
  virtual ~UpdateInterfaceRequest();

  UpdateInterfaceRequest(const UpdateInterfaceRequest& from);
  UpdateInterfaceRequest(UpdateInterfaceRequest&& from) noexcept
    : UpdateInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateInterfaceRequest& operator=(const UpdateInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInterfaceRequest& operator=(UpdateInterfaceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateInterfaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateInterfaceRequest*>(
               &_UpdateInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateInterfaceRequest& a, UpdateInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInterfaceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateInterfaceRequest* New() const final {
    return CreateMaybeMessage<UpdateInterfaceRequest>(nullptr);
  }

  UpdateInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInterfaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateInterfaceRequest& from);
  void MergeFrom(const UpdateInterfaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInterfaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.UpdateInterfaceRequest";
  }
  protected:
  explicit UpdateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::kentik::interface::v202108alpha1::Interface& interface() const;
  ::kentik::interface::v202108alpha1::Interface* release_interface();
  ::kentik::interface::v202108alpha1::Interface* mutable_interface();
  void set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface);
  private:
  const ::kentik::interface::v202108alpha1::Interface& _internal_interface() const;
  ::kentik::interface::v202108alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::kentik::interface::v202108alpha1::Interface* interface);
  ::kentik::interface::v202108alpha1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.UpdateInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::interface::v202108alpha1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class UpdateInterfaceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.UpdateInterfaceResponse) */ {
 public:
  inline UpdateInterfaceResponse() : UpdateInterfaceResponse(nullptr) {};
  virtual ~UpdateInterfaceResponse();

  UpdateInterfaceResponse(const UpdateInterfaceResponse& from);
  UpdateInterfaceResponse(UpdateInterfaceResponse&& from) noexcept
    : UpdateInterfaceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateInterfaceResponse& operator=(const UpdateInterfaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInterfaceResponse& operator=(UpdateInterfaceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateInterfaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInterfaceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateInterfaceResponse*>(
               &_UpdateInterfaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateInterfaceResponse& a, UpdateInterfaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInterfaceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateInterfaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateInterfaceResponse* New() const final {
    return CreateMaybeMessage<UpdateInterfaceResponse>(nullptr);
  }

  UpdateInterfaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInterfaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateInterfaceResponse& from);
  void MergeFrom(const UpdateInterfaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInterfaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.UpdateInterfaceResponse";
  }
  protected:
  explicit UpdateInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::kentik::interface::v202108alpha1::Interface& interface() const;
  ::kentik::interface::v202108alpha1::Interface* release_interface();
  ::kentik::interface::v202108alpha1::Interface* mutable_interface();
  void set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface);
  private:
  const ::kentik::interface::v202108alpha1::Interface& _internal_interface() const;
  ::kentik::interface::v202108alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::kentik::interface::v202108alpha1::Interface* interface);
  ::kentik::interface::v202108alpha1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.UpdateInterfaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::interface::v202108alpha1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class DeleteInterfaceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.DeleteInterfaceRequest) */ {
 public:
  inline DeleteInterfaceRequest() : DeleteInterfaceRequest(nullptr) {};
  virtual ~DeleteInterfaceRequest();

  DeleteInterfaceRequest(const DeleteInterfaceRequest& from);
  DeleteInterfaceRequest(DeleteInterfaceRequest&& from) noexcept
    : DeleteInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInterfaceRequest& operator=(const DeleteInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInterfaceRequest& operator=(DeleteInterfaceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteInterfaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInterfaceRequest*>(
               &_DeleteInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteInterfaceRequest& a, DeleteInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInterfaceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInterfaceRequest* New() const final {
    return CreateMaybeMessage<DeleteInterfaceRequest>(nullptr);
  }

  DeleteInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInterfaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteInterfaceRequest& from);
  void MergeFrom(const DeleteInterfaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInterfaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.DeleteInterfaceRequest";
  }
  protected:
  explicit DeleteInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.DeleteInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class DeleteInterfaceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.DeleteInterfaceResponse) */ {
 public:
  inline DeleteInterfaceResponse() : DeleteInterfaceResponse(nullptr) {};
  virtual ~DeleteInterfaceResponse();

  DeleteInterfaceResponse(const DeleteInterfaceResponse& from);
  DeleteInterfaceResponse(DeleteInterfaceResponse&& from) noexcept
    : DeleteInterfaceResponse() {
    *this = ::std::move(from);
  }

  inline DeleteInterfaceResponse& operator=(const DeleteInterfaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInterfaceResponse& operator=(DeleteInterfaceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteInterfaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInterfaceResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteInterfaceResponse*>(
               &_DeleteInterfaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteInterfaceResponse& a, DeleteInterfaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInterfaceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInterfaceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInterfaceResponse* New() const final {
    return CreateMaybeMessage<DeleteInterfaceResponse>(nullptr);
  }

  DeleteInterfaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInterfaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteInterfaceResponse& from);
  void MergeFrom(const DeleteInterfaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInterfaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.DeleteInterfaceResponse";
  }
  protected:
  explicit DeleteInterfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.DeleteInterfaceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class Match PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.Match) */ {
 public:
  inline Match() : Match(nullptr) {};
  virtual ~Match();

  Match(const Match& from);
  Match(Match&& from) noexcept
    : Match() {
    *this = ::std::move(from);
  }

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match& operator=(Match&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Match& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Match* internal_default_instance() {
    return reinterpret_cast<const Match*>(
               &_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Match& a, Match& b) {
    a.Swap(&b);
  }
  inline void Swap(Match* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Match* New() const final {
    return CreateMaybeMessage<Match>(nullptr);
  }

  Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Match>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.Match";
  }
  protected:
  explicit Match(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 3,
    kMatchAttributeFieldNumber = 1,
    kMatchOperatorFieldNumber = 2,
  };
  // string pattern = 3[json_name = "pattern"];
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pattern();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pattern(
      std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // .kentik.interface.v202108alpha1.MatchAttribute match_attribute = 1[json_name = "matchAttribute"];
  void clear_match_attribute();
  ::kentik::interface::v202108alpha1::MatchAttribute match_attribute() const;
  void set_match_attribute(::kentik::interface::v202108alpha1::MatchAttribute value);
  private:
  ::kentik::interface::v202108alpha1::MatchAttribute _internal_match_attribute() const;
  void _internal_set_match_attribute(::kentik::interface::v202108alpha1::MatchAttribute value);
  public:

  // .kentik.interface.v202108alpha1.Operator match_operator = 2[json_name = "matchOperator"];
  void clear_match_operator();
  ::kentik::interface::v202108alpha1::Operator match_operator() const;
  void set_match_operator(::kentik::interface::v202108alpha1::Operator value);
  private:
  ::kentik::interface::v202108alpha1::Operator _internal_match_operator() const;
  void _internal_set_match_operator(::kentik::interface::v202108alpha1::Operator value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  int match_attribute_;
  int match_operator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.Action) */ {
 public:
  inline Action() : Action(nullptr) {};
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetConnectedAsnsFieldNumber = 3,
    kSetProviderFieldNumber = 4,
    kSetConnectivityTypeFieldNumber = 1,
    kSetNetworkBoundaryFieldNumber = 2,
  };
  // string set_connected_asns = 3[json_name = "setConnectedAsns"];
  void clear_set_connected_asns();
  const std::string& set_connected_asns() const;
  void set_set_connected_asns(const std::string& value);
  void set_set_connected_asns(std::string&& value);
  void set_set_connected_asns(const char* value);
  void set_set_connected_asns(const char* value, size_t size);
  std::string* mutable_set_connected_asns();
  std::string* release_set_connected_asns();
  void set_allocated_set_connected_asns(std::string* set_connected_asns);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_set_connected_asns();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_set_connected_asns(
      std::string* set_connected_asns);
  private:
  const std::string& _internal_set_connected_asns() const;
  void _internal_set_set_connected_asns(const std::string& value);
  std::string* _internal_mutable_set_connected_asns();
  public:

  // string set_provider = 4[json_name = "setProvider"];
  void clear_set_provider();
  const std::string& set_provider() const;
  void set_set_provider(const std::string& value);
  void set_set_provider(std::string&& value);
  void set_set_provider(const char* value);
  void set_set_provider(const char* value, size_t size);
  std::string* mutable_set_provider();
  std::string* release_set_provider();
  void set_allocated_set_provider(std::string* set_provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_set_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_set_provider(
      std::string* set_provider);
  private:
  const std::string& _internal_set_provider() const;
  void _internal_set_set_provider(const std::string& value);
  std::string* _internal_mutable_set_provider();
  public:

  // .kentik.interface.v202108alpha1.ConnectivityType set_connectivity_type = 1[json_name = "setConnectivityType"];
  void clear_set_connectivity_type();
  ::kentik::interface::v202108alpha1::ConnectivityType set_connectivity_type() const;
  void set_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  private:
  ::kentik::interface::v202108alpha1::ConnectivityType _internal_set_connectivity_type() const;
  void _internal_set_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value);
  public:

  // .kentik.interface.v202108alpha1.NetworkBoundary set_network_boundary = 2[json_name = "setNetworkBoundary"];
  void clear_set_network_boundary();
  ::kentik::interface::v202108alpha1::NetworkBoundary set_network_boundary() const;
  void set_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  private:
  ::kentik::interface::v202108alpha1::NetworkBoundary _internal_set_network_boundary() const;
  void _internal_set_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_connected_asns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_provider_;
  int set_connectivity_type_;
  int set_network_boundary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class DeviceFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.DeviceFilter) */ {
 public:
  inline DeviceFilter() : DeviceFilter(nullptr) {};
  virtual ~DeviceFilter();

  DeviceFilter(const DeviceFilter& from);
  DeviceFilter(DeviceFilter&& from) noexcept
    : DeviceFilter() {
    *this = ::std::move(from);
  }

  inline DeviceFilter& operator=(const DeviceFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceFilter& operator=(DeviceFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceFilter* internal_default_instance() {
    return reinterpret_cast<const DeviceFilter*>(
               &_DeviceFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeviceFilter& a, DeviceFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceFilter* New() const final {
    return CreateMaybeMessage<DeviceFilter>(nullptr);
  }

  DeviceFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceFilter& from);
  void MergeFrom(const DeviceFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.DeviceFilter";
  }
  protected:
  explicit DeviceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 2,
    kDeviceLabelsFieldNumber = 3,
    kDeviceRulesFieldNumber = 4,
    kDeviceTypesFieldNumber = 5,
    kAllDevicesFieldNumber = 1,
  };
  // repeated string device_name = 2[json_name = "deviceName"];
  int device_name_size() const;
  private:
  int _internal_device_name_size() const;
  public:
  void clear_device_name();
  const std::string& device_name(int index) const;
  std::string* mutable_device_name(int index);
  void set_device_name(int index, const std::string& value);
  void set_device_name(int index, std::string&& value);
  void set_device_name(int index, const char* value);
  void set_device_name(int index, const char* value, size_t size);
  std::string* add_device_name();
  void add_device_name(const std::string& value);
  void add_device_name(std::string&& value);
  void add_device_name(const char* value);
  void add_device_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_name();
  private:
  const std::string& _internal_device_name(int index) const;
  std::string* _internal_add_device_name();
  public:

  // repeated string device_labels = 3[json_name = "deviceLabels"];
  int device_labels_size() const;
  private:
  int _internal_device_labels_size() const;
  public:
  void clear_device_labels();
  const std::string& device_labels(int index) const;
  std::string* mutable_device_labels(int index);
  void set_device_labels(int index, const std::string& value);
  void set_device_labels(int index, std::string&& value);
  void set_device_labels(int index, const char* value);
  void set_device_labels(int index, const char* value, size_t size);
  std::string* add_device_labels();
  void add_device_labels(const std::string& value);
  void add_device_labels(std::string&& value);
  void add_device_labels(const char* value);
  void add_device_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_labels();
  private:
  const std::string& _internal_device_labels(int index) const;
  std::string* _internal_add_device_labels();
  public:

  // repeated string device_rules = 4[json_name = "deviceRules"];
  int device_rules_size() const;
  private:
  int _internal_device_rules_size() const;
  public:
  void clear_device_rules();
  const std::string& device_rules(int index) const;
  std::string* mutable_device_rules(int index);
  void set_device_rules(int index, const std::string& value);
  void set_device_rules(int index, std::string&& value);
  void set_device_rules(int index, const char* value);
  void set_device_rules(int index, const char* value, size_t size);
  std::string* add_device_rules();
  void add_device_rules(const std::string& value);
  void add_device_rules(std::string&& value);
  void add_device_rules(const char* value);
  void add_device_rules(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_rules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_rules();
  private:
  const std::string& _internal_device_rules(int index) const;
  std::string* _internal_add_device_rules();
  public:

  // repeated string device_types = 5[json_name = "deviceTypes"];
  int device_types_size() const;
  private:
  int _internal_device_types_size() const;
  public:
  void clear_device_types();
  const std::string& device_types(int index) const;
  std::string* mutable_device_types(int index);
  void set_device_types(int index, const std::string& value);
  void set_device_types(int index, std::string&& value);
  void set_device_types(int index, const char* value);
  void set_device_types(int index, const char* value, size_t size);
  std::string* add_device_types();
  void add_device_types(const std::string& value);
  void add_device_types(std::string&& value);
  void add_device_types(const char* value);
  void add_device_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_types();
  private:
  const std::string& _internal_device_types(int index) const;
  std::string* _internal_add_device_types();
  public:

  // bool all_devices = 1[json_name = "allDevices"];
  void clear_all_devices();
  bool all_devices() const;
  void set_all_devices(bool value);
  private:
  bool _internal_all_devices() const;
  void _internal_set_all_devices(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.DeviceFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_rules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_types_;
  bool all_devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// -------------------------------------------------------------------

class Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.interface.v202108alpha1.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {};
  virtual ~Rule();

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rule* New() const final {
    return CreateMaybeMessage<Rule>(nullptr);
  }

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rule& from);
  void MergeFrom(const Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.interface.v202108alpha1.Rule";
  }
  protected:
  explicit Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto);
    return ::descriptor_table_kentik_2finterface_2fv202108alpha1_2finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMatchClauseFieldNumber = 4,
    kActionSetFieldNumber = 5,
    kCdateFieldNumber = 6,
    kEdateFieldNumber = 7,
    kIncludedDevicesFieldNumber = 8,
    kExcludedDevicesFieldNumber = 9,
    kEnabledFieldNumber = 2,
    kRankFieldNumber = 3,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .kentik.interface.v202108alpha1.Match match_clause = 4[json_name = "matchClause"];
  bool has_match_clause() const;
  private:
  bool _internal_has_match_clause() const;
  public:
  void clear_match_clause();
  const ::kentik::interface::v202108alpha1::Match& match_clause() const;
  ::kentik::interface::v202108alpha1::Match* release_match_clause();
  ::kentik::interface::v202108alpha1::Match* mutable_match_clause();
  void set_allocated_match_clause(::kentik::interface::v202108alpha1::Match* match_clause);
  private:
  const ::kentik::interface::v202108alpha1::Match& _internal_match_clause() const;
  ::kentik::interface::v202108alpha1::Match* _internal_mutable_match_clause();
  public:
  void unsafe_arena_set_allocated_match_clause(
      ::kentik::interface::v202108alpha1::Match* match_clause);
  ::kentik::interface::v202108alpha1::Match* unsafe_arena_release_match_clause();

  // .kentik.interface.v202108alpha1.Action action_set = 5[json_name = "actionSet"];
  bool has_action_set() const;
  private:
  bool _internal_has_action_set() const;
  public:
  void clear_action_set();
  const ::kentik::interface::v202108alpha1::Action& action_set() const;
  ::kentik::interface::v202108alpha1::Action* release_action_set();
  ::kentik::interface::v202108alpha1::Action* mutable_action_set();
  void set_allocated_action_set(::kentik::interface::v202108alpha1::Action* action_set);
  private:
  const ::kentik::interface::v202108alpha1::Action& _internal_action_set() const;
  ::kentik::interface::v202108alpha1::Action* _internal_mutable_action_set();
  public:
  void unsafe_arena_set_allocated_action_set(
      ::kentik::interface::v202108alpha1::Action* action_set);
  ::kentik::interface::v202108alpha1::Action* unsafe_arena_release_action_set();

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .kentik.interface.v202108alpha1.DeviceFilter included_devices = 8[json_name = "includedDevices"];
  bool has_included_devices() const;
  private:
  bool _internal_has_included_devices() const;
  public:
  void clear_included_devices();
  const ::kentik::interface::v202108alpha1::DeviceFilter& included_devices() const;
  ::kentik::interface::v202108alpha1::DeviceFilter* release_included_devices();
  ::kentik::interface::v202108alpha1::DeviceFilter* mutable_included_devices();
  void set_allocated_included_devices(::kentik::interface::v202108alpha1::DeviceFilter* included_devices);
  private:
  const ::kentik::interface::v202108alpha1::DeviceFilter& _internal_included_devices() const;
  ::kentik::interface::v202108alpha1::DeviceFilter* _internal_mutable_included_devices();
  public:
  void unsafe_arena_set_allocated_included_devices(
      ::kentik::interface::v202108alpha1::DeviceFilter* included_devices);
  ::kentik::interface::v202108alpha1::DeviceFilter* unsafe_arena_release_included_devices();

  // .kentik.interface.v202108alpha1.DeviceFilter excluded_devices = 9[json_name = "excludedDevices"];
  bool has_excluded_devices() const;
  private:
  bool _internal_has_excluded_devices() const;
  public:
  void clear_excluded_devices();
  const ::kentik::interface::v202108alpha1::DeviceFilter& excluded_devices() const;
  ::kentik::interface::v202108alpha1::DeviceFilter* release_excluded_devices();
  ::kentik::interface::v202108alpha1::DeviceFilter* mutable_excluded_devices();
  void set_allocated_excluded_devices(::kentik::interface::v202108alpha1::DeviceFilter* excluded_devices);
  private:
  const ::kentik::interface::v202108alpha1::DeviceFilter& _internal_excluded_devices() const;
  ::kentik::interface::v202108alpha1::DeviceFilter* _internal_mutable_excluded_devices();
  public:
  void unsafe_arena_set_allocated_excluded_devices(
      ::kentik::interface::v202108alpha1::DeviceFilter* excluded_devices);
  ::kentik::interface::v202108alpha1::DeviceFilter* unsafe_arena_release_excluded_devices();

  // bool enabled = 2[json_name = "enabled"];
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // int32 rank = 3[json_name = "rank"];
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.interface.v202108alpha1.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::kentik::interface::v202108alpha1::Match* match_clause_;
  ::kentik::interface::v202108alpha1::Action* action_set_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::kentik::interface::v202108alpha1::DeviceFilter* included_devices_;
  ::kentik::interface::v202108alpha1::DeviceFilter* excluded_devices_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2finterface_2fv202108alpha1_2finterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Interface

// string id = 1[json_name = "id"];
inline void Interface::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.id)
  return _internal_id();
}
inline void Interface::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.id)
}
inline std::string* Interface::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.id)
  return _internal_mutable_id();
}
inline const std::string& Interface::_internal_id() const {
  return id_.Get();
}
inline void Interface::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.id)
}
inline void Interface::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.id)
}
inline void Interface::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.id)
}
inline std::string* Interface::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.id)
}
inline std::string* Interface::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.id)
}

// string device_id = 2[json_name = "deviceId"];
inline void Interface::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.device_id)
  return _internal_device_id();
}
inline void Interface::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.device_id)
}
inline std::string* Interface::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& Interface::_internal_device_id() const {
  return device_id_.Get();
}
inline void Interface::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.device_id)
}
inline void Interface::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.device_id)
}
inline void Interface::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.device_id)
}
inline std::string* Interface::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.device_id)
}
inline std::string* Interface::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.device_id)
}

// string snmp_id = 3[json_name = "snmpId"];
inline void Interface::clear_snmp_id() {
  snmp_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::snmp_id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.snmp_id)
  return _internal_snmp_id();
}
inline void Interface::set_snmp_id(const std::string& value) {
  _internal_set_snmp_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.snmp_id)
}
inline std::string* Interface::mutable_snmp_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.snmp_id)
  return _internal_mutable_snmp_id();
}
inline const std::string& Interface::_internal_snmp_id() const {
  return snmp_id_.Get();
}
inline void Interface::_internal_set_snmp_id(const std::string& value) {
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_snmp_id(std::string&& value) {
  
  snmp_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.snmp_id)
}
inline void Interface::set_snmp_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.snmp_id)
}
inline void Interface::set_snmp_id(const char* value,
    size_t size) {
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.snmp_id)
}
inline std::string* Interface::_internal_mutable_snmp_id() {
  
  return snmp_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_snmp_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.snmp_id)
  return snmp_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_snmp_id(std::string* snmp_id) {
  if (snmp_id != nullptr) {
    
  } else {
    
  }
  snmp_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.snmp_id)
}
inline std::string* Interface::unsafe_arena_release_snmp_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.snmp_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_snmp_id(
    std::string* snmp_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_id != nullptr) {
    
  } else {
    
  }
  snmp_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.snmp_id)
}

// int32 snmp_speed = 4[json_name = "snmpSpeed"];
inline void Interface::clear_snmp_speed() {
  snmp_speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Interface::_internal_snmp_speed() const {
  return snmp_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Interface::snmp_speed() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.snmp_speed)
  return _internal_snmp_speed();
}
inline void Interface::_internal_set_snmp_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  snmp_speed_ = value;
}
inline void Interface::set_snmp_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_snmp_speed(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.snmp_speed)
}

// int32 snmp_type = 5[json_name = "snmpType"];
inline void Interface::clear_snmp_type() {
  snmp_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Interface::_internal_snmp_type() const {
  return snmp_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Interface::snmp_type() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.snmp_type)
  return _internal_snmp_type();
}
inline void Interface::_internal_set_snmp_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  snmp_type_ = value;
}
inline void Interface::set_snmp_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_snmp_type(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.snmp_type)
}

// string snmp_alias = 6[json_name = "snmpAlias"];
inline void Interface::clear_snmp_alias() {
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::snmp_alias() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.snmp_alias)
  return _internal_snmp_alias();
}
inline void Interface::set_snmp_alias(const std::string& value) {
  _internal_set_snmp_alias(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.snmp_alias)
}
inline std::string* Interface::mutable_snmp_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.snmp_alias)
  return _internal_mutable_snmp_alias();
}
inline const std::string& Interface::_internal_snmp_alias() const {
  return snmp_alias_.Get();
}
inline void Interface::_internal_set_snmp_alias(const std::string& value) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_snmp_alias(std::string&& value) {
  
  snmp_alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.snmp_alias)
}
inline void Interface::set_snmp_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.snmp_alias)
}
inline void Interface::set_snmp_alias(const char* value,
    size_t size) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.snmp_alias)
}
inline std::string* Interface::_internal_mutable_snmp_alias() {
  
  return snmp_alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_snmp_alias() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.snmp_alias)
  return snmp_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_snmp_alias(std::string* snmp_alias) {
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.snmp_alias)
}
inline std::string* Interface::unsafe_arena_release_snmp_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.snmp_alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_snmp_alias(
    std::string* snmp_alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.snmp_alias)
}

// string interface_ip = 7[json_name = "interfaceIp"];
inline void Interface::clear_interface_ip() {
  interface_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::interface_ip() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.interface_ip)
  return _internal_interface_ip();
}
inline void Interface::set_interface_ip(const std::string& value) {
  _internal_set_interface_ip(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.interface_ip)
}
inline std::string* Interface::mutable_interface_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.interface_ip)
  return _internal_mutable_interface_ip();
}
inline const std::string& Interface::_internal_interface_ip() const {
  return interface_ip_.Get();
}
inline void Interface::_internal_set_interface_ip(const std::string& value) {
  
  interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_interface_ip(std::string&& value) {
  
  interface_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.interface_ip)
}
inline void Interface::set_interface_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.interface_ip)
}
inline void Interface::set_interface_ip(const char* value,
    size_t size) {
  
  interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.interface_ip)
}
inline std::string* Interface::_internal_mutable_interface_ip() {
  
  return interface_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_interface_ip() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.interface_ip)
  return interface_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_interface_ip(std::string* interface_ip) {
  if (interface_ip != nullptr) {
    
  } else {
    
  }
  interface_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.interface_ip)
}
inline std::string* Interface::unsafe_arena_release_interface_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.interface_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_interface_ip(
    std::string* interface_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_ip != nullptr) {
    
  } else {
    
  }
  interface_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.interface_ip)
}

// string interface_description = 8[json_name = "interfaceDescription"];
inline void Interface::clear_interface_description() {
  interface_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::interface_description() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.interface_description)
  return _internal_interface_description();
}
inline void Interface::set_interface_description(const std::string& value) {
  _internal_set_interface_description(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.interface_description)
}
inline std::string* Interface::mutable_interface_description() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.interface_description)
  return _internal_mutable_interface_description();
}
inline const std::string& Interface::_internal_interface_description() const {
  return interface_description_.Get();
}
inline void Interface::_internal_set_interface_description(const std::string& value) {
  
  interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_interface_description(std::string&& value) {
  
  interface_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.interface_description)
}
inline void Interface::set_interface_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.interface_description)
}
inline void Interface::set_interface_description(const char* value,
    size_t size) {
  
  interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.interface_description)
}
inline std::string* Interface::_internal_mutable_interface_description() {
  
  return interface_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_interface_description() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.interface_description)
  return interface_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_interface_description(std::string* interface_description) {
  if (interface_description != nullptr) {
    
  } else {
    
  }
  interface_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.interface_description)
}
inline std::string* Interface::unsafe_arena_release_interface_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.interface_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_interface_description(
    std::string* interface_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_description != nullptr) {
    
  } else {
    
  }
  interface_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.interface_description)
}

// .google.protobuf.Timestamp cdate = 9[json_name = "cdate"];
inline bool Interface::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool Interface::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interface::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interface::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.cdate)
  return _internal_cdate();
}
inline void Interface::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.cdate)
  return _internal_mutable_cdate();
}
inline void Interface::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.cdate)
}

// .google.protobuf.Timestamp edate = 10[json_name = "edate"];
inline bool Interface::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool Interface::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interface::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interface::edate() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.edate)
  return _internal_edate();
}
inline void Interface::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interface::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.edate)
  return _internal_mutable_edate();
}
inline void Interface::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.edate)
}

// string interface_ip_netmask = 11[json_name = "interfaceIpNetmask"];
inline void Interface::clear_interface_ip_netmask() {
  interface_ip_netmask_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::interface_ip_netmask() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
  return _internal_interface_ip_netmask();
}
inline void Interface::set_interface_ip_netmask(const std::string& value) {
  _internal_set_interface_ip_netmask(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
}
inline std::string* Interface::mutable_interface_ip_netmask() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
  return _internal_mutable_interface_ip_netmask();
}
inline const std::string& Interface::_internal_interface_ip_netmask() const {
  return interface_ip_netmask_.Get();
}
inline void Interface::_internal_set_interface_ip_netmask(const std::string& value) {
  
  interface_ip_netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_interface_ip_netmask(std::string&& value) {
  
  interface_ip_netmask_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
}
inline void Interface::set_interface_ip_netmask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_ip_netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
}
inline void Interface::set_interface_ip_netmask(const char* value,
    size_t size) {
  
  interface_ip_netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
}
inline std::string* Interface::_internal_mutable_interface_ip_netmask() {
  
  return interface_ip_netmask_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_interface_ip_netmask() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
  return interface_ip_netmask_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_interface_ip_netmask(std::string* interface_ip_netmask) {
  if (interface_ip_netmask != nullptr) {
    
  } else {
    
  }
  interface_ip_netmask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_ip_netmask,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
}
inline std::string* Interface::unsafe_arena_release_interface_ip_netmask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_ip_netmask_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_interface_ip_netmask(
    std::string* interface_ip_netmask) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_ip_netmask != nullptr) {
    
  } else {
    
  }
  interface_ip_netmask_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_ip_netmask, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.interface_ip_netmask)
}

// .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 12[json_name = "connectivityType"];
inline void Interface::clear_connectivity_type() {
  connectivity_type_ = 0;
}
inline ::kentik::interface::v202108alpha1::ConnectivityType Interface::_internal_connectivity_type() const {
  return static_cast< ::kentik::interface::v202108alpha1::ConnectivityType >(connectivity_type_);
}
inline ::kentik::interface::v202108alpha1::ConnectivityType Interface::connectivity_type() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.connectivity_type)
  return _internal_connectivity_type();
}
inline void Interface::_internal_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  
  connectivity_type_ = value;
}
inline void Interface::set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  _internal_set_connectivity_type(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.connectivity_type)
}

// .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 13[json_name = "networkBoundary"];
inline void Interface::clear_network_boundary() {
  network_boundary_ = 0;
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary Interface::_internal_network_boundary() const {
  return static_cast< ::kentik::interface::v202108alpha1::NetworkBoundary >(network_boundary_);
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary Interface::network_boundary() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.network_boundary)
  return _internal_network_boundary();
}
inline void Interface::_internal_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  
  network_boundary_ = value;
}
inline void Interface::set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  _internal_set_network_boundary(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.network_boundary)
}

// repeated int32 top_nexthop_asns = 14[json_name = "topNexthopAsns"];
inline int Interface::_internal_top_nexthop_asns_size() const {
  return top_nexthop_asns_.size();
}
inline int Interface::top_nexthop_asns_size() const {
  return _internal_top_nexthop_asns_size();
}
inline void Interface::clear_top_nexthop_asns() {
  top_nexthop_asns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Interface::_internal_top_nexthop_asns(int index) const {
  return top_nexthop_asns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Interface::top_nexthop_asns(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.top_nexthop_asns)
  return _internal_top_nexthop_asns(index);
}
inline void Interface::set_top_nexthop_asns(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  top_nexthop_asns_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.top_nexthop_asns)
}
inline void Interface::_internal_add_top_nexthop_asns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  top_nexthop_asns_.Add(value);
}
inline void Interface::add_top_nexthop_asns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_top_nexthop_asns(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.Interface.top_nexthop_asns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Interface::_internal_top_nexthop_asns() const {
  return top_nexthop_asns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Interface::top_nexthop_asns() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.Interface.top_nexthop_asns)
  return _internal_top_nexthop_asns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Interface::_internal_mutable_top_nexthop_asns() {
  return &top_nexthop_asns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Interface::mutable_top_nexthop_asns() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.Interface.top_nexthop_asns)
  return _internal_mutable_top_nexthop_asns();
}

// string provider = 15[json_name = "provider"];
inline void Interface::clear_provider() {
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Interface.provider)
  return _internal_provider();
}
inline void Interface::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Interface.provider)
}
inline std::string* Interface::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Interface.provider)
  return _internal_mutable_provider();
}
inline const std::string& Interface::_internal_provider() const {
  return provider_.Get();
}
inline void Interface::_internal_set_provider(const std::string& value) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_provider(std::string&& value) {
  
  provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Interface.provider)
}
inline void Interface::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Interface.provider)
}
inline void Interface::set_provider(const char* value,
    size_t size) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Interface.provider)
}
inline std::string* Interface::_internal_mutable_provider() {
  
  return provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_provider() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Interface.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Interface.provider)
}
inline std::string* Interface::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Interface.provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_provider(
    std::string* provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Interface.provider)
}

// -------------------------------------------------------------------

// InterfaceClassification

// bool classified = 1[json_name = "classified"];
inline void InterfaceClassification::clear_classified() {
  classified_ = false;
}
inline bool InterfaceClassification::_internal_classified() const {
  return classified_;
}
inline bool InterfaceClassification::classified() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassification.classified)
  return _internal_classified();
}
inline void InterfaceClassification::_internal_set_classified(bool value) {
  
  classified_ = value;
}
inline void InterfaceClassification::set_classified(bool value) {
  _internal_set_classified(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassification.classified)
}

// .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
inline void InterfaceClassification::clear_connectivity_type() {
  connectivity_type_ = 0;
}
inline ::kentik::interface::v202108alpha1::ConnectivityType InterfaceClassification::_internal_connectivity_type() const {
  return static_cast< ::kentik::interface::v202108alpha1::ConnectivityType >(connectivity_type_);
}
inline ::kentik::interface::v202108alpha1::ConnectivityType InterfaceClassification::connectivity_type() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassification.connectivity_type)
  return _internal_connectivity_type();
}
inline void InterfaceClassification::_internal_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  
  connectivity_type_ = value;
}
inline void InterfaceClassification::set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  _internal_set_connectivity_type(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassification.connectivity_type)
}

// .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
inline void InterfaceClassification::clear_network_boundary() {
  network_boundary_ = 0;
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary InterfaceClassification::_internal_network_boundary() const {
  return static_cast< ::kentik::interface::v202108alpha1::NetworkBoundary >(network_boundary_);
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary InterfaceClassification::network_boundary() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassification.network_boundary)
  return _internal_network_boundary();
}
inline void InterfaceClassification::_internal_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  
  network_boundary_ = value;
}
inline void InterfaceClassification::set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  _internal_set_network_boundary(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassification.network_boundary)
}

// -------------------------------------------------------------------

// ClassifyCounter

// int32 count = 1[json_name = "count"];
inline void ClassifyCounter::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ClassifyCounter.count)
  return _internal_count();
}
inline void ClassifyCounter::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ClassifyCounter::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ClassifyCounter.count)
}

// int32 external_count = 2[json_name = "externalCount"];
inline void ClassifyCounter::clear_external_count() {
  external_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::_internal_external_count() const {
  return external_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::external_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ClassifyCounter.external_count)
  return _internal_external_count();
}
inline void ClassifyCounter::_internal_set_external_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  external_count_ = value;
}
inline void ClassifyCounter::set_external_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_external_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ClassifyCounter.external_count)
}

// int32 free_pni_count = 3[json_name = "freePniCount"];
inline void ClassifyCounter::clear_free_pni_count() {
  free_pni_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::_internal_free_pni_count() const {
  return free_pni_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::free_pni_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ClassifyCounter.free_pni_count)
  return _internal_free_pni_count();
}
inline void ClassifyCounter::_internal_set_free_pni_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_pni_count_ = value;
}
inline void ClassifyCounter::set_free_pni_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_pni_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ClassifyCounter.free_pni_count)
}

// int32 ix_count = 4[json_name = "ixCount"];
inline void ClassifyCounter::clear_ix_count() {
  ix_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::_internal_ix_count() const {
  return ix_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::ix_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ClassifyCounter.ix_count)
  return _internal_ix_count();
}
inline void ClassifyCounter::_internal_set_ix_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ix_count_ = value;
}
inline void ClassifyCounter::set_ix_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ix_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ClassifyCounter.ix_count)
}

// int32 provider_count = 5[json_name = "providerCount"];
inline void ClassifyCounter::clear_provider_count() {
  provider_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::_internal_provider_count() const {
  return provider_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::provider_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ClassifyCounter.provider_count)
  return _internal_provider_count();
}
inline void ClassifyCounter::_internal_set_provider_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  provider_count_ = value;
}
inline void ClassifyCounter::set_provider_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_provider_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ClassifyCounter.provider_count)
}

// int32 transit_count = 6[json_name = "transitCount"];
inline void ClassifyCounter::clear_transit_count() {
  transit_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::_internal_transit_count() const {
  return transit_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyCounter::transit_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ClassifyCounter.transit_count)
  return _internal_transit_count();
}
inline void ClassifyCounter::_internal_set_transit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transit_count_ = value;
}
inline void ClassifyCounter::set_transit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transit_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ClassifyCounter.transit_count)
}

// -------------------------------------------------------------------

// InterfaceClassifyInfo

// string device_id = 1[json_name = "deviceId"];
inline void InterfaceClassifyInfo::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
  return _internal_device_id();
}
inline void InterfaceClassifyInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
}
inline std::string* InterfaceClassifyInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& InterfaceClassifyInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
}
inline void InterfaceClassifyInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
}
inline void InterfaceClassifyInfo::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.device_id)
}

// string snmp_id = 2[json_name = "snmpId"];
inline void InterfaceClassifyInfo::clear_snmp_id() {
  snmp_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::snmp_id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
  return _internal_snmp_id();
}
inline void InterfaceClassifyInfo::set_snmp_id(const std::string& value) {
  _internal_set_snmp_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
}
inline std::string* InterfaceClassifyInfo::mutable_snmp_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
  return _internal_mutable_snmp_id();
}
inline const std::string& InterfaceClassifyInfo::_internal_snmp_id() const {
  return snmp_id_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_snmp_id(const std::string& value) {
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_snmp_id(std::string&& value) {
  
  snmp_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
}
inline void InterfaceClassifyInfo::set_snmp_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
}
inline void InterfaceClassifyInfo::set_snmp_id(const char* value,
    size_t size) {
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_snmp_id() {
  
  return snmp_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_snmp_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
  return snmp_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_snmp_id(std::string* snmp_id) {
  if (snmp_id != nullptr) {
    
  } else {
    
  }
  snmp_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_snmp_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_snmp_id(
    std::string* snmp_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_id != nullptr) {
    
  } else {
    
  }
  snmp_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_id)
}

// string snmp_alias = 3[json_name = "snmpAlias"];
inline void InterfaceClassifyInfo::clear_snmp_alias() {
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::snmp_alias() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
  return _internal_snmp_alias();
}
inline void InterfaceClassifyInfo::set_snmp_alias(const std::string& value) {
  _internal_set_snmp_alias(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
}
inline std::string* InterfaceClassifyInfo::mutable_snmp_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
  return _internal_mutable_snmp_alias();
}
inline const std::string& InterfaceClassifyInfo::_internal_snmp_alias() const {
  return snmp_alias_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_snmp_alias(const std::string& value) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_snmp_alias(std::string&& value) {
  
  snmp_alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
}
inline void InterfaceClassifyInfo::set_snmp_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
}
inline void InterfaceClassifyInfo::set_snmp_alias(const char* value,
    size_t size) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_snmp_alias() {
  
  return snmp_alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_snmp_alias() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
  return snmp_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_snmp_alias(std::string* snmp_alias) {
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_snmp_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_snmp_alias(
    std::string* snmp_alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.snmp_alias)
}

// string interface_ip = 4[json_name = "interfaceIp"];
inline void InterfaceClassifyInfo::clear_interface_ip() {
  interface_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::interface_ip() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
  return _internal_interface_ip();
}
inline void InterfaceClassifyInfo::set_interface_ip(const std::string& value) {
  _internal_set_interface_ip(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
}
inline std::string* InterfaceClassifyInfo::mutable_interface_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
  return _internal_mutable_interface_ip();
}
inline const std::string& InterfaceClassifyInfo::_internal_interface_ip() const {
  return interface_ip_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_interface_ip(const std::string& value) {
  
  interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_interface_ip(std::string&& value) {
  
  interface_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
}
inline void InterfaceClassifyInfo::set_interface_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
}
inline void InterfaceClassifyInfo::set_interface_ip(const char* value,
    size_t size) {
  
  interface_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_interface_ip() {
  
  return interface_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_interface_ip() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
  return interface_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_interface_ip(std::string* interface_ip) {
  if (interface_ip != nullptr) {
    
  } else {
    
  }
  interface_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_interface_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_interface_ip(
    std::string* interface_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_ip != nullptr) {
    
  } else {
    
  }
  interface_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip)
}

// string interface_ip_asn = 5[json_name = "interfaceIpAsn"];
inline void InterfaceClassifyInfo::clear_interface_ip_asn() {
  interface_ip_asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::interface_ip_asn() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
  return _internal_interface_ip_asn();
}
inline void InterfaceClassifyInfo::set_interface_ip_asn(const std::string& value) {
  _internal_set_interface_ip_asn(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
}
inline std::string* InterfaceClassifyInfo::mutable_interface_ip_asn() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
  return _internal_mutable_interface_ip_asn();
}
inline const std::string& InterfaceClassifyInfo::_internal_interface_ip_asn() const {
  return interface_ip_asn_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_interface_ip_asn(const std::string& value) {
  
  interface_ip_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_interface_ip_asn(std::string&& value) {
  
  interface_ip_asn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
}
inline void InterfaceClassifyInfo::set_interface_ip_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_ip_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
}
inline void InterfaceClassifyInfo::set_interface_ip_asn(const char* value,
    size_t size) {
  
  interface_ip_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_interface_ip_asn() {
  
  return interface_ip_asn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_interface_ip_asn() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
  return interface_ip_asn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_interface_ip_asn(std::string* interface_ip_asn) {
  if (interface_ip_asn != nullptr) {
    
  } else {
    
  }
  interface_ip_asn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_ip_asn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_interface_ip_asn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_ip_asn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_interface_ip_asn(
    std::string* interface_ip_asn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_ip_asn != nullptr) {
    
  } else {
    
  }
  interface_ip_asn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_ip_asn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.interface_ip_asn)
}

// bool is_internal_ip = 6[json_name = "isInternalIp"];
inline void InterfaceClassifyInfo::clear_is_internal_ip() {
  is_internal_ip_ = false;
}
inline bool InterfaceClassifyInfo::_internal_is_internal_ip() const {
  return is_internal_ip_;
}
inline bool InterfaceClassifyInfo::is_internal_ip() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.is_internal_ip)
  return _internal_is_internal_ip();
}
inline void InterfaceClassifyInfo::_internal_set_is_internal_ip(bool value) {
  
  is_internal_ip_ = value;
}
inline void InterfaceClassifyInfo::set_is_internal_ip(bool value) {
  _internal_set_is_internal_ip(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.is_internal_ip)
}

// bool is_internal_asn = 7[json_name = "isInternalAsn"];
inline void InterfaceClassifyInfo::clear_is_internal_asn() {
  is_internal_asn_ = false;
}
inline bool InterfaceClassifyInfo::_internal_is_internal_asn() const {
  return is_internal_asn_;
}
inline bool InterfaceClassifyInfo::is_internal_asn() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.is_internal_asn)
  return _internal_is_internal_asn();
}
inline void InterfaceClassifyInfo::_internal_set_is_internal_asn(bool value) {
  
  is_internal_asn_ = value;
}
inline void InterfaceClassifyInfo::set_is_internal_asn(bool value) {
  _internal_set_is_internal_asn(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.is_internal_asn)
}

// repeated string top_nexthop_asns = 8[json_name = "topNexthopAsns"];
inline int InterfaceClassifyInfo::_internal_top_nexthop_asns_size() const {
  return top_nexthop_asns_.size();
}
inline int InterfaceClassifyInfo::top_nexthop_asns_size() const {
  return _internal_top_nexthop_asns_size();
}
inline void InterfaceClassifyInfo::clear_top_nexthop_asns() {
  top_nexthop_asns_.Clear();
}
inline std::string* InterfaceClassifyInfo::add_top_nexthop_asns() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  return _internal_add_top_nexthop_asns();
}
inline const std::string& InterfaceClassifyInfo::_internal_top_nexthop_asns(int index) const {
  return top_nexthop_asns_.Get(index);
}
inline const std::string& InterfaceClassifyInfo::top_nexthop_asns(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  return _internal_top_nexthop_asns(index);
}
inline std::string* InterfaceClassifyInfo::mutable_top_nexthop_asns(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  return top_nexthop_asns_.Mutable(index);
}
inline void InterfaceClassifyInfo::set_top_nexthop_asns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  top_nexthop_asns_.Mutable(index)->assign(value);
}
inline void InterfaceClassifyInfo::set_top_nexthop_asns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  top_nexthop_asns_.Mutable(index)->assign(std::move(value));
}
inline void InterfaceClassifyInfo::set_top_nexthop_asns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_nexthop_asns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
}
inline void InterfaceClassifyInfo::set_top_nexthop_asns(int index, const char* value, size_t size) {
  top_nexthop_asns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
}
inline std::string* InterfaceClassifyInfo::_internal_add_top_nexthop_asns() {
  return top_nexthop_asns_.Add();
}
inline void InterfaceClassifyInfo::add_top_nexthop_asns(const std::string& value) {
  top_nexthop_asns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
}
inline void InterfaceClassifyInfo::add_top_nexthop_asns(std::string&& value) {
  top_nexthop_asns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
}
inline void InterfaceClassifyInfo::add_top_nexthop_asns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_nexthop_asns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
}
inline void InterfaceClassifyInfo::add_top_nexthop_asns(const char* value, size_t size) {
  top_nexthop_asns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InterfaceClassifyInfo::top_nexthop_asns() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  return top_nexthop_asns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InterfaceClassifyInfo::mutable_top_nexthop_asns() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceClassifyInfo.top_nexthop_asns)
  return &top_nexthop_asns_;
}

// string pdb_global_name = 9[json_name = "pdbGlobalName"];
inline void InterfaceClassifyInfo::clear_pdb_global_name() {
  pdb_global_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::pdb_global_name() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
  return _internal_pdb_global_name();
}
inline void InterfaceClassifyInfo::set_pdb_global_name(const std::string& value) {
  _internal_set_pdb_global_name(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
}
inline std::string* InterfaceClassifyInfo::mutable_pdb_global_name() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
  return _internal_mutable_pdb_global_name();
}
inline const std::string& InterfaceClassifyInfo::_internal_pdb_global_name() const {
  return pdb_global_name_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_pdb_global_name(const std::string& value) {
  
  pdb_global_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_pdb_global_name(std::string&& value) {
  
  pdb_global_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
}
inline void InterfaceClassifyInfo::set_pdb_global_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pdb_global_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
}
inline void InterfaceClassifyInfo::set_pdb_global_name(const char* value,
    size_t size) {
  
  pdb_global_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_pdb_global_name() {
  
  return pdb_global_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_pdb_global_name() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
  return pdb_global_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_pdb_global_name(std::string* pdb_global_name) {
  if (pdb_global_name != nullptr) {
    
  } else {
    
  }
  pdb_global_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pdb_global_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_pdb_global_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pdb_global_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_pdb_global_name(
    std::string* pdb_global_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pdb_global_name != nullptr) {
    
  } else {
    
  }
  pdb_global_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pdb_global_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.pdb_global_name)
}

// .kentik.interface.v202108alpha1.InterfaceClassification auto_classification = 10[json_name = "autoClassification"];
inline bool InterfaceClassifyInfo::_internal_has_auto_classification() const {
  return this != internal_default_instance() && auto_classification_ != nullptr;
}
inline bool InterfaceClassifyInfo::has_auto_classification() const {
  return _internal_has_auto_classification();
}
inline void InterfaceClassifyInfo::clear_auto_classification() {
  if (GetArena() == nullptr && auto_classification_ != nullptr) {
    delete auto_classification_;
  }
  auto_classification_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::InterfaceClassification& InterfaceClassifyInfo::_internal_auto_classification() const {
  const ::kentik::interface::v202108alpha1::InterfaceClassification* p = auto_classification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::InterfaceClassification*>(
      &::kentik::interface::v202108alpha1::_InterfaceClassification_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::InterfaceClassification& InterfaceClassifyInfo::auto_classification() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classification)
  return _internal_auto_classification();
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_auto_classification(
    ::kentik::interface::v202108alpha1::InterfaceClassification* auto_classification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_classification_);
  }
  auto_classification_ = auto_classification;
  if (auto_classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classification)
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::release_auto_classification() {
  auto temp = unsafe_arena_release_auto_classification();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::unsafe_arena_release_auto_classification() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classification)
  
  ::kentik::interface::v202108alpha1::InterfaceClassification* temp = auto_classification_;
  auto_classification_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::_internal_mutable_auto_classification() {
  
  if (auto_classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::InterfaceClassification>(GetArena());
    auto_classification_ = p;
  }
  return auto_classification_;
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::mutable_auto_classification() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classification)
  return _internal_mutable_auto_classification();
}
inline void InterfaceClassifyInfo::set_allocated_auto_classification(::kentik::interface::v202108alpha1::InterfaceClassification* auto_classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auto_classification_;
  }
  if (auto_classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auto_classification);
    if (message_arena != submessage_arena) {
      auto_classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_classification, submessage_arena);
    }
    
  } else {
    
  }
  auto_classification_ = auto_classification;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classification)
}

// .kentik.interface.v202108alpha1.InterfaceClassification previous_classification = 11[json_name = "previousClassification"];
inline bool InterfaceClassifyInfo::_internal_has_previous_classification() const {
  return this != internal_default_instance() && previous_classification_ != nullptr;
}
inline bool InterfaceClassifyInfo::has_previous_classification() const {
  return _internal_has_previous_classification();
}
inline void InterfaceClassifyInfo::clear_previous_classification() {
  if (GetArena() == nullptr && previous_classification_ != nullptr) {
    delete previous_classification_;
  }
  previous_classification_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::InterfaceClassification& InterfaceClassifyInfo::_internal_previous_classification() const {
  const ::kentik::interface::v202108alpha1::InterfaceClassification* p = previous_classification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::InterfaceClassification*>(
      &::kentik::interface::v202108alpha1::_InterfaceClassification_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::InterfaceClassification& InterfaceClassifyInfo::previous_classification() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previous_classification)
  return _internal_previous_classification();
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_previous_classification(
    ::kentik::interface::v202108alpha1::InterfaceClassification* previous_classification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_classification_);
  }
  previous_classification_ = previous_classification;
  if (previous_classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previous_classification)
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::release_previous_classification() {
  auto temp = unsafe_arena_release_previous_classification();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::unsafe_arena_release_previous_classification() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previous_classification)
  
  ::kentik::interface::v202108alpha1::InterfaceClassification* temp = previous_classification_;
  previous_classification_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::_internal_mutable_previous_classification() {
  
  if (previous_classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::InterfaceClassification>(GetArena());
    previous_classification_ = p;
  }
  return previous_classification_;
}
inline ::kentik::interface::v202108alpha1::InterfaceClassification* InterfaceClassifyInfo::mutable_previous_classification() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previous_classification)
  return _internal_mutable_previous_classification();
}
inline void InterfaceClassifyInfo::set_allocated_previous_classification(::kentik::interface::v202108alpha1::InterfaceClassification* previous_classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previous_classification_;
  }
  if (previous_classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previous_classification);
    if (message_arena != submessage_arena) {
      previous_classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_classification, submessage_arena);
    }
    
  } else {
    
  }
  previous_classification_ = previous_classification;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previous_classification)
}

// string provider = 12[json_name = "provider"];
inline void InterfaceClassifyInfo::clear_provider() {
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
  return _internal_provider();
}
inline void InterfaceClassifyInfo::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
}
inline std::string* InterfaceClassifyInfo::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
  return _internal_mutable_provider();
}
inline const std::string& InterfaceClassifyInfo::_internal_provider() const {
  return provider_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_provider(const std::string& value) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_provider(std::string&& value) {
  
  provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
}
inline void InterfaceClassifyInfo::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
}
inline void InterfaceClassifyInfo::set_provider(const char* value,
    size_t size) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_provider() {
  
  return provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_provider() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_provider(
    std::string* provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider)
}

// int32 network_boundary_confidence = 13[json_name = "networkBoundaryConfidence"];
inline void InterfaceClassifyInfo::clear_network_boundary_confidence() {
  network_boundary_confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceClassifyInfo::_internal_network_boundary_confidence() const {
  return network_boundary_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceClassifyInfo::network_boundary_confidence() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.network_boundary_confidence)
  return _internal_network_boundary_confidence();
}
inline void InterfaceClassifyInfo::_internal_set_network_boundary_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_boundary_confidence_ = value;
}
inline void InterfaceClassifyInfo::set_network_boundary_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_network_boundary_confidence(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.network_boundary_confidence)
}

// int32 connectivity_type_confidence = 14[json_name = "connectivityTypeConfidence"];
inline void InterfaceClassifyInfo::clear_connectivity_type_confidence() {
  connectivity_type_confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceClassifyInfo::_internal_connectivity_type_confidence() const {
  return connectivity_type_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceClassifyInfo::connectivity_type_confidence() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.connectivity_type_confidence)
  return _internal_connectivity_type_confidence();
}
inline void InterfaceClassifyInfo::_internal_set_connectivity_type_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connectivity_type_confidence_ = value;
}
inline void InterfaceClassifyInfo::set_connectivity_type_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connectivity_type_confidence(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.connectivity_type_confidence)
}

// int32 provider_confidence = 15[json_name = "providerConfidence"];
inline void InterfaceClassifyInfo::clear_provider_confidence() {
  provider_confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceClassifyInfo::_internal_provider_confidence() const {
  return provider_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceClassifyInfo::provider_confidence() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider_confidence)
  return _internal_provider_confidence();
}
inline void InterfaceClassifyInfo::_internal_set_provider_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  provider_confidence_ = value;
}
inline void InterfaceClassifyInfo::set_provider_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_provider_confidence(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider_confidence)
}

// bool auto_classified_provider = 16[json_name = "autoClassifiedProvider"];
inline void InterfaceClassifyInfo::clear_auto_classified_provider() {
  auto_classified_provider_ = false;
}
inline bool InterfaceClassifyInfo::_internal_auto_classified_provider() const {
  return auto_classified_provider_;
}
inline bool InterfaceClassifyInfo::auto_classified_provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classified_provider)
  return _internal_auto_classified_provider();
}
inline void InterfaceClassifyInfo::_internal_set_auto_classified_provider(bool value) {
  
  auto_classified_provider_ = value;
}
inline void InterfaceClassifyInfo::set_auto_classified_provider(bool value) {
  _internal_set_auto_classified_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classified_provider)
}

// string previously_classified_provider = 17[json_name = "previouslyClassifiedProvider"];
inline void InterfaceClassifyInfo::clear_previously_classified_provider() {
  previously_classified_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceClassifyInfo::previously_classified_provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
  return _internal_previously_classified_provider();
}
inline void InterfaceClassifyInfo::set_previously_classified_provider(const std::string& value) {
  _internal_set_previously_classified_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
}
inline std::string* InterfaceClassifyInfo::mutable_previously_classified_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
  return _internal_mutable_previously_classified_provider();
}
inline const std::string& InterfaceClassifyInfo::_internal_previously_classified_provider() const {
  return previously_classified_provider_.Get();
}
inline void InterfaceClassifyInfo::_internal_set_previously_classified_provider(const std::string& value) {
  
  previously_classified_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceClassifyInfo::set_previously_classified_provider(std::string&& value) {
  
  previously_classified_provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
}
inline void InterfaceClassifyInfo::set_previously_classified_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previously_classified_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
}
inline void InterfaceClassifyInfo::set_previously_classified_provider(const char* value,
    size_t size) {
  
  previously_classified_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
}
inline std::string* InterfaceClassifyInfo::_internal_mutable_previously_classified_provider() {
  
  return previously_classified_provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceClassifyInfo::release_previously_classified_provider() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
  return previously_classified_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceClassifyInfo::set_allocated_previously_classified_provider(std::string* previously_classified_provider) {
  if (previously_classified_provider != nullptr) {
    
  } else {
    
  }
  previously_classified_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previously_classified_provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
}
inline std::string* InterfaceClassifyInfo::unsafe_arena_release_previously_classified_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return previously_classified_provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceClassifyInfo::unsafe_arena_set_allocated_previously_classified_provider(
    std::string* previously_classified_provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (previously_classified_provider != nullptr) {
    
  } else {
    
  }
  previously_classified_provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      previously_classified_provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_provider)
}

// bool previously_classified_external = 18[json_name = "previouslyClassifiedExternal"];
inline void InterfaceClassifyInfo::clear_previously_classified_external() {
  previously_classified_external_ = false;
}
inline bool InterfaceClassifyInfo::_internal_previously_classified_external() const {
  return previously_classified_external_;
}
inline bool InterfaceClassifyInfo::previously_classified_external() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_external)
  return _internal_previously_classified_external();
}
inline void InterfaceClassifyInfo::_internal_set_previously_classified_external(bool value) {
  
  previously_classified_external_ = value;
}
inline void InterfaceClassifyInfo::set_previously_classified_external(bool value) {
  _internal_set_previously_classified_external(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.previously_classified_external)
}

// bool ip_asn_matched = 19[json_name = "ipAsnMatched"];
inline void InterfaceClassifyInfo::clear_ip_asn_matched() {
  ip_asn_matched_ = false;
}
inline bool InterfaceClassifyInfo::_internal_ip_asn_matched() const {
  return ip_asn_matched_;
}
inline bool InterfaceClassifyInfo::ip_asn_matched() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.ip_asn_matched)
  return _internal_ip_asn_matched();
}
inline void InterfaceClassifyInfo::_internal_set_ip_asn_matched(bool value) {
  
  ip_asn_matched_ = value;
}
inline void InterfaceClassifyInfo::set_ip_asn_matched(bool value) {
  _internal_set_ip_asn_matched(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.ip_asn_matched)
}

// bool ix_matched = 20[json_name = "ixMatched"];
inline void InterfaceClassifyInfo::clear_ix_matched() {
  ix_matched_ = false;
}
inline bool InterfaceClassifyInfo::_internal_ix_matched() const {
  return ix_matched_;
}
inline bool InterfaceClassifyInfo::ix_matched() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.ix_matched)
  return _internal_ix_matched();
}
inline void InterfaceClassifyInfo::_internal_set_ix_matched(bool value) {
  
  ix_matched_ = value;
}
inline void InterfaceClassifyInfo::set_ix_matched(bool value) {
  _internal_set_ix_matched(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.ix_matched)
}

// bool nexthop_matched = 21[json_name = "nexthopMatched"];
inline void InterfaceClassifyInfo::clear_nexthop_matched() {
  nexthop_matched_ = false;
}
inline bool InterfaceClassifyInfo::_internal_nexthop_matched() const {
  return nexthop_matched_;
}
inline bool InterfaceClassifyInfo::nexthop_matched() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.nexthop_matched)
  return _internal_nexthop_matched();
}
inline void InterfaceClassifyInfo::_internal_set_nexthop_matched(bool value) {
  
  nexthop_matched_ = value;
}
inline void InterfaceClassifyInfo::set_nexthop_matched(bool value) {
  _internal_set_nexthop_matched(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.nexthop_matched)
}

// bool connectivity_type_matched = 22[json_name = "connectivityTypeMatched"];
inline void InterfaceClassifyInfo::clear_connectivity_type_matched() {
  connectivity_type_matched_ = false;
}
inline bool InterfaceClassifyInfo::_internal_connectivity_type_matched() const {
  return connectivity_type_matched_;
}
inline bool InterfaceClassifyInfo::connectivity_type_matched() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.connectivity_type_matched)
  return _internal_connectivity_type_matched();
}
inline void InterfaceClassifyInfo::_internal_set_connectivity_type_matched(bool value) {
  
  connectivity_type_matched_ = value;
}
inline void InterfaceClassifyInfo::set_connectivity_type_matched(bool value) {
  _internal_set_connectivity_type_matched(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.connectivity_type_matched)
}

// bool provider_matched = 23[json_name = "providerMatched"];
inline void InterfaceClassifyInfo::clear_provider_matched() {
  provider_matched_ = false;
}
inline bool InterfaceClassifyInfo::_internal_provider_matched() const {
  return provider_matched_;
}
inline bool InterfaceClassifyInfo::provider_matched() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider_matched)
  return _internal_provider_matched();
}
inline void InterfaceClassifyInfo::_internal_set_provider_matched(bool value) {
  
  provider_matched_ = value;
}
inline void InterfaceClassifyInfo::set_provider_matched(bool value) {
  _internal_set_provider_matched(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.provider_matched)
}

// bool changed_classification = 24[json_name = "changedClassification"];
inline void InterfaceClassifyInfo::clear_changed_classification() {
  changed_classification_ = false;
}
inline bool InterfaceClassifyInfo::_internal_changed_classification() const {
  return changed_classification_;
}
inline bool InterfaceClassifyInfo::changed_classification() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceClassifyInfo.changed_classification)
  return _internal_changed_classification();
}
inline void InterfaceClassifyInfo::_internal_set_changed_classification(bool value) {
  
  changed_classification_ = value;
}
inline void InterfaceClassifyInfo::set_changed_classification(bool value) {
  _internal_set_changed_classification(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceClassifyInfo.changed_classification)
}

// -------------------------------------------------------------------

// DeviceClassifyInfo

// string device_id = 1[json_name = "deviceId"];
inline void DeviceClassifyInfo::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceClassifyInfo::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
  return _internal_device_id();
}
inline void DeviceClassifyInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
}
inline std::string* DeviceClassifyInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DeviceClassifyInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void DeviceClassifyInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceClassifyInfo::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
}
inline void DeviceClassifyInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
}
inline void DeviceClassifyInfo::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
}
inline std::string* DeviceClassifyInfo::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceClassifyInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceClassifyInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
}
inline std::string* DeviceClassifyInfo::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceClassifyInfo::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.DeviceClassifyInfo.device_id)
}

// int32 total_interfaces = 2[json_name = "totalInterfaces"];
inline void DeviceClassifyInfo::clear_total_interfaces() {
  total_interfaces_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_total_interfaces() const {
  return total_interfaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::total_interfaces() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.total_interfaces)
  return _internal_total_interfaces();
}
inline void DeviceClassifyInfo::_internal_set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_interfaces_ = value;
}
inline void DeviceClassifyInfo::set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_interfaces(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.total_interfaces)
}

// .kentik.interface.v202108alpha1.ClassifyCounter previously_classified_counter = 3[json_name = "previouslyClassifiedCounter"];
inline bool DeviceClassifyInfo::_internal_has_previously_classified_counter() const {
  return this != internal_default_instance() && previously_classified_counter_ != nullptr;
}
inline bool DeviceClassifyInfo::has_previously_classified_counter() const {
  return _internal_has_previously_classified_counter();
}
inline void DeviceClassifyInfo::clear_previously_classified_counter() {
  if (GetArena() == nullptr && previously_classified_counter_ != nullptr) {
    delete previously_classified_counter_;
  }
  previously_classified_counter_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& DeviceClassifyInfo::_internal_previously_classified_counter() const {
  const ::kentik::interface::v202108alpha1::ClassifyCounter* p = previously_classified_counter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      &::kentik::interface::v202108alpha1::_ClassifyCounter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& DeviceClassifyInfo::previously_classified_counter() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.previously_classified_counter)
  return _internal_previously_classified_counter();
}
inline void DeviceClassifyInfo::unsafe_arena_set_allocated_previously_classified_counter(
    ::kentik::interface::v202108alpha1::ClassifyCounter* previously_classified_counter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previously_classified_counter_);
  }
  previously_classified_counter_ = previously_classified_counter;
  if (previously_classified_counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.DeviceClassifyInfo.previously_classified_counter)
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::release_previously_classified_counter() {
  auto temp = unsafe_arena_release_previously_classified_counter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::unsafe_arena_release_previously_classified_counter() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.DeviceClassifyInfo.previously_classified_counter)
  
  ::kentik::interface::v202108alpha1::ClassifyCounter* temp = previously_classified_counter_;
  previously_classified_counter_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::_internal_mutable_previously_classified_counter() {
  
  if (previously_classified_counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::ClassifyCounter>(GetArena());
    previously_classified_counter_ = p;
  }
  return previously_classified_counter_;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::mutable_previously_classified_counter() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceClassifyInfo.previously_classified_counter)
  return _internal_mutable_previously_classified_counter();
}
inline void DeviceClassifyInfo::set_allocated_previously_classified_counter(::kentik::interface::v202108alpha1::ClassifyCounter* previously_classified_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previously_classified_counter_;
  }
  if (previously_classified_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previously_classified_counter);
    if (message_arena != submessage_arena) {
      previously_classified_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previously_classified_counter, submessage_arena);
    }
    
  } else {
    
  }
  previously_classified_counter_ = previously_classified_counter;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.DeviceClassifyInfo.previously_classified_counter)
}

// .kentik.interface.v202108alpha1.ClassifyCounter auto_classified_counter = 4[json_name = "autoClassifiedCounter"];
inline bool DeviceClassifyInfo::_internal_has_auto_classified_counter() const {
  return this != internal_default_instance() && auto_classified_counter_ != nullptr;
}
inline bool DeviceClassifyInfo::has_auto_classified_counter() const {
  return _internal_has_auto_classified_counter();
}
inline void DeviceClassifyInfo::clear_auto_classified_counter() {
  if (GetArena() == nullptr && auto_classified_counter_ != nullptr) {
    delete auto_classified_counter_;
  }
  auto_classified_counter_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& DeviceClassifyInfo::_internal_auto_classified_counter() const {
  const ::kentik::interface::v202108alpha1::ClassifyCounter* p = auto_classified_counter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      &::kentik::interface::v202108alpha1::_ClassifyCounter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& DeviceClassifyInfo::auto_classified_counter() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.auto_classified_counter)
  return _internal_auto_classified_counter();
}
inline void DeviceClassifyInfo::unsafe_arena_set_allocated_auto_classified_counter(
    ::kentik::interface::v202108alpha1::ClassifyCounter* auto_classified_counter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_classified_counter_);
  }
  auto_classified_counter_ = auto_classified_counter;
  if (auto_classified_counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.DeviceClassifyInfo.auto_classified_counter)
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::release_auto_classified_counter() {
  auto temp = unsafe_arena_release_auto_classified_counter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::unsafe_arena_release_auto_classified_counter() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.DeviceClassifyInfo.auto_classified_counter)
  
  ::kentik::interface::v202108alpha1::ClassifyCounter* temp = auto_classified_counter_;
  auto_classified_counter_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::_internal_mutable_auto_classified_counter() {
  
  if (auto_classified_counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::ClassifyCounter>(GetArena());
    auto_classified_counter_ = p;
  }
  return auto_classified_counter_;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* DeviceClassifyInfo::mutable_auto_classified_counter() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceClassifyInfo.auto_classified_counter)
  return _internal_mutable_auto_classified_counter();
}
inline void DeviceClassifyInfo::set_allocated_auto_classified_counter(::kentik::interface::v202108alpha1::ClassifyCounter* auto_classified_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auto_classified_counter_;
  }
  if (auto_classified_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auto_classified_counter);
    if (message_arena != submessage_arena) {
      auto_classified_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_classified_counter, submessage_arena);
    }
    
  } else {
    
  }
  auto_classified_counter_ = auto_classified_counter;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.DeviceClassifyInfo.auto_classified_counter)
}

// int32 changed_classification_count = 15[json_name = "changedClassificationCount"];
inline void DeviceClassifyInfo::clear_changed_classification_count() {
  changed_classification_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_changed_classification_count() const {
  return changed_classification_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::changed_classification_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.changed_classification_count)
  return _internal_changed_classification_count();
}
inline void DeviceClassifyInfo::_internal_set_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  changed_classification_count_ = value;
}
inline void DeviceClassifyInfo::set_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changed_classification_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.changed_classification_count)
}

// int32 ip_asn_matched_count = 16[json_name = "ipAsnMatchedCount"];
inline void DeviceClassifyInfo::clear_ip_asn_matched_count() {
  ip_asn_matched_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_ip_asn_matched_count() const {
  return ip_asn_matched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::ip_asn_matched_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.ip_asn_matched_count)
  return _internal_ip_asn_matched_count();
}
inline void DeviceClassifyInfo::_internal_set_ip_asn_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_asn_matched_count_ = value;
}
inline void DeviceClassifyInfo::set_ip_asn_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip_asn_matched_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.ip_asn_matched_count)
}

// int32 ix_matched_count = 17[json_name = "ixMatchedCount"];
inline void DeviceClassifyInfo::clear_ix_matched_count() {
  ix_matched_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_ix_matched_count() const {
  return ix_matched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::ix_matched_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.ix_matched_count)
  return _internal_ix_matched_count();
}
inline void DeviceClassifyInfo::_internal_set_ix_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ix_matched_count_ = value;
}
inline void DeviceClassifyInfo::set_ix_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ix_matched_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.ix_matched_count)
}

// int32 nexthop_matched_count = 18[json_name = "nexthopMatchedCount"];
inline void DeviceClassifyInfo::clear_nexthop_matched_count() {
  nexthop_matched_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_nexthop_matched_count() const {
  return nexthop_matched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::nexthop_matched_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.nexthop_matched_count)
  return _internal_nexthop_matched_count();
}
inline void DeviceClassifyInfo::_internal_set_nexthop_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nexthop_matched_count_ = value;
}
inline void DeviceClassifyInfo::set_nexthop_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nexthop_matched_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.nexthop_matched_count)
}

// int32 connectivity_type_matched_count = 19[json_name = "connectivityTypeMatchedCount"];
inline void DeviceClassifyInfo::clear_connectivity_type_matched_count() {
  connectivity_type_matched_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_connectivity_type_matched_count() const {
  return connectivity_type_matched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::connectivity_type_matched_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.connectivity_type_matched_count)
  return _internal_connectivity_type_matched_count();
}
inline void DeviceClassifyInfo::_internal_set_connectivity_type_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connectivity_type_matched_count_ = value;
}
inline void DeviceClassifyInfo::set_connectivity_type_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connectivity_type_matched_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.connectivity_type_matched_count)
}

// int32 provider_matched_count = 20[json_name = "providerMatchedCount"];
inline void DeviceClassifyInfo::clear_provider_matched_count() {
  provider_matched_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::_internal_provider_matched_count() const {
  return provider_matched_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceClassifyInfo::provider_matched_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.provider_matched_count)
  return _internal_provider_matched_count();
}
inline void DeviceClassifyInfo::_internal_set_provider_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  provider_matched_count_ = value;
}
inline void DeviceClassifyInfo::set_provider_matched_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_provider_matched_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceClassifyInfo.provider_matched_count)
}

// repeated .kentik.interface.v202108alpha1.InterfaceClassifyInfo interfaces = 21[json_name = "interfaces"];
inline int DeviceClassifyInfo::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int DeviceClassifyInfo::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void DeviceClassifyInfo::clear_interfaces() {
  interfaces_.Clear();
}
inline ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* DeviceClassifyInfo::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceClassifyInfo.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo >*
DeviceClassifyInfo::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.DeviceClassifyInfo.interfaces)
  return &interfaces_;
}
inline const ::kentik::interface::v202108alpha1::InterfaceClassifyInfo& DeviceClassifyInfo::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::kentik::interface::v202108alpha1::InterfaceClassifyInfo& DeviceClassifyInfo::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceClassifyInfo.interfaces)
  return _internal_interfaces(index);
}
inline ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* DeviceClassifyInfo::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::kentik::interface::v202108alpha1::InterfaceClassifyInfo* DeviceClassifyInfo::add_interfaces() {
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceClassifyInfo.interfaces)
  return _internal_add_interfaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::InterfaceClassifyInfo >&
DeviceClassifyInfo::interfaces() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.DeviceClassifyInfo.interfaces)
  return interfaces_;
}

// -------------------------------------------------------------------

// InterfaceFilter

// string text = 1[json_name = "text"];
inline void InterfaceFilter::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InterfaceFilter::text() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.text)
  return _internal_text();
}
inline void InterfaceFilter::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.text)
}
inline std::string* InterfaceFilter::mutable_text() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceFilter.text)
  return _internal_mutable_text();
}
inline const std::string& InterfaceFilter::_internal_text() const {
  return text_.Get();
}
inline void InterfaceFilter::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceFilter::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.InterfaceFilter.text)
}
inline void InterfaceFilter::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceFilter.text)
}
inline void InterfaceFilter::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceFilter.text)
}
inline std::string* InterfaceFilter::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceFilter::release_text() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.InterfaceFilter.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceFilter::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.InterfaceFilter.text)
}
inline std::string* InterfaceFilter::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.InterfaceFilter.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceFilter::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.InterfaceFilter.text)
}

// repeated string device_ids = 2[json_name = "deviceIds"];
inline int InterfaceFilter::_internal_device_ids_size() const {
  return device_ids_.size();
}
inline int InterfaceFilter::device_ids_size() const {
  return _internal_device_ids_size();
}
inline void InterfaceFilter::clear_device_ids() {
  device_ids_.Clear();
}
inline std::string* InterfaceFilter::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  return _internal_add_device_ids();
}
inline const std::string& InterfaceFilter::_internal_device_ids(int index) const {
  return device_ids_.Get(index);
}
inline const std::string& InterfaceFilter::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  return _internal_device_ids(index);
}
inline std::string* InterfaceFilter::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  return device_ids_.Mutable(index);
}
inline void InterfaceFilter::set_device_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
inline void InterfaceFilter::set_device_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  device_ids_.Mutable(index)->assign(std::move(value));
}
inline void InterfaceFilter::set_device_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
}
inline void InterfaceFilter::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
}
inline std::string* InterfaceFilter::_internal_add_device_ids() {
  return device_ids_.Add();
}
inline void InterfaceFilter::add_device_ids(const std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
}
inline void InterfaceFilter::add_device_ids(std::string&& value) {
  device_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
}
inline void InterfaceFilter::add_device_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
}
inline void InterfaceFilter::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InterfaceFilter::device_ids() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  return device_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InterfaceFilter::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceFilter.device_ids)
  return &device_ids_;
}

// repeated .kentik.interface.v202108alpha1.ConnectivityType connectivity_types = 3[json_name = "connectivityTypes"];
inline int InterfaceFilter::_internal_connectivity_types_size() const {
  return connectivity_types_.size();
}
inline int InterfaceFilter::connectivity_types_size() const {
  return _internal_connectivity_types_size();
}
inline void InterfaceFilter::clear_connectivity_types() {
  connectivity_types_.Clear();
}
inline ::kentik::interface::v202108alpha1::ConnectivityType InterfaceFilter::_internal_connectivity_types(int index) const {
  return static_cast< ::kentik::interface::v202108alpha1::ConnectivityType >(connectivity_types_.Get(index));
}
inline ::kentik::interface::v202108alpha1::ConnectivityType InterfaceFilter::connectivity_types(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.connectivity_types)
  return _internal_connectivity_types(index);
}
inline void InterfaceFilter::set_connectivity_types(int index, ::kentik::interface::v202108alpha1::ConnectivityType value) {
  connectivity_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.connectivity_types)
}
inline void InterfaceFilter::_internal_add_connectivity_types(::kentik::interface::v202108alpha1::ConnectivityType value) {
  connectivity_types_.Add(value);
}
inline void InterfaceFilter::add_connectivity_types(::kentik::interface::v202108alpha1::ConnectivityType value) {
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.connectivity_types)
  _internal_add_connectivity_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InterfaceFilter::connectivity_types() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceFilter.connectivity_types)
  return connectivity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InterfaceFilter::_internal_mutable_connectivity_types() {
  return &connectivity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InterfaceFilter::mutable_connectivity_types() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceFilter.connectivity_types)
  return _internal_mutable_connectivity_types();
}

// repeated .kentik.interface.v202108alpha1.NetworkBoundary network_boundaries = 4[json_name = "networkBoundaries"];
inline int InterfaceFilter::_internal_network_boundaries_size() const {
  return network_boundaries_.size();
}
inline int InterfaceFilter::network_boundaries_size() const {
  return _internal_network_boundaries_size();
}
inline void InterfaceFilter::clear_network_boundaries() {
  network_boundaries_.Clear();
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary InterfaceFilter::_internal_network_boundaries(int index) const {
  return static_cast< ::kentik::interface::v202108alpha1::NetworkBoundary >(network_boundaries_.Get(index));
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary InterfaceFilter::network_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.network_boundaries)
  return _internal_network_boundaries(index);
}
inline void InterfaceFilter::set_network_boundaries(int index, ::kentik::interface::v202108alpha1::NetworkBoundary value) {
  network_boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.network_boundaries)
}
inline void InterfaceFilter::_internal_add_network_boundaries(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  network_boundaries_.Add(value);
}
inline void InterfaceFilter::add_network_boundaries(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.network_boundaries)
  _internal_add_network_boundaries(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InterfaceFilter::network_boundaries() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceFilter.network_boundaries)
  return network_boundaries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InterfaceFilter::_internal_mutable_network_boundaries() {
  return &network_boundaries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InterfaceFilter::mutable_network_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceFilter.network_boundaries)
  return _internal_mutable_network_boundaries();
}

// repeated string providers = 5[json_name = "providers"];
inline int InterfaceFilter::_internal_providers_size() const {
  return providers_.size();
}
inline int InterfaceFilter::providers_size() const {
  return _internal_providers_size();
}
inline void InterfaceFilter::clear_providers() {
  providers_.Clear();
}
inline std::string* InterfaceFilter::add_providers() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  return _internal_add_providers();
}
inline const std::string& InterfaceFilter::_internal_providers(int index) const {
  return providers_.Get(index);
}
inline const std::string& InterfaceFilter::providers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  return _internal_providers(index);
}
inline std::string* InterfaceFilter::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  return providers_.Mutable(index);
}
inline void InterfaceFilter::set_providers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  providers_.Mutable(index)->assign(value);
}
inline void InterfaceFilter::set_providers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  providers_.Mutable(index)->assign(std::move(value));
}
inline void InterfaceFilter::set_providers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  providers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.InterfaceFilter.providers)
}
inline void InterfaceFilter::set_providers(int index, const char* value, size_t size) {
  providers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.InterfaceFilter.providers)
}
inline std::string* InterfaceFilter::_internal_add_providers() {
  return providers_.Add();
}
inline void InterfaceFilter::add_providers(const std::string& value) {
  providers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.providers)
}
inline void InterfaceFilter::add_providers(std::string&& value) {
  providers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.providers)
}
inline void InterfaceFilter::add_providers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  providers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.InterfaceFilter.providers)
}
inline void InterfaceFilter::add_providers(const char* value, size_t size) {
  providers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.InterfaceFilter.providers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InterfaceFilter::providers() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  return providers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InterfaceFilter::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceFilter.providers)
  return &providers_;
}

// repeated int32 snmp_speeds = 6[json_name = "snmpSpeeds"];
inline int InterfaceFilter::_internal_snmp_speeds_size() const {
  return snmp_speeds_.size();
}
inline int InterfaceFilter::snmp_speeds_size() const {
  return _internal_snmp_speeds_size();
}
inline void InterfaceFilter::clear_snmp_speeds() {
  snmp_speeds_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceFilter::_internal_snmp_speeds(int index) const {
  return snmp_speeds_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceFilter::snmp_speeds(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.snmp_speeds)
  return _internal_snmp_speeds(index);
}
inline void InterfaceFilter::set_snmp_speeds(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  snmp_speeds_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.snmp_speeds)
}
inline void InterfaceFilter::_internal_add_snmp_speeds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  snmp_speeds_.Add(value);
}
inline void InterfaceFilter::add_snmp_speeds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_snmp_speeds(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.snmp_speeds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InterfaceFilter::_internal_snmp_speeds() const {
  return snmp_speeds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InterfaceFilter::snmp_speeds() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceFilter.snmp_speeds)
  return _internal_snmp_speeds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InterfaceFilter::_internal_mutable_snmp_speeds() {
  return &snmp_speeds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InterfaceFilter::mutable_snmp_speeds() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceFilter.snmp_speeds)
  return _internal_mutable_snmp_speeds();
}

// repeated .kentik.interface.v202108alpha1.IpFilter ip_types = 7[json_name = "ipTypes"];
inline int InterfaceFilter::_internal_ip_types_size() const {
  return ip_types_.size();
}
inline int InterfaceFilter::ip_types_size() const {
  return _internal_ip_types_size();
}
inline void InterfaceFilter::clear_ip_types() {
  ip_types_.Clear();
}
inline ::kentik::interface::v202108alpha1::IpFilter InterfaceFilter::_internal_ip_types(int index) const {
  return static_cast< ::kentik::interface::v202108alpha1::IpFilter >(ip_types_.Get(index));
}
inline ::kentik::interface::v202108alpha1::IpFilter InterfaceFilter::ip_types(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.InterfaceFilter.ip_types)
  return _internal_ip_types(index);
}
inline void InterfaceFilter::set_ip_types(int index, ::kentik::interface::v202108alpha1::IpFilter value) {
  ip_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.InterfaceFilter.ip_types)
}
inline void InterfaceFilter::_internal_add_ip_types(::kentik::interface::v202108alpha1::IpFilter value) {
  ip_types_.Add(value);
}
inline void InterfaceFilter::add_ip_types(::kentik::interface::v202108alpha1::IpFilter value) {
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.InterfaceFilter.ip_types)
  _internal_add_ip_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InterfaceFilter::ip_types() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.InterfaceFilter.ip_types)
  return ip_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InterfaceFilter::_internal_mutable_ip_types() {
  return &ip_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InterfaceFilter::mutable_ip_types() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.InterfaceFilter.ip_types)
  return _internal_mutable_ip_types();
}

// -------------------------------------------------------------------

// AutoClassifyRequest

// -------------------------------------------------------------------

// AutoClassifyResponse

// double perc_auto_classified = 1[json_name = "percAutoClassified"];
inline void AutoClassifyResponse::clear_perc_auto_classified() {
  perc_auto_classified_ = 0;
}
inline double AutoClassifyResponse::_internal_perc_auto_classified() const {
  return perc_auto_classified_;
}
inline double AutoClassifyResponse::perc_auto_classified() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.perc_auto_classified)
  return _internal_perc_auto_classified();
}
inline void AutoClassifyResponse::_internal_set_perc_auto_classified(double value) {
  
  perc_auto_classified_ = value;
}
inline void AutoClassifyResponse::set_perc_auto_classified(double value) {
  _internal_set_perc_auto_classified(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.perc_auto_classified)
}

// int32 net_changed_transit = 2[json_name = "netChangedTransit"];
inline void AutoClassifyResponse::clear_net_changed_transit() {
  net_changed_transit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::_internal_net_changed_transit() const {
  return net_changed_transit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::net_changed_transit() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.net_changed_transit)
  return _internal_net_changed_transit();
}
inline void AutoClassifyResponse::_internal_set_net_changed_transit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  net_changed_transit_ = value;
}
inline void AutoClassifyResponse::set_net_changed_transit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_net_changed_transit(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.net_changed_transit)
}

// int32 net_changed_ix = 3[json_name = "netChangedIx"];
inline void AutoClassifyResponse::clear_net_changed_ix() {
  net_changed_ix_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::_internal_net_changed_ix() const {
  return net_changed_ix_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::net_changed_ix() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.net_changed_ix)
  return _internal_net_changed_ix();
}
inline void AutoClassifyResponse::_internal_set_net_changed_ix(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  net_changed_ix_ = value;
}
inline void AutoClassifyResponse::set_net_changed_ix(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_net_changed_ix(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.net_changed_ix)
}

// int32 net_changed_provider = 4[json_name = "netChangedProvider"];
inline void AutoClassifyResponse::clear_net_changed_provider() {
  net_changed_provider_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::_internal_net_changed_provider() const {
  return net_changed_provider_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::net_changed_provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.net_changed_provider)
  return _internal_net_changed_provider();
}
inline void AutoClassifyResponse::_internal_set_net_changed_provider(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  net_changed_provider_ = value;
}
inline void AutoClassifyResponse::set_net_changed_provider(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_net_changed_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.net_changed_provider)
}

// int32 total_changed_classification_count = 5[json_name = "totalChangedClassificationCount"];
inline void AutoClassifyResponse::clear_total_changed_classification_count() {
  total_changed_classification_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::_internal_total_changed_classification_count() const {
  return total_changed_classification_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::total_changed_classification_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.total_changed_classification_count)
  return _internal_total_changed_classification_count();
}
inline void AutoClassifyResponse::_internal_set_total_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_changed_classification_count_ = value;
}
inline void AutoClassifyResponse::set_total_changed_classification_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_changed_classification_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.total_changed_classification_count)
}

// int32 total_auto_classify_count = 6[json_name = "totalAutoClassifyCount"];
inline void AutoClassifyResponse::clear_total_auto_classify_count() {
  total_auto_classify_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::_internal_total_auto_classify_count() const {
  return total_auto_classify_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::total_auto_classify_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_count)
  return _internal_total_auto_classify_count();
}
inline void AutoClassifyResponse::_internal_set_total_auto_classify_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_auto_classify_count_ = value;
}
inline void AutoClassifyResponse::set_total_auto_classify_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_auto_classify_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_count)
}

// .kentik.interface.v202108alpha1.ClassifyCounter total_auto_classify_counter = 7[json_name = "totalAutoClassifyCounter"];
inline bool AutoClassifyResponse::_internal_has_total_auto_classify_counter() const {
  return this != internal_default_instance() && total_auto_classify_counter_ != nullptr;
}
inline bool AutoClassifyResponse::has_total_auto_classify_counter() const {
  return _internal_has_total_auto_classify_counter();
}
inline void AutoClassifyResponse::clear_total_auto_classify_counter() {
  if (GetArena() == nullptr && total_auto_classify_counter_ != nullptr) {
    delete total_auto_classify_counter_;
  }
  total_auto_classify_counter_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& AutoClassifyResponse::_internal_total_auto_classify_counter() const {
  const ::kentik::interface::v202108alpha1::ClassifyCounter* p = total_auto_classify_counter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      &::kentik::interface::v202108alpha1::_ClassifyCounter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& AutoClassifyResponse::total_auto_classify_counter() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_counter)
  return _internal_total_auto_classify_counter();
}
inline void AutoClassifyResponse::unsafe_arena_set_allocated_total_auto_classify_counter(
    ::kentik::interface::v202108alpha1::ClassifyCounter* total_auto_classify_counter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_auto_classify_counter_);
  }
  total_auto_classify_counter_ = total_auto_classify_counter;
  if (total_auto_classify_counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_counter)
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::release_total_auto_classify_counter() {
  auto temp = unsafe_arena_release_total_auto_classify_counter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::unsafe_arena_release_total_auto_classify_counter() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_counter)
  
  ::kentik::interface::v202108alpha1::ClassifyCounter* temp = total_auto_classify_counter_;
  total_auto_classify_counter_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::_internal_mutable_total_auto_classify_counter() {
  
  if (total_auto_classify_counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::ClassifyCounter>(GetArena());
    total_auto_classify_counter_ = p;
  }
  return total_auto_classify_counter_;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::mutable_total_auto_classify_counter() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_counter)
  return _internal_mutable_total_auto_classify_counter();
}
inline void AutoClassifyResponse::set_allocated_total_auto_classify_counter(::kentik::interface::v202108alpha1::ClassifyCounter* total_auto_classify_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete total_auto_classify_counter_;
  }
  if (total_auto_classify_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(total_auto_classify_counter);
    if (message_arena != submessage_arena) {
      total_auto_classify_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_auto_classify_counter, submessage_arena);
    }
    
  } else {
    
  }
  total_auto_classify_counter_ = total_auto_classify_counter;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_counter)
}

// .kentik.interface.v202108alpha1.ClassifyCounter total_previous_counter = 8[json_name = "totalPreviousCounter"];
inline bool AutoClassifyResponse::_internal_has_total_previous_counter() const {
  return this != internal_default_instance() && total_previous_counter_ != nullptr;
}
inline bool AutoClassifyResponse::has_total_previous_counter() const {
  return _internal_has_total_previous_counter();
}
inline void AutoClassifyResponse::clear_total_previous_counter() {
  if (GetArena() == nullptr && total_previous_counter_ != nullptr) {
    delete total_previous_counter_;
  }
  total_previous_counter_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& AutoClassifyResponse::_internal_total_previous_counter() const {
  const ::kentik::interface::v202108alpha1::ClassifyCounter* p = total_previous_counter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::ClassifyCounter*>(
      &::kentik::interface::v202108alpha1::_ClassifyCounter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::ClassifyCounter& AutoClassifyResponse::total_previous_counter() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.total_previous_counter)
  return _internal_total_previous_counter();
}
inline void AutoClassifyResponse::unsafe_arena_set_allocated_total_previous_counter(
    ::kentik::interface::v202108alpha1::ClassifyCounter* total_previous_counter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_previous_counter_);
  }
  total_previous_counter_ = total_previous_counter;
  if (total_previous_counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.AutoClassifyResponse.total_previous_counter)
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::release_total_previous_counter() {
  auto temp = unsafe_arena_release_total_previous_counter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::unsafe_arena_release_total_previous_counter() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.AutoClassifyResponse.total_previous_counter)
  
  ::kentik::interface::v202108alpha1::ClassifyCounter* temp = total_previous_counter_;
  total_previous_counter_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::_internal_mutable_total_previous_counter() {
  
  if (total_previous_counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::ClassifyCounter>(GetArena());
    total_previous_counter_ = p;
  }
  return total_previous_counter_;
}
inline ::kentik::interface::v202108alpha1::ClassifyCounter* AutoClassifyResponse::mutable_total_previous_counter() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.AutoClassifyResponse.total_previous_counter)
  return _internal_mutable_total_previous_counter();
}
inline void AutoClassifyResponse::set_allocated_total_previous_counter(::kentik::interface::v202108alpha1::ClassifyCounter* total_previous_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete total_previous_counter_;
  }
  if (total_previous_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(total_previous_counter);
    if (message_arena != submessage_arena) {
      total_previous_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_previous_counter, submessage_arena);
    }
    
  } else {
    
  }
  total_previous_counter_ = total_previous_counter;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.AutoClassifyResponse.total_previous_counter)
}

// int32 total_interfaces = 17[json_name = "totalInterfaces"];
inline void AutoClassifyResponse::clear_total_interfaces() {
  total_interfaces_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::_internal_total_interfaces() const {
  return total_interfaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoClassifyResponse::total_interfaces() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.total_interfaces)
  return _internal_total_interfaces();
}
inline void AutoClassifyResponse::_internal_set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_interfaces_ = value;
}
inline void AutoClassifyResponse::set_total_interfaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_interfaces(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.AutoClassifyResponse.total_interfaces)
}

// repeated .kentik.interface.v202108alpha1.DeviceClassifyInfo devices = 18[json_name = "devices"];
inline int AutoClassifyResponse::_internal_devices_size() const {
  return devices_.size();
}
inline int AutoClassifyResponse::devices_size() const {
  return _internal_devices_size();
}
inline void AutoClassifyResponse::clear_devices() {
  devices_.Clear();
}
inline ::kentik::interface::v202108alpha1::DeviceClassifyInfo* AutoClassifyResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.AutoClassifyResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::DeviceClassifyInfo >*
AutoClassifyResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.AutoClassifyResponse.devices)
  return &devices_;
}
inline const ::kentik::interface::v202108alpha1::DeviceClassifyInfo& AutoClassifyResponse::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::interface::v202108alpha1::DeviceClassifyInfo& AutoClassifyResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.AutoClassifyResponse.devices)
  return _internal_devices(index);
}
inline ::kentik::interface::v202108alpha1::DeviceClassifyInfo* AutoClassifyResponse::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::interface::v202108alpha1::DeviceClassifyInfo* AutoClassifyResponse::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.AutoClassifyResponse.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::DeviceClassifyInfo >&
AutoClassifyResponse::devices() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.AutoClassifyResponse.devices)
  return devices_;
}

// -------------------------------------------------------------------

// ManualClassifyRequest

// repeated string interface_ids = 1[json_name = "interfaceIds"];
inline int ManualClassifyRequest::_internal_interface_ids_size() const {
  return interface_ids_.size();
}
inline int ManualClassifyRequest::interface_ids_size() const {
  return _internal_interface_ids_size();
}
inline void ManualClassifyRequest::clear_interface_ids() {
  interface_ids_.Clear();
}
inline std::string* ManualClassifyRequest::add_interface_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  return _internal_add_interface_ids();
}
inline const std::string& ManualClassifyRequest::_internal_interface_ids(int index) const {
  return interface_ids_.Get(index);
}
inline const std::string& ManualClassifyRequest::interface_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  return _internal_interface_ids(index);
}
inline std::string* ManualClassifyRequest::mutable_interface_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  return interface_ids_.Mutable(index);
}
inline void ManualClassifyRequest::set_interface_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  interface_ids_.Mutable(index)->assign(value);
}
inline void ManualClassifyRequest::set_interface_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  interface_ids_.Mutable(index)->assign(std::move(value));
}
inline void ManualClassifyRequest::set_interface_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  interface_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
}
inline void ManualClassifyRequest::set_interface_ids(int index, const char* value, size_t size) {
  interface_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
}
inline std::string* ManualClassifyRequest::_internal_add_interface_ids() {
  return interface_ids_.Add();
}
inline void ManualClassifyRequest::add_interface_ids(const std::string& value) {
  interface_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
}
inline void ManualClassifyRequest::add_interface_ids(std::string&& value) {
  interface_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
}
inline void ManualClassifyRequest::add_interface_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  interface_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
}
inline void ManualClassifyRequest::add_interface_ids(const char* value, size_t size) {
  interface_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ManualClassifyRequest::interface_ids() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  return interface_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ManualClassifyRequest::mutable_interface_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.ManualClassifyRequest.interface_ids)
  return &interface_ids_;
}

// .kentik.interface.v202108alpha1.ConnectivityType connectivity_type = 2[json_name = "connectivityType"];
inline void ManualClassifyRequest::clear_connectivity_type() {
  connectivity_type_ = 0;
}
inline ::kentik::interface::v202108alpha1::ConnectivityType ManualClassifyRequest::_internal_connectivity_type() const {
  return static_cast< ::kentik::interface::v202108alpha1::ConnectivityType >(connectivity_type_);
}
inline ::kentik::interface::v202108alpha1::ConnectivityType ManualClassifyRequest::connectivity_type() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ManualClassifyRequest.connectivity_type)
  return _internal_connectivity_type();
}
inline void ManualClassifyRequest::_internal_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  
  connectivity_type_ = value;
}
inline void ManualClassifyRequest::set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  _internal_set_connectivity_type(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyRequest.connectivity_type)
}

// .kentik.interface.v202108alpha1.NetworkBoundary network_boundary = 3[json_name = "networkBoundary"];
inline void ManualClassifyRequest::clear_network_boundary() {
  network_boundary_ = 0;
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary ManualClassifyRequest::_internal_network_boundary() const {
  return static_cast< ::kentik::interface::v202108alpha1::NetworkBoundary >(network_boundary_);
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary ManualClassifyRequest::network_boundary() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ManualClassifyRequest.network_boundary)
  return _internal_network_boundary();
}
inline void ManualClassifyRequest::_internal_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  
  network_boundary_ = value;
}
inline void ManualClassifyRequest::set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  _internal_set_network_boundary(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyRequest.network_boundary)
}

// string provider = 4[json_name = "provider"];
inline void ManualClassifyRequest::clear_provider() {
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ManualClassifyRequest::provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
  return _internal_provider();
}
inline void ManualClassifyRequest::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
}
inline std::string* ManualClassifyRequest::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
  return _internal_mutable_provider();
}
inline const std::string& ManualClassifyRequest::_internal_provider() const {
  return provider_.Get();
}
inline void ManualClassifyRequest::_internal_set_provider(const std::string& value) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ManualClassifyRequest::set_provider(std::string&& value) {
  
  provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
}
inline void ManualClassifyRequest::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
}
inline void ManualClassifyRequest::set_provider(const char* value,
    size_t size) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
}
inline std::string* ManualClassifyRequest::_internal_mutable_provider() {
  
  return provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ManualClassifyRequest::release_provider() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ManualClassifyRequest::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
}
inline std::string* ManualClassifyRequest::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ManualClassifyRequest::unsafe_arena_set_allocated_provider(
    std::string* provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.ManualClassifyRequest.provider)
}

// -------------------------------------------------------------------

// ManualClassifyResponse

// repeated string device_ids = 1[json_name = "deviceIds"];
inline int ManualClassifyResponse::_internal_device_ids_size() const {
  return device_ids_.size();
}
inline int ManualClassifyResponse::device_ids_size() const {
  return _internal_device_ids_size();
}
inline void ManualClassifyResponse::clear_device_ids() {
  device_ids_.Clear();
}
inline std::string* ManualClassifyResponse::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  return _internal_add_device_ids();
}
inline const std::string& ManualClassifyResponse::_internal_device_ids(int index) const {
  return device_ids_.Get(index);
}
inline const std::string& ManualClassifyResponse::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  return _internal_device_ids(index);
}
inline std::string* ManualClassifyResponse::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  return device_ids_.Mutable(index);
}
inline void ManualClassifyResponse::set_device_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
inline void ManualClassifyResponse::set_device_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  device_ids_.Mutable(index)->assign(std::move(value));
}
inline void ManualClassifyResponse::set_device_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
}
inline void ManualClassifyResponse::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
}
inline std::string* ManualClassifyResponse::_internal_add_device_ids() {
  return device_ids_.Add();
}
inline void ManualClassifyResponse::add_device_ids(const std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
}
inline void ManualClassifyResponse::add_device_ids(std::string&& value) {
  device_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
}
inline void ManualClassifyResponse::add_device_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
}
inline void ManualClassifyResponse::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ManualClassifyResponse::device_ids() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  return device_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ManualClassifyResponse::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.ManualClassifyResponse.device_ids)
  return &device_ids_;
}

// -------------------------------------------------------------------

// ListInterfaceRequest

// .kentik.interface.v202108alpha1.InterfaceFilter filters = 1[json_name = "filters"];
inline bool ListInterfaceRequest::_internal_has_filters() const {
  return this != internal_default_instance() && filters_ != nullptr;
}
inline bool ListInterfaceRequest::has_filters() const {
  return _internal_has_filters();
}
inline void ListInterfaceRequest::clear_filters() {
  if (GetArena() == nullptr && filters_ != nullptr) {
    delete filters_;
  }
  filters_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::InterfaceFilter& ListInterfaceRequest::_internal_filters() const {
  const ::kentik::interface::v202108alpha1::InterfaceFilter* p = filters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::InterfaceFilter*>(
      &::kentik::interface::v202108alpha1::_InterfaceFilter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::InterfaceFilter& ListInterfaceRequest::filters() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ListInterfaceRequest.filters)
  return _internal_filters();
}
inline void ListInterfaceRequest::unsafe_arena_set_allocated_filters(
    ::kentik::interface::v202108alpha1::InterfaceFilter* filters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filters_);
  }
  filters_ = filters;
  if (filters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.ListInterfaceRequest.filters)
}
inline ::kentik::interface::v202108alpha1::InterfaceFilter* ListInterfaceRequest::release_filters() {
  auto temp = unsafe_arena_release_filters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::InterfaceFilter* ListInterfaceRequest::unsafe_arena_release_filters() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.ListInterfaceRequest.filters)
  
  ::kentik::interface::v202108alpha1::InterfaceFilter* temp = filters_;
  filters_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::InterfaceFilter* ListInterfaceRequest::_internal_mutable_filters() {
  
  if (filters_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::InterfaceFilter>(GetArena());
    filters_ = p;
  }
  return filters_;
}
inline ::kentik::interface::v202108alpha1::InterfaceFilter* ListInterfaceRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.ListInterfaceRequest.filters)
  return _internal_mutable_filters();
}
inline void ListInterfaceRequest::set_allocated_filters(::kentik::interface::v202108alpha1::InterfaceFilter* filters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filters_;
  }
  if (filters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filters);
    if (message_arena != submessage_arena) {
      filters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filters, submessage_arena);
    }
    
  } else {
    
  }
  filters_ = filters;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.ListInterfaceRequest.filters)
}

// -------------------------------------------------------------------

// ListInterfaceResponse

// repeated .kentik.interface.v202108alpha1.Interface interfaces = 1[json_name = "interfaces"];
inline int ListInterfaceResponse::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int ListInterfaceResponse::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void ListInterfaceResponse::clear_interfaces() {
  interfaces_.Clear();
}
inline ::kentik::interface::v202108alpha1::Interface* ListInterfaceResponse::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.ListInterfaceResponse.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::Interface >*
ListInterfaceResponse::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.ListInterfaceResponse.interfaces)
  return &interfaces_;
}
inline const ::kentik::interface::v202108alpha1::Interface& ListInterfaceResponse::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::kentik::interface::v202108alpha1::Interface& ListInterfaceResponse::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ListInterfaceResponse.interfaces)
  return _internal_interfaces(index);
}
inline ::kentik::interface::v202108alpha1::Interface* ListInterfaceResponse::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::kentik::interface::v202108alpha1::Interface* ListInterfaceResponse::add_interfaces() {
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.ListInterfaceResponse.interfaces)
  return _internal_add_interfaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::interface::v202108alpha1::Interface >&
ListInterfaceResponse::interfaces() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.ListInterfaceResponse.interfaces)
  return interfaces_;
}

// int32 total_count = 2[json_name = "totalCount"];
inline void ListInterfaceResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListInterfaceResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListInterfaceResponse::total_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ListInterfaceResponse.total_count)
  return _internal_total_count();
}
inline void ListInterfaceResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListInterfaceResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ListInterfaceResponse.total_count)
}

// int32 invalid_count = 3[json_name = "invalidCount"];
inline void ListInterfaceResponse::clear_invalid_count() {
  invalid_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListInterfaceResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListInterfaceResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.ListInterfaceResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListInterfaceResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_count_ = value;
}
inline void ListInterfaceResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.ListInterfaceResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetInterfaceRequest

// string id = 1[json_name = "id"];
inline void GetInterfaceRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInterfaceRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
  return _internal_id();
}
inline void GetInterfaceRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
}
inline std::string* GetInterfaceRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetInterfaceRequest::_internal_id() const {
  return id_.Get();
}
inline void GetInterfaceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInterfaceRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
}
inline void GetInterfaceRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
}
inline void GetInterfaceRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
}
inline std::string* GetInterfaceRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInterfaceRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInterfaceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
}
inline std::string* GetInterfaceRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetInterfaceRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.GetInterfaceRequest.id)
}

// -------------------------------------------------------------------

// GetInterfaceResponse

// .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
inline bool GetInterfaceResponse::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool GetInterfaceResponse::has_interface() const {
  return _internal_has_interface();
}
inline void GetInterfaceResponse::clear_interface() {
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Interface& GetInterfaceResponse::_internal_interface() const {
  const ::kentik::interface::v202108alpha1::Interface* p = interface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Interface*>(
      &::kentik::interface::v202108alpha1::_Interface_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Interface& GetInterfaceResponse::interface() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.GetInterfaceResponse.interface)
  return _internal_interface();
}
inline void GetInterfaceResponse::unsafe_arena_set_allocated_interface(
    ::kentik::interface::v202108alpha1::Interface* interface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.GetInterfaceResponse.interface)
}
inline ::kentik::interface::v202108alpha1::Interface* GetInterfaceResponse::release_interface() {
  auto temp = unsafe_arena_release_interface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* GetInterfaceResponse::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.GetInterfaceResponse.interface)
  
  ::kentik::interface::v202108alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* GetInterfaceResponse::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Interface>(GetArena());
    interface_ = p;
  }
  return interface_;
}
inline ::kentik::interface::v202108alpha1::Interface* GetInterfaceResponse::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.GetInterfaceResponse.interface)
  return _internal_mutable_interface();
}
inline void GetInterfaceResponse::set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.GetInterfaceResponse.interface)
}

// -------------------------------------------------------------------

// CreateInterfaceRequest

// .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
inline bool CreateInterfaceRequest::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool CreateInterfaceRequest::has_interface() const {
  return _internal_has_interface();
}
inline void CreateInterfaceRequest::clear_interface() {
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Interface& CreateInterfaceRequest::_internal_interface() const {
  const ::kentik::interface::v202108alpha1::Interface* p = interface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Interface*>(
      &::kentik::interface::v202108alpha1::_Interface_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Interface& CreateInterfaceRequest::interface() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.CreateInterfaceRequest.interface)
  return _internal_interface();
}
inline void CreateInterfaceRequest::unsafe_arena_set_allocated_interface(
    ::kentik::interface::v202108alpha1::Interface* interface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.CreateInterfaceRequest.interface)
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceRequest::release_interface() {
  auto temp = unsafe_arena_release_interface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceRequest::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.CreateInterfaceRequest.interface)
  
  ::kentik::interface::v202108alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceRequest::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Interface>(GetArena());
    interface_ = p;
  }
  return interface_;
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceRequest::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.CreateInterfaceRequest.interface)
  return _internal_mutable_interface();
}
inline void CreateInterfaceRequest::set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.CreateInterfaceRequest.interface)
}

// -------------------------------------------------------------------

// CreateInterfaceResponse

// .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
inline bool CreateInterfaceResponse::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool CreateInterfaceResponse::has_interface() const {
  return _internal_has_interface();
}
inline void CreateInterfaceResponse::clear_interface() {
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Interface& CreateInterfaceResponse::_internal_interface() const {
  const ::kentik::interface::v202108alpha1::Interface* p = interface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Interface*>(
      &::kentik::interface::v202108alpha1::_Interface_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Interface& CreateInterfaceResponse::interface() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.CreateInterfaceResponse.interface)
  return _internal_interface();
}
inline void CreateInterfaceResponse::unsafe_arena_set_allocated_interface(
    ::kentik::interface::v202108alpha1::Interface* interface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.CreateInterfaceResponse.interface)
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceResponse::release_interface() {
  auto temp = unsafe_arena_release_interface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceResponse::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.CreateInterfaceResponse.interface)
  
  ::kentik::interface::v202108alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceResponse::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Interface>(GetArena());
    interface_ = p;
  }
  return interface_;
}
inline ::kentik::interface::v202108alpha1::Interface* CreateInterfaceResponse::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.CreateInterfaceResponse.interface)
  return _internal_mutable_interface();
}
inline void CreateInterfaceResponse::set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.CreateInterfaceResponse.interface)
}

// -------------------------------------------------------------------

// UpdateInterfaceRequest

// .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
inline bool UpdateInterfaceRequest::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool UpdateInterfaceRequest::has_interface() const {
  return _internal_has_interface();
}
inline void UpdateInterfaceRequest::clear_interface() {
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Interface& UpdateInterfaceRequest::_internal_interface() const {
  const ::kentik::interface::v202108alpha1::Interface* p = interface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Interface*>(
      &::kentik::interface::v202108alpha1::_Interface_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Interface& UpdateInterfaceRequest::interface() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.UpdateInterfaceRequest.interface)
  return _internal_interface();
}
inline void UpdateInterfaceRequest::unsafe_arena_set_allocated_interface(
    ::kentik::interface::v202108alpha1::Interface* interface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.UpdateInterfaceRequest.interface)
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceRequest::release_interface() {
  auto temp = unsafe_arena_release_interface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceRequest::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.UpdateInterfaceRequest.interface)
  
  ::kentik::interface::v202108alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceRequest::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Interface>(GetArena());
    interface_ = p;
  }
  return interface_;
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceRequest::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.UpdateInterfaceRequest.interface)
  return _internal_mutable_interface();
}
inline void UpdateInterfaceRequest::set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.UpdateInterfaceRequest.interface)
}

// -------------------------------------------------------------------

// UpdateInterfaceResponse

// .kentik.interface.v202108alpha1.Interface interface = 1[json_name = "interface"];
inline bool UpdateInterfaceResponse::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool UpdateInterfaceResponse::has_interface() const {
  return _internal_has_interface();
}
inline void UpdateInterfaceResponse::clear_interface() {
  if (GetArena() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Interface& UpdateInterfaceResponse::_internal_interface() const {
  const ::kentik::interface::v202108alpha1::Interface* p = interface_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Interface*>(
      &::kentik::interface::v202108alpha1::_Interface_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Interface& UpdateInterfaceResponse::interface() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.UpdateInterfaceResponse.interface)
  return _internal_interface();
}
inline void UpdateInterfaceResponse::unsafe_arena_set_allocated_interface(
    ::kentik::interface::v202108alpha1::Interface* interface) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.UpdateInterfaceResponse.interface)
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceResponse::release_interface() {
  auto temp = unsafe_arena_release_interface();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceResponse::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.UpdateInterfaceResponse.interface)
  
  ::kentik::interface::v202108alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceResponse::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Interface>(GetArena());
    interface_ = p;
  }
  return interface_;
}
inline ::kentik::interface::v202108alpha1::Interface* UpdateInterfaceResponse::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.UpdateInterfaceResponse.interface)
  return _internal_mutable_interface();
}
inline void UpdateInterfaceResponse::set_allocated_interface(::kentik::interface::v202108alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.UpdateInterfaceResponse.interface)
}

// -------------------------------------------------------------------

// DeleteInterfaceRequest

// string id = 1[json_name = "id"];
inline void DeleteInterfaceRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteInterfaceRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
  return _internal_id();
}
inline void DeleteInterfaceRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
}
inline std::string* DeleteInterfaceRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteInterfaceRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteInterfaceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteInterfaceRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
}
inline void DeleteInterfaceRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
}
inline void DeleteInterfaceRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
}
inline std::string* DeleteInterfaceRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteInterfaceRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteInterfaceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
}
inline std::string* DeleteInterfaceRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteInterfaceRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.DeleteInterfaceRequest.id)
}

// -------------------------------------------------------------------

// DeleteInterfaceResponse

// -------------------------------------------------------------------

// Match

// .kentik.interface.v202108alpha1.MatchAttribute match_attribute = 1[json_name = "matchAttribute"];
inline void Match::clear_match_attribute() {
  match_attribute_ = 0;
}
inline ::kentik::interface::v202108alpha1::MatchAttribute Match::_internal_match_attribute() const {
  return static_cast< ::kentik::interface::v202108alpha1::MatchAttribute >(match_attribute_);
}
inline ::kentik::interface::v202108alpha1::MatchAttribute Match::match_attribute() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Match.match_attribute)
  return _internal_match_attribute();
}
inline void Match::_internal_set_match_attribute(::kentik::interface::v202108alpha1::MatchAttribute value) {
  
  match_attribute_ = value;
}
inline void Match::set_match_attribute(::kentik::interface::v202108alpha1::MatchAttribute value) {
  _internal_set_match_attribute(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Match.match_attribute)
}

// .kentik.interface.v202108alpha1.Operator match_operator = 2[json_name = "matchOperator"];
inline void Match::clear_match_operator() {
  match_operator_ = 0;
}
inline ::kentik::interface::v202108alpha1::Operator Match::_internal_match_operator() const {
  return static_cast< ::kentik::interface::v202108alpha1::Operator >(match_operator_);
}
inline ::kentik::interface::v202108alpha1::Operator Match::match_operator() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Match.match_operator)
  return _internal_match_operator();
}
inline void Match::_internal_set_match_operator(::kentik::interface::v202108alpha1::Operator value) {
  
  match_operator_ = value;
}
inline void Match::set_match_operator(::kentik::interface::v202108alpha1::Operator value) {
  _internal_set_match_operator(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Match.match_operator)
}

// string pattern = 3[json_name = "pattern"];
inline void Match::clear_pattern() {
  pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Match::pattern() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Match.pattern)
  return _internal_pattern();
}
inline void Match::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Match.pattern)
}
inline std::string* Match::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Match.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& Match::_internal_pattern() const {
  return pattern_.Get();
}
inline void Match::_internal_set_pattern(const std::string& value) {
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Match::set_pattern(std::string&& value) {
  
  pattern_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Match.pattern)
}
inline void Match::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Match.pattern)
}
inline void Match::set_pattern(const char* value,
    size_t size) {
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Match.pattern)
}
inline std::string* Match::_internal_mutable_pattern() {
  
  return pattern_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Match::release_pattern() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Match.pattern)
  return pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Match.pattern)
}
inline std::string* Match::unsafe_arena_release_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Match.pattern)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pattern_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Match::unsafe_arena_set_allocated_pattern(
    std::string* pattern) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pattern, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Match.pattern)
}

// -------------------------------------------------------------------

// Action

// .kentik.interface.v202108alpha1.ConnectivityType set_connectivity_type = 1[json_name = "setConnectivityType"];
inline void Action::clear_set_connectivity_type() {
  set_connectivity_type_ = 0;
}
inline ::kentik::interface::v202108alpha1::ConnectivityType Action::_internal_set_connectivity_type() const {
  return static_cast< ::kentik::interface::v202108alpha1::ConnectivityType >(set_connectivity_type_);
}
inline ::kentik::interface::v202108alpha1::ConnectivityType Action::set_connectivity_type() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Action.set_connectivity_type)
  return _internal_set_connectivity_type();
}
inline void Action::_internal_set_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  
  set_connectivity_type_ = value;
}
inline void Action::set_set_connectivity_type(::kentik::interface::v202108alpha1::ConnectivityType value) {
  _internal_set_set_connectivity_type(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Action.set_connectivity_type)
}

// .kentik.interface.v202108alpha1.NetworkBoundary set_network_boundary = 2[json_name = "setNetworkBoundary"];
inline void Action::clear_set_network_boundary() {
  set_network_boundary_ = 0;
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary Action::_internal_set_network_boundary() const {
  return static_cast< ::kentik::interface::v202108alpha1::NetworkBoundary >(set_network_boundary_);
}
inline ::kentik::interface::v202108alpha1::NetworkBoundary Action::set_network_boundary() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Action.set_network_boundary)
  return _internal_set_network_boundary();
}
inline void Action::_internal_set_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  
  set_network_boundary_ = value;
}
inline void Action::set_set_network_boundary(::kentik::interface::v202108alpha1::NetworkBoundary value) {
  _internal_set_set_network_boundary(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Action.set_network_boundary)
}

// string set_connected_asns = 3[json_name = "setConnectedAsns"];
inline void Action::clear_set_connected_asns() {
  set_connected_asns_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Action::set_connected_asns() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Action.set_connected_asns)
  return _internal_set_connected_asns();
}
inline void Action::set_set_connected_asns(const std::string& value) {
  _internal_set_set_connected_asns(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Action.set_connected_asns)
}
inline std::string* Action::mutable_set_connected_asns() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Action.set_connected_asns)
  return _internal_mutable_set_connected_asns();
}
inline const std::string& Action::_internal_set_connected_asns() const {
  return set_connected_asns_.Get();
}
inline void Action::_internal_set_set_connected_asns(const std::string& value) {
  
  set_connected_asns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Action::set_set_connected_asns(std::string&& value) {
  
  set_connected_asns_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Action.set_connected_asns)
}
inline void Action::set_set_connected_asns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  set_connected_asns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Action.set_connected_asns)
}
inline void Action::set_set_connected_asns(const char* value,
    size_t size) {
  
  set_connected_asns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Action.set_connected_asns)
}
inline std::string* Action::_internal_mutable_set_connected_asns() {
  
  return set_connected_asns_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Action::release_set_connected_asns() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Action.set_connected_asns)
  return set_connected_asns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_set_connected_asns(std::string* set_connected_asns) {
  if (set_connected_asns != nullptr) {
    
  } else {
    
  }
  set_connected_asns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_connected_asns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Action.set_connected_asns)
}
inline std::string* Action::unsafe_arena_release_set_connected_asns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Action.set_connected_asns)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return set_connected_asns_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Action::unsafe_arena_set_allocated_set_connected_asns(
    std::string* set_connected_asns) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (set_connected_asns != nullptr) {
    
  } else {
    
  }
  set_connected_asns_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      set_connected_asns, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Action.set_connected_asns)
}

// string set_provider = 4[json_name = "setProvider"];
inline void Action::clear_set_provider() {
  set_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Action::set_provider() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Action.set_provider)
  return _internal_set_provider();
}
inline void Action::set_set_provider(const std::string& value) {
  _internal_set_set_provider(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Action.set_provider)
}
inline std::string* Action::mutable_set_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Action.set_provider)
  return _internal_mutable_set_provider();
}
inline const std::string& Action::_internal_set_provider() const {
  return set_provider_.Get();
}
inline void Action::_internal_set_set_provider(const std::string& value) {
  
  set_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Action::set_set_provider(std::string&& value) {
  
  set_provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Action.set_provider)
}
inline void Action::set_set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  set_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Action.set_provider)
}
inline void Action::set_set_provider(const char* value,
    size_t size) {
  
  set_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Action.set_provider)
}
inline std::string* Action::_internal_mutable_set_provider() {
  
  return set_provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Action::release_set_provider() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Action.set_provider)
  return set_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_set_provider(std::string* set_provider) {
  if (set_provider != nullptr) {
    
  } else {
    
  }
  set_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Action.set_provider)
}
inline std::string* Action::unsafe_arena_release_set_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Action.set_provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return set_provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Action::unsafe_arena_set_allocated_set_provider(
    std::string* set_provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (set_provider != nullptr) {
    
  } else {
    
  }
  set_provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      set_provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Action.set_provider)
}

// -------------------------------------------------------------------

// DeviceFilter

// bool all_devices = 1[json_name = "allDevices"];
inline void DeviceFilter::clear_all_devices() {
  all_devices_ = false;
}
inline bool DeviceFilter::_internal_all_devices() const {
  return all_devices_;
}
inline bool DeviceFilter::all_devices() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceFilter.all_devices)
  return _internal_all_devices();
}
inline void DeviceFilter::_internal_set_all_devices(bool value) {
  
  all_devices_ = value;
}
inline void DeviceFilter::set_all_devices(bool value) {
  _internal_set_all_devices(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.all_devices)
}

// repeated string device_name = 2[json_name = "deviceName"];
inline int DeviceFilter::_internal_device_name_size() const {
  return device_name_.size();
}
inline int DeviceFilter::device_name_size() const {
  return _internal_device_name_size();
}
inline void DeviceFilter::clear_device_name() {
  device_name_.Clear();
}
inline std::string* DeviceFilter::add_device_name() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  return _internal_add_device_name();
}
inline const std::string& DeviceFilter::_internal_device_name(int index) const {
  return device_name_.Get(index);
}
inline const std::string& DeviceFilter::device_name(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  return _internal_device_name(index);
}
inline std::string* DeviceFilter::mutable_device_name(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  return device_name_.Mutable(index);
}
inline void DeviceFilter::set_device_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  device_name_.Mutable(index)->assign(value);
}
inline void DeviceFilter::set_device_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  device_name_.Mutable(index)->assign(std::move(value));
}
inline void DeviceFilter::set_device_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.DeviceFilter.device_name)
}
inline void DeviceFilter::set_device_name(int index, const char* value, size_t size) {
  device_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_name)
}
inline std::string* DeviceFilter::_internal_add_device_name() {
  return device_name_.Add();
}
inline void DeviceFilter::add_device_name(const std::string& value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_name)
}
inline void DeviceFilter::add_device_name(std::string&& value) {
  device_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_name)
}
inline void DeviceFilter::add_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.DeviceFilter.device_name)
}
inline void DeviceFilter::add_device_name(const char* value, size_t size) {
  device_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceFilter::device_name() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  return device_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceFilter::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.DeviceFilter.device_name)
  return &device_name_;
}

// repeated string device_labels = 3[json_name = "deviceLabels"];
inline int DeviceFilter::_internal_device_labels_size() const {
  return device_labels_.size();
}
inline int DeviceFilter::device_labels_size() const {
  return _internal_device_labels_size();
}
inline void DeviceFilter::clear_device_labels() {
  device_labels_.Clear();
}
inline std::string* DeviceFilter::add_device_labels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  return _internal_add_device_labels();
}
inline const std::string& DeviceFilter::_internal_device_labels(int index) const {
  return device_labels_.Get(index);
}
inline const std::string& DeviceFilter::device_labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  return _internal_device_labels(index);
}
inline std::string* DeviceFilter::mutable_device_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  return device_labels_.Mutable(index);
}
inline void DeviceFilter::set_device_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  device_labels_.Mutable(index)->assign(value);
}
inline void DeviceFilter::set_device_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  device_labels_.Mutable(index)->assign(std::move(value));
}
inline void DeviceFilter::set_device_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
}
inline void DeviceFilter::set_device_labels(int index, const char* value, size_t size) {
  device_labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
}
inline std::string* DeviceFilter::_internal_add_device_labels() {
  return device_labels_.Add();
}
inline void DeviceFilter::add_device_labels(const std::string& value) {
  device_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
}
inline void DeviceFilter::add_device_labels(std::string&& value) {
  device_labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
}
inline void DeviceFilter::add_device_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
}
inline void DeviceFilter::add_device_labels(const char* value, size_t size) {
  device_labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceFilter::device_labels() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  return device_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceFilter::mutable_device_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.DeviceFilter.device_labels)
  return &device_labels_;
}

// repeated string device_rules = 4[json_name = "deviceRules"];
inline int DeviceFilter::_internal_device_rules_size() const {
  return device_rules_.size();
}
inline int DeviceFilter::device_rules_size() const {
  return _internal_device_rules_size();
}
inline void DeviceFilter::clear_device_rules() {
  device_rules_.Clear();
}
inline std::string* DeviceFilter::add_device_rules() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  return _internal_add_device_rules();
}
inline const std::string& DeviceFilter::_internal_device_rules(int index) const {
  return device_rules_.Get(index);
}
inline const std::string& DeviceFilter::device_rules(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  return _internal_device_rules(index);
}
inline std::string* DeviceFilter::mutable_device_rules(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  return device_rules_.Mutable(index);
}
inline void DeviceFilter::set_device_rules(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  device_rules_.Mutable(index)->assign(value);
}
inline void DeviceFilter::set_device_rules(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  device_rules_.Mutable(index)->assign(std::move(value));
}
inline void DeviceFilter::set_device_rules(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_rules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
}
inline void DeviceFilter::set_device_rules(int index, const char* value, size_t size) {
  device_rules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
}
inline std::string* DeviceFilter::_internal_add_device_rules() {
  return device_rules_.Add();
}
inline void DeviceFilter::add_device_rules(const std::string& value) {
  device_rules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
}
inline void DeviceFilter::add_device_rules(std::string&& value) {
  device_rules_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
}
inline void DeviceFilter::add_device_rules(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_rules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
}
inline void DeviceFilter::add_device_rules(const char* value, size_t size) {
  device_rules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceFilter::device_rules() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  return device_rules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceFilter::mutable_device_rules() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.DeviceFilter.device_rules)
  return &device_rules_;
}

// repeated string device_types = 5[json_name = "deviceTypes"];
inline int DeviceFilter::_internal_device_types_size() const {
  return device_types_.size();
}
inline int DeviceFilter::device_types_size() const {
  return _internal_device_types_size();
}
inline void DeviceFilter::clear_device_types() {
  device_types_.Clear();
}
inline std::string* DeviceFilter::add_device_types() {
  // @@protoc_insertion_point(field_add_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  return _internal_add_device_types();
}
inline const std::string& DeviceFilter::_internal_device_types(int index) const {
  return device_types_.Get(index);
}
inline const std::string& DeviceFilter::device_types(int index) const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  return _internal_device_types(index);
}
inline std::string* DeviceFilter::mutable_device_types(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  return device_types_.Mutable(index);
}
inline void DeviceFilter::set_device_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  device_types_.Mutable(index)->assign(value);
}
inline void DeviceFilter::set_device_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  device_types_.Mutable(index)->assign(std::move(value));
}
inline void DeviceFilter::set_device_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.DeviceFilter.device_types)
}
inline void DeviceFilter::set_device_types(int index, const char* value, size_t size) {
  device_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_types)
}
inline std::string* DeviceFilter::_internal_add_device_types() {
  return device_types_.Add();
}
inline void DeviceFilter::add_device_types(const std::string& value) {
  device_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_types)
}
inline void DeviceFilter::add_device_types(std::string&& value) {
  device_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.interface.v202108alpha1.DeviceFilter.device_types)
}
inline void DeviceFilter::add_device_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.interface.v202108alpha1.DeviceFilter.device_types)
}
inline void DeviceFilter::add_device_types(const char* value, size_t size) {
  device_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.interface.v202108alpha1.DeviceFilter.device_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceFilter::device_types() const {
  // @@protoc_insertion_point(field_list:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  return device_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceFilter::mutable_device_types() {
  // @@protoc_insertion_point(field_mutable_list:kentik.interface.v202108alpha1.DeviceFilter.device_types)
  return &device_types_;
}

// -------------------------------------------------------------------

// Rule

// string id = 1[json_name = "id"];
inline void Rule::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Rule::id() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.id)
  return _internal_id();
}
inline void Rule::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Rule.id)
}
inline std::string* Rule::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.id)
  return _internal_mutable_id();
}
inline const std::string& Rule::_internal_id() const {
  return id_.Get();
}
inline void Rule::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rule::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.interface.v202108alpha1.Rule.id)
}
inline void Rule::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.interface.v202108alpha1.Rule.id)
}
inline void Rule::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.interface.v202108alpha1.Rule.id)
}
inline std::string* Rule::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rule::release_id() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.id)
}
inline std::string* Rule::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.interface.v202108alpha1.Rule.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rule::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.id)
}

// bool enabled = 2[json_name = "enabled"];
inline void Rule::clear_enabled() {
  enabled_ = false;
}
inline bool Rule::_internal_enabled() const {
  return enabled_;
}
inline bool Rule::enabled() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.enabled)
  return _internal_enabled();
}
inline void Rule::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Rule::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Rule.enabled)
}

// int32 rank = 3[json_name = "rank"];
inline void Rule::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rule::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rule::rank() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.rank)
  return _internal_rank();
}
inline void Rule::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void Rule::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:kentik.interface.v202108alpha1.Rule.rank)
}

// .kentik.interface.v202108alpha1.Match match_clause = 4[json_name = "matchClause"];
inline bool Rule::_internal_has_match_clause() const {
  return this != internal_default_instance() && match_clause_ != nullptr;
}
inline bool Rule::has_match_clause() const {
  return _internal_has_match_clause();
}
inline void Rule::clear_match_clause() {
  if (GetArena() == nullptr && match_clause_ != nullptr) {
    delete match_clause_;
  }
  match_clause_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Match& Rule::_internal_match_clause() const {
  const ::kentik::interface::v202108alpha1::Match* p = match_clause_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Match*>(
      &::kentik::interface::v202108alpha1::_Match_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Match& Rule::match_clause() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.match_clause)
  return _internal_match_clause();
}
inline void Rule::unsafe_arena_set_allocated_match_clause(
    ::kentik::interface::v202108alpha1::Match* match_clause) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_clause_);
  }
  match_clause_ = match_clause;
  if (match_clause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.match_clause)
}
inline ::kentik::interface::v202108alpha1::Match* Rule::release_match_clause() {
  auto temp = unsafe_arena_release_match_clause();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Match* Rule::unsafe_arena_release_match_clause() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.match_clause)
  
  ::kentik::interface::v202108alpha1::Match* temp = match_clause_;
  match_clause_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Match* Rule::_internal_mutable_match_clause() {
  
  if (match_clause_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Match>(GetArena());
    match_clause_ = p;
  }
  return match_clause_;
}
inline ::kentik::interface::v202108alpha1::Match* Rule::mutable_match_clause() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.match_clause)
  return _internal_mutable_match_clause();
}
inline void Rule::set_allocated_match_clause(::kentik::interface::v202108alpha1::Match* match_clause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete match_clause_;
  }
  if (match_clause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_clause);
    if (message_arena != submessage_arena) {
      match_clause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_clause, submessage_arena);
    }
    
  } else {
    
  }
  match_clause_ = match_clause;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.match_clause)
}

// .kentik.interface.v202108alpha1.Action action_set = 5[json_name = "actionSet"];
inline bool Rule::_internal_has_action_set() const {
  return this != internal_default_instance() && action_set_ != nullptr;
}
inline bool Rule::has_action_set() const {
  return _internal_has_action_set();
}
inline void Rule::clear_action_set() {
  if (GetArena() == nullptr && action_set_ != nullptr) {
    delete action_set_;
  }
  action_set_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::Action& Rule::_internal_action_set() const {
  const ::kentik::interface::v202108alpha1::Action* p = action_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::Action*>(
      &::kentik::interface::v202108alpha1::_Action_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::Action& Rule::action_set() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.action_set)
  return _internal_action_set();
}
inline void Rule::unsafe_arena_set_allocated_action_set(
    ::kentik::interface::v202108alpha1::Action* action_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_set_);
  }
  action_set_ = action_set;
  if (action_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.action_set)
}
inline ::kentik::interface::v202108alpha1::Action* Rule::release_action_set() {
  auto temp = unsafe_arena_release_action_set();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::Action* Rule::unsafe_arena_release_action_set() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.action_set)
  
  ::kentik::interface::v202108alpha1::Action* temp = action_set_;
  action_set_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::Action* Rule::_internal_mutable_action_set() {
  
  if (action_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::Action>(GetArena());
    action_set_ = p;
  }
  return action_set_;
}
inline ::kentik::interface::v202108alpha1::Action* Rule::mutable_action_set() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.action_set)
  return _internal_mutable_action_set();
}
inline void Rule::set_allocated_action_set(::kentik::interface::v202108alpha1::Action* action_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_set_;
  }
  if (action_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_set);
    if (message_arena != submessage_arena) {
      action_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_set, submessage_arena);
    }
    
  } else {
    
  }
  action_set_ = action_set;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.action_set)
}

// .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
inline bool Rule::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool Rule::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Rule::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Rule::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.cdate)
  return _internal_cdate();
}
inline void Rule::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.cdate)
  return _internal_mutable_cdate();
}
inline void Rule::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.cdate)
}

// .google.protobuf.Timestamp edate = 7[json_name = "edate"];
inline bool Rule::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool Rule::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Rule::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Rule::edate() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.edate)
  return _internal_edate();
}
inline void Rule::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Rule::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.edate)
  return _internal_mutable_edate();
}
inline void Rule::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.edate)
}

// .kentik.interface.v202108alpha1.DeviceFilter included_devices = 8[json_name = "includedDevices"];
inline bool Rule::_internal_has_included_devices() const {
  return this != internal_default_instance() && included_devices_ != nullptr;
}
inline bool Rule::has_included_devices() const {
  return _internal_has_included_devices();
}
inline void Rule::clear_included_devices() {
  if (GetArena() == nullptr && included_devices_ != nullptr) {
    delete included_devices_;
  }
  included_devices_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::DeviceFilter& Rule::_internal_included_devices() const {
  const ::kentik::interface::v202108alpha1::DeviceFilter* p = included_devices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::DeviceFilter*>(
      &::kentik::interface::v202108alpha1::_DeviceFilter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::DeviceFilter& Rule::included_devices() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.included_devices)
  return _internal_included_devices();
}
inline void Rule::unsafe_arena_set_allocated_included_devices(
    ::kentik::interface::v202108alpha1::DeviceFilter* included_devices) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(included_devices_);
  }
  included_devices_ = included_devices;
  if (included_devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.included_devices)
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::release_included_devices() {
  auto temp = unsafe_arena_release_included_devices();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::unsafe_arena_release_included_devices() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.included_devices)
  
  ::kentik::interface::v202108alpha1::DeviceFilter* temp = included_devices_;
  included_devices_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::_internal_mutable_included_devices() {
  
  if (included_devices_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::DeviceFilter>(GetArena());
    included_devices_ = p;
  }
  return included_devices_;
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::mutable_included_devices() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.included_devices)
  return _internal_mutable_included_devices();
}
inline void Rule::set_allocated_included_devices(::kentik::interface::v202108alpha1::DeviceFilter* included_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete included_devices_;
  }
  if (included_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(included_devices);
    if (message_arena != submessage_arena) {
      included_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, included_devices, submessage_arena);
    }
    
  } else {
    
  }
  included_devices_ = included_devices;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.included_devices)
}

// .kentik.interface.v202108alpha1.DeviceFilter excluded_devices = 9[json_name = "excludedDevices"];
inline bool Rule::_internal_has_excluded_devices() const {
  return this != internal_default_instance() && excluded_devices_ != nullptr;
}
inline bool Rule::has_excluded_devices() const {
  return _internal_has_excluded_devices();
}
inline void Rule::clear_excluded_devices() {
  if (GetArena() == nullptr && excluded_devices_ != nullptr) {
    delete excluded_devices_;
  }
  excluded_devices_ = nullptr;
}
inline const ::kentik::interface::v202108alpha1::DeviceFilter& Rule::_internal_excluded_devices() const {
  const ::kentik::interface::v202108alpha1::DeviceFilter* p = excluded_devices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::interface::v202108alpha1::DeviceFilter*>(
      &::kentik::interface::v202108alpha1::_DeviceFilter_default_instance_);
}
inline const ::kentik::interface::v202108alpha1::DeviceFilter& Rule::excluded_devices() const {
  // @@protoc_insertion_point(field_get:kentik.interface.v202108alpha1.Rule.excluded_devices)
  return _internal_excluded_devices();
}
inline void Rule::unsafe_arena_set_allocated_excluded_devices(
    ::kentik::interface::v202108alpha1::DeviceFilter* excluded_devices) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excluded_devices_);
  }
  excluded_devices_ = excluded_devices;
  if (excluded_devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.interface.v202108alpha1.Rule.excluded_devices)
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::release_excluded_devices() {
  auto temp = unsafe_arena_release_excluded_devices();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::unsafe_arena_release_excluded_devices() {
  // @@protoc_insertion_point(field_release:kentik.interface.v202108alpha1.Rule.excluded_devices)
  
  ::kentik::interface::v202108alpha1::DeviceFilter* temp = excluded_devices_;
  excluded_devices_ = nullptr;
  return temp;
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::_internal_mutable_excluded_devices() {
  
  if (excluded_devices_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::interface::v202108alpha1::DeviceFilter>(GetArena());
    excluded_devices_ = p;
  }
  return excluded_devices_;
}
inline ::kentik::interface::v202108alpha1::DeviceFilter* Rule::mutable_excluded_devices() {
  // @@protoc_insertion_point(field_mutable:kentik.interface.v202108alpha1.Rule.excluded_devices)
  return _internal_mutable_excluded_devices();
}
inline void Rule::set_allocated_excluded_devices(::kentik::interface::v202108alpha1::DeviceFilter* excluded_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete excluded_devices_;
  }
  if (excluded_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(excluded_devices);
    if (message_arena != submessage_arena) {
      excluded_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excluded_devices, submessage_arena);
    }
    
  } else {
    
  }
  excluded_devices_ = excluded_devices;
  // @@protoc_insertion_point(field_set_allocated:kentik.interface.v202108alpha1.Rule.excluded_devices)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202108alpha1
}  // namespace interface
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::interface::v202108alpha1::ConnectivityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::interface::v202108alpha1::ConnectivityType>() {
  return ::kentik::interface::v202108alpha1::ConnectivityType_descriptor();
}
template <> struct is_proto_enum< ::kentik::interface::v202108alpha1::NetworkBoundary> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::interface::v202108alpha1::NetworkBoundary>() {
  return ::kentik::interface::v202108alpha1::NetworkBoundary_descriptor();
}
template <> struct is_proto_enum< ::kentik::interface::v202108alpha1::IpFilter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::interface::v202108alpha1::IpFilter>() {
  return ::kentik::interface::v202108alpha1::IpFilter_descriptor();
}
template <> struct is_proto_enum< ::kentik::interface::v202108alpha1::MatchAttribute> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::interface::v202108alpha1::MatchAttribute>() {
  return ::kentik::interface::v202108alpha1::MatchAttribute_descriptor();
}
template <> struct is_proto_enum< ::kentik::interface::v202108alpha1::Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::interface::v202108alpha1::Operator>() {
  return ::kentik::interface::v202108alpha1::Operator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2finterface_2fv202108alpha1_2finterface_2eproto
