// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/deviceconf/v202511/config.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_2epb_2eh
#define kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto;
namespace kentik {
namespace deviceconf {
namespace v202511 {
class Revision;
struct RevisionDefaultTypeInternal;
extern RevisionDefaultTypeInternal _Revision_default_instance_;
class Snapshot;
struct SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace deviceconf {
namespace v202511 {
enum ConfigEncoding : int {
  CONFIG_ENCODING_UNSPECIFIED = 0,
  CONFIG_ENCODING_PLAIN = 1,
  CONFIG_ENCODING_BZIP2 = 2,
  ConfigEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConfigEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConfigEncoding_IsValid(int value);
extern const uint32_t ConfigEncoding_internal_data_[];
constexpr ConfigEncoding ConfigEncoding_MIN = static_cast<ConfigEncoding>(0);
constexpr ConfigEncoding ConfigEncoding_MAX = static_cast<ConfigEncoding>(2);
constexpr int ConfigEncoding_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ConfigEncoding_descriptor();
template <typename T>
const std::string& ConfigEncoding_Name(T value) {
  static_assert(std::is_same<T, ConfigEncoding>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConfigEncoding_Name().");
  return ConfigEncoding_Name(static_cast<ConfigEncoding>(value));
}
template <>
inline const std::string& ConfigEncoding_Name(ConfigEncoding value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConfigEncoding_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ConfigEncoding_Parse(absl::string_view name, ConfigEncoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigEncoding>(
      ConfigEncoding_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Revision final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.deviceconf.v202511.Revision) */ {
 public:
  inline Revision() : Revision(nullptr) {}
  ~Revision() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Revision* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Revision));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Revision(
      ::google::protobuf::internal::ConstantInitialized);

  inline Revision(const Revision& from) : Revision(nullptr, from) {}
  inline Revision(Revision&& from) noexcept
      : Revision(nullptr, std::move(from)) {}
  inline Revision& operator=(const Revision& from) {
    CopyFrom(from);
    return *this;
  }
  inline Revision& operator=(Revision&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Revision& default_instance() {
    return *internal_default_instance();
  }
  static inline const Revision* internal_default_instance() {
    return reinterpret_cast<const Revision*>(
        &_Revision_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Revision& a, Revision& b) { a.Swap(&b); }
  inline void Swap(Revision* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Revision* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Revision* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Revision>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Revision& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Revision& from) { Revision::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Revision* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.deviceconf.v202511.Revision"; }

 protected:
  explicit Revision(::google::protobuf::Arena* arena);
  Revision(::google::protobuf::Arena* arena, const Revision& from);
  Revision(::google::protobuf::Arena* arena, Revision&& from) noexcept
      : Revision(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kLastFetchedFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .google.protobuf.Timestamp last_fetched = 2 [json_name = "lastFetched"];
  bool has_last_fetched() const;
  void clear_last_fetched() ;
  const ::google::protobuf::Timestamp& last_fetched() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_fetched();
  ::google::protobuf::Timestamp* mutable_last_fetched();
  void set_allocated_last_fetched(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_fetched(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_fetched();

  private:
  const ::google::protobuf::Timestamp& _internal_last_fetched() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_fetched();

  public:
  // @@protoc_insertion_point(class_scope:kentik.deviceconf.v202511.Revision)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Revision& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::Timestamp* last_fetched_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class Snapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.deviceconf.v202511.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  ~Snapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Snapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Snapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Snapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline Snapshot(const Snapshot& from) : Snapshot(nullptr, from) {}
  inline Snapshot(Snapshot&& from) noexcept
      : Snapshot(nullptr, std::move(from)) {}
  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
        &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Snapshot& a, Snapshot& b) { a.Swap(&b); }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Snapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Snapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Snapshot& from) { Snapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Snapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.deviceconf.v202511.Snapshot"; }

 protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  Snapshot(::google::protobuf::Arena* arena, const Snapshot& from);
  Snapshot(::google::protobuf::Arena* arena, Snapshot&& from) noexcept
      : Snapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAgentIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kConfigDataFieldNumber = 6,
    kDigestFieldNumber = 7,
    kDiffDataFieldNumber = 8,
    kRevisionFieldNumber = 3,
    kDiffRevisionFieldNumber = 9,
    kFirstFetchedFieldNumber = 10,
    kFetchErrorFieldNumber = 4,
    kEncodingFieldNumber = 5,
  };
  // string agent_id = 1 [json_name = "agentId"];
  void clear_agent_id() ;
  const std::string& agent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_agent_id(Arg_&& arg, Args_... args);
  std::string* mutable_agent_id();
  PROTOBUF_NODISCARD std::string* release_agent_id();
  void set_allocated_agent_id(std::string* value);

  private:
  const std::string& _internal_agent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_id(
      const std::string& value);
  std::string* _internal_mutable_agent_id();

  public:
  // string device_id = 2 [json_name = "deviceId"];
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // bytes config_data = 6 [json_name = "configData"];
  void clear_config_data() ;
  const std::string& config_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_config_data(Arg_&& arg, Args_... args);
  std::string* mutable_config_data();
  PROTOBUF_NODISCARD std::string* release_config_data();
  void set_allocated_config_data(std::string* value);

  private:
  const std::string& _internal_config_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_data(
      const std::string& value);
  std::string* _internal_mutable_config_data();

  public:
  // string digest = 7 [json_name = "digest"];
  void clear_digest() ;
  const std::string& digest() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_digest(Arg_&& arg, Args_... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* value);

  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(
      const std::string& value);
  std::string* _internal_mutable_digest();

  public:
  // bytes diff_data = 8 [json_name = "diffData"];
  void clear_diff_data() ;
  const std::string& diff_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_diff_data(Arg_&& arg, Args_... args);
  std::string* mutable_diff_data();
  PROTOBUF_NODISCARD std::string* release_diff_data();
  void set_allocated_diff_data(std::string* value);

  private:
  const std::string& _internal_diff_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_diff_data(
      const std::string& value);
  std::string* _internal_mutable_diff_data();

  public:
  // .kentik.deviceconf.v202511.Revision revision = 3 [json_name = "revision"];
  bool has_revision() const;
  void clear_revision() ;
  const ::kentik::deviceconf::v202511::Revision& revision() const;
  PROTOBUF_NODISCARD ::kentik::deviceconf::v202511::Revision* release_revision();
  ::kentik::deviceconf::v202511::Revision* mutable_revision();
  void set_allocated_revision(::kentik::deviceconf::v202511::Revision* value);
  void unsafe_arena_set_allocated_revision(::kentik::deviceconf::v202511::Revision* value);
  ::kentik::deviceconf::v202511::Revision* unsafe_arena_release_revision();

  private:
  const ::kentik::deviceconf::v202511::Revision& _internal_revision() const;
  ::kentik::deviceconf::v202511::Revision* _internal_mutable_revision();

  public:
  // .kentik.deviceconf.v202511.Revision diff_revision = 9 [json_name = "diffRevision"];
  bool has_diff_revision() const;
  void clear_diff_revision() ;
  const ::kentik::deviceconf::v202511::Revision& diff_revision() const;
  PROTOBUF_NODISCARD ::kentik::deviceconf::v202511::Revision* release_diff_revision();
  ::kentik::deviceconf::v202511::Revision* mutable_diff_revision();
  void set_allocated_diff_revision(::kentik::deviceconf::v202511::Revision* value);
  void unsafe_arena_set_allocated_diff_revision(::kentik::deviceconf::v202511::Revision* value);
  ::kentik::deviceconf::v202511::Revision* unsafe_arena_release_diff_revision();

  private:
  const ::kentik::deviceconf::v202511::Revision& _internal_diff_revision() const;
  ::kentik::deviceconf::v202511::Revision* _internal_mutable_diff_revision();

  public:
  // .google.protobuf.Timestamp first_fetched = 10 [json_name = "firstFetched"];
  bool has_first_fetched() const;
  void clear_first_fetched() ;
  const ::google::protobuf::Timestamp& first_fetched() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_fetched();
  ::google::protobuf::Timestamp* mutable_first_fetched();
  void set_allocated_first_fetched(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_fetched(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_fetched();

  private:
  const ::google::protobuf::Timestamp& _internal_first_fetched() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_fetched();

  public:
  // bool fetch_error = 4 [json_name = "fetchError"];
  void clear_fetch_error() ;
  bool fetch_error() const;
  void set_fetch_error(bool value);

  private:
  bool _internal_fetch_error() const;
  void _internal_set_fetch_error(bool value);

  public:
  // .kentik.deviceconf.v202511.ConfigEncoding encoding = 5 [json_name = "encoding"];
  void clear_encoding() ;
  ::kentik::deviceconf::v202511::ConfigEncoding encoding() const;
  void set_encoding(::kentik::deviceconf::v202511::ConfigEncoding value);

  private:
  ::kentik::deviceconf::v202511::ConfigEncoding _internal_encoding() const;
  void _internal_set_encoding(::kentik::deviceconf::v202511::ConfigEncoding value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.deviceconf.v202511.Snapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 3,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Snapshot& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr agent_id_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr config_data_;
    ::google::protobuf::internal::ArenaStringPtr digest_;
    ::google::protobuf::internal::ArenaStringPtr diff_data_;
    ::kentik::deviceconf::v202511::Revision* revision_;
    ::kentik::deviceconf::v202511::Revision* diff_revision_;
    ::google::protobuf::Timestamp* first_fetched_;
    bool fetch_error_;
    int encoding_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Revision

// string id = 1 [json_name = "id"];
inline void Revision::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Revision::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Revision.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Revision::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Revision.id)
}
inline std::string* Revision::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Revision.id)
  return _s;
}
inline const std::string& Revision::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Revision::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Revision::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Revision::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Revision.id)
  return _impl_.id_.Release();
}
inline void Revision::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Revision.id)
}

// .google.protobuf.Timestamp last_fetched = 2 [json_name = "lastFetched"];
inline bool Revision::has_last_fetched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_fetched_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Revision::_internal_last_fetched() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_fetched_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Revision::last_fetched() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Revision.last_fetched)
  return _internal_last_fetched();
}
inline void Revision::unsafe_arena_set_allocated_last_fetched(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_fetched_);
  }
  _impl_.last_fetched_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.Revision.last_fetched)
}
inline ::google::protobuf::Timestamp* Revision::release_last_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.last_fetched_;
  _impl_.last_fetched_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Revision::unsafe_arena_release_last_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Revision.last_fetched)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.last_fetched_;
  _impl_.last_fetched_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Revision::_internal_mutable_last_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_fetched_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_fetched_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_fetched_;
}
inline ::google::protobuf::Timestamp* Revision::mutable_last_fetched() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_fetched();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Revision.last_fetched)
  return _msg;
}
inline void Revision::set_allocated_last_fetched(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_fetched_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.last_fetched_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Revision.last_fetched)
}

// -------------------------------------------------------------------

// Snapshot

// string agent_id = 1 [json_name = "agentId"];
inline void Snapshot::clear_agent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_id_.ClearToEmpty();
}
inline const std::string& Snapshot::agent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.agent_id)
  return _internal_agent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_agent_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.agent_id)
}
inline std::string* Snapshot::mutable_agent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_agent_id();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.agent_id)
  return _s;
}
inline const std::string& Snapshot::_internal_agent_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.agent_id_.Get();
}
inline void Snapshot::_internal_set_agent_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_id_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_agent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.agent_id_.Mutable( GetArena());
}
inline std::string* Snapshot::release_agent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.agent_id)
  return _impl_.agent_id_.Release();
}
inline void Snapshot::set_allocated_agent_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.agent_id_.IsDefault()) {
    _impl_.agent_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.agent_id)
}

// string device_id = 2 [json_name = "deviceId"];
inline void Snapshot::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& Snapshot::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.device_id)
}
inline std::string* Snapshot::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.device_id)
  return _s;
}
inline const std::string& Snapshot::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void Snapshot::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* Snapshot::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.device_id)
  return _impl_.device_id_.Release();
}
inline void Snapshot::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.device_id)
}

// .kentik.deviceconf.v202511.Revision revision = 3 [json_name = "revision"];
inline bool Snapshot::has_revision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.revision_ != nullptr);
  return value;
}
inline void Snapshot::clear_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.revision_ != nullptr) _impl_.revision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::deviceconf::v202511::Revision& Snapshot::_internal_revision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::deviceconf::v202511::Revision* p = _impl_.revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::deviceconf::v202511::Revision&>(::kentik::deviceconf::v202511::_Revision_default_instance_);
}
inline const ::kentik::deviceconf::v202511::Revision& Snapshot::revision() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.revision)
  return _internal_revision();
}
inline void Snapshot::unsafe_arena_set_allocated_revision(::kentik::deviceconf::v202511::Revision* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.revision_);
  }
  _impl_.revision_ = reinterpret_cast<::kentik::deviceconf::v202511::Revision*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.Snapshot.revision)
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::release_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::deviceconf::v202511::Revision* released = _impl_.revision_;
  _impl_.revision_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::unsafe_arena_release_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.revision)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::deviceconf::v202511::Revision* temp = _impl_.revision_;
  _impl_.revision_ = nullptr;
  return temp;
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::_internal_mutable_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.revision_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::deviceconf::v202511::Revision>(GetArena());
    _impl_.revision_ = reinterpret_cast<::kentik::deviceconf::v202511::Revision*>(p);
  }
  return _impl_.revision_;
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::mutable_revision() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::deviceconf::v202511::Revision* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.revision)
  return _msg;
}
inline void Snapshot::set_allocated_revision(::kentik::deviceconf::v202511::Revision* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.revision_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.revision_ = reinterpret_cast<::kentik::deviceconf::v202511::Revision*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.revision)
}

// bool fetch_error = 4 [json_name = "fetchError"];
inline void Snapshot::clear_fetch_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_error_ = false;
}
inline bool Snapshot::fetch_error() const {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.fetch_error)
  return _internal_fetch_error();
}
inline void Snapshot::set_fetch_error(bool value) {
  _internal_set_fetch_error(value);
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.fetch_error)
}
inline bool Snapshot::_internal_fetch_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fetch_error_;
}
inline void Snapshot::_internal_set_fetch_error(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_error_ = value;
}

// .kentik.deviceconf.v202511.ConfigEncoding encoding = 5 [json_name = "encoding"];
inline void Snapshot::clear_encoding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_ = 0;
}
inline ::kentik::deviceconf::v202511::ConfigEncoding Snapshot::encoding() const {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.encoding)
  return _internal_encoding();
}
inline void Snapshot::set_encoding(::kentik::deviceconf::v202511::ConfigEncoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.encoding)
}
inline ::kentik::deviceconf::v202511::ConfigEncoding Snapshot::_internal_encoding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kentik::deviceconf::v202511::ConfigEncoding>(_impl_.encoding_);
}
inline void Snapshot::_internal_set_encoding(::kentik::deviceconf::v202511::ConfigEncoding value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_ = value;
}

// bytes config_data = 6 [json_name = "configData"];
inline void Snapshot::clear_config_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_data_.ClearToEmpty();
}
inline const std::string& Snapshot::config_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.config_data)
  return _internal_config_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_config_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.config_data)
}
inline std::string* Snapshot::mutable_config_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_config_data();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.config_data)
  return _s;
}
inline const std::string& Snapshot::_internal_config_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.config_data_.Get();
}
inline void Snapshot::_internal_set_config_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_data_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_config_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.config_data_.Mutable( GetArena());
}
inline std::string* Snapshot::release_config_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.config_data)
  return _impl_.config_data_.Release();
}
inline void Snapshot::set_allocated_config_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.config_data_.IsDefault()) {
    _impl_.config_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.config_data)
}

// string digest = 7 [json_name = "digest"];
inline void Snapshot::clear_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.ClearToEmpty();
}
inline const std::string& Snapshot::digest() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.digest)
  return _internal_digest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_digest(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.digest)
}
inline std::string* Snapshot::mutable_digest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.digest)
  return _s;
}
inline const std::string& Snapshot::_internal_digest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.digest_.Get();
}
inline void Snapshot::_internal_set_digest(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.digest_.Mutable( GetArena());
}
inline std::string* Snapshot::release_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.digest)
  return _impl_.digest_.Release();
}
inline void Snapshot::set_allocated_digest(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.digest)
}

// bytes diff_data = 8 [json_name = "diffData"];
inline void Snapshot::clear_diff_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diff_data_.ClearToEmpty();
}
inline const std::string& Snapshot::diff_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.diff_data)
  return _internal_diff_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_diff_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diff_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Snapshot.diff_data)
}
inline std::string* Snapshot::mutable_diff_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_diff_data();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.diff_data)
  return _s;
}
inline const std::string& Snapshot::_internal_diff_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diff_data_.Get();
}
inline void Snapshot::_internal_set_diff_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diff_data_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_diff_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.diff_data_.Mutable( GetArena());
}
inline std::string* Snapshot::release_diff_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.diff_data)
  return _impl_.diff_data_.Release();
}
inline void Snapshot::set_allocated_diff_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diff_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.diff_data_.IsDefault()) {
    _impl_.diff_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.diff_data)
}

// .kentik.deviceconf.v202511.Revision diff_revision = 9 [json_name = "diffRevision"];
inline bool Snapshot::has_diff_revision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.diff_revision_ != nullptr);
  return value;
}
inline void Snapshot::clear_diff_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.diff_revision_ != nullptr) _impl_.diff_revision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kentik::deviceconf::v202511::Revision& Snapshot::_internal_diff_revision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::deviceconf::v202511::Revision* p = _impl_.diff_revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::deviceconf::v202511::Revision&>(::kentik::deviceconf::v202511::_Revision_default_instance_);
}
inline const ::kentik::deviceconf::v202511::Revision& Snapshot::diff_revision() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.diff_revision)
  return _internal_diff_revision();
}
inline void Snapshot::unsafe_arena_set_allocated_diff_revision(::kentik::deviceconf::v202511::Revision* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.diff_revision_);
  }
  _impl_.diff_revision_ = reinterpret_cast<::kentik::deviceconf::v202511::Revision*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.Snapshot.diff_revision)
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::release_diff_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kentik::deviceconf::v202511::Revision* released = _impl_.diff_revision_;
  _impl_.diff_revision_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::unsafe_arena_release_diff_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.diff_revision)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kentik::deviceconf::v202511::Revision* temp = _impl_.diff_revision_;
  _impl_.diff_revision_ = nullptr;
  return temp;
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::_internal_mutable_diff_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.diff_revision_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::deviceconf::v202511::Revision>(GetArena());
    _impl_.diff_revision_ = reinterpret_cast<::kentik::deviceconf::v202511::Revision*>(p);
  }
  return _impl_.diff_revision_;
}
inline ::kentik::deviceconf::v202511::Revision* Snapshot::mutable_diff_revision() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kentik::deviceconf::v202511::Revision* _msg = _internal_mutable_diff_revision();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.diff_revision)
  return _msg;
}
inline void Snapshot::set_allocated_diff_revision(::kentik::deviceconf::v202511::Revision* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.diff_revision_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.diff_revision_ = reinterpret_cast<::kentik::deviceconf::v202511::Revision*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.diff_revision)
}

// .google.protobuf.Timestamp first_fetched = 10 [json_name = "firstFetched"];
inline bool Snapshot::has_first_fetched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_fetched_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Snapshot::_internal_first_fetched() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.first_fetched_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Snapshot::first_fetched() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Snapshot.first_fetched)
  return _internal_first_fetched();
}
inline void Snapshot::unsafe_arena_set_allocated_first_fetched(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_fetched_);
  }
  _impl_.first_fetched_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.Snapshot.first_fetched)
}
inline ::google::protobuf::Timestamp* Snapshot::release_first_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.first_fetched_;
  _impl_.first_fetched_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Snapshot::unsafe_arena_release_first_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Snapshot.first_fetched)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.first_fetched_;
  _impl_.first_fetched_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Snapshot::_internal_mutable_first_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_fetched_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_fetched_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_fetched_;
}
inline ::google::protobuf::Timestamp* Snapshot::mutable_first_fetched() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_fetched();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Snapshot.first_fetched)
  return _msg;
}
inline void Snapshot::set_allocated_first_fetched(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_fetched_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.first_fetched_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Snapshot.first_fetched)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kentik::deviceconf::v202511::ConfigEncoding> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::deviceconf::v202511::ConfigEncoding>() {
  return ::kentik::deviceconf::v202511::ConfigEncoding_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_2epb_2eh
