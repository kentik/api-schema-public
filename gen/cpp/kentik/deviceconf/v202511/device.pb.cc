// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/deviceconf/v202511/device.proto
// Protobuf C++ Version: 5.29.3

#include "kentik/deviceconf/v202511/device.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kentik {
namespace deviceconf {
namespace v202511 {

inline constexpr DeviceSSHCreds::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        private_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        passphrase_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceSSHCreds::DeviceSSHCreds(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeviceSSHCredsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceSSHCredsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceSSHCredsDefaultTypeInternal() {}
  union {
    DeviceSSHCreds _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceSSHCredsDefaultTypeInternal _DeviceSSHCreds_default_instance_;

inline constexpr FetchParameters::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fetch_interval_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FetchParameters::FetchParameters(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FetchParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchParametersDefaultTypeInternal() {}
  union {
    FetchParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchParametersDefaultTypeInternal _FetchParameters_default_instance_;

inline constexpr Device::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hostname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ssh_creds_{nullptr},
        fetch_params_{nullptr},
        platform_{static_cast< ::kentik::deviceconf::v202511::DevicePlatform >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Device::Device(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto = nullptr;
const ::uint32_t
    TableStruct_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::DeviceSSHCreds, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::DeviceSSHCreds, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::DeviceSSHCreds, _impl_.private_key_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::DeviceSSHCreds, _impl_.passphrase_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::FetchParameters, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::FetchParameters, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::FetchParameters, _impl_.fetch_interval_),
        0,
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_.hostname_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_.platform_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_.ssh_creds_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Device, _impl_.fetch_params_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kentik::deviceconf::v202511::DeviceSSHCreds)},
        {11, 20, -1, sizeof(::kentik::deviceconf::v202511::FetchParameters)},
        {21, 35, -1, sizeof(::kentik::deviceconf::v202511::Device)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kentik::deviceconf::v202511::_DeviceSSHCreds_default_instance_._instance,
    &::kentik::deviceconf::v202511::_FetchParameters_default_instance_._instance,
    &::kentik::deviceconf::v202511::_Device_default_instance_._instance,
};
const char descriptor_table_protodef_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&kentik/deviceconf/v202511/device.proto"
    "\022\031kentik.deviceconf.v202511\032\036google/prot"
    "obuf/duration.proto\"m\n\016DeviceSSHCreds\022\032\n"
    "\010username\030\001 \001(\tR\010username\022\037\n\013private_key"
    "\030\002 \001(\tR\nprivateKey\022\036\n\npassphrase\030\003 \001(\tR\n"
    "passphrase\"S\n\017FetchParameters\022@\n\016fetch_i"
    "nterval\030\001 \001(\0132\031.google.protobuf.Duration"
    "R\rfetchInterval\"\246\002\n\006Device\022\016\n\002id\030\001 \001(\tR\002"
    "id\022\022\n\004name\030\002 \001(\tR\004name\022\032\n\010hostname\030\003 \001(\t"
    "R\010hostname\022E\n\010platform\030\004 \001(\0162).kentik.de"
    "viceconf.v202511.DevicePlatformR\010platfor"
    "m\022F\n\tssh_creds\030\005 \001(\0132).kentik.deviceconf"
    ".v202511.DeviceSSHCredsR\010sshCreds\022M\n\014fet"
    "ch_params\030\006 \001(\0132*.kentik.deviceconf.v202"
    "511.FetchParametersR\013fetchParams*\215\005\n\016Dev"
    "icePlatform\022\037\n\033DEVICE_PLATFORM_UNSPECIFI"
    "ED\020\000\022\036\n\032DEVICE_PLATFORM_ARISTA_EOS\020\001\022\035\n\031"
    "DEVICE_PLATFORM_ARUBA_WLC\020\002\022\037\n\033DEVICE_PL"
    "ATFORM_CISCO_IOSXE\020\003\022\037\n\033DEVICE_PLATFORM_"
    "CISCO_IOSXR\020\004\022\036\n\032DEVICE_PLATFORM_CISCO_N"
    "XOS\020\005\022\035\n\031DEVICE_PLATFORM_CISCO_IOS\020\006\022!\n\035"
    "DEVICE_PLATFORM_CUMULUS_LINUX\020\007\022!\n\035DEVIC"
    "E_PLATFORM_CUMULUS_VTYSH\020\010\022\036\n\032DEVICE_PLA"
    "TFORM_HP_COMWARE\020\t\022\036\n\032DEVICE_PLATFORM_HU"
    "AWEI_VRP\020\n\022$\n DEVICE_PLATFORM_IPINFUSION"
    "_OCNOS\020\013\022!\n\035DEVICE_PLATFORM_JUNIPER_JUNO"
    "S\020\014\022\035\n\031DEVICE_PLATFORM_NOKIA_SRL\020\r\022\036\n\032DE"
    "VICE_PLATFORM_NOKIA_SROS\020\016\022&\n\"DEVICE_PLA"
    "TFORM_NOKIA_SROS_CLASSIC\020\017\022\"\n\036DEVICE_PLA"
    "TFORM_PALOALTO_PANOS\020\020\022\037\n\033DEVICE_PLATFOR"
    "M_RUIJIE_RGOS\020\021\022\037\n\033DEVICE_PLATFORM_VYATT"
    "A_VYOS\020\022BQZOgithub.com/kentik/api-schema"
    "-public/gen/go/kentik/deviceconf/v202511"
    ";deviceconfb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto = {
    false,
    false,
    1339,
    descriptor_table_protodef_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto,
    "kentik/deviceconf/v202511/device.proto",
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_once,
    descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto::offsets,
    file_level_enum_descriptors_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto,
    file_level_service_descriptors_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto,
};
namespace kentik {
namespace deviceconf {
namespace v202511 {
const ::google::protobuf::EnumDescriptor* DevicePlatform_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto);
  return file_level_enum_descriptors_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DevicePlatform_internal_data_[] = {
    1245184u, 0u, };
bool DevicePlatform_IsValid(int value) {
  return 0 <= value && value <= 18;
}
// ===================================================================

class DeviceSSHCreds::_Internal {
 public:
};

DeviceSSHCreds::DeviceSSHCreds(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.deviceconf.v202511.DeviceSSHCreds)
}
inline PROTOBUF_NDEBUG_INLINE DeviceSSHCreds::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::deviceconf::v202511::DeviceSSHCreds& from_msg)
      : username_(arena, from.username_),
        private_key_(arena, from.private_key_),
        passphrase_(arena, from.passphrase_),
        _cached_size_{0} {}

DeviceSSHCreds::DeviceSSHCreds(
    ::google::protobuf::Arena* arena,
    const DeviceSSHCreds& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeviceSSHCreds* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.deviceconf.v202511.DeviceSSHCreds)
}
inline PROTOBUF_NDEBUG_INLINE DeviceSSHCreds::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : username_(arena),
        private_key_(arena),
        passphrase_(arena),
        _cached_size_{0} {}

inline void DeviceSSHCreds::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DeviceSSHCreds::~DeviceSSHCreds() {
  // @@protoc_insertion_point(destructor:kentik.deviceconf.v202511.DeviceSSHCreds)
  SharedDtor(*this);
}
inline void DeviceSSHCreds::SharedDtor(MessageLite& self) {
  DeviceSSHCreds& this_ = static_cast<DeviceSSHCreds&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.username_.Destroy();
  this_._impl_.private_key_.Destroy();
  this_._impl_.passphrase_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DeviceSSHCreds::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DeviceSSHCreds(arena);
}
constexpr auto DeviceSSHCreds::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeviceSSHCreds),
                                            alignof(DeviceSSHCreds));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DeviceSSHCreds::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DeviceSSHCreds_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DeviceSSHCreds::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DeviceSSHCreds>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DeviceSSHCreds::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DeviceSSHCreds>(), &DeviceSSHCreds::ByteSizeLong,
            &DeviceSSHCreds::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_._cached_size_),
        false,
    },
    &DeviceSSHCreds::kDescriptorMethods,
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DeviceSSHCreds::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 78, 2> DeviceSSHCreds::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::DeviceSSHCreds>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string username = 1 [json_name = "username"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_.username_)}},
    // string private_key = 2 [json_name = "privateKey"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_.private_key_)}},
    // string passphrase = 3 [json_name = "passphrase"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_.passphrase_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string username = 1 [json_name = "username"];
    {PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_.username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string private_key = 2 [json_name = "privateKey"];
    {PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_.private_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string passphrase = 3 [json_name = "passphrase"];
    {PROTOBUF_FIELD_OFFSET(DeviceSSHCreds, _impl_.passphrase_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\10\13\12\0\0\0\0"
    "kentik.deviceconf.v202511.DeviceSSHCreds"
    "username"
    "private_key"
    "passphrase"
  }},
};

PROTOBUF_NOINLINE void DeviceSSHCreds::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.deviceconf.v202511.DeviceSSHCreds)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.private_key_.ClearToEmpty();
  _impl_.passphrase_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DeviceSSHCreds::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DeviceSSHCreds& this_ = static_cast<const DeviceSSHCreds&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DeviceSSHCreds::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DeviceSSHCreds& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.deviceconf.v202511.DeviceSSHCreds)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string username = 1 [json_name = "username"];
          if (!this_._internal_username().empty()) {
            const std::string& _s = this_._internal_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.DeviceSSHCreds.username");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string private_key = 2 [json_name = "privateKey"];
          if (!this_._internal_private_key().empty()) {
            const std::string& _s = this_._internal_private_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.DeviceSSHCreds.private_key");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string passphrase = 3 [json_name = "passphrase"];
          if (!this_._internal_passphrase().empty()) {
            const std::string& _s = this_._internal_passphrase();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.DeviceSSHCreds.passphrase");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.deviceconf.v202511.DeviceSSHCreds)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DeviceSSHCreds::ByteSizeLong(const MessageLite& base) {
          const DeviceSSHCreds& this_ = static_cast<const DeviceSSHCreds&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DeviceSSHCreds::ByteSizeLong() const {
          const DeviceSSHCreds& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.deviceconf.v202511.DeviceSSHCreds)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string username = 1 [json_name = "username"];
            if (!this_._internal_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_username());
            }
            // string private_key = 2 [json_name = "privateKey"];
            if (!this_._internal_private_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_private_key());
            }
            // string passphrase = 3 [json_name = "passphrase"];
            if (!this_._internal_passphrase().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_passphrase());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DeviceSSHCreds::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeviceSSHCreds*>(&to_msg);
  auto& from = static_cast<const DeviceSSHCreds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.deviceconf.v202511.DeviceSSHCreds)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_private_key().empty()) {
    _this->_internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_passphrase().empty()) {
    _this->_internal_set_passphrase(from._internal_passphrase());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceSSHCreds::CopyFrom(const DeviceSSHCreds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.deviceconf.v202511.DeviceSSHCreds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeviceSSHCreds::InternalSwap(DeviceSSHCreds* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.private_key_, &other->_impl_.private_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.passphrase_, &other->_impl_.passphrase_, arena);
}

::google::protobuf::Metadata DeviceSSHCreds::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FetchParameters::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FetchParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FetchParameters, _impl_._has_bits_);
};

void FetchParameters::clear_fetch_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_interval_ != nullptr) _impl_.fetch_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FetchParameters::FetchParameters(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.deviceconf.v202511.FetchParameters)
}
inline PROTOBUF_NDEBUG_INLINE FetchParameters::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::deviceconf::v202511::FetchParameters& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FetchParameters::FetchParameters(
    ::google::protobuf::Arena* arena,
    const FetchParameters& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FetchParameters* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.fetch_interval_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.fetch_interval_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.deviceconf.v202511.FetchParameters)
}
inline PROTOBUF_NDEBUG_INLINE FetchParameters::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FetchParameters::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.fetch_interval_ = {};
}
FetchParameters::~FetchParameters() {
  // @@protoc_insertion_point(destructor:kentik.deviceconf.v202511.FetchParameters)
  SharedDtor(*this);
}
inline void FetchParameters::SharedDtor(MessageLite& self) {
  FetchParameters& this_ = static_cast<FetchParameters&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.fetch_interval_;
  this_._impl_.~Impl_();
}

inline void* FetchParameters::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FetchParameters(arena);
}
constexpr auto FetchParameters::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(FetchParameters),
                                            alignof(FetchParameters));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FetchParameters::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FetchParameters_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FetchParameters::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FetchParameters>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FetchParameters::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FetchParameters>(), &FetchParameters::ByteSizeLong,
            &FetchParameters::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FetchParameters, _impl_._cached_size_),
        false,
    },
    &FetchParameters::kDescriptorMethods,
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FetchParameters::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FetchParameters::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FetchParameters, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::FetchParameters>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Duration fetch_interval = 1 [json_name = "fetchInterval"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FetchParameters, _impl_.fetch_interval_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Duration fetch_interval = 1 [json_name = "fetchInterval"];
    {PROTOBUF_FIELD_OFFSET(FetchParameters, _impl_.fetch_interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FetchParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.deviceconf.v202511.FetchParameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fetch_interval_ != nullptr);
    _impl_.fetch_interval_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FetchParameters::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FetchParameters& this_ = static_cast<const FetchParameters&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FetchParameters::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FetchParameters& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.deviceconf.v202511.FetchParameters)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Duration fetch_interval = 1 [json_name = "fetchInterval"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.fetch_interval_, this_._impl_.fetch_interval_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.deviceconf.v202511.FetchParameters)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FetchParameters::ByteSizeLong(const MessageLite& base) {
          const FetchParameters& this_ = static_cast<const FetchParameters&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FetchParameters::ByteSizeLong() const {
          const FetchParameters& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.deviceconf.v202511.FetchParameters)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .google.protobuf.Duration fetch_interval = 1 [json_name = "fetchInterval"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fetch_interval_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FetchParameters::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FetchParameters*>(&to_msg);
  auto& from = static_cast<const FetchParameters&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.deviceconf.v202511.FetchParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.fetch_interval_ != nullptr);
    if (_this->_impl_.fetch_interval_ == nullptr) {
      _this->_impl_.fetch_interval_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.fetch_interval_);
    } else {
      _this->_impl_.fetch_interval_->MergeFrom(*from._impl_.fetch_interval_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FetchParameters::CopyFrom(const FetchParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.deviceconf.v202511.FetchParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FetchParameters::InternalSwap(FetchParameters* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fetch_interval_, other->_impl_.fetch_interval_);
}

::google::protobuf::Metadata FetchParameters::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Device::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Device>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Device, _impl_._has_bits_);
};

Device::Device(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.deviceconf.v202511.Device)
}
inline PROTOBUF_NDEBUG_INLINE Device::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::deviceconf::v202511::Device& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        name_(arena, from.name_),
        hostname_(arena, from.hostname_) {}

Device::Device(
    ::google::protobuf::Arena* arena,
    const Device& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Device* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ssh_creds_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::DeviceSSHCreds>(
                              arena, *from._impl_.ssh_creds_)
                        : nullptr;
  _impl_.fetch_params_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::FetchParameters>(
                              arena, *from._impl_.fetch_params_)
                        : nullptr;
  _impl_.platform_ = from._impl_.platform_;

  // @@protoc_insertion_point(copy_constructor:kentik.deviceconf.v202511.Device)
}
inline PROTOBUF_NDEBUG_INLINE Device::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        id_(arena),
        name_(arena),
        hostname_(arena) {}

inline void Device::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ssh_creds_),
           0,
           offsetof(Impl_, platform_) -
               offsetof(Impl_, ssh_creds_) +
               sizeof(Impl_::platform_));
}
Device::~Device() {
  // @@protoc_insertion_point(destructor:kentik.deviceconf.v202511.Device)
  SharedDtor(*this);
}
inline void Device::SharedDtor(MessageLite& self) {
  Device& this_ = static_cast<Device&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.hostname_.Destroy();
  delete this_._impl_.ssh_creds_;
  delete this_._impl_.fetch_params_;
  this_._impl_.~Impl_();
}

inline void* Device::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Device(arena);
}
constexpr auto Device::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Device),
                                            alignof(Device));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Device::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Device_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Device::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Device>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Device::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Device>(), &Device::ByteSizeLong,
            &Device::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Device, _impl_._cached_size_),
        false,
    },
    &Device::kDescriptorMethods,
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Device::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 55, 2> Device::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Device, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::Device>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Device, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Device, _impl_.name_)}},
    // string hostname = 3 [json_name = "hostname"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Device, _impl_.hostname_)}},
    // .kentik.deviceconf.v202511.DevicePlatform platform = 4 [json_name = "platform"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Device, _impl_.platform_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Device, _impl_.platform_)}},
    // .kentik.deviceconf.v202511.DeviceSSHCreds ssh_creds = 5 [json_name = "sshCreds"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Device, _impl_.ssh_creds_)}},
    // .kentik.deviceconf.v202511.FetchParameters fetch_params = 6 [json_name = "fetchParams"];
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(Device, _impl_.fetch_params_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Device, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Device, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string hostname = 3 [json_name = "hostname"];
    {PROTOBUF_FIELD_OFFSET(Device, _impl_.hostname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.deviceconf.v202511.DevicePlatform platform = 4 [json_name = "platform"];
    {PROTOBUF_FIELD_OFFSET(Device, _impl_.platform_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kentik.deviceconf.v202511.DeviceSSHCreds ssh_creds = 5 [json_name = "sshCreds"];
    {PROTOBUF_FIELD_OFFSET(Device, _impl_.ssh_creds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.deviceconf.v202511.FetchParameters fetch_params = 6 [json_name = "fetchParams"];
    {PROTOBUF_FIELD_OFFSET(Device, _impl_.fetch_params_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::DeviceSSHCreds>()},
    {::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::FetchParameters>()},
  }}, {{
    "\40\2\4\10\0\0\0\0"
    "kentik.deviceconf.v202511.Device"
    "id"
    "name"
    "hostname"
  }},
};

PROTOBUF_NOINLINE void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.deviceconf.v202511.Device)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ssh_creds_ != nullptr);
      _impl_.ssh_creds_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fetch_params_ != nullptr);
      _impl_.fetch_params_->Clear();
    }
  }
  _impl_.platform_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Device::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Device& this_ = static_cast<const Device&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Device::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Device& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.deviceconf.v202511.Device)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Device.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Device.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string hostname = 3 [json_name = "hostname"];
          if (!this_._internal_hostname().empty()) {
            const std::string& _s = this_._internal_hostname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Device.hostname");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .kentik.deviceconf.v202511.DevicePlatform platform = 4 [json_name = "platform"];
          if (this_._internal_platform() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_platform(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.deviceconf.v202511.DeviceSSHCreds ssh_creds = 5 [json_name = "sshCreds"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.ssh_creds_, this_._impl_.ssh_creds_->GetCachedSize(), target,
                stream);
          }

          // .kentik.deviceconf.v202511.FetchParameters fetch_params = 6 [json_name = "fetchParams"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.fetch_params_, this_._impl_.fetch_params_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.deviceconf.v202511.Device)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Device::ByteSizeLong(const MessageLite& base) {
          const Device& this_ = static_cast<const Device&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Device::ByteSizeLong() const {
          const Device& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.deviceconf.v202511.Device)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string hostname = 3 [json_name = "hostname"];
            if (!this_._internal_hostname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hostname());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kentik.deviceconf.v202511.DeviceSSHCreds ssh_creds = 5 [json_name = "sshCreds"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ssh_creds_);
            }
            // .kentik.deviceconf.v202511.FetchParameters fetch_params = 6 [json_name = "fetchParams"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fetch_params_);
            }
          }
           {
            // .kentik.deviceconf.v202511.DevicePlatform platform = 4 [json_name = "platform"];
            if (this_._internal_platform() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_platform());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Device::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Device*>(&to_msg);
  auto& from = static_cast<const Device&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.deviceconf.v202511.Device)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ssh_creds_ != nullptr);
      if (_this->_impl_.ssh_creds_ == nullptr) {
        _this->_impl_.ssh_creds_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::DeviceSSHCreds>(arena, *from._impl_.ssh_creds_);
      } else {
        _this->_impl_.ssh_creds_->MergeFrom(*from._impl_.ssh_creds_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.fetch_params_ != nullptr);
      if (_this->_impl_.fetch_params_ == nullptr) {
        _this->_impl_.fetch_params_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::FetchParameters>(arena, *from._impl_.fetch_params_);
      } else {
        _this->_impl_.fetch_params_->MergeFrom(*from._impl_.fetch_params_);
      }
    }
  }
  if (from._internal_platform() != 0) {
    _this->_impl_.platform_ = from._impl_.platform_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.deviceconf.v202511.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Device::InternalSwap(Device* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hostname_, &other->_impl_.hostname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, _impl_.platform_)
      + sizeof(Device::_impl_.platform_)
      - PROTOBUF_FIELD_OFFSET(Device, _impl_.ssh_creds_)>(
          reinterpret_cast<char*>(&_impl_.ssh_creds_),
          reinterpret_cast<char*>(&other->_impl_.ssh_creds_));
}

::google::protobuf::Metadata Device::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
