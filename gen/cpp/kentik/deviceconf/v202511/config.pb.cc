// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/deviceconf/v202511/config.proto
// Protobuf C++ Version: 5.29.3

#include "kentik/deviceconf/v202511/config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kentik {
namespace deviceconf {
namespace v202511 {

inline constexpr Revision::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_fetched_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Revision::Revision(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RevisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevisionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevisionDefaultTypeInternal() {}
  union {
    Revision _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevisionDefaultTypeInternal _Revision_default_instance_;

inline constexpr Snapshot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agent_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        config_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        digest_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        diff_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        revision_{nullptr},
        diff_revision_{nullptr},
        first_fetched_{nullptr},
        fetch_error_{false},
        encoding_{static_cast< ::kentik::deviceconf::v202511::ConfigEncoding >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Snapshot::Snapshot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotDefaultTypeInternal _Snapshot_default_instance_;
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Revision, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Revision, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Revision, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Revision, _impl_.last_fetched_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.agent_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.device_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.revision_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.fetch_error_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.encoding_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.config_data_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.digest_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.diff_data_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.diff_revision_),
        PROTOBUF_FIELD_OFFSET(::kentik::deviceconf::v202511::Snapshot, _impl_.first_fetched_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::kentik::deviceconf::v202511::Revision)},
        {12, 30, -1, sizeof(::kentik::deviceconf::v202511::Snapshot)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kentik::deviceconf::v202511::_Revision_default_instance_._instance,
    &::kentik::deviceconf::v202511::_Snapshot_default_instance_._instance,
};
const char descriptor_table_protodef_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&kentik/deviceconf/v202511/config.proto"
    "\022\031kentik.deviceconf.v202511\032\037google/prot"
    "obuf/timestamp.proto\"Y\n\010Revision\022\016\n\002id\030\001"
    " \001(\tR\002id\022=\n\014last_fetched\030\002 \001(\0132\032.google."
    "protobuf.TimestampR\013lastFetched\"\314\003\n\010Snap"
    "shot\022\031\n\010agent_id\030\001 \001(\tR\007agentId\022\033\n\tdevic"
    "e_id\030\002 \001(\tR\010deviceId\022\?\n\010revision\030\003 \001(\0132#"
    ".kentik.deviceconf.v202511.RevisionR\010rev"
    "ision\022\037\n\013fetch_error\030\004 \001(\010R\nfetchError\022E"
    "\n\010encoding\030\005 \001(\0162).kentik.deviceconf.v20"
    "2511.ConfigEncodingR\010encoding\022\037\n\013config_"
    "data\030\006 \001(\014R\nconfigData\022\026\n\006digest\030\007 \001(\tR\006"
    "digest\022\033\n\tdiff_data\030\010 \001(\014R\010diffData\022H\n\rd"
    "iff_revision\030\t \001(\0132#.kentik.deviceconf.v"
    "202511.RevisionR\014diffRevision\022\?\n\rfirst_f"
    "etched\030\n \001(\0132\032.google.protobuf.Timestamp"
    "R\014firstFetched*g\n\016ConfigEncoding\022\037\n\033CONF"
    "IG_ENCODING_UNSPECIFIED\020\000\022\031\n\025CONFIG_ENCO"
    "DING_PLAIN\020\001\022\031\n\025CONFIG_ENCODING_BZIP2\020\002B"
    "QZOgithub.com/kentik/api-schema-public/g"
    "en/go/kentik/deviceconf/v202511;deviceco"
    "nfb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto = {
    false,
    false,
    850,
    descriptor_table_protodef_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto,
    "kentik/deviceconf/v202511/config.proto",
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_once,
    descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto::offsets,
    file_level_enum_descriptors_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto,
    file_level_service_descriptors_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto,
};
namespace kentik {
namespace deviceconf {
namespace v202511 {
const ::google::protobuf::EnumDescriptor* ConfigEncoding_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto);
  return file_level_enum_descriptors_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ConfigEncoding_internal_data_[] = {
    196608u, 0u, };
bool ConfigEncoding_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class Revision::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Revision>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Revision, _impl_._has_bits_);
};

void Revision::clear_last_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_fetched_ != nullptr) _impl_.last_fetched_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Revision::Revision(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.deviceconf.v202511.Revision)
}
inline PROTOBUF_NDEBUG_INLINE Revision::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::deviceconf::v202511::Revision& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_) {}

Revision::Revision(
    ::google::protobuf::Arena* arena,
    const Revision& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Revision* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_fetched_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_fetched_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.deviceconf.v202511.Revision)
}
inline PROTOBUF_NDEBUG_INLINE Revision::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        id_(arena) {}

inline void Revision::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.last_fetched_ = {};
}
Revision::~Revision() {
  // @@protoc_insertion_point(destructor:kentik.deviceconf.v202511.Revision)
  SharedDtor(*this);
}
inline void Revision::SharedDtor(MessageLite& self) {
  Revision& this_ = static_cast<Revision&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  delete this_._impl_.last_fetched_;
  this_._impl_.~Impl_();
}

inline void* Revision::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Revision(arena);
}
constexpr auto Revision::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Revision),
                                            alignof(Revision));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Revision::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Revision_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Revision::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Revision>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Revision::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Revision>(), &Revision::ByteSizeLong,
            &Revision::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Revision, _impl_._cached_size_),
        false,
    },
    &Revision::kDescriptorMethods,
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Revision::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 45, 2> Revision::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Revision, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::Revision>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp last_fetched = 2 [json_name = "lastFetched"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Revision, _impl_.last_fetched_)}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Revision, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Revision, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp last_fetched = 2 [json_name = "lastFetched"];
    {PROTOBUF_FIELD_OFFSET(Revision, _impl_.last_fetched_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\42\2\0\0\0\0\0\0"
    "kentik.deviceconf.v202511.Revision"
    "id"
  }},
};

PROTOBUF_NOINLINE void Revision::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.deviceconf.v202511.Revision)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_fetched_ != nullptr);
    _impl_.last_fetched_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Revision::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Revision& this_ = static_cast<const Revision&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Revision::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Revision& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.deviceconf.v202511.Revision)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Revision.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp last_fetched = 2 [json_name = "lastFetched"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.last_fetched_, this_._impl_.last_fetched_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.deviceconf.v202511.Revision)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Revision::ByteSizeLong(const MessageLite& base) {
          const Revision& this_ = static_cast<const Revision&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Revision::ByteSizeLong() const {
          const Revision& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.deviceconf.v202511.Revision)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
           {
            // .google.protobuf.Timestamp last_fetched = 2 [json_name = "lastFetched"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_fetched_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Revision::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Revision*>(&to_msg);
  auto& from = static_cast<const Revision&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.deviceconf.v202511.Revision)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.last_fetched_ != nullptr);
    if (_this->_impl_.last_fetched_ == nullptr) {
      _this->_impl_.last_fetched_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_fetched_);
    } else {
      _this->_impl_.last_fetched_->MergeFrom(*from._impl_.last_fetched_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Revision::CopyFrom(const Revision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.deviceconf.v202511.Revision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Revision::InternalSwap(Revision* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  swap(_impl_.last_fetched_, other->_impl_.last_fetched_);
}

::google::protobuf::Metadata Revision::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Snapshot::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Snapshot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Snapshot, _impl_._has_bits_);
};

void Snapshot::clear_first_fetched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_fetched_ != nullptr) _impl_.first_fetched_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Snapshot::Snapshot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.deviceconf.v202511.Snapshot)
}
inline PROTOBUF_NDEBUG_INLINE Snapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::deviceconf::v202511::Snapshot& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        agent_id_(arena, from.agent_id_),
        device_id_(arena, from.device_id_),
        config_data_(arena, from.config_data_),
        digest_(arena, from.digest_),
        diff_data_(arena, from.diff_data_) {}

Snapshot::Snapshot(
    ::google::protobuf::Arena* arena,
    const Snapshot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Snapshot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.revision_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::Revision>(
                              arena, *from._impl_.revision_)
                        : nullptr;
  _impl_.diff_revision_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::Revision>(
                              arena, *from._impl_.diff_revision_)
                        : nullptr;
  _impl_.first_fetched_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_fetched_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fetch_error_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, fetch_error_),
           offsetof(Impl_, encoding_) -
               offsetof(Impl_, fetch_error_) +
               sizeof(Impl_::encoding_));

  // @@protoc_insertion_point(copy_constructor:kentik.deviceconf.v202511.Snapshot)
}
inline PROTOBUF_NDEBUG_INLINE Snapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        agent_id_(arena),
        device_id_(arena),
        config_data_(arena),
        digest_(arena),
        diff_data_(arena) {}

inline void Snapshot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, revision_),
           0,
           offsetof(Impl_, encoding_) -
               offsetof(Impl_, revision_) +
               sizeof(Impl_::encoding_));
}
Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:kentik.deviceconf.v202511.Snapshot)
  SharedDtor(*this);
}
inline void Snapshot::SharedDtor(MessageLite& self) {
  Snapshot& this_ = static_cast<Snapshot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.agent_id_.Destroy();
  this_._impl_.device_id_.Destroy();
  this_._impl_.config_data_.Destroy();
  this_._impl_.digest_.Destroy();
  this_._impl_.diff_data_.Destroy();
  delete this_._impl_.revision_;
  delete this_._impl_.diff_revision_;
  delete this_._impl_.first_fetched_;
  this_._impl_.~Impl_();
}

inline void* Snapshot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Snapshot(arena);
}
constexpr auto Snapshot::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Snapshot),
                                            alignof(Snapshot));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Snapshot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Snapshot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Snapshot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Snapshot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Snapshot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Snapshot>(), &Snapshot::ByteSizeLong,
            &Snapshot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Snapshot, _impl_._cached_size_),
        false,
    },
    &Snapshot::kDescriptorMethods,
    &descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Snapshot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 74, 2> Snapshot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Snapshot, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::Snapshot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string agent_id = 1 [json_name = "agentId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.agent_id_)}},
    // string device_id = 2 [json_name = "deviceId"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.device_id_)}},
    // .kentik.deviceconf.v202511.Revision revision = 3 [json_name = "revision"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.revision_)}},
    // bool fetch_error = 4 [json_name = "fetchError"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Snapshot, _impl_.fetch_error_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.fetch_error_)}},
    // .kentik.deviceconf.v202511.ConfigEncoding encoding = 5 [json_name = "encoding"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Snapshot, _impl_.encoding_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.encoding_)}},
    // bytes config_data = 6 [json_name = "configData"];
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.config_data_)}},
    // string digest = 7 [json_name = "digest"];
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.digest_)}},
    // bytes diff_data = 8 [json_name = "diffData"];
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.diff_data_)}},
    // .kentik.deviceconf.v202511.Revision diff_revision = 9 [json_name = "diffRevision"];
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.diff_revision_)}},
    // .google.protobuf.Timestamp first_fetched = 10 [json_name = "firstFetched"];
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 2, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.first_fetched_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string agent_id = 1 [json_name = "agentId"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.agent_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_id = 2 [json_name = "deviceId"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.device_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.deviceconf.v202511.Revision revision = 3 [json_name = "revision"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.revision_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool fetch_error = 4 [json_name = "fetchError"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.fetch_error_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .kentik.deviceconf.v202511.ConfigEncoding encoding = 5 [json_name = "encoding"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.encoding_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes config_data = 6 [json_name = "configData"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.config_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string digest = 7 [json_name = "digest"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.digest_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes diff_data = 8 [json_name = "diffData"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.diff_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .kentik.deviceconf.v202511.Revision diff_revision = 9 [json_name = "diffRevision"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.diff_revision_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_fetched = 10 [json_name = "firstFetched"];
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.first_fetched_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::Revision>()},
    {::_pbi::TcParser::GetTable<::kentik::deviceconf::v202511::Revision>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\42\10\11\0\0\0\0\6\0\0\0\0\0\0\0\0"
    "kentik.deviceconf.v202511.Snapshot"
    "agent_id"
    "device_id"
    "digest"
  }},
};

PROTOBUF_NOINLINE void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.deviceconf.v202511.Snapshot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_id_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  _impl_.config_data_.ClearToEmpty();
  _impl_.digest_.ClearToEmpty();
  _impl_.diff_data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.revision_ != nullptr);
      _impl_.revision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.diff_revision_ != nullptr);
      _impl_.diff_revision_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.first_fetched_ != nullptr);
      _impl_.first_fetched_->Clear();
    }
  }
  ::memset(&_impl_.fetch_error_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.encoding_) -
      reinterpret_cast<char*>(&_impl_.fetch_error_)) + sizeof(_impl_.encoding_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Snapshot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Snapshot& this_ = static_cast<const Snapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Snapshot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Snapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.deviceconf.v202511.Snapshot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string agent_id = 1 [json_name = "agentId"];
          if (!this_._internal_agent_id().empty()) {
            const std::string& _s = this_._internal_agent_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Snapshot.agent_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string device_id = 2 [json_name = "deviceId"];
          if (!this_._internal_device_id().empty()) {
            const std::string& _s = this_._internal_device_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Snapshot.device_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.deviceconf.v202511.Revision revision = 3 [json_name = "revision"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.revision_, this_._impl_.revision_->GetCachedSize(), target,
                stream);
          }

          // bool fetch_error = 4 [json_name = "fetchError"];
          if (this_._internal_fetch_error() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_fetch_error(), target);
          }

          // .kentik.deviceconf.v202511.ConfigEncoding encoding = 5 [json_name = "encoding"];
          if (this_._internal_encoding() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_encoding(), target);
          }

          // bytes config_data = 6 [json_name = "configData"];
          if (!this_._internal_config_data().empty()) {
            const std::string& _s = this_._internal_config_data();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // string digest = 7 [json_name = "digest"];
          if (!this_._internal_digest().empty()) {
            const std::string& _s = this_._internal_digest();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.deviceconf.v202511.Snapshot.digest");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // bytes diff_data = 8 [json_name = "diffData"];
          if (!this_._internal_diff_data().empty()) {
            const std::string& _s = this_._internal_diff_data();
            target = stream->WriteBytesMaybeAliased(8, _s, target);
          }

          // .kentik.deviceconf.v202511.Revision diff_revision = 9 [json_name = "diffRevision"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.diff_revision_, this_._impl_.diff_revision_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_fetched = 10 [json_name = "firstFetched"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.first_fetched_, this_._impl_.first_fetched_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.deviceconf.v202511.Snapshot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Snapshot::ByteSizeLong(const MessageLite& base) {
          const Snapshot& this_ = static_cast<const Snapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Snapshot::ByteSizeLong() const {
          const Snapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.deviceconf.v202511.Snapshot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string agent_id = 1 [json_name = "agentId"];
            if (!this_._internal_agent_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_agent_id());
            }
            // string device_id = 2 [json_name = "deviceId"];
            if (!this_._internal_device_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_id());
            }
            // bytes config_data = 6 [json_name = "configData"];
            if (!this_._internal_config_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_config_data());
            }
            // string digest = 7 [json_name = "digest"];
            if (!this_._internal_digest().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_digest());
            }
            // bytes diff_data = 8 [json_name = "diffData"];
            if (!this_._internal_diff_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_diff_data());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kentik.deviceconf.v202511.Revision revision = 3 [json_name = "revision"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.revision_);
            }
            // .kentik.deviceconf.v202511.Revision diff_revision = 9 [json_name = "diffRevision"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.diff_revision_);
            }
            // .google.protobuf.Timestamp first_fetched = 10 [json_name = "firstFetched"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_fetched_);
            }
          }
           {
            // bool fetch_error = 4 [json_name = "fetchError"];
            if (this_._internal_fetch_error() != 0) {
              total_size += 2;
            }
            // .kentik.deviceconf.v202511.ConfigEncoding encoding = 5 [json_name = "encoding"];
            if (this_._internal_encoding() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_encoding());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Snapshot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Snapshot*>(&to_msg);
  auto& from = static_cast<const Snapshot&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.deviceconf.v202511.Snapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agent_id().empty()) {
    _this->_internal_set_agent_id(from._internal_agent_id());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_config_data().empty()) {
    _this->_internal_set_config_data(from._internal_config_data());
  }
  if (!from._internal_digest().empty()) {
    _this->_internal_set_digest(from._internal_digest());
  }
  if (!from._internal_diff_data().empty()) {
    _this->_internal_set_diff_data(from._internal_diff_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.revision_ != nullptr);
      if (_this->_impl_.revision_ == nullptr) {
        _this->_impl_.revision_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::Revision>(arena, *from._impl_.revision_);
      } else {
        _this->_impl_.revision_->MergeFrom(*from._impl_.revision_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.diff_revision_ != nullptr);
      if (_this->_impl_.diff_revision_ == nullptr) {
        _this->_impl_.diff_revision_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::deviceconf::v202511::Revision>(arena, *from._impl_.diff_revision_);
      } else {
        _this->_impl_.diff_revision_->MergeFrom(*from._impl_.diff_revision_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.first_fetched_ != nullptr);
      if (_this->_impl_.first_fetched_ == nullptr) {
        _this->_impl_.first_fetched_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_fetched_);
      } else {
        _this->_impl_.first_fetched_->MergeFrom(*from._impl_.first_fetched_);
      }
    }
  }
  if (from._internal_fetch_error() != 0) {
    _this->_impl_.fetch_error_ = from._impl_.fetch_error_;
  }
  if (from._internal_encoding() != 0) {
    _this->_impl_.encoding_ = from._impl_.encoding_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.deviceconf.v202511.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Snapshot::InternalSwap(Snapshot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.agent_id_, &other->_impl_.agent_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.config_data_, &other->_impl_.config_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.digest_, &other->_impl_.digest_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.diff_data_, &other->_impl_.diff_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.encoding_)
      + sizeof(Snapshot::_impl_.encoding_)
      - PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.revision_)>(
          reinterpret_cast<char*>(&_impl_.revision_),
          reinterpret_cast<char*>(&other->_impl_.revision_));
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
