// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/deviceconf/v202511/device.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_2epb_2eh
#define kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto;
namespace kentik {
namespace deviceconf {
namespace v202511 {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceSSHCreds;
struct DeviceSSHCredsDefaultTypeInternal;
extern DeviceSSHCredsDefaultTypeInternal _DeviceSSHCreds_default_instance_;
class FetchParameters;
struct FetchParametersDefaultTypeInternal;
extern FetchParametersDefaultTypeInternal _FetchParameters_default_instance_;
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace deviceconf {
namespace v202511 {
enum DevicePlatform : int {
  DEVICE_PLATFORM_UNSPECIFIED = 0,
  DEVICE_PLATFORM_ARISTA_EOS = 1,
  DEVICE_PLATFORM_ARUBA_WLC = 2,
  DEVICE_PLATFORM_CISCO_IOSXE = 3,
  DEVICE_PLATFORM_CISCO_IOSXR = 4,
  DEVICE_PLATFORM_CISCO_NXOS = 5,
  DEVICE_PLATFORM_CUMULUS_LINUX = 6,
  DEVICE_PLATFORM_CUMULUS_VTYSH = 7,
  DEVICE_PLATFORM_HP_COMWARE = 8,
  DEVICE_PLATFORM_HUAWEI_VRP = 9,
  DEVICE_PLATFORM_IPINFUSION_OCNOS = 10,
  DEVICE_PLATFORM_JUNIPER_JUNOS = 11,
  DEVICE_PLATFORM_NOKIA_SRL = 12,
  DEVICE_PLATFORM_NOKIA_SROS = 13,
  DEVICE_PLATFORM_NOKIA_SROS_CLASSIC = 14,
  DEVICE_PLATFORM_PALOALTO_PANOS = 15,
  DEVICE_PLATFORM_RUIJIE_RGOS = 16,
  DEVICE_PLATFORM_VYATTA_VYOS = 17,
  DevicePlatform_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DevicePlatform_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DevicePlatform_IsValid(int value);
extern const uint32_t DevicePlatform_internal_data_[];
constexpr DevicePlatform DevicePlatform_MIN = static_cast<DevicePlatform>(0);
constexpr DevicePlatform DevicePlatform_MAX = static_cast<DevicePlatform>(17);
constexpr int DevicePlatform_ARRAYSIZE = 17 + 1;
const ::google::protobuf::EnumDescriptor*
DevicePlatform_descriptor();
template <typename T>
const std::string& DevicePlatform_Name(T value) {
  static_assert(std::is_same<T, DevicePlatform>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DevicePlatform_Name().");
  return DevicePlatform_Name(static_cast<DevicePlatform>(value));
}
template <>
inline const std::string& DevicePlatform_Name(DevicePlatform value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DevicePlatform_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool DevicePlatform_Parse(absl::string_view name, DevicePlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DevicePlatform>(
      DevicePlatform_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class DeviceSSHCreds final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.deviceconf.v202511.DeviceSSHCreds) */ {
 public:
  inline DeviceSSHCreds() : DeviceSSHCreds(nullptr) {}
  ~DeviceSSHCreds() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeviceSSHCreds* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeviceSSHCreds));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSSHCreds(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceSSHCreds(const DeviceSSHCreds& from) : DeviceSSHCreds(nullptr, from) {}
  inline DeviceSSHCreds(DeviceSSHCreds&& from) noexcept
      : DeviceSSHCreds(nullptr, std::move(from)) {}
  inline DeviceSSHCreds& operator=(const DeviceSSHCreds& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSSHCreds& operator=(DeviceSSHCreds&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSSHCreds& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSSHCreds* internal_default_instance() {
    return reinterpret_cast<const DeviceSSHCreds*>(
        &_DeviceSSHCreds_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DeviceSSHCreds& a, DeviceSSHCreds& b) { a.Swap(&b); }
  inline void Swap(DeviceSSHCreds* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSSHCreds* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSSHCreds* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeviceSSHCreds>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSSHCreds& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceSSHCreds& from) { DeviceSSHCreds::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeviceSSHCreds* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.deviceconf.v202511.DeviceSSHCreds"; }

 protected:
  explicit DeviceSSHCreds(::google::protobuf::Arena* arena);
  DeviceSSHCreds(::google::protobuf::Arena* arena, const DeviceSSHCreds& from);
  DeviceSSHCreds(::google::protobuf::Arena* arena, DeviceSSHCreds&& from) noexcept
      : DeviceSSHCreds(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPrivateKeyFieldNumber = 2,
    kPassphraseFieldNumber = 3,
  };
  // string username = 1 [json_name = "username"];
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string private_key = 2 [json_name = "privateKey"];
  void clear_private_key() ;
  const std::string& private_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_private_key(Arg_&& arg, Args_... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* value);

  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(
      const std::string& value);
  std::string* _internal_mutable_private_key();

  public:
  // string passphrase = 3 [json_name = "passphrase"];
  void clear_passphrase() ;
  const std::string& passphrase() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_passphrase(Arg_&& arg, Args_... args);
  std::string* mutable_passphrase();
  PROTOBUF_NODISCARD std::string* release_passphrase();
  void set_allocated_passphrase(std::string* value);

  private:
  const std::string& _internal_passphrase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passphrase(
      const std::string& value);
  std::string* _internal_mutable_passphrase();

  public:
  // @@protoc_insertion_point(class_scope:kentik.deviceconf.v202511.DeviceSSHCreds)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceSSHCreds& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr private_key_;
    ::google::protobuf::internal::ArenaStringPtr passphrase_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class FetchParameters final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.deviceconf.v202511.FetchParameters) */ {
 public:
  inline FetchParameters() : FetchParameters(nullptr) {}
  ~FetchParameters() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FetchParameters* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FetchParameters));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FetchParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline FetchParameters(const FetchParameters& from) : FetchParameters(nullptr, from) {}
  inline FetchParameters(FetchParameters&& from) noexcept
      : FetchParameters(nullptr, std::move(from)) {}
  inline FetchParameters& operator=(const FetchParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchParameters& operator=(FetchParameters&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchParameters* internal_default_instance() {
    return reinterpret_cast<const FetchParameters*>(
        &_FetchParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FetchParameters& a, FetchParameters& b) { a.Swap(&b); }
  inline void Swap(FetchParameters* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchParameters* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FetchParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FetchParameters& from) { FetchParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FetchParameters* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.deviceconf.v202511.FetchParameters"; }

 protected:
  explicit FetchParameters(::google::protobuf::Arena* arena);
  FetchParameters(::google::protobuf::Arena* arena, const FetchParameters& from);
  FetchParameters(::google::protobuf::Arena* arena, FetchParameters&& from) noexcept
      : FetchParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFetchIntervalFieldNumber = 1,
  };
  // .google.protobuf.Duration fetch_interval = 1 [json_name = "fetchInterval"];
  bool has_fetch_interval() const;
  void clear_fetch_interval() ;
  const ::google::protobuf::Duration& fetch_interval() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_fetch_interval();
  ::google::protobuf::Duration* mutable_fetch_interval();
  void set_allocated_fetch_interval(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_fetch_interval(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_fetch_interval();

  private:
  const ::google::protobuf::Duration& _internal_fetch_interval() const;
  ::google::protobuf::Duration* _internal_mutable_fetch_interval();

  public:
  // @@protoc_insertion_point(class_scope:kentik.deviceconf.v202511.FetchParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FetchParameters& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* fetch_interval_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class Device final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.deviceconf.v202511.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Device* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Device));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Device(
      ::google::protobuf::internal::ConstantInitialized);

  inline Device(const Device& from) : Device(nullptr, from) {}
  inline Device(Device&& from) noexcept
      : Device(nullptr, std::move(from)) {}
  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
        &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Device& a, Device& b) { a.Swap(&b); }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Device>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Device& from) { Device::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Device* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.deviceconf.v202511.Device"; }

 protected:
  explicit Device(::google::protobuf::Arena* arena);
  Device(::google::protobuf::Arena* arena, const Device& from);
  Device(::google::protobuf::Arena* arena, Device&& from) noexcept
      : Device(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kHostnameFieldNumber = 3,
    kSshCredsFieldNumber = 5,
    kFetchParamsFieldNumber = 6,
    kPlatformFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string hostname = 3 [json_name = "hostname"];
  void clear_hostname() ;
  const std::string& hostname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(Arg_&& arg, Args_... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* value);

  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(
      const std::string& value);
  std::string* _internal_mutable_hostname();

  public:
  // .kentik.deviceconf.v202511.DeviceSSHCreds ssh_creds = 5 [json_name = "sshCreds"];
  bool has_ssh_creds() const;
  void clear_ssh_creds() ;
  const ::kentik::deviceconf::v202511::DeviceSSHCreds& ssh_creds() const;
  PROTOBUF_NODISCARD ::kentik::deviceconf::v202511::DeviceSSHCreds* release_ssh_creds();
  ::kentik::deviceconf::v202511::DeviceSSHCreds* mutable_ssh_creds();
  void set_allocated_ssh_creds(::kentik::deviceconf::v202511::DeviceSSHCreds* value);
  void unsafe_arena_set_allocated_ssh_creds(::kentik::deviceconf::v202511::DeviceSSHCreds* value);
  ::kentik::deviceconf::v202511::DeviceSSHCreds* unsafe_arena_release_ssh_creds();

  private:
  const ::kentik::deviceconf::v202511::DeviceSSHCreds& _internal_ssh_creds() const;
  ::kentik::deviceconf::v202511::DeviceSSHCreds* _internal_mutable_ssh_creds();

  public:
  // .kentik.deviceconf.v202511.FetchParameters fetch_params = 6 [json_name = "fetchParams"];
  bool has_fetch_params() const;
  void clear_fetch_params() ;
  const ::kentik::deviceconf::v202511::FetchParameters& fetch_params() const;
  PROTOBUF_NODISCARD ::kentik::deviceconf::v202511::FetchParameters* release_fetch_params();
  ::kentik::deviceconf::v202511::FetchParameters* mutable_fetch_params();
  void set_allocated_fetch_params(::kentik::deviceconf::v202511::FetchParameters* value);
  void unsafe_arena_set_allocated_fetch_params(::kentik::deviceconf::v202511::FetchParameters* value);
  ::kentik::deviceconf::v202511::FetchParameters* unsafe_arena_release_fetch_params();

  private:
  const ::kentik::deviceconf::v202511::FetchParameters& _internal_fetch_params() const;
  ::kentik::deviceconf::v202511::FetchParameters* _internal_mutable_fetch_params();

  public:
  // .kentik.deviceconf.v202511.DevicePlatform platform = 4 [json_name = "platform"];
  void clear_platform() ;
  ::kentik::deviceconf::v202511::DevicePlatform platform() const;
  void set_platform(::kentik::deviceconf::v202511::DevicePlatform value);

  private:
  ::kentik::deviceconf::v202511::DevicePlatform _internal_platform() const;
  void _internal_set_platform(::kentik::deviceconf::v202511::DevicePlatform value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.deviceconf.v202511.Device)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Device& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr hostname_;
    ::kentik::deviceconf::v202511::DeviceSSHCreds* ssh_creds_;
    ::kentik::deviceconf::v202511::FetchParameters* fetch_params_;
    int platform_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdeviceconf_2fv202511_2fdevice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceSSHCreds

// string username = 1 [json_name = "username"];
inline void DeviceSSHCreds::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& DeviceSSHCreds::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.DeviceSSHCreds.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSSHCreds::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.DeviceSSHCreds.username)
}
inline std::string* DeviceSSHCreds::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.DeviceSSHCreds.username)
  return _s;
}
inline const std::string& DeviceSSHCreds::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void DeviceSSHCreds::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* DeviceSSHCreds::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* DeviceSSHCreds::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.DeviceSSHCreds.username)
  return _impl_.username_.Release();
}
inline void DeviceSSHCreds::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.DeviceSSHCreds.username)
}

// string private_key = 2 [json_name = "privateKey"];
inline void DeviceSSHCreds::clear_private_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.private_key_.ClearToEmpty();
}
inline const std::string& DeviceSSHCreds::private_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.DeviceSSHCreds.private_key)
  return _internal_private_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSSHCreds::set_private_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.private_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.DeviceSSHCreds.private_key)
}
inline std::string* DeviceSSHCreds::mutable_private_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.DeviceSSHCreds.private_key)
  return _s;
}
inline const std::string& DeviceSSHCreds::_internal_private_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.private_key_.Get();
}
inline void DeviceSSHCreds::_internal_set_private_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.private_key_.Set(value, GetArena());
}
inline std::string* DeviceSSHCreds::_internal_mutable_private_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.private_key_.Mutable( GetArena());
}
inline std::string* DeviceSSHCreds::release_private_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.DeviceSSHCreds.private_key)
  return _impl_.private_key_.Release();
}
inline void DeviceSSHCreds::set_allocated_private_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.private_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.private_key_.IsDefault()) {
    _impl_.private_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.DeviceSSHCreds.private_key)
}

// string passphrase = 3 [json_name = "passphrase"];
inline void DeviceSSHCreds::clear_passphrase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passphrase_.ClearToEmpty();
}
inline const std::string& DeviceSSHCreds::passphrase() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.DeviceSSHCreds.passphrase)
  return _internal_passphrase();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSSHCreds::set_passphrase(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passphrase_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.DeviceSSHCreds.passphrase)
}
inline std::string* DeviceSSHCreds::mutable_passphrase() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_passphrase();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.DeviceSSHCreds.passphrase)
  return _s;
}
inline const std::string& DeviceSSHCreds::_internal_passphrase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.passphrase_.Get();
}
inline void DeviceSSHCreds::_internal_set_passphrase(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passphrase_.Set(value, GetArena());
}
inline std::string* DeviceSSHCreds::_internal_mutable_passphrase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.passphrase_.Mutable( GetArena());
}
inline std::string* DeviceSSHCreds::release_passphrase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.DeviceSSHCreds.passphrase)
  return _impl_.passphrase_.Release();
}
inline void DeviceSSHCreds::set_allocated_passphrase(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passphrase_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.passphrase_.IsDefault()) {
    _impl_.passphrase_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.DeviceSSHCreds.passphrase)
}

// -------------------------------------------------------------------

// FetchParameters

// .google.protobuf.Duration fetch_interval = 1 [json_name = "fetchInterval"];
inline bool FetchParameters::has_fetch_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fetch_interval_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& FetchParameters::_internal_fetch_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.fetch_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& FetchParameters::fetch_interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.FetchParameters.fetch_interval)
  return _internal_fetch_interval();
}
inline void FetchParameters::unsafe_arena_set_allocated_fetch_interval(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_interval_);
  }
  _impl_.fetch_interval_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.FetchParameters.fetch_interval)
}
inline ::google::protobuf::Duration* FetchParameters::release_fetch_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.fetch_interval_;
  _impl_.fetch_interval_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* FetchParameters::unsafe_arena_release_fetch_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.FetchParameters.fetch_interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.fetch_interval_;
  _impl_.fetch_interval_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* FetchParameters::_internal_mutable_fetch_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_interval_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.fetch_interval_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.fetch_interval_;
}
inline ::google::protobuf::Duration* FetchParameters::mutable_fetch_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_fetch_interval();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.FetchParameters.fetch_interval)
  return _msg;
}
inline void FetchParameters::set_allocated_fetch_interval(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fetch_interval_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.FetchParameters.fetch_interval)
}

// -------------------------------------------------------------------

// Device

// string id = 1 [json_name = "id"];
inline void Device::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Device::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Device.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Device.id)
}
inline std::string* Device::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Device.id)
  return _s;
}
inline const std::string& Device::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Device::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Device::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Device::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Device.id)
  return _impl_.id_.Release();
}
inline void Device::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Device.id)
}

// string name = 2 [json_name = "name"];
inline void Device::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Device::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Device.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Device.name)
}
inline std::string* Device::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Device.name)
  return _s;
}
inline const std::string& Device::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Device::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Device::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Device::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Device.name)
  return _impl_.name_.Release();
}
inline void Device::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Device.name)
}

// string hostname = 3 [json_name = "hostname"];
inline void Device::clear_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& Device::hostname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Device.hostname)
  return _internal_hostname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_hostname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Device.hostname)
}
inline std::string* Device::mutable_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Device.hostname)
  return _s;
}
inline const std::string& Device::_internal_hostname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hostname_.Get();
}
inline void Device::_internal_set_hostname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Set(value, GetArena());
}
inline std::string* Device::_internal_mutable_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hostname_.Mutable( GetArena());
}
inline std::string* Device::release_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Device.hostname)
  return _impl_.hostname_.Release();
}
inline void Device::set_allocated_hostname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Device.hostname)
}

// .kentik.deviceconf.v202511.DevicePlatform platform = 4 [json_name = "platform"];
inline void Device::clear_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_ = 0;
}
inline ::kentik::deviceconf::v202511::DevicePlatform Device::platform() const {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Device.platform)
  return _internal_platform();
}
inline void Device::set_platform(::kentik::deviceconf::v202511::DevicePlatform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:kentik.deviceconf.v202511.Device.platform)
}
inline ::kentik::deviceconf::v202511::DevicePlatform Device::_internal_platform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kentik::deviceconf::v202511::DevicePlatform>(_impl_.platform_);
}
inline void Device::_internal_set_platform(::kentik::deviceconf::v202511::DevicePlatform value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_ = value;
}

// .kentik.deviceconf.v202511.DeviceSSHCreds ssh_creds = 5 [json_name = "sshCreds"];
inline bool Device::has_ssh_creds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ssh_creds_ != nullptr);
  return value;
}
inline void Device::clear_ssh_creds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ssh_creds_ != nullptr) _impl_.ssh_creds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::deviceconf::v202511::DeviceSSHCreds& Device::_internal_ssh_creds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::deviceconf::v202511::DeviceSSHCreds* p = _impl_.ssh_creds_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::deviceconf::v202511::DeviceSSHCreds&>(::kentik::deviceconf::v202511::_DeviceSSHCreds_default_instance_);
}
inline const ::kentik::deviceconf::v202511::DeviceSSHCreds& Device::ssh_creds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Device.ssh_creds)
  return _internal_ssh_creds();
}
inline void Device::unsafe_arena_set_allocated_ssh_creds(::kentik::deviceconf::v202511::DeviceSSHCreds* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ssh_creds_);
  }
  _impl_.ssh_creds_ = reinterpret_cast<::kentik::deviceconf::v202511::DeviceSSHCreds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.Device.ssh_creds)
}
inline ::kentik::deviceconf::v202511::DeviceSSHCreds* Device::release_ssh_creds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::deviceconf::v202511::DeviceSSHCreds* released = _impl_.ssh_creds_;
  _impl_.ssh_creds_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::deviceconf::v202511::DeviceSSHCreds* Device::unsafe_arena_release_ssh_creds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Device.ssh_creds)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::deviceconf::v202511::DeviceSSHCreds* temp = _impl_.ssh_creds_;
  _impl_.ssh_creds_ = nullptr;
  return temp;
}
inline ::kentik::deviceconf::v202511::DeviceSSHCreds* Device::_internal_mutable_ssh_creds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ssh_creds_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::deviceconf::v202511::DeviceSSHCreds>(GetArena());
    _impl_.ssh_creds_ = reinterpret_cast<::kentik::deviceconf::v202511::DeviceSSHCreds*>(p);
  }
  return _impl_.ssh_creds_;
}
inline ::kentik::deviceconf::v202511::DeviceSSHCreds* Device::mutable_ssh_creds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::deviceconf::v202511::DeviceSSHCreds* _msg = _internal_mutable_ssh_creds();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Device.ssh_creds)
  return _msg;
}
inline void Device::set_allocated_ssh_creds(::kentik::deviceconf::v202511::DeviceSSHCreds* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.ssh_creds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ssh_creds_ = reinterpret_cast<::kentik::deviceconf::v202511::DeviceSSHCreds*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Device.ssh_creds)
}

// .kentik.deviceconf.v202511.FetchParameters fetch_params = 6 [json_name = "fetchParams"];
inline bool Device::has_fetch_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fetch_params_ != nullptr);
  return value;
}
inline void Device::clear_fetch_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_params_ != nullptr) _impl_.fetch_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kentik::deviceconf::v202511::FetchParameters& Device::_internal_fetch_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::deviceconf::v202511::FetchParameters* p = _impl_.fetch_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::deviceconf::v202511::FetchParameters&>(::kentik::deviceconf::v202511::_FetchParameters_default_instance_);
}
inline const ::kentik::deviceconf::v202511::FetchParameters& Device::fetch_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.deviceconf.v202511.Device.fetch_params)
  return _internal_fetch_params();
}
inline void Device::unsafe_arena_set_allocated_fetch_params(::kentik::deviceconf::v202511::FetchParameters* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fetch_params_);
  }
  _impl_.fetch_params_ = reinterpret_cast<::kentik::deviceconf::v202511::FetchParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.deviceconf.v202511.Device.fetch_params)
}
inline ::kentik::deviceconf::v202511::FetchParameters* Device::release_fetch_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kentik::deviceconf::v202511::FetchParameters* released = _impl_.fetch_params_;
  _impl_.fetch_params_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::deviceconf::v202511::FetchParameters* Device::unsafe_arena_release_fetch_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.deviceconf.v202511.Device.fetch_params)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kentik::deviceconf::v202511::FetchParameters* temp = _impl_.fetch_params_;
  _impl_.fetch_params_ = nullptr;
  return temp;
}
inline ::kentik::deviceconf::v202511::FetchParameters* Device::_internal_mutable_fetch_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fetch_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::deviceconf::v202511::FetchParameters>(GetArena());
    _impl_.fetch_params_ = reinterpret_cast<::kentik::deviceconf::v202511::FetchParameters*>(p);
  }
  return _impl_.fetch_params_;
}
inline ::kentik::deviceconf::v202511::FetchParameters* Device::mutable_fetch_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kentik::deviceconf::v202511::FetchParameters* _msg = _internal_mutable_fetch_params();
  // @@protoc_insertion_point(field_mutable:kentik.deviceconf.v202511.Device.fetch_params)
  return _msg;
}
inline void Device::set_allocated_fetch_params(::kentik::deviceconf::v202511::FetchParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fetch_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fetch_params_ = reinterpret_cast<::kentik::deviceconf::v202511::FetchParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.deviceconf.v202511.Device.fetch_params)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202511
}  // namespace deviceconf
}  // namespace kentik


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kentik::deviceconf::v202511::DevicePlatform> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::deviceconf::v202511::DevicePlatform>() {
  return ::kentik::deviceconf::v202511::DevicePlatform_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2fdeviceconf_2fv202511_2fdevice_2eproto_2epb_2eh
