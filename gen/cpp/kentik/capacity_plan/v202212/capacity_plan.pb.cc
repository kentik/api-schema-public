// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/capacity_plan/v202212/capacity_plan.proto

#include "kentik/capacity_plan/v202212/capacity_plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
namespace kentik {
namespace capacity_plan {
namespace v202212 {
class Config_RunoutConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_RunoutConfig> _instance;
} _Config_RunoutConfig_default_instance_;
class Config_UtilConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_UtilConfig> _instance;
} _Config_UtilConfig_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class SummaryStatus_RunoutStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryStatus_RunoutStatus> _instance;
} _SummaryStatus_RunoutStatus_default_instance_;
class SummaryStatus_UtilStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryStatus_UtilStatus> _instance;
} _SummaryStatus_UtilStatus_default_instance_;
class SummaryStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryStatus> _instance;
} _SummaryStatus_default_instance_;
class CapacitySummary_InterfacesDetail_StatusDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapacitySummary_InterfacesDetail_StatusDetail> _instance;
} _CapacitySummary_InterfacesDetail_StatusDetail_default_instance_;
class CapacitySummary_InterfacesDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapacitySummary_InterfacesDetail> _instance;
} _CapacitySummary_InterfacesDetail_default_instance_;
class CapacitySummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapacitySummary> _instance;
} _CapacitySummary_default_instance_;
class CapacityPlan_InterfaceDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapacityPlan_InterfaceDetail> _instance;
} _CapacityPlan_InterfaceDetail_default_instance_;
class CapacityPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapacityPlan> _instance;
} _CapacityPlan_default_instance_;
class ListCapacitySummariesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCapacitySummariesRequest> _instance;
} _ListCapacitySummariesRequest_default_instance_;
class ListCapacitySummariesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCapacitySummariesResponse> _instance;
} _ListCapacitySummariesResponse_default_instance_;
class GetCapacitySummaryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCapacitySummaryRequest> _instance;
} _GetCapacitySummaryRequest_default_instance_;
class GetCapacitySummaryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCapacitySummaryResponse> _instance;
} _GetCapacitySummaryResponse_default_instance_;
class ListCapacityPlansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCapacityPlansRequest> _instance;
} _ListCapacityPlansRequest_default_instance_;
class ListCapacityPlansResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCapacityPlansResponse> _instance;
} _ListCapacityPlansResponse_default_instance_;
class GetCapacityPlanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCapacityPlanRequest> _instance;
} _GetCapacityPlanRequest_default_instance_;
class GetCapacityPlanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCapacityPlanResponse> _instance;
} _GetCapacityPlanResponse_default_instance_;
}  // namespace v202212
}  // namespace capacity_plan
}  // namespace kentik
static void InitDefaultsscc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_CapacityPlan_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::CapacityPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::CapacityPlan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
      &scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
      &scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_CapacityPlan_InterfaceDetail_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_CapacitySummary_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::CapacitySummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::CapacitySummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
      &scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
      &scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_StatusDetail_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_Config_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
      &scc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_Config_RunoutConfig_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::Config_RunoutConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::Config_RunoutConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_Config_UtilConfig_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::Config_UtilConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::Config_UtilConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_GetCapacityPlanRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_GetCapacityPlanRequest_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::GetCapacityPlanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::GetCapacityPlanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCapacityPlanRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCapacityPlanRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_GetCapacityPlanResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_GetCapacityPlanResponse_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::GetCapacityPlanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::GetCapacityPlanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCapacityPlanResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCapacityPlanResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_GetCapacitySummaryRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_GetCapacitySummaryRequest_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::GetCapacitySummaryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::GetCapacitySummaryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCapacitySummaryRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCapacitySummaryRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_GetCapacitySummaryResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_GetCapacitySummaryResponse_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::GetCapacitySummaryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::GetCapacitySummaryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCapacitySummaryResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCapacitySummaryResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_ListCapacityPlansRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_ListCapacityPlansRequest_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::ListCapacityPlansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::ListCapacityPlansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListCapacityPlansRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListCapacityPlansRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_ListCapacityPlansResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_ListCapacityPlansResponse_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::ListCapacityPlansResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::ListCapacityPlansResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCapacityPlansResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCapacityPlansResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_ListCapacitySummariesRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_ListCapacitySummariesRequest_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::ListCapacitySummariesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::ListCapacitySummariesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListCapacitySummariesRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListCapacitySummariesRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_ListCapacitySummariesResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_ListCapacitySummariesResponse_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::ListCapacitySummariesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::ListCapacitySummariesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCapacitySummariesResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCapacitySummariesResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_SummaryStatus_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::SummaryStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::SummaryStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {
      &scc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
      &scc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_SummaryStatus_RunoutStatus_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static void InitDefaultsscc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::capacity_plan::v202212::_SummaryStatus_UtilStatus_default_instance_;
    new (ptr) ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_RunoutConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_RunoutConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_RunoutConfig, strategy_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_RunoutConfig, warn_qty_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_RunoutConfig, crit_qty_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_UtilConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_UtilConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_UtilConfig, aggregate_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_UtilConfig, warn_pct_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config_UtilConfig, crit_pct_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config, runout_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::Config, utilization_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus, earliest_date_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus, highest_pct_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus, runout_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::SummaryStatus, utilization_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail, bps_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, total_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, total_capacity_bps_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, healthy_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail, critical_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, interfaces_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, config_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacitySummary, summary_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, intf_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, intf_description_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, intf_capacity_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, network_boundary_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, conn_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, util_status_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, util_out_mbps_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, util_out_pct_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, util_in_mbps_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, util_in_pct_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, runout_status_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, runout_in_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, runout_in_variation_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, runout_out_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail, runout_out_variation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, interfaces_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, config_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::CapacityPlan, summary_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacitySummariesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacitySummariesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacitySummariesResponse, capacity_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacitySummariesResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacitySummaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacitySummaryRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacitySummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacitySummaryResponse, capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacityPlansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacityPlansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacityPlansResponse, capacity_),
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::ListCapacityPlansResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacityPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacityPlanRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacityPlanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::capacity_plan::v202212::GetCapacityPlanResponse, capacity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::kentik::capacity_plan::v202212::Config_RunoutConfig)},
  { 11, 19, sizeof(::kentik::capacity_plan::v202212::Config_UtilConfig)},
  { 22, -1, sizeof(::kentik::capacity_plan::v202212::Config)},
  { 29, 36, sizeof(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus)},
  { 38, 45, sizeof(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus)},
  { 47, -1, sizeof(::kentik::capacity_plan::v202212::SummaryStatus)},
  { 54, 61, sizeof(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail)},
  { 63, 73, sizeof(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail)},
  { 78, -1, sizeof(::kentik::capacity_plan::v202212::CapacitySummary)},
  { 90, -1, sizeof(::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail)},
  { 112, -1, sizeof(::kentik::capacity_plan::v202212::CapacityPlan)},
  { 124, -1, sizeof(::kentik::capacity_plan::v202212::ListCapacitySummariesRequest)},
  { 129, -1, sizeof(::kentik::capacity_plan::v202212::ListCapacitySummariesResponse)},
  { 136, -1, sizeof(::kentik::capacity_plan::v202212::GetCapacitySummaryRequest)},
  { 142, -1, sizeof(::kentik::capacity_plan::v202212::GetCapacitySummaryResponse)},
  { 148, -1, sizeof(::kentik::capacity_plan::v202212::ListCapacityPlansRequest)},
  { 153, -1, sizeof(::kentik::capacity_plan::v202212::ListCapacityPlansResponse)},
  { 160, -1, sizeof(::kentik::capacity_plan::v202212::GetCapacityPlanRequest)},
  { 166, -1, sizeof(::kentik::capacity_plan::v202212::GetCapacityPlanResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_Config_RunoutConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_Config_UtilConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_SummaryStatus_RunoutStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_SummaryStatus_UtilStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_SummaryStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_StatusDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_CapacitySummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_CapacityPlan_InterfaceDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_CapacityPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_ListCapacitySummariesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_ListCapacitySummariesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_GetCapacitySummaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_GetCapacitySummaryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_ListCapacityPlansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_ListCapacityPlansResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_GetCapacityPlanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::capacity_plan::v202212::_GetCapacityPlanResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0kentik/capacity_plan/v202212/capacity_"
  "plan.proto\022\034kentik.capacity_plan.v202212"
  "\032\034google/api/annotations.proto\032\027google/a"
  "pi/client.proto\032\037google/api/field_behavi"
  "or.proto\032.protoc-gen-openapiv2/options/a"
  "nnotations.proto\032+kentik/core/v202012alp"
  "ha1/annotations.proto\"\341\005\n\006Config\022h\n\006runo"
  "ut\030\001 \001(\01321.kentik.capacity_plan.v202212."
  "Config.RunoutConfigB\035\222A\0262\024Runout configu"
  "ration\342A\001\003R\006runout\022u\n\013utilization\030\002 \001(\0132"
  "/.kentik.capacity_plan.v202212.Config.Ut"
  "ilConfigB\"\222A\0332\031Utilization configuration"
  "\342A\001\003R\013utilization\032\357\001\n\014RunoutConfig\0228\n\010st"
  "rategy\030\001 \001(\tB\034\222A\0252\023Strategy for runout\342A"
  "\001\003R\010strategy\022D\n\010warn_qty\030\002 \001(\rB$\222A\0352\033War"
  "ning quantity for runout\342A\001\003H\000R\007warnQty\210"
  "\001\001\022E\n\010crit_qty\030\003 \001(\rB%\222A\0362\034Critical quan"
  "tity for runout\342A\001\003H\001R\007critQty\210\001\001B\013\n\t_wa"
  "rn_qtyB\013\n\t_crit_qty\032\203\002\n\nUtilConfig\022@\n\tag"
  "gregate\030\001 \001(\tB\"\222A\0332\031Aggregate for utiliz"
  "ation\342A\001\003R\taggregate\022K\n\010warn_pct\030\002 \001(\rB+"
  "\222A$2\"Warning percentage for utilization\342"
  "A\001\003H\000R\007warnPct\210\001\001\022L\n\010crit_pct\030\003 \001(\rB,\222A%"
  "2#Critical percentage for utilization\342A\001"
  "\003H\001R\007critPct\210\001\001B\013\n\t_warn_pctB\013\n\t_crit_pc"
  "t\"\265\004\n\rSummaryStatus\022h\n\006runout\030\001 \001(\01328.ke"
  "ntik.capacity_plan.v202212.SummaryStatus"
  ".RunoutStatusB\026\222A\0172\rRunout status\342A\001\003R\006r"
  "unout\022u\n\013utilization\030\002 \001(\01326.kentik.capa"
  "city_plan.v202212.SummaryStatus.UtilStat"
  "usB\033\222A\0242\022Utilization status\342A\001\003R\013utiliza"
  "tion\032\234\001\n\014RunoutStatus\0221\n\006status\030\001 \001(\tB\031\222"
  "A\0222\020Status of runout\342A\001\003R\006status\022G\n\rearl"
  "iest_date\030\002 \001(\004B\035\222A\0262\024Earliest runout da"
  "te\342A\001\003H\000R\014earliestDate\210\001\001B\020\n\016_earliest_d"
  "ate\032\243\001\n\nUtilStatus\0226\n\006status\030\001 \001(\tB\036\222A\0272"
  "\025Status of utilization\342A\001\003R\006status\022M\n\013hi"
  "ghest_pct\030\002 \001(\rB\'\222A 2\036Highest utilizatio"
  "n percentage\342A\001\003H\000R\nhighestPct\210\001\001B\016\n\014_hi"
  "ghest_pct\"\322\n\n\017CapacitySummary\022,\n\002id\030\001 \001("
  "\tB\034\222A\0252\023ID of capacity plan\342A\001\003R\002id\0222\n\004n"
  "ame\030\002 \001(\tB\036\222A\0272\025Name of capacity plan\342A\001"
  "\003R\004name\022G\n\013description\030\003 \001(\tB%\222A\0362\034Descr"
  "iption of capacity plan\342A\001\003R\013description"
  "\0228\n\006status\030\004 \001(\tB \222A\0312\027Status of capacit"
  "y plan\342A\001\003R\006status\022z\n\ninterfaces\030\005 \001(\0132>"
  ".kentik.capacity_plan.v202212.CapacitySu"
  "mmary.InterfacesDetailB\032\222A\0232\021Interfaces "
  "detail\342A\001\003R\ninterfaces\022e\n\006config\030\006 \001(\0132$"
  ".kentik.capacity_plan.v202212.ConfigB\'\222A"
  " 2\036Configuration of capacity plan\342A\001\003R\006c"
  "onfig\022|\n\016summary_status\030\007 \001(\0132+.kentik.c"
  "apacity_plan.v202212.SummaryStatusB(\222A!2"
  "\037Summary status of capacity plan\342A\001\003R\rsu"
  "mmaryStatus\032\370\005\n\020InterfacesDetail\022I\n\013tota"
  "l_count\030\001 \001(\rB#\222A\0342\032Total number of inte"
  "rfaces\342A\001\003H\000R\ntotalCount\210\001\001\022Q\n\022total_cap"
  "acity_bps\030\002 \001(\004B\036\222A\0272\025Total capacity in "
  "bps\342A\001\003H\001R\020totalCapacityBps\210\001\001\022\202\001\n\007healt"
  "hy\030\003 \001(\0132K.kentik.capacity_plan.v202212."
  "CapacitySummary.InterfacesDetail.StatusD"
  "etailB\033\222A\0242\022Healthy interfaces\342A\001\003R\007heal"
  "thy\022\202\001\n\007warning\030\004 \001(\0132K.kentik.capacity_"
  "plan.v202212.CapacitySummary.InterfacesD"
  "etail.StatusDetailB\033\222A\0242\022Warning interfa"
  "ces\342A\001\003R\007warning\022\205\001\n\010critical\030\005 \001(\0132K.ke"
  "ntik.capacity_plan.v202212.CapacitySumma"
  "ry.InterfacesDetail.StatusDetailB\034\222A\0252\023C"
  "ritical interfaces\342A\001\003R\010critical\032\214\001\n\014Sta"
  "tusDetail\0220\n\003bps\030\001 \001(\004B\031\222A\0222\020Bandwidth i"
  "n bps\342A\001\003H\000R\003bps\210\001\001\0228\n\005count\030\002 \001(\rB\035\222A\0262"
  "\024Number of interfaces\342A\001\003H\001R\005count\210\001\001B\006\n"
  "\004_bpsB\010\n\006_countB\016\n\014_total_countB\025\n\023_tota"
  "l_capacity_bps\"\266\r\n\014CapacityPlan\022,\n\002id\030\001 "
  "\001(\tB\034\222A\0252\023ID of capacity plan\342A\001\003R\002id\0222\n"
  "\004name\030\002 \001(\tB\036\222A\0272\025Name of capacity plan\342"
  "A\001\003R\004name\022G\n\013description\030\003 \001(\tB%\222A\0362\034Des"
  "cription of capacity plan\342A\001\003R\013descripti"
  "on\0228\n\006status\030\004 \001(\tB \222A\0312\027Status of capac"
  "ity plan\342A\001\003R\006status\022w\n\ninterfaces\030\005 \003(\013"
  "2:.kentik.capacity_plan.v202212.Capacity"
  "Plan.InterfaceDetailB\033\222A\0242\022List of inter"
  "faces\342A\001\003R\ninterfaces\022e\n\006config\030\006 \001(\0132$."
  "kentik.capacity_plan.v202212.ConfigB\'\222A "
  "2\036Configuration of capacity plan\342A\001\003R\006co"
  "nfig\022|\n\016summary_status\030\007 \001(\0132+.kentik.ca"
  "pacity_plan.v202212.SummaryStatusB(\222A!2\037"
  "Summary status of capacity plan\342A\001\003R\rsum"
  "maryStatus\032\342\010\n\017InterfaceDetail\0225\n\013device"
  "_name\030\001 \001(\tB\024\222A\r2\013Device name\342A\001\003R\ndevic"
  "eName\0224\n\tintf_name\030\002 \001(\tB\027\222A\0202\016Interface"
  " name\342A\001\003R\010intfName\022I\n\020intf_description\030"
  "\003 \001(\tB\036\222A\0272\025Interface description\342A\001\003R\017i"
  "ntfDescription\022@\n\rintf_capacity\030\004 \001(\tB\033\222"
  "A\0242\022Interface capacity\342A\001\003R\014intfCapacity"
  "\022D\n\020network_boundary\030\005 \001(\tB\031\222A\0222\020Network"
  " boundary\342A\001\003R\017networkBoundary\0227\n\tconn_t"
  "ype\030\006 \001(\tB\032\222A\0232\021Connectivity type\342A\001\003R\010c"
  "onnType\022-\n\010provider\030\007 \001(\tB\021\222A\n2\010Provider"
  "\342A\001\003R\010provider\022<\n\013util_status\030\010 \001(\tB\033\222A\024"
  "2\022Utilization status\342A\001\003R\nutilStatus\022A\n\r"
  "util_out_mbps\030\t \001(\tB\035\222A\0262\024Utilization ou"
  "t mbps\342A\001\003R\013utilOutMbps\022E\n\014util_out_pct\030"
  "\n \001(\tB#\222A\0342\032Utilization out percentage\342A"
  "\001\003R\nutilOutPct\022>\n\014util_in_mbps\030\013 \001(\tB\034\222A"
  "\0252\023Utilization in mbps\342A\001\003R\nutilInMbps\022B"
  "\n\013util_in_pct\030\014 \001(\tB\"\222A\0332\031Utilization in"
  " percentage\342A\001\003R\tutilInPct\022;\n\rrunout_sta"
  "tus\030\r \001(\tB\026\222A\0172\rRunout status\342A\001\003R\014runou"
  "tStatus\022=\n\016runout_in_date\030\016 \001(\tB\027\222A\0202\016Ru"
  "nout in date\342A\001\003R\014runoutInDate\022L\n\023runout"
  "_in_variation\030\017 \001(\tB\034\222A\0252\023Runout in vari"
  "ation\342A\001\003R\021runoutInVariation\022@\n\017runout_o"
  "ut_date\030\020 \001(\tB\030\222A\0212\017Runout out date\342A\001\003R"
  "\rrunoutOutDate\022O\n\024runout_out_variation\030\021"
  " \001(\tB\035\222A\0262\024Runout out variation\342A\001\003R\022run"
  "outOutVariation\"\036\n\034ListCapacitySummaries"
  "Request\"\367\001\n\035ListCapacitySummariesRespons"
  "e\022o\n\010capacity\030\001 \003(\0132-.kentik.capacity_pl"
  "an.v202212.CapacitySummaryB$\222A!2\037List of"
  " capacity plan summariesR\010capacity\022e\n\rin"
  "valid_count\030\002 \001(\rB@\222A=2;Number of invali"
  "d entries encountered while collecting d"
  "ataR\014invalidCount\"_\n\031GetCapacitySummaryR"
  "equest\022B\n\002id\030\001 \001(\tB2\222A+2)ID of the reque"
  "sted capacity plan summary\342A\001\002R\002id\"\243\001\n\032G"
  "etCapacitySummaryResponse\022\204\001\n\010capacity\030\001"
  " \001(\0132-.kentik.capacity_plan.v202212.Capa"
  "citySummaryB9\222A624Configuration of the r"
  "equested capacity plan summaryR\010capacity"
  "\"\032\n\030ListCapacityPlansRequest\"\347\001\n\031ListCap"
  "acityPlansResponse\022c\n\010capacity\030\001 \003(\0132*.k"
  "entik.capacity_plan.v202212.CapacityPlan"
  "B\033\222A\0302\026List of capacity plansR\010capacity\022"
  "e\n\rinvalid_count\030\002 \001(\rB@\222A=2;Number of i"
  "nvalid entries encountered while collect"
  "ing dataR\014invalidCount\"T\n\026GetCapacityPla"
  "nRequest\022:\n\002id\030\001 \001(\tB*\222A#2!ID of the req"
  "uested capacity plan\342A\001\002R\002id\"\224\001\n\027GetCapa"
  "cityPlanResponse\022y\n\010capacity\030\001 \001(\0132*.ken"
  "tik.capacity_plan.v202212.CapacityPlanB1"
  "\222A.2,Configuration of the requested capa"
  "city planR\010capacity2\236\n\n\023CapacityPlanServ"
  "ice\022\300\002\n\025ListCapacitySummaries\022:.kentik.c"
  "apacity_plan.v202212.ListCapacitySummari"
  "esRequest\032;.kentik.capacity_plan.v202212"
  ".ListCapacitySummariesResponse\"\255\001\222AZ\022\034Li"
  "st all capacity summaries.\032#Returns list"
  " of capacity summaries.*\025ListCapacitySum"
  "maries\362\327\002\030admin.capacity_plan:read\202\323\344\223\002."
  "\022,/capacity_plan/v202212/capacity_plan/s"
  "ummary\022\307\002\n\022GetCapacitySummary\0227.kentik.c"
  "apacity_plan.v202212.GetCapacitySummaryR"
  "equest\0328.kentik.capacity_plan.v202212.Ge"
  "tCapacitySummaryResponse\"\275\001\222Ae\022\037Retrieve"
  " capacity plan summary.\032.Returns capacit"
  "y plan summary specified by ID.*\022GetCapa"
  "citySummary\362\327\002\030admin.capacity_plan:read\202"
  "\323\344\223\0023\0221/capacity_plan/v202212/capacity_p"
  "lan/{id}/summary\022\240\002\n\021ListCapacityPlans\0226"
  ".kentik.capacity_plan.v202212.ListCapaci"
  "tyPlansRequest\0327.kentik.capacity_plan.v2"
  "02212.ListCapacityPlansResponse\"\231\001\222AN\022\030L"
  "ist all capacity plans.\032\037Returns list of"
  " capacity plans.*\021ListCapacityPlans\362\327\002\030a"
  "dmin.capacity_plan:read\202\323\344\223\002&\022$/capacity"
  "_plan/v202212/capacity_plan\022\243\002\n\017GetCapac"
  "ityPlan\0224.kentik.capacity_plan.v202212.G"
  "etCapacityPlanRequest\0325.kentik.capacity_"
  "plan.v202212.GetCapacityPlanResponse\"\242\001\222"
  "AR\022\027Retrieve capacity plan.\032&Returns cap"
  "acity plan specified by ID.*\017GetCapacity"
  "Plan\362\327\002\030admin.capacity_plan:read\202\323\344\223\002+\022)"
  "/capacity_plan/v202212/capacity_plan/{id"
  "}\0321\312A\023grpc.api.kentik.com\352\327\002\023admin.capac"
  "ity_plan\220\330\002\003B\372\003ZQgithub.com/kentik/api-s"
  "chema-public/go/kentik/capacity_plan/v20"
  "2212;capacity_plan\222A\243\003\022\274\001\n\021Capacity Plan"
  " API\022W# Overview\nThe Capacity Plan API p"
  "rovides read-only access to configured c"
  "apacity plans\"E\n\026Kentik API Engineering\022"
  "+https://github.com/kentik/api-schema-pu"
  "blic2\007v202212*\001\0022\020application/json:\020appl"
  "ication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-E"
  "mail \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token"
  " \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General in"
  "formation about Kentik APIs\0224https://kb."
  "kentik.com/v0/Ab09.htm#Ab09-APIs_Overvie"
  "wb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto_sccs[19] = {
  &scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_GetCapacityPlanRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_GetCapacityPlanResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_GetCapacitySummaryRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_GetCapacitySummaryResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_ListCapacityPlansRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_ListCapacityPlansResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_ListCapacitySummariesRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_ListCapacitySummariesResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
  &scc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto, "kentik/capacity_plan/v202212/capacity_plan.proto", 7529,
  &descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto_once, descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto_sccs, descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto_deps, 19, 5,
  schemas, file_default_instances, TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto::offsets,
  file_level_metadata_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto, 19, file_level_enum_descriptors_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto, file_level_service_descriptors_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto)), true);
namespace kentik {
namespace capacity_plan {
namespace v202212 {

// ===================================================================

void Config_RunoutConfig::InitAsDefaultInstance() {
}
class Config_RunoutConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Config_RunoutConfig>()._has_bits_);
  static void set_has_warn_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crit_qty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config_RunoutConfig::Config_RunoutConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.Config.RunoutConfig)
}
Config_RunoutConfig::Config_RunoutConfig(const Config_RunoutConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strategy().empty()) {
    strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strategy(),
      GetArena());
  }
  ::memcpy(&warn_qty_, &from.warn_qty_,
    static_cast<size_t>(reinterpret_cast<char*>(&crit_qty_) -
    reinterpret_cast<char*>(&warn_qty_)) + sizeof(crit_qty_));
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.Config.RunoutConfig)
}

void Config_RunoutConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&warn_qty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crit_qty_) -
      reinterpret_cast<char*>(&warn_qty_)) + sizeof(crit_qty_));
}

Config_RunoutConfig::~Config_RunoutConfig() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.Config.RunoutConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config_RunoutConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config_RunoutConfig::ArenaDtor(void* object) {
  Config_RunoutConfig* _this = reinterpret_cast< Config_RunoutConfig* >(object);
  (void)_this;
}
void Config_RunoutConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config_RunoutConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_RunoutConfig& Config_RunoutConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_RunoutConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void Config_RunoutConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&warn_qty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crit_qty_) -
        reinterpret_cast<char*>(&warn_qty_)) + sizeof(crit_qty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config_RunoutConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string strategy = 1[json_name = "strategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.Config.RunoutConfig.strategy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 warn_qty = 2[json_name = "warnQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_warn_qty(&has_bits);
          warn_qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crit_qty = 3[json_name = "critQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crit_qty(&has_bits);
          crit_qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_RunoutConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strategy = 1[json_name = "strategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.Config.RunoutConfig.strategy");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strategy(), target);
  }

  // uint32 warn_qty = 2[json_name = "warnQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_warn_qty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warn_qty(), target);
  }

  // uint32 crit_qty = 3[json_name = "critQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_crit_qty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crit_qty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.Config.RunoutConfig)
  return target;
}

size_t Config_RunoutConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strategy = 1[json_name = "strategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->strategy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strategy());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint32 warn_qty = 2[json_name = "warnQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_warn_qty());
    }

    // uint32 crit_qty = 3[json_name = "critQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crit_qty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_RunoutConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_RunoutConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_RunoutConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.Config.RunoutConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.Config.RunoutConfig)
    MergeFrom(*source);
  }
}

void Config_RunoutConfig::MergeFrom(const Config_RunoutConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strategy().size() > 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      warn_qty_ = from.warn_qty_;
    }
    if (cached_has_bits & 0x00000002u) {
      crit_qty_ = from.crit_qty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config_RunoutConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_RunoutConfig::CopyFrom(const Config_RunoutConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.Config.RunoutConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_RunoutConfig::IsInitialized() const {
  return true;
}

void Config_RunoutConfig::InternalSwap(Config_RunoutConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strategy_.Swap(&other->strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_RunoutConfig, crit_qty_)
      + sizeof(Config_RunoutConfig::crit_qty_)
      - PROTOBUF_FIELD_OFFSET(Config_RunoutConfig, warn_qty_)>(
          reinterpret_cast<char*>(&warn_qty_),
          reinterpret_cast<char*>(&other->warn_qty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_RunoutConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config_UtilConfig::InitAsDefaultInstance() {
}
class Config_UtilConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Config_UtilConfig>()._has_bits_);
  static void set_has_warn_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crit_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config_UtilConfig::Config_UtilConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.Config.UtilConfig)
}
Config_UtilConfig::Config_UtilConfig(const Config_UtilConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aggregate().empty()) {
    aggregate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aggregate(),
      GetArena());
  }
  ::memcpy(&warn_pct_, &from.warn_pct_,
    static_cast<size_t>(reinterpret_cast<char*>(&crit_pct_) -
    reinterpret_cast<char*>(&warn_pct_)) + sizeof(crit_pct_));
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.Config.UtilConfig)
}

void Config_UtilConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  aggregate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&warn_pct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crit_pct_) -
      reinterpret_cast<char*>(&warn_pct_)) + sizeof(crit_pct_));
}

Config_UtilConfig::~Config_UtilConfig() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.Config.UtilConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config_UtilConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  aggregate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config_UtilConfig::ArenaDtor(void* object) {
  Config_UtilConfig* _this = reinterpret_cast< Config_UtilConfig* >(object);
  (void)_this;
}
void Config_UtilConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config_UtilConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_UtilConfig& Config_UtilConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_UtilConfig_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void Config_UtilConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&warn_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crit_pct_) -
        reinterpret_cast<char*>(&warn_pct_)) + sizeof(crit_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config_UtilConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string aggregate = 1[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_aggregate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.Config.UtilConfig.aggregate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 warn_pct = 2[json_name = "warnPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_warn_pct(&has_bits);
          warn_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crit_pct = 3[json_name = "critPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crit_pct(&has_bits);
          crit_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_UtilConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aggregate = 1[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->aggregate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregate().data(), static_cast<int>(this->_internal_aggregate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.Config.UtilConfig.aggregate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aggregate(), target);
  }

  // uint32 warn_pct = 2[json_name = "warnPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_warn_pct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warn_pct(), target);
  }

  // uint32 crit_pct = 3[json_name = "critPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_crit_pct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crit_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.Config.UtilConfig)
  return target;
}

size_t Config_UtilConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aggregate = 1[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->aggregate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregate());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint32 warn_pct = 2[json_name = "warnPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_warn_pct());
    }

    // uint32 crit_pct = 3[json_name = "critPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crit_pct());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_UtilConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_UtilConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_UtilConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.Config.UtilConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.Config.UtilConfig)
    MergeFrom(*source);
  }
}

void Config_UtilConfig::MergeFrom(const Config_UtilConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aggregate().size() > 0) {
    _internal_set_aggregate(from._internal_aggregate());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      warn_pct_ = from.warn_pct_;
    }
    if (cached_has_bits & 0x00000002u) {
      crit_pct_ = from.crit_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config_UtilConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_UtilConfig::CopyFrom(const Config_UtilConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.Config.UtilConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_UtilConfig::IsInitialized() const {
  return true;
}

void Config_UtilConfig::InternalSwap(Config_UtilConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  aggregate_.Swap(&other->aggregate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_UtilConfig, crit_pct_)
      + sizeof(Config_UtilConfig::crit_pct_)
      - PROTOBUF_FIELD_OFFSET(Config_UtilConfig, warn_pct_)>(
          reinterpret_cast<char*>(&warn_pct_),
          reinterpret_cast<char*>(&other->warn_pct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_UtilConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_Config_default_instance_._instance.get_mutable()->runout_ = const_cast< ::kentik::capacity_plan::v202212::Config_RunoutConfig*>(
      ::kentik::capacity_plan::v202212::Config_RunoutConfig::internal_default_instance());
  ::kentik::capacity_plan::v202212::_Config_default_instance_._instance.get_mutable()->utilization_ = const_cast< ::kentik::capacity_plan::v202212::Config_UtilConfig*>(
      ::kentik::capacity_plan::v202212::Config_UtilConfig::internal_default_instance());
}
class Config::_Internal {
 public:
  static const ::kentik::capacity_plan::v202212::Config_RunoutConfig& runout(const Config* msg);
  static const ::kentik::capacity_plan::v202212::Config_UtilConfig& utilization(const Config* msg);
};

const ::kentik::capacity_plan::v202212::Config_RunoutConfig&
Config::_Internal::runout(const Config* msg) {
  return *msg->runout_;
}
const ::kentik::capacity_plan::v202212::Config_UtilConfig&
Config::_Internal::utilization(const Config* msg) {
  return *msg->utilization_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runout()) {
    runout_ = new ::kentik::capacity_plan::v202212::Config_RunoutConfig(*from.runout_);
  } else {
    runout_ = nullptr;
  }
  if (from._internal_has_utilization()) {
    utilization_ = new ::kentik::capacity_plan::v202212::Config_UtilConfig(*from.utilization_);
  } else {
    utilization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  ::memset(&runout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utilization_) -
      reinterpret_cast<char*>(&runout_)) + sizeof(utilization_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete runout_;
  if (this != internal_default_instance()) delete utilization_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && runout_ != nullptr) {
    delete runout_;
  }
  runout_ = nullptr;
  if (GetArena() == nullptr && utilization_ != nullptr) {
    delete utilization_;
  }
  utilization_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.capacity_plan.v202212.Config.RunoutConfig runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_runout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.Config.UtilConfig utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_utilization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.Config.RunoutConfig runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_runout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::runout(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.Config.UtilConfig utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_utilization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::utilization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.Config.RunoutConfig runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_runout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runout_);
  }

  // .kentik.capacity_plan.v202212.Config.UtilConfig utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_utilization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utilization_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_runout()) {
    _internal_mutable_runout()->::kentik::capacity_plan::v202212::Config_RunoutConfig::MergeFrom(from._internal_runout());
  }
  if (from.has_utilization()) {
    _internal_mutable_utilization()->::kentik::capacity_plan::v202212::Config_UtilConfig::MergeFrom(from._internal_utilization());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, utilization_)
      + sizeof(Config::utilization_)
      - PROTOBUF_FIELD_OFFSET(Config, runout_)>(
          reinterpret_cast<char*>(&runout_),
          reinterpret_cast<char*>(&other->runout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummaryStatus_RunoutStatus::InitAsDefaultInstance() {
}
class SummaryStatus_RunoutStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryStatus_RunoutStatus>()._has_bits_);
  static void set_has_earliest_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SummaryStatus_RunoutStatus::SummaryStatus_RunoutStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
}
SummaryStatus_RunoutStatus::SummaryStatus_RunoutStatus(const SummaryStatus_RunoutStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  earliest_date_ = from.earliest_date_;
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
}

void SummaryStatus_RunoutStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  earliest_date_ = PROTOBUF_ULONGLONG(0);
}

SummaryStatus_RunoutStatus::~SummaryStatus_RunoutStatus() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryStatus_RunoutStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryStatus_RunoutStatus::ArenaDtor(void* object) {
  SummaryStatus_RunoutStatus* _this = reinterpret_cast< SummaryStatus_RunoutStatus* >(object);
  (void)_this;
}
void SummaryStatus_RunoutStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryStatus_RunoutStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryStatus_RunoutStatus& SummaryStatus_RunoutStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryStatus_RunoutStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void SummaryStatus_RunoutStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  earliest_date_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryStatus_RunoutStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 earliest_date = 2[json_name = "earliestDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_earliest_date(&has_bits);
          earliest_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryStatus_RunoutStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // uint64 earliest_date = 2[json_name = "earliestDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_earliest_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_earliest_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  return target;
}

size_t SummaryStatus_RunoutStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint64 earliest_date = 2[json_name = "earliestDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_earliest_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryStatus_RunoutStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryStatus_RunoutStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryStatus_RunoutStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
    MergeFrom(*source);
  }
}

void SummaryStatus_RunoutStatus::MergeFrom(const SummaryStatus_RunoutStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_earliest_date()) {
    _internal_set_earliest_date(from._internal_earliest_date());
  }
}

void SummaryStatus_RunoutStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryStatus_RunoutStatus::CopyFrom(const SummaryStatus_RunoutStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryStatus_RunoutStatus::IsInitialized() const {
  return true;
}

void SummaryStatus_RunoutStatus::InternalSwap(SummaryStatus_RunoutStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(earliest_date_, other->earliest_date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryStatus_RunoutStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummaryStatus_UtilStatus::InitAsDefaultInstance() {
}
class SummaryStatus_UtilStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryStatus_UtilStatus>()._has_bits_);
  static void set_has_highest_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SummaryStatus_UtilStatus::SummaryStatus_UtilStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
}
SummaryStatus_UtilStatus::SummaryStatus_UtilStatus(const SummaryStatus_UtilStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  highest_pct_ = from.highest_pct_;
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
}

void SummaryStatus_UtilStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  highest_pct_ = 0u;
}

SummaryStatus_UtilStatus::~SummaryStatus_UtilStatus() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryStatus_UtilStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryStatus_UtilStatus::ArenaDtor(void* object) {
  SummaryStatus_UtilStatus* _this = reinterpret_cast< SummaryStatus_UtilStatus* >(object);
  (void)_this;
}
void SummaryStatus_UtilStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryStatus_UtilStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryStatus_UtilStatus& SummaryStatus_UtilStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryStatus_UtilStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void SummaryStatus_UtilStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  highest_pct_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryStatus_UtilStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highest_pct = 2[json_name = "highestPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_highest_pct(&has_bits);
          highest_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryStatus_UtilStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // uint32 highest_pct = 2[json_name = "highestPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_highest_pct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_highest_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  return target;
}

size_t SummaryStatus_UtilStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint32 highest_pct = 2[json_name = "highestPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highest_pct());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryStatus_UtilStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryStatus_UtilStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryStatus_UtilStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
    MergeFrom(*source);
  }
}

void SummaryStatus_UtilStatus::MergeFrom(const SummaryStatus_UtilStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_highest_pct()) {
    _internal_set_highest_pct(from._internal_highest_pct());
  }
}

void SummaryStatus_UtilStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryStatus_UtilStatus::CopyFrom(const SummaryStatus_UtilStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryStatus_UtilStatus::IsInitialized() const {
  return true;
}

void SummaryStatus_UtilStatus::InternalSwap(SummaryStatus_UtilStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(highest_pct_, other->highest_pct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryStatus_UtilStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummaryStatus::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_SummaryStatus_default_instance_._instance.get_mutable()->runout_ = const_cast< ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus*>(
      ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus::internal_default_instance());
  ::kentik::capacity_plan::v202212::_SummaryStatus_default_instance_._instance.get_mutable()->utilization_ = const_cast< ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus*>(
      ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus::internal_default_instance());
}
class SummaryStatus::_Internal {
 public:
  static const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus& runout(const SummaryStatus* msg);
  static const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus& utilization(const SummaryStatus* msg);
};

const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus&
SummaryStatus::_Internal::runout(const SummaryStatus* msg) {
  return *msg->runout_;
}
const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus&
SummaryStatus::_Internal::utilization(const SummaryStatus* msg) {
  return *msg->utilization_;
}
SummaryStatus::SummaryStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.SummaryStatus)
}
SummaryStatus::SummaryStatus(const SummaryStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runout()) {
    runout_ = new ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus(*from.runout_);
  } else {
    runout_ = nullptr;
  }
  if (from._internal_has_utilization()) {
    utilization_ = new ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus(*from.utilization_);
  } else {
    utilization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.SummaryStatus)
}

void SummaryStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  ::memset(&runout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utilization_) -
      reinterpret_cast<char*>(&runout_)) + sizeof(utilization_));
}

SummaryStatus::~SummaryStatus() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.SummaryStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete runout_;
  if (this != internal_default_instance()) delete utilization_;
}

void SummaryStatus::ArenaDtor(void* object) {
  SummaryStatus* _this = reinterpret_cast< SummaryStatus* >(object);
  (void)_this;
}
void SummaryStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryStatus& SummaryStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryStatus_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void SummaryStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.SummaryStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && runout_ != nullptr) {
    delete runout_;
  }
  runout_ = nullptr;
  if (GetArena() == nullptr && utilization_ != nullptr) {
    delete utilization_;
  }
  utilization_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_runout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.SummaryStatus.UtilStatus utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_utilization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.SummaryStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_runout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::runout(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.SummaryStatus.UtilStatus utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_utilization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::utilization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.SummaryStatus)
  return target;
}

size_t SummaryStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.SummaryStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_runout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runout_);
  }

  // .kentik.capacity_plan.v202212.SummaryStatus.UtilStatus utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_utilization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utilization_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.SummaryStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.SummaryStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.SummaryStatus)
    MergeFrom(*source);
  }
}

void SummaryStatus::MergeFrom(const SummaryStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.SummaryStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_runout()) {
    _internal_mutable_runout()->::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus::MergeFrom(from._internal_runout());
  }
  if (from.has_utilization()) {
    _internal_mutable_utilization()->::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus::MergeFrom(from._internal_utilization());
  }
}

void SummaryStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.SummaryStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryStatus::CopyFrom(const SummaryStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.SummaryStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryStatus::IsInitialized() const {
  return true;
}

void SummaryStatus::InternalSwap(SummaryStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryStatus, utilization_)
      + sizeof(SummaryStatus::utilization_)
      - PROTOBUF_FIELD_OFFSET(SummaryStatus, runout_)>(
          reinterpret_cast<char*>(&runout_),
          reinterpret_cast<char*>(&other->runout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapacitySummary_InterfacesDetail_StatusDetail::InitAsDefaultInstance() {
}
class CapacitySummary_InterfacesDetail_StatusDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<CapacitySummary_InterfacesDetail_StatusDetail>()._has_bits_);
  static void set_has_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CapacitySummary_InterfacesDetail_StatusDetail::CapacitySummary_InterfacesDetail_StatusDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
}
CapacitySummary_InterfacesDetail_StatusDetail::CapacitySummary_InterfacesDetail_StatusDetail(const CapacitySummary_InterfacesDetail_StatusDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bps_, &from.bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&bps_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
}

void CapacitySummary_InterfacesDetail_StatusDetail::SharedCtor() {
  ::memset(&bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&bps_)) + sizeof(count_));
}

CapacitySummary_InterfacesDetail_StatusDetail::~CapacitySummary_InterfacesDetail_StatusDetail() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacitySummary_InterfacesDetail_StatusDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CapacitySummary_InterfacesDetail_StatusDetail::ArenaDtor(void* object) {
  CapacitySummary_InterfacesDetail_StatusDetail* _this = reinterpret_cast< CapacitySummary_InterfacesDetail_StatusDetail* >(object);
  (void)_this;
}
void CapacitySummary_InterfacesDetail_StatusDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacitySummary_InterfacesDetail_StatusDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail_StatusDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapacitySummary_InterfacesDetail_StatusDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void CapacitySummary_InterfacesDetail_StatusDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&bps_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacitySummary_InterfacesDetail_StatusDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 bps = 1[json_name = "bps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bps(&has_bits);
          bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 2[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacitySummary_InterfacesDetail_StatusDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bps = 1[json_name = "bps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_bps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bps(), target);
  }

  // uint32 count = 2[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  return target;
}

size_t CapacitySummary_InterfacesDetail_StatusDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint64 bps = 1[json_name = "bps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bps());
    }

    // uint32 count = 2[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacitySummary_InterfacesDetail_StatusDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacitySummary_InterfacesDetail_StatusDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacitySummary_InterfacesDetail_StatusDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
    MergeFrom(*source);
  }
}

void CapacitySummary_InterfacesDetail_StatusDetail::MergeFrom(const CapacitySummary_InterfacesDetail_StatusDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bps_ = from.bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CapacitySummary_InterfacesDetail_StatusDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacitySummary_InterfacesDetail_StatusDetail::CopyFrom(const CapacitySummary_InterfacesDetail_StatusDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacitySummary_InterfacesDetail_StatusDetail::IsInitialized() const {
  return true;
}

void CapacitySummary_InterfacesDetail_StatusDetail::InternalSwap(CapacitySummary_InterfacesDetail_StatusDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacitySummary_InterfacesDetail_StatusDetail, count_)
      + sizeof(CapacitySummary_InterfacesDetail_StatusDetail::count_)
      - PROTOBUF_FIELD_OFFSET(CapacitySummary_InterfacesDetail_StatusDetail, bps_)>(
          reinterpret_cast<char*>(&bps_),
          reinterpret_cast<char*>(&other->bps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacitySummary_InterfacesDetail_StatusDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapacitySummary_InterfacesDetail::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_default_instance_._instance.get_mutable()->healthy_ = const_cast< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail*>(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::internal_default_instance());
  ::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_default_instance_._instance.get_mutable()->warning_ = const_cast< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail*>(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::internal_default_instance());
  ::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_default_instance_._instance.get_mutable()->critical_ = const_cast< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail*>(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::internal_default_instance());
}
class CapacitySummary_InterfacesDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<CapacitySummary_InterfacesDetail>()._has_bits_);
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_capacity_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& healthy(const CapacitySummary_InterfacesDetail* msg);
  static const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& warning(const CapacitySummary_InterfacesDetail* msg);
  static const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& critical(const CapacitySummary_InterfacesDetail* msg);
};

const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail&
CapacitySummary_InterfacesDetail::_Internal::healthy(const CapacitySummary_InterfacesDetail* msg) {
  return *msg->healthy_;
}
const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail&
CapacitySummary_InterfacesDetail::_Internal::warning(const CapacitySummary_InterfacesDetail* msg) {
  return *msg->warning_;
}
const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail&
CapacitySummary_InterfacesDetail::_Internal::critical(const CapacitySummary_InterfacesDetail* msg) {
  return *msg->critical_;
}
CapacitySummary_InterfacesDetail::CapacitySummary_InterfacesDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
}
CapacitySummary_InterfacesDetail::CapacitySummary_InterfacesDetail(const CapacitySummary_InterfacesDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_healthy()) {
    healthy_ = new ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail(*from.healthy_);
  } else {
    healthy_ = nullptr;
  }
  if (from._internal_has_warning()) {
    warning_ = new ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail(*from.warning_);
  } else {
    warning_ = nullptr;
  }
  if (from._internal_has_critical()) {
    critical_ = new ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail(*from.critical_);
  } else {
    critical_ = nullptr;
  }
  ::memcpy(&total_capacity_bps_, &from.total_capacity_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_count_) -
    reinterpret_cast<char*>(&total_capacity_bps_)) + sizeof(total_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
}

void CapacitySummary_InterfacesDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  ::memset(&healthy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_count_) -
      reinterpret_cast<char*>(&healthy_)) + sizeof(total_count_));
}

CapacitySummary_InterfacesDetail::~CapacitySummary_InterfacesDetail() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacitySummary_InterfacesDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete healthy_;
  if (this != internal_default_instance()) delete warning_;
  if (this != internal_default_instance()) delete critical_;
}

void CapacitySummary_InterfacesDetail::ArenaDtor(void* object) {
  CapacitySummary_InterfacesDetail* _this = reinterpret_cast< CapacitySummary_InterfacesDetail* >(object);
  (void)_this;
}
void CapacitySummary_InterfacesDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacitySummary_InterfacesDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapacitySummary_InterfacesDetail& CapacitySummary_InterfacesDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapacitySummary_InterfacesDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void CapacitySummary_InterfacesDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && healthy_ != nullptr) {
    delete healthy_;
  }
  healthy_ = nullptr;
  if (GetArena() == nullptr && warning_ != nullptr) {
    delete warning_;
  }
  warning_ = nullptr;
  if (GetArena() == nullptr && critical_ != nullptr) {
    delete critical_;
  }
  critical_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_capacity_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_count_) -
        reinterpret_cast<char*>(&total_capacity_bps_)) + sizeof(total_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacitySummary_InterfacesDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 total_count = 1[json_name = "totalCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total_count(&has_bits);
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_capacity_bps = 2[json_name = "totalCapacityBps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_capacity_bps(&has_bits);
          total_capacity_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail healthy = 3[json_name = "healthy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail warning = 4[json_name = "warning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail critical = 5[json_name = "critical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_critical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacitySummary_InterfacesDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_count = 1[json_name = "totalCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_total_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_count(), target);
  }

  // uint64 total_capacity_bps = 2[json_name = "totalCapacityBps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_total_capacity_bps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_capacity_bps(), target);
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail healthy = 3[json_name = "healthy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_healthy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::healthy(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail warning = 4[json_name = "warning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::warning(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail critical = 5[json_name = "critical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_critical()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::critical(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  return target;
}

size_t CapacitySummary_InterfacesDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail healthy = 3[json_name = "healthy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_healthy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthy_);
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail warning = 4[json_name = "warning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_warning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *warning_);
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail critical = 5[json_name = "critical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_critical()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *critical_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint64 total_capacity_bps = 2[json_name = "totalCapacityBps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_total_capacity_bps());
    }

    // uint32 total_count = 1[json_name = "totalCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacitySummary_InterfacesDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacitySummary_InterfacesDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacitySummary_InterfacesDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
    MergeFrom(*source);
  }
}

void CapacitySummary_InterfacesDetail::MergeFrom(const CapacitySummary_InterfacesDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_healthy()) {
    _internal_mutable_healthy()->::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::MergeFrom(from._internal_healthy());
  }
  if (from.has_warning()) {
    _internal_mutable_warning()->::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::MergeFrom(from._internal_warning());
  }
  if (from.has_critical()) {
    _internal_mutable_critical()->::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail::MergeFrom(from._internal_critical());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_capacity_bps_ = from.total_capacity_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_count_ = from.total_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CapacitySummary_InterfacesDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacitySummary_InterfacesDetail::CopyFrom(const CapacitySummary_InterfacesDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacitySummary_InterfacesDetail::IsInitialized() const {
  return true;
}

void CapacitySummary_InterfacesDetail::InternalSwap(CapacitySummary_InterfacesDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacitySummary_InterfacesDetail, total_count_)
      + sizeof(CapacitySummary_InterfacesDetail::total_count_)
      - PROTOBUF_FIELD_OFFSET(CapacitySummary_InterfacesDetail, healthy_)>(
          reinterpret_cast<char*>(&healthy_),
          reinterpret_cast<char*>(&other->healthy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacitySummary_InterfacesDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapacitySummary::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_CapacitySummary_default_instance_._instance.get_mutable()->interfaces_ = const_cast< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail*>(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail::internal_default_instance());
  ::kentik::capacity_plan::v202212::_CapacitySummary_default_instance_._instance.get_mutable()->config_ = const_cast< ::kentik::capacity_plan::v202212::Config*>(
      ::kentik::capacity_plan::v202212::Config::internal_default_instance());
  ::kentik::capacity_plan::v202212::_CapacitySummary_default_instance_._instance.get_mutable()->summary_status_ = const_cast< ::kentik::capacity_plan::v202212::SummaryStatus*>(
      ::kentik::capacity_plan::v202212::SummaryStatus::internal_default_instance());
}
class CapacitySummary::_Internal {
 public:
  static const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail& interfaces(const CapacitySummary* msg);
  static const ::kentik::capacity_plan::v202212::Config& config(const CapacitySummary* msg);
  static const ::kentik::capacity_plan::v202212::SummaryStatus& summary_status(const CapacitySummary* msg);
};

const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail&
CapacitySummary::_Internal::interfaces(const CapacitySummary* msg) {
  return *msg->interfaces_;
}
const ::kentik::capacity_plan::v202212::Config&
CapacitySummary::_Internal::config(const CapacitySummary* msg) {
  return *msg->config_;
}
const ::kentik::capacity_plan::v202212::SummaryStatus&
CapacitySummary::_Internal::summary_status(const CapacitySummary* msg) {
  return *msg->summary_status_;
}
CapacitySummary::CapacitySummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.CapacitySummary)
}
CapacitySummary::CapacitySummary(const CapacitySummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_interfaces()) {
    interfaces_ = new ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail(*from.interfaces_);
  } else {
    interfaces_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::kentik::capacity_plan::v202212::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_summary_status()) {
    summary_status_ = new ::kentik::capacity_plan::v202212::SummaryStatus(*from.summary_status_);
  } else {
    summary_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.CapacitySummary)
}

void CapacitySummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interfaces_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_status_) -
      reinterpret_cast<char*>(&interfaces_)) + sizeof(summary_status_));
}

CapacitySummary::~CapacitySummary() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.CapacitySummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacitySummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interfaces_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete summary_status_;
}

void CapacitySummary::ArenaDtor(void* object) {
  CapacitySummary* _this = reinterpret_cast< CapacitySummary* >(object);
  (void)_this;
}
void CapacitySummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacitySummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapacitySummary& CapacitySummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapacitySummary_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void CapacitySummary::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.CapacitySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && interfaces_ != nullptr) {
    delete interfaces_;
  }
  interfaces_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && summary_status_ != nullptr) {
    delete summary_status_;
  }
  summary_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacitySummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacitySummary.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacitySummary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacitySummary.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacitySummary.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_interfaces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacitySummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.CapacitySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacitySummary.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacitySummary.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacitySummary.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacitySummary.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_interfaces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::interfaces(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_summary_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::summary_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.CapacitySummary)
  return target;
}

size_t CapacitySummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.CapacitySummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_interfaces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interfaces_);
  }

  // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_summary_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacitySummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.CapacitySummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacitySummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacitySummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.CapacitySummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.CapacitySummary)
    MergeFrom(*source);
  }
}

void CapacitySummary::MergeFrom(const CapacitySummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.CapacitySummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_interfaces()) {
    _internal_mutable_interfaces()->::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail::MergeFrom(from._internal_interfaces());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::kentik::capacity_plan::v202212::Config::MergeFrom(from._internal_config());
  }
  if (from.has_summary_status()) {
    _internal_mutable_summary_status()->::kentik::capacity_plan::v202212::SummaryStatus::MergeFrom(from._internal_summary_status());
  }
}

void CapacitySummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.CapacitySummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacitySummary::CopyFrom(const CapacitySummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.CapacitySummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacitySummary::IsInitialized() const {
  return true;
}

void CapacitySummary::InternalSwap(CapacitySummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacitySummary, summary_status_)
      + sizeof(CapacitySummary::summary_status_)
      - PROTOBUF_FIELD_OFFSET(CapacitySummary, interfaces_)>(
          reinterpret_cast<char*>(&interfaces_),
          reinterpret_cast<char*>(&other->interfaces_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacitySummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapacityPlan_InterfaceDetail::InitAsDefaultInstance() {
}
class CapacityPlan_InterfaceDetail::_Internal {
 public:
};

CapacityPlan_InterfaceDetail::CapacityPlan_InterfaceDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
}
CapacityPlan_InterfaceDetail::CapacityPlan_InterfaceDetail(const CapacityPlan_InterfaceDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  intf_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intf_name().empty()) {
    intf_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_intf_name(),
      GetArena());
  }
  intf_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intf_description().empty()) {
    intf_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_intf_description(),
      GetArena());
  }
  intf_capacity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intf_capacity().empty()) {
    intf_capacity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_intf_capacity(),
      GetArena());
  }
  network_boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_boundary().empty()) {
    network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_network_boundary(),
      GetArena());
  }
  conn_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conn_type().empty()) {
    conn_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conn_type(),
      GetArena());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_provider(),
      GetArena());
  }
  util_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_util_status().empty()) {
    util_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_util_status(),
      GetArena());
  }
  util_out_mbps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_util_out_mbps().empty()) {
    util_out_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_util_out_mbps(),
      GetArena());
  }
  util_out_pct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_util_out_pct().empty()) {
    util_out_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_util_out_pct(),
      GetArena());
  }
  util_in_mbps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_util_in_mbps().empty()) {
    util_in_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_util_in_mbps(),
      GetArena());
  }
  util_in_pct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_util_in_pct().empty()) {
    util_in_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_util_in_pct(),
      GetArena());
  }
  runout_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runout_status().empty()) {
    runout_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runout_status(),
      GetArena());
  }
  runout_in_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runout_in_date().empty()) {
    runout_in_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runout_in_date(),
      GetArena());
  }
  runout_in_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runout_in_variation().empty()) {
    runout_in_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runout_in_variation(),
      GetArena());
  }
  runout_out_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runout_out_date().empty()) {
    runout_out_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runout_out_date(),
      GetArena());
  }
  runout_out_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runout_out_variation().empty()) {
    runout_out_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runout_out_variation(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
}

void CapacityPlan_InterfaceDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intf_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intf_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intf_capacity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_out_mbps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_out_pct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_in_mbps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_in_pct_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_in_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_in_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_out_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_out_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CapacityPlan_InterfaceDetail::~CapacityPlan_InterfaceDetail() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacityPlan_InterfaceDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intf_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intf_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intf_capacity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_out_mbps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_out_pct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_in_mbps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  util_in_pct_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_in_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_in_variation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_out_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runout_out_variation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CapacityPlan_InterfaceDetail::ArenaDtor(void* object) {
  CapacityPlan_InterfaceDetail* _this = reinterpret_cast< CapacityPlan_InterfaceDetail* >(object);
  (void)_this;
}
void CapacityPlan_InterfaceDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacityPlan_InterfaceDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapacityPlan_InterfaceDetail& CapacityPlan_InterfaceDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapacityPlan_InterfaceDetail_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void CapacityPlan_InterfaceDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intf_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intf_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intf_capacity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_boundary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conn_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_out_mbps_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_out_pct_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_in_mbps_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_in_pct_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_in_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_in_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_out_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_out_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacityPlan_InterfaceDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_name = 1[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intf_name = 2[json_name = "intfName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_intf_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intf_description = 3[json_name = "intfDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_intf_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intf_capacity = 4[json_name = "intfCapacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_intf_capacity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network_boundary = 5[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_network_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string conn_type = 6[json_name = "connType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_conn_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 7[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string util_status = 8[json_name = "utilStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_util_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string util_out_mbps = 9[json_name = "utilOutMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_util_out_mbps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string util_out_pct = 10[json_name = "utilOutPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_util_out_pct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string util_in_mbps = 11[json_name = "utilInMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_util_in_mbps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string util_in_pct = 12[json_name = "utilInPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_util_in_pct();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runout_status = 13[json_name = "runoutStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_runout_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runout_in_date = 14[json_name = "runoutInDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_runout_in_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runout_in_variation = 15[json_name = "runoutInVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_runout_in_variation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runout_out_date = 16[json_name = "runoutOutDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_runout_out_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runout_out_variation = 17[json_name = "runoutOutVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_runout_out_variation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacityPlan_InterfaceDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_name(), target);
  }

  // string intf_name = 2[json_name = "intfName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->intf_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intf_name().data(), static_cast<int>(this->_internal_intf_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_intf_name(), target);
  }

  // string intf_description = 3[json_name = "intfDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->intf_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intf_description().data(), static_cast<int>(this->_internal_intf_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_intf_description(), target);
  }

  // string intf_capacity = 4[json_name = "intfCapacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->intf_capacity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intf_capacity().data(), static_cast<int>(this->_internal_intf_capacity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_intf_capacity(), target);
  }

  // string network_boundary = 5[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->network_boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_boundary().data(), static_cast<int>(this->_internal_network_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_network_boundary(), target);
  }

  // string conn_type = 6[json_name = "connType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->conn_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conn_type().data(), static_cast<int>(this->_internal_conn_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_conn_type(), target);
  }

  // string provider = 7[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_provider(), target);
  }

  // string util_status = 8[json_name = "utilStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_util_status().data(), static_cast<int>(this->_internal_util_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_util_status(), target);
  }

  // string util_out_mbps = 9[json_name = "utilOutMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_out_mbps().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_util_out_mbps().data(), static_cast<int>(this->_internal_util_out_mbps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_util_out_mbps(), target);
  }

  // string util_out_pct = 10[json_name = "utilOutPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_out_pct().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_util_out_pct().data(), static_cast<int>(this->_internal_util_out_pct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_util_out_pct(), target);
  }

  // string util_in_mbps = 11[json_name = "utilInMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_in_mbps().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_util_in_mbps().data(), static_cast<int>(this->_internal_util_in_mbps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_util_in_mbps(), target);
  }

  // string util_in_pct = 12[json_name = "utilInPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_in_pct().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_util_in_pct().data(), static_cast<int>(this->_internal_util_in_pct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_util_in_pct(), target);
  }

  // string runout_status = 13[json_name = "runoutStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runout_status().data(), static_cast<int>(this->_internal_runout_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_runout_status(), target);
  }

  // string runout_in_date = 14[json_name = "runoutInDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_in_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runout_in_date().data(), static_cast<int>(this->_internal_runout_in_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_runout_in_date(), target);
  }

  // string runout_in_variation = 15[json_name = "runoutInVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_in_variation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runout_in_variation().data(), static_cast<int>(this->_internal_runout_in_variation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_runout_in_variation(), target);
  }

  // string runout_out_date = 16[json_name = "runoutOutDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_out_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runout_out_date().data(), static_cast<int>(this->_internal_runout_out_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_runout_out_date(), target);
  }

  // string runout_out_variation = 17[json_name = "runoutOutVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_out_variation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runout_out_variation().data(), static_cast<int>(this->_internal_runout_out_variation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_runout_out_variation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  return target;
}

size_t CapacityPlan_InterfaceDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_name = 1[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // string intf_name = 2[json_name = "intfName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->intf_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intf_name());
  }

  // string intf_description = 3[json_name = "intfDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->intf_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intf_description());
  }

  // string intf_capacity = 4[json_name = "intfCapacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->intf_capacity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intf_capacity());
  }

  // string network_boundary = 5[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->network_boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_boundary());
  }

  // string conn_type = 6[json_name = "connType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->conn_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn_type());
  }

  // string provider = 7[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // string util_status = 8[json_name = "utilStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_util_status());
  }

  // string util_out_mbps = 9[json_name = "utilOutMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_out_mbps().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_util_out_mbps());
  }

  // string util_out_pct = 10[json_name = "utilOutPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_out_pct().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_util_out_pct());
  }

  // string util_in_mbps = 11[json_name = "utilInMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_in_mbps().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_util_in_mbps());
  }

  // string util_in_pct = 12[json_name = "utilInPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->util_in_pct().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_util_in_pct());
  }

  // string runout_status = 13[json_name = "runoutStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runout_status());
  }

  // string runout_in_date = 14[json_name = "runoutInDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_in_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runout_in_date());
  }

  // string runout_in_variation = 15[json_name = "runoutInVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_in_variation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runout_in_variation());
  }

  // string runout_out_date = 16[json_name = "runoutOutDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_out_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runout_out_date());
  }

  // string runout_out_variation = 17[json_name = "runoutOutVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->runout_out_variation().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runout_out_variation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacityPlan_InterfaceDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacityPlan_InterfaceDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacityPlan_InterfaceDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
    MergeFrom(*source);
  }
}

void CapacityPlan_InterfaceDetail::MergeFrom(const CapacityPlan_InterfaceDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.intf_name().size() > 0) {
    _internal_set_intf_name(from._internal_intf_name());
  }
  if (from.intf_description().size() > 0) {
    _internal_set_intf_description(from._internal_intf_description());
  }
  if (from.intf_capacity().size() > 0) {
    _internal_set_intf_capacity(from._internal_intf_capacity());
  }
  if (from.network_boundary().size() > 0) {
    _internal_set_network_boundary(from._internal_network_boundary());
  }
  if (from.conn_type().size() > 0) {
    _internal_set_conn_type(from._internal_conn_type());
  }
  if (from.provider().size() > 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.util_status().size() > 0) {
    _internal_set_util_status(from._internal_util_status());
  }
  if (from.util_out_mbps().size() > 0) {
    _internal_set_util_out_mbps(from._internal_util_out_mbps());
  }
  if (from.util_out_pct().size() > 0) {
    _internal_set_util_out_pct(from._internal_util_out_pct());
  }
  if (from.util_in_mbps().size() > 0) {
    _internal_set_util_in_mbps(from._internal_util_in_mbps());
  }
  if (from.util_in_pct().size() > 0) {
    _internal_set_util_in_pct(from._internal_util_in_pct());
  }
  if (from.runout_status().size() > 0) {
    _internal_set_runout_status(from._internal_runout_status());
  }
  if (from.runout_in_date().size() > 0) {
    _internal_set_runout_in_date(from._internal_runout_in_date());
  }
  if (from.runout_in_variation().size() > 0) {
    _internal_set_runout_in_variation(from._internal_runout_in_variation());
  }
  if (from.runout_out_date().size() > 0) {
    _internal_set_runout_out_date(from._internal_runout_out_date());
  }
  if (from.runout_out_variation().size() > 0) {
    _internal_set_runout_out_variation(from._internal_runout_out_variation());
  }
}

void CapacityPlan_InterfaceDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacityPlan_InterfaceDetail::CopyFrom(const CapacityPlan_InterfaceDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacityPlan_InterfaceDetail::IsInitialized() const {
  return true;
}

void CapacityPlan_InterfaceDetail::InternalSwap(CapacityPlan_InterfaceDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intf_name_.Swap(&other->intf_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intf_description_.Swap(&other->intf_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intf_capacity_.Swap(&other->intf_capacity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_boundary_.Swap(&other->network_boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conn_type_.Swap(&other->conn_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_status_.Swap(&other->util_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_out_mbps_.Swap(&other->util_out_mbps_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_out_pct_.Swap(&other->util_out_pct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_in_mbps_.Swap(&other->util_in_mbps_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  util_in_pct_.Swap(&other->util_in_pct_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_status_.Swap(&other->runout_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_in_date_.Swap(&other->runout_in_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_in_variation_.Swap(&other->runout_in_variation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_out_date_.Swap(&other->runout_out_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runout_out_variation_.Swap(&other->runout_out_variation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacityPlan_InterfaceDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CapacityPlan::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_CapacityPlan_default_instance_._instance.get_mutable()->config_ = const_cast< ::kentik::capacity_plan::v202212::Config*>(
      ::kentik::capacity_plan::v202212::Config::internal_default_instance());
  ::kentik::capacity_plan::v202212::_CapacityPlan_default_instance_._instance.get_mutable()->summary_status_ = const_cast< ::kentik::capacity_plan::v202212::SummaryStatus*>(
      ::kentik::capacity_plan::v202212::SummaryStatus::internal_default_instance());
}
class CapacityPlan::_Internal {
 public:
  static const ::kentik::capacity_plan::v202212::Config& config(const CapacityPlan* msg);
  static const ::kentik::capacity_plan::v202212::SummaryStatus& summary_status(const CapacityPlan* msg);
};

const ::kentik::capacity_plan::v202212::Config&
CapacityPlan::_Internal::config(const CapacityPlan* msg) {
  return *msg->config_;
}
const ::kentik::capacity_plan::v202212::SummaryStatus&
CapacityPlan::_Internal::summary_status(const CapacityPlan* msg) {
  return *msg->summary_status_;
}
CapacityPlan::CapacityPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interfaces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.CapacityPlan)
}
CapacityPlan::CapacityPlan(const CapacityPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_config()) {
    config_ = new ::kentik::capacity_plan::v202212::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_summary_status()) {
    summary_status_ = new ::kentik::capacity_plan::v202212::SummaryStatus(*from.summary_status_);
  } else {
    summary_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.CapacityPlan)
}

void CapacityPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_status_) -
      reinterpret_cast<char*>(&config_)) + sizeof(summary_status_));
}

CapacityPlan::~CapacityPlan() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.CapacityPlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacityPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete summary_status_;
}

void CapacityPlan::ArenaDtor(void* object) {
  CapacityPlan* _this = reinterpret_cast< CapacityPlan* >(object);
  (void)_this;
}
void CapacityPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacityPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapacityPlan& CapacityPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapacityPlan_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void CapacityPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.CapacityPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && summary_status_ != nullptr) {
    delete summary_status_;
  }
  summary_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacityPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.CapacityPlan.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacityPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.CapacityPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.CapacityPlan.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // repeated .kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_interfaces(i), target, stream);
  }

  // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_summary_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::summary_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.CapacityPlan)
  return target;
}

size_t CapacityPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.CapacityPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_summary_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacityPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.CapacityPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacityPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacityPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.CapacityPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.CapacityPlan)
    MergeFrom(*source);
  }
}

void CapacityPlan::MergeFrom(const CapacityPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.CapacityPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::kentik::capacity_plan::v202212::Config::MergeFrom(from._internal_config());
  }
  if (from.has_summary_status()) {
    _internal_mutable_summary_status()->::kentik::capacity_plan::v202212::SummaryStatus::MergeFrom(from._internal_summary_status());
  }
}

void CapacityPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.CapacityPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacityPlan::CopyFrom(const CapacityPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.CapacityPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacityPlan::IsInitialized() const {
  return true;
}

void CapacityPlan::InternalSwap(CapacityPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacityPlan, summary_status_)
      + sizeof(CapacityPlan::summary_status_)
      - PROTOBUF_FIELD_OFFSET(CapacityPlan, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacityPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCapacitySummariesRequest::InitAsDefaultInstance() {
}
class ListCapacitySummariesRequest::_Internal {
 public:
};

ListCapacitySummariesRequest::ListCapacitySummariesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
}
ListCapacitySummariesRequest::ListCapacitySummariesRequest(const ListCapacitySummariesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
}

void ListCapacitySummariesRequest::SharedCtor() {
}

ListCapacitySummariesRequest::~ListCapacitySummariesRequest() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCapacitySummariesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCapacitySummariesRequest::ArenaDtor(void* object) {
  ListCapacitySummariesRequest* _this = reinterpret_cast< ListCapacitySummariesRequest* >(object);
  (void)_this;
}
void ListCapacitySummariesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCapacitySummariesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCapacitySummariesRequest& ListCapacitySummariesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCapacitySummariesRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void ListCapacitySummariesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCapacitySummariesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCapacitySummariesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  return target;
}

size_t ListCapacitySummariesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCapacitySummariesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCapacitySummariesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCapacitySummariesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
    MergeFrom(*source);
  }
}

void ListCapacitySummariesRequest::MergeFrom(const ListCapacitySummariesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListCapacitySummariesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCapacitySummariesRequest::CopyFrom(const ListCapacitySummariesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCapacitySummariesRequest::IsInitialized() const {
  return true;
}

void ListCapacitySummariesRequest::InternalSwap(ListCapacitySummariesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCapacitySummariesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCapacitySummariesResponse::InitAsDefaultInstance() {
}
class ListCapacitySummariesResponse::_Internal {
 public:
};

ListCapacitySummariesResponse::ListCapacitySummariesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capacity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
}
ListCapacitySummariesResponse::ListCapacitySummariesResponse(const ListCapacitySummariesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capacity_(from.capacity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
}

void ListCapacitySummariesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCapacitySummariesResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  invalid_count_ = 0u;
}

ListCapacitySummariesResponse::~ListCapacitySummariesResponse() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCapacitySummariesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCapacitySummariesResponse::ArenaDtor(void* object) {
  ListCapacitySummariesResponse* _this = reinterpret_cast< ListCapacitySummariesResponse* >(object);
  (void)_this;
}
void ListCapacitySummariesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCapacitySummariesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCapacitySummariesResponse& ListCapacitySummariesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCapacitySummariesResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void ListCapacitySummariesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capacity_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCapacitySummariesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capacity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCapacitySummariesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capacity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_capacity(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  return target;
}

size_t ListCapacitySummariesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_capacity_size();
  for (const auto& msg : this->capacity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCapacitySummariesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCapacitySummariesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCapacitySummariesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
    MergeFrom(*source);
  }
}

void ListCapacitySummariesResponse::MergeFrom(const ListCapacitySummariesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capacity_.MergeFrom(from.capacity_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListCapacitySummariesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCapacitySummariesResponse::CopyFrom(const ListCapacitySummariesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCapacitySummariesResponse::IsInitialized() const {
  return true;
}

void ListCapacitySummariesResponse::InternalSwap(ListCapacitySummariesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capacity_.InternalSwap(&other->capacity_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCapacitySummariesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCapacitySummaryRequest::InitAsDefaultInstance() {
}
class GetCapacitySummaryRequest::_Internal {
 public:
};

GetCapacitySummaryRequest::GetCapacitySummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
}
GetCapacitySummaryRequest::GetCapacitySummaryRequest(const GetCapacitySummaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
}

void GetCapacitySummaryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCapacitySummaryRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCapacitySummaryRequest::~GetCapacitySummaryRequest() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCapacitySummaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCapacitySummaryRequest::ArenaDtor(void* object) {
  GetCapacitySummaryRequest* _this = reinterpret_cast< GetCapacitySummaryRequest* >(object);
  (void)_this;
}
void GetCapacitySummaryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCapacitySummaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCapacitySummaryRequest& GetCapacitySummaryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCapacitySummaryRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void GetCapacitySummaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCapacitySummaryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCapacitySummaryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  return target;
}

size_t GetCapacitySummaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCapacitySummaryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCapacitySummaryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCapacitySummaryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
    MergeFrom(*source);
  }
}

void GetCapacitySummaryRequest::MergeFrom(const GetCapacitySummaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetCapacitySummaryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCapacitySummaryRequest::CopyFrom(const GetCapacitySummaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCapacitySummaryRequest::IsInitialized() const {
  return true;
}

void GetCapacitySummaryRequest::InternalSwap(GetCapacitySummaryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCapacitySummaryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCapacitySummaryResponse::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_GetCapacitySummaryResponse_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::kentik::capacity_plan::v202212::CapacitySummary*>(
      ::kentik::capacity_plan::v202212::CapacitySummary::internal_default_instance());
}
class GetCapacitySummaryResponse::_Internal {
 public:
  static const ::kentik::capacity_plan::v202212::CapacitySummary& capacity(const GetCapacitySummaryResponse* msg);
};

const ::kentik::capacity_plan::v202212::CapacitySummary&
GetCapacitySummaryResponse::_Internal::capacity(const GetCapacitySummaryResponse* msg) {
  return *msg->capacity_;
}
GetCapacitySummaryResponse::GetCapacitySummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
}
GetCapacitySummaryResponse::GetCapacitySummaryResponse(const GetCapacitySummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_capacity()) {
    capacity_ = new ::kentik::capacity_plan::v202212::CapacitySummary(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
}

void GetCapacitySummaryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCapacitySummaryResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  capacity_ = nullptr;
}

GetCapacitySummaryResponse::~GetCapacitySummaryResponse() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCapacitySummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete capacity_;
}

void GetCapacitySummaryResponse::ArenaDtor(void* object) {
  GetCapacitySummaryResponse* _this = reinterpret_cast< GetCapacitySummaryResponse* >(object);
  (void)_this;
}
void GetCapacitySummaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCapacitySummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCapacitySummaryResponse& GetCapacitySummaryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCapacitySummaryResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void GetCapacitySummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCapacitySummaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCapacitySummaryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capacity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  return target;
}

size_t GetCapacitySummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCapacitySummaryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCapacitySummaryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCapacitySummaryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
    MergeFrom(*source);
  }
}

void GetCapacitySummaryResponse::MergeFrom(const GetCapacitySummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capacity()) {
    _internal_mutable_capacity()->::kentik::capacity_plan::v202212::CapacitySummary::MergeFrom(from._internal_capacity());
  }
}

void GetCapacitySummaryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCapacitySummaryResponse::CopyFrom(const GetCapacitySummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCapacitySummaryResponse::IsInitialized() const {
  return true;
}

void GetCapacitySummaryResponse::InternalSwap(GetCapacitySummaryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCapacitySummaryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCapacityPlansRequest::InitAsDefaultInstance() {
}
class ListCapacityPlansRequest::_Internal {
 public:
};

ListCapacityPlansRequest::ListCapacityPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
}
ListCapacityPlansRequest::ListCapacityPlansRequest(const ListCapacityPlansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
}

void ListCapacityPlansRequest::SharedCtor() {
}

ListCapacityPlansRequest::~ListCapacityPlansRequest() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCapacityPlansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCapacityPlansRequest::ArenaDtor(void* object) {
  ListCapacityPlansRequest* _this = reinterpret_cast< ListCapacityPlansRequest* >(object);
  (void)_this;
}
void ListCapacityPlansRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCapacityPlansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCapacityPlansRequest& ListCapacityPlansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCapacityPlansRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void ListCapacityPlansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCapacityPlansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCapacityPlansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  return target;
}

size_t ListCapacityPlansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCapacityPlansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCapacityPlansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCapacityPlansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
    MergeFrom(*source);
  }
}

void ListCapacityPlansRequest::MergeFrom(const ListCapacityPlansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListCapacityPlansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCapacityPlansRequest::CopyFrom(const ListCapacityPlansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCapacityPlansRequest::IsInitialized() const {
  return true;
}

void ListCapacityPlansRequest::InternalSwap(ListCapacityPlansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCapacityPlansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCapacityPlansResponse::InitAsDefaultInstance() {
}
class ListCapacityPlansResponse::_Internal {
 public:
};

ListCapacityPlansResponse::ListCapacityPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capacity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
}
ListCapacityPlansResponse::ListCapacityPlansResponse(const ListCapacityPlansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capacity_(from.capacity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
}

void ListCapacityPlansResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCapacityPlansResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  invalid_count_ = 0u;
}

ListCapacityPlansResponse::~ListCapacityPlansResponse() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCapacityPlansResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCapacityPlansResponse::ArenaDtor(void* object) {
  ListCapacityPlansResponse* _this = reinterpret_cast< ListCapacityPlansResponse* >(object);
  (void)_this;
}
void ListCapacityPlansResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCapacityPlansResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCapacityPlansResponse& ListCapacityPlansResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCapacityPlansResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void ListCapacityPlansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capacity_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCapacityPlansResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capacity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCapacityPlansResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capacity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_capacity(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  return target;
}

size_t ListCapacityPlansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_capacity_size();
  for (const auto& msg : this->capacity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCapacityPlansResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCapacityPlansResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCapacityPlansResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
    MergeFrom(*source);
  }
}

void ListCapacityPlansResponse::MergeFrom(const ListCapacityPlansResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capacity_.MergeFrom(from.capacity_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListCapacityPlansResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCapacityPlansResponse::CopyFrom(const ListCapacityPlansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCapacityPlansResponse::IsInitialized() const {
  return true;
}

void ListCapacityPlansResponse::InternalSwap(ListCapacityPlansResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capacity_.InternalSwap(&other->capacity_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCapacityPlansResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCapacityPlanRequest::InitAsDefaultInstance() {
}
class GetCapacityPlanRequest::_Internal {
 public:
};

GetCapacityPlanRequest::GetCapacityPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
}
GetCapacityPlanRequest::GetCapacityPlanRequest(const GetCapacityPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
}

void GetCapacityPlanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCapacityPlanRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCapacityPlanRequest::~GetCapacityPlanRequest() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCapacityPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCapacityPlanRequest::ArenaDtor(void* object) {
  GetCapacityPlanRequest* _this = reinterpret_cast< GetCapacityPlanRequest* >(object);
  (void)_this;
}
void GetCapacityPlanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCapacityPlanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCapacityPlanRequest& GetCapacityPlanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCapacityPlanRequest_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void GetCapacityPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCapacityPlanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.capacity_plan.v202212.GetCapacityPlanRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCapacityPlanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.capacity_plan.v202212.GetCapacityPlanRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  return target;
}

size_t GetCapacityPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCapacityPlanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCapacityPlanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCapacityPlanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
    MergeFrom(*source);
  }
}

void GetCapacityPlanRequest::MergeFrom(const GetCapacityPlanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetCapacityPlanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCapacityPlanRequest::CopyFrom(const GetCapacityPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCapacityPlanRequest::IsInitialized() const {
  return true;
}

void GetCapacityPlanRequest::InternalSwap(GetCapacityPlanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCapacityPlanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCapacityPlanResponse::InitAsDefaultInstance() {
  ::kentik::capacity_plan::v202212::_GetCapacityPlanResponse_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::kentik::capacity_plan::v202212::CapacityPlan*>(
      ::kentik::capacity_plan::v202212::CapacityPlan::internal_default_instance());
}
class GetCapacityPlanResponse::_Internal {
 public:
  static const ::kentik::capacity_plan::v202212::CapacityPlan& capacity(const GetCapacityPlanResponse* msg);
};

const ::kentik::capacity_plan::v202212::CapacityPlan&
GetCapacityPlanResponse::_Internal::capacity(const GetCapacityPlanResponse* msg) {
  return *msg->capacity_;
}
GetCapacityPlanResponse::GetCapacityPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
}
GetCapacityPlanResponse::GetCapacityPlanResponse(const GetCapacityPlanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_capacity()) {
    capacity_ = new ::kentik::capacity_plan::v202212::CapacityPlan(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
}

void GetCapacityPlanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCapacityPlanResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  capacity_ = nullptr;
}

GetCapacityPlanResponse::~GetCapacityPlanResponse() {
  // @@protoc_insertion_point(destructor:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCapacityPlanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete capacity_;
}

void GetCapacityPlanResponse::ArenaDtor(void* object) {
  GetCapacityPlanResponse* _this = reinterpret_cast< GetCapacityPlanResponse* >(object);
  (void)_this;
}
void GetCapacityPlanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCapacityPlanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCapacityPlanResponse& GetCapacityPlanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCapacityPlanResponse_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.base);
  return *internal_default_instance();
}


void GetCapacityPlanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCapacityPlanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCapacityPlanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capacity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  return target;
}

size_t GetCapacityPlanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCapacityPlanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCapacityPlanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCapacityPlanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
    MergeFrom(*source);
  }
}

void GetCapacityPlanResponse::MergeFrom(const GetCapacityPlanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capacity()) {
    _internal_mutable_capacity()->::kentik::capacity_plan::v202212::CapacityPlan::MergeFrom(from._internal_capacity());
  }
}

void GetCapacityPlanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCapacityPlanResponse::CopyFrom(const GetCapacityPlanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCapacityPlanResponse::IsInitialized() const {
  return true;
}

void GetCapacityPlanResponse::InternalSwap(GetCapacityPlanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCapacityPlanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202212
}  // namespace capacity_plan
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::Config_RunoutConfig* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::Config_RunoutConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::Config_RunoutConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::Config_UtilConfig* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::Config_UtilConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::Config_UtilConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::Config* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::SummaryStatus* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::SummaryStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::SummaryStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::CapacitySummary* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::CapacitySummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::CapacitySummary >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::CapacityPlan* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::CapacityPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::CapacityPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::ListCapacitySummariesRequest* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::ListCapacitySummariesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::ListCapacitySummariesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::ListCapacitySummariesResponse* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::ListCapacitySummariesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::ListCapacitySummariesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::GetCapacitySummaryRequest* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::GetCapacitySummaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::GetCapacitySummaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::GetCapacitySummaryResponse* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::GetCapacitySummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::GetCapacitySummaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::ListCapacityPlansRequest* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::ListCapacityPlansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::ListCapacityPlansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::ListCapacityPlansResponse* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::ListCapacityPlansResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::ListCapacityPlansResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::GetCapacityPlanRequest* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::GetCapacityPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::GetCapacityPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::capacity_plan::v202212::GetCapacityPlanResponse* Arena::CreateMaybeMessage< ::kentik::capacity_plan::v202212::GetCapacityPlanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::capacity_plan::v202212::GetCapacityPlanResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
