// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/capacity_plan/v202212/capacity_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202012alpha1/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
namespace kentik {
namespace capacity_plan {
namespace v202212 {
class CapacityPlan;
class CapacityPlanDefaultTypeInternal;
extern CapacityPlanDefaultTypeInternal _CapacityPlan_default_instance_;
class CapacityPlan_InterfaceDetail;
class CapacityPlan_InterfaceDetailDefaultTypeInternal;
extern CapacityPlan_InterfaceDetailDefaultTypeInternal _CapacityPlan_InterfaceDetail_default_instance_;
class CapacitySummary;
class CapacitySummaryDefaultTypeInternal;
extern CapacitySummaryDefaultTypeInternal _CapacitySummary_default_instance_;
class CapacitySummary_InterfacesDetail;
class CapacitySummary_InterfacesDetailDefaultTypeInternal;
extern CapacitySummary_InterfacesDetailDefaultTypeInternal _CapacitySummary_InterfacesDetail_default_instance_;
class CapacitySummary_InterfacesDetail_StatusDetail;
class CapacitySummary_InterfacesDetail_StatusDetailDefaultTypeInternal;
extern CapacitySummary_InterfacesDetail_StatusDetailDefaultTypeInternal _CapacitySummary_InterfacesDetail_StatusDetail_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_RunoutConfig;
class Config_RunoutConfigDefaultTypeInternal;
extern Config_RunoutConfigDefaultTypeInternal _Config_RunoutConfig_default_instance_;
class Config_UtilConfig;
class Config_UtilConfigDefaultTypeInternal;
extern Config_UtilConfigDefaultTypeInternal _Config_UtilConfig_default_instance_;
class GetCapacityPlanRequest;
class GetCapacityPlanRequestDefaultTypeInternal;
extern GetCapacityPlanRequestDefaultTypeInternal _GetCapacityPlanRequest_default_instance_;
class GetCapacityPlanResponse;
class GetCapacityPlanResponseDefaultTypeInternal;
extern GetCapacityPlanResponseDefaultTypeInternal _GetCapacityPlanResponse_default_instance_;
class GetCapacitySummaryRequest;
class GetCapacitySummaryRequestDefaultTypeInternal;
extern GetCapacitySummaryRequestDefaultTypeInternal _GetCapacitySummaryRequest_default_instance_;
class GetCapacitySummaryResponse;
class GetCapacitySummaryResponseDefaultTypeInternal;
extern GetCapacitySummaryResponseDefaultTypeInternal _GetCapacitySummaryResponse_default_instance_;
class ListCapacityPlansRequest;
class ListCapacityPlansRequestDefaultTypeInternal;
extern ListCapacityPlansRequestDefaultTypeInternal _ListCapacityPlansRequest_default_instance_;
class ListCapacityPlansResponse;
class ListCapacityPlansResponseDefaultTypeInternal;
extern ListCapacityPlansResponseDefaultTypeInternal _ListCapacityPlansResponse_default_instance_;
class ListCapacitySummariesRequest;
class ListCapacitySummariesRequestDefaultTypeInternal;
extern ListCapacitySummariesRequestDefaultTypeInternal _ListCapacitySummariesRequest_default_instance_;
class ListCapacitySummariesResponse;
class ListCapacitySummariesResponseDefaultTypeInternal;
extern ListCapacitySummariesResponseDefaultTypeInternal _ListCapacitySummariesResponse_default_instance_;
class SummaryStatus;
class SummaryStatusDefaultTypeInternal;
extern SummaryStatusDefaultTypeInternal _SummaryStatus_default_instance_;
class SummaryStatus_RunoutStatus;
class SummaryStatus_RunoutStatusDefaultTypeInternal;
extern SummaryStatus_RunoutStatusDefaultTypeInternal _SummaryStatus_RunoutStatus_default_instance_;
class SummaryStatus_UtilStatus;
class SummaryStatus_UtilStatusDefaultTypeInternal;
extern SummaryStatus_UtilStatusDefaultTypeInternal _SummaryStatus_UtilStatus_default_instance_;
}  // namespace v202212
}  // namespace capacity_plan
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::capacity_plan::v202212::CapacityPlan* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacityPlan>(Arena*);
template<> ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail>(Arena*);
template<> ::kentik::capacity_plan::v202212::CapacitySummary* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary>(Arena*);
template<> ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail>(Arena*);
template<> ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail>(Arena*);
template<> ::kentik::capacity_plan::v202212::Config* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::Config>(Arena*);
template<> ::kentik::capacity_plan::v202212::Config_RunoutConfig* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::Config_RunoutConfig>(Arena*);
template<> ::kentik::capacity_plan::v202212::Config_UtilConfig* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::Config_UtilConfig>(Arena*);
template<> ::kentik::capacity_plan::v202212::GetCapacityPlanRequest* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::GetCapacityPlanRequest>(Arena*);
template<> ::kentik::capacity_plan::v202212::GetCapacityPlanResponse* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::GetCapacityPlanResponse>(Arena*);
template<> ::kentik::capacity_plan::v202212::GetCapacitySummaryRequest* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::GetCapacitySummaryRequest>(Arena*);
template<> ::kentik::capacity_plan::v202212::GetCapacitySummaryResponse* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::GetCapacitySummaryResponse>(Arena*);
template<> ::kentik::capacity_plan::v202212::ListCapacityPlansRequest* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::ListCapacityPlansRequest>(Arena*);
template<> ::kentik::capacity_plan::v202212::ListCapacityPlansResponse* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::ListCapacityPlansResponse>(Arena*);
template<> ::kentik::capacity_plan::v202212::ListCapacitySummariesRequest* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::ListCapacitySummariesRequest>(Arena*);
template<> ::kentik::capacity_plan::v202212::ListCapacitySummariesResponse* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::ListCapacitySummariesResponse>(Arena*);
template<> ::kentik::capacity_plan::v202212::SummaryStatus* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus>(Arena*);
template<> ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus>(Arena*);
template<> ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* Arena::CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace capacity_plan {
namespace v202212 {

// ===================================================================

class Config_RunoutConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.Config.RunoutConfig) */ {
 public:
  inline Config_RunoutConfig() : Config_RunoutConfig(nullptr) {};
  virtual ~Config_RunoutConfig();

  Config_RunoutConfig(const Config_RunoutConfig& from);
  Config_RunoutConfig(Config_RunoutConfig&& from) noexcept
    : Config_RunoutConfig() {
    *this = ::std::move(from);
  }

  inline Config_RunoutConfig& operator=(const Config_RunoutConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config_RunoutConfig& operator=(Config_RunoutConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config_RunoutConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_RunoutConfig* internal_default_instance() {
    return reinterpret_cast<const Config_RunoutConfig*>(
               &_Config_RunoutConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config_RunoutConfig& a, Config_RunoutConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Config_RunoutConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config_RunoutConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config_RunoutConfig* New() const final {
    return CreateMaybeMessage<Config_RunoutConfig>(nullptr);
  }

  Config_RunoutConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config_RunoutConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config_RunoutConfig& from);
  void MergeFrom(const Config_RunoutConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_RunoutConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.Config.RunoutConfig";
  }
  protected:
  explicit Config_RunoutConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrategyFieldNumber = 1,
    kWarnQtyFieldNumber = 2,
    kCritQtyFieldNumber = 3,
  };
  // string strategy = 1[json_name = "strategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_strategy();
  const std::string& strategy() const;
  void set_strategy(const std::string& value);
  void set_strategy(std::string&& value);
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  std::string* mutable_strategy();
  std::string* release_strategy();
  void set_allocated_strategy(std::string* strategy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_strategy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_strategy(
      std::string* strategy);
  private:
  const std::string& _internal_strategy() const;
  void _internal_set_strategy(const std::string& value);
  std::string* _internal_mutable_strategy();
  public:

  // uint32 warn_qty = 2[json_name = "warnQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_warn_qty() const;
  private:
  bool _internal_has_warn_qty() const;
  public:
  void clear_warn_qty();
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_qty() const;
  void set_warn_qty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_warn_qty() const;
  void _internal_set_warn_qty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crit_qty = 3[json_name = "critQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_crit_qty() const;
  private:
  bool _internal_has_crit_qty() const;
  public:
  void clear_crit_qty();
  ::PROTOBUF_NAMESPACE_ID::uint32 crit_qty() const;
  void set_crit_qty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crit_qty() const;
  void _internal_set_crit_qty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.Config.RunoutConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_qty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crit_qty_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class Config_UtilConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.Config.UtilConfig) */ {
 public:
  inline Config_UtilConfig() : Config_UtilConfig(nullptr) {};
  virtual ~Config_UtilConfig();

  Config_UtilConfig(const Config_UtilConfig& from);
  Config_UtilConfig(Config_UtilConfig&& from) noexcept
    : Config_UtilConfig() {
    *this = ::std::move(from);
  }

  inline Config_UtilConfig& operator=(const Config_UtilConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config_UtilConfig& operator=(Config_UtilConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config_UtilConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_UtilConfig* internal_default_instance() {
    return reinterpret_cast<const Config_UtilConfig*>(
               &_Config_UtilConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Config_UtilConfig& a, Config_UtilConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Config_UtilConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config_UtilConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config_UtilConfig* New() const final {
    return CreateMaybeMessage<Config_UtilConfig>(nullptr);
  }

  Config_UtilConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config_UtilConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config_UtilConfig& from);
  void MergeFrom(const Config_UtilConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_UtilConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.Config.UtilConfig";
  }
  protected:
  explicit Config_UtilConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregateFieldNumber = 1,
    kWarnPctFieldNumber = 2,
    kCritPctFieldNumber = 3,
  };
  // string aggregate = 1[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_aggregate();
  const std::string& aggregate() const;
  void set_aggregate(const std::string& value);
  void set_aggregate(std::string&& value);
  void set_aggregate(const char* value);
  void set_aggregate(const char* value, size_t size);
  std::string* mutable_aggregate();
  std::string* release_aggregate();
  void set_allocated_aggregate(std::string* aggregate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aggregate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aggregate(
      std::string* aggregate);
  private:
  const std::string& _internal_aggregate() const;
  void _internal_set_aggregate(const std::string& value);
  std::string* _internal_mutable_aggregate();
  public:

  // uint32 warn_pct = 2[json_name = "warnPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_warn_pct() const;
  private:
  bool _internal_has_warn_pct() const;
  public:
  void clear_warn_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_pct() const;
  void set_warn_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_warn_pct() const;
  void _internal_set_warn_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crit_pct = 3[json_name = "critPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_crit_pct() const;
  private:
  bool _internal_has_crit_pct() const;
  public:
  void clear_crit_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 crit_pct() const;
  void set_crit_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crit_pct() const;
  void _internal_set_crit_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.Config.UtilConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aggregate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_pct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crit_pct_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.Config) */ {
 public:
  inline Config() : Config(nullptr) {};
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Config_RunoutConfig RunoutConfig;
  typedef Config_UtilConfig UtilConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kRunoutFieldNumber = 1,
    kUtilizationFieldNumber = 2,
  };
  // .kentik.capacity_plan.v202212.Config.RunoutConfig runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_runout() const;
  private:
  bool _internal_has_runout() const;
  public:
  void clear_runout();
  const ::kentik::capacity_plan::v202212::Config_RunoutConfig& runout() const;
  ::kentik::capacity_plan::v202212::Config_RunoutConfig* release_runout();
  ::kentik::capacity_plan::v202212::Config_RunoutConfig* mutable_runout();
  void set_allocated_runout(::kentik::capacity_plan::v202212::Config_RunoutConfig* runout);
  private:
  const ::kentik::capacity_plan::v202212::Config_RunoutConfig& _internal_runout() const;
  ::kentik::capacity_plan::v202212::Config_RunoutConfig* _internal_mutable_runout();
  public:
  void unsafe_arena_set_allocated_runout(
      ::kentik::capacity_plan::v202212::Config_RunoutConfig* runout);
  ::kentik::capacity_plan::v202212::Config_RunoutConfig* unsafe_arena_release_runout();

  // .kentik.capacity_plan.v202212.Config.UtilConfig utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_utilization() const;
  private:
  bool _internal_has_utilization() const;
  public:
  void clear_utilization();
  const ::kentik::capacity_plan::v202212::Config_UtilConfig& utilization() const;
  ::kentik::capacity_plan::v202212::Config_UtilConfig* release_utilization();
  ::kentik::capacity_plan::v202212::Config_UtilConfig* mutable_utilization();
  void set_allocated_utilization(::kentik::capacity_plan::v202212::Config_UtilConfig* utilization);
  private:
  const ::kentik::capacity_plan::v202212::Config_UtilConfig& _internal_utilization() const;
  ::kentik::capacity_plan::v202212::Config_UtilConfig* _internal_mutable_utilization();
  public:
  void unsafe_arena_set_allocated_utilization(
      ::kentik::capacity_plan::v202212::Config_UtilConfig* utilization);
  ::kentik::capacity_plan::v202212::Config_UtilConfig* unsafe_arena_release_utilization();

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::capacity_plan::v202212::Config_RunoutConfig* runout_;
  ::kentik::capacity_plan::v202212::Config_UtilConfig* utilization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SummaryStatus_RunoutStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus) */ {
 public:
  inline SummaryStatus_RunoutStatus() : SummaryStatus_RunoutStatus(nullptr) {};
  virtual ~SummaryStatus_RunoutStatus();

  SummaryStatus_RunoutStatus(const SummaryStatus_RunoutStatus& from);
  SummaryStatus_RunoutStatus(SummaryStatus_RunoutStatus&& from) noexcept
    : SummaryStatus_RunoutStatus() {
    *this = ::std::move(from);
  }

  inline SummaryStatus_RunoutStatus& operator=(const SummaryStatus_RunoutStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryStatus_RunoutStatus& operator=(SummaryStatus_RunoutStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryStatus_RunoutStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryStatus_RunoutStatus* internal_default_instance() {
    return reinterpret_cast<const SummaryStatus_RunoutStatus*>(
               &_SummaryStatus_RunoutStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SummaryStatus_RunoutStatus& a, SummaryStatus_RunoutStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryStatus_RunoutStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryStatus_RunoutStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryStatus_RunoutStatus* New() const final {
    return CreateMaybeMessage<SummaryStatus_RunoutStatus>(nullptr);
  }

  SummaryStatus_RunoutStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryStatus_RunoutStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryStatus_RunoutStatus& from);
  void MergeFrom(const SummaryStatus_RunoutStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryStatus_RunoutStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus";
  }
  protected:
  explicit SummaryStatus_RunoutStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kEarliestDateFieldNumber = 2,
  };
  // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint64 earliest_date = 2[json_name = "earliestDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_earliest_date() const;
  private:
  bool _internal_has_earliest_date() const;
  public:
  void clear_earliest_date();
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest_date() const;
  void set_earliest_date(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_earliest_date() const;
  void _internal_set_earliest_date(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest_date_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SummaryStatus_UtilStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus) */ {
 public:
  inline SummaryStatus_UtilStatus() : SummaryStatus_UtilStatus(nullptr) {};
  virtual ~SummaryStatus_UtilStatus();

  SummaryStatus_UtilStatus(const SummaryStatus_UtilStatus& from);
  SummaryStatus_UtilStatus(SummaryStatus_UtilStatus&& from) noexcept
    : SummaryStatus_UtilStatus() {
    *this = ::std::move(from);
  }

  inline SummaryStatus_UtilStatus& operator=(const SummaryStatus_UtilStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryStatus_UtilStatus& operator=(SummaryStatus_UtilStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryStatus_UtilStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryStatus_UtilStatus* internal_default_instance() {
    return reinterpret_cast<const SummaryStatus_UtilStatus*>(
               &_SummaryStatus_UtilStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SummaryStatus_UtilStatus& a, SummaryStatus_UtilStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryStatus_UtilStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryStatus_UtilStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryStatus_UtilStatus* New() const final {
    return CreateMaybeMessage<SummaryStatus_UtilStatus>(nullptr);
  }

  SummaryStatus_UtilStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryStatus_UtilStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryStatus_UtilStatus& from);
  void MergeFrom(const SummaryStatus_UtilStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryStatus_UtilStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.SummaryStatus.UtilStatus";
  }
  protected:
  explicit SummaryStatus_UtilStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kHighestPctFieldNumber = 2,
  };
  // string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint32 highest_pct = 2[json_name = "highestPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_highest_pct() const;
  private:
  bool _internal_has_highest_pct() const;
  public:
  void clear_highest_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 highest_pct() const;
  void set_highest_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_highest_pct() const;
  void _internal_set_highest_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 highest_pct_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SummaryStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.SummaryStatus) */ {
 public:
  inline SummaryStatus() : SummaryStatus(nullptr) {};
  virtual ~SummaryStatus();

  SummaryStatus(const SummaryStatus& from);
  SummaryStatus(SummaryStatus&& from) noexcept
    : SummaryStatus() {
    *this = ::std::move(from);
  }

  inline SummaryStatus& operator=(const SummaryStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryStatus& operator=(SummaryStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryStatus* internal_default_instance() {
    return reinterpret_cast<const SummaryStatus*>(
               &_SummaryStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SummaryStatus& a, SummaryStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryStatus* New() const final {
    return CreateMaybeMessage<SummaryStatus>(nullptr);
  }

  SummaryStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryStatus& from);
  void MergeFrom(const SummaryStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.SummaryStatus";
  }
  protected:
  explicit SummaryStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SummaryStatus_RunoutStatus RunoutStatus;
  typedef SummaryStatus_UtilStatus UtilStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kRunoutFieldNumber = 1,
    kUtilizationFieldNumber = 2,
  };
  // .kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_runout() const;
  private:
  bool _internal_has_runout() const;
  public:
  void clear_runout();
  const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus& runout() const;
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* release_runout();
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* mutable_runout();
  void set_allocated_runout(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* runout);
  private:
  const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus& _internal_runout() const;
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* _internal_mutable_runout();
  public:
  void unsafe_arena_set_allocated_runout(
      ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* runout);
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* unsafe_arena_release_runout();

  // .kentik.capacity_plan.v202212.SummaryStatus.UtilStatus utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_utilization() const;
  private:
  bool _internal_has_utilization() const;
  public:
  void clear_utilization();
  const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus& utilization() const;
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* release_utilization();
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* mutable_utilization();
  void set_allocated_utilization(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* utilization);
  private:
  const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus& _internal_utilization() const;
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* _internal_mutable_utilization();
  public:
  void unsafe_arena_set_allocated_utilization(
      ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* utilization);
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* unsafe_arena_release_utilization();

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.SummaryStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* runout_;
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* utilization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CapacitySummary_InterfacesDetail_StatusDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail) */ {
 public:
  inline CapacitySummary_InterfacesDetail_StatusDetail() : CapacitySummary_InterfacesDetail_StatusDetail(nullptr) {};
  virtual ~CapacitySummary_InterfacesDetail_StatusDetail();

  CapacitySummary_InterfacesDetail_StatusDetail(const CapacitySummary_InterfacesDetail_StatusDetail& from);
  CapacitySummary_InterfacesDetail_StatusDetail(CapacitySummary_InterfacesDetail_StatusDetail&& from) noexcept
    : CapacitySummary_InterfacesDetail_StatusDetail() {
    *this = ::std::move(from);
  }

  inline CapacitySummary_InterfacesDetail_StatusDetail& operator=(const CapacitySummary_InterfacesDetail_StatusDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacitySummary_InterfacesDetail_StatusDetail& operator=(CapacitySummary_InterfacesDetail_StatusDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapacitySummary_InterfacesDetail_StatusDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapacitySummary_InterfacesDetail_StatusDetail* internal_default_instance() {
    return reinterpret_cast<const CapacitySummary_InterfacesDetail_StatusDetail*>(
               &_CapacitySummary_InterfacesDetail_StatusDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CapacitySummary_InterfacesDetail_StatusDetail& a, CapacitySummary_InterfacesDetail_StatusDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacitySummary_InterfacesDetail_StatusDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacitySummary_InterfacesDetail_StatusDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapacitySummary_InterfacesDetail_StatusDetail* New() const final {
    return CreateMaybeMessage<CapacitySummary_InterfacesDetail_StatusDetail>(nullptr);
  }

  CapacitySummary_InterfacesDetail_StatusDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapacitySummary_InterfacesDetail_StatusDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapacitySummary_InterfacesDetail_StatusDetail& from);
  void MergeFrom(const CapacitySummary_InterfacesDetail_StatusDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacitySummary_InterfacesDetail_StatusDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail";
  }
  protected:
  explicit CapacitySummary_InterfacesDetail_StatusDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpsFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint64 bps = 1[json_name = "bps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_bps() const;
  private:
  bool _internal_has_bps() const;
  public:
  void clear_bps();
  ::PROTOBUF_NAMESPACE_ID::uint64 bps() const;
  void set_bps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bps() const;
  void _internal_set_bps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 count = 2[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CapacitySummary_InterfacesDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail) */ {
 public:
  inline CapacitySummary_InterfacesDetail() : CapacitySummary_InterfacesDetail(nullptr) {};
  virtual ~CapacitySummary_InterfacesDetail();

  CapacitySummary_InterfacesDetail(const CapacitySummary_InterfacesDetail& from);
  CapacitySummary_InterfacesDetail(CapacitySummary_InterfacesDetail&& from) noexcept
    : CapacitySummary_InterfacesDetail() {
    *this = ::std::move(from);
  }

  inline CapacitySummary_InterfacesDetail& operator=(const CapacitySummary_InterfacesDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacitySummary_InterfacesDetail& operator=(CapacitySummary_InterfacesDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapacitySummary_InterfacesDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapacitySummary_InterfacesDetail* internal_default_instance() {
    return reinterpret_cast<const CapacitySummary_InterfacesDetail*>(
               &_CapacitySummary_InterfacesDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CapacitySummary_InterfacesDetail& a, CapacitySummary_InterfacesDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacitySummary_InterfacesDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacitySummary_InterfacesDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapacitySummary_InterfacesDetail* New() const final {
    return CreateMaybeMessage<CapacitySummary_InterfacesDetail>(nullptr);
  }

  CapacitySummary_InterfacesDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapacitySummary_InterfacesDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapacitySummary_InterfacesDetail& from);
  void MergeFrom(const CapacitySummary_InterfacesDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacitySummary_InterfacesDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail";
  }
  protected:
  explicit CapacitySummary_InterfacesDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CapacitySummary_InterfacesDetail_StatusDetail StatusDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kHealthyFieldNumber = 3,
    kWarningFieldNumber = 4,
    kCriticalFieldNumber = 5,
    kTotalCapacityBpsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail healthy = 3[json_name = "healthy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_healthy() const;
  private:
  bool _internal_has_healthy() const;
  public:
  void clear_healthy();
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& healthy() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* release_healthy();
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* mutable_healthy();
  void set_allocated_healthy(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* healthy);
  private:
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& _internal_healthy() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* _internal_mutable_healthy();
  public:
  void unsafe_arena_set_allocated_healthy(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* healthy);
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* unsafe_arena_release_healthy();

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail warning = 4[json_name = "warning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_warning() const;
  private:
  bool _internal_has_warning() const;
  public:
  void clear_warning();
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& warning() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* release_warning();
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* mutable_warning();
  void set_allocated_warning(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* warning);
  private:
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& _internal_warning() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* _internal_mutable_warning();
  public:
  void unsafe_arena_set_allocated_warning(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* warning);
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* unsafe_arena_release_warning();

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail critical = 5[json_name = "critical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_critical() const;
  private:
  bool _internal_has_critical() const;
  public:
  void clear_critical();
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& critical() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* release_critical();
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* mutable_critical();
  void set_allocated_critical(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* critical);
  private:
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& _internal_critical() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* _internal_mutable_critical();
  public:
  void unsafe_arena_set_allocated_critical(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* critical);
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* unsafe_arena_release_critical();

  // uint64 total_capacity_bps = 2[json_name = "totalCapacityBps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_total_capacity_bps() const;
  private:
  bool _internal_has_total_capacity_bps() const;
  public:
  void clear_total_capacity_bps();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_capacity_bps() const;
  void set_total_capacity_bps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_capacity_bps() const;
  void _internal_set_total_capacity_bps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 total_count = 1[json_name = "totalCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_total_count() const;
  private:
  bool _internal_has_total_count() const;
  public:
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* healthy_;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* warning_;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* critical_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_capacity_bps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CapacitySummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.CapacitySummary) */ {
 public:
  inline CapacitySummary() : CapacitySummary(nullptr) {};
  virtual ~CapacitySummary();

  CapacitySummary(const CapacitySummary& from);
  CapacitySummary(CapacitySummary&& from) noexcept
    : CapacitySummary() {
    *this = ::std::move(from);
  }

  inline CapacitySummary& operator=(const CapacitySummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacitySummary& operator=(CapacitySummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapacitySummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapacitySummary* internal_default_instance() {
    return reinterpret_cast<const CapacitySummary*>(
               &_CapacitySummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CapacitySummary& a, CapacitySummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacitySummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacitySummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapacitySummary* New() const final {
    return CreateMaybeMessage<CapacitySummary>(nullptr);
  }

  CapacitySummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapacitySummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapacitySummary& from);
  void MergeFrom(const CapacitySummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacitySummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.CapacitySummary";
  }
  protected:
  explicit CapacitySummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CapacitySummary_InterfacesDetail InterfacesDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kStatusFieldNumber = 4,
    kInterfacesFieldNumber = 5,
    kConfigFieldNumber = 6,
    kSummaryStatusFieldNumber = 7,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_interfaces() const;
  private:
  bool _internal_has_interfaces() const;
  public:
  void clear_interfaces();
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail& interfaces() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* release_interfaces();
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* mutable_interfaces();
  void set_allocated_interfaces(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* interfaces);
  private:
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail& _internal_interfaces() const;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* _internal_mutable_interfaces();
  public:
  void unsafe_arena_set_allocated_interfaces(
      ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* interfaces);
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* unsafe_arena_release_interfaces();

  // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::kentik::capacity_plan::v202212::Config& config() const;
  ::kentik::capacity_plan::v202212::Config* release_config();
  ::kentik::capacity_plan::v202212::Config* mutable_config();
  void set_allocated_config(::kentik::capacity_plan::v202212::Config* config);
  private:
  const ::kentik::capacity_plan::v202212::Config& _internal_config() const;
  ::kentik::capacity_plan::v202212::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::kentik::capacity_plan::v202212::Config* config);
  ::kentik::capacity_plan::v202212::Config* unsafe_arena_release_config();

  // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_summary_status() const;
  private:
  bool _internal_has_summary_status() const;
  public:
  void clear_summary_status();
  const ::kentik::capacity_plan::v202212::SummaryStatus& summary_status() const;
  ::kentik::capacity_plan::v202212::SummaryStatus* release_summary_status();
  ::kentik::capacity_plan::v202212::SummaryStatus* mutable_summary_status();
  void set_allocated_summary_status(::kentik::capacity_plan::v202212::SummaryStatus* summary_status);
  private:
  const ::kentik::capacity_plan::v202212::SummaryStatus& _internal_summary_status() const;
  ::kentik::capacity_plan::v202212::SummaryStatus* _internal_mutable_summary_status();
  public:
  void unsafe_arena_set_allocated_summary_status(
      ::kentik::capacity_plan::v202212::SummaryStatus* summary_status);
  ::kentik::capacity_plan::v202212::SummaryStatus* unsafe_arena_release_summary_status();

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.CapacitySummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* interfaces_;
  ::kentik::capacity_plan::v202212::Config* config_;
  ::kentik::capacity_plan::v202212::SummaryStatus* summary_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CapacityPlan_InterfaceDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail) */ {
 public:
  inline CapacityPlan_InterfaceDetail() : CapacityPlan_InterfaceDetail(nullptr) {};
  virtual ~CapacityPlan_InterfaceDetail();

  CapacityPlan_InterfaceDetail(const CapacityPlan_InterfaceDetail& from);
  CapacityPlan_InterfaceDetail(CapacityPlan_InterfaceDetail&& from) noexcept
    : CapacityPlan_InterfaceDetail() {
    *this = ::std::move(from);
  }

  inline CapacityPlan_InterfaceDetail& operator=(const CapacityPlan_InterfaceDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacityPlan_InterfaceDetail& operator=(CapacityPlan_InterfaceDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapacityPlan_InterfaceDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapacityPlan_InterfaceDetail* internal_default_instance() {
    return reinterpret_cast<const CapacityPlan_InterfaceDetail*>(
               &_CapacityPlan_InterfaceDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CapacityPlan_InterfaceDetail& a, CapacityPlan_InterfaceDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacityPlan_InterfaceDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacityPlan_InterfaceDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapacityPlan_InterfaceDetail* New() const final {
    return CreateMaybeMessage<CapacityPlan_InterfaceDetail>(nullptr);
  }

  CapacityPlan_InterfaceDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapacityPlan_InterfaceDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapacityPlan_InterfaceDetail& from);
  void MergeFrom(const CapacityPlan_InterfaceDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacityPlan_InterfaceDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail";
  }
  protected:
  explicit CapacityPlan_InterfaceDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kIntfNameFieldNumber = 2,
    kIntfDescriptionFieldNumber = 3,
    kIntfCapacityFieldNumber = 4,
    kNetworkBoundaryFieldNumber = 5,
    kConnTypeFieldNumber = 6,
    kProviderFieldNumber = 7,
    kUtilStatusFieldNumber = 8,
    kUtilOutMbpsFieldNumber = 9,
    kUtilOutPctFieldNumber = 10,
    kUtilInMbpsFieldNumber = 11,
    kUtilInPctFieldNumber = 12,
    kRunoutStatusFieldNumber = 13,
    kRunoutInDateFieldNumber = 14,
    kRunoutInVariationFieldNumber = 15,
    kRunoutOutDateFieldNumber = 16,
    kRunoutOutVariationFieldNumber = 17,
  };
  // string device_name = 1[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_name(
      std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string intf_name = 2[json_name = "intfName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_intf_name();
  const std::string& intf_name() const;
  void set_intf_name(const std::string& value);
  void set_intf_name(std::string&& value);
  void set_intf_name(const char* value);
  void set_intf_name(const char* value, size_t size);
  std::string* mutable_intf_name();
  std::string* release_intf_name();
  void set_allocated_intf_name(std::string* intf_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_intf_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_intf_name(
      std::string* intf_name);
  private:
  const std::string& _internal_intf_name() const;
  void _internal_set_intf_name(const std::string& value);
  std::string* _internal_mutable_intf_name();
  public:

  // string intf_description = 3[json_name = "intfDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_intf_description();
  const std::string& intf_description() const;
  void set_intf_description(const std::string& value);
  void set_intf_description(std::string&& value);
  void set_intf_description(const char* value);
  void set_intf_description(const char* value, size_t size);
  std::string* mutable_intf_description();
  std::string* release_intf_description();
  void set_allocated_intf_description(std::string* intf_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_intf_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_intf_description(
      std::string* intf_description);
  private:
  const std::string& _internal_intf_description() const;
  void _internal_set_intf_description(const std::string& value);
  std::string* _internal_mutable_intf_description();
  public:

  // string intf_capacity = 4[json_name = "intfCapacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_intf_capacity();
  const std::string& intf_capacity() const;
  void set_intf_capacity(const std::string& value);
  void set_intf_capacity(std::string&& value);
  void set_intf_capacity(const char* value);
  void set_intf_capacity(const char* value, size_t size);
  std::string* mutable_intf_capacity();
  std::string* release_intf_capacity();
  void set_allocated_intf_capacity(std::string* intf_capacity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_intf_capacity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_intf_capacity(
      std::string* intf_capacity);
  private:
  const std::string& _internal_intf_capacity() const;
  void _internal_set_intf_capacity(const std::string& value);
  std::string* _internal_mutable_intf_capacity();
  public:

  // string network_boundary = 5[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_network_boundary();
  const std::string& network_boundary() const;
  void set_network_boundary(const std::string& value);
  void set_network_boundary(std::string&& value);
  void set_network_boundary(const char* value);
  void set_network_boundary(const char* value, size_t size);
  std::string* mutable_network_boundary();
  std::string* release_network_boundary();
  void set_allocated_network_boundary(std::string* network_boundary);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_network_boundary();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_network_boundary(
      std::string* network_boundary);
  private:
  const std::string& _internal_network_boundary() const;
  void _internal_set_network_boundary(const std::string& value);
  std::string* _internal_mutable_network_boundary();
  public:

  // string conn_type = 6[json_name = "connType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_conn_type();
  const std::string& conn_type() const;
  void set_conn_type(const std::string& value);
  void set_conn_type(std::string&& value);
  void set_conn_type(const char* value);
  void set_conn_type(const char* value, size_t size);
  std::string* mutable_conn_type();
  std::string* release_conn_type();
  void set_allocated_conn_type(std::string* conn_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conn_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conn_type(
      std::string* conn_type);
  private:
  const std::string& _internal_conn_type() const;
  void _internal_set_conn_type(const std::string& value);
  std::string* _internal_mutable_conn_type();
  public:

  // string provider = 7[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_provider(
      std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // string util_status = 8[json_name = "utilStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_util_status();
  const std::string& util_status() const;
  void set_util_status(const std::string& value);
  void set_util_status(std::string&& value);
  void set_util_status(const char* value);
  void set_util_status(const char* value, size_t size);
  std::string* mutable_util_status();
  std::string* release_util_status();
  void set_allocated_util_status(std::string* util_status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_util_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_util_status(
      std::string* util_status);
  private:
  const std::string& _internal_util_status() const;
  void _internal_set_util_status(const std::string& value);
  std::string* _internal_mutable_util_status();
  public:

  // string util_out_mbps = 9[json_name = "utilOutMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_util_out_mbps();
  const std::string& util_out_mbps() const;
  void set_util_out_mbps(const std::string& value);
  void set_util_out_mbps(std::string&& value);
  void set_util_out_mbps(const char* value);
  void set_util_out_mbps(const char* value, size_t size);
  std::string* mutable_util_out_mbps();
  std::string* release_util_out_mbps();
  void set_allocated_util_out_mbps(std::string* util_out_mbps);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_util_out_mbps();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_util_out_mbps(
      std::string* util_out_mbps);
  private:
  const std::string& _internal_util_out_mbps() const;
  void _internal_set_util_out_mbps(const std::string& value);
  std::string* _internal_mutable_util_out_mbps();
  public:

  // string util_out_pct = 10[json_name = "utilOutPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_util_out_pct();
  const std::string& util_out_pct() const;
  void set_util_out_pct(const std::string& value);
  void set_util_out_pct(std::string&& value);
  void set_util_out_pct(const char* value);
  void set_util_out_pct(const char* value, size_t size);
  std::string* mutable_util_out_pct();
  std::string* release_util_out_pct();
  void set_allocated_util_out_pct(std::string* util_out_pct);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_util_out_pct();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_util_out_pct(
      std::string* util_out_pct);
  private:
  const std::string& _internal_util_out_pct() const;
  void _internal_set_util_out_pct(const std::string& value);
  std::string* _internal_mutable_util_out_pct();
  public:

  // string util_in_mbps = 11[json_name = "utilInMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_util_in_mbps();
  const std::string& util_in_mbps() const;
  void set_util_in_mbps(const std::string& value);
  void set_util_in_mbps(std::string&& value);
  void set_util_in_mbps(const char* value);
  void set_util_in_mbps(const char* value, size_t size);
  std::string* mutable_util_in_mbps();
  std::string* release_util_in_mbps();
  void set_allocated_util_in_mbps(std::string* util_in_mbps);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_util_in_mbps();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_util_in_mbps(
      std::string* util_in_mbps);
  private:
  const std::string& _internal_util_in_mbps() const;
  void _internal_set_util_in_mbps(const std::string& value);
  std::string* _internal_mutable_util_in_mbps();
  public:

  // string util_in_pct = 12[json_name = "utilInPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_util_in_pct();
  const std::string& util_in_pct() const;
  void set_util_in_pct(const std::string& value);
  void set_util_in_pct(std::string&& value);
  void set_util_in_pct(const char* value);
  void set_util_in_pct(const char* value, size_t size);
  std::string* mutable_util_in_pct();
  std::string* release_util_in_pct();
  void set_allocated_util_in_pct(std::string* util_in_pct);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_util_in_pct();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_util_in_pct(
      std::string* util_in_pct);
  private:
  const std::string& _internal_util_in_pct() const;
  void _internal_set_util_in_pct(const std::string& value);
  std::string* _internal_mutable_util_in_pct();
  public:

  // string runout_status = 13[json_name = "runoutStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_runout_status();
  const std::string& runout_status() const;
  void set_runout_status(const std::string& value);
  void set_runout_status(std::string&& value);
  void set_runout_status(const char* value);
  void set_runout_status(const char* value, size_t size);
  std::string* mutable_runout_status();
  std::string* release_runout_status();
  void set_allocated_runout_status(std::string* runout_status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runout_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runout_status(
      std::string* runout_status);
  private:
  const std::string& _internal_runout_status() const;
  void _internal_set_runout_status(const std::string& value);
  std::string* _internal_mutable_runout_status();
  public:

  // string runout_in_date = 14[json_name = "runoutInDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_runout_in_date();
  const std::string& runout_in_date() const;
  void set_runout_in_date(const std::string& value);
  void set_runout_in_date(std::string&& value);
  void set_runout_in_date(const char* value);
  void set_runout_in_date(const char* value, size_t size);
  std::string* mutable_runout_in_date();
  std::string* release_runout_in_date();
  void set_allocated_runout_in_date(std::string* runout_in_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runout_in_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runout_in_date(
      std::string* runout_in_date);
  private:
  const std::string& _internal_runout_in_date() const;
  void _internal_set_runout_in_date(const std::string& value);
  std::string* _internal_mutable_runout_in_date();
  public:

  // string runout_in_variation = 15[json_name = "runoutInVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_runout_in_variation();
  const std::string& runout_in_variation() const;
  void set_runout_in_variation(const std::string& value);
  void set_runout_in_variation(std::string&& value);
  void set_runout_in_variation(const char* value);
  void set_runout_in_variation(const char* value, size_t size);
  std::string* mutable_runout_in_variation();
  std::string* release_runout_in_variation();
  void set_allocated_runout_in_variation(std::string* runout_in_variation);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runout_in_variation();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runout_in_variation(
      std::string* runout_in_variation);
  private:
  const std::string& _internal_runout_in_variation() const;
  void _internal_set_runout_in_variation(const std::string& value);
  std::string* _internal_mutable_runout_in_variation();
  public:

  // string runout_out_date = 16[json_name = "runoutOutDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_runout_out_date();
  const std::string& runout_out_date() const;
  void set_runout_out_date(const std::string& value);
  void set_runout_out_date(std::string&& value);
  void set_runout_out_date(const char* value);
  void set_runout_out_date(const char* value, size_t size);
  std::string* mutable_runout_out_date();
  std::string* release_runout_out_date();
  void set_allocated_runout_out_date(std::string* runout_out_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runout_out_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runout_out_date(
      std::string* runout_out_date);
  private:
  const std::string& _internal_runout_out_date() const;
  void _internal_set_runout_out_date(const std::string& value);
  std::string* _internal_mutable_runout_out_date();
  public:

  // string runout_out_variation = 17[json_name = "runoutOutVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_runout_out_variation();
  const std::string& runout_out_variation() const;
  void set_runout_out_variation(const std::string& value);
  void set_runout_out_variation(std::string&& value);
  void set_runout_out_variation(const char* value);
  void set_runout_out_variation(const char* value, size_t size);
  std::string* mutable_runout_out_variation();
  std::string* release_runout_out_variation();
  void set_allocated_runout_out_variation(std::string* runout_out_variation);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runout_out_variation();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runout_out_variation(
      std::string* runout_out_variation);
  private:
  const std::string& _internal_runout_out_variation() const;
  void _internal_set_runout_out_variation(const std::string& value);
  std::string* _internal_mutable_runout_out_variation();
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intf_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intf_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intf_capacity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conn_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr util_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr util_out_mbps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr util_out_pct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr util_in_mbps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr util_in_pct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runout_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runout_in_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runout_in_variation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runout_out_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runout_out_variation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CapacityPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.CapacityPlan) */ {
 public:
  inline CapacityPlan() : CapacityPlan(nullptr) {};
  virtual ~CapacityPlan();

  CapacityPlan(const CapacityPlan& from);
  CapacityPlan(CapacityPlan&& from) noexcept
    : CapacityPlan() {
    *this = ::std::move(from);
  }

  inline CapacityPlan& operator=(const CapacityPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapacityPlan& operator=(CapacityPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapacityPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapacityPlan* internal_default_instance() {
    return reinterpret_cast<const CapacityPlan*>(
               &_CapacityPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CapacityPlan& a, CapacityPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(CapacityPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapacityPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapacityPlan* New() const final {
    return CreateMaybeMessage<CapacityPlan>(nullptr);
  }

  CapacityPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapacityPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapacityPlan& from);
  void MergeFrom(const CapacityPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapacityPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.CapacityPlan";
  }
  protected:
  explicit CapacityPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CapacityPlan_InterfaceDetail InterfaceDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 5,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kStatusFieldNumber = 4,
    kConfigFieldNumber = 6,
    kSummaryStatusFieldNumber = 7,
  };
  // repeated .kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail >*
      mutable_interfaces();
  private:
  const ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail& _internal_interfaces(int index) const;
  ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* _internal_add_interfaces();
  public:
  const ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail& interfaces(int index) const;
  ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail >&
      interfaces() const;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::kentik::capacity_plan::v202212::Config& config() const;
  ::kentik::capacity_plan::v202212::Config* release_config();
  ::kentik::capacity_plan::v202212::Config* mutable_config();
  void set_allocated_config(::kentik::capacity_plan::v202212::Config* config);
  private:
  const ::kentik::capacity_plan::v202212::Config& _internal_config() const;
  ::kentik::capacity_plan::v202212::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::kentik::capacity_plan::v202212::Config* config);
  ::kentik::capacity_plan::v202212::Config* unsafe_arena_release_config();

  // .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_summary_status() const;
  private:
  bool _internal_has_summary_status() const;
  public:
  void clear_summary_status();
  const ::kentik::capacity_plan::v202212::SummaryStatus& summary_status() const;
  ::kentik::capacity_plan::v202212::SummaryStatus* release_summary_status();
  ::kentik::capacity_plan::v202212::SummaryStatus* mutable_summary_status();
  void set_allocated_summary_status(::kentik::capacity_plan::v202212::SummaryStatus* summary_status);
  private:
  const ::kentik::capacity_plan::v202212::SummaryStatus& _internal_summary_status() const;
  ::kentik::capacity_plan::v202212::SummaryStatus* _internal_mutable_summary_status();
  public:
  void unsafe_arena_set_allocated_summary_status(
      ::kentik::capacity_plan::v202212::SummaryStatus* summary_status);
  ::kentik::capacity_plan::v202212::SummaryStatus* unsafe_arena_release_summary_status();

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.CapacityPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail > interfaces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::kentik::capacity_plan::v202212::Config* config_;
  ::kentik::capacity_plan::v202212::SummaryStatus* summary_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ListCapacitySummariesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.ListCapacitySummariesRequest) */ {
 public:
  inline ListCapacitySummariesRequest() : ListCapacitySummariesRequest(nullptr) {};
  virtual ~ListCapacitySummariesRequest();

  ListCapacitySummariesRequest(const ListCapacitySummariesRequest& from);
  ListCapacitySummariesRequest(ListCapacitySummariesRequest&& from) noexcept
    : ListCapacitySummariesRequest() {
    *this = ::std::move(from);
  }

  inline ListCapacitySummariesRequest& operator=(const ListCapacitySummariesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCapacitySummariesRequest& operator=(ListCapacitySummariesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCapacitySummariesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCapacitySummariesRequest* internal_default_instance() {
    return reinterpret_cast<const ListCapacitySummariesRequest*>(
               &_ListCapacitySummariesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListCapacitySummariesRequest& a, ListCapacitySummariesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCapacitySummariesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCapacitySummariesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCapacitySummariesRequest* New() const final {
    return CreateMaybeMessage<ListCapacitySummariesRequest>(nullptr);
  }

  ListCapacitySummariesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCapacitySummariesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCapacitySummariesRequest& from);
  void MergeFrom(const ListCapacitySummariesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCapacitySummariesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.ListCapacitySummariesRequest";
  }
  protected:
  explicit ListCapacitySummariesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.ListCapacitySummariesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ListCapacitySummariesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.ListCapacitySummariesResponse) */ {
 public:
  inline ListCapacitySummariesResponse() : ListCapacitySummariesResponse(nullptr) {};
  virtual ~ListCapacitySummariesResponse();

  ListCapacitySummariesResponse(const ListCapacitySummariesResponse& from);
  ListCapacitySummariesResponse(ListCapacitySummariesResponse&& from) noexcept
    : ListCapacitySummariesResponse() {
    *this = ::std::move(from);
  }

  inline ListCapacitySummariesResponse& operator=(const ListCapacitySummariesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCapacitySummariesResponse& operator=(ListCapacitySummariesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCapacitySummariesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCapacitySummariesResponse* internal_default_instance() {
    return reinterpret_cast<const ListCapacitySummariesResponse*>(
               &_ListCapacitySummariesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListCapacitySummariesResponse& a, ListCapacitySummariesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCapacitySummariesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCapacitySummariesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCapacitySummariesResponse* New() const final {
    return CreateMaybeMessage<ListCapacitySummariesResponse>(nullptr);
  }

  ListCapacitySummariesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCapacitySummariesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCapacitySummariesResponse& from);
  void MergeFrom(const ListCapacitySummariesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCapacitySummariesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.ListCapacitySummariesResponse";
  }
  protected:
  explicit ListCapacitySummariesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int capacity_size() const;
  private:
  int _internal_capacity_size() const;
  public:
  void clear_capacity();
  ::kentik::capacity_plan::v202212::CapacitySummary* mutable_capacity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacitySummary >*
      mutable_capacity();
  private:
  const ::kentik::capacity_plan::v202212::CapacitySummary& _internal_capacity(int index) const;
  ::kentik::capacity_plan::v202212::CapacitySummary* _internal_add_capacity();
  public:
  const ::kentik::capacity_plan::v202212::CapacitySummary& capacity(int index) const;
  ::kentik::capacity_plan::v202212::CapacitySummary* add_capacity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacitySummary >&
      capacity() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.ListCapacitySummariesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacitySummary > capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class GetCapacitySummaryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.GetCapacitySummaryRequest) */ {
 public:
  inline GetCapacitySummaryRequest() : GetCapacitySummaryRequest(nullptr) {};
  virtual ~GetCapacitySummaryRequest();

  GetCapacitySummaryRequest(const GetCapacitySummaryRequest& from);
  GetCapacitySummaryRequest(GetCapacitySummaryRequest&& from) noexcept
    : GetCapacitySummaryRequest() {
    *this = ::std::move(from);
  }

  inline GetCapacitySummaryRequest& operator=(const GetCapacitySummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCapacitySummaryRequest& operator=(GetCapacitySummaryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCapacitySummaryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCapacitySummaryRequest* internal_default_instance() {
    return reinterpret_cast<const GetCapacitySummaryRequest*>(
               &_GetCapacitySummaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetCapacitySummaryRequest& a, GetCapacitySummaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCapacitySummaryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCapacitySummaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCapacitySummaryRequest* New() const final {
    return CreateMaybeMessage<GetCapacitySummaryRequest>(nullptr);
  }

  GetCapacitySummaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCapacitySummaryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCapacitySummaryRequest& from);
  void MergeFrom(const GetCapacitySummaryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCapacitySummaryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.GetCapacitySummaryRequest";
  }
  protected:
  explicit GetCapacitySummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.GetCapacitySummaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class GetCapacitySummaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.GetCapacitySummaryResponse) */ {
 public:
  inline GetCapacitySummaryResponse() : GetCapacitySummaryResponse(nullptr) {};
  virtual ~GetCapacitySummaryResponse();

  GetCapacitySummaryResponse(const GetCapacitySummaryResponse& from);
  GetCapacitySummaryResponse(GetCapacitySummaryResponse&& from) noexcept
    : GetCapacitySummaryResponse() {
    *this = ::std::move(from);
  }

  inline GetCapacitySummaryResponse& operator=(const GetCapacitySummaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCapacitySummaryResponse& operator=(GetCapacitySummaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCapacitySummaryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCapacitySummaryResponse* internal_default_instance() {
    return reinterpret_cast<const GetCapacitySummaryResponse*>(
               &_GetCapacitySummaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetCapacitySummaryResponse& a, GetCapacitySummaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCapacitySummaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCapacitySummaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCapacitySummaryResponse* New() const final {
    return CreateMaybeMessage<GetCapacitySummaryResponse>(nullptr);
  }

  GetCapacitySummaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCapacitySummaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCapacitySummaryResponse& from);
  void MergeFrom(const GetCapacitySummaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCapacitySummaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.GetCapacitySummaryResponse";
  }
  protected:
  explicit GetCapacitySummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
  };
  // .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::kentik::capacity_plan::v202212::CapacitySummary& capacity() const;
  ::kentik::capacity_plan::v202212::CapacitySummary* release_capacity();
  ::kentik::capacity_plan::v202212::CapacitySummary* mutable_capacity();
  void set_allocated_capacity(::kentik::capacity_plan::v202212::CapacitySummary* capacity);
  private:
  const ::kentik::capacity_plan::v202212::CapacitySummary& _internal_capacity() const;
  ::kentik::capacity_plan::v202212::CapacitySummary* _internal_mutable_capacity();
  public:
  void unsafe_arena_set_allocated_capacity(
      ::kentik::capacity_plan::v202212::CapacitySummary* capacity);
  ::kentik::capacity_plan::v202212::CapacitySummary* unsafe_arena_release_capacity();

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.GetCapacitySummaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::capacity_plan::v202212::CapacitySummary* capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ListCapacityPlansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.ListCapacityPlansRequest) */ {
 public:
  inline ListCapacityPlansRequest() : ListCapacityPlansRequest(nullptr) {};
  virtual ~ListCapacityPlansRequest();

  ListCapacityPlansRequest(const ListCapacityPlansRequest& from);
  ListCapacityPlansRequest(ListCapacityPlansRequest&& from) noexcept
    : ListCapacityPlansRequest() {
    *this = ::std::move(from);
  }

  inline ListCapacityPlansRequest& operator=(const ListCapacityPlansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCapacityPlansRequest& operator=(ListCapacityPlansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCapacityPlansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCapacityPlansRequest* internal_default_instance() {
    return reinterpret_cast<const ListCapacityPlansRequest*>(
               &_ListCapacityPlansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListCapacityPlansRequest& a, ListCapacityPlansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCapacityPlansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCapacityPlansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCapacityPlansRequest* New() const final {
    return CreateMaybeMessage<ListCapacityPlansRequest>(nullptr);
  }

  ListCapacityPlansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCapacityPlansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCapacityPlansRequest& from);
  void MergeFrom(const ListCapacityPlansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCapacityPlansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.ListCapacityPlansRequest";
  }
  protected:
  explicit ListCapacityPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.ListCapacityPlansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ListCapacityPlansResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.ListCapacityPlansResponse) */ {
 public:
  inline ListCapacityPlansResponse() : ListCapacityPlansResponse(nullptr) {};
  virtual ~ListCapacityPlansResponse();

  ListCapacityPlansResponse(const ListCapacityPlansResponse& from);
  ListCapacityPlansResponse(ListCapacityPlansResponse&& from) noexcept
    : ListCapacityPlansResponse() {
    *this = ::std::move(from);
  }

  inline ListCapacityPlansResponse& operator=(const ListCapacityPlansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCapacityPlansResponse& operator=(ListCapacityPlansResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCapacityPlansResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCapacityPlansResponse* internal_default_instance() {
    return reinterpret_cast<const ListCapacityPlansResponse*>(
               &_ListCapacityPlansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListCapacityPlansResponse& a, ListCapacityPlansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCapacityPlansResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCapacityPlansResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCapacityPlansResponse* New() const final {
    return CreateMaybeMessage<ListCapacityPlansResponse>(nullptr);
  }

  ListCapacityPlansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCapacityPlansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCapacityPlansResponse& from);
  void MergeFrom(const ListCapacityPlansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCapacityPlansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.ListCapacityPlansResponse";
  }
  protected:
  explicit ListCapacityPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int capacity_size() const;
  private:
  int _internal_capacity_size() const;
  public:
  void clear_capacity();
  ::kentik::capacity_plan::v202212::CapacityPlan* mutable_capacity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan >*
      mutable_capacity();
  private:
  const ::kentik::capacity_plan::v202212::CapacityPlan& _internal_capacity(int index) const;
  ::kentik::capacity_plan::v202212::CapacityPlan* _internal_add_capacity();
  public:
  const ::kentik::capacity_plan::v202212::CapacityPlan& capacity(int index) const;
  ::kentik::capacity_plan::v202212::CapacityPlan* add_capacity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan >&
      capacity() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.ListCapacityPlansResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan > capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class GetCapacityPlanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.GetCapacityPlanRequest) */ {
 public:
  inline GetCapacityPlanRequest() : GetCapacityPlanRequest(nullptr) {};
  virtual ~GetCapacityPlanRequest();

  GetCapacityPlanRequest(const GetCapacityPlanRequest& from);
  GetCapacityPlanRequest(GetCapacityPlanRequest&& from) noexcept
    : GetCapacityPlanRequest() {
    *this = ::std::move(from);
  }

  inline GetCapacityPlanRequest& operator=(const GetCapacityPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCapacityPlanRequest& operator=(GetCapacityPlanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCapacityPlanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCapacityPlanRequest* internal_default_instance() {
    return reinterpret_cast<const GetCapacityPlanRequest*>(
               &_GetCapacityPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetCapacityPlanRequest& a, GetCapacityPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCapacityPlanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCapacityPlanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCapacityPlanRequest* New() const final {
    return CreateMaybeMessage<GetCapacityPlanRequest>(nullptr);
  }

  GetCapacityPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCapacityPlanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCapacityPlanRequest& from);
  void MergeFrom(const GetCapacityPlanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCapacityPlanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.GetCapacityPlanRequest";
  }
  protected:
  explicit GetCapacityPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.GetCapacityPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// -------------------------------------------------------------------

class GetCapacityPlanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.capacity_plan.v202212.GetCapacityPlanResponse) */ {
 public:
  inline GetCapacityPlanResponse() : GetCapacityPlanResponse(nullptr) {};
  virtual ~GetCapacityPlanResponse();

  GetCapacityPlanResponse(const GetCapacityPlanResponse& from);
  GetCapacityPlanResponse(GetCapacityPlanResponse&& from) noexcept
    : GetCapacityPlanResponse() {
    *this = ::std::move(from);
  }

  inline GetCapacityPlanResponse& operator=(const GetCapacityPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCapacityPlanResponse& operator=(GetCapacityPlanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCapacityPlanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCapacityPlanResponse* internal_default_instance() {
    return reinterpret_cast<const GetCapacityPlanResponse*>(
               &_GetCapacityPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetCapacityPlanResponse& a, GetCapacityPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCapacityPlanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCapacityPlanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCapacityPlanResponse* New() const final {
    return CreateMaybeMessage<GetCapacityPlanResponse>(nullptr);
  }

  GetCapacityPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCapacityPlanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCapacityPlanResponse& from);
  void MergeFrom(const GetCapacityPlanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCapacityPlanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.capacity_plan.v202212.GetCapacityPlanResponse";
  }
  protected:
  explicit GetCapacityPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto);
    return ::descriptor_table_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
  };
  // .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::kentik::capacity_plan::v202212::CapacityPlan& capacity() const;
  ::kentik::capacity_plan::v202212::CapacityPlan* release_capacity();
  ::kentik::capacity_plan::v202212::CapacityPlan* mutable_capacity();
  void set_allocated_capacity(::kentik::capacity_plan::v202212::CapacityPlan* capacity);
  private:
  const ::kentik::capacity_plan::v202212::CapacityPlan& _internal_capacity() const;
  ::kentik::capacity_plan::v202212::CapacityPlan* _internal_mutable_capacity();
  public:
  void unsafe_arena_set_allocated_capacity(
      ::kentik::capacity_plan::v202212::CapacityPlan* capacity);
  ::kentik::capacity_plan::v202212::CapacityPlan* unsafe_arena_release_capacity();

  // @@protoc_insertion_point(class_scope:kentik.capacity_plan.v202212.GetCapacityPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::capacity_plan::v202212::CapacityPlan* capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config_RunoutConfig

// string strategy = 1[json_name = "strategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Config_RunoutConfig::clear_strategy() {
  strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Config_RunoutConfig::strategy() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
  return _internal_strategy();
}
inline void Config_RunoutConfig::set_strategy(const std::string& value) {
  _internal_set_strategy(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
}
inline std::string* Config_RunoutConfig::mutable_strategy() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
  return _internal_mutable_strategy();
}
inline const std::string& Config_RunoutConfig::_internal_strategy() const {
  return strategy_.Get();
}
inline void Config_RunoutConfig::_internal_set_strategy(const std::string& value) {
  
  strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Config_RunoutConfig::set_strategy(std::string&& value) {
  
  strategy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
}
inline void Config_RunoutConfig::set_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
}
inline void Config_RunoutConfig::set_strategy(const char* value,
    size_t size) {
  
  strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
}
inline std::string* Config_RunoutConfig::_internal_mutable_strategy() {
  
  return strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Config_RunoutConfig::release_strategy() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
  return strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config_RunoutConfig::set_allocated_strategy(std::string* strategy) {
  if (strategy != nullptr) {
    
  } else {
    
  }
  strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
}
inline std::string* Config_RunoutConfig::unsafe_arena_release_strategy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return strategy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Config_RunoutConfig::unsafe_arena_set_allocated_strategy(
    std::string* strategy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (strategy != nullptr) {
    
  } else {
    
  }
  strategy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      strategy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.Config.RunoutConfig.strategy)
}

// uint32 warn_qty = 2[json_name = "warnQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Config_RunoutConfig::_internal_has_warn_qty() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config_RunoutConfig::has_warn_qty() const {
  return _internal_has_warn_qty();
}
inline void Config_RunoutConfig::clear_warn_qty() {
  warn_qty_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_RunoutConfig::_internal_warn_qty() const {
  return warn_qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_RunoutConfig::warn_qty() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.RunoutConfig.warn_qty)
  return _internal_warn_qty();
}
inline void Config_RunoutConfig::_internal_set_warn_qty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  warn_qty_ = value;
}
inline void Config_RunoutConfig::set_warn_qty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_warn_qty(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.Config.RunoutConfig.warn_qty)
}

// uint32 crit_qty = 3[json_name = "critQty", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Config_RunoutConfig::_internal_has_crit_qty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config_RunoutConfig::has_crit_qty() const {
  return _internal_has_crit_qty();
}
inline void Config_RunoutConfig::clear_crit_qty() {
  crit_qty_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_RunoutConfig::_internal_crit_qty() const {
  return crit_qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_RunoutConfig::crit_qty() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.RunoutConfig.crit_qty)
  return _internal_crit_qty();
}
inline void Config_RunoutConfig::_internal_set_crit_qty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  crit_qty_ = value;
}
inline void Config_RunoutConfig::set_crit_qty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crit_qty(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.Config.RunoutConfig.crit_qty)
}

// -------------------------------------------------------------------

// Config_UtilConfig

// string aggregate = 1[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Config_UtilConfig::clear_aggregate() {
  aggregate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Config_UtilConfig::aggregate() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
  return _internal_aggregate();
}
inline void Config_UtilConfig::set_aggregate(const std::string& value) {
  _internal_set_aggregate(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
}
inline std::string* Config_UtilConfig::mutable_aggregate() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
  return _internal_mutable_aggregate();
}
inline const std::string& Config_UtilConfig::_internal_aggregate() const {
  return aggregate_.Get();
}
inline void Config_UtilConfig::_internal_set_aggregate(const std::string& value) {
  
  aggregate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Config_UtilConfig::set_aggregate(std::string&& value) {
  
  aggregate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
}
inline void Config_UtilConfig::set_aggregate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aggregate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
}
inline void Config_UtilConfig::set_aggregate(const char* value,
    size_t size) {
  
  aggregate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
}
inline std::string* Config_UtilConfig::_internal_mutable_aggregate() {
  
  return aggregate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Config_UtilConfig::release_aggregate() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
  return aggregate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config_UtilConfig::set_allocated_aggregate(std::string* aggregate) {
  if (aggregate != nullptr) {
    
  } else {
    
  }
  aggregate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aggregate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
}
inline std::string* Config_UtilConfig::unsafe_arena_release_aggregate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aggregate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Config_UtilConfig::unsafe_arena_set_allocated_aggregate(
    std::string* aggregate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aggregate != nullptr) {
    
  } else {
    
  }
  aggregate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aggregate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.Config.UtilConfig.aggregate)
}

// uint32 warn_pct = 2[json_name = "warnPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Config_UtilConfig::_internal_has_warn_pct() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config_UtilConfig::has_warn_pct() const {
  return _internal_has_warn_pct();
}
inline void Config_UtilConfig::clear_warn_pct() {
  warn_pct_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_UtilConfig::_internal_warn_pct() const {
  return warn_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_UtilConfig::warn_pct() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.UtilConfig.warn_pct)
  return _internal_warn_pct();
}
inline void Config_UtilConfig::_internal_set_warn_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  warn_pct_ = value;
}
inline void Config_UtilConfig::set_warn_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_warn_pct(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.Config.UtilConfig.warn_pct)
}

// uint32 crit_pct = 3[json_name = "critPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Config_UtilConfig::_internal_has_crit_pct() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config_UtilConfig::has_crit_pct() const {
  return _internal_has_crit_pct();
}
inline void Config_UtilConfig::clear_crit_pct() {
  crit_pct_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_UtilConfig::_internal_crit_pct() const {
  return crit_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config_UtilConfig::crit_pct() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.UtilConfig.crit_pct)
  return _internal_crit_pct();
}
inline void Config_UtilConfig::_internal_set_crit_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  crit_pct_ = value;
}
inline void Config_UtilConfig::set_crit_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crit_pct(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.Config.UtilConfig.crit_pct)
}

// -------------------------------------------------------------------

// Config

// .kentik.capacity_plan.v202212.Config.RunoutConfig runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Config::_internal_has_runout() const {
  return this != internal_default_instance() && runout_ != nullptr;
}
inline bool Config::has_runout() const {
  return _internal_has_runout();
}
inline void Config::clear_runout() {
  if (GetArena() == nullptr && runout_ != nullptr) {
    delete runout_;
  }
  runout_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::Config_RunoutConfig& Config::_internal_runout() const {
  const ::kentik::capacity_plan::v202212::Config_RunoutConfig* p = runout_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::Config_RunoutConfig*>(
      &::kentik::capacity_plan::v202212::_Config_RunoutConfig_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::Config_RunoutConfig& Config::runout() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.runout)
  return _internal_runout();
}
inline void Config::unsafe_arena_set_allocated_runout(
    ::kentik::capacity_plan::v202212::Config_RunoutConfig* runout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runout_);
  }
  runout_ = runout;
  if (runout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.Config.runout)
}
inline ::kentik::capacity_plan::v202212::Config_RunoutConfig* Config::release_runout() {
  auto temp = unsafe_arena_release_runout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config_RunoutConfig* Config::unsafe_arena_release_runout() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.Config.runout)
  
  ::kentik::capacity_plan::v202212::Config_RunoutConfig* temp = runout_;
  runout_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config_RunoutConfig* Config::_internal_mutable_runout() {
  
  if (runout_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::Config_RunoutConfig>(GetArena());
    runout_ = p;
  }
  return runout_;
}
inline ::kentik::capacity_plan::v202212::Config_RunoutConfig* Config::mutable_runout() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.Config.runout)
  return _internal_mutable_runout();
}
inline void Config::set_allocated_runout(::kentik::capacity_plan::v202212::Config_RunoutConfig* runout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete runout_;
  }
  if (runout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(runout);
    if (message_arena != submessage_arena) {
      runout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runout, submessage_arena);
    }
    
  } else {
    
  }
  runout_ = runout;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.Config.runout)
}

// .kentik.capacity_plan.v202212.Config.UtilConfig utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Config::_internal_has_utilization() const {
  return this != internal_default_instance() && utilization_ != nullptr;
}
inline bool Config::has_utilization() const {
  return _internal_has_utilization();
}
inline void Config::clear_utilization() {
  if (GetArena() == nullptr && utilization_ != nullptr) {
    delete utilization_;
  }
  utilization_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::Config_UtilConfig& Config::_internal_utilization() const {
  const ::kentik::capacity_plan::v202212::Config_UtilConfig* p = utilization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::Config_UtilConfig*>(
      &::kentik::capacity_plan::v202212::_Config_UtilConfig_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::Config_UtilConfig& Config::utilization() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.Config.utilization)
  return _internal_utilization();
}
inline void Config::unsafe_arena_set_allocated_utilization(
    ::kentik::capacity_plan::v202212::Config_UtilConfig* utilization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utilization_);
  }
  utilization_ = utilization;
  if (utilization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.Config.utilization)
}
inline ::kentik::capacity_plan::v202212::Config_UtilConfig* Config::release_utilization() {
  auto temp = unsafe_arena_release_utilization();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config_UtilConfig* Config::unsafe_arena_release_utilization() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.Config.utilization)
  
  ::kentik::capacity_plan::v202212::Config_UtilConfig* temp = utilization_;
  utilization_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config_UtilConfig* Config::_internal_mutable_utilization() {
  
  if (utilization_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::Config_UtilConfig>(GetArena());
    utilization_ = p;
  }
  return utilization_;
}
inline ::kentik::capacity_plan::v202212::Config_UtilConfig* Config::mutable_utilization() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.Config.utilization)
  return _internal_mutable_utilization();
}
inline void Config::set_allocated_utilization(::kentik::capacity_plan::v202212::Config_UtilConfig* utilization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete utilization_;
  }
  if (utilization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(utilization);
    if (message_arena != submessage_arena) {
      utilization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utilization, submessage_arena);
    }
    
  } else {
    
  }
  utilization_ = utilization;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.Config.utilization)
}

// -------------------------------------------------------------------

// SummaryStatus_RunoutStatus

// string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SummaryStatus_RunoutStatus::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SummaryStatus_RunoutStatus::status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
  return _internal_status();
}
inline void SummaryStatus_RunoutStatus::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
}
inline std::string* SummaryStatus_RunoutStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
  return _internal_mutable_status();
}
inline const std::string& SummaryStatus_RunoutStatus::_internal_status() const {
  return status_.Get();
}
inline void SummaryStatus_RunoutStatus::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SummaryStatus_RunoutStatus::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
}
inline void SummaryStatus_RunoutStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
}
inline void SummaryStatus_RunoutStatus::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
}
inline std::string* SummaryStatus_RunoutStatus::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SummaryStatus_RunoutStatus::release_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SummaryStatus_RunoutStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
}
inline std::string* SummaryStatus_RunoutStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SummaryStatus_RunoutStatus::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.status)
}

// uint64 earliest_date = 2[json_name = "earliestDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool SummaryStatus_RunoutStatus::_internal_has_earliest_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SummaryStatus_RunoutStatus::has_earliest_date() const {
  return _internal_has_earliest_date();
}
inline void SummaryStatus_RunoutStatus::clear_earliest_date() {
  earliest_date_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryStatus_RunoutStatus::_internal_earliest_date() const {
  return earliest_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryStatus_RunoutStatus::earliest_date() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.earliest_date)
  return _internal_earliest_date();
}
inline void SummaryStatus_RunoutStatus::_internal_set_earliest_date(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  earliest_date_ = value;
}
inline void SummaryStatus_RunoutStatus::set_earliest_date(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_earliest_date(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus.earliest_date)
}

// -------------------------------------------------------------------

// SummaryStatus_UtilStatus

// string status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SummaryStatus_UtilStatus::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SummaryStatus_UtilStatus::status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
  return _internal_status();
}
inline void SummaryStatus_UtilStatus::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
}
inline std::string* SummaryStatus_UtilStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
  return _internal_mutable_status();
}
inline const std::string& SummaryStatus_UtilStatus::_internal_status() const {
  return status_.Get();
}
inline void SummaryStatus_UtilStatus::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SummaryStatus_UtilStatus::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
}
inline void SummaryStatus_UtilStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
}
inline void SummaryStatus_UtilStatus::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
}
inline std::string* SummaryStatus_UtilStatus::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SummaryStatus_UtilStatus::release_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SummaryStatus_UtilStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
}
inline std::string* SummaryStatus_UtilStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SummaryStatus_UtilStatus::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.status)
}

// uint32 highest_pct = 2[json_name = "highestPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool SummaryStatus_UtilStatus::_internal_has_highest_pct() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SummaryStatus_UtilStatus::has_highest_pct() const {
  return _internal_has_highest_pct();
}
inline void SummaryStatus_UtilStatus::clear_highest_pct() {
  highest_pct_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryStatus_UtilStatus::_internal_highest_pct() const {
  return highest_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryStatus_UtilStatus::highest_pct() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.highest_pct)
  return _internal_highest_pct();
}
inline void SummaryStatus_UtilStatus::_internal_set_highest_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  highest_pct_ = value;
}
inline void SummaryStatus_UtilStatus::set_highest_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_highest_pct(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.SummaryStatus.UtilStatus.highest_pct)
}

// -------------------------------------------------------------------

// SummaryStatus

// .kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus runout = 1[json_name = "runout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool SummaryStatus::_internal_has_runout() const {
  return this != internal_default_instance() && runout_ != nullptr;
}
inline bool SummaryStatus::has_runout() const {
  return _internal_has_runout();
}
inline void SummaryStatus::clear_runout() {
  if (GetArena() == nullptr && runout_ != nullptr) {
    delete runout_;
  }
  runout_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus& SummaryStatus::_internal_runout() const {
  const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* p = runout_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus*>(
      &::kentik::capacity_plan::v202212::_SummaryStatus_RunoutStatus_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus& SummaryStatus::runout() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.SummaryStatus.runout)
  return _internal_runout();
}
inline void SummaryStatus::unsafe_arena_set_allocated_runout(
    ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* runout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runout_);
  }
  runout_ = runout;
  if (runout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.runout)
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* SummaryStatus::release_runout() {
  auto temp = unsafe_arena_release_runout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* SummaryStatus::unsafe_arena_release_runout() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.SummaryStatus.runout)
  
  ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* temp = runout_;
  runout_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* SummaryStatus::_internal_mutable_runout() {
  
  if (runout_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus>(GetArena());
    runout_ = p;
  }
  return runout_;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* SummaryStatus::mutable_runout() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.SummaryStatus.runout)
  return _internal_mutable_runout();
}
inline void SummaryStatus::set_allocated_runout(::kentik::capacity_plan::v202212::SummaryStatus_RunoutStatus* runout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete runout_;
  }
  if (runout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(runout);
    if (message_arena != submessage_arena) {
      runout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runout, submessage_arena);
    }
    
  } else {
    
  }
  runout_ = runout;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.runout)
}

// .kentik.capacity_plan.v202212.SummaryStatus.UtilStatus utilization = 2[json_name = "utilization", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool SummaryStatus::_internal_has_utilization() const {
  return this != internal_default_instance() && utilization_ != nullptr;
}
inline bool SummaryStatus::has_utilization() const {
  return _internal_has_utilization();
}
inline void SummaryStatus::clear_utilization() {
  if (GetArena() == nullptr && utilization_ != nullptr) {
    delete utilization_;
  }
  utilization_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus& SummaryStatus::_internal_utilization() const {
  const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* p = utilization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus*>(
      &::kentik::capacity_plan::v202212::_SummaryStatus_UtilStatus_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus& SummaryStatus::utilization() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.SummaryStatus.utilization)
  return _internal_utilization();
}
inline void SummaryStatus::unsafe_arena_set_allocated_utilization(
    ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* utilization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utilization_);
  }
  utilization_ = utilization;
  if (utilization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.utilization)
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* SummaryStatus::release_utilization() {
  auto temp = unsafe_arena_release_utilization();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* SummaryStatus::unsafe_arena_release_utilization() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.SummaryStatus.utilization)
  
  ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* temp = utilization_;
  utilization_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* SummaryStatus::_internal_mutable_utilization() {
  
  if (utilization_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus>(GetArena());
    utilization_ = p;
  }
  return utilization_;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* SummaryStatus::mutable_utilization() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.SummaryStatus.utilization)
  return _internal_mutable_utilization();
}
inline void SummaryStatus::set_allocated_utilization(::kentik::capacity_plan::v202212::SummaryStatus_UtilStatus* utilization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete utilization_;
  }
  if (utilization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(utilization);
    if (message_arena != submessage_arena) {
      utilization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utilization, submessage_arena);
    }
    
  } else {
    
  }
  utilization_ = utilization;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.SummaryStatus.utilization)
}

// -------------------------------------------------------------------

// CapacitySummary_InterfacesDetail_StatusDetail

// uint64 bps = 1[json_name = "bps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail_StatusDetail::_internal_has_bps() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CapacitySummary_InterfacesDetail_StatusDetail::has_bps() const {
  return _internal_has_bps();
}
inline void CapacitySummary_InterfacesDetail_StatusDetail::clear_bps() {
  bps_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CapacitySummary_InterfacesDetail_StatusDetail::_internal_bps() const {
  return bps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CapacitySummary_InterfacesDetail_StatusDetail::bps() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail.bps)
  return _internal_bps();
}
inline void CapacitySummary_InterfacesDetail_StatusDetail::_internal_set_bps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  bps_ = value;
}
inline void CapacitySummary_InterfacesDetail_StatusDetail::set_bps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bps(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail.bps)
}

// uint32 count = 2[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail_StatusDetail::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CapacitySummary_InterfacesDetail_StatusDetail::has_count() const {
  return _internal_has_count();
}
inline void CapacitySummary_InterfacesDetail_StatusDetail::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CapacitySummary_InterfacesDetail_StatusDetail::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CapacitySummary_InterfacesDetail_StatusDetail::count() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail.count)
  return _internal_count();
}
inline void CapacitySummary_InterfacesDetail_StatusDetail::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CapacitySummary_InterfacesDetail_StatusDetail::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail.count)
}

// -------------------------------------------------------------------

// CapacitySummary_InterfacesDetail

// uint32 total_count = 1[json_name = "totalCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail::_internal_has_total_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CapacitySummary_InterfacesDetail::has_total_count() const {
  return _internal_has_total_count();
}
inline void CapacitySummary_InterfacesDetail::clear_total_count() {
  total_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CapacitySummary_InterfacesDetail::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CapacitySummary_InterfacesDetail::total_count() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.total_count)
  return _internal_total_count();
}
inline void CapacitySummary_InterfacesDetail::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_count_ = value;
}
inline void CapacitySummary_InterfacesDetail::set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.total_count)
}

// uint64 total_capacity_bps = 2[json_name = "totalCapacityBps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail::_internal_has_total_capacity_bps() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CapacitySummary_InterfacesDetail::has_total_capacity_bps() const {
  return _internal_has_total_capacity_bps();
}
inline void CapacitySummary_InterfacesDetail::clear_total_capacity_bps() {
  total_capacity_bps_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CapacitySummary_InterfacesDetail::_internal_total_capacity_bps() const {
  return total_capacity_bps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CapacitySummary_InterfacesDetail::total_capacity_bps() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.total_capacity_bps)
  return _internal_total_capacity_bps();
}
inline void CapacitySummary_InterfacesDetail::_internal_set_total_capacity_bps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_capacity_bps_ = value;
}
inline void CapacitySummary_InterfacesDetail::set_total_capacity_bps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_capacity_bps(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.total_capacity_bps)
}

// .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail healthy = 3[json_name = "healthy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail::_internal_has_healthy() const {
  return this != internal_default_instance() && healthy_ != nullptr;
}
inline bool CapacitySummary_InterfacesDetail::has_healthy() const {
  return _internal_has_healthy();
}
inline void CapacitySummary_InterfacesDetail::clear_healthy() {
  if (GetArena() == nullptr && healthy_ != nullptr) {
    delete healthy_;
  }
  healthy_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail::_internal_healthy() const {
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* p = healthy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail*>(
      &::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_StatusDetail_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail::healthy() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.healthy)
  return _internal_healthy();
}
inline void CapacitySummary_InterfacesDetail::unsafe_arena_set_allocated_healthy(
    ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* healthy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(healthy_);
  }
  healthy_ = healthy;
  if (healthy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.healthy)
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::release_healthy() {
  auto temp = unsafe_arena_release_healthy();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::unsafe_arena_release_healthy() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.healthy)
  
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* temp = healthy_;
  healthy_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::_internal_mutable_healthy() {
  
  if (healthy_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail>(GetArena());
    healthy_ = p;
  }
  return healthy_;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::mutable_healthy() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.healthy)
  return _internal_mutable_healthy();
}
inline void CapacitySummary_InterfacesDetail::set_allocated_healthy(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* healthy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete healthy_;
  }
  if (healthy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(healthy);
    if (message_arena != submessage_arena) {
      healthy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, healthy, submessage_arena);
    }
    
  } else {
    
  }
  healthy_ = healthy;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.healthy)
}

// .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail warning = 4[json_name = "warning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail::_internal_has_warning() const {
  return this != internal_default_instance() && warning_ != nullptr;
}
inline bool CapacitySummary_InterfacesDetail::has_warning() const {
  return _internal_has_warning();
}
inline void CapacitySummary_InterfacesDetail::clear_warning() {
  if (GetArena() == nullptr && warning_ != nullptr) {
    delete warning_;
  }
  warning_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail::_internal_warning() const {
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* p = warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail*>(
      &::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_StatusDetail_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail::warning() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.warning)
  return _internal_warning();
}
inline void CapacitySummary_InterfacesDetail::unsafe_arena_set_allocated_warning(
    ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warning_);
  }
  warning_ = warning;
  if (warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.warning)
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::release_warning() {
  auto temp = unsafe_arena_release_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::unsafe_arena_release_warning() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.warning)
  
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* temp = warning_;
  warning_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::_internal_mutable_warning() {
  
  if (warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail>(GetArena());
    warning_ = p;
  }
  return warning_;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::mutable_warning() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.warning)
  return _internal_mutable_warning();
}
inline void CapacitySummary_InterfacesDetail::set_allocated_warning(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete warning_;
  }
  if (warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(warning);
    if (message_arena != submessage_arena) {
      warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warning, submessage_arena);
    }
    
  } else {
    
  }
  warning_ = warning;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.warning)
}

// .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail critical = 5[json_name = "critical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary_InterfacesDetail::_internal_has_critical() const {
  return this != internal_default_instance() && critical_ != nullptr;
}
inline bool CapacitySummary_InterfacesDetail::has_critical() const {
  return _internal_has_critical();
}
inline void CapacitySummary_InterfacesDetail::clear_critical() {
  if (GetArena() == nullptr && critical_ != nullptr) {
    delete critical_;
  }
  critical_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail::_internal_critical() const {
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* p = critical_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail*>(
      &::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_StatusDetail_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail& CapacitySummary_InterfacesDetail::critical() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.critical)
  return _internal_critical();
}
inline void CapacitySummary_InterfacesDetail::unsafe_arena_set_allocated_critical(
    ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* critical) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(critical_);
  }
  critical_ = critical;
  if (critical) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.critical)
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::release_critical() {
  auto temp = unsafe_arena_release_critical();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::unsafe_arena_release_critical() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.critical)
  
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* temp = critical_;
  critical_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::_internal_mutable_critical() {
  
  if (critical_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail>(GetArena());
    critical_ = p;
  }
  return critical_;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* CapacitySummary_InterfacesDetail::mutable_critical() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.critical)
  return _internal_mutable_critical();
}
inline void CapacitySummary_InterfacesDetail::set_allocated_critical(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail_StatusDetail* critical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete critical_;
  }
  if (critical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(critical);
    if (message_arena != submessage_arena) {
      critical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, critical, submessage_arena);
    }
    
  } else {
    
  }
  critical_ = critical;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.critical)
}

// -------------------------------------------------------------------

// CapacitySummary

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacitySummary::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacitySummary::id() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.id)
  return _internal_id();
}
inline void CapacitySummary::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.id)
}
inline std::string* CapacitySummary::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.id)
  return _internal_mutable_id();
}
inline const std::string& CapacitySummary::_internal_id() const {
  return id_.Get();
}
inline void CapacitySummary::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacitySummary::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacitySummary.id)
}
inline void CapacitySummary::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacitySummary.id)
}
inline void CapacitySummary::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacitySummary.id)
}
inline std::string* CapacitySummary::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacitySummary::release_id() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacitySummary::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.id)
}
inline std::string* CapacitySummary::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacitySummary.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacitySummary::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacitySummary::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacitySummary::name() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.name)
  return _internal_name();
}
inline void CapacitySummary::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.name)
}
inline std::string* CapacitySummary::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.name)
  return _internal_mutable_name();
}
inline const std::string& CapacitySummary::_internal_name() const {
  return name_.Get();
}
inline void CapacitySummary::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacitySummary::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacitySummary.name)
}
inline void CapacitySummary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacitySummary.name)
}
inline void CapacitySummary::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacitySummary.name)
}
inline std::string* CapacitySummary::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacitySummary::release_name() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacitySummary::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.name)
}
inline std::string* CapacitySummary::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacitySummary.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacitySummary::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.name)
}

// string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacitySummary::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacitySummary::description() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.description)
  return _internal_description();
}
inline void CapacitySummary::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.description)
}
inline std::string* CapacitySummary::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.description)
  return _internal_mutable_description();
}
inline const std::string& CapacitySummary::_internal_description() const {
  return description_.Get();
}
inline void CapacitySummary::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacitySummary::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacitySummary.description)
}
inline void CapacitySummary::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacitySummary.description)
}
inline void CapacitySummary::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacitySummary.description)
}
inline std::string* CapacitySummary::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacitySummary::release_description() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacitySummary::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.description)
}
inline std::string* CapacitySummary::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacitySummary.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacitySummary::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.description)
}

// string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacitySummary::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacitySummary::status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.status)
  return _internal_status();
}
inline void CapacitySummary::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacitySummary.status)
}
inline std::string* CapacitySummary::mutable_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.status)
  return _internal_mutable_status();
}
inline const std::string& CapacitySummary::_internal_status() const {
  return status_.Get();
}
inline void CapacitySummary::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacitySummary::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacitySummary.status)
}
inline void CapacitySummary::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacitySummary.status)
}
inline void CapacitySummary::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacitySummary.status)
}
inline std::string* CapacitySummary::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacitySummary::release_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacitySummary::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.status)
}
inline std::string* CapacitySummary::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacitySummary.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacitySummary::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.status)
}

// .kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary::_internal_has_interfaces() const {
  return this != internal_default_instance() && interfaces_ != nullptr;
}
inline bool CapacitySummary::has_interfaces() const {
  return _internal_has_interfaces();
}
inline void CapacitySummary::clear_interfaces() {
  if (GetArena() == nullptr && interfaces_ != nullptr) {
    delete interfaces_;
  }
  interfaces_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail& CapacitySummary::_internal_interfaces() const {
  const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* p = interfaces_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail*>(
      &::kentik::capacity_plan::v202212::_CapacitySummary_InterfacesDetail_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail& CapacitySummary::interfaces() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.interfaces)
  return _internal_interfaces();
}
inline void CapacitySummary::unsafe_arena_set_allocated_interfaces(
    ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* interfaces) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interfaces_);
  }
  interfaces_ = interfaces;
  if (interfaces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.interfaces)
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* CapacitySummary::release_interfaces() {
  auto temp = unsafe_arena_release_interfaces();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* CapacitySummary::unsafe_arena_release_interfaces() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.interfaces)
  
  ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* temp = interfaces_;
  interfaces_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* CapacitySummary::_internal_mutable_interfaces() {
  
  if (interfaces_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail>(GetArena());
    interfaces_ = p;
  }
  return interfaces_;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* CapacitySummary::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.interfaces)
  return _internal_mutable_interfaces();
}
inline void CapacitySummary::set_allocated_interfaces(::kentik::capacity_plan::v202212::CapacitySummary_InterfacesDetail* interfaces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interfaces_;
  }
  if (interfaces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interfaces);
    if (message_arena != submessage_arena) {
      interfaces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interfaces, submessage_arena);
    }
    
  } else {
    
  }
  interfaces_ = interfaces;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.interfaces)
}

// .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool CapacitySummary::has_config() const {
  return _internal_has_config();
}
inline void CapacitySummary::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::Config& CapacitySummary::_internal_config() const {
  const ::kentik::capacity_plan::v202212::Config* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::Config*>(
      &::kentik::capacity_plan::v202212::_Config_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::Config& CapacitySummary::config() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.config)
  return _internal_config();
}
inline void CapacitySummary::unsafe_arena_set_allocated_config(
    ::kentik::capacity_plan::v202212::Config* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.config)
}
inline ::kentik::capacity_plan::v202212::Config* CapacitySummary::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config* CapacitySummary::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.config)
  
  ::kentik::capacity_plan::v202212::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config* CapacitySummary::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::Config>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::kentik::capacity_plan::v202212::Config* CapacitySummary::mutable_config() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.config)
  return _internal_mutable_config();
}
inline void CapacitySummary::set_allocated_config(::kentik::capacity_plan::v202212::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.config)
}

// .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacitySummary::_internal_has_summary_status() const {
  return this != internal_default_instance() && summary_status_ != nullptr;
}
inline bool CapacitySummary::has_summary_status() const {
  return _internal_has_summary_status();
}
inline void CapacitySummary::clear_summary_status() {
  if (GetArena() == nullptr && summary_status_ != nullptr) {
    delete summary_status_;
  }
  summary_status_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus& CapacitySummary::_internal_summary_status() const {
  const ::kentik::capacity_plan::v202212::SummaryStatus* p = summary_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::SummaryStatus*>(
      &::kentik::capacity_plan::v202212::_SummaryStatus_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus& CapacitySummary::summary_status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacitySummary.summary_status)
  return _internal_summary_status();
}
inline void CapacitySummary::unsafe_arena_set_allocated_summary_status(
    ::kentik::capacity_plan::v202212::SummaryStatus* summary_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_status_);
  }
  summary_status_ = summary_status;
  if (summary_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.summary_status)
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacitySummary::release_summary_status() {
  auto temp = unsafe_arena_release_summary_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacitySummary::unsafe_arena_release_summary_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacitySummary.summary_status)
  
  ::kentik::capacity_plan::v202212::SummaryStatus* temp = summary_status_;
  summary_status_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacitySummary::_internal_mutable_summary_status() {
  
  if (summary_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus>(GetArena());
    summary_status_ = p;
  }
  return summary_status_;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacitySummary::mutable_summary_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacitySummary.summary_status)
  return _internal_mutable_summary_status();
}
inline void CapacitySummary::set_allocated_summary_status(::kentik::capacity_plan::v202212::SummaryStatus* summary_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_status_;
  }
  if (summary_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary_status);
    if (message_arena != submessage_arena) {
      summary_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_status, submessage_arena);
    }
    
  } else {
    
  }
  summary_status_ = summary_status;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacitySummary.summary_status)
}

// -------------------------------------------------------------------

// CapacityPlan_InterfaceDetail

// string device_name = 1[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_device_name() {
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::device_name() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
  return _internal_device_name();
}
inline void CapacityPlan_InterfaceDetail::set_device_name(const std::string& value) {
  _internal_set_device_name(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
  return _internal_mutable_device_name();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_device_name() const {
  return device_name_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_device_name(const std::string& value) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_device_name(std::string&& value) {
  
  device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
}
inline void CapacityPlan_InterfaceDetail::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
}
inline void CapacityPlan_InterfaceDetail::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_device_name() {
  
  return device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_device_name() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
  return device_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_device_name(
    std::string* device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.device_name)
}

// string intf_name = 2[json_name = "intfName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_intf_name() {
  intf_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::intf_name() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
  return _internal_intf_name();
}
inline void CapacityPlan_InterfaceDetail::set_intf_name(const std::string& value) {
  _internal_set_intf_name(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_intf_name() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
  return _internal_mutable_intf_name();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_intf_name() const {
  return intf_name_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_intf_name(const std::string& value) {
  
  intf_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_intf_name(std::string&& value) {
  
  intf_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
}
inline void CapacityPlan_InterfaceDetail::set_intf_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intf_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
}
inline void CapacityPlan_InterfaceDetail::set_intf_name(const char* value,
    size_t size) {
  
  intf_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_intf_name() {
  
  return intf_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_intf_name() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
  return intf_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_intf_name(std::string* intf_name) {
  if (intf_name != nullptr) {
    
  } else {
    
  }
  intf_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intf_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_intf_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return intf_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_intf_name(
    std::string* intf_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (intf_name != nullptr) {
    
  } else {
    
  }
  intf_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      intf_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_name)
}

// string intf_description = 3[json_name = "intfDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_intf_description() {
  intf_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::intf_description() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
  return _internal_intf_description();
}
inline void CapacityPlan_InterfaceDetail::set_intf_description(const std::string& value) {
  _internal_set_intf_description(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_intf_description() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
  return _internal_mutable_intf_description();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_intf_description() const {
  return intf_description_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_intf_description(const std::string& value) {
  
  intf_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_intf_description(std::string&& value) {
  
  intf_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
}
inline void CapacityPlan_InterfaceDetail::set_intf_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intf_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
}
inline void CapacityPlan_InterfaceDetail::set_intf_description(const char* value,
    size_t size) {
  
  intf_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_intf_description() {
  
  return intf_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_intf_description() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
  return intf_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_intf_description(std::string* intf_description) {
  if (intf_description != nullptr) {
    
  } else {
    
  }
  intf_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intf_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_intf_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return intf_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_intf_description(
    std::string* intf_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (intf_description != nullptr) {
    
  } else {
    
  }
  intf_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      intf_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_description)
}

// string intf_capacity = 4[json_name = "intfCapacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_intf_capacity() {
  intf_capacity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::intf_capacity() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
  return _internal_intf_capacity();
}
inline void CapacityPlan_InterfaceDetail::set_intf_capacity(const std::string& value) {
  _internal_set_intf_capacity(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_intf_capacity() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
  return _internal_mutable_intf_capacity();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_intf_capacity() const {
  return intf_capacity_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_intf_capacity(const std::string& value) {
  
  intf_capacity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_intf_capacity(std::string&& value) {
  
  intf_capacity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
}
inline void CapacityPlan_InterfaceDetail::set_intf_capacity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intf_capacity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
}
inline void CapacityPlan_InterfaceDetail::set_intf_capacity(const char* value,
    size_t size) {
  
  intf_capacity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_intf_capacity() {
  
  return intf_capacity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_intf_capacity() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
  return intf_capacity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_intf_capacity(std::string* intf_capacity) {
  if (intf_capacity != nullptr) {
    
  } else {
    
  }
  intf_capacity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intf_capacity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_intf_capacity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return intf_capacity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_intf_capacity(
    std::string* intf_capacity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (intf_capacity != nullptr) {
    
  } else {
    
  }
  intf_capacity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      intf_capacity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.intf_capacity)
}

// string network_boundary = 5[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_network_boundary() {
  network_boundary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::network_boundary() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
  return _internal_network_boundary();
}
inline void CapacityPlan_InterfaceDetail::set_network_boundary(const std::string& value) {
  _internal_set_network_boundary(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_network_boundary() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
  return _internal_mutable_network_boundary();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_network_boundary() const {
  return network_boundary_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_network_boundary(const std::string& value) {
  
  network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_network_boundary(std::string&& value) {
  
  network_boundary_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
}
inline void CapacityPlan_InterfaceDetail::set_network_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
}
inline void CapacityPlan_InterfaceDetail::set_network_boundary(const char* value,
    size_t size) {
  
  network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_network_boundary() {
  
  return network_boundary_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_network_boundary() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
  return network_boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_network_boundary(std::string* network_boundary) {
  if (network_boundary != nullptr) {
    
  } else {
    
  }
  network_boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_network_boundary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return network_boundary_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_network_boundary(
    std::string* network_boundary) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (network_boundary != nullptr) {
    
  } else {
    
  }
  network_boundary_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      network_boundary, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.network_boundary)
}

// string conn_type = 6[json_name = "connType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_conn_type() {
  conn_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::conn_type() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
  return _internal_conn_type();
}
inline void CapacityPlan_InterfaceDetail::set_conn_type(const std::string& value) {
  _internal_set_conn_type(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_conn_type() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
  return _internal_mutable_conn_type();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_conn_type() const {
  return conn_type_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_conn_type(const std::string& value) {
  
  conn_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_conn_type(std::string&& value) {
  
  conn_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
}
inline void CapacityPlan_InterfaceDetail::set_conn_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conn_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
}
inline void CapacityPlan_InterfaceDetail::set_conn_type(const char* value,
    size_t size) {
  
  conn_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_conn_type() {
  
  return conn_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_conn_type() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
  return conn_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_conn_type(std::string* conn_type) {
  if (conn_type != nullptr) {
    
  } else {
    
  }
  conn_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conn_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_conn_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return conn_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_conn_type(
    std::string* conn_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conn_type != nullptr) {
    
  } else {
    
  }
  conn_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      conn_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.conn_type)
}

// string provider = 7[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_provider() {
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::provider() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
  return _internal_provider();
}
inline void CapacityPlan_InterfaceDetail::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
  return _internal_mutable_provider();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_provider() const {
  return provider_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_provider(const std::string& value) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_provider(std::string&& value) {
  
  provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
}
inline void CapacityPlan_InterfaceDetail::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
}
inline void CapacityPlan_InterfaceDetail::set_provider(const char* value,
    size_t size) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_provider() {
  
  return provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_provider() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_provider(
    std::string* provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.provider)
}

// string util_status = 8[json_name = "utilStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_util_status() {
  util_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::util_status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
  return _internal_util_status();
}
inline void CapacityPlan_InterfaceDetail::set_util_status(const std::string& value) {
  _internal_set_util_status(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_util_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
  return _internal_mutable_util_status();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_util_status() const {
  return util_status_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_util_status(const std::string& value) {
  
  util_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_util_status(std::string&& value) {
  
  util_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
}
inline void CapacityPlan_InterfaceDetail::set_util_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  util_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
}
inline void CapacityPlan_InterfaceDetail::set_util_status(const char* value,
    size_t size) {
  
  util_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_util_status() {
  
  return util_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_util_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
  return util_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_util_status(std::string* util_status) {
  if (util_status != nullptr) {
    
  } else {
    
  }
  util_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), util_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_util_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return util_status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_util_status(
    std::string* util_status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (util_status != nullptr) {
    
  } else {
    
  }
  util_status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      util_status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_status)
}

// string util_out_mbps = 9[json_name = "utilOutMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_util_out_mbps() {
  util_out_mbps_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::util_out_mbps() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
  return _internal_util_out_mbps();
}
inline void CapacityPlan_InterfaceDetail::set_util_out_mbps(const std::string& value) {
  _internal_set_util_out_mbps(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_util_out_mbps() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
  return _internal_mutable_util_out_mbps();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_util_out_mbps() const {
  return util_out_mbps_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_util_out_mbps(const std::string& value) {
  
  util_out_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_util_out_mbps(std::string&& value) {
  
  util_out_mbps_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
}
inline void CapacityPlan_InterfaceDetail::set_util_out_mbps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  util_out_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
}
inline void CapacityPlan_InterfaceDetail::set_util_out_mbps(const char* value,
    size_t size) {
  
  util_out_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_util_out_mbps() {
  
  return util_out_mbps_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_util_out_mbps() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
  return util_out_mbps_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_util_out_mbps(std::string* util_out_mbps) {
  if (util_out_mbps != nullptr) {
    
  } else {
    
  }
  util_out_mbps_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), util_out_mbps,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_util_out_mbps() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return util_out_mbps_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_util_out_mbps(
    std::string* util_out_mbps) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (util_out_mbps != nullptr) {
    
  } else {
    
  }
  util_out_mbps_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      util_out_mbps, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_mbps)
}

// string util_out_pct = 10[json_name = "utilOutPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_util_out_pct() {
  util_out_pct_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::util_out_pct() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
  return _internal_util_out_pct();
}
inline void CapacityPlan_InterfaceDetail::set_util_out_pct(const std::string& value) {
  _internal_set_util_out_pct(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_util_out_pct() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
  return _internal_mutable_util_out_pct();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_util_out_pct() const {
  return util_out_pct_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_util_out_pct(const std::string& value) {
  
  util_out_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_util_out_pct(std::string&& value) {
  
  util_out_pct_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
}
inline void CapacityPlan_InterfaceDetail::set_util_out_pct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  util_out_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
}
inline void CapacityPlan_InterfaceDetail::set_util_out_pct(const char* value,
    size_t size) {
  
  util_out_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_util_out_pct() {
  
  return util_out_pct_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_util_out_pct() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
  return util_out_pct_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_util_out_pct(std::string* util_out_pct) {
  if (util_out_pct != nullptr) {
    
  } else {
    
  }
  util_out_pct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), util_out_pct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_util_out_pct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return util_out_pct_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_util_out_pct(
    std::string* util_out_pct) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (util_out_pct != nullptr) {
    
  } else {
    
  }
  util_out_pct_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      util_out_pct, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_out_pct)
}

// string util_in_mbps = 11[json_name = "utilInMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_util_in_mbps() {
  util_in_mbps_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::util_in_mbps() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
  return _internal_util_in_mbps();
}
inline void CapacityPlan_InterfaceDetail::set_util_in_mbps(const std::string& value) {
  _internal_set_util_in_mbps(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_util_in_mbps() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
  return _internal_mutable_util_in_mbps();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_util_in_mbps() const {
  return util_in_mbps_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_util_in_mbps(const std::string& value) {
  
  util_in_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_util_in_mbps(std::string&& value) {
  
  util_in_mbps_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
}
inline void CapacityPlan_InterfaceDetail::set_util_in_mbps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  util_in_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
}
inline void CapacityPlan_InterfaceDetail::set_util_in_mbps(const char* value,
    size_t size) {
  
  util_in_mbps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_util_in_mbps() {
  
  return util_in_mbps_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_util_in_mbps() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
  return util_in_mbps_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_util_in_mbps(std::string* util_in_mbps) {
  if (util_in_mbps != nullptr) {
    
  } else {
    
  }
  util_in_mbps_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), util_in_mbps,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_util_in_mbps() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return util_in_mbps_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_util_in_mbps(
    std::string* util_in_mbps) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (util_in_mbps != nullptr) {
    
  } else {
    
  }
  util_in_mbps_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      util_in_mbps, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_mbps)
}

// string util_in_pct = 12[json_name = "utilInPct", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_util_in_pct() {
  util_in_pct_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::util_in_pct() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
  return _internal_util_in_pct();
}
inline void CapacityPlan_InterfaceDetail::set_util_in_pct(const std::string& value) {
  _internal_set_util_in_pct(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_util_in_pct() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
  return _internal_mutable_util_in_pct();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_util_in_pct() const {
  return util_in_pct_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_util_in_pct(const std::string& value) {
  
  util_in_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_util_in_pct(std::string&& value) {
  
  util_in_pct_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
}
inline void CapacityPlan_InterfaceDetail::set_util_in_pct(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  util_in_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
}
inline void CapacityPlan_InterfaceDetail::set_util_in_pct(const char* value,
    size_t size) {
  
  util_in_pct_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_util_in_pct() {
  
  return util_in_pct_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_util_in_pct() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
  return util_in_pct_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_util_in_pct(std::string* util_in_pct) {
  if (util_in_pct != nullptr) {
    
  } else {
    
  }
  util_in_pct_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), util_in_pct,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_util_in_pct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return util_in_pct_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_util_in_pct(
    std::string* util_in_pct) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (util_in_pct != nullptr) {
    
  } else {
    
  }
  util_in_pct_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      util_in_pct, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.util_in_pct)
}

// string runout_status = 13[json_name = "runoutStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_runout_status() {
  runout_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::runout_status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
  return _internal_runout_status();
}
inline void CapacityPlan_InterfaceDetail::set_runout_status(const std::string& value) {
  _internal_set_runout_status(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_runout_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
  return _internal_mutable_runout_status();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_runout_status() const {
  return runout_status_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_runout_status(const std::string& value) {
  
  runout_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_runout_status(std::string&& value) {
  
  runout_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
}
inline void CapacityPlan_InterfaceDetail::set_runout_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runout_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
}
inline void CapacityPlan_InterfaceDetail::set_runout_status(const char* value,
    size_t size) {
  
  runout_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_runout_status() {
  
  return runout_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_runout_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
  return runout_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_runout_status(std::string* runout_status) {
  if (runout_status != nullptr) {
    
  } else {
    
  }
  runout_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runout_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_runout_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runout_status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_runout_status(
    std::string* runout_status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runout_status != nullptr) {
    
  } else {
    
  }
  runout_status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runout_status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_status)
}

// string runout_in_date = 14[json_name = "runoutInDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_runout_in_date() {
  runout_in_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::runout_in_date() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
  return _internal_runout_in_date();
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_date(const std::string& value) {
  _internal_set_runout_in_date(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_runout_in_date() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
  return _internal_mutable_runout_in_date();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_runout_in_date() const {
  return runout_in_date_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_runout_in_date(const std::string& value) {
  
  runout_in_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_date(std::string&& value) {
  
  runout_in_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runout_in_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_date(const char* value,
    size_t size) {
  
  runout_in_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_runout_in_date() {
  
  return runout_in_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_runout_in_date() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
  return runout_in_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_runout_in_date(std::string* runout_in_date) {
  if (runout_in_date != nullptr) {
    
  } else {
    
  }
  runout_in_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runout_in_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_runout_in_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runout_in_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_runout_in_date(
    std::string* runout_in_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runout_in_date != nullptr) {
    
  } else {
    
  }
  runout_in_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runout_in_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_date)
}

// string runout_in_variation = 15[json_name = "runoutInVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_runout_in_variation() {
  runout_in_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::runout_in_variation() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
  return _internal_runout_in_variation();
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_variation(const std::string& value) {
  _internal_set_runout_in_variation(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_runout_in_variation() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
  return _internal_mutable_runout_in_variation();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_runout_in_variation() const {
  return runout_in_variation_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_runout_in_variation(const std::string& value) {
  
  runout_in_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_variation(std::string&& value) {
  
  runout_in_variation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_variation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runout_in_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
}
inline void CapacityPlan_InterfaceDetail::set_runout_in_variation(const char* value,
    size_t size) {
  
  runout_in_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_runout_in_variation() {
  
  return runout_in_variation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_runout_in_variation() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
  return runout_in_variation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_runout_in_variation(std::string* runout_in_variation) {
  if (runout_in_variation != nullptr) {
    
  } else {
    
  }
  runout_in_variation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runout_in_variation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_runout_in_variation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runout_in_variation_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_runout_in_variation(
    std::string* runout_in_variation) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runout_in_variation != nullptr) {
    
  } else {
    
  }
  runout_in_variation_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runout_in_variation, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_in_variation)
}

// string runout_out_date = 16[json_name = "runoutOutDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_runout_out_date() {
  runout_out_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::runout_out_date() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
  return _internal_runout_out_date();
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_date(const std::string& value) {
  _internal_set_runout_out_date(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_runout_out_date() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
  return _internal_mutable_runout_out_date();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_runout_out_date() const {
  return runout_out_date_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_runout_out_date(const std::string& value) {
  
  runout_out_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_date(std::string&& value) {
  
  runout_out_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runout_out_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_date(const char* value,
    size_t size) {
  
  runout_out_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_runout_out_date() {
  
  return runout_out_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_runout_out_date() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
  return runout_out_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_runout_out_date(std::string* runout_out_date) {
  if (runout_out_date != nullptr) {
    
  } else {
    
  }
  runout_out_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runout_out_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_runout_out_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runout_out_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_runout_out_date(
    std::string* runout_out_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runout_out_date != nullptr) {
    
  } else {
    
  }
  runout_out_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runout_out_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_date)
}

// string runout_out_variation = 17[json_name = "runoutOutVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan_InterfaceDetail::clear_runout_out_variation() {
  runout_out_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan_InterfaceDetail::runout_out_variation() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
  return _internal_runout_out_variation();
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_variation(const std::string& value) {
  _internal_set_runout_out_variation(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
}
inline std::string* CapacityPlan_InterfaceDetail::mutable_runout_out_variation() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
  return _internal_mutable_runout_out_variation();
}
inline const std::string& CapacityPlan_InterfaceDetail::_internal_runout_out_variation() const {
  return runout_out_variation_.Get();
}
inline void CapacityPlan_InterfaceDetail::_internal_set_runout_out_variation(const std::string& value) {
  
  runout_out_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_variation(std::string&& value) {
  
  runout_out_variation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_variation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runout_out_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
}
inline void CapacityPlan_InterfaceDetail::set_runout_out_variation(const char* value,
    size_t size) {
  
  runout_out_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
}
inline std::string* CapacityPlan_InterfaceDetail::_internal_mutable_runout_out_variation() {
  
  return runout_out_variation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan_InterfaceDetail::release_runout_out_variation() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
  return runout_out_variation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan_InterfaceDetail::set_allocated_runout_out_variation(std::string* runout_out_variation) {
  if (runout_out_variation != nullptr) {
    
  } else {
    
  }
  runout_out_variation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runout_out_variation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
}
inline std::string* CapacityPlan_InterfaceDetail::unsafe_arena_release_runout_out_variation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runout_out_variation_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan_InterfaceDetail::unsafe_arena_set_allocated_runout_out_variation(
    std::string* runout_out_variation) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runout_out_variation != nullptr) {
    
  } else {
    
  }
  runout_out_variation_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runout_out_variation, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail.runout_out_variation)
}

// -------------------------------------------------------------------

// CapacityPlan

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan::id() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.id)
  return _internal_id();
}
inline void CapacityPlan::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.id)
}
inline std::string* CapacityPlan::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.id)
  return _internal_mutable_id();
}
inline const std::string& CapacityPlan::_internal_id() const {
  return id_.Get();
}
inline void CapacityPlan::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.id)
}
inline void CapacityPlan::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.id)
}
inline void CapacityPlan::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.id)
}
inline std::string* CapacityPlan::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan::release_id() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.id)
}
inline std::string* CapacityPlan::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan::name() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.name)
  return _internal_name();
}
inline void CapacityPlan::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.name)
}
inline std::string* CapacityPlan::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.name)
  return _internal_mutable_name();
}
inline const std::string& CapacityPlan::_internal_name() const {
  return name_.Get();
}
inline void CapacityPlan::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.name)
}
inline void CapacityPlan::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.name)
}
inline void CapacityPlan::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.name)
}
inline std::string* CapacityPlan::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan::release_name() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.name)
}
inline std::string* CapacityPlan::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.name)
}

// string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan::description() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.description)
  return _internal_description();
}
inline void CapacityPlan::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.description)
}
inline std::string* CapacityPlan::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.description)
  return _internal_mutable_description();
}
inline const std::string& CapacityPlan::_internal_description() const {
  return description_.Get();
}
inline void CapacityPlan::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.description)
}
inline void CapacityPlan::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.description)
}
inline void CapacityPlan::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.description)
}
inline std::string* CapacityPlan::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan::release_description() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.description)
}
inline std::string* CapacityPlan::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.description)
}

// string status = 4[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CapacityPlan::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CapacityPlan::status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.status)
  return _internal_status();
}
inline void CapacityPlan::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.CapacityPlan.status)
}
inline std::string* CapacityPlan::mutable_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.status)
  return _internal_mutable_status();
}
inline const std::string& CapacityPlan::_internal_status() const {
  return status_.Get();
}
inline void CapacityPlan::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CapacityPlan::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.CapacityPlan.status)
}
inline void CapacityPlan::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.CapacityPlan.status)
}
inline void CapacityPlan::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.CapacityPlan.status)
}
inline std::string* CapacityPlan::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CapacityPlan::release_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CapacityPlan::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.status)
}
inline std::string* CapacityPlan::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.CapacityPlan.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CapacityPlan::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.status)
}

// repeated .kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail interfaces = 5[json_name = "interfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int CapacityPlan::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int CapacityPlan::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void CapacityPlan::clear_interfaces() {
  interfaces_.Clear();
}
inline ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* CapacityPlan::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail >*
CapacityPlan::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:kentik.capacity_plan.v202212.CapacityPlan.interfaces)
  return &interfaces_;
}
inline const ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail& CapacityPlan::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail& CapacityPlan::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.interfaces)
  return _internal_interfaces(index);
}
inline ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* CapacityPlan::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail* CapacityPlan::add_interfaces() {
  // @@protoc_insertion_point(field_add:kentik.capacity_plan.v202212.CapacityPlan.interfaces)
  return _internal_add_interfaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan_InterfaceDetail >&
CapacityPlan::interfaces() const {
  // @@protoc_insertion_point(field_list:kentik.capacity_plan.v202212.CapacityPlan.interfaces)
  return interfaces_;
}

// .kentik.capacity_plan.v202212.Config config = 6[json_name = "config", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacityPlan::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool CapacityPlan::has_config() const {
  return _internal_has_config();
}
inline void CapacityPlan::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::Config& CapacityPlan::_internal_config() const {
  const ::kentik::capacity_plan::v202212::Config* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::Config*>(
      &::kentik::capacity_plan::v202212::_Config_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::Config& CapacityPlan::config() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.config)
  return _internal_config();
}
inline void CapacityPlan::unsafe_arena_set_allocated_config(
    ::kentik::capacity_plan::v202212::Config* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.config)
}
inline ::kentik::capacity_plan::v202212::Config* CapacityPlan::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config* CapacityPlan::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.config)
  
  ::kentik::capacity_plan::v202212::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::Config* CapacityPlan::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::Config>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::kentik::capacity_plan::v202212::Config* CapacityPlan::mutable_config() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.config)
  return _internal_mutable_config();
}
inline void CapacityPlan::set_allocated_config(::kentik::capacity_plan::v202212::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.config)
}

// .kentik.capacity_plan.v202212.SummaryStatus summary_status = 7[json_name = "summaryStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CapacityPlan::_internal_has_summary_status() const {
  return this != internal_default_instance() && summary_status_ != nullptr;
}
inline bool CapacityPlan::has_summary_status() const {
  return _internal_has_summary_status();
}
inline void CapacityPlan::clear_summary_status() {
  if (GetArena() == nullptr && summary_status_ != nullptr) {
    delete summary_status_;
  }
  summary_status_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus& CapacityPlan::_internal_summary_status() const {
  const ::kentik::capacity_plan::v202212::SummaryStatus* p = summary_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::SummaryStatus*>(
      &::kentik::capacity_plan::v202212::_SummaryStatus_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::SummaryStatus& CapacityPlan::summary_status() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.CapacityPlan.summary_status)
  return _internal_summary_status();
}
inline void CapacityPlan::unsafe_arena_set_allocated_summary_status(
    ::kentik::capacity_plan::v202212::SummaryStatus* summary_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_status_);
  }
  summary_status_ = summary_status;
  if (summary_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.summary_status)
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacityPlan::release_summary_status() {
  auto temp = unsafe_arena_release_summary_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacityPlan::unsafe_arena_release_summary_status() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.CapacityPlan.summary_status)
  
  ::kentik::capacity_plan::v202212::SummaryStatus* temp = summary_status_;
  summary_status_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacityPlan::_internal_mutable_summary_status() {
  
  if (summary_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::SummaryStatus>(GetArena());
    summary_status_ = p;
  }
  return summary_status_;
}
inline ::kentik::capacity_plan::v202212::SummaryStatus* CapacityPlan::mutable_summary_status() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.CapacityPlan.summary_status)
  return _internal_mutable_summary_status();
}
inline void CapacityPlan::set_allocated_summary_status(::kentik::capacity_plan::v202212::SummaryStatus* summary_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_status_;
  }
  if (summary_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary_status);
    if (message_arena != submessage_arena) {
      summary_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_status, submessage_arena);
    }
    
  } else {
    
  }
  summary_status_ = summary_status;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.CapacityPlan.summary_status)
}

// -------------------------------------------------------------------

// ListCapacitySummariesRequest

// -------------------------------------------------------------------

// ListCapacitySummariesResponse

// repeated .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListCapacitySummariesResponse::_internal_capacity_size() const {
  return capacity_.size();
}
inline int ListCapacitySummariesResponse::capacity_size() const {
  return _internal_capacity_size();
}
inline void ListCapacitySummariesResponse::clear_capacity() {
  capacity_.Clear();
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* ListCapacitySummariesResponse::mutable_capacity(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.capacity)
  return capacity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacitySummary >*
ListCapacitySummariesResponse::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable_list:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.capacity)
  return &capacity_;
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary& ListCapacitySummariesResponse::_internal_capacity(int index) const {
  return capacity_.Get(index);
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary& ListCapacitySummariesResponse::capacity(int index) const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.capacity)
  return _internal_capacity(index);
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* ListCapacitySummariesResponse::_internal_add_capacity() {
  return capacity_.Add();
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* ListCapacitySummariesResponse::add_capacity() {
  // @@protoc_insertion_point(field_add:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.capacity)
  return _internal_add_capacity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacitySummary >&
ListCapacitySummariesResponse::capacity() const {
  // @@protoc_insertion_point(field_list:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.capacity)
  return capacity_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListCapacitySummariesResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCapacitySummariesResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCapacitySummariesResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListCapacitySummariesResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListCapacitySummariesResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.ListCapacitySummariesResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetCapacitySummaryRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetCapacitySummaryRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCapacitySummaryRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
  return _internal_id();
}
inline void GetCapacitySummaryRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
}
inline std::string* GetCapacitySummaryRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetCapacitySummaryRequest::_internal_id() const {
  return id_.Get();
}
inline void GetCapacitySummaryRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCapacitySummaryRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
}
inline void GetCapacitySummaryRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
}
inline void GetCapacitySummaryRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
}
inline std::string* GetCapacitySummaryRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCapacitySummaryRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCapacitySummaryRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
}
inline std::string* GetCapacitySummaryRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetCapacitySummaryRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.GetCapacitySummaryRequest.id)
}

// -------------------------------------------------------------------

// GetCapacitySummaryResponse

// .kentik.capacity_plan.v202212.CapacitySummary capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetCapacitySummaryResponse::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GetCapacitySummaryResponse::has_capacity() const {
  return _internal_has_capacity();
}
inline void GetCapacitySummaryResponse::clear_capacity() {
  if (GetArena() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary& GetCapacitySummaryResponse::_internal_capacity() const {
  const ::kentik::capacity_plan::v202212::CapacitySummary* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::CapacitySummary*>(
      &::kentik::capacity_plan::v202212::_CapacitySummary_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::CapacitySummary& GetCapacitySummaryResponse::capacity() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.GetCapacitySummaryResponse.capacity)
  return _internal_capacity();
}
inline void GetCapacitySummaryResponse::unsafe_arena_set_allocated_capacity(
    ::kentik::capacity_plan::v202212::CapacitySummary* capacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  capacity_ = capacity;
  if (capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.GetCapacitySummaryResponse.capacity)
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* GetCapacitySummaryResponse::release_capacity() {
  auto temp = unsafe_arena_release_capacity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* GetCapacitySummaryResponse::unsafe_arena_release_capacity() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.GetCapacitySummaryResponse.capacity)
  
  ::kentik::capacity_plan::v202212::CapacitySummary* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* GetCapacitySummaryResponse::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacitySummary>(GetArena());
    capacity_ = p;
  }
  return capacity_;
}
inline ::kentik::capacity_plan::v202212::CapacitySummary* GetCapacitySummaryResponse::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.GetCapacitySummaryResponse.capacity)
  return _internal_mutable_capacity();
}
inline void GetCapacitySummaryResponse::set_allocated_capacity(::kentik::capacity_plan::v202212::CapacitySummary* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capacity_;
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capacity);
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.GetCapacitySummaryResponse.capacity)
}

// -------------------------------------------------------------------

// ListCapacityPlansRequest

// -------------------------------------------------------------------

// ListCapacityPlansResponse

// repeated .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListCapacityPlansResponse::_internal_capacity_size() const {
  return capacity_.size();
}
inline int ListCapacityPlansResponse::capacity_size() const {
  return _internal_capacity_size();
}
inline void ListCapacityPlansResponse::clear_capacity() {
  capacity_.Clear();
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* ListCapacityPlansResponse::mutable_capacity(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.ListCapacityPlansResponse.capacity)
  return capacity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan >*
ListCapacityPlansResponse::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable_list:kentik.capacity_plan.v202212.ListCapacityPlansResponse.capacity)
  return &capacity_;
}
inline const ::kentik::capacity_plan::v202212::CapacityPlan& ListCapacityPlansResponse::_internal_capacity(int index) const {
  return capacity_.Get(index);
}
inline const ::kentik::capacity_plan::v202212::CapacityPlan& ListCapacityPlansResponse::capacity(int index) const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.ListCapacityPlansResponse.capacity)
  return _internal_capacity(index);
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* ListCapacityPlansResponse::_internal_add_capacity() {
  return capacity_.Add();
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* ListCapacityPlansResponse::add_capacity() {
  // @@protoc_insertion_point(field_add:kentik.capacity_plan.v202212.ListCapacityPlansResponse.capacity)
  return _internal_add_capacity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::capacity_plan::v202212::CapacityPlan >&
ListCapacityPlansResponse::capacity() const {
  // @@protoc_insertion_point(field_list:kentik.capacity_plan.v202212.ListCapacityPlansResponse.capacity)
  return capacity_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListCapacityPlansResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCapacityPlansResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCapacityPlansResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.ListCapacityPlansResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListCapacityPlansResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListCapacityPlansResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.ListCapacityPlansResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetCapacityPlanRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetCapacityPlanRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCapacityPlanRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
  return _internal_id();
}
inline void GetCapacityPlanRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
}
inline std::string* GetCapacityPlanRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetCapacityPlanRequest::_internal_id() const {
  return id_.Get();
}
inline void GetCapacityPlanRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCapacityPlanRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
}
inline void GetCapacityPlanRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
}
inline void GetCapacityPlanRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
}
inline std::string* GetCapacityPlanRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCapacityPlanRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCapacityPlanRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
}
inline std::string* GetCapacityPlanRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetCapacityPlanRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.GetCapacityPlanRequest.id)
}

// -------------------------------------------------------------------

// GetCapacityPlanResponse

// .kentik.capacity_plan.v202212.CapacityPlan capacity = 1[json_name = "capacity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetCapacityPlanResponse::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GetCapacityPlanResponse::has_capacity() const {
  return _internal_has_capacity();
}
inline void GetCapacityPlanResponse::clear_capacity() {
  if (GetArena() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
inline const ::kentik::capacity_plan::v202212::CapacityPlan& GetCapacityPlanResponse::_internal_capacity() const {
  const ::kentik::capacity_plan::v202212::CapacityPlan* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::capacity_plan::v202212::CapacityPlan*>(
      &::kentik::capacity_plan::v202212::_CapacityPlan_default_instance_);
}
inline const ::kentik::capacity_plan::v202212::CapacityPlan& GetCapacityPlanResponse::capacity() const {
  // @@protoc_insertion_point(field_get:kentik.capacity_plan.v202212.GetCapacityPlanResponse.capacity)
  return _internal_capacity();
}
inline void GetCapacityPlanResponse::unsafe_arena_set_allocated_capacity(
    ::kentik::capacity_plan::v202212::CapacityPlan* capacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  capacity_ = capacity;
  if (capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.capacity_plan.v202212.GetCapacityPlanResponse.capacity)
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* GetCapacityPlanResponse::release_capacity() {
  auto temp = unsafe_arena_release_capacity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* GetCapacityPlanResponse::unsafe_arena_release_capacity() {
  // @@protoc_insertion_point(field_release:kentik.capacity_plan.v202212.GetCapacityPlanResponse.capacity)
  
  ::kentik::capacity_plan::v202212::CapacityPlan* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* GetCapacityPlanResponse::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::capacity_plan::v202212::CapacityPlan>(GetArena());
    capacity_ = p;
  }
  return capacity_;
}
inline ::kentik::capacity_plan::v202212::CapacityPlan* GetCapacityPlanResponse::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:kentik.capacity_plan.v202212.GetCapacityPlanResponse.capacity)
  return _internal_mutable_capacity();
}
inline void GetCapacityPlanResponse::set_allocated_capacity(::kentik::capacity_plan::v202212::CapacityPlan* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capacity_;
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capacity);
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:kentik.capacity_plan.v202212.GetCapacityPlanResponse.capacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202212
}  // namespace capacity_plan
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fcapacity_5fplan_2fv202212_2fcapacity_5fplan_2eproto
