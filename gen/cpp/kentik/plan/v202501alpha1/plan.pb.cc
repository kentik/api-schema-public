// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/plan/v202501alpha1/plan.proto

#include "kentik/plan/v202501alpha1/plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto;
namespace kentik {
namespace plan {
namespace v202501alpha1 {
class ListPlansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPlansRequest> _instance;
} _ListPlansRequest_default_instance_;
class ListPlansResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPlansResponse> _instance;
} _ListPlansResponse_default_instance_;
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
static void InitDefaultsscc_info_ListPlansRequest_kentik_2fplan_2fv202501alpha1_2fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::plan::v202501alpha1::_ListPlansRequest_default_instance_;
    new (ptr) ::kentik::plan::v202501alpha1::ListPlansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::plan::v202501alpha1::ListPlansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPlansRequest_kentik_2fplan_2fv202501alpha1_2fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPlansRequest_kentik_2fplan_2fv202501alpha1_2fplan_2eproto}, {}};

static void InitDefaultsscc_info_ListPlansResponse_kentik_2fplan_2fv202501alpha1_2fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::plan::v202501alpha1::_ListPlansResponse_default_instance_;
    new (ptr) ::kentik::plan::v202501alpha1::ListPlansResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::plan::v202501alpha1::ListPlansResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPlansResponse_kentik_2fplan_2fv202501alpha1_2fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPlansResponse_kentik_2fplan_2fv202501alpha1_2fplan_2eproto}, {
      &scc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fplan_2fv202501alpha1_2fplan_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::ListPlansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::ListPlansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::ListPlansResponse, plans_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::plan::v202501alpha1::ListPlansRequest)},
  { 5, -1, sizeof(::kentik::plan::v202501alpha1::ListPlansResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::plan::v202501alpha1::_ListPlansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::plan::v202501alpha1::_ListPlansResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fplan_2fv202501alpha1_2fplan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$kentik/plan/v202501alpha1/plan.proto\022\031"
  "kentik.plan.v202501alpha1\032\034google/api/an"
  "notations.proto\032\027google/api/client.proto"
  "\032\037google/api/field_behavior.proto\032.proto"
  "c-gen-openapiv2/options/annotations.prot"
  "o\032%kentik/core/v202303/annotations.proto"
  "\032,kentik/plan/v202501alpha1/plan_message"
  ".proto\"\022\n\020ListPlansRequest\"J\n\021ListPlansR"
  "esponse\0225\n\005plans\030\001 \003(\0132\037.kentik.plan.v20"
  "2501alpha1.PlanR\005plans2\216\002\n\013PlanService\022\324"
  "\001\n\tListPlans\022+.kentik.plan.v202501alpha1"
  ".ListPlansRequest\032,.kentik.plan.v202501a"
  "lpha1.ListPlansResponse\"l\222AM\022\nList Plans"
  "\0324Returns all plans configured for the u"
  "ser\'s company.*\tListPlans\202\323\344\223\002\026\022\024/plans/"
  "v202501alpha1\032(\312A\023grpc.api.kentik.com\352\327\002"
  "\nadmin.plan\220\330\002\003B\206\004ZIgithub.com/kentik/ap"
  "i-schema-public/gen/go/kentik/plan/v2025"
  "01alpha1;plan\222A\267\003\022\257\001\n\010Plan API\022M# Overvi"
  "ew\nThe Plan API enables programmatic acc"
  "ess to information on Plans.\n\"E\n\026Kentik "
  "API Engineering\022+https://github.com/kent"
  "ik/api-schema-public2\rv202501alpha1*\001\0022\020"
  "application/json:\020application/jsonZD\n\036\n\005"
  "email\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010"
  "\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n"
  "\005token\022\000r~\nJKnowledge base article fully"
  " describing the content of a Plan JSON o"
  "bject.\0220https://kb.kentik.com/v0/Ec10.ht"
  "m#Ec10-Plan_JSONb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto_sccs[2] = {
  &scc_info_ListPlansRequest_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.base,
  &scc_info_ListPlansResponse_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fplan_2fv202501alpha1_2fplan_2eproto, "kentik/plan/v202501alpha1/plan.proto", 1184,
  &descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto_once, descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto_sccs, descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_2eproto::offsets,
  file_level_metadata_kentik_2fplan_2fv202501alpha1_2fplan_2eproto, 2, file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_2eproto, file_level_service_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fplan_2fv202501alpha1_2fplan_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto)), true);
namespace kentik {
namespace plan {
namespace v202501alpha1 {

// ===================================================================

void ListPlansRequest::InitAsDefaultInstance() {
}
class ListPlansRequest::_Internal {
 public:
};

ListPlansRequest::ListPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.plan.v202501alpha1.ListPlansRequest)
}
ListPlansRequest::ListPlansRequest(const ListPlansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.plan.v202501alpha1.ListPlansRequest)
}

void ListPlansRequest::SharedCtor() {
}

ListPlansRequest::~ListPlansRequest() {
  // @@protoc_insertion_point(destructor:kentik.plan.v202501alpha1.ListPlansRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPlansRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPlansRequest::ArenaDtor(void* object) {
  ListPlansRequest* _this = reinterpret_cast< ListPlansRequest* >(object);
  (void)_this;
}
void ListPlansRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPlansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPlansRequest& ListPlansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPlansRequest_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.base);
  return *internal_default_instance();
}


void ListPlansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.plan.v202501alpha1.ListPlansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPlansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPlansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.plan.v202501alpha1.ListPlansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.plan.v202501alpha1.ListPlansRequest)
  return target;
}

size_t ListPlansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.plan.v202501alpha1.ListPlansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPlansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.plan.v202501alpha1.ListPlansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPlansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPlansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.plan.v202501alpha1.ListPlansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.plan.v202501alpha1.ListPlansRequest)
    MergeFrom(*source);
  }
}

void ListPlansRequest::MergeFrom(const ListPlansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.plan.v202501alpha1.ListPlansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListPlansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.plan.v202501alpha1.ListPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPlansRequest::CopyFrom(const ListPlansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.plan.v202501alpha1.ListPlansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPlansRequest::IsInitialized() const {
  return true;
}

void ListPlansRequest::InternalSwap(ListPlansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPlansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPlansResponse::InitAsDefaultInstance() {
}
class ListPlansResponse::_Internal {
 public:
};

void ListPlansResponse::clear_plans() {
  plans_.Clear();
}
ListPlansResponse::ListPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  plans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.plan.v202501alpha1.ListPlansResponse)
}
ListPlansResponse::ListPlansResponse(const ListPlansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      plans_(from.plans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.plan.v202501alpha1.ListPlansResponse)
}

void ListPlansResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPlansResponse_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.base);
}

ListPlansResponse::~ListPlansResponse() {
  // @@protoc_insertion_point(destructor:kentik.plan.v202501alpha1.ListPlansResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPlansResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPlansResponse::ArenaDtor(void* object) {
  ListPlansResponse* _this = reinterpret_cast< ListPlansResponse* >(object);
  (void)_this;
}
void ListPlansResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPlansResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPlansResponse& ListPlansResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPlansResponse_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.base);
  return *internal_default_instance();
}


void ListPlansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.plan.v202501alpha1.ListPlansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plans_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPlansResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.plan.v202501alpha1.Plan plans = 1[json_name = "plans"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPlansResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.plan.v202501alpha1.ListPlansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.plan.v202501alpha1.Plan plans = 1[json_name = "plans"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_plans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.plan.v202501alpha1.ListPlansResponse)
  return target;
}

size_t ListPlansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.plan.v202501alpha1.ListPlansResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.plan.v202501alpha1.Plan plans = 1[json_name = "plans"];
  total_size += 1UL * this->_internal_plans_size();
  for (const auto& msg : this->plans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPlansResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.plan.v202501alpha1.ListPlansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPlansResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPlansResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.plan.v202501alpha1.ListPlansResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.plan.v202501alpha1.ListPlansResponse)
    MergeFrom(*source);
  }
}

void ListPlansResponse::MergeFrom(const ListPlansResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.plan.v202501alpha1.ListPlansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plans_.MergeFrom(from.plans_);
}

void ListPlansResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.plan.v202501alpha1.ListPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPlansResponse::CopyFrom(const ListPlansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.plan.v202501alpha1.ListPlansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPlansResponse::IsInitialized() const {
  return true;
}

void ListPlansResponse::InternalSwap(ListPlansResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  plans_.InternalSwap(&other->plans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPlansResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::plan::v202501alpha1::ListPlansRequest* Arena::CreateMaybeMessage< ::kentik::plan::v202501alpha1::ListPlansRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::plan::v202501alpha1::ListPlansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::plan::v202501alpha1::ListPlansResponse* Arena::CreateMaybeMessage< ::kentik::plan::v202501alpha1::ListPlansResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::plan::v202501alpha1::ListPlansResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
