// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/plan/v202501alpha1/plan_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto;
namespace kentik {
namespace plan {
namespace v202501alpha1 {
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class PlanDevice;
class PlanDeviceDefaultTypeInternal;
extern PlanDeviceDefaultTypeInternal _PlanDevice_default_instance_;
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::plan::v202501alpha1::Plan* Arena::CreateMaybeMessage<::kentik::plan::v202501alpha1::Plan>(Arena*);
template<> ::kentik::plan::v202501alpha1::PlanDevice* Arena::CreateMaybeMessage<::kentik::plan::v202501alpha1::PlanDevice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace plan {
namespace v202501alpha1 {

enum DeviceSubtype : int {
  DEVICE_SUBTYPE_UNSPECIFIED = 0,
  DEVICE_SUBTYPE_A10_CGN = 1,
  DEVICE_SUBTYPE_ADVANCED_SFLOW = 2,
  DEVICE_SUBTYPE_AWS_SUBNET = 3,
  DEVICE_SUBTYPE_AZURE_SUBNET = 4,
  DEVICE_SUBTYPE_CISCO_ASA = 5,
  DEVICE_SUBTYPE_CISCO_ASA_SYSLOG = 6,
  DEVICE_SUBTYPE_CISCO_NBAR = 7,
  DEVICE_SUBTYPE_CISCO_NVZFLOW = 8,
  DEVICE_SUBTYPE_CISCO_SDWAN_XE = 9,
  DEVICE_SUBTYPE_CISCO_ZONE_BASED_FIREWALL = 10,
  DEVICE_SUBTYPE_DARKNET = 11,
  DEVICE_SUBTYPE_FORTINET_FORTIGATE = 12,
  DEVICE_SUBTYPE_GCP_CLOUD_RUN = 13,
  DEVICE_SUBTYPE_GCP_SUBNET = 14,
  DEVICE_SUBTYPE_GIGAMON = 15,
  DEVICE_SUBTYPE_IBM_SUBNET = 16,
  DEVICE_SUBTYPE_IOS_XR = 17,
  DEVICE_SUBTYPE_ISTIO = 18,
  DEVICE_SUBTYPE_JUNIPER_DDOS = 19,
  DEVICE_SUBTYPE_KAGENT = 20,
  DEVICE_SUBTYPE_KAPPA = 21,
  DEVICE_SUBTYPE_KMETRICS = 22,
  DEVICE_SUBTYPE_KPROBE = 23,
  DEVICE_SUBTYPE_KROBE_TAP = 24,
  DEVICE_SUBTYPE_KPROXY = 25,
  DEVICE_SUBTYPE_MERAKI = 26,
  DEVICE_SUBTYPE_MPLS = 27,
  DEVICE_SUBTYPE_NOKIALAYER2 = 28,
  DEVICE_SUBTYPE_NPROBE = 29,
  DEVICE_SUBTYPE_OCI_FLOW_LOG = 30,
  DEVICE_SUBTYPE_OCI_SUBNET = 31,
  DEVICE_SUBTYPE_OPEN_NMS = 32,
  DEVICE_SUBTYPE_PALOALTO = 33,
  DEVICE_SUBTYPE_PALOALTO_PRISMASDWAN = 34,
  DEVICE_SUBTYPE_PFE_SYSLOG = 35,
  DEVICE_SUBTYPE_ROUTER = 36,
  DEVICE_SUBTYPE_SFLOW_TUNNEL = 37,
  DEVICE_SUBTYPE_SILVERPEAK = 38,
  DEVICE_SUBTYPE_SYSLOG = 39,
  DEVICE_SUBTYPE_VERSA = 40,
  DEVICE_SUBTYPE_VIPTELA = 41,
  DEVICE_SUBTYPE_VMWARE_VELOCLOUD = 42,
  DEVICE_SUBTYPE_VMWARE_VSPHERE = 43,
  DEVICE_SUBTYPE_VXLAN = 44,
  DEVICE_SUBTYPE_KSYNTH = 45,
  DEVICE_SUBTYPE_SDM_LEADER = 46,
  DeviceSubtype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceSubtype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceSubtype_IsValid(int value);
constexpr DeviceSubtype DeviceSubtype_MIN = DEVICE_SUBTYPE_UNSPECIFIED;
constexpr DeviceSubtype DeviceSubtype_MAX = DEVICE_SUBTYPE_SDM_LEADER;
constexpr int DeviceSubtype_ARRAYSIZE = DeviceSubtype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceSubtype_descriptor();
template<typename T>
inline const std::string& DeviceSubtype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceSubtype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceSubtype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceSubtype_descriptor(), enum_t_value);
}
inline bool DeviceSubtype_Parse(
    const std::string& name, DeviceSubtype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceSubtype>(
    DeviceSubtype_descriptor(), name, value);
}
// ===================================================================

class PlanDevice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.plan.v202501alpha1.PlanDevice) */ {
 public:
  inline PlanDevice() : PlanDevice(nullptr) {};
  virtual ~PlanDevice();

  PlanDevice(const PlanDevice& from);
  PlanDevice(PlanDevice&& from) noexcept
    : PlanDevice() {
    *this = ::std::move(from);
  }

  inline PlanDevice& operator=(const PlanDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanDevice& operator=(PlanDevice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanDevice* internal_default_instance() {
    return reinterpret_cast<const PlanDevice*>(
               &_PlanDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanDevice& a, PlanDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanDevice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanDevice* New() const final {
    return CreateMaybeMessage<PlanDevice>(nullptr);
  }

  PlanDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanDevice& from);
  void MergeFrom(const PlanDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.plan.v202501alpha1.PlanDevice";
  }
  protected:
  explicit PlanDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto);
    return ::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
    kDeviceSubtypeFieldNumber = 3,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_name(
      std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_subtype();
  ::kentik::plan::v202501alpha1::DeviceSubtype device_subtype() const;
  void set_device_subtype(::kentik::plan::v202501alpha1::DeviceSubtype value);
  private:
  ::kentik::plan::v202501alpha1::DeviceSubtype _internal_device_subtype() const;
  void _internal_set_device_subtype(::kentik::plan::v202501alpha1::DeviceSubtype value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.plan.v202501alpha1.PlanDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  int device_subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Plan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.plan.v202501alpha1.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {};
  virtual ~Plan();

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(nullptr);
  }

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.plan.v202501alpha1.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto);
    return ::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTypesFieldNumber = 14,
    kDevicesFieldNumber = 15,
    kIdFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCreatedDateFieldNumber = 11,
    kUpdatedDateFieldNumber = 12,
    kMaxDevicesFieldNumber = 6,
    kActiveFieldNumber = 5,
    kBgpEnabledFieldNumber = 8,
    kMaxFpsFieldNumber = 7,
    kFastRetentionFieldNumber = 9,
    kFullRetentionFieldNumber = 10,
    kMaxBigdataFpsFieldNumber = 13,
  };
  // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14[json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int device_types_size() const;
  private:
  int _internal_device_types_size() const;
  public:
  void clear_device_types();
  private:
  ::kentik::plan::v202501alpha1::DeviceSubtype _internal_device_types(int index) const;
  void _internal_add_device_types(::kentik::plan::v202501alpha1::DeviceSubtype value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_device_types();
  public:
  ::kentik::plan::v202501alpha1::DeviceSubtype device_types(int index) const;
  void set_device_types(int index, ::kentik::plan::v202501alpha1::DeviceSubtype value);
  void add_device_types(::kentik::plan::v202501alpha1::DeviceSubtype value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& device_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_device_types();

  // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::plan::v202501alpha1::PlanDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::PlanDevice >*
      mutable_devices();
  private:
  const ::kentik::plan::v202501alpha1::PlanDevice& _internal_devices(int index) const;
  ::kentik::plan::v202501alpha1::PlanDevice* _internal_add_devices();
  public:
  const ::kentik::plan::v202501alpha1::PlanDevice& devices(int index) const;
  ::kentik::plan::v202501alpha1::PlanDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::PlanDevice >&
      devices() const;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_company_id();
  const std::string& company_id() const;
  void set_company_id(const std::string& value);
  void set_company_id(std::string&& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  std::string* mutable_company_id();
  std::string* release_company_id();
  void set_allocated_company_id(std::string* company_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_company_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_company_id(
      std::string* company_id);
  private:
  const std::string& _internal_company_id() const;
  void _internal_set_company_id(const std::string& value);
  std::string* _internal_mutable_company_id();
  public:

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp created_date = 11[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_created_date() const;
  private:
  bool _internal_has_created_date() const;
  public:
  void clear_created_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_date();
  void set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_date();
  public:
  void unsafe_arena_set_allocated_created_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_date();

  // .google.protobuf.Timestamp updated_date = 12[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_updated_date() const;
  private:
  bool _internal_has_updated_date() const;
  public:
  void clear_updated_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_date();
  void set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_date();
  public:
  void unsafe_arena_set_allocated_updated_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_date();

  // int32 max_devices = 6[json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_devices();
  ::PROTOBUF_NAMESPACE_ID::int32 max_devices() const;
  void set_max_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_devices() const;
  void _internal_set_max_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool active = 5[json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // bool bgp_enabled = 8[json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_bgp_enabled();
  bool bgp_enabled() const;
  void set_bgp_enabled(bool value);
  private:
  bool _internal_bgp_enabled() const;
  void _internal_set_bgp_enabled(bool value);
  public:

  // int32 max_fps = 7[json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 max_fps() const;
  void set_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_fps() const;
  void _internal_set_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fast_retention = 9[json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_fast_retention();
  ::PROTOBUF_NAMESPACE_ID::int32 fast_retention() const;
  void set_fast_retention(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fast_retention() const;
  void _internal_set_fast_retention(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 full_retention = 10[json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_full_retention();
  ::PROTOBUF_NAMESPACE_ID::int32 full_retention() const;
  void set_full_retention(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_full_retention() const;
  void _internal_set_full_retention(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_bigdata_fps = 13[json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_bigdata_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 max_bigdata_fps() const;
  void set_max_bigdata_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_bigdata_fps() const;
  void _internal_set_max_bigdata_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.plan.v202501alpha1.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> device_types_;
  mutable std::atomic<int> _device_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::PlanDevice > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_devices_;
  bool active_;
  bool bgp_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_fps_;
  ::PROTOBUF_NAMESPACE_ID::int32 fast_retention_;
  ::PROTOBUF_NAMESPACE_ID::int32 full_retention_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_bigdata_fps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanDevice

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PlanDevice::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlanDevice::id() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.PlanDevice.id)
  return _internal_id();
}
inline void PlanDevice::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.PlanDevice.id)
}
inline std::string* PlanDevice::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.PlanDevice.id)
  return _internal_mutable_id();
}
inline const std::string& PlanDevice::_internal_id() const {
  return id_.Get();
}
inline void PlanDevice::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlanDevice::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.plan.v202501alpha1.PlanDevice.id)
}
inline void PlanDevice::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.plan.v202501alpha1.PlanDevice.id)
}
inline void PlanDevice::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.plan.v202501alpha1.PlanDevice.id)
}
inline std::string* PlanDevice::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlanDevice::release_id() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.PlanDevice.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlanDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.PlanDevice.id)
}
inline std::string* PlanDevice::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.plan.v202501alpha1.PlanDevice.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlanDevice::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.PlanDevice.id)
}

// string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PlanDevice::clear_device_name() {
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlanDevice::device_name() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.PlanDevice.device_name)
  return _internal_device_name();
}
inline void PlanDevice::set_device_name(const std::string& value) {
  _internal_set_device_name(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.PlanDevice.device_name)
}
inline std::string* PlanDevice::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.PlanDevice.device_name)
  return _internal_mutable_device_name();
}
inline const std::string& PlanDevice::_internal_device_name() const {
  return device_name_.Get();
}
inline void PlanDevice::_internal_set_device_name(const std::string& value) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlanDevice::set_device_name(std::string&& value) {
  
  device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.plan.v202501alpha1.PlanDevice.device_name)
}
inline void PlanDevice::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.plan.v202501alpha1.PlanDevice.device_name)
}
inline void PlanDevice::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.plan.v202501alpha1.PlanDevice.device_name)
}
inline std::string* PlanDevice::_internal_mutable_device_name() {
  
  return device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlanDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.PlanDevice.device_name)
  return device_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlanDevice::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.PlanDevice.device_name)
}
inline std::string* PlanDevice::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.plan.v202501alpha1.PlanDevice.device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlanDevice::unsafe_arena_set_allocated_device_name(
    std::string* device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.PlanDevice.device_name)
}

// .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PlanDevice::clear_device_subtype() {
  device_subtype_ = 0;
}
inline ::kentik::plan::v202501alpha1::DeviceSubtype PlanDevice::_internal_device_subtype() const {
  return static_cast< ::kentik::plan::v202501alpha1::DeviceSubtype >(device_subtype_);
}
inline ::kentik::plan::v202501alpha1::DeviceSubtype PlanDevice::device_subtype() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.PlanDevice.device_subtype)
  return _internal_device_subtype();
}
inline void PlanDevice::_internal_set_device_subtype(::kentik::plan::v202501alpha1::DeviceSubtype value) {
  
  device_subtype_ = value;
}
inline void PlanDevice::set_device_subtype(::kentik::plan::v202501alpha1::DeviceSubtype value) {
  _internal_set_device_subtype(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.PlanDevice.device_subtype)
}

// -------------------------------------------------------------------

// Plan

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::id() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.id)
  return _internal_id();
}
inline void Plan::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.id)
}
inline std::string* Plan::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.id)
  return _internal_mutable_id();
}
inline const std::string& Plan::_internal_id() const {
  return id_.Get();
}
inline void Plan::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.plan.v202501alpha1.Plan.id)
}
inline void Plan::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.plan.v202501alpha1.Plan.id)
}
inline void Plan::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.plan.v202501alpha1.Plan.id)
}
inline std::string* Plan::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_id() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.Plan.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.Plan.id)
}
inline std::string* Plan::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.plan.v202501alpha1.Plan.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Plan::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.Plan.id)
}

// string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_company_id() {
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.company_id)
  return _internal_company_id();
}
inline void Plan::set_company_id(const std::string& value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.company_id)
}
inline std::string* Plan::mutable_company_id() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.company_id)
  return _internal_mutable_company_id();
}
inline const std::string& Plan::_internal_company_id() const {
  return company_id_.Get();
}
inline void Plan::_internal_set_company_id(const std::string& value) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_company_id(std::string&& value) {
  
  company_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.plan.v202501alpha1.Plan.company_id)
}
inline void Plan::set_company_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.plan.v202501alpha1.Plan.company_id)
}
inline void Plan::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.plan.v202501alpha1.Plan.company_id)
}
inline std::string* Plan::_internal_mutable_company_id() {
  
  return company_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_company_id() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.Plan.company_id)
  return company_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_company_id(std::string* company_id) {
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.Plan.company_id)
}
inline std::string* Plan::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.plan.v202501alpha1.Plan.company_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return company_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Plan::unsafe_arena_set_allocated_company_id(
    std::string* company_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.Plan.company_id)
}

// string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::name() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.name)
  return _internal_name();
}
inline void Plan::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.name)
}
inline std::string* Plan::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.name)
  return _internal_mutable_name();
}
inline const std::string& Plan::_internal_name() const {
  return name_.Get();
}
inline void Plan::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.plan.v202501alpha1.Plan.name)
}
inline void Plan::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.plan.v202501alpha1.Plan.name)
}
inline void Plan::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.plan.v202501alpha1.Plan.name)
}
inline std::string* Plan::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_name() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.Plan.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.Plan.name)
}
inline std::string* Plan::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.plan.v202501alpha1.Plan.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Plan::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.Plan.name)
}

// string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::description() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.description)
  return _internal_description();
}
inline void Plan::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.description)
}
inline std::string* Plan::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.description)
  return _internal_mutable_description();
}
inline const std::string& Plan::_internal_description() const {
  return description_.Get();
}
inline void Plan::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.plan.v202501alpha1.Plan.description)
}
inline void Plan::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.plan.v202501alpha1.Plan.description)
}
inline void Plan::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.plan.v202501alpha1.Plan.description)
}
inline std::string* Plan::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_description() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.Plan.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.Plan.description)
}
inline std::string* Plan::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.plan.v202501alpha1.Plan.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Plan::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.Plan.description)
}

// bool active = 5[json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_active() {
  active_ = false;
}
inline bool Plan::_internal_active() const {
  return active_;
}
inline bool Plan::active() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.active)
  return _internal_active();
}
inline void Plan::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Plan::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.active)
}

// int32 max_devices = 6[json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_max_devices() {
  max_devices_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::_internal_max_devices() const {
  return max_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::max_devices() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.max_devices)
  return _internal_max_devices();
}
inline void Plan::_internal_set_max_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_devices_ = value;
}
inline void Plan::set_max_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_devices(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.max_devices)
}

// int32 max_fps = 7[json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_max_fps() {
  max_fps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::_internal_max_fps() const {
  return max_fps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::max_fps() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.max_fps)
  return _internal_max_fps();
}
inline void Plan::_internal_set_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_fps_ = value;
}
inline void Plan::set_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_fps(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.max_fps)
}

// bool bgp_enabled = 8[json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_bgp_enabled() {
  bgp_enabled_ = false;
}
inline bool Plan::_internal_bgp_enabled() const {
  return bgp_enabled_;
}
inline bool Plan::bgp_enabled() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.bgp_enabled)
  return _internal_bgp_enabled();
}
inline void Plan::_internal_set_bgp_enabled(bool value) {
  
  bgp_enabled_ = value;
}
inline void Plan::set_bgp_enabled(bool value) {
  _internal_set_bgp_enabled(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.bgp_enabled)
}

// int32 fast_retention = 9[json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_fast_retention() {
  fast_retention_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::_internal_fast_retention() const {
  return fast_retention_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::fast_retention() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.fast_retention)
  return _internal_fast_retention();
}
inline void Plan::_internal_set_fast_retention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fast_retention_ = value;
}
inline void Plan::set_fast_retention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fast_retention(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.fast_retention)
}

// int32 full_retention = 10[json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_full_retention() {
  full_retention_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::_internal_full_retention() const {
  return full_retention_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::full_retention() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.full_retention)
  return _internal_full_retention();
}
inline void Plan::_internal_set_full_retention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  full_retention_ = value;
}
inline void Plan::set_full_retention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_full_retention(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.full_retention)
}

// .google.protobuf.Timestamp created_date = 11[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Plan::_internal_has_created_date() const {
  return this != internal_default_instance() && created_date_ != nullptr;
}
inline bool Plan::has_created_date() const {
  return _internal_has_created_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Plan::_internal_created_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Plan::created_date() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.created_date)
  return _internal_created_date();
}
inline void Plan::unsafe_arena_set_allocated_created_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  created_date_ = created_date;
  if (created_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.Plan.created_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::release_created_date() {
  auto temp = unsafe_arena_release_created_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::unsafe_arena_release_created_date() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.Plan.created_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_date_;
  created_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::_internal_mutable_created_date() {
  
  if (created_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_date_ = p;
  }
  return created_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::mutable_created_date() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.created_date)
  return _internal_mutable_created_date();
}
inline void Plan::set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  if (created_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date)->GetArena();
    if (message_arena != submessage_arena) {
      created_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_date, submessage_arena);
    }
    
  } else {
    
  }
  created_date_ = created_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.Plan.created_date)
}

// .google.protobuf.Timestamp updated_date = 12[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Plan::_internal_has_updated_date() const {
  return this != internal_default_instance() && updated_date_ != nullptr;
}
inline bool Plan::has_updated_date() const {
  return _internal_has_updated_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Plan::_internal_updated_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Plan::updated_date() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.updated_date)
  return _internal_updated_date();
}
inline void Plan::unsafe_arena_set_allocated_updated_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  updated_date_ = updated_date;
  if (updated_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.plan.v202501alpha1.Plan.updated_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::release_updated_date() {
  auto temp = unsafe_arena_release_updated_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::unsafe_arena_release_updated_date() {
  // @@protoc_insertion_point(field_release:kentik.plan.v202501alpha1.Plan.updated_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_date_;
  updated_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::_internal_mutable_updated_date() {
  
  if (updated_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_date_ = p;
  }
  return updated_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Plan::mutable_updated_date() {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.updated_date)
  return _internal_mutable_updated_date();
}
inline void Plan::set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  if (updated_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date)->GetArena();
    if (message_arena != submessage_arena) {
      updated_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_date, submessage_arena);
    }
    
  } else {
    
  }
  updated_date_ = updated_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.plan.v202501alpha1.Plan.updated_date)
}

// int32 max_bigdata_fps = 13[json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_max_bigdata_fps() {
  max_bigdata_fps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::_internal_max_bigdata_fps() const {
  return max_bigdata_fps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Plan::max_bigdata_fps() const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.max_bigdata_fps)
  return _internal_max_bigdata_fps();
}
inline void Plan::_internal_set_max_bigdata_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_bigdata_fps_ = value;
}
inline void Plan::set_max_bigdata_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_bigdata_fps(value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.max_bigdata_fps)
}

// repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14[json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Plan::_internal_device_types_size() const {
  return device_types_.size();
}
inline int Plan::device_types_size() const {
  return _internal_device_types_size();
}
inline void Plan::clear_device_types() {
  device_types_.Clear();
}
inline ::kentik::plan::v202501alpha1::DeviceSubtype Plan::_internal_device_types(int index) const {
  return static_cast< ::kentik::plan::v202501alpha1::DeviceSubtype >(device_types_.Get(index));
}
inline ::kentik::plan::v202501alpha1::DeviceSubtype Plan::device_types(int index) const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.device_types)
  return _internal_device_types(index);
}
inline void Plan::set_device_types(int index, ::kentik::plan::v202501alpha1::DeviceSubtype value) {
  device_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.plan.v202501alpha1.Plan.device_types)
}
inline void Plan::_internal_add_device_types(::kentik::plan::v202501alpha1::DeviceSubtype value) {
  device_types_.Add(value);
}
inline void Plan::add_device_types(::kentik::plan::v202501alpha1::DeviceSubtype value) {
  // @@protoc_insertion_point(field_add:kentik.plan.v202501alpha1.Plan.device_types)
  _internal_add_device_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Plan::device_types() const {
  // @@protoc_insertion_point(field_list:kentik.plan.v202501alpha1.Plan.device_types)
  return device_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Plan::_internal_mutable_device_types() {
  return &device_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Plan::mutable_device_types() {
  // @@protoc_insertion_point(field_mutable_list:kentik.plan.v202501alpha1.Plan.device_types)
  return _internal_mutable_device_types();
}

// repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Plan::_internal_devices_size() const {
  return devices_.size();
}
inline int Plan::devices_size() const {
  return _internal_devices_size();
}
inline void Plan::clear_devices() {
  devices_.Clear();
}
inline ::kentik::plan::v202501alpha1::PlanDevice* Plan::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.Plan.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::PlanDevice >*
Plan::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.plan.v202501alpha1.Plan.devices)
  return &devices_;
}
inline const ::kentik::plan::v202501alpha1::PlanDevice& Plan::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::plan::v202501alpha1::PlanDevice& Plan::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.Plan.devices)
  return _internal_devices(index);
}
inline ::kentik::plan::v202501alpha1::PlanDevice* Plan::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::plan::v202501alpha1::PlanDevice* Plan::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.plan.v202501alpha1.Plan.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::PlanDevice >&
Plan::devices() const {
  // @@protoc_insertion_point(field_list:kentik.plan.v202501alpha1.Plan.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::plan::v202501alpha1::DeviceSubtype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::plan::v202501alpha1::DeviceSubtype>() {
  return ::kentik::plan::v202501alpha1::DeviceSubtype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto
