// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/plan/v202501alpha1/plan_message.proto

#include "kentik/plan/v202501alpha1/plan_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto;
namespace kentik {
namespace plan {
namespace v202501alpha1 {
class PlanDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanDevice> _instance;
} _PlanDevice_default_instance_;
class PlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plan> _instance;
} _Plan_default_instance_;
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
static void InitDefaultsscc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::plan::v202501alpha1::_Plan_default_instance_;
    new (ptr) ::kentik::plan::v202501alpha1::Plan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::plan::v202501alpha1::Plan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::plan::v202501alpha1::_PlanDevice_default_instance_;
    new (ptr) ::kentik::plan::v202501alpha1::PlanDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::plan::v202501alpha1::PlanDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, device_subtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, company_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, active_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, max_devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, max_fps_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, bgp_enabled_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, fast_retention_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, full_retention_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, created_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, updated_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, max_bigdata_fps_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, device_types_),
  PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, devices_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::plan::v202501alpha1::PlanDevice)},
  { 8, -1, sizeof(::kentik::plan::v202501alpha1::Plan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::plan::v202501alpha1::_PlanDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::plan::v202501alpha1::_Plan_default_instance_),
};

const char descriptor_table_protodef_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,kentik/plan/v202501alpha1/plan_message"
  ".proto\022\031kentik.plan.v202501alpha1\032\034googl"
  "e/api/annotations.proto\032\027google/api/clie"
  "nt.proto\032\037google/api/field_behavior.prot"
  "o\032.protoc-gen-openapiv2/options/annotati"
  "ons.proto\032\037google/protobuf/timestamp.pro"
  "to\"\344\002\n\nPlanDevice\022]\n\002id\030\001 \001(\tBM\222AF2DThe "
  "system-assigned unique ID of a device as"
  "sociated with this plan.\342A\001\003R\002id\022g\n\013devi"
  "ce_name\030\002 \001(\tBF\222A\?2=The user-assigned na"
  "me of a device associated with this plan"
  ".\342A\001\002R\ndeviceName\022\215\001\n\016device_subtype\030\003 \001"
  "(\0162(.kentik.plan.v202501alpha1.DeviceSub"
  "typeB<\222A523A type of device that sends f"
  "low records to Kentik.\342A\001\002R\rdeviceSubtyp"
  "e\"\206\r\n\004Plan\022C\n\002id\030\001 \001(\tB3\222A,2*The system-"
  "assigned unique ID of the plan.\342A\001\003R\002id\022"
  "[\n\ncompany_id\030\002 \001(\tB<\222A523The system-ass"
  "igned unique ID of your organization.\342A\001"
  "\003R\tcompanyId\022{\n\004name\030\003 \001(\tBg\222A`2^A name "
  "for the plan. Every Kentik customer is i"
  "nitially provided with a plan called \"De"
  "fault.\"\342A\001\002R\004name\022K\n\013description\030\004 \001(\tB)"
  "\222A&2$An optional description of the plan"
  ".R\013description\022J\n\006active\030\005 \001(\010B2\222A/2-Ind"
  "icates if the plan is currently activate"
  "d.R\006active\022y\n\013max_devices\030\006 \001(\005BX\222AU2STh"
  "e maximum number of devices that can sen"
  "d flow records to Kentik under this plan"
  ".R\nmaxDevices\022\214\001\n\007max_fps\030\007 \001(\005Bs\222Ap2nPe"
  "r device limit on flow records per secon"
  "d that can be sent to Kentik (excess FPS"
  " may trigger rate-limiting).R\006maxFps\022\217\001\n"
  "\013bgp_enabled\030\010 \001(\010Bn\222Ak2iIndicates wheth"
  "er or not devices on this plan may be pe"
  "ered to enable Kentik to collect BGP rou"
  "ting data.R\nbgpEnabled\022o\n\016fast_retention"
  "\030\t \001(\005BH\222AE2CThe number of days that dat"
  "a will be stored in the Fast dataseries."
  "R\rfastRetention\022o\n\016full_retention\030\n \001(\005B"
  "H\222AE2CThe number of days that data will "
  "be stored in the Full dataseries.R\rfullR"
  "etention\022\201\001\n\014created_date\030\013 \001(\0132\032.google"
  ".protobuf.TimestampBB\222A;29The system-ass"
  "igned date-time of filter creation, in U"
  "TC.\342A\001\003R\013createdDate\022\212\001\n\014updated_date\030\014 "
  "\001(\0132\032.google.protobuf.TimestampBK\222AD2BTh"
  "e system-assigned date-time of most-rece"
  "nt modification, in UTC.\342A\001\003R\013updatedDat"
  "e\022R\n\017max_bigdata_fps\030\r \001(\005B*\222A\'2%Max FPS"
  " applied to fast data rollups.R\rmaxBigda"
  "taFps\022o\n\014device_types\030\016 \003(\0162(.kentik.pla"
  "n.v202501alpha1.DeviceSubtypeB\"\222A\0372\035The "
  "types of allowed devices.R\013deviceTypes\022r"
  "\n\007devices\030\017 \003(\0132%.kentik.plan.v202501alp"
  "ha1.PlanDeviceB1\222A.2,The devices current"
  "ly assigned to this plan.R\007devices*\267\013\n\rD"
  "eviceSubtype\022\036\n\032DEVICE_SUBTYPE_UNSPECIFI"
  "ED\020\000\022\032\n\026DEVICE_SUBTYPE_A10_CGN\020\001\022!\n\035DEVI"
  "CE_SUBTYPE_ADVANCED_SFLOW\020\002\022\035\n\031DEVICE_SU"
  "BTYPE_AWS_SUBNET\020\003\022\037\n\033DEVICE_SUBTYPE_AZU"
  "RE_SUBNET\020\004\022\034\n\030DEVICE_SUBTYPE_CISCO_ASA\020"
  "\005\022#\n\037DEVICE_SUBTYPE_CISCO_ASA_SYSLOG\020\006\022\035"
  "\n\031DEVICE_SUBTYPE_CISCO_NBAR\020\007\022 \n\034DEVICE_"
  "SUBTYPE_CISCO_NVZFLOW\020\010\022!\n\035DEVICE_SUBTYP"
  "E_CISCO_SDWAN_XE\020\t\022,\n(DEVICE_SUBTYPE_CIS"
  "CO_ZONE_BASED_FIREWALL\020\n\022\032\n\026DEVICE_SUBTY"
  "PE_DARKNET\020\013\022%\n!DEVICE_SUBTYPE_FORTINET_"
  "FORTIGATE\020\014\022 \n\034DEVICE_SUBTYPE_GCP_CLOUD_"
  "RUN\020\r\022\035\n\031DEVICE_SUBTYPE_GCP_SUBNET\020\016\022\032\n\026"
  "DEVICE_SUBTYPE_GIGAMON\020\017\022\035\n\031DEVICE_SUBTY"
  "PE_IBM_SUBNET\020\020\022\031\n\025DEVICE_SUBTYPE_IOS_XR"
  "\020\021\022\030\n\024DEVICE_SUBTYPE_ISTIO\020\022\022\037\n\033DEVICE_S"
  "UBTYPE_JUNIPER_DDOS\020\023\022\031\n\025DEVICE_SUBTYPE_"
  "KAGENT\020\024\022\030\n\024DEVICE_SUBTYPE_KAPPA\020\025\022\033\n\027DE"
  "VICE_SUBTYPE_KMETRICS\020\026\022\031\n\025DEVICE_SUBTYP"
  "E_KPROBE\020\027\022\034\n\030DEVICE_SUBTYPE_KROBE_TAP\020\030"
  "\022\031\n\025DEVICE_SUBTYPE_KPROXY\020\031\022\031\n\025DEVICE_SU"
  "BTYPE_MERAKI\020\032\022\027\n\023DEVICE_SUBTYPE_MPLS\020\033\022"
  "\036\n\032DEVICE_SUBTYPE_NOKIALAYER2\020\034\022\031\n\025DEVIC"
  "E_SUBTYPE_NPROBE\020\035\022\037\n\033DEVICE_SUBTYPE_OCI"
  "_FLOW_LOG\020\036\022\035\n\031DEVICE_SUBTYPE_OCI_SUBNET"
  "\020\037\022\033\n\027DEVICE_SUBTYPE_OPEN_NMS\020 \022\033\n\027DEVIC"
  "E_SUBTYPE_PALOALTO\020!\022\'\n#DEVICE_SUBTYPE_P"
  "ALOALTO_PRISMASDWAN\020\"\022\035\n\031DEVICE_SUBTYPE_"
  "PFE_SYSLOG\020#\022\031\n\025DEVICE_SUBTYPE_ROUTER\020$\022"
  "\037\n\033DEVICE_SUBTYPE_SFLOW_TUNNEL\020%\022\035\n\031DEVI"
  "CE_SUBTYPE_SILVERPEAK\020&\022\031\n\025DEVICE_SUBTYP"
  "E_SYSLOG\020\'\022\030\n\024DEVICE_SUBTYPE_VERSA\020(\022\032\n\026"
  "DEVICE_SUBTYPE_VIPTELA\020)\022#\n\037DEVICE_SUBTY"
  "PE_VMWARE_VELOCLOUD\020*\022!\n\035DEVICE_SUBTYPE_"
  "VMWARE_VSPHERE\020+\022\030\n\024DEVICE_SUBTYPE_VXLAN"
  "\020,\022\031\n\025DEVICE_SUBTYPE_KSYNTH\020-\022\035\n\031DEVICE_"
  "SUBTYPE_SDM_LEADER\020.BKZIgithub.com/kenti"
  "k/api-schema-public/gen/go/kentik/plan/v"
  "202501alpha1;planb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_sccs[2] = {
  &scc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base,
  &scc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto, "kentik/plan/v202501alpha1/plan_message.proto", 3825,
  &descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_once, descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_sccs, descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto::offsets,
  file_level_metadata_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto, 2, file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto, file_level_service_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto)), true);
namespace kentik {
namespace plan {
namespace v202501alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceSubtype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto);
  return file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[0];
}
bool DeviceSubtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlanDevice::InitAsDefaultInstance() {
}
class PlanDevice::_Internal {
 public:
};

PlanDevice::PlanDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.plan.v202501alpha1.PlanDevice)
}
PlanDevice::PlanDevice(const PlanDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  device_subtype_ = from.device_subtype_;
  // @@protoc_insertion_point(copy_constructor:kentik.plan.v202501alpha1.PlanDevice)
}

void PlanDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_subtype_ = 0;
}

PlanDevice::~PlanDevice() {
  // @@protoc_insertion_point(destructor:kentik.plan.v202501alpha1.PlanDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlanDevice::ArenaDtor(void* object) {
  PlanDevice* _this = reinterpret_cast< PlanDevice* >(object);
  (void)_this;
}
void PlanDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanDevice& PlanDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanDevice_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void PlanDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.plan.v202501alpha1.PlanDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_subtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.plan.v202501alpha1.PlanDevice.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.plan.v202501alpha1.PlanDevice.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_subtype(static_cast<::kentik::plan::v202501alpha1::DeviceSubtype>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.plan.v202501alpha1.PlanDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.plan.v202501alpha1.PlanDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.plan.v202501alpha1.PlanDevice.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_device_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.plan.v202501alpha1.PlanDevice)
  return target;
}

size_t PlanDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.plan.v202501alpha1.PlanDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_subtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.plan.v202501alpha1.PlanDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.plan.v202501alpha1.PlanDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.plan.v202501alpha1.PlanDevice)
    MergeFrom(*source);
  }
}

void PlanDevice::MergeFrom(const PlanDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.plan.v202501alpha1.PlanDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.device_subtype() != 0) {
    _internal_set_device_subtype(from._internal_device_subtype());
  }
}

void PlanDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.plan.v202501alpha1.PlanDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanDevice::CopyFrom(const PlanDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.plan.v202501alpha1.PlanDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanDevice::IsInitialized() const {
  return true;
}

void PlanDevice::InternalSwap(PlanDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(device_subtype_, other->device_subtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plan::InitAsDefaultInstance() {
  ::kentik::plan::v202501alpha1::_Plan_default_instance_._instance.get_mutable()->created_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::plan::v202501alpha1::_Plan_default_instance_._instance.get_mutable()->updated_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Plan::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_date(const Plan* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date(const Plan* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Plan::_Internal::created_date(const Plan* msg) {
  return *msg->created_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Plan::_Internal::updated_date(const Plan* msg) {
  return *msg->updated_date_;
}
void Plan::clear_created_date() {
  if (GetArena() == nullptr && created_date_ != nullptr) {
    delete created_date_;
  }
  created_date_ = nullptr;
}
void Plan::clear_updated_date() {
  if (GetArena() == nullptr && updated_date_ != nullptr) {
    delete updated_date_;
  }
  updated_date_ = nullptr;
}
Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_types_(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.plan.v202501alpha1.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_types_(from.device_types_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_created_date()) {
    created_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_date_);
  } else {
    created_date_ = nullptr;
  }
  if (from._internal_has_updated_date()) {
    updated_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_date_);
  } else {
    updated_date_ = nullptr;
  }
  ::memcpy(&max_devices_, &from.max_devices_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bigdata_fps_) -
    reinterpret_cast<char*>(&max_devices_)) + sizeof(max_bigdata_fps_));
  // @@protoc_insertion_point(copy_constructor:kentik.plan.v202501alpha1.Plan)
}

void Plan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bigdata_fps_) -
      reinterpret_cast<char*>(&created_date_)) + sizeof(max_bigdata_fps_));
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:kentik.plan.v202501alpha1.Plan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Plan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_date_;
  if (this != internal_default_instance()) delete updated_date_;
}

void Plan::ArenaDtor(void* object) {
  Plan* _this = reinterpret_cast< Plan* >(object);
  (void)_this;
}
void Plan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plan& Plan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plan_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.plan.v202501alpha1.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_types_.Clear();
  devices_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_date_ != nullptr) {
    delete created_date_;
  }
  created_date_ = nullptr;
  if (GetArena() == nullptr && updated_date_ != nullptr) {
    delete updated_date_;
  }
  updated_date_ = nullptr;
  ::memset(&max_devices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bigdata_fps_) -
      reinterpret_cast<char*>(&max_devices_)) + sizeof(max_bigdata_fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.plan.v202501alpha1.Plan.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.plan.v202501alpha1.Plan.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.plan.v202501alpha1.Plan.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.plan.v202501alpha1.Plan.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 5[json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_devices = 6[json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_fps = 7[json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bgp_enabled = 8[json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bgp_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fast_retention = 9[json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fast_retention_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 full_retention = 10[json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          full_retention_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_date = 11[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_date = 12[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_bigdata_fps = 13[json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          max_bigdata_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14[json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_device_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_device_types(static_cast<::kentik::plan::v202501alpha1::DeviceSubtype>(val));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.plan.v202501alpha1.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.plan.v202501alpha1.Plan.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.plan.v202501alpha1.Plan.company_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_id(), target);
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.plan.v202501alpha1.Plan.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.plan.v202501alpha1.Plan.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // bool active = 5[json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_active(), target);
  }

  // int32 max_devices = 6[json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_devices(), target);
  }

  // int32 max_fps = 7[json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_fps(), target);
  }

  // bool bgp_enabled = 8[json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_bgp_enabled(), target);
  }

  // int32 fast_retention = 9[json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->fast_retention() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_fast_retention(), target);
  }

  // int32 full_retention = 10[json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->full_retention() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_full_retention(), target);
  }

  // .google.protobuf.Timestamp created_date = 11[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_created_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::created_date(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_date = 12[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_updated_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::updated_date(this), target, stream);
  }

  // int32 max_bigdata_fps = 13[json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_bigdata_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_bigdata_fps(), target);
  }

  // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14[json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    int byte_size = _device_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          14, device_types_, byte_size, target);
    }
  }

  // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.plan.v202501alpha1.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.plan.v202501alpha1.Plan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14[json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_device_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_device_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _device_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp created_date = 11[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_created_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_date_);
  }

  // .google.protobuf.Timestamp updated_date = 12[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_updated_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_date_);
  }

  // int32 max_devices = 6[json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_devices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_devices());
  }

  // bool active = 5[json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // bool bgp_enabled = 8[json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_fps = 7[json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_fps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_fps());
  }

  // int32 fast_retention = 9[json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->fast_retention() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fast_retention());
  }

  // int32 full_retention = 10[json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->full_retention() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_full_retention());
  }

  // int32 max_bigdata_fps = 13[json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_bigdata_fps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_bigdata_fps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.plan.v202501alpha1.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  const Plan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.plan.v202501alpha1.Plan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.plan.v202501alpha1.Plan)
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.plan.v202501alpha1.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_types_.MergeFrom(from.device_types_);
  devices_.MergeFrom(from.devices_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_created_date()) {
    _internal_mutable_created_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_date());
  }
  if (from.has_updated_date()) {
    _internal_mutable_updated_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_date());
  }
  if (from.max_devices() != 0) {
    _internal_set_max_devices(from._internal_max_devices());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.bgp_enabled() != 0) {
    _internal_set_bgp_enabled(from._internal_bgp_enabled());
  }
  if (from.max_fps() != 0) {
    _internal_set_max_fps(from._internal_max_fps());
  }
  if (from.fast_retention() != 0) {
    _internal_set_fast_retention(from._internal_fast_retention());
  }
  if (from.full_retention() != 0) {
    _internal_set_full_retention(from._internal_full_retention());
  }
  if (from.max_bigdata_fps() != 0) {
    _internal_set_max_bigdata_fps(from._internal_max_bigdata_fps());
  }
}

void Plan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.plan.v202501alpha1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.plan.v202501alpha1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_types_.InternalSwap(&other->device_types_);
  devices_.InternalSwap(&other->devices_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plan, max_bigdata_fps_)
      + sizeof(Plan::max_bigdata_fps_)
      - PROTOBUF_FIELD_OFFSET(Plan, created_date_)>(
          reinterpret_cast<char*>(&created_date_),
          reinterpret_cast<char*>(&other->created_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::plan::v202501alpha1::PlanDevice* Arena::CreateMaybeMessage< ::kentik::plan::v202501alpha1::PlanDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::plan::v202501alpha1::PlanDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::plan::v202501alpha1::Plan* Arena::CreateMaybeMessage< ::kentik::plan::v202501alpha1::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::plan::v202501alpha1::Plan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
