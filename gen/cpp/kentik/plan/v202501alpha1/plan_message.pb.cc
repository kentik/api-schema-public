// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/plan/v202501alpha1/plan_message.proto
// Protobuf C++ Version: 5.29.3

#include "kentik/plan/v202501alpha1/plan_message.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kentik {
namespace plan {
namespace v202501alpha1 {

inline constexpr PlanDevice::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_subtype_{static_cast< ::kentik::plan::v202501alpha1::DeviceSubtype >(0)},
        device_type_{static_cast< ::kentik::plan::v202501alpha1::DeviceSubtype >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlanDevice::PlanDevice(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlanDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanDeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanDeviceDefaultTypeInternal() {}
  union {
    PlanDevice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanDeviceDefaultTypeInternal _PlanDevice_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Plan_MetadataEntry_DoNotUse::Plan_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Plan_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Plan_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Plan_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Plan_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Plan_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Plan_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Plan_MetadataEntry_DoNotUseDefaultTypeInternal _Plan_MetadataEntry_DoNotUse_default_instance_;

inline constexpr Plan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_types_{},
        _device_types_cached_byte_size_{0},
        devices_{},
        metadata_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_date_{nullptr},
        updated_date_{nullptr},
        max_devices_{0},
        active_{false},
        bgp_enabled_{false},
        max_fps_{0},
        fast_retention_{0},
        full_retention_{0},
        max_bigdata_fps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Plan::Plan(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanDefaultTypeInternal() {}
  union {
    Plan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanDefaultTypeInternal _Plan_default_instance_;
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto = nullptr;
const ::uint32_t
    TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, _impl_.device_name_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, _impl_.device_subtype_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::PlanDevice, _impl_.device_type_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.company_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.active_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.max_devices_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.max_fps_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.bgp_enabled_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.fast_retention_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.full_retention_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.created_date_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.updated_date_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.max_bigdata_fps_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.device_types_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.devices_),
        PROTOBUF_FIELD_OFFSET(::kentik::plan::v202501alpha1::Plan, _impl_.metadata_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kentik::plan::v202501alpha1::PlanDevice)},
        {12, 22, -1, sizeof(::kentik::plan::v202501alpha1::Plan_MetadataEntry_DoNotUse)},
        {24, 48, -1, sizeof(::kentik::plan::v202501alpha1::Plan)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kentik::plan::v202501alpha1::_PlanDevice_default_instance_._instance,
    &::kentik::plan::v202501alpha1::_Plan_MetadataEntry_DoNotUse_default_instance_._instance,
    &::kentik::plan::v202501alpha1::_Plan_default_instance_._instance,
};
const char descriptor_table_protodef_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n,kentik/plan/v202501alpha1/plan_message"
    ".proto\022\031kentik.plan.v202501alpha1\032\034googl"
    "e/api/annotations.proto\032\027google/api/clie"
    "nt.proto\032\037google/api/field_behavior.prot"
    "o\032.protoc-gen-openapiv2/options/annotati"
    "ons.proto\032\037google/protobuf/timestamp.pro"
    "to\"\352\003\n\nPlanDevice\022\\\n\002id\030\001 \001(\tBL\222AF2DThe "
    "system-assigned unique ID of a device as"
    "sociated with this plan.\340A\003R\002id\022f\n\013devic"
    "e_name\030\002 \001(\tBE\222A\?2=The user-assigned nam"
    "e of a device associated with this plan."
    "\340A\002R\ndeviceName\022\214\001\n\016device_subtype\030\003 \001(\016"
    "2(.kentik.plan.v202501alpha1.DeviceSubty"
    "peB;\222A523A type of device that sends flo"
    "w records to Kentik.\340A\002R\rdeviceSubtype\022\206"
    "\001\n\013device_type\030\004 \001(\0162(.kentik.plan.v2025"
    "01alpha1.DeviceSubtypeB;\222A523A type of d"
    "evice that sends flow records to Kentik."
    "\340A\002R\ndeviceType\"\305\016\n\004Plan\022B\n\002id\030\001 \001(\tB2\222A"
    ",2*The system-assigned unique ID of the "
    "plan.\340A\003R\002id\022Z\n\ncompany_id\030\002 \001(\tB;\222A523T"
    "he system-assigned unique ID of your org"
    "anization.\340A\003R\tcompanyId\022z\n\004name\030\003 \001(\tBf"
    "\222A`2^A name for the plan. Every Kentik c"
    "ustomer is initially provided with a pla"
    "n called \"Default.\"\340A\002R\004name\022K\n\013descript"
    "ion\030\004 \001(\tB)\222A&2$An optional description "
    "of the plan.R\013description\022J\n\006active\030\005 \001("
    "\010B2\222A/2-Indicates if the plan is current"
    "ly activated.R\006active\022y\n\013max_devices\030\006 \001"
    "(\005BX\222AU2SThe maximum number of devices t"
    "hat can send flow records to Kentik unde"
    "r this plan.R\nmaxDevices\022\214\001\n\007max_fps\030\007 \001"
    "(\005Bs\222Ap2nPer device limit on flow record"
    "s per second that can be sent to Kentik "
    "(excess FPS may trigger rate-limiting).R"
    "\006maxFps\022\217\001\n\013bgp_enabled\030\010 \001(\010Bn\222Ak2iIndi"
    "cates whether or not devices on this pla"
    "n may be peered to enable Kentik to coll"
    "ect BGP routing data.R\nbgpEnabled\022o\n\016fas"
    "t_retention\030\t \001(\005BH\222AE2CThe number of da"
    "ys that data will be stored in the Fast "
    "dataseries.R\rfastRetention\022o\n\016full_reten"
    "tion\030\n \001(\005BH\222AE2CThe number of days that"
    " data will be stored in the Full dataser"
    "ies.R\rfullRetention\022\200\001\n\014created_date\030\013 \001"
    "(\0132\032.google.protobuf.TimestampBA\222A;29The"
    " system-assigned date-time of filter cre"
    "ation, in UTC.\340A\003R\013createdDate\022\211\001\n\014updat"
    "ed_date\030\014 \001(\0132\032.google.protobuf.Timestam"
    "pBJ\222AD2BThe system-assigned date-time of"
    " most-recent modification, in UTC.\340A\003R\013u"
    "pdatedDate\022R\n\017max_bigdata_fps\030\r \001(\005B*\222A\'"
    "2%Max FPS applied to fast data rollups.R"
    "\rmaxBigdataFps\022o\n\014device_types\030\016 \003(\0162(.k"
    "entik.plan.v202501alpha1.DeviceSubtypeB\""
    "\222A\0372\035The types of allowed devices.R\013devi"
    "ceTypes\022r\n\007devices\030\017 \003(\0132%.kentik.plan.v"
    "202501alpha1.PlanDeviceB1\222A.2,The device"
    "s currently assigned to this plan.R\007devi"
    "ces\022\204\001\n\010metadata\030\020 \003(\0132-.kentik.plan.v20"
    "2501alpha1.Plan.MetadataEntryB9\222A624Addi"
    "tional custom metadata associated with t"
    "he plan.R\010metadata\032;\n\rMetadataEntry\022\020\n\003k"
    "ey\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001*"
    "\337\013\n\rDeviceSubtype\022\036\n\032DEVICE_SUBTYPE_UNSP"
    "ECIFIED\020\000\022\032\n\026DEVICE_SUBTYPE_A10_CGN\020\001\022!\n"
    "\035DEVICE_SUBTYPE_ADVANCED_SFLOW\020\002\022\035\n\031DEVI"
    "CE_SUBTYPE_AWS_SUBNET\020\003\022\037\n\033DEVICE_SUBTYP"
    "E_AZURE_SUBNET\020\004\022\034\n\030DEVICE_SUBTYPE_CISCO"
    "_ASA\020\005\022#\n\037DEVICE_SUBTYPE_CISCO_ASA_SYSLO"
    "G\020\006\022\035\n\031DEVICE_SUBTYPE_CISCO_NBAR\020\007\022 \n\034DE"
    "VICE_SUBTYPE_CISCO_NVZFLOW\020\010\022!\n\035DEVICE_S"
    "UBTYPE_CISCO_SDWAN_XE\020\t\022,\n(DEVICE_SUBTYP"
    "E_CISCO_ZONE_BASED_FIREWALL\020\n\022\032\n\026DEVICE_"
    "SUBTYPE_DARKNET\020\013\022%\n!DEVICE_SUBTYPE_FORT"
    "INET_FORTIGATE\020\014\022 \n\034DEVICE_SUBTYPE_GCP_C"
    "LOUD_RUN\020\r\022\035\n\031DEVICE_SUBTYPE_GCP_SUBNET\020"
    "\016\022\032\n\026DEVICE_SUBTYPE_GIGAMON\020\017\022\035\n\031DEVICE_"
    "SUBTYPE_IBM_SUBNET\020\020\022\031\n\025DEVICE_SUBTYPE_I"
    "OS_XR\020\021\022\030\n\024DEVICE_SUBTYPE_ISTIO\020\022\022\037\n\033DEV"
    "ICE_SUBTYPE_JUNIPER_DDOS\020\023\022\031\n\025DEVICE_SUB"
    "TYPE_KAGENT\020\024\022\030\n\024DEVICE_SUBTYPE_KAPPA\020\025\022"
    "\033\n\027DEVICE_SUBTYPE_KMETRICS\020\026\022\031\n\025DEVICE_S"
    "UBTYPE_KPROBE\020\027\022\034\n\030DEVICE_SUBTYPE_KROBE_"
    "TAP\020\030\022\031\n\025DEVICE_SUBTYPE_KPROXY\020\031\022\031\n\025DEVI"
    "CE_SUBTYPE_MERAKI\020\032\022\027\n\023DEVICE_SUBTYPE_MP"
    "LS\020\033\022\036\n\032DEVICE_SUBTYPE_NOKIALAYER2\020\034\022\031\n\025"
    "DEVICE_SUBTYPE_NPROBE\020\035\022\037\n\033DEVICE_SUBTYP"
    "E_OCI_FLOW_LOG\020\036\022\035\n\031DEVICE_SUBTYPE_OCI_S"
    "UBNET\020\037\022\033\n\027DEVICE_SUBTYPE_OPEN_NMS\020 \022\033\n\027"
    "DEVICE_SUBTYPE_PALOALTO\020!\022\'\n#DEVICE_SUBT"
    "YPE_PALOALTO_PRISMASDWAN\020\"\022\035\n\031DEVICE_SUB"
    "TYPE_PFE_SYSLOG\020#\022\031\n\025DEVICE_SUBTYPE_ROUT"
    "ER\020$\022\037\n\033DEVICE_SUBTYPE_SFLOW_TUNNEL\020%\022\035\n"
    "\031DEVICE_SUBTYPE_SILVERPEAK\020&\022\031\n\025DEVICE_S"
    "UBTYPE_SYSLOG\020\'\022\030\n\024DEVICE_SUBTYPE_VERSA\020"
    "(\022\032\n\026DEVICE_SUBTYPE_VIPTELA\020)\022#\n\037DEVICE_"
    "SUBTYPE_VMWARE_VELOCLOUD\020*\022!\n\035DEVICE_SUB"
    "TYPE_VMWARE_VSPHERE\020+\022\030\n\024DEVICE_SUBTYPE_"
    "VXLAN\020,\022\031\n\025DEVICE_SUBTYPE_KSYNTH\020-\022\035\n\031DE"
    "VICE_SUBTYPE_SDM_LEADER\020.\022&\n\"DEVICE_SUBT"
    "YPE_HOST_NPROBE_DNS_WWW\020/BKZIgithub.com/"
    "kentik/api-schema-public/gen/go/kentik/p"
    "lan/v202501alpha1;planb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_deps[5] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fapi_2fclient_2eproto,
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto = {
    false,
    false,
    4190,
    descriptor_table_protodef_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
    "kentik/plan/v202501alpha1/plan_message.proto",
    &descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_once,
    descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto_deps,
    5,
    3,
    schemas,
    file_default_instances,
    TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto::offsets,
    file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
    file_level_service_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
};
namespace kentik {
namespace plan {
namespace v202501alpha1 {
const ::google::protobuf::EnumDescriptor* DeviceSubtype_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto);
  return file_level_enum_descriptors_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DeviceSubtype_internal_data_[] = {
    3145728u, 0u, };
bool DeviceSubtype_IsValid(int value) {
  return 0 <= value && value <= 47;
}
// ===================================================================

class PlanDevice::_Internal {
 public:
};

PlanDevice::PlanDevice(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.plan.v202501alpha1.PlanDevice)
}
inline PROTOBUF_NDEBUG_INLINE PlanDevice::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::plan::v202501alpha1::PlanDevice& from_msg)
      : id_(arena, from.id_),
        device_name_(arena, from.device_name_),
        _cached_size_{0} {}

PlanDevice::PlanDevice(
    ::google::protobuf::Arena* arena,
    const PlanDevice& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlanDevice* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, device_subtype_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, device_subtype_),
           offsetof(Impl_, device_type_) -
               offsetof(Impl_, device_subtype_) +
               sizeof(Impl_::device_type_));

  // @@protoc_insertion_point(copy_constructor:kentik.plan.v202501alpha1.PlanDevice)
}
inline PROTOBUF_NDEBUG_INLINE PlanDevice::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        device_name_(arena),
        _cached_size_{0} {}

inline void PlanDevice::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, device_subtype_),
           0,
           offsetof(Impl_, device_type_) -
               offsetof(Impl_, device_subtype_) +
               sizeof(Impl_::device_type_));
}
PlanDevice::~PlanDevice() {
  // @@protoc_insertion_point(destructor:kentik.plan.v202501alpha1.PlanDevice)
  SharedDtor(*this);
}
inline void PlanDevice::SharedDtor(MessageLite& self) {
  PlanDevice& this_ = static_cast<PlanDevice&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.device_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PlanDevice::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlanDevice(arena);
}
constexpr auto PlanDevice::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PlanDevice),
                                            alignof(PlanDevice));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlanDevice::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlanDevice_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlanDevice::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlanDevice>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlanDevice::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlanDevice>(), &PlanDevice::ByteSizeLong,
            &PlanDevice::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_._cached_size_),
        false,
    },
    &PlanDevice::kDescriptorMethods,
    &descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlanDevice::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 58, 2> PlanDevice::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::plan::v202501alpha1::PlanDevice>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.plan.v202501alpha1.DeviceSubtype device_type = 4 [json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlanDevice, _impl_.device_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_type_)}},
    // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.id_)}},
    // string device_name = 2 [json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_name_)}},
    // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3 [json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlanDevice, _impl_.device_subtype_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_subtype_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_name = 2 [json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3 [json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_subtype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kentik.plan.v202501alpha1.DeviceSubtype device_type = 4 [json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\44\2\13\0\0\0\0\0"
    "kentik.plan.v202501alpha1.PlanDevice"
    "id"
    "device_name"
  }},
};

PROTOBUF_NOINLINE void PlanDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.plan.v202501alpha1.PlanDevice)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.device_name_.ClearToEmpty();
  ::memset(&_impl_.device_subtype_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.device_type_) -
      reinterpret_cast<char*>(&_impl_.device_subtype_)) + sizeof(_impl_.device_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlanDevice::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlanDevice& this_ = static_cast<const PlanDevice&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlanDevice::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlanDevice& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.plan.v202501alpha1.PlanDevice)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.PlanDevice.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string device_name = 2 [json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_device_name().empty()) {
            const std::string& _s = this_._internal_device_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.PlanDevice.device_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3 [json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_device_subtype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_device_subtype(), target);
          }

          // .kentik.plan.v202501alpha1.DeviceSubtype device_type = 4 [json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_device_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_device_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.plan.v202501alpha1.PlanDevice)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlanDevice::ByteSizeLong(const MessageLite& base) {
          const PlanDevice& this_ = static_cast<const PlanDevice&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlanDevice::ByteSizeLong() const {
          const PlanDevice& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.plan.v202501alpha1.PlanDevice)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string device_name = 2 [json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (!this_._internal_device_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_name());
            }
            // .kentik.plan.v202501alpha1.DeviceSubtype device_subtype = 3 [json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_device_subtype() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_device_subtype());
            }
            // .kentik.plan.v202501alpha1.DeviceSubtype device_type = 4 [json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_device_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_device_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlanDevice::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlanDevice*>(&to_msg);
  auto& from = static_cast<const PlanDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.plan.v202501alpha1.PlanDevice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_device_subtype() != 0) {
    _this->_impl_.device_subtype_ = from._impl_.device_subtype_;
  }
  if (from._internal_device_type() != 0) {
    _this->_impl_.device_type_ = from._impl_.device_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlanDevice::CopyFrom(const PlanDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.plan.v202501alpha1.PlanDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlanDevice::InternalSwap(PlanDevice* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_name_, &other->_impl_.device_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_type_)
      + sizeof(PlanDevice::_impl_.device_type_)
      - PROTOBUF_FIELD_OFFSET(PlanDevice, _impl_.device_subtype_)>(
          reinterpret_cast<char*>(&_impl_.device_subtype_),
          reinterpret_cast<char*>(&other->_impl_.device_subtype_));
}

::google::protobuf::Metadata PlanDevice::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Plan_MetadataEntry_DoNotUse::Plan_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Plan_MetadataEntry_DoNotUse::Plan_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Plan_MetadataEntry_DoNotUse::Plan_MetadataEntry_DoNotUse() : SuperType() {}
              Plan_MetadataEntry_DoNotUse::Plan_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Plan_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Plan_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto Plan_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Plan_MetadataEntry_DoNotUse),
                                                          alignof(Plan_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Plan_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Plan_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Plan_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Plan_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Plan_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Plan_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Plan_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Plan_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Plan_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 61, 2> Plan_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Plan_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::plan::v202501alpha1::Plan_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Plan_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Plan_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(Plan_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(Plan_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\3\5\0\0\0\0\0"
    "kentik.plan.v202501alpha1.Plan.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class Plan::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Plan>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Plan, _impl_._has_bits_);
};

void Plan::clear_created_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_date_ != nullptr) _impl_.created_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Plan::clear_updated_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_date_ != nullptr) _impl_.updated_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Plan::Plan(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.plan.v202501alpha1.Plan)
}
inline PROTOBUF_NDEBUG_INLINE Plan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::plan::v202501alpha1::Plan& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        device_types_{visibility, arena, from.device_types_},
        _device_types_cached_byte_size_{0},
        devices_{visibility, arena, from.devices_},
        metadata_{visibility, arena, from.metadata_},
        id_(arena, from.id_),
        company_id_(arena, from.company_id_),
        name_(arena, from.name_),
        description_(arena, from.description_) {}

Plan::Plan(
    ::google::protobuf::Arena* arena,
    const Plan& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Plan* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_date_)
                        : nullptr;
  _impl_.updated_date_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.updated_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_devices_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, max_devices_),
           offsetof(Impl_, max_bigdata_fps_) -
               offsetof(Impl_, max_devices_) +
               sizeof(Impl_::max_bigdata_fps_));

  // @@protoc_insertion_point(copy_constructor:kentik.plan.v202501alpha1.Plan)
}
inline PROTOBUF_NDEBUG_INLINE Plan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        device_types_{visibility, arena},
        _device_types_cached_byte_size_{0},
        devices_{visibility, arena},
        metadata_{visibility, arena},
        id_(arena),
        company_id_(arena),
        name_(arena),
        description_(arena) {}

inline void Plan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_date_),
           0,
           offsetof(Impl_, max_bigdata_fps_) -
               offsetof(Impl_, created_date_) +
               sizeof(Impl_::max_bigdata_fps_));
}
Plan::~Plan() {
  // @@protoc_insertion_point(destructor:kentik.plan.v202501alpha1.Plan)
  SharedDtor(*this);
}
inline void Plan::SharedDtor(MessageLite& self) {
  Plan& this_ = static_cast<Plan&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.company_id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.description_.Destroy();
  delete this_._impl_.created_date_;
  delete this_._impl_.updated_date_;
  this_._impl_.~Impl_();
}

inline void* Plan::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Plan(arena);
}
constexpr auto Plan::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.device_types_) +
          decltype(Plan::_impl_.device_types_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.devices_) +
          decltype(Plan::_impl_.devices_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.metadata_) +
          decltype(Plan::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.metadata_) +
          decltype(Plan::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Plan), alignof(Plan), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Plan::PlacementNew_,
                                 sizeof(Plan),
                                 alignof(Plan));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Plan::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Plan_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Plan::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Plan>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Plan::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Plan>(), &Plan::ByteSizeLong,
            &Plan::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Plan, _impl_._cached_size_),
        false,
    },
    &Plan::kDescriptorMethods,
    &descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Plan::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 4, 90, 2> Plan::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Plan, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::plan::v202501alpha1::Plan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.id_)}},
    // string company_id = 2 [json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.company_id_)}},
    // string name = 3 [json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.name_)}},
    // string description = 4 [json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.description_)}},
    // bool active = 5 [json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Plan, _impl_.active_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.active_)}},
    // int32 max_devices = 6 [json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Plan, _impl_.max_devices_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_devices_)}},
    // int32 max_fps = 7 [json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Plan, _impl_.max_fps_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_fps_)}},
    // bool bgp_enabled = 8 [json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Plan, _impl_.bgp_enabled_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.bgp_enabled_)}},
    // int32 fast_retention = 9 [json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Plan, _impl_.fast_retention_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.fast_retention_)}},
    // int32 full_retention = 10 [json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Plan, _impl_.full_retention_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.full_retention_)}},
    // .google.protobuf.Timestamp created_date = 11 [json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastMtS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.created_date_)}},
    // .google.protobuf.Timestamp updated_date = 12 [json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastMtS1,
     {98, 1, 1, PROTOBUF_FIELD_OFFSET(Plan, _impl_.updated_date_)}},
    // int32 max_bigdata_fps = 13 [json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Plan, _impl_.max_bigdata_fps_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_bigdata_fps_)}},
    // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14 [json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastV32P1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.device_types_)}},
    // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15 [json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 2, PROTOBUF_FIELD_OFFSET(Plan, _impl_.devices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string company_id = 2 [json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.company_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 3 [json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 4 [json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool active = 5 [json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.active_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 max_devices = 6 [json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_devices_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_fps = 7 [json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_fps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool bgp_enabled = 8 [json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.bgp_enabled_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 fast_retention = 9 [json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.fast_retention_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 full_retention = 10 [json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.full_retention_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp created_date = 11 [json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.created_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp updated_date = 12 [json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.updated_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 max_bigdata_fps = 13 [json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_bigdata_fps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14 [json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.device_types_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15 [json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.devices_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, string> metadata = 16 [json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.metadata_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::kentik::plan::v202501alpha1::PlanDevice>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Plan()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\36\2\12\4\13\0\0\0\0\0\0\0\0\0\0\0\10\0\0\0\0\0\0\0"
    "kentik.plan.v202501alpha1.Plan"
    "id"
    "company_id"
    "name"
    "description"
    "metadata"
  }},
};

PROTOBUF_NOINLINE void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.plan.v202501alpha1.Plan)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_types_.Clear();
  _impl_.devices_.Clear();
  _impl_.metadata_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.company_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_date_ != nullptr);
      _impl_.created_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.updated_date_ != nullptr);
      _impl_.updated_date_->Clear();
    }
  }
  ::memset(&_impl_.max_devices_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_bigdata_fps_) -
      reinterpret_cast<char*>(&_impl_.max_devices_)) + sizeof(_impl_.max_bigdata_fps_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Plan::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Plan& this_ = static_cast<const Plan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Plan::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Plan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.plan.v202501alpha1.Plan)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string company_id = 2 [json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_company_id().empty()) {
            const std::string& _s = this_._internal_company_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.company_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string name = 3 [json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string description = 4 [json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.description");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool active = 5 [json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_active() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_active(), target);
          }

          // int32 max_devices = 6 [json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_max_devices() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_max_devices(), target);
          }

          // int32 max_fps = 7 [json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_max_fps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_max_fps(), target);
          }

          // bool bgp_enabled = 8 [json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_bgp_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_bgp_enabled(), target);
          }

          // int32 fast_retention = 9 [json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_fast_retention() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_fast_retention(), target);
          }

          // int32 full_retention = 10 [json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_full_retention() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_full_retention(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp created_date = 11 [json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.created_date_, this_._impl_.created_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp updated_date = 12 [json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.updated_date_, this_._impl_.updated_date_->GetCachedSize(), target,
                stream);
          }

          // int32 max_bigdata_fps = 13 [json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_max_bigdata_fps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_max_bigdata_fps(), target);
          }

          // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14 [json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          {
            std::size_t byte_size =
                                              this_._impl_._device_types_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  14, this_._internal_device_types(), byte_size, target);
            }
          }

          // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15 [json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_devices_size());
               i < n; i++) {
            const auto& repfield = this_._internal_devices().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    15, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // map<string, string> metadata = 16 [json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    16, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    16, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.plan.v202501alpha1.Plan.metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.plan.v202501alpha1.Plan)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Plan::ByteSizeLong(const MessageLite& base) {
          const Plan& this_ = static_cast<const Plan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Plan::ByteSizeLong() const {
          const Plan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.plan.v202501alpha1.Plan)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.plan.v202501alpha1.DeviceSubtype device_types = 14 [json_name = "deviceTypes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_device_types(), 1, this_._impl_._device_types_cached_byte_size_);
            }
            // repeated .kentik.plan.v202501alpha1.PlanDevice devices = 15 [json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size += 1UL * this_._internal_devices_size();
              for (const auto& msg : this_._internal_devices()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> metadata = 16 [json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string id = 1 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string company_id = 2 [json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (!this_._internal_company_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_company_id());
            }
            // string name = 3 [json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string description = 4 [json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp created_date = 11 [json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_date_);
            }
            // .google.protobuf.Timestamp updated_date = 12 [json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_date_);
            }
          }
           {
            // int32 max_devices = 6 [json_name = "maxDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_max_devices() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_devices());
            }
            // bool active = 5 [json_name = "active", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_active() != 0) {
              total_size += 2;
            }
            // bool bgp_enabled = 8 [json_name = "bgpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_bgp_enabled() != 0) {
              total_size += 2;
            }
            // int32 max_fps = 7 [json_name = "maxFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_max_fps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_fps());
            }
            // int32 fast_retention = 9 [json_name = "fastRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_fast_retention() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_fast_retention());
            }
            // int32 full_retention = 10 [json_name = "fullRetention", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_full_retention() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_full_retention());
            }
            // int32 max_bigdata_fps = 13 [json_name = "maxBigdataFps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_max_bigdata_fps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_bigdata_fps());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Plan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Plan*>(&to_msg);
  auto& from = static_cast<const Plan&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.plan.v202501alpha1.Plan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_device_types()->MergeFrom(from._internal_device_types());
  _this->_internal_mutable_devices()->MergeFrom(
      from._internal_devices());
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_company_id().empty()) {
    _this->_internal_set_company_id(from._internal_company_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.created_date_ != nullptr);
      if (_this->_impl_.created_date_ == nullptr) {
        _this->_impl_.created_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_date_);
      } else {
        _this->_impl_.created_date_->MergeFrom(*from._impl_.created_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.updated_date_ != nullptr);
      if (_this->_impl_.updated_date_ == nullptr) {
        _this->_impl_.updated_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.updated_date_);
      } else {
        _this->_impl_.updated_date_->MergeFrom(*from._impl_.updated_date_);
      }
    }
  }
  if (from._internal_max_devices() != 0) {
    _this->_impl_.max_devices_ = from._impl_.max_devices_;
  }
  if (from._internal_active() != 0) {
    _this->_impl_.active_ = from._impl_.active_;
  }
  if (from._internal_bgp_enabled() != 0) {
    _this->_impl_.bgp_enabled_ = from._impl_.bgp_enabled_;
  }
  if (from._internal_max_fps() != 0) {
    _this->_impl_.max_fps_ = from._impl_.max_fps_;
  }
  if (from._internal_fast_retention() != 0) {
    _this->_impl_.fast_retention_ = from._impl_.fast_retention_;
  }
  if (from._internal_full_retention() != 0) {
    _this->_impl_.full_retention_ = from._impl_.full_retention_;
  }
  if (from._internal_max_bigdata_fps() != 0) {
    _this->_impl_.max_bigdata_fps_ = from._impl_.max_bigdata_fps_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.plan.v202501alpha1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Plan::InternalSwap(Plan* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.device_types_.InternalSwap(&other->_impl_.device_types_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_id_, &other->_impl_.company_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.max_bigdata_fps_)
      + sizeof(Plan::_impl_.max_bigdata_fps_)
      - PROTOBUF_FIELD_OFFSET(Plan, _impl_.created_date_)>(
          reinterpret_cast<char*>(&_impl_.created_date_),
          reinterpret_cast<char*>(&other->_impl_.created_date_));
}

::google::protobuf::Metadata Plan::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_5fmessage_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
