// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/plan/v202501alpha1/plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fplan_2fv202501alpha1_2fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fplan_2fv202501alpha1_2fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include "kentik/plan/v202501alpha1/plan_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fplan_2fv202501alpha1_2fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto;
namespace kentik {
namespace plan {
namespace v202501alpha1 {
class ListPlansRequest;
class ListPlansRequestDefaultTypeInternal;
extern ListPlansRequestDefaultTypeInternal _ListPlansRequest_default_instance_;
class ListPlansResponse;
class ListPlansResponseDefaultTypeInternal;
extern ListPlansResponseDefaultTypeInternal _ListPlansResponse_default_instance_;
}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::plan::v202501alpha1::ListPlansRequest* Arena::CreateMaybeMessage<::kentik::plan::v202501alpha1::ListPlansRequest>(Arena*);
template<> ::kentik::plan::v202501alpha1::ListPlansResponse* Arena::CreateMaybeMessage<::kentik::plan::v202501alpha1::ListPlansResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace plan {
namespace v202501alpha1 {

// ===================================================================

class ListPlansRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.plan.v202501alpha1.ListPlansRequest) */ {
 public:
  inline ListPlansRequest() : ListPlansRequest(nullptr) {};
  virtual ~ListPlansRequest();

  ListPlansRequest(const ListPlansRequest& from);
  ListPlansRequest(ListPlansRequest&& from) noexcept
    : ListPlansRequest() {
    *this = ::std::move(from);
  }

  inline ListPlansRequest& operator=(const ListPlansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPlansRequest& operator=(ListPlansRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPlansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPlansRequest* internal_default_instance() {
    return reinterpret_cast<const ListPlansRequest*>(
               &_ListPlansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListPlansRequest& a, ListPlansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPlansRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPlansRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPlansRequest* New() const final {
    return CreateMaybeMessage<ListPlansRequest>(nullptr);
  }

  ListPlansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPlansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPlansRequest& from);
  void MergeFrom(const ListPlansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPlansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.plan.v202501alpha1.ListPlansRequest";
  }
  protected:
  explicit ListPlansRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto);
    return ::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.plan.v202501alpha1.ListPlansRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_2eproto;
};
// -------------------------------------------------------------------

class ListPlansResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.plan.v202501alpha1.ListPlansResponse) */ {
 public:
  inline ListPlansResponse() : ListPlansResponse(nullptr) {};
  virtual ~ListPlansResponse();

  ListPlansResponse(const ListPlansResponse& from);
  ListPlansResponse(ListPlansResponse&& from) noexcept
    : ListPlansResponse() {
    *this = ::std::move(from);
  }

  inline ListPlansResponse& operator=(const ListPlansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPlansResponse& operator=(ListPlansResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPlansResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPlansResponse* internal_default_instance() {
    return reinterpret_cast<const ListPlansResponse*>(
               &_ListPlansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListPlansResponse& a, ListPlansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPlansResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPlansResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPlansResponse* New() const final {
    return CreateMaybeMessage<ListPlansResponse>(nullptr);
  }

  ListPlansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPlansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPlansResponse& from);
  void MergeFrom(const ListPlansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPlansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.plan.v202501alpha1.ListPlansResponse";
  }
  protected:
  explicit ListPlansResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto);
    return ::descriptor_table_kentik_2fplan_2fv202501alpha1_2fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlansFieldNumber = 1,
  };
  // repeated .kentik.plan.v202501alpha1.Plan plans = 1[json_name = "plans"];
  int plans_size() const;
  private:
  int _internal_plans_size() const;
  public:
  void clear_plans();
  ::kentik::plan::v202501alpha1::Plan* mutable_plans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::Plan >*
      mutable_plans();
  private:
  const ::kentik::plan::v202501alpha1::Plan& _internal_plans(int index) const;
  ::kentik::plan::v202501alpha1::Plan* _internal_add_plans();
  public:
  const ::kentik::plan::v202501alpha1::Plan& plans(int index) const;
  ::kentik::plan::v202501alpha1::Plan* add_plans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::Plan >&
      plans() const;

  // @@protoc_insertion_point(class_scope:kentik.plan.v202501alpha1.ListPlansResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::Plan > plans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fplan_2fv202501alpha1_2fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListPlansRequest

// -------------------------------------------------------------------

// ListPlansResponse

// repeated .kentik.plan.v202501alpha1.Plan plans = 1[json_name = "plans"];
inline int ListPlansResponse::_internal_plans_size() const {
  return plans_.size();
}
inline int ListPlansResponse::plans_size() const {
  return _internal_plans_size();
}
inline ::kentik::plan::v202501alpha1::Plan* ListPlansResponse::mutable_plans(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.plan.v202501alpha1.ListPlansResponse.plans)
  return plans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::Plan >*
ListPlansResponse::mutable_plans() {
  // @@protoc_insertion_point(field_mutable_list:kentik.plan.v202501alpha1.ListPlansResponse.plans)
  return &plans_;
}
inline const ::kentik::plan::v202501alpha1::Plan& ListPlansResponse::_internal_plans(int index) const {
  return plans_.Get(index);
}
inline const ::kentik::plan::v202501alpha1::Plan& ListPlansResponse::plans(int index) const {
  // @@protoc_insertion_point(field_get:kentik.plan.v202501alpha1.ListPlansResponse.plans)
  return _internal_plans(index);
}
inline ::kentik::plan::v202501alpha1::Plan* ListPlansResponse::_internal_add_plans() {
  return plans_.Add();
}
inline ::kentik::plan::v202501alpha1::Plan* ListPlansResponse::add_plans() {
  // @@protoc_insertion_point(field_add:kentik.plan.v202501alpha1.ListPlansResponse.plans)
  return _internal_add_plans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::plan::v202501alpha1::Plan >&
ListPlansResponse::plans() const {
  // @@protoc_insertion_point(field_list:kentik.plan.v202501alpha1.ListPlansResponse.plans)
  return plans_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202501alpha1
}  // namespace plan
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fplan_2fv202501alpha1_2fplan_2eproto
