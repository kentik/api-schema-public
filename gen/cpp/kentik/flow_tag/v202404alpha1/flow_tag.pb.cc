// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/flow_tag/v202404alpha1/flow_tag.proto

#include "kentik/flow_tag/v202404alpha1/flow_tag.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto;
namespace kentik {
namespace flow_tag {
namespace v202404alpha1 {
class ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Model> _instance;
} _Model_default_instance_;
class OrderFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderField> _instance;
} _OrderField_default_instance_;
class FlowTagSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowTagSearch> _instance;
} _FlowTagSearch_default_instance_;
class AddressInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddressInfo> _instance;
} _AddressInfo_default_instance_;
class FlowTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowTag> _instance;
} _FlowTag_default_instance_;
class GetFlowTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlowTagRequest> _instance;
} _GetFlowTagRequest_default_instance_;
class GetFlowTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlowTagResponse> _instance;
} _GetFlowTagResponse_default_instance_;
class SearchFlowTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchFlowTagRequest> _instance;
} _SearchFlowTagRequest_default_instance_;
class SearchFlowTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchFlowTagResponse> _instance;
} _SearchFlowTagResponse_default_instance_;
class CreateFlowTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateFlowTagRequest> _instance;
} _CreateFlowTagRequest_default_instance_;
class CreateFlowTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateFlowTagResponse> _instance;
} _CreateFlowTagResponse_default_instance_;
class UpdateFlowTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFlowTagRequest> _instance;
} _UpdateFlowTagRequest_default_instance_;
class UpdateFlowTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFlowTagResponse> _instance;
} _UpdateFlowTagResponse_default_instance_;
class DeleteFlowTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFlowTagRequest> _instance;
} _DeleteFlowTagRequest_default_instance_;
class DeleteFlowTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFlowTagResponse> _instance;
} _DeleteFlowTagResponse_default_instance_;
}  // namespace v202404alpha1
}  // namespace flow_tag
}  // namespace kentik
static void InitDefaultsscc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_AddressInfo_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::AddressInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::AddressInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {}};

static void InitDefaultsscc_info_CreateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_CreateFlowTagRequest_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_CreateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_CreateFlowTagResponse_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_DeleteFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_DeleteFlowTagRequest_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_DeleteFlowTagResponse_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {}};

static void InitDefaultsscc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_FlowTag_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::FlowTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::FlowTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_FlowTagSearch_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::FlowTagSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::FlowTagSearch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_GetFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_GetFlowTagRequest_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::GetFlowTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::GetFlowTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {}};

static void InitDefaultsscc_info_GetFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_GetFlowTagResponse_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::GetFlowTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::GetFlowTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_Model_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_Model_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::Model::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Model_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {}};

static void InitDefaultsscc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_OrderField_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::OrderField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::OrderField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {}};

static void InitDefaultsscc_info_SearchFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_SearchFlowTagRequest_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_SearchFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_SearchFlowTagResponse_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_UpdateFlowTagRequest_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::flow_tag::v202404alpha1::_UpdateFlowTagResponse_default_instance_;
    new (ptr) ::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto}, {
      &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::Model, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::OrderField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::OrderField, field_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::OrderField, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, limit_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, offset_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, lookup_fields_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, lookup_values_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, order_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTagSearch, field_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::AddressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::AddressInfo, addresses_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::AddressInfo, total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, edited_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, created_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, tcp_flags_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, device_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, site_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, interface_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, lasthop_as_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, nexthop_asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, nexthop_as_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, nexthop_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, bgp_aspath_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, bgp_community_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, mac_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, country_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::FlowTag, vlans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::GetFlowTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::GetFlowTagRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::GetFlowTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::GetFlowTagResponse, flow_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse, flow_tags_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse, total_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest, flow_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse, flow_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest, flow_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse, flow_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::flow_tag::v202404alpha1::Model)},
  { 6, -1, sizeof(::kentik::flow_tag::v202404alpha1::OrderField)},
  { 13, -1, sizeof(::kentik::flow_tag::v202404alpha1::FlowTagSearch)},
  { 24, -1, sizeof(::kentik::flow_tag::v202404alpha1::AddressInfo)},
  { 31, -1, sizeof(::kentik::flow_tag::v202404alpha1::FlowTag)},
  { 60, -1, sizeof(::kentik::flow_tag::v202404alpha1::GetFlowTagRequest)},
  { 66, -1, sizeof(::kentik::flow_tag::v202404alpha1::GetFlowTagResponse)},
  { 72, -1, sizeof(::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest)},
  { 78, -1, sizeof(::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse)},
  { 86, -1, sizeof(::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest)},
  { 92, -1, sizeof(::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse)},
  { 98, -1, sizeof(::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest)},
  { 104, -1, sizeof(::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse)},
  { 110, -1, sizeof(::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest)},
  { 116, -1, sizeof(::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_OrderField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_FlowTagSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_AddressInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_FlowTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_GetFlowTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_GetFlowTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_SearchFlowTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_SearchFlowTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_CreateFlowTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_CreateFlowTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_UpdateFlowTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_UpdateFlowTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_DeleteFlowTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::flow_tag::v202404alpha1::_DeleteFlowTagResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,kentik/flow_tag/v202404alpha1/flow_tag"
  ".proto\022\035kentik.flow_tag.v202404alpha1\032\034g"
  "oogle/api/annotations.proto\032\027google/api/"
  "client.proto\032\037google/api/field_behavior."
  "proto\032\037google/protobuf/timestamp.proto\032."
  "protoc-gen-openapiv2/options/annotations"
  ".proto\032%kentik/core/v202303/annotations."
  "proto\"E\n\005Model\022<\n\004type\030\001 \001(\0162(.kentik.fl"
  "ow_tag.v202404alpha1.ModelTypeR\004type\"\233\001\n"
  "\nOrderField\022@\n\005field\030\001 \001(\0162*.kentik.flow"
  "_tag.v202404alpha1.LookupFieldR\005field\022K\n"
  "\tdirection\030\002 \001(\0162-.kentik.flow_tag.v2024"
  "04alpha1.OrderDirectionR\tdirection\"\232\002\n\rF"
  "lowTagSearch\022\024\n\005limit\030\001 \001(\005R\005limit\022\026\n\006of"
  "fset\030\002 \001(\005R\006offset\022O\n\rlookup_fields\030\003 \003("
  "\0162*.kentik.flow_tag.v202404alpha1.Lookup"
  "FieldR\014lookupFields\022#\n\rlookup_values\030\004 \003"
  "(\tR\014lookupValues\022D\n\010order_by\030\005 \003(\0132).ken"
  "tik.flow_tag.v202404alpha1.OrderFieldR\007o"
  "rderBy\022\037\n\013field_limit\030\006 \001(\005R\nfieldLimit\""
  "L\n\013AddressInfo\022\034\n\taddresses\030\001 \003(\tR\taddre"
  "sses\022\037\n\013total_count\030\002 \001(\005R\ntotalCount\"\307\020"
  "\n\007FlowTag\022J\n\002id\030\001 \001(\tB:\222A321Unique syste"
  "m assigned identifier of the flow tag\342A\001"
  "\003R\002id\022Z\n\004name\030\003 \001(\tBF\222A\?2=This will appe"
  "ar in places where selecting a tag is ne"
  "cessary\342A\001\003R\004name\022C\n\tedited_by\030\004 \001(\tB&\222A"
  "\0372\035User who last edited this tag\342A\001\003R\010ed"
  "itedBy\022A\n\ncreated_by\030\031 \001(\tB\"\222A\0332\031User wh"
  "o created this tag\342A\001\003R\tcreatedBy\022b\n\005cda"
  "te\030\005 \001(\0132\032.google.protobuf.TimestampB0\222A"
  ")2\'Date and time when this tag was creat"
  "ed\342A\001\003R\005cdate\022g\n\005edate\030\006 \001(\0132\032.google.pr"
  "otobuf.TimestampB5\222A.2,Date and time whe"
  "n this tag was last updated\342A\001\003R\005edate\022h"
  "\n\002ip\030\007 \001(\0132*.kentik.flow_tag.v202404alph"
  "a1.AddressInfoB,\222A)2\'IP address associat"
  "ed with the flow tagR\002ip\022A\n\004port\030\010 \003(\tB-"
  "\222A*2(Port number associated with the flo"
  "w tagR\004port\022H\n\ttcp_flags\030\t \001(\rB+\222A(2&TCP"
  " flags associated with the flow tagR\010tcp"
  "Flags\022N\n\010protocol\030\n \003(\rB2\222A/2-Protocol n"
  "umbers associated with the flow tagR\010pro"
  "tocol\022U\n\013device_name\030\013 \003(\tB4\222A12/Name of"
  " the device associated with the flow tag"
  "R\ndeviceName\022U\n\013device_type\030\014 \003(\tB4\222A12/"
  "Type of the device associated with the f"
  "low tagR\ndeviceType\022V\n\004site\030\r \003(\tBB\222A\?2="
  "Site where the device associated with th"
  "e flow tag is locatedR\004site\022^\n\016interface"
  "_name\030\016 \003(\tB7\222A422Name of the interface "
  "associated with the flow tagR\rinterfaceN"
  "ame\022R\n\003asn\030\017 \003(\tB@\222A=2;Autonomous System"
  " Number (ASN) associated with the flow t"
  "agR\003asn\022w\n\017lasthop_as_name\030\020 \003(\tBO\222AL2JN"
  "ame of the last hop\'s Autonomous System "
  "(AS) associated with the flow tagR\rlasth"
  "opAsName\022q\n\013nexthop_asn\030\021 \003(\tBP\222AM2KAuto"
  "nomous System Number (ASN) of the next h"
  "op associated with the flow tagR\nnexthop"
  "Asn\022w\n\017nexthop_as_name\030\022 \003(\tBO\222AL2JName "
  "of the next hop\'s Autonomous System (AS)"
  " associated with the flow tagR\rnexthopAs"
  "Name\022D\n\007nexthop\030\023 \003(\tB*\222A\'2%Next hop ass"
  "ociated with the flow tagR\007nexthop\022L\n\nbg"
  "p_aspath\030\024 \003(\tB-\222A*2(BGP AS path associa"
  "ted with the flow tagR\tbgpAspath\022T\n\rbgp_"
  "community\030\025 \003(\tB/\222A,2*BGP community asso"
  "ciated with the flow tagR\014bgpCommunity\022k"
  "\n\003mac\030\026 \001(\0132*.kentik.flow_tag.v202404alp"
  "ha1.AddressInfoB-\222A*2(MAC address associ"
  "ated with the flow tagR\003mac\022C\n\007country\030\027"
  " \003(\tB)\222A&2$Country associated with the f"
  "low tagR\007country\022=\n\005vlans\030\030 \003(\tB\'\222A$2\"VL"
  "ANs associated with the flow tagR\005vlans\""
  "#\n\021GetFlowTagRequest\022\016\n\002id\030\001 \001(\tR\002id\"W\n\022"
  "GetFlowTagResponse\022A\n\010flow_tag\030\001 \001(\0132&.k"
  "entik.flow_tag.v202404alpha1.FlowTagR\007fl"
  "owTag\"\\\n\024SearchFlowTagRequest\022D\n\006search\030"
  "\001 \001(\0132,.kentik.flow_tag.v202404alpha1.Fl"
  "owTagSearchR\006search\"\242\001\n\025SearchFlowTagRes"
  "ponse\022C\n\tflow_tags\030\001 \003(\0132&.kentik.flow_t"
  "ag.v202404alpha1.FlowTagR\010flowTags\022\037\n\013to"
  "tal_count\030\002 \001(\rR\ntotalCount\022#\n\rinvalid_c"
  "ount\030\003 \001(\rR\014invalidCount\"Y\n\024CreateFlowTa"
  "gRequest\022A\n\010flow_tag\030\001 \001(\0132&.kentik.flow"
  "_tag.v202404alpha1.FlowTagR\007flowTag\"Z\n\025C"
  "reateFlowTagResponse\022A\n\010flow_tag\030\001 \001(\0132&"
  ".kentik.flow_tag.v202404alpha1.FlowTagR\007"
  "flowTag\"Y\n\024UpdateFlowTagRequest\022A\n\010flow_"
  "tag\030\001 \001(\0132&.kentik.flow_tag.v202404alpha"
  "1.FlowTagR\007flowTag\"Z\n\025UpdateFlowTagRespo"
  "nse\022A\n\010flow_tag\030\001 \001(\0132&.kentik.flow_tag."
  "v202404alpha1.FlowTagR\007flowTag\"&\n\024Delete"
  "FlowTagRequest\022\016\n\002id\030\001 \001(\tR\002id\"\027\n\025Delete"
  "FlowTagResponse*t\n\tModelType\022\032\n\026MODEL_TY"
  "PE_UNSPECIFIED\020\000\022\031\n\025MODEL_TYPE_POPULATOR"
  "S\020\001\022\023\n\017MODEL_TYPE_TAGS\020\002\022\033\n\027MODEL_TYPE_I"
  "P_ADDRESSES\020\003*C\n\013LookupField\022\034\n\030LOOKUP_F"
  "IELD_UNSPECIFIED\020\000\022\026\n\022LOOKUP_FIELD_VALUE"
  "\020\001*d\n\016OrderDirection\022\037\n\033ORDER_DIRECTION_"
  "UNSPECIFIED\020\000\022\027\n\023ORDER_DIRECTION_ASC\020\001\022\030"
  "\n\024ORDER_DIRECTION_DESC\020\0022\313\013\n\016FlowTagServ"
  "ice\022\225\002\n\nGetFlowTag\0220.kentik.flow_tag.v20"
  "2404alpha1.GetFlowTagRequest\0321.kentik.fl"
  "ow_tag.v202404alpha1.GetFlowTagResponse\""
  "\241\001\222A_\022\033Get flow tag configuration.\0324Retu"
  "rns configuration of flow tag with speci"
  "fied ID.*\nGetFlowTag\362\327\002\023admin.flow_tag:r"
  "ead\202\323\344\223\002\"\022 /flow_tag/v202404alpha1/tag/{"
  "id}\022\244\002\n\rSearchFlowTag\0223.kentik.flow_tag."
  "v202404alpha1.SearchFlowTagRequest\0324.ken"
  "tik.flow_tag.v202404alpha1.SearchFlowTag"
  "Response\"\247\001\222Aj\022\036Search flow tag configur"
  "ation.\0329Returns configuration of flow ta"
  "g with search parameters.*\rSearchFlowTag"
  "\362\327\002\023admin.flow_tag:read\202\323\344\223\002\035\022\033/flow_tag"
  "/v202404alpha1/tag\022\217\002\n\rCreateFlowTag\0223.k"
  "entik.flow_tag.v202404alpha1.CreateFlowT"
  "agRequest\0324.kentik.flow_tag.v202404alpha"
  "1.CreateFlowTagResponse\"\222\001\222AQ\022\036Create fl"
  "ow tag configuration.\032 Create a flow tag"
  " configuration.*\rCreateFlowTag\362\327\002\024admin."
  "flow_tag:write\202\323\344\223\002 \"\033/flow_tag/v202404a"
  "lpha1/tag:\001*\022\235\002\n\rUpdateFlowTag\0223.kentik."
  "flow_tag.v202404alpha1.UpdateFlowTagRequ"
  "est\0324.kentik.flow_tag.v202404alpha1.Upda"
  "teFlowTagResponse\"\240\001\222AQ\022\036Update flow tag"
  " configuration.\032 Update a flow tag confi"
  "guration.*\rUpdateFlowTag\362\327\002\024admin.flow_t"
  "ag:write\202\323\344\223\002.\032)/flow_tag/v202404alpha1/"
  "tag/{flow_tag.id}:\001*\022\231\002\n\rDeleteFlowTag\0223"
  ".kentik.flow_tag.v202404alpha1.DeleteFlo"
  "wTagRequest\0324.kentik.flow_tag.v202404alp"
  "ha1.DeleteFlowTagResponse\"\234\001\222AY\022\036Delete "
  "flow tag configuration.\032(Delete a flow t"
  "ag configuration with id.*\rDeleteFlowTag"
  "\362\327\002\024admin.flow_tag:write\202\323\344\223\002\"* /flow_ta"
  "g/v202404alpha1/tag/{id}\032,\312A\023grpc.api.ke"
  "ntik.com\352\327\002\016admin.flow_tag\220\330\002\003B\311\014ZQgithu"
  "b.com/kentik/api-schema-public/gen/go/ke"
  "ntik/flow_tag/v202404alpha1;flow_tag\222A\362\013"
  "\022\213\n\n\014Flow Tag API\022\244\t# Overview\nThe Flow "
  "Tag API enables programmatic creation an"
  "d management of flow tags. * In addition"
  " to tag name, at least one other field m"
  "ust be specified to create a tag.\n * All"
  " specified tag fields are ANDed for eval"
  "uation.\n * Except for Tag Name, any fiel"
  "d may contain multiple comma-separated v"
  "alues, which will be ORed for evaluation"
  ".\n * A tag will be applied to a flow onl"
  "y when all of the fields specified for t"
  "hat tag are matched. Source and Destinat"
  "ion flows are each evaluated independent"
  "ly for matches.\n * Source and Destinatio"
  "n flows are each evaluated independently"
  " for matches.\n * A match results in the "
  "addition of the tag name to a delimited "
  "list of tags in the src_flow_tags and/or"
  " dst_flow_tags column of each specified "
  "devices KDE main table.\n * Tags in a KDE"
  " table can be searched as part of a quer"
  "y. Tag searches are substring-based. Que"
  "ry results vary depending on how tags ar"
  "e named; [see Queries Using Tags](https:"
  "//kb.kentik.com/v0/Eb02.htm#Eb02-Queries"
  "_Using_Tags).\n * Additional information "
  "on the values of individual fields may b"
  "e found in [Tag Field Definitions](https"
  "://kb.kentik.com/v4/Cb04.htm#Cb04-Tag_Fi"
  "eld_Definitions) in the Kentik Knowledge"
  " Base.\n\n\"E\n\026Kentik API Engineering\022+http"
  "s://github.com/kentik/api-schema-public2"
  "\rv202404alpha1*\001\0022\020application/json:\020app"
  "lication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-"
  "Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Toke"
  "n \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General i"
  "nformation about Kentik APIs\0224https://kb"
  ".kentik.com/v0/Ab09.htm#Ab09-APIs_Overvi"
  "ewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto_sccs[15] = {
  &scc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_CreateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_CreateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_DeleteFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_DeleteFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_GetFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_GetFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_Model_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_SearchFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_SearchFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_UpdateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
  &scc_info_UpdateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto, "kentik/flow_tag/v202404alpha1/flow_tag.proto", 7210,
  &descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto_once, descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto_sccs, descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto_deps, 15, 6,
  schemas, file_default_instances, TableStruct_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto::offsets,
  file_level_metadata_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto, 15, file_level_enum_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto, file_level_service_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto)), true);
namespace kentik {
namespace flow_tag {
namespace v202404alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto);
  return file_level_enum_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto[0];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LookupField_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto);
  return file_level_enum_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto[1];
}
bool LookupField_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto);
  return file_level_enum_descriptors_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto[2];
}
bool OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Model::InitAsDefaultInstance() {
}
class Model::_Internal {
 public:
};

Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.Model)
}

void Model::SharedCtor() {
  type_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.Model)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Model::ArenaDtor(void* object) {
  Model* _this = reinterpret_cast< Model* >(object);
  (void)_this;
}
void Model::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Model& Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Model_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.ModelType type = 1[json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::flow_tag::v202404alpha1::ModelType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Model::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.ModelType type = 1[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.Model)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.ModelType type = 1[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderField::InitAsDefaultInstance() {
}
class OrderField::_Internal {
 public:
};

OrderField::OrderField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.OrderField)
}
OrderField::OrderField(const OrderField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_, &from.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&field_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.OrderField)
}

void OrderField::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&field_)) + sizeof(direction_));
}

OrderField::~OrderField() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.OrderField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderField::ArenaDtor(void* object) {
  OrderField* _this = reinterpret_cast< OrderField* >(object);
  (void)_this;
}
void OrderField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderField& OrderField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderField_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void OrderField::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.OrderField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&field_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.LookupField field = 1[json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_field(static_cast<::kentik::flow_tag::v202404alpha1::LookupField>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.flow_tag.v202404alpha1.OrderDirection direction = 2[json_name = "direction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::kentik::flow_tag::v202404alpha1::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.OrderField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.LookupField field = 1[json_name = "field"];
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_field(), target);
  }

  // .kentik.flow_tag.v202404alpha1.OrderDirection direction = 2[json_name = "direction"];
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.OrderField)
  return target;
}

size_t OrderField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.OrderField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.LookupField field = 1[json_name = "field"];
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_field());
  }

  // .kentik.flow_tag.v202404alpha1.OrderDirection direction = 2[json_name = "direction"];
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.OrderField)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.OrderField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.OrderField)
    MergeFrom(*source);
  }
}

void OrderField::MergeFrom(const OrderField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.OrderField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void OrderField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.OrderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderField::CopyFrom(const OrderField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.OrderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderField::IsInitialized() const {
  return true;
}

void OrderField::InternalSwap(OrderField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderField, direction_)
      + sizeof(OrderField::direction_)
      - PROTOBUF_FIELD_OFFSET(OrderField, field_)>(
          reinterpret_cast<char*>(&field_),
          reinterpret_cast<char*>(&other->field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowTagSearch::InitAsDefaultInstance() {
}
class FlowTagSearch::_Internal {
 public:
};

FlowTagSearch::FlowTagSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lookup_fields_(arena),
  lookup_values_(arena),
  order_by_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.FlowTagSearch)
}
FlowTagSearch::FlowTagSearch(const FlowTagSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lookup_fields_(from.lookup_fields_),
      lookup_values_(from.lookup_values_),
      order_by_(from.order_by_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_limit_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(field_limit_));
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.FlowTagSearch)
}

void FlowTagSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_limit_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(field_limit_));
}

FlowTagSearch::~FlowTagSearch() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowTagSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowTagSearch::ArenaDtor(void* object) {
  FlowTagSearch* _this = reinterpret_cast< FlowTagSearch* >(object);
  (void)_this;
}
void FlowTagSearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowTagSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowTagSearch& FlowTagSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowTagSearch_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void FlowTagSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lookup_fields_.Clear();
  lookup_values_.Clear();
  order_by_.Clear();
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_limit_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(field_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowTagSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 limit = 1[json_name = "limit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 2[json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.flow_tag.v202404alpha1.LookupField lookup_fields = 3[json_name = "lookupFields"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_lookup_fields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_lookup_fields(static_cast<::kentik::flow_tag::v202404alpha1::LookupField>(val));
        } else goto handle_unusual;
        continue;
      // repeated string lookup_values = 4[json_name = "lookupValues"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lookup_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTagSearch.lookup_values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.flow_tag.v202404alpha1.OrderField order_by = 5[json_name = "orderBy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 field_limit = 6[json_name = "fieldLimit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          field_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowTagSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1[json_name = "limit"];
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  // int32 offset = 2[json_name = "offset"];
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  // repeated .kentik.flow_tag.v202404alpha1.LookupField lookup_fields = 3[json_name = "lookupFields"];
  {
    int byte_size = _lookup_fields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, lookup_fields_, byte_size, target);
    }
  }

  // repeated string lookup_values = 4[json_name = "lookupValues"];
  for (int i = 0, n = this->_internal_lookup_values_size(); i < n; i++) {
    const auto& s = this->_internal_lookup_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTagSearch.lookup_values");
    target = stream->WriteString(4, s, target);
  }

  // repeated .kentik.flow_tag.v202404alpha1.OrderField order_by = 5[json_name = "orderBy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_order_by_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_order_by(i), target, stream);
  }

  // int32 field_limit = 6[json_name = "fieldLimit"];
  if (this->field_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_field_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  return target;
}

size_t FlowTagSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.flow_tag.v202404alpha1.LookupField lookup_fields = 3[json_name = "lookupFields"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_lookup_fields_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_lookup_fields(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lookup_fields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string lookup_values = 4[json_name = "lookupValues"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lookup_values_.size());
  for (int i = 0, n = lookup_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lookup_values_.Get(i));
  }

  // repeated .kentik.flow_tag.v202404alpha1.OrderField order_by = 5[json_name = "orderBy"];
  total_size += 1UL * this->_internal_order_by_size();
  for (const auto& msg : this->order_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 limit = 1[json_name = "limit"];
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // int32 offset = 2[json_name = "offset"];
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 field_limit = 6[json_name = "fieldLimit"];
  if (this->field_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowTagSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowTagSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowTagSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.FlowTagSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.FlowTagSearch)
    MergeFrom(*source);
  }
}

void FlowTagSearch::MergeFrom(const FlowTagSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lookup_fields_.MergeFrom(from.lookup_fields_);
  lookup_values_.MergeFrom(from.lookup_values_);
  order_by_.MergeFrom(from.order_by_);
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.field_limit() != 0) {
    _internal_set_field_limit(from._internal_field_limit());
  }
}

void FlowTagSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowTagSearch::CopyFrom(const FlowTagSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.FlowTagSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowTagSearch::IsInitialized() const {
  return true;
}

void FlowTagSearch::InternalSwap(FlowTagSearch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lookup_fields_.InternalSwap(&other->lookup_fields_);
  lookup_values_.InternalSwap(&other->lookup_values_);
  order_by_.InternalSwap(&other->order_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowTagSearch, field_limit_)
      + sizeof(FlowTagSearch::field_limit_)
      - PROTOBUF_FIELD_OFFSET(FlowTagSearch, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowTagSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddressInfo::InitAsDefaultInstance() {
}
class AddressInfo::_Internal {
 public:
};

AddressInfo::AddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.AddressInfo)
}
AddressInfo::AddressInfo(const AddressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_count_ = from.total_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.AddressInfo)
}

void AddressInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  total_count_ = 0;
}

AddressInfo::~AddressInfo() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.AddressInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddressInfo::ArenaDtor(void* object) {
  AddressInfo* _this = reinterpret_cast< AddressInfo* >(object);
  (void)_this;
}
void AddressInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressInfo& AddressInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddressInfo_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void AddressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  total_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string addresses = 1[json_name = "addresses"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.AddressInfo.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_count = 2[json_name = "totalCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1[json_name = "addresses"];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.AddressInfo.addresses");
    target = stream->WriteString(1, s, target);
  }

  // int32 total_count = 2[json_name = "totalCount"];
  if (this->total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.AddressInfo)
  return target;
}

size_t AddressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1[json_name = "addresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // int32 total_count = 2[json_name = "totalCount"];
  if (this->total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddressInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.AddressInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.AddressInfo)
    MergeFrom(*source);
  }
}

void AddressInfo::MergeFrom(const AddressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from.total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
}

void AddressInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressInfo::CopyFrom(const AddressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.AddressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressInfo::IsInitialized() const {
  return true;
}

void AddressInfo::InternalSwap(AddressInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  swap(total_count_, other->total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowTag::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_FlowTag_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::flow_tag::v202404alpha1::_FlowTag_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::flow_tag::v202404alpha1::_FlowTag_default_instance_._instance.get_mutable()->ip_ = const_cast< ::kentik::flow_tag::v202404alpha1::AddressInfo*>(
      ::kentik::flow_tag::v202404alpha1::AddressInfo::internal_default_instance());
  ::kentik::flow_tag::v202404alpha1::_FlowTag_default_instance_._instance.get_mutable()->mac_ = const_cast< ::kentik::flow_tag::v202404alpha1::AddressInfo*>(
      ::kentik::flow_tag::v202404alpha1::AddressInfo::internal_default_instance());
}
class FlowTag::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const FlowTag* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const FlowTag* msg);
  static const ::kentik::flow_tag::v202404alpha1::AddressInfo& ip(const FlowTag* msg);
  static const ::kentik::flow_tag::v202404alpha1::AddressInfo& mac(const FlowTag* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
FlowTag::_Internal::cdate(const FlowTag* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
FlowTag::_Internal::edate(const FlowTag* msg) {
  return *msg->edate_;
}
const ::kentik::flow_tag::v202404alpha1::AddressInfo&
FlowTag::_Internal::ip(const FlowTag* msg) {
  return *msg->ip_;
}
const ::kentik::flow_tag::v202404alpha1::AddressInfo&
FlowTag::_Internal::mac(const FlowTag* msg) {
  return *msg->mac_;
}
void FlowTag::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void FlowTag::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
FlowTag::FlowTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  port_(arena),
  protocol_(arena),
  device_name_(arena),
  device_type_(arena),
  site_(arena),
  interface_name_(arena),
  asn_(arena),
  lasthop_as_name_(arena),
  nexthop_asn_(arena),
  nexthop_as_name_(arena),
  nexthop_(arena),
  bgp_aspath_(arena),
  bgp_community_(arena),
  country_(arena),
  vlans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.FlowTag)
}
FlowTag::FlowTag(const FlowTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      port_(from.port_),
      protocol_(from.protocol_),
      device_name_(from.device_name_),
      device_type_(from.device_type_),
      site_(from.site_),
      interface_name_(from.interface_name_),
      asn_(from.asn_),
      lasthop_as_name_(from.lasthop_as_name_),
      nexthop_asn_(from.nexthop_asn_),
      nexthop_as_name_(from.nexthop_as_name_),
      nexthop_(from.nexthop_),
      bgp_aspath_(from.bgp_aspath_),
      bgp_community_(from.bgp_community_),
      country_(from.country_),
      vlans_(from.vlans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  edited_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edited_by().empty()) {
    edited_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_edited_by(),
      GetArena());
  }
  created_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_by().empty()) {
    created_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_created_by(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  if (from._internal_has_ip()) {
    ip_ = new ::kentik::flow_tag::v202404alpha1::AddressInfo(*from.ip_);
  } else {
    ip_ = nullptr;
  }
  if (from._internal_has_mac()) {
    mac_ = new ::kentik::flow_tag::v202404alpha1::AddressInfo(*from.mac_);
  } else {
    mac_ = nullptr;
  }
  tcp_flags_ = from.tcp_flags_;
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.FlowTag)
}

void FlowTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edited_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_flags_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(tcp_flags_));
}

FlowTag::~FlowTag() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.FlowTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edited_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
  if (this != internal_default_instance()) delete ip_;
  if (this != internal_default_instance()) delete mac_;
}

void FlowTag::ArenaDtor(void* object) {
  FlowTag* _this = reinterpret_cast< FlowTag* >(object);
  (void)_this;
}
void FlowTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowTag& FlowTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowTag_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void FlowTag::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.FlowTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_.Clear();
  protocol_.Clear();
  device_name_.Clear();
  device_type_.Clear();
  site_.Clear();
  interface_name_.Clear();
  asn_.Clear();
  lasthop_as_name_.Clear();
  nexthop_asn_.Clear();
  nexthop_as_name_.Clear();
  nexthop_.Clear();
  bgp_aspath_.Clear();
  bgp_community_.Clear();
  country_.Clear();
  vlans_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  edited_by_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  created_by_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  if (GetArena() == nullptr && ip_ != nullptr) {
    delete ip_;
  }
  ip_ = nullptr;
  if (GetArena() == nullptr && mac_ != nullptr) {
    delete mac_;
  }
  mac_ = nullptr;
  tcp_flags_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edited_by = 4[json_name = "editedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_edited_by();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.edited_by"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.flow_tag.v202404alpha1.AddressInfo ip = 7[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string port = 8[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_port();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.port"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 tcp_flags = 9[json_name = "tcpFlags", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tcp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 protocol = 10[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_protocol(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_protocol(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_name = 11[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.device_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string device_type = 12[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_type();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.device_type"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string site = 13[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_site();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.site"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string interface_name = 14[json_name = "interfaceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_interface_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.interface_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string asn = 15[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_asn();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.asn"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string lasthop_as_name = 16[json_name = "lasthopAsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_lasthop_as_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.lasthop_as_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string nexthop_asn = 17[json_name = "nexthopAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_nexthop_asn();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.nexthop_asn"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string nexthop_as_name = 18[json_name = "nexthopAsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_nexthop_as_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.nexthop_as_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string nexthop = 19[json_name = "nexthop", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_nexthop();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.nexthop"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string bgp_aspath = 20[json_name = "bgpAspath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_bgp_aspath();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.bgp_aspath"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string bgp_community = 21[json_name = "bgpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_bgp_community();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.bgp_community"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.flow_tag.v202404alpha1.AddressInfo mac = 22[json_name = "mac", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mac(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string country = 23[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_country();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.country"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string vlans = 24[json_name = "vlans", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_vlans();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.vlans"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // string created_by = 25[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_created_by();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.FlowTag.created_by"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.FlowTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string edited_by = 4[json_name = "editedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->edited_by().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edited_by().data(), static_cast<int>(this->_internal_edited_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.edited_by");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_edited_by(), target);
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::edate(this), target, stream);
  }

  // .kentik.flow_tag.v202404alpha1.AddressInfo ip = 7[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ip(this), target, stream);
  }

  // repeated string port = 8[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_port_size(); i < n; i++) {
    const auto& s = this->_internal_port(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.port");
    target = stream->WriteString(8, s, target);
  }

  // uint32 tcp_flags = 9[json_name = "tcpFlags", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->tcp_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tcp_flags(), target);
  }

  // repeated uint32 protocol = 10[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    int byte_size = _protocol_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_protocol(), byte_size, target);
    }
  }

  // repeated string device_name = 11[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_device_name_size(); i < n; i++) {
    const auto& s = this->_internal_device_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.device_name");
    target = stream->WriteString(11, s, target);
  }

  // repeated string device_type = 12[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_device_type_size(); i < n; i++) {
    const auto& s = this->_internal_device_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.device_type");
    target = stream->WriteString(12, s, target);
  }

  // repeated string site = 13[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_site_size(); i < n; i++) {
    const auto& s = this->_internal_site(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.site");
    target = stream->WriteString(13, s, target);
  }

  // repeated string interface_name = 14[json_name = "interfaceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_interface_name_size(); i < n; i++) {
    const auto& s = this->_internal_interface_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.interface_name");
    target = stream->WriteString(14, s, target);
  }

  // repeated string asn = 15[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_asn_size(); i < n; i++) {
    const auto& s = this->_internal_asn(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.asn");
    target = stream->WriteString(15, s, target);
  }

  // repeated string lasthop_as_name = 16[json_name = "lasthopAsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_lasthop_as_name_size(); i < n; i++) {
    const auto& s = this->_internal_lasthop_as_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.lasthop_as_name");
    target = stream->WriteString(16, s, target);
  }

  // repeated string nexthop_asn = 17[json_name = "nexthopAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_nexthop_asn_size(); i < n; i++) {
    const auto& s = this->_internal_nexthop_asn(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.nexthop_asn");
    target = stream->WriteString(17, s, target);
  }

  // repeated string nexthop_as_name = 18[json_name = "nexthopAsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_nexthop_as_name_size(); i < n; i++) {
    const auto& s = this->_internal_nexthop_as_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.nexthop_as_name");
    target = stream->WriteString(18, s, target);
  }

  // repeated string nexthop = 19[json_name = "nexthop", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_nexthop_size(); i < n; i++) {
    const auto& s = this->_internal_nexthop(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.nexthop");
    target = stream->WriteString(19, s, target);
  }

  // repeated string bgp_aspath = 20[json_name = "bgpAspath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_bgp_aspath_size(); i < n; i++) {
    const auto& s = this->_internal_bgp_aspath(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.bgp_aspath");
    target = stream->WriteString(20, s, target);
  }

  // repeated string bgp_community = 21[json_name = "bgpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_bgp_community_size(); i < n; i++) {
    const auto& s = this->_internal_bgp_community(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.bgp_community");
    target = stream->WriteString(21, s, target);
  }

  // .kentik.flow_tag.v202404alpha1.AddressInfo mac = 22[json_name = "mac", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_mac()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::mac(this), target, stream);
  }

  // repeated string country = 23[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_country_size(); i < n; i++) {
    const auto& s = this->_internal_country(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.country");
    target = stream->WriteString(23, s, target);
  }

  // repeated string vlans = 24[json_name = "vlans", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_vlans_size(); i < n; i++) {
    const auto& s = this->_internal_vlans(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.vlans");
    target = stream->WriteString(24, s, target);
  }

  // string created_by = 25[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->created_by().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_by().data(), static_cast<int>(this->_internal_created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.FlowTag.created_by");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_created_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.FlowTag)
  return target;
}

size_t FlowTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.FlowTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string port = 8[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(port_.size());
  for (int i = 0, n = port_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      port_.Get(i));
  }

  // repeated uint32 protocol = 10[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->protocol_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _protocol_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string device_name = 11[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_name_.size());
  for (int i = 0, n = device_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_name_.Get(i));
  }

  // repeated string device_type = 12[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_type_.size());
  for (int i = 0, n = device_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_type_.Get(i));
  }

  // repeated string site = 13[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(site_.size());
  for (int i = 0, n = site_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      site_.Get(i));
  }

  // repeated string interface_name = 14[json_name = "interfaceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(interface_name_.size());
  for (int i = 0, n = interface_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      interface_name_.Get(i));
  }

  // repeated string asn = 15[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(asn_.size());
  for (int i = 0, n = asn_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      asn_.Get(i));
  }

  // repeated string lasthop_as_name = 16[json_name = "lasthopAsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lasthop_as_name_.size());
  for (int i = 0, n = lasthop_as_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lasthop_as_name_.Get(i));
  }

  // repeated string nexthop_asn = 17[json_name = "nexthopAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nexthop_asn_.size());
  for (int i = 0, n = nexthop_asn_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nexthop_asn_.Get(i));
  }

  // repeated string nexthop_as_name = 18[json_name = "nexthopAsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nexthop_as_name_.size());
  for (int i = 0, n = nexthop_as_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nexthop_as_name_.Get(i));
  }

  // repeated string nexthop = 19[json_name = "nexthop", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nexthop_.size());
  for (int i = 0, n = nexthop_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nexthop_.Get(i));
  }

  // repeated string bgp_aspath = 20[json_name = "bgpAspath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bgp_aspath_.size());
  for (int i = 0, n = bgp_aspath_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bgp_aspath_.Get(i));
  }

  // repeated string bgp_community = 21[json_name = "bgpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bgp_community_.size());
  for (int i = 0, n = bgp_community_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bgp_community_.Get(i));
  }

  // repeated string country = 23[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(country_.size());
  for (int i = 0, n = country_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      country_.Get(i));
  }

  // repeated string vlans = 24[json_name = "vlans", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vlans_.size());
  for (int i = 0, n = vlans_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vlans_.Get(i));
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string edited_by = 4[json_name = "editedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->edited_by().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edited_by());
  }

  // string created_by = 25[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->created_by().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_by());
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.flow_tag.v202404alpha1.AddressInfo ip = 7[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_);
  }

  // .kentik.flow_tag.v202404alpha1.AddressInfo mac = 22[json_name = "mac", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_mac()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mac_);
  }

  // uint32 tcp_flags = 9[json_name = "tcpFlags", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->tcp_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcp_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.FlowTag)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.FlowTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.FlowTag)
    MergeFrom(*source);
  }
}

void FlowTag::MergeFrom(const FlowTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.FlowTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_.MergeFrom(from.port_);
  protocol_.MergeFrom(from.protocol_);
  device_name_.MergeFrom(from.device_name_);
  device_type_.MergeFrom(from.device_type_);
  site_.MergeFrom(from.site_);
  interface_name_.MergeFrom(from.interface_name_);
  asn_.MergeFrom(from.asn_);
  lasthop_as_name_.MergeFrom(from.lasthop_as_name_);
  nexthop_asn_.MergeFrom(from.nexthop_asn_);
  nexthop_as_name_.MergeFrom(from.nexthop_as_name_);
  nexthop_.MergeFrom(from.nexthop_);
  bgp_aspath_.MergeFrom(from.bgp_aspath_);
  bgp_community_.MergeFrom(from.bgp_community_);
  country_.MergeFrom(from.country_);
  vlans_.MergeFrom(from.vlans_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.edited_by().size() > 0) {
    _internal_set_edited_by(from._internal_edited_by());
  }
  if (from.created_by().size() > 0) {
    _internal_set_created_by(from._internal_created_by());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.has_ip()) {
    _internal_mutable_ip()->::kentik::flow_tag::v202404alpha1::AddressInfo::MergeFrom(from._internal_ip());
  }
  if (from.has_mac()) {
    _internal_mutable_mac()->::kentik::flow_tag::v202404alpha1::AddressInfo::MergeFrom(from._internal_mac());
  }
  if (from.tcp_flags() != 0) {
    _internal_set_tcp_flags(from._internal_tcp_flags());
  }
}

void FlowTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.FlowTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowTag::CopyFrom(const FlowTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.FlowTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowTag::IsInitialized() const {
  return true;
}

void FlowTag::InternalSwap(FlowTag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  port_.InternalSwap(&other->port_);
  protocol_.InternalSwap(&other->protocol_);
  device_name_.InternalSwap(&other->device_name_);
  device_type_.InternalSwap(&other->device_type_);
  site_.InternalSwap(&other->site_);
  interface_name_.InternalSwap(&other->interface_name_);
  asn_.InternalSwap(&other->asn_);
  lasthop_as_name_.InternalSwap(&other->lasthop_as_name_);
  nexthop_asn_.InternalSwap(&other->nexthop_asn_);
  nexthop_as_name_.InternalSwap(&other->nexthop_as_name_);
  nexthop_.InternalSwap(&other->nexthop_);
  bgp_aspath_.InternalSwap(&other->bgp_aspath_);
  bgp_community_.InternalSwap(&other->bgp_community_);
  country_.InternalSwap(&other->country_);
  vlans_.InternalSwap(&other->vlans_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  edited_by_.Swap(&other->edited_by_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  created_by_.Swap(&other->created_by_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowTag, tcp_flags_)
      + sizeof(FlowTag::tcp_flags_)
      - PROTOBUF_FIELD_OFFSET(FlowTag, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlowTagRequest::InitAsDefaultInstance() {
}
class GetFlowTagRequest::_Internal {
 public:
};

GetFlowTagRequest::GetFlowTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
}
GetFlowTagRequest::GetFlowTagRequest(const GetFlowTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
}

void GetFlowTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFlowTagRequest::~GetFlowTagRequest() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlowTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFlowTagRequest::ArenaDtor(void* object) {
  GetFlowTagRequest* _this = reinterpret_cast< GetFlowTagRequest* >(object);
  (void)_this;
}
void GetFlowTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlowTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlowTagRequest& GetFlowTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void GetFlowTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlowTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.GetFlowTagRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlowTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.GetFlowTagRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  return target;
}

size_t GetFlowTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlowTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlowTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlowTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
    MergeFrom(*source);
  }
}

void GetFlowTagRequest::MergeFrom(const GetFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetFlowTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlowTagRequest::CopyFrom(const GetFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlowTagRequest::IsInitialized() const {
  return true;
}

void GetFlowTagRequest::InternalSwap(GetFlowTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlowTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlowTagResponse::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_GetFlowTagResponse_default_instance_._instance.get_mutable()->flow_tag_ = const_cast< ::kentik::flow_tag::v202404alpha1::FlowTag*>(
      ::kentik::flow_tag::v202404alpha1::FlowTag::internal_default_instance());
}
class GetFlowTagResponse::_Internal {
 public:
  static const ::kentik::flow_tag::v202404alpha1::FlowTag& flow_tag(const GetFlowTagResponse* msg);
};

const ::kentik::flow_tag::v202404alpha1::FlowTag&
GetFlowTagResponse::_Internal::flow_tag(const GetFlowTagResponse* msg) {
  return *msg->flow_tag_;
}
GetFlowTagResponse::GetFlowTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
}
GetFlowTagResponse::GetFlowTagResponse(const GetFlowTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flow_tag()) {
    flow_tag_ = new ::kentik::flow_tag::v202404alpha1::FlowTag(*from.flow_tag_);
  } else {
    flow_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
}

void GetFlowTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  flow_tag_ = nullptr;
}

GetFlowTagResponse::~GetFlowTagResponse() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlowTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flow_tag_;
}

void GetFlowTagResponse::ArenaDtor(void* object) {
  GetFlowTagResponse* _this = reinterpret_cast< GetFlowTagResponse* >(object);
  (void)_this;
}
void GetFlowTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlowTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlowTagResponse& GetFlowTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void GetFlowTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flow_tag_ != nullptr) {
    delete flow_tag_;
  }
  flow_tag_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlowTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlowTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flow_tag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  return target;
}

size_t GetFlowTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_tag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlowTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlowTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlowTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
    MergeFrom(*source);
  }
}

void GetFlowTagResponse::MergeFrom(const GetFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flow_tag()) {
    _internal_mutable_flow_tag()->::kentik::flow_tag::v202404alpha1::FlowTag::MergeFrom(from._internal_flow_tag());
  }
}

void GetFlowTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlowTagResponse::CopyFrom(const GetFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.GetFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlowTagResponse::IsInitialized() const {
  return true;
}

void GetFlowTagResponse::InternalSwap(GetFlowTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flow_tag_, other->flow_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlowTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchFlowTagRequest::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_SearchFlowTagRequest_default_instance_._instance.get_mutable()->search_ = const_cast< ::kentik::flow_tag::v202404alpha1::FlowTagSearch*>(
      ::kentik::flow_tag::v202404alpha1::FlowTagSearch::internal_default_instance());
}
class SearchFlowTagRequest::_Internal {
 public:
  static const ::kentik::flow_tag::v202404alpha1::FlowTagSearch& search(const SearchFlowTagRequest* msg);
};

const ::kentik::flow_tag::v202404alpha1::FlowTagSearch&
SearchFlowTagRequest::_Internal::search(const SearchFlowTagRequest* msg) {
  return *msg->search_;
}
SearchFlowTagRequest::SearchFlowTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
}
SearchFlowTagRequest::SearchFlowTagRequest(const SearchFlowTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_search()) {
    search_ = new ::kentik::flow_tag::v202404alpha1::FlowTagSearch(*from.search_);
  } else {
    search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
}

void SearchFlowTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  search_ = nullptr;
}

SearchFlowTagRequest::~SearchFlowTagRequest() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchFlowTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete search_;
}

void SearchFlowTagRequest::ArenaDtor(void* object) {
  SearchFlowTagRequest* _this = reinterpret_cast< SearchFlowTagRequest* >(object);
  (void)_this;
}
void SearchFlowTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchFlowTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchFlowTagRequest& SearchFlowTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void SearchFlowTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchFlowTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.FlowTagSearch search = 1[json_name = "search"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchFlowTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTagSearch search = 1[json_name = "search"];
  if (this->has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  return target;
}

size_t SearchFlowTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTagSearch search = 1[json_name = "search"];
  if (this->has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchFlowTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchFlowTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchFlowTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
    MergeFrom(*source);
  }
}

void SearchFlowTagRequest::MergeFrom(const SearchFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_search()) {
    _internal_mutable_search()->::kentik::flow_tag::v202404alpha1::FlowTagSearch::MergeFrom(from._internal_search());
  }
}

void SearchFlowTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFlowTagRequest::CopyFrom(const SearchFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFlowTagRequest::IsInitialized() const {
  return true;
}

void SearchFlowTagRequest::InternalSwap(SearchFlowTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(search_, other->search_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchFlowTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchFlowTagResponse::InitAsDefaultInstance() {
}
class SearchFlowTagResponse::_Internal {
 public:
};

SearchFlowTagResponse::SearchFlowTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  flow_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
}
SearchFlowTagResponse::SearchFlowTagResponse(const SearchFlowTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      flow_tags_(from.flow_tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_count_, &from.total_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalid_count_) -
    reinterpret_cast<char*>(&total_count_)) + sizeof(invalid_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
}

void SearchFlowTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  ::memset(&total_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_count_) -
      reinterpret_cast<char*>(&total_count_)) + sizeof(invalid_count_));
}

SearchFlowTagResponse::~SearchFlowTagResponse() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchFlowTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SearchFlowTagResponse::ArenaDtor(void* object) {
  SearchFlowTagResponse* _this = reinterpret_cast< SearchFlowTagResponse* >(object);
  (void)_this;
}
void SearchFlowTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchFlowTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchFlowTagResponse& SearchFlowTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void SearchFlowTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_tags_.Clear();
  ::memset(&total_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_count_) -
      reinterpret_cast<char*>(&total_count_)) + sizeof(invalid_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchFlowTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.flow_tag.v202404alpha1.FlowTag flow_tags = 1[json_name = "flowTags"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flow_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 total_count = 2[json_name = "totalCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 3[json_name = "invalidCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchFlowTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.flow_tag.v202404alpha1.FlowTag flow_tags = 1[json_name = "flowTags"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flow_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_flow_tags(i), target, stream);
  }

  // uint32 total_count = 2[json_name = "totalCount"];
  if (this->total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_count(), target);
  }

  // uint32 invalid_count = 3[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  return target;
}

size_t SearchFlowTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.flow_tag.v202404alpha1.FlowTag flow_tags = 1[json_name = "flowTags"];
  total_size += 1UL * this->_internal_flow_tags_size();
  for (const auto& msg : this->flow_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_count = 2[json_name = "totalCount"];
  if (this->total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_count());
  }

  // uint32 invalid_count = 3[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchFlowTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchFlowTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchFlowTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
    MergeFrom(*source);
  }
}

void SearchFlowTagResponse::MergeFrom(const SearchFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flow_tags_.MergeFrom(from.flow_tags_);
  if (from.total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void SearchFlowTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFlowTagResponse::CopyFrom(const SearchFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.SearchFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFlowTagResponse::IsInitialized() const {
  return true;
}

void SearchFlowTagResponse::InternalSwap(SearchFlowTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  flow_tags_.InternalSwap(&other->flow_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchFlowTagResponse, invalid_count_)
      + sizeof(SearchFlowTagResponse::invalid_count_)
      - PROTOBUF_FIELD_OFFSET(SearchFlowTagResponse, total_count_)>(
          reinterpret_cast<char*>(&total_count_),
          reinterpret_cast<char*>(&other->total_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchFlowTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateFlowTagRequest::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_CreateFlowTagRequest_default_instance_._instance.get_mutable()->flow_tag_ = const_cast< ::kentik::flow_tag::v202404alpha1::FlowTag*>(
      ::kentik::flow_tag::v202404alpha1::FlowTag::internal_default_instance());
}
class CreateFlowTagRequest::_Internal {
 public:
  static const ::kentik::flow_tag::v202404alpha1::FlowTag& flow_tag(const CreateFlowTagRequest* msg);
};

const ::kentik::flow_tag::v202404alpha1::FlowTag&
CreateFlowTagRequest::_Internal::flow_tag(const CreateFlowTagRequest* msg) {
  return *msg->flow_tag_;
}
CreateFlowTagRequest::CreateFlowTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
}
CreateFlowTagRequest::CreateFlowTagRequest(const CreateFlowTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flow_tag()) {
    flow_tag_ = new ::kentik::flow_tag::v202404alpha1::FlowTag(*from.flow_tag_);
  } else {
    flow_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
}

void CreateFlowTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  flow_tag_ = nullptr;
}

CreateFlowTagRequest::~CreateFlowTagRequest() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateFlowTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flow_tag_;
}

void CreateFlowTagRequest::ArenaDtor(void* object) {
  CreateFlowTagRequest* _this = reinterpret_cast< CreateFlowTagRequest* >(object);
  (void)_this;
}
void CreateFlowTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateFlowTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateFlowTagRequest& CreateFlowTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void CreateFlowTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flow_tag_ != nullptr) {
    delete flow_tag_;
  }
  flow_tag_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateFlowTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateFlowTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flow_tag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  return target;
}

size_t CreateFlowTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_tag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateFlowTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateFlowTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateFlowTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
    MergeFrom(*source);
  }
}

void CreateFlowTagRequest::MergeFrom(const CreateFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flow_tag()) {
    _internal_mutable_flow_tag()->::kentik::flow_tag::v202404alpha1::FlowTag::MergeFrom(from._internal_flow_tag());
  }
}

void CreateFlowTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFlowTagRequest::CopyFrom(const CreateFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFlowTagRequest::IsInitialized() const {
  return true;
}

void CreateFlowTagRequest::InternalSwap(CreateFlowTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flow_tag_, other->flow_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFlowTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateFlowTagResponse::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_CreateFlowTagResponse_default_instance_._instance.get_mutable()->flow_tag_ = const_cast< ::kentik::flow_tag::v202404alpha1::FlowTag*>(
      ::kentik::flow_tag::v202404alpha1::FlowTag::internal_default_instance());
}
class CreateFlowTagResponse::_Internal {
 public:
  static const ::kentik::flow_tag::v202404alpha1::FlowTag& flow_tag(const CreateFlowTagResponse* msg);
};

const ::kentik::flow_tag::v202404alpha1::FlowTag&
CreateFlowTagResponse::_Internal::flow_tag(const CreateFlowTagResponse* msg) {
  return *msg->flow_tag_;
}
CreateFlowTagResponse::CreateFlowTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
}
CreateFlowTagResponse::CreateFlowTagResponse(const CreateFlowTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flow_tag()) {
    flow_tag_ = new ::kentik::flow_tag::v202404alpha1::FlowTag(*from.flow_tag_);
  } else {
    flow_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
}

void CreateFlowTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  flow_tag_ = nullptr;
}

CreateFlowTagResponse::~CreateFlowTagResponse() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateFlowTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flow_tag_;
}

void CreateFlowTagResponse::ArenaDtor(void* object) {
  CreateFlowTagResponse* _this = reinterpret_cast< CreateFlowTagResponse* >(object);
  (void)_this;
}
void CreateFlowTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateFlowTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateFlowTagResponse& CreateFlowTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void CreateFlowTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flow_tag_ != nullptr) {
    delete flow_tag_;
  }
  flow_tag_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateFlowTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateFlowTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flow_tag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  return target;
}

size_t CreateFlowTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_tag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateFlowTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateFlowTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateFlowTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
    MergeFrom(*source);
  }
}

void CreateFlowTagResponse::MergeFrom(const CreateFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flow_tag()) {
    _internal_mutable_flow_tag()->::kentik::flow_tag::v202404alpha1::FlowTag::MergeFrom(from._internal_flow_tag());
  }
}

void CreateFlowTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFlowTagResponse::CopyFrom(const CreateFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.CreateFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFlowTagResponse::IsInitialized() const {
  return true;
}

void CreateFlowTagResponse::InternalSwap(CreateFlowTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flow_tag_, other->flow_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFlowTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFlowTagRequest::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_UpdateFlowTagRequest_default_instance_._instance.get_mutable()->flow_tag_ = const_cast< ::kentik::flow_tag::v202404alpha1::FlowTag*>(
      ::kentik::flow_tag::v202404alpha1::FlowTag::internal_default_instance());
}
class UpdateFlowTagRequest::_Internal {
 public:
  static const ::kentik::flow_tag::v202404alpha1::FlowTag& flow_tag(const UpdateFlowTagRequest* msg);
};

const ::kentik::flow_tag::v202404alpha1::FlowTag&
UpdateFlowTagRequest::_Internal::flow_tag(const UpdateFlowTagRequest* msg) {
  return *msg->flow_tag_;
}
UpdateFlowTagRequest::UpdateFlowTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
}
UpdateFlowTagRequest::UpdateFlowTagRequest(const UpdateFlowTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flow_tag()) {
    flow_tag_ = new ::kentik::flow_tag::v202404alpha1::FlowTag(*from.flow_tag_);
  } else {
    flow_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
}

void UpdateFlowTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  flow_tag_ = nullptr;
}

UpdateFlowTagRequest::~UpdateFlowTagRequest() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateFlowTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flow_tag_;
}

void UpdateFlowTagRequest::ArenaDtor(void* object) {
  UpdateFlowTagRequest* _this = reinterpret_cast< UpdateFlowTagRequest* >(object);
  (void)_this;
}
void UpdateFlowTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFlowTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFlowTagRequest& UpdateFlowTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void UpdateFlowTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flow_tag_ != nullptr) {
    delete flow_tag_;
  }
  flow_tag_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFlowTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFlowTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flow_tag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  return target;
}

size_t UpdateFlowTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_tag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFlowTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFlowTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFlowTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
    MergeFrom(*source);
  }
}

void UpdateFlowTagRequest::MergeFrom(const UpdateFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flow_tag()) {
    _internal_mutable_flow_tag()->::kentik::flow_tag::v202404alpha1::FlowTag::MergeFrom(from._internal_flow_tag());
  }
}

void UpdateFlowTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFlowTagRequest::CopyFrom(const UpdateFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFlowTagRequest::IsInitialized() const {
  return true;
}

void UpdateFlowTagRequest::InternalSwap(UpdateFlowTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flow_tag_, other->flow_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFlowTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFlowTagResponse::InitAsDefaultInstance() {
  ::kentik::flow_tag::v202404alpha1::_UpdateFlowTagResponse_default_instance_._instance.get_mutable()->flow_tag_ = const_cast< ::kentik::flow_tag::v202404alpha1::FlowTag*>(
      ::kentik::flow_tag::v202404alpha1::FlowTag::internal_default_instance());
}
class UpdateFlowTagResponse::_Internal {
 public:
  static const ::kentik::flow_tag::v202404alpha1::FlowTag& flow_tag(const UpdateFlowTagResponse* msg);
};

const ::kentik::flow_tag::v202404alpha1::FlowTag&
UpdateFlowTagResponse::_Internal::flow_tag(const UpdateFlowTagResponse* msg) {
  return *msg->flow_tag_;
}
UpdateFlowTagResponse::UpdateFlowTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
}
UpdateFlowTagResponse::UpdateFlowTagResponse(const UpdateFlowTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flow_tag()) {
    flow_tag_ = new ::kentik::flow_tag::v202404alpha1::FlowTag(*from.flow_tag_);
  } else {
    flow_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
}

void UpdateFlowTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  flow_tag_ = nullptr;
}

UpdateFlowTagResponse::~UpdateFlowTagResponse() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateFlowTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flow_tag_;
}

void UpdateFlowTagResponse::ArenaDtor(void* object) {
  UpdateFlowTagResponse* _this = reinterpret_cast< UpdateFlowTagResponse* >(object);
  (void)_this;
}
void UpdateFlowTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFlowTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFlowTagResponse& UpdateFlowTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void UpdateFlowTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && flow_tag_ != nullptr) {
    delete flow_tag_;
  }
  flow_tag_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFlowTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFlowTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flow_tag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  return target;
}

size_t UpdateFlowTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.flow_tag.v202404alpha1.FlowTag flow_tag = 1[json_name = "flowTag"];
  if (this->has_flow_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_tag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFlowTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFlowTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFlowTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
    MergeFrom(*source);
  }
}

void UpdateFlowTagResponse::MergeFrom(const UpdateFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flow_tag()) {
    _internal_mutable_flow_tag()->::kentik::flow_tag::v202404alpha1::FlowTag::MergeFrom(from._internal_flow_tag());
  }
}

void UpdateFlowTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFlowTagResponse::CopyFrom(const UpdateFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFlowTagResponse::IsInitialized() const {
  return true;
}

void UpdateFlowTagResponse::InternalSwap(UpdateFlowTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flow_tag_, other->flow_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFlowTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFlowTagRequest::InitAsDefaultInstance() {
}
class DeleteFlowTagRequest::_Internal {
 public:
};

DeleteFlowTagRequest::DeleteFlowTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
}
DeleteFlowTagRequest::DeleteFlowTagRequest(const DeleteFlowTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
}

void DeleteFlowTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteFlowTagRequest::~DeleteFlowTagRequest() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteFlowTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteFlowTagRequest::ArenaDtor(void* object) {
  DeleteFlowTagRequest* _this = reinterpret_cast< DeleteFlowTagRequest* >(object);
  (void)_this;
}
void DeleteFlowTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFlowTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFlowTagRequest& DeleteFlowTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFlowTagRequest_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void DeleteFlowTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFlowTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFlowTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  return target;
}

size_t DeleteFlowTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFlowTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFlowTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFlowTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
    MergeFrom(*source);
  }
}

void DeleteFlowTagRequest::MergeFrom(const DeleteFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteFlowTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFlowTagRequest::CopyFrom(const DeleteFlowTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFlowTagRequest::IsInitialized() const {
  return true;
}

void DeleteFlowTagRequest::InternalSwap(DeleteFlowTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFlowTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFlowTagResponse::InitAsDefaultInstance() {
}
class DeleteFlowTagResponse::_Internal {
 public:
};

DeleteFlowTagResponse::DeleteFlowTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
}
DeleteFlowTagResponse::DeleteFlowTagResponse(const DeleteFlowTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
}

void DeleteFlowTagResponse::SharedCtor() {
}

DeleteFlowTagResponse::~DeleteFlowTagResponse() {
  // @@protoc_insertion_point(destructor:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteFlowTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteFlowTagResponse::ArenaDtor(void* object) {
  DeleteFlowTagResponse* _this = reinterpret_cast< DeleteFlowTagResponse* >(object);
  (void)_this;
}
void DeleteFlowTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFlowTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFlowTagResponse& DeleteFlowTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFlowTagResponse_kentik_2fflow_5ftag_2fv202404alpha1_2fflow_5ftag_2eproto.base);
  return *internal_default_instance();
}


void DeleteFlowTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFlowTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFlowTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  return target;
}

size_t DeleteFlowTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFlowTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFlowTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFlowTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
    MergeFrom(*source);
  }
}

void DeleteFlowTagResponse::MergeFrom(const DeleteFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteFlowTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFlowTagResponse::CopyFrom(const DeleteFlowTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFlowTagResponse::IsInitialized() const {
  return true;
}

void DeleteFlowTagResponse::InternalSwap(DeleteFlowTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFlowTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202404alpha1
}  // namespace flow_tag
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::Model* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::OrderField* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::OrderField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::OrderField >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::FlowTagSearch* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::FlowTagSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::FlowTagSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::AddressInfo* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::AddressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::AddressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::FlowTag* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::FlowTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::FlowTag >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::GetFlowTagRequest* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::GetFlowTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::GetFlowTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::GetFlowTagResponse* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::GetFlowTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::GetFlowTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::SearchFlowTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::SearchFlowTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::CreateFlowTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::CreateFlowTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::UpdateFlowTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::UpdateFlowTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::DeleteFlowTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse* Arena::CreateMaybeMessage< ::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::flow_tag::v202404alpha1::DeleteFlowTagResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
