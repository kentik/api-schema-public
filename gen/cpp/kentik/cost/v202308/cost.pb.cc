// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/cost/v202308/cost.proto

#include "kentik/cost/v202308/cost.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcost_2fv202308_2fcost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcost_2fv202308_2fcost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto;
namespace kentik {
namespace cost {
namespace v202308 {
class CostProviderSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostProviderSummary> _instance;
} _CostProviderSummary_default_instance_;
class CostProviderConciseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostProviderConcise> _instance;
} _CostProviderConcise_default_instance_;
class ListCostProvidersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCostProvidersRequest> _instance;
} _ListCostProvidersRequest_default_instance_;
class ListCostProvidersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCostProvidersResponse> _instance;
} _ListCostProvidersResponse_default_instance_;
class ListCostProviderSummariesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCostProviderSummariesRequest> _instance;
} _ListCostProviderSummariesRequest_default_instance_;
class ListCostProviderSummariesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCostProviderSummariesResponse> _instance;
} _ListCostProviderSummariesResponse_default_instance_;
class GetCostProviderSummaryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCostProviderSummaryRequest> _instance;
} _GetCostProviderSummaryRequest_default_instance_;
class GetCostProviderSummaryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCostProviderSummaryResponse> _instance;
} _GetCostProviderSummaryResponse_default_instance_;
}  // namespace v202308
}  // namespace cost
}  // namespace kentik
static void InitDefaultsscc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_CostProviderConcise_default_instance_;
    new (ptr) ::kentik::cost::v202308::CostProviderConcise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::CostProviderConcise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto}, {}};

static void InitDefaultsscc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_CostProviderSummary_default_instance_;
    new (ptr) ::kentik::cost::v202308::CostProviderSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::CostProviderSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto}, {}};

static void InitDefaultsscc_info_GetCostProviderSummaryRequest_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_GetCostProviderSummaryRequest_default_instance_;
    new (ptr) ::kentik::cost::v202308::GetCostProviderSummaryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::GetCostProviderSummaryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCostProviderSummaryRequest_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCostProviderSummaryRequest_kentik_2fcost_2fv202308_2fcost_2eproto}, {}};

static void InitDefaultsscc_info_GetCostProviderSummaryResponse_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_GetCostProviderSummaryResponse_default_instance_;
    new (ptr) ::kentik::cost::v202308::GetCostProviderSummaryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::GetCostProviderSummaryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCostProviderSummaryResponse_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCostProviderSummaryResponse_kentik_2fcost_2fv202308_2fcost_2eproto}, {
      &scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto.base,}};

static void InitDefaultsscc_info_ListCostProviderSummariesRequest_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_ListCostProviderSummariesRequest_default_instance_;
    new (ptr) ::kentik::cost::v202308::ListCostProviderSummariesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::ListCostProviderSummariesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListCostProviderSummariesRequest_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListCostProviderSummariesRequest_kentik_2fcost_2fv202308_2fcost_2eproto}, {}};

static void InitDefaultsscc_info_ListCostProviderSummariesResponse_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_ListCostProviderSummariesResponse_default_instance_;
    new (ptr) ::kentik::cost::v202308::ListCostProviderSummariesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::ListCostProviderSummariesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCostProviderSummariesResponse_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCostProviderSummariesResponse_kentik_2fcost_2fv202308_2fcost_2eproto}, {
      &scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto.base,}};

static void InitDefaultsscc_info_ListCostProvidersRequest_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_ListCostProvidersRequest_default_instance_;
    new (ptr) ::kentik::cost::v202308::ListCostProvidersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::ListCostProvidersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListCostProvidersRequest_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListCostProvidersRequest_kentik_2fcost_2fv202308_2fcost_2eproto}, {}};

static void InitDefaultsscc_info_ListCostProvidersResponse_kentik_2fcost_2fv202308_2fcost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::cost::v202308::_ListCostProvidersResponse_default_instance_;
    new (ptr) ::kentik::cost::v202308::ListCostProvidersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::cost::v202308::ListCostProvidersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCostProvidersResponse_kentik_2fcost_2fv202308_2fcost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCostProvidersResponse_kentik_2fcost_2fv202308_2fcost_2eproto}, {
      &scc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fcost_2fv202308_2fcost_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fcost_2fv202308_2fcost_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fcost_2fv202308_2fcost_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fcost_2fv202308_2fcost_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, date_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, total_cost_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, total_cost_variation_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, total_cost_group_additional_cost_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, total_cost_group_additional_interface_cost_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, currency_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, cost_per_mbps_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, cost_per_mbps_variation_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, provider_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, cost_group_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, cost_group_conn_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, site_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, site_market_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, ingress_traffic_mbps_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, ingress_traffic_variation_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, egress_traffic_mbps_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderSummary, egress_traffic_variation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderConcise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderConcise, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::CostProviderConcise, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProvidersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProvidersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProvidersResponse, providers_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProvidersResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProviderSummariesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProviderSummariesRequest, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProviderSummariesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProviderSummariesResponse, providers_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::ListCostProviderSummariesResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::GetCostProviderSummaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::GetCostProviderSummaryRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::GetCostProviderSummaryRequest, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::GetCostProviderSummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::GetCostProviderSummaryResponse, providers_),
  PROTOBUF_FIELD_OFFSET(::kentik::cost::v202308::GetCostProviderSummaryResponse, invalid_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::cost::v202308::CostProviderSummary)},
  { 23, -1, sizeof(::kentik::cost::v202308::CostProviderConcise)},
  { 30, -1, sizeof(::kentik::cost::v202308::ListCostProvidersRequest)},
  { 35, -1, sizeof(::kentik::cost::v202308::ListCostProvidersResponse)},
  { 42, -1, sizeof(::kentik::cost::v202308::ListCostProviderSummariesRequest)},
  { 48, -1, sizeof(::kentik::cost::v202308::ListCostProviderSummariesResponse)},
  { 55, -1, sizeof(::kentik::cost::v202308::GetCostProviderSummaryRequest)},
  { 62, -1, sizeof(::kentik::cost::v202308::GetCostProviderSummaryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_CostProviderSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_CostProviderConcise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_ListCostProvidersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_ListCostProvidersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_ListCostProviderSummariesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_ListCostProviderSummariesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_GetCostProviderSummaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::cost::v202308::_GetCostProviderSummaryResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fcost_2fv202308_2fcost_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036kentik/cost/v202308/cost.proto\022\023kentik"
  ".cost.v202308\032\034google/api/annotations.pr"
  "oto\032\027google/api/client.proto\032\037google/api"
  "/field_behavior.proto\032\037google/protobuf/t"
  "imestamp.proto\032.protoc-gen-openapiv2/opt"
  "ions/annotations.proto\032%kentik/core/v202"
  "303/annotations.proto\"\325\020\n\023CostProviderSu"
  "mmary\022D\n\004date\030\001 \001(\tB0\222A-2+Date of the co"
  "st provider summary (YYYY-MM)R\004date\022\302\001\n\006"
  "status\030\002 \001(\0162\033.kentik.cost.v202308.Statu"
  "sB\214\001\222A\210\0012\205\001Status of the billing cycle f"
  "or the cost provider. Billing cycle is c"
  "omplete if a month has passed since the "
  "billing cycle start dateR\006status\022C\n\ntota"
  "l_cost\030\003 \001(\002B$\222A!2\037Total cost of the cos"
  "t providerR\ttotalCost\022\223\001\n\024total_cost_var"
  "iation\030\004 \001(\tBa\222A^2\\Total cost percent va"
  "riation of the cost provider (percentage"
  " changed vs the previous month)R\022totalCo"
  "stVariation\022\202\001\n total_cost_group_additio"
  "nal_cost\030\005 \001(\002B:\222A725Total cost group ad"
  "ditional cost of the cost providerR\034tota"
  "lCostGroupAdditionalCost\022\237\001\n*total_cost_"
  "group_additional_interface_cost\030\006 \001(\002BD\222"
  "AA2\?Total cost group additional interfac"
  "e cost of the cost providerR%totalCostGr"
  "oupAdditionalInterfaceCost\022^\n\010currency\030\007"
  " \001(\tBB\222A\?2=Currency (ISO 4217) used for "
  "cost values of the cost providerR\010curren"
  "cy\022e\n\rcost_per_mbps\030\010 \001(\002BA\222A>2<Cost per"
  " mbps (million bits per second) of the c"
  "ost providerR\013costPerMbps\022\233\001\n\027cost_per_m"
  "bps_variation\030\t \001(\tBd\222Aa2_Cost per mbps "
  "percent variation of the cost provider ("
  "percentage changed vs the previous month"
  ")R\024costPerMbpsVariation\022L\n\rprovider_name"
  "\030\n \001(\tB\'\222A$2\"Provider name of the cost p"
  "roviderR\014providerName\022Q\n\017cost_group_name"
  "\030\013 \001(\tB)\222A&2$Cost group name of the cost"
  " providerR\rcostGroupName\022e\n\024cost_group_c"
  "onn_type\030\014 \001(\tB4\222A12/Cost group connecti"
  "on type of the cost providerR\021costGroupC"
  "onnType\022@\n\tsite_name\030\r \001(\tB#\222A 2\036Site na"
  "me of the cost providerR\010siteName\022F\n\013sit"
  "e_market\030\016 \001(\tB%\222A\"2 Site market of the "
  "cost providerR\nsiteMarket\022z\n\024ingress_tra"
  "ffic_mbps\030\017 \001(\002BH\222AE2CIngress traffic mb"
  "ps (million bits per second) of the cost"
  " providerR\022ingressTrafficMbps\022\242\001\n\031ingres"
  "s_traffic_variation\030\020 \001(\tBf\222Ac2aIngress "
  "traffic percent variation of the cost pr"
  "ovider (percentage changed vs the previo"
  "us month)R\027ingressTrafficVariation\022w\n\023eg"
  "ress_traffic_mbps\030\021 \001(\002BG\222AD2BEgress tra"
  "ffic mbps (million bits per second) of t"
  "he cost providerR\021egressTrafficMbps\022\237\001\n\030"
  "egress_traffic_variation\030\022 \001(\tBe\222Ab2`Egr"
  "ess traffic percent variation of the cos"
  "t provider (percentage changed vs the pr"
  "evious month)R\026egressTrafficVariation\"\177\n"
  "\023CostProviderConcise\0220\n\002id\030\001 \001(\tB \222A\0312\027I"
  "D of the cost provider\342A\001\003R\002id\0226\n\004name\030\002"
  " \001(\tB\"\222A\0332\031Name of the cost provider\342A\001\002"
  "R\004name\"\032\n\030ListCostProvidersRequest\"\203\002\n\031L"
  "istCostProvidersResponse\022\177\n\tproviders\030\001 "
  "\003(\0132(.kentik.cost.v202308.CostProviderCo"
  "nciseB7\222A422List of configurations of re"
  "quested cost providersR\tproviders\022e\n\rinv"
  "alid_count\030\002 \001(\rB@\222A=2;Number of invalid"
  " entries encountered while collecting da"
  "taR\014invalidCount\"h\n ListCostProviderSumm"
  "ariesRequest\022D\n\004date\030\001 \001(\tB0\222A-2+Date of"
  " the cost provider summary (YYYY-MM)R\004da"
  "te\"\206\002\n!ListCostProviderSummariesResponse"
  "\022z\n\tproviders\030\001 \003(\0132(.kentik.cost.v20230"
  "8.CostProviderSummaryB2\222A/2-List of summ"
  "aries of requested cost providersR\tprovi"
  "ders\022e\n\rinvalid_count\030\002 \001(\rB@\222A=2;Number"
  " of invalid entries encountered while co"
  "llecting dataR\014invalidCount\"\276\001\n\035GetCostP"
  "roviderSummaryRequest\022W\n\002id\030\001 \001(\tBG\222AD2B"
  "ID of the cost provider (can be found us"
  "ing ListCostProviders RPC)R\002id\022D\n\004date\030\002"
  " \001(\tB0\222A-2+Date of the cost provider sum"
  "mary (YYYY-MM)R\004date\"\203\002\n\036GetCostProvider"
  "SummaryResponse\022z\n\tproviders\030\001 \003(\0132(.ken"
  "tik.cost.v202308.CostProviderSummaryB2\222A"
  "/2-List of summaries of requested cost p"
  "rovidersR\tproviders\022e\n\rinvalid_count\030\002 \001"
  "(\rB@\222A=2;Number of invalid entries encou"
  "ntered while collecting dataR\014invalidCou"
  "nt*L\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\025\n\021"
  "STATUS_INCOMPLETE\020\001\022\023\n\017STATUS_COMPLETE\020\002"
  "2\247\007\n\013CostService\022\210\002\n\021ListCostProviders\022-"
  ".kentik.cost.v202308.ListCostProvidersRe"
  "quest\032..kentik.cost.v202308.ListCostProv"
  "idersResponse\"\223\001\222AY\022\030List all cost provi"
  "ders.\032*Returns list of configured cost p"
  "roviders.*\021ListCostProviders\362\327\002\017admin.co"
  "st:read\202\323\344\223\002\036\022\034/cost/v202308/cost/provid"
  "ers\022\274\002\n\031ListCostProviderSummaries\0225.kent"
  "ik.cost.v202308.ListCostProviderSummarie"
  "sRequest\0326.kentik.cost.v202308.ListCostP"
  "roviderSummariesResponse\"\257\001\222Aw\022!List all"
  " cost provider summaries.\0327Returns list "
  "of summaries of configured cost provider"
  "s.*\031ListCostProviderSummaries\362\327\002\017admin.c"
  "ost:read\202\323\344\223\002\034\022\032/cost/v202308/cost/summa"
  "ry\022\243\002\n\026GetCostProviderSummary\0222.kentik.c"
  "ost.v202308.GetCostProviderSummaryReques"
  "t\0323.kentik.cost.v202308.GetCostProviderS"
  "ummaryResponse\"\237\001\222Ab\022\032Get cost provider "
  "summary.\032,Returns summary of configured "
  "cost provider.*\026GetCostProviderSummary\362\327"
  "\002\017admin.cost:read\202\323\344\223\002!\022\037/cost/v202308/c"
  "ost/summary/{id}\032(\312A\023grpc.api.kentik.com"
  "\352\327\002\nadmin.cost\220\330\002\003B\235\004ZCgithub.com/kentik"
  "/api-schema-public/gen/go/kentik/cost/v2"
  "02308;cost\222A\324\003\022\355\001\n#Connectivity Cost Con"
  "figuration API\022v# Overview\nThe Connectiv"
  "ity Cost Configuration API provides prog"
  "rammatic access to configuration of Conn"
  "ectivity Costs\"E\n\026Kentik API Engineering"
  "\022+https://github.com/kentik/api-schema-p"
  "ublic2\007v202308*\001\0022\020application/json:\020app"
  "lication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-"
  "Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Toke"
  "n \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General i"
  "nformation about Kentik APIs\0224https://kb"
  ".kentik.com/v0/Ab09.htm#Ab09-APIs_Overvi"
  "ewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto_sccs[8] = {
  &scc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_GetCostProviderSummaryRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_GetCostProviderSummaryResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_ListCostProviderSummariesRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_ListCostProviderSummariesResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_ListCostProvidersRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base,
  &scc_info_ListCostProvidersResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fcost_2fv202308_2fcost_2eproto, "kentik/cost/v202308/cost.proto", 5210,
  &descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto_once, descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto_sccs, descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto_deps, 8, 6,
  schemas, file_default_instances, TableStruct_kentik_2fcost_2fv202308_2fcost_2eproto::offsets,
  file_level_metadata_kentik_2fcost_2fv202308_2fcost_2eproto, 8, file_level_enum_descriptors_kentik_2fcost_2fv202308_2fcost_2eproto, file_level_service_descriptors_kentik_2fcost_2fv202308_2fcost_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fcost_2fv202308_2fcost_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto)), true);
namespace kentik {
namespace cost {
namespace v202308 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fcost_2fv202308_2fcost_2eproto);
  return file_level_enum_descriptors_kentik_2fcost_2fv202308_2fcost_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CostProviderSummary::InitAsDefaultInstance() {
}
class CostProviderSummary::_Internal {
 public:
};

CostProviderSummary::CostProviderSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.CostProviderSummary)
}
CostProviderSummary::CostProviderSummary(const CostProviderSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  total_cost_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_cost_variation().empty()) {
    total_cost_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_total_cost_variation(),
      GetArena());
  }
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currency(),
      GetArena());
  }
  cost_per_mbps_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cost_per_mbps_variation().empty()) {
    cost_per_mbps_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cost_per_mbps_variation(),
      GetArena());
  }
  provider_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_name().empty()) {
    provider_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_provider_name(),
      GetArena());
  }
  cost_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cost_group_name().empty()) {
    cost_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cost_group_name(),
      GetArena());
  }
  cost_group_conn_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cost_group_conn_type().empty()) {
    cost_group_conn_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cost_group_conn_type(),
      GetArena());
  }
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_name().empty()) {
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_name(),
      GetArena());
  }
  site_market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_market().empty()) {
    site_market_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_market(),
      GetArena());
  }
  ingress_traffic_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ingress_traffic_variation().empty()) {
    ingress_traffic_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ingress_traffic_variation(),
      GetArena());
  }
  egress_traffic_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_egress_traffic_variation().empty()) {
    egress_traffic_variation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_egress_traffic_variation(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&egress_traffic_mbps_) -
    reinterpret_cast<char*>(&status_)) + sizeof(egress_traffic_mbps_));
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.CostProviderSummary)
}

void CostProviderSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_cost_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_per_mbps_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_group_conn_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ingress_traffic_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  egress_traffic_variation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&egress_traffic_mbps_) -
      reinterpret_cast<char*>(&status_)) + sizeof(egress_traffic_mbps_));
}

CostProviderSummary::~CostProviderSummary() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.CostProviderSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostProviderSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_cost_variation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_per_mbps_variation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_group_conn_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ingress_traffic_variation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  egress_traffic_variation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CostProviderSummary::ArenaDtor(void* object) {
  CostProviderSummary* _this = reinterpret_cast< CostProviderSummary* >(object);
  (void)_this;
}
void CostProviderSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostProviderSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostProviderSummary& CostProviderSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostProviderSummary_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void CostProviderSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.CostProviderSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_cost_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_per_mbps_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_group_conn_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_market_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ingress_traffic_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  egress_traffic_variation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&egress_traffic_mbps_) -
      reinterpret_cast<char*>(&status_)) + sizeof(egress_traffic_mbps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostProviderSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string date = 1[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.cost.v202308.Status status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::cost::v202308::Status>(val));
        } else goto handle_unusual;
        continue;
      // float total_cost = 3[json_name = "totalCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          total_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string total_cost_variation = 4[json_name = "totalCostVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_total_cost_variation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.total_cost_variation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float total_cost_group_additional_cost = 5[json_name = "totalCostGroupAdditionalCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          total_cost_group_additional_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float total_cost_group_additional_interface_cost = 6[json_name = "totalCostGroupAdditionalInterfaceCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          total_cost_group_additional_interface_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string currency = 7[json_name = "currency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cost_per_mbps = 8[json_name = "costPerMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          cost_per_mbps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string cost_per_mbps_variation = 9[json_name = "costPerMbpsVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_cost_per_mbps_variation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.cost_per_mbps_variation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider_name = 10[json_name = "providerName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_provider_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.provider_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cost_group_name = 11[json_name = "costGroupName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_cost_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.cost_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cost_group_conn_type = 12[json_name = "costGroupConnType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_cost_group_conn_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.cost_group_conn_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_name = 13[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.site_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_market = 14[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_site_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.site_market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ingress_traffic_mbps = 15[json_name = "ingressTrafficMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ingress_traffic_mbps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string ingress_traffic_variation = 16[json_name = "ingressTrafficVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_ingress_traffic_variation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.ingress_traffic_variation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float egress_traffic_mbps = 17[json_name = "egressTrafficMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          egress_traffic_mbps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string egress_traffic_variation = 18[json_name = "egressTrafficVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_egress_traffic_variation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderSummary.egress_traffic_variation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostProviderSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.CostProviderSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date = 1[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date(), target);
  }

  // .kentik.cost.v202308.Status status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // float total_cost = 3[json_name = "totalCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->total_cost() <= 0 && this->total_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_total_cost(), target);
  }

  // string total_cost_variation = 4[json_name = "totalCostVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->total_cost_variation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_cost_variation().data(), static_cast<int>(this->_internal_total_cost_variation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.total_cost_variation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_total_cost_variation(), target);
  }

  // float total_cost_group_additional_cost = 5[json_name = "totalCostGroupAdditionalCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->total_cost_group_additional_cost() <= 0 && this->total_cost_group_additional_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_total_cost_group_additional_cost(), target);
  }

  // float total_cost_group_additional_interface_cost = 6[json_name = "totalCostGroupAdditionalInterfaceCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->total_cost_group_additional_interface_cost() <= 0 && this->total_cost_group_additional_interface_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_total_cost_group_additional_interface_cost(), target);
  }

  // string currency = 7[json_name = "currency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.currency");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_currency(), target);
  }

  // float cost_per_mbps = 8[json_name = "costPerMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->cost_per_mbps() <= 0 && this->cost_per_mbps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cost_per_mbps(), target);
  }

  // string cost_per_mbps_variation = 9[json_name = "costPerMbpsVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cost_per_mbps_variation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cost_per_mbps_variation().data(), static_cast<int>(this->_internal_cost_per_mbps_variation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.cost_per_mbps_variation");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_cost_per_mbps_variation(), target);
  }

  // string provider_name = 10[json_name = "providerName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->provider_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_name().data(), static_cast<int>(this->_internal_provider_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.provider_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_provider_name(), target);
  }

  // string cost_group_name = 11[json_name = "costGroupName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cost_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cost_group_name().data(), static_cast<int>(this->_internal_cost_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.cost_group_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_cost_group_name(), target);
  }

  // string cost_group_conn_type = 12[json_name = "costGroupConnType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cost_group_conn_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cost_group_conn_type().data(), static_cast<int>(this->_internal_cost_group_conn_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.cost_group_conn_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_cost_group_conn_type(), target);
  }

  // string site_name = 13[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_name().data(), static_cast<int>(this->_internal_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.site_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_site_name(), target);
  }

  // string site_market = 14[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_market().data(), static_cast<int>(this->_internal_site_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.site_market");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_site_market(), target);
  }

  // float ingress_traffic_mbps = 15[json_name = "ingressTrafficMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->ingress_traffic_mbps() <= 0 && this->ingress_traffic_mbps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_ingress_traffic_mbps(), target);
  }

  // string ingress_traffic_variation = 16[json_name = "ingressTrafficVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ingress_traffic_variation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ingress_traffic_variation().data(), static_cast<int>(this->_internal_ingress_traffic_variation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.ingress_traffic_variation");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_ingress_traffic_variation(), target);
  }

  // float egress_traffic_mbps = 17[json_name = "egressTrafficMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->egress_traffic_mbps() <= 0 && this->egress_traffic_mbps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_egress_traffic_mbps(), target);
  }

  // string egress_traffic_variation = 18[json_name = "egressTrafficVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->egress_traffic_variation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_traffic_variation().data(), static_cast<int>(this->_internal_egress_traffic_variation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderSummary.egress_traffic_variation");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_egress_traffic_variation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.CostProviderSummary)
  return target;
}

size_t CostProviderSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.CostProviderSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 1[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string total_cost_variation = 4[json_name = "totalCostVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->total_cost_variation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_cost_variation());
  }

  // string currency = 7[json_name = "currency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string cost_per_mbps_variation = 9[json_name = "costPerMbpsVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cost_per_mbps_variation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost_per_mbps_variation());
  }

  // string provider_name = 10[json_name = "providerName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->provider_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_name());
  }

  // string cost_group_name = 11[json_name = "costGroupName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cost_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost_group_name());
  }

  // string cost_group_conn_type = 12[json_name = "costGroupConnType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cost_group_conn_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost_group_conn_type());
  }

  // string site_name = 13[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_name());
  }

  // string site_market = 14[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_market());
  }

  // string ingress_traffic_variation = 16[json_name = "ingressTrafficVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ingress_traffic_variation().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ingress_traffic_variation());
  }

  // string egress_traffic_variation = 18[json_name = "egressTrafficVariation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->egress_traffic_variation().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress_traffic_variation());
  }

  // .kentik.cost.v202308.Status status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float total_cost = 3[json_name = "totalCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->total_cost() <= 0 && this->total_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float total_cost_group_additional_cost = 5[json_name = "totalCostGroupAdditionalCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->total_cost_group_additional_cost() <= 0 && this->total_cost_group_additional_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float total_cost_group_additional_interface_cost = 6[json_name = "totalCostGroupAdditionalInterfaceCost", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->total_cost_group_additional_interface_cost() <= 0 && this->total_cost_group_additional_interface_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float cost_per_mbps = 8[json_name = "costPerMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->cost_per_mbps() <= 0 && this->cost_per_mbps() >= 0)) {
    total_size += 1 + 4;
  }

  // float ingress_traffic_mbps = 15[json_name = "ingressTrafficMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->ingress_traffic_mbps() <= 0 && this->ingress_traffic_mbps() >= 0)) {
    total_size += 1 + 4;
  }

  // float egress_traffic_mbps = 17[json_name = "egressTrafficMbps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->egress_traffic_mbps() <= 0 && this->egress_traffic_mbps() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostProviderSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.CostProviderSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CostProviderSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostProviderSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.CostProviderSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.CostProviderSummary)
    MergeFrom(*source);
  }
}

void CostProviderSummary::MergeFrom(const CostProviderSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.CostProviderSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.total_cost_variation().size() > 0) {
    _internal_set_total_cost_variation(from._internal_total_cost_variation());
  }
  if (from.currency().size() > 0) {
    _internal_set_currency(from._internal_currency());
  }
  if (from.cost_per_mbps_variation().size() > 0) {
    _internal_set_cost_per_mbps_variation(from._internal_cost_per_mbps_variation());
  }
  if (from.provider_name().size() > 0) {
    _internal_set_provider_name(from._internal_provider_name());
  }
  if (from.cost_group_name().size() > 0) {
    _internal_set_cost_group_name(from._internal_cost_group_name());
  }
  if (from.cost_group_conn_type().size() > 0) {
    _internal_set_cost_group_conn_type(from._internal_cost_group_conn_type());
  }
  if (from.site_name().size() > 0) {
    _internal_set_site_name(from._internal_site_name());
  }
  if (from.site_market().size() > 0) {
    _internal_set_site_market(from._internal_site_market());
  }
  if (from.ingress_traffic_variation().size() > 0) {
    _internal_set_ingress_traffic_variation(from._internal_ingress_traffic_variation());
  }
  if (from.egress_traffic_variation().size() > 0) {
    _internal_set_egress_traffic_variation(from._internal_egress_traffic_variation());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.total_cost() <= 0 && from.total_cost() >= 0)) {
    _internal_set_total_cost(from._internal_total_cost());
  }
  if (!(from.total_cost_group_additional_cost() <= 0 && from.total_cost_group_additional_cost() >= 0)) {
    _internal_set_total_cost_group_additional_cost(from._internal_total_cost_group_additional_cost());
  }
  if (!(from.total_cost_group_additional_interface_cost() <= 0 && from.total_cost_group_additional_interface_cost() >= 0)) {
    _internal_set_total_cost_group_additional_interface_cost(from._internal_total_cost_group_additional_interface_cost());
  }
  if (!(from.cost_per_mbps() <= 0 && from.cost_per_mbps() >= 0)) {
    _internal_set_cost_per_mbps(from._internal_cost_per_mbps());
  }
  if (!(from.ingress_traffic_mbps() <= 0 && from.ingress_traffic_mbps() >= 0)) {
    _internal_set_ingress_traffic_mbps(from._internal_ingress_traffic_mbps());
  }
  if (!(from.egress_traffic_mbps() <= 0 && from.egress_traffic_mbps() >= 0)) {
    _internal_set_egress_traffic_mbps(from._internal_egress_traffic_mbps());
  }
}

void CostProviderSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.CostProviderSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostProviderSummary::CopyFrom(const CostProviderSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.CostProviderSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostProviderSummary::IsInitialized() const {
  return true;
}

void CostProviderSummary::InternalSwap(CostProviderSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_cost_variation_.Swap(&other->total_cost_variation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_per_mbps_variation_.Swap(&other->cost_per_mbps_variation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_name_.Swap(&other->provider_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_group_name_.Swap(&other->cost_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_group_conn_type_.Swap(&other->cost_group_conn_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_name_.Swap(&other->site_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_market_.Swap(&other->site_market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ingress_traffic_variation_.Swap(&other->ingress_traffic_variation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  egress_traffic_variation_.Swap(&other->egress_traffic_variation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostProviderSummary, egress_traffic_mbps_)
      + sizeof(CostProviderSummary::egress_traffic_mbps_)
      - PROTOBUF_FIELD_OFFSET(CostProviderSummary, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostProviderSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CostProviderConcise::InitAsDefaultInstance() {
}
class CostProviderConcise::_Internal {
 public:
};

CostProviderConcise::CostProviderConcise(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.CostProviderConcise)
}
CostProviderConcise::CostProviderConcise(const CostProviderConcise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.CostProviderConcise)
}

void CostProviderConcise::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CostProviderConcise::~CostProviderConcise() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.CostProviderConcise)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostProviderConcise::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CostProviderConcise::ArenaDtor(void* object) {
  CostProviderConcise* _this = reinterpret_cast< CostProviderConcise* >(object);
  (void)_this;
}
void CostProviderConcise::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostProviderConcise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostProviderConcise& CostProviderConcise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostProviderConcise_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void CostProviderConcise::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.CostProviderConcise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostProviderConcise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderConcise.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.CostProviderConcise.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostProviderConcise::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.CostProviderConcise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderConcise.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.CostProviderConcise.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.CostProviderConcise)
  return target;
}

size_t CostProviderConcise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.CostProviderConcise)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostProviderConcise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.CostProviderConcise)
  GOOGLE_DCHECK_NE(&from, this);
  const CostProviderConcise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostProviderConcise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.CostProviderConcise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.CostProviderConcise)
    MergeFrom(*source);
  }
}

void CostProviderConcise::MergeFrom(const CostProviderConcise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.CostProviderConcise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void CostProviderConcise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.CostProviderConcise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostProviderConcise::CopyFrom(const CostProviderConcise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.CostProviderConcise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostProviderConcise::IsInitialized() const {
  return true;
}

void CostProviderConcise::InternalSwap(CostProviderConcise* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CostProviderConcise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCostProvidersRequest::InitAsDefaultInstance() {
}
class ListCostProvidersRequest::_Internal {
 public:
};

ListCostProvidersRequest::ListCostProvidersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.ListCostProvidersRequest)
}
ListCostProvidersRequest::ListCostProvidersRequest(const ListCostProvidersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.ListCostProvidersRequest)
}

void ListCostProvidersRequest::SharedCtor() {
}

ListCostProvidersRequest::~ListCostProvidersRequest() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.ListCostProvidersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCostProvidersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCostProvidersRequest::ArenaDtor(void* object) {
  ListCostProvidersRequest* _this = reinterpret_cast< ListCostProvidersRequest* >(object);
  (void)_this;
}
void ListCostProvidersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCostProvidersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCostProvidersRequest& ListCostProvidersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCostProvidersRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void ListCostProvidersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.ListCostProvidersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCostProvidersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCostProvidersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.ListCostProvidersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.ListCostProvidersRequest)
  return target;
}

size_t ListCostProvidersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.ListCostProvidersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCostProvidersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.ListCostProvidersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCostProvidersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCostProvidersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.ListCostProvidersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.ListCostProvidersRequest)
    MergeFrom(*source);
  }
}

void ListCostProvidersRequest::MergeFrom(const ListCostProvidersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.ListCostProvidersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListCostProvidersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.ListCostProvidersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCostProvidersRequest::CopyFrom(const ListCostProvidersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.ListCostProvidersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCostProvidersRequest::IsInitialized() const {
  return true;
}

void ListCostProvidersRequest::InternalSwap(ListCostProvidersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCostProvidersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCostProvidersResponse::InitAsDefaultInstance() {
}
class ListCostProvidersResponse::_Internal {
 public:
};

ListCostProvidersResponse::ListCostProvidersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  providers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.ListCostProvidersResponse)
}
ListCostProvidersResponse::ListCostProvidersResponse(const ListCostProvidersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.ListCostProvidersResponse)
}

void ListCostProvidersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCostProvidersResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  invalid_count_ = 0u;
}

ListCostProvidersResponse::~ListCostProvidersResponse() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.ListCostProvidersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCostProvidersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCostProvidersResponse::ArenaDtor(void* object) {
  ListCostProvidersResponse* _this = reinterpret_cast< ListCostProvidersResponse* >(object);
  (void)_this;
}
void ListCostProvidersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCostProvidersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCostProvidersResponse& ListCostProvidersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCostProvidersResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void ListCostProvidersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.ListCostProvidersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providers_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCostProvidersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.cost.v202308.CostProviderConcise providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCostProvidersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.ListCostProvidersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.cost.v202308.CostProviderConcise providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_providers(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.ListCostProvidersResponse)
  return target;
}

size_t ListCostProvidersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.ListCostProvidersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.cost.v202308.CostProviderConcise providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCostProvidersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.ListCostProvidersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCostProvidersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCostProvidersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.ListCostProvidersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.ListCostProvidersResponse)
    MergeFrom(*source);
  }
}

void ListCostProvidersResponse::MergeFrom(const ListCostProvidersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.ListCostProvidersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListCostProvidersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.ListCostProvidersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCostProvidersResponse::CopyFrom(const ListCostProvidersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.ListCostProvidersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCostProvidersResponse::IsInitialized() const {
  return true;
}

void ListCostProvidersResponse::InternalSwap(ListCostProvidersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  providers_.InternalSwap(&other->providers_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCostProvidersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCostProviderSummariesRequest::InitAsDefaultInstance() {
}
class ListCostProviderSummariesRequest::_Internal {
 public:
};

ListCostProviderSummariesRequest::ListCostProviderSummariesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.ListCostProviderSummariesRequest)
}
ListCostProviderSummariesRequest::ListCostProviderSummariesRequest(const ListCostProviderSummariesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.ListCostProviderSummariesRequest)
}

void ListCostProviderSummariesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCostProviderSummariesRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListCostProviderSummariesRequest::~ListCostProviderSummariesRequest() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.ListCostProviderSummariesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCostProviderSummariesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListCostProviderSummariesRequest::ArenaDtor(void* object) {
  ListCostProviderSummariesRequest* _this = reinterpret_cast< ListCostProviderSummariesRequest* >(object);
  (void)_this;
}
void ListCostProviderSummariesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCostProviderSummariesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCostProviderSummariesRequest& ListCostProviderSummariesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCostProviderSummariesRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void ListCostProviderSummariesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCostProviderSummariesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string date = 1[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.ListCostProviderSummariesRequest.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCostProviderSummariesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date = 1[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.ListCostProviderSummariesRequest.date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.ListCostProviderSummariesRequest)
  return target;
}

size_t ListCostProviderSummariesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 1[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCostProviderSummariesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCostProviderSummariesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCostProviderSummariesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.ListCostProviderSummariesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.ListCostProviderSummariesRequest)
    MergeFrom(*source);
  }
}

void ListCostProviderSummariesRequest::MergeFrom(const ListCostProviderSummariesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
}

void ListCostProviderSummariesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCostProviderSummariesRequest::CopyFrom(const ListCostProviderSummariesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.ListCostProviderSummariesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCostProviderSummariesRequest::IsInitialized() const {
  return true;
}

void ListCostProviderSummariesRequest::InternalSwap(ListCostProviderSummariesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCostProviderSummariesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCostProviderSummariesResponse::InitAsDefaultInstance() {
}
class ListCostProviderSummariesResponse::_Internal {
 public:
};

ListCostProviderSummariesResponse::ListCostProviderSummariesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  providers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.ListCostProviderSummariesResponse)
}
ListCostProviderSummariesResponse::ListCostProviderSummariesResponse(const ListCostProviderSummariesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.ListCostProviderSummariesResponse)
}

void ListCostProviderSummariesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCostProviderSummariesResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  invalid_count_ = 0u;
}

ListCostProviderSummariesResponse::~ListCostProviderSummariesResponse() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.ListCostProviderSummariesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCostProviderSummariesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCostProviderSummariesResponse::ArenaDtor(void* object) {
  ListCostProviderSummariesResponse* _this = reinterpret_cast< ListCostProviderSummariesResponse* >(object);
  (void)_this;
}
void ListCostProviderSummariesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCostProviderSummariesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCostProviderSummariesResponse& ListCostProviderSummariesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCostProviderSummariesResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void ListCostProviderSummariesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providers_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCostProviderSummariesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.cost.v202308.CostProviderSummary providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCostProviderSummariesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.cost.v202308.CostProviderSummary providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_providers(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.ListCostProviderSummariesResponse)
  return target;
}

size_t ListCostProviderSummariesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.cost.v202308.CostProviderSummary providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCostProviderSummariesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCostProviderSummariesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCostProviderSummariesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.ListCostProviderSummariesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.ListCostProviderSummariesResponse)
    MergeFrom(*source);
  }
}

void ListCostProviderSummariesResponse::MergeFrom(const ListCostProviderSummariesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListCostProviderSummariesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCostProviderSummariesResponse::CopyFrom(const ListCostProviderSummariesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.ListCostProviderSummariesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCostProviderSummariesResponse::IsInitialized() const {
  return true;
}

void ListCostProviderSummariesResponse::InternalSwap(ListCostProviderSummariesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  providers_.InternalSwap(&other->providers_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCostProviderSummariesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCostProviderSummaryRequest::InitAsDefaultInstance() {
}
class GetCostProviderSummaryRequest::_Internal {
 public:
};

GetCostProviderSummaryRequest::GetCostProviderSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.GetCostProviderSummaryRequest)
}
GetCostProviderSummaryRequest::GetCostProviderSummaryRequest(const GetCostProviderSummaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.GetCostProviderSummaryRequest)
}

void GetCostProviderSummaryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCostProviderSummaryRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCostProviderSummaryRequest::~GetCostProviderSummaryRequest() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.GetCostProviderSummaryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCostProviderSummaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCostProviderSummaryRequest::ArenaDtor(void* object) {
  GetCostProviderSummaryRequest* _this = reinterpret_cast< GetCostProviderSummaryRequest* >(object);
  (void)_this;
}
void GetCostProviderSummaryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCostProviderSummaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCostProviderSummaryRequest& GetCostProviderSummaryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCostProviderSummaryRequest_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void GetCostProviderSummaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCostProviderSummaryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.GetCostProviderSummaryRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.cost.v202308.GetCostProviderSummaryRequest.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCostProviderSummaryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.GetCostProviderSummaryRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string date = 2[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.cost.v202308.GetCostProviderSummaryRequest.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.GetCostProviderSummaryRequest)
  return target;
}

size_t GetCostProviderSummaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string date = 2[json_name = "date", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCostProviderSummaryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCostProviderSummaryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCostProviderSummaryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.GetCostProviderSummaryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.GetCostProviderSummaryRequest)
    MergeFrom(*source);
  }
}

void GetCostProviderSummaryRequest::MergeFrom(const GetCostProviderSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
}

void GetCostProviderSummaryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCostProviderSummaryRequest::CopyFrom(const GetCostProviderSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.GetCostProviderSummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCostProviderSummaryRequest::IsInitialized() const {
  return true;
}

void GetCostProviderSummaryRequest::InternalSwap(GetCostProviderSummaryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCostProviderSummaryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCostProviderSummaryResponse::InitAsDefaultInstance() {
}
class GetCostProviderSummaryResponse::_Internal {
 public:
};

GetCostProviderSummaryResponse::GetCostProviderSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  providers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.cost.v202308.GetCostProviderSummaryResponse)
}
GetCostProviderSummaryResponse::GetCostProviderSummaryResponse(const GetCostProviderSummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.cost.v202308.GetCostProviderSummaryResponse)
}

void GetCostProviderSummaryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCostProviderSummaryResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  invalid_count_ = 0u;
}

GetCostProviderSummaryResponse::~GetCostProviderSummaryResponse() {
  // @@protoc_insertion_point(destructor:kentik.cost.v202308.GetCostProviderSummaryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCostProviderSummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCostProviderSummaryResponse::ArenaDtor(void* object) {
  GetCostProviderSummaryResponse* _this = reinterpret_cast< GetCostProviderSummaryResponse* >(object);
  (void)_this;
}
void GetCostProviderSummaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCostProviderSummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCostProviderSummaryResponse& GetCostProviderSummaryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCostProviderSummaryResponse_kentik_2fcost_2fv202308_2fcost_2eproto.base);
  return *internal_default_instance();
}


void GetCostProviderSummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providers_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCostProviderSummaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.cost.v202308.CostProviderSummary providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCostProviderSummaryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.cost.v202308.CostProviderSummary providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_providers(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.cost.v202308.GetCostProviderSummaryResponse)
  return target;
}

size_t GetCostProviderSummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.cost.v202308.CostProviderSummary providers = 1[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCostProviderSummaryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCostProviderSummaryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCostProviderSummaryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.cost.v202308.GetCostProviderSummaryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.cost.v202308.GetCostProviderSummaryResponse)
    MergeFrom(*source);
  }
}

void GetCostProviderSummaryResponse::MergeFrom(const GetCostProviderSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void GetCostProviderSummaryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCostProviderSummaryResponse::CopyFrom(const GetCostProviderSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.cost.v202308.GetCostProviderSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCostProviderSummaryResponse::IsInitialized() const {
  return true;
}

void GetCostProviderSummaryResponse::InternalSwap(GetCostProviderSummaryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  providers_.InternalSwap(&other->providers_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCostProviderSummaryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202308
}  // namespace cost
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::CostProviderSummary* Arena::CreateMaybeMessage< ::kentik::cost::v202308::CostProviderSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::CostProviderSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::CostProviderConcise* Arena::CreateMaybeMessage< ::kentik::cost::v202308::CostProviderConcise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::CostProviderConcise >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::ListCostProvidersRequest* Arena::CreateMaybeMessage< ::kentik::cost::v202308::ListCostProvidersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::ListCostProvidersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::ListCostProvidersResponse* Arena::CreateMaybeMessage< ::kentik::cost::v202308::ListCostProvidersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::ListCostProvidersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::ListCostProviderSummariesRequest* Arena::CreateMaybeMessage< ::kentik::cost::v202308::ListCostProviderSummariesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::ListCostProviderSummariesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::ListCostProviderSummariesResponse* Arena::CreateMaybeMessage< ::kentik::cost::v202308::ListCostProviderSummariesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::ListCostProviderSummariesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::GetCostProviderSummaryRequest* Arena::CreateMaybeMessage< ::kentik::cost::v202308::GetCostProviderSummaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::GetCostProviderSummaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::cost::v202308::GetCostProviderSummaryResponse* Arena::CreateMaybeMessage< ::kentik::cost::v202308::GetCostProviderSummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::cost::v202308::GetCostProviderSummaryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
