// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/diagnostic/v202501/diagnostic.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_2epb_2eh
#define kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/client.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
namespace kentik {
namespace diagnostic {
namespace v202501 {
class ChatRequest;
struct ChatRequestDefaultTypeInternal;
extern ChatRequestDefaultTypeInternal _ChatRequest_default_instance_;
class ChatResponse;
struct ChatResponseDefaultTypeInternal;
extern ChatResponseDefaultTypeInternal _ChatResponse_default_instance_;
class EchoRequest;
struct EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
struct EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace diagnostic {
namespace v202501 {

// ===================================================================


// -------------------------------------------------------------------

class EchoResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {}
  ~EchoResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EchoResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EchoResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EchoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline EchoResponse(const EchoResponse& from) : EchoResponse(nullptr, from) {}
  inline EchoResponse(EchoResponse&& from) noexcept
      : EchoResponse(nullptr, std::move(from)) {}
  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
        &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EchoResponse& a, EchoResponse& b) { a.Swap(&b); }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EchoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EchoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EchoResponse& from) { EchoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EchoResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.diagnostic.v202501.EchoResponse"; }

 protected:
  explicit EchoResponse(::google::protobuf::Arena* arena);
  EchoResponse(::google::protobuf::Arena* arena, const EchoResponse& from);
  EchoResponse(::google::protobuf::Arena* arena, EchoResponse&& from) noexcept
      : EchoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.EchoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EchoResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class EchoRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  ~EchoRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EchoRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EchoRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EchoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EchoRequest(const EchoRequest& from) : EchoRequest(nullptr, from) {}
  inline EchoRequest(EchoRequest&& from) noexcept
      : EchoRequest(nullptr, std::move(from)) {}
  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
        &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EchoRequest& a, EchoRequest& b) { a.Swap(&b); }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EchoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EchoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EchoRequest& from) { EchoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EchoRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.diagnostic.v202501.EchoRequest"; }

 protected:
  explicit EchoRequest(::google::protobuf::Arena* arena);
  EchoRequest(::google::protobuf::Arena* arena, const EchoRequest& from);
  EchoRequest(::google::protobuf::Arena* arena, EchoRequest&& from) noexcept
      : EchoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.EchoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EchoRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ChatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.ChatResponse) */ {
 public:
  inline ChatResponse() : ChatResponse(nullptr) {}
  ~ChatResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatResponse(const ChatResponse& from) : ChatResponse(nullptr, from) {}
  inline ChatResponse(ChatResponse&& from) noexcept
      : ChatResponse(nullptr, std::move(from)) {}
  inline ChatResponse& operator=(const ChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatResponse& operator=(ChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatResponse& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kEchoRequest = 2,
    kEchoResponse = 3,
    MSG_NOT_SET = 0,
  };
  static inline const ChatResponse* internal_default_instance() {
    return reinterpret_cast<const ChatResponse*>(
        &_ChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ChatResponse& a, ChatResponse& b) { a.Swap(&b); }
  inline void Swap(ChatResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatResponse& from) { ChatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.diagnostic.v202501.ChatResponse"; }

 protected:
  explicit ChatResponse(::google::protobuf::Arena* arena);
  ChatResponse(::google::protobuf::Arena* arena, const ChatResponse& from);
  ChatResponse(::google::protobuf::Arena* arena, ChatResponse&& from) noexcept
      : ChatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kEchoRequestFieldNumber = 2,
    kEchoResponseFieldNumber = 3,
  };
  // string message_id = 1 [json_name = "messageId"];
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
  bool has_echo_request() const;
  private:
  bool _internal_has_echo_request() const;

  public:
  void clear_echo_request() ;
  const ::kentik::diagnostic::v202501::EchoRequest& echo_request() const;
  PROTOBUF_NODISCARD ::kentik::diagnostic::v202501::EchoRequest* release_echo_request();
  ::kentik::diagnostic::v202501::EchoRequest* mutable_echo_request();
  void set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* value);
  void unsafe_arena_set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* value);
  ::kentik::diagnostic::v202501::EchoRequest* unsafe_arena_release_echo_request();

  private:
  const ::kentik::diagnostic::v202501::EchoRequest& _internal_echo_request() const;
  ::kentik::diagnostic::v202501::EchoRequest* _internal_mutable_echo_request();

  public:
  // .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
  bool has_echo_response() const;
  private:
  bool _internal_has_echo_response() const;

  public:
  void clear_echo_response() ;
  const ::kentik::diagnostic::v202501::EchoResponse& echo_response() const;
  PROTOBUF_NODISCARD ::kentik::diagnostic::v202501::EchoResponse* release_echo_response();
  ::kentik::diagnostic::v202501::EchoResponse* mutable_echo_response();
  void set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* value);
  void unsafe_arena_set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* value);
  ::kentik::diagnostic::v202501::EchoResponse* unsafe_arena_release_echo_response();

  private:
  const ::kentik::diagnostic::v202501::EchoResponse& _internal_echo_response() const;
  ::kentik::diagnostic::v202501::EchoResponse* _internal_mutable_echo_response();

  public:
  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.ChatResponse)
 private:
  class _Internal;
  void set_has_echo_request();
  void set_has_echo_response();
  inline bool has_msg() const;
  inline void clear_has_msg();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::kentik::diagnostic::v202501::EchoRequest* echo_request_;
      ::kentik::diagnostic::v202501::EchoResponse* echo_response_;
    } msg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ChatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.ChatRequest) */ {
 public:
  inline ChatRequest() : ChatRequest(nullptr) {}
  ~ChatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatRequest(const ChatRequest& from) : ChatRequest(nullptr, from) {}
  inline ChatRequest(ChatRequest&& from) noexcept
      : ChatRequest(nullptr, std::move(from)) {}
  inline ChatRequest& operator=(const ChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRequest& operator=(ChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRequest& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kEchoRequest = 2,
    kEchoResponse = 3,
    MSG_NOT_SET = 0,
  };
  static inline const ChatRequest* internal_default_instance() {
    return reinterpret_cast<const ChatRequest*>(
        &_ChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ChatRequest& a, ChatRequest& b) { a.Swap(&b); }
  inline void Swap(ChatRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatRequest& from) { ChatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.diagnostic.v202501.ChatRequest"; }

 protected:
  explicit ChatRequest(::google::protobuf::Arena* arena);
  ChatRequest(::google::protobuf::Arena* arena, const ChatRequest& from);
  ChatRequest(::google::protobuf::Arena* arena, ChatRequest&& from) noexcept
      : ChatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kEchoRequestFieldNumber = 2,
    kEchoResponseFieldNumber = 3,
  };
  // string message_id = 1 [json_name = "messageId"];
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
  bool has_echo_request() const;
  private:
  bool _internal_has_echo_request() const;

  public:
  void clear_echo_request() ;
  const ::kentik::diagnostic::v202501::EchoRequest& echo_request() const;
  PROTOBUF_NODISCARD ::kentik::diagnostic::v202501::EchoRequest* release_echo_request();
  ::kentik::diagnostic::v202501::EchoRequest* mutable_echo_request();
  void set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* value);
  void unsafe_arena_set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* value);
  ::kentik::diagnostic::v202501::EchoRequest* unsafe_arena_release_echo_request();

  private:
  const ::kentik::diagnostic::v202501::EchoRequest& _internal_echo_request() const;
  ::kentik::diagnostic::v202501::EchoRequest* _internal_mutable_echo_request();

  public:
  // .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
  bool has_echo_response() const;
  private:
  bool _internal_has_echo_response() const;

  public:
  void clear_echo_response() ;
  const ::kentik::diagnostic::v202501::EchoResponse& echo_response() const;
  PROTOBUF_NODISCARD ::kentik::diagnostic::v202501::EchoResponse* release_echo_response();
  ::kentik::diagnostic::v202501::EchoResponse* mutable_echo_response();
  void set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* value);
  void unsafe_arena_set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* value);
  ::kentik::diagnostic::v202501::EchoResponse* unsafe_arena_release_echo_response();

  private:
  const ::kentik::diagnostic::v202501::EchoResponse& _internal_echo_response() const;
  ::kentik::diagnostic::v202501::EchoResponse* _internal_mutable_echo_response();

  public:
  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.ChatRequest)
 private:
  class _Internal;
  void set_has_echo_request();
  void set_has_echo_response();
  inline bool has_msg() const;
  inline void clear_has_msg();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::kentik::diagnostic::v202501::EchoRequest* echo_request_;
      ::kentik::diagnostic::v202501::EchoResponse* echo_response_;
    } msg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EchoRequest

// string message = 1 [json_name = "message"];
inline void EchoRequest::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& EchoRequest::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.EchoRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EchoRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.EchoRequest.message)
}
inline std::string* EchoRequest::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.EchoRequest.message)
  return _s;
}
inline const std::string& EchoRequest::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void EchoRequest::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* EchoRequest::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* EchoRequest::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.EchoRequest.message)
  return _impl_.message_.Release();
}
inline void EchoRequest::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.EchoRequest.message)
}

// -------------------------------------------------------------------

// EchoResponse

// string message = 1 [json_name = "message"];
inline void EchoResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& EchoResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.EchoResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EchoResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.EchoResponse.message)
}
inline std::string* EchoResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.EchoResponse.message)
  return _s;
}
inline const std::string& EchoResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void EchoResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* EchoResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* EchoResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.EchoResponse.message)
  return _impl_.message_.Release();
}
inline void EchoResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.EchoResponse.message)
}

// -------------------------------------------------------------------

// ChatRequest

// string message_id = 1 [json_name = "messageId"];
inline void ChatRequest::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ChatRequest::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatRequest.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatRequest::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.ChatRequest.message_id)
}
inline std::string* ChatRequest::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatRequest.message_id)
  return _s;
}
inline const std::string& ChatRequest::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ChatRequest::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ChatRequest::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ChatRequest::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatRequest.message_id)
  return _impl_.message_id_.Release();
}
inline void ChatRequest::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatRequest.message_id)
}

// .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
inline bool ChatRequest::has_echo_request() const {
  return msg_case() == kEchoRequest;
}
inline bool ChatRequest::_internal_has_echo_request() const {
  return msg_case() == kEchoRequest;
}
inline void ChatRequest::set_has_echo_request() {
  _impl_._oneof_case_[0] = kEchoRequest;
}
inline void ChatRequest::clear_echo_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (msg_case() == kEchoRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.echo_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_request_);
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::release_echo_request() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatRequest.echo_request)
  if (msg_case() == kEchoRequest) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatRequest::_internal_echo_request() const {
  return msg_case() == kEchoRequest ? *_impl_.msg_.echo_request_ : reinterpret_cast<::kentik::diagnostic::v202501::EchoRequest&>(::kentik::diagnostic::v202501::_EchoRequest_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatRequest::echo_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatRequest.echo_request)
  return _internal_echo_request();
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::unsafe_arena_release_echo_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatRequest.echo_request)
  if (msg_case() == kEchoRequest) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_request_;
    _impl_.msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatRequest::unsafe_arena_set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_echo_request();
    _impl_.msg_.echo_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_request)
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::_internal_mutable_echo_request() {
  if (msg_case() != kEchoRequest) {
    clear_msg();
    set_has_echo_request();
    _impl_.msg_.echo_request_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::diagnostic::v202501::EchoRequest>(GetArena());
  }
  return _impl_.msg_.echo_request_;
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::mutable_echo_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::diagnostic::v202501::EchoRequest* _msg = _internal_mutable_echo_request();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatRequest.echo_request)
  return _msg;
}

// .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
inline bool ChatRequest::has_echo_response() const {
  return msg_case() == kEchoResponse;
}
inline bool ChatRequest::_internal_has_echo_response() const {
  return msg_case() == kEchoResponse;
}
inline void ChatRequest::set_has_echo_response() {
  _impl_._oneof_case_[0] = kEchoResponse;
}
inline void ChatRequest::clear_echo_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (msg_case() == kEchoResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.echo_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_response_);
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::release_echo_response() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatRequest.echo_response)
  if (msg_case() == kEchoResponse) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatRequest::_internal_echo_response() const {
  return msg_case() == kEchoResponse ? *_impl_.msg_.echo_response_ : reinterpret_cast<::kentik::diagnostic::v202501::EchoResponse&>(::kentik::diagnostic::v202501::_EchoResponse_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatRequest::echo_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatRequest.echo_response)
  return _internal_echo_response();
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::unsafe_arena_release_echo_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatRequest.echo_response)
  if (msg_case() == kEchoResponse) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_response_;
    _impl_.msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatRequest::unsafe_arena_set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_echo_response();
    _impl_.msg_.echo_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_response)
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::_internal_mutable_echo_response() {
  if (msg_case() != kEchoResponse) {
    clear_msg();
    set_has_echo_response();
    _impl_.msg_.echo_response_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::diagnostic::v202501::EchoResponse>(GetArena());
  }
  return _impl_.msg_.echo_response_;
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::mutable_echo_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::diagnostic::v202501::EchoResponse* _msg = _internal_mutable_echo_response();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatRequest.echo_response)
  return _msg;
}

inline bool ChatRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ChatRequest::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ChatRequest::MsgCase ChatRequest::msg_case() const {
  return ChatRequest::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChatResponse

// string message_id = 1 [json_name = "messageId"];
inline void ChatResponse::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ChatResponse::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatResponse.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatResponse::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.ChatResponse.message_id)
}
inline std::string* ChatResponse::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatResponse.message_id)
  return _s;
}
inline const std::string& ChatResponse::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ChatResponse::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ChatResponse::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ChatResponse::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatResponse.message_id)
  return _impl_.message_id_.Release();
}
inline void ChatResponse::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatResponse.message_id)
}

// .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
inline bool ChatResponse::has_echo_request() const {
  return msg_case() == kEchoRequest;
}
inline bool ChatResponse::_internal_has_echo_request() const {
  return msg_case() == kEchoRequest;
}
inline void ChatResponse::set_has_echo_request() {
  _impl_._oneof_case_[0] = kEchoRequest;
}
inline void ChatResponse::clear_echo_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (msg_case() == kEchoRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.echo_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_request_);
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::release_echo_request() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatResponse.echo_request)
  if (msg_case() == kEchoRequest) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatResponse::_internal_echo_request() const {
  return msg_case() == kEchoRequest ? *_impl_.msg_.echo_request_ : reinterpret_cast<::kentik::diagnostic::v202501::EchoRequest&>(::kentik::diagnostic::v202501::_EchoRequest_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatResponse::echo_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatResponse.echo_request)
  return _internal_echo_request();
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::unsafe_arena_release_echo_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatResponse.echo_request)
  if (msg_case() == kEchoRequest) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_request_;
    _impl_.msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatResponse::unsafe_arena_set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_echo_request();
    _impl_.msg_.echo_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_request)
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::_internal_mutable_echo_request() {
  if (msg_case() != kEchoRequest) {
    clear_msg();
    set_has_echo_request();
    _impl_.msg_.echo_request_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::diagnostic::v202501::EchoRequest>(GetArena());
  }
  return _impl_.msg_.echo_request_;
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::mutable_echo_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::diagnostic::v202501::EchoRequest* _msg = _internal_mutable_echo_request();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatResponse.echo_request)
  return _msg;
}

// .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
inline bool ChatResponse::has_echo_response() const {
  return msg_case() == kEchoResponse;
}
inline bool ChatResponse::_internal_has_echo_response() const {
  return msg_case() == kEchoResponse;
}
inline void ChatResponse::set_has_echo_response() {
  _impl_._oneof_case_[0] = kEchoResponse;
}
inline void ChatResponse::clear_echo_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (msg_case() == kEchoResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.echo_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_response_);
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::release_echo_response() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatResponse.echo_response)
  if (msg_case() == kEchoResponse) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatResponse::_internal_echo_response() const {
  return msg_case() == kEchoResponse ? *_impl_.msg_.echo_response_ : reinterpret_cast<::kentik::diagnostic::v202501::EchoResponse&>(::kentik::diagnostic::v202501::_EchoResponse_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatResponse::echo_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatResponse.echo_response)
  return _internal_echo_response();
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::unsafe_arena_release_echo_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatResponse.echo_response)
  if (msg_case() == kEchoResponse) {
    clear_has_msg();
    auto* temp = _impl_.msg_.echo_response_;
    _impl_.msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatResponse::unsafe_arena_set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_echo_response();
    _impl_.msg_.echo_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_response)
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::_internal_mutable_echo_response() {
  if (msg_case() != kEchoResponse) {
    clear_msg();
    set_has_echo_response();
    _impl_.msg_.echo_response_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::diagnostic::v202501::EchoResponse>(GetArena());
  }
  return _impl_.msg_.echo_response_;
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::mutable_echo_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::diagnostic::v202501::EchoResponse* _msg = _internal_mutable_echo_response();
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatResponse.echo_response)
  return _msg;
}

inline bool ChatResponse::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ChatResponse::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ChatResponse::MsgCase ChatResponse::msg_case() const {
  return ChatResponse::MsgCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_2epb_2eh
