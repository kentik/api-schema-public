// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/diagnostic/v202501/diagnostic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
namespace kentik {
namespace diagnostic {
namespace v202501 {
class ChatRequest;
class ChatRequestDefaultTypeInternal;
extern ChatRequestDefaultTypeInternal _ChatRequest_default_instance_;
class ChatResponse;
class ChatResponseDefaultTypeInternal;
extern ChatResponseDefaultTypeInternal _ChatResponse_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::diagnostic::v202501::ChatRequest* Arena::CreateMaybeMessage<::kentik::diagnostic::v202501::ChatRequest>(Arena*);
template<> ::kentik::diagnostic::v202501::ChatResponse* Arena::CreateMaybeMessage<::kentik::diagnostic::v202501::ChatResponse>(Arena*);
template<> ::kentik::diagnostic::v202501::EchoRequest* Arena::CreateMaybeMessage<::kentik::diagnostic::v202501::EchoRequest>(Arena*);
template<> ::kentik::diagnostic::v202501::EchoResponse* Arena::CreateMaybeMessage<::kentik::diagnostic::v202501::EchoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace diagnostic {
namespace v202501 {

// ===================================================================

class EchoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {};
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.diagnostic.v202501.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto);
    return ::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1[json_name = "message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {};
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.diagnostic.v202501.EchoResponse";
  }
  protected:
  explicit EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto);
    return ::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1[json_name = "message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.EchoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ChatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.ChatRequest) */ {
 public:
  inline ChatRequest() : ChatRequest(nullptr) {};
  virtual ~ChatRequest();

  ChatRequest(const ChatRequest& from);
  ChatRequest(ChatRequest&& from) noexcept
    : ChatRequest() {
    *this = ::std::move(from);
  }

  inline ChatRequest& operator=(const ChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRequest& operator=(ChatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatRequest& default_instance();

  enum MsgCase {
    kEchoRequest = 2,
    kEchoResponse = 3,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRequest* internal_default_instance() {
    return reinterpret_cast<const ChatRequest*>(
               &_ChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatRequest& a, ChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRequest* New() const final {
    return CreateMaybeMessage<ChatRequest>(nullptr);
  }

  ChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRequest& from);
  void MergeFrom(const ChatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.diagnostic.v202501.ChatRequest";
  }
  protected:
  explicit ChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto);
    return ::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kEchoRequestFieldNumber = 2,
    kEchoResponseFieldNumber = 3,
  };
  // string message_id = 1[json_name = "messageId"];
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
  bool has_echo_request() const;
  private:
  bool _internal_has_echo_request() const;
  public:
  void clear_echo_request();
  const ::kentik::diagnostic::v202501::EchoRequest& echo_request() const;
  ::kentik::diagnostic::v202501::EchoRequest* release_echo_request();
  ::kentik::diagnostic::v202501::EchoRequest* mutable_echo_request();
  void set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request);
  private:
  const ::kentik::diagnostic::v202501::EchoRequest& _internal_echo_request() const;
  ::kentik::diagnostic::v202501::EchoRequest* _internal_mutable_echo_request();
  public:
  void unsafe_arena_set_allocated_echo_request(
      ::kentik::diagnostic::v202501::EchoRequest* echo_request);
  ::kentik::diagnostic::v202501::EchoRequest* unsafe_arena_release_echo_request();

  // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
  bool has_echo_response() const;
  private:
  bool _internal_has_echo_response() const;
  public:
  void clear_echo_response();
  const ::kentik::diagnostic::v202501::EchoResponse& echo_response() const;
  ::kentik::diagnostic::v202501::EchoResponse* release_echo_response();
  ::kentik::diagnostic::v202501::EchoResponse* mutable_echo_response();
  void set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response);
  private:
  const ::kentik::diagnostic::v202501::EchoResponse& _internal_echo_response() const;
  ::kentik::diagnostic::v202501::EchoResponse* _internal_mutable_echo_response();
  public:
  void unsafe_arena_set_allocated_echo_response(
      ::kentik::diagnostic::v202501::EchoResponse* echo_response);
  ::kentik::diagnostic::v202501::EchoResponse* unsafe_arena_release_echo_response();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.ChatRequest)
 private:
  class _Internal;
  void set_has_echo_request();
  void set_has_echo_response();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  union MsgUnion {
    MsgUnion() {}
    ::kentik::diagnostic::v202501::EchoRequest* echo_request_;
    ::kentik::diagnostic::v202501::EchoResponse* echo_response_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// -------------------------------------------------------------------

class ChatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.diagnostic.v202501.ChatResponse) */ {
 public:
  inline ChatResponse() : ChatResponse(nullptr) {};
  virtual ~ChatResponse();

  ChatResponse(const ChatResponse& from);
  ChatResponse(ChatResponse&& from) noexcept
    : ChatResponse() {
    *this = ::std::move(from);
  }

  inline ChatResponse& operator=(const ChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatResponse& operator=(ChatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatResponse& default_instance();

  enum MsgCase {
    kEchoRequest = 2,
    kEchoResponse = 3,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatResponse* internal_default_instance() {
    return reinterpret_cast<const ChatResponse*>(
               &_ChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatResponse& a, ChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatResponse* New() const final {
    return CreateMaybeMessage<ChatResponse>(nullptr);
  }

  ChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatResponse& from);
  void MergeFrom(const ChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.diagnostic.v202501.ChatResponse";
  }
  protected:
  explicit ChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto);
    return ::descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kEchoRequestFieldNumber = 2,
    kEchoResponseFieldNumber = 3,
  };
  // string message_id = 1[json_name = "messageId"];
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
  bool has_echo_request() const;
  private:
  bool _internal_has_echo_request() const;
  public:
  void clear_echo_request();
  const ::kentik::diagnostic::v202501::EchoRequest& echo_request() const;
  ::kentik::diagnostic::v202501::EchoRequest* release_echo_request();
  ::kentik::diagnostic::v202501::EchoRequest* mutable_echo_request();
  void set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request);
  private:
  const ::kentik::diagnostic::v202501::EchoRequest& _internal_echo_request() const;
  ::kentik::diagnostic::v202501::EchoRequest* _internal_mutable_echo_request();
  public:
  void unsafe_arena_set_allocated_echo_request(
      ::kentik::diagnostic::v202501::EchoRequest* echo_request);
  ::kentik::diagnostic::v202501::EchoRequest* unsafe_arena_release_echo_request();

  // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
  bool has_echo_response() const;
  private:
  bool _internal_has_echo_response() const;
  public:
  void clear_echo_response();
  const ::kentik::diagnostic::v202501::EchoResponse& echo_response() const;
  ::kentik::diagnostic::v202501::EchoResponse* release_echo_response();
  ::kentik::diagnostic::v202501::EchoResponse* mutable_echo_response();
  void set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response);
  private:
  const ::kentik::diagnostic::v202501::EchoResponse& _internal_echo_response() const;
  ::kentik::diagnostic::v202501::EchoResponse* _internal_mutable_echo_response();
  public:
  void unsafe_arena_set_allocated_echo_response(
      ::kentik::diagnostic::v202501::EchoResponse* echo_response);
  ::kentik::diagnostic::v202501::EchoResponse* unsafe_arena_release_echo_response();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:kentik.diagnostic.v202501.ChatResponse)
 private:
  class _Internal;
  void set_has_echo_request();
  void set_has_echo_response();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  union MsgUnion {
    MsgUnion() {}
    ::kentik::diagnostic::v202501::EchoRequest* echo_request_;
    ::kentik::diagnostic::v202501::EchoResponse* echo_response_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// string message = 1[json_name = "message"];
inline void EchoRequest::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.EchoRequest.message)
  return _internal_message();
}
inline void EchoRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.EchoRequest.message)
}
inline std::string* EchoRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.EchoRequest.message)
  return _internal_mutable_message();
}
inline const std::string& EchoRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoRequest::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.diagnostic.v202501.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.diagnostic.v202501.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.diagnostic.v202501.EchoRequest.message)
}
inline std::string* EchoRequest::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.EchoRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.EchoRequest.message)
}
inline std::string* EchoRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.EchoRequest.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoRequest::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.EchoRequest.message)
}

// -------------------------------------------------------------------

// EchoResponse

// string message = 1[json_name = "message"];
inline void EchoResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoResponse::message() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.EchoResponse.message)
  return _internal_message();
}
inline void EchoResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.EchoResponse.message)
}
inline std::string* EchoResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.EchoResponse.message)
  return _internal_mutable_message();
}
inline const std::string& EchoResponse::_internal_message() const {
  return message_.Get();
}
inline void EchoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.diagnostic.v202501.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.diagnostic.v202501.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.diagnostic.v202501.EchoResponse.message)
}
inline std::string* EchoResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoResponse::release_message() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.EchoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.EchoResponse.message)
}
inline std::string* EchoResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.EchoResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.EchoResponse.message)
}

// -------------------------------------------------------------------

// ChatRequest

// string message_id = 1[json_name = "messageId"];
inline void ChatRequest::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatRequest::message_id() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatRequest.message_id)
  return _internal_message_id();
}
inline void ChatRequest::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.ChatRequest.message_id)
}
inline std::string* ChatRequest::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatRequest.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& ChatRequest::_internal_message_id() const {
  return message_id_.Get();
}
inline void ChatRequest::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatRequest::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.diagnostic.v202501.ChatRequest.message_id)
}
inline void ChatRequest::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.diagnostic.v202501.ChatRequest.message_id)
}
inline void ChatRequest::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.diagnostic.v202501.ChatRequest.message_id)
}
inline std::string* ChatRequest::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatRequest.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatRequest::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatRequest.message_id)
}
inline std::string* ChatRequest::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatRequest.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatRequest::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatRequest.message_id)
}

// .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
inline bool ChatRequest::_internal_has_echo_request() const {
  return msg_case() == kEchoRequest;
}
inline bool ChatRequest::has_echo_request() const {
  return _internal_has_echo_request();
}
inline void ChatRequest::set_has_echo_request() {
  _oneof_case_[0] = kEchoRequest;
}
inline void ChatRequest::clear_echo_request() {
  if (_internal_has_echo_request()) {
    if (GetArena() == nullptr) {
      delete msg_.echo_request_;
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::release_echo_request() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatRequest.echo_request)
  if (_internal_has_echo_request()) {
    clear_has_msg();
      ::kentik::diagnostic::v202501::EchoRequest* temp = msg_.echo_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatRequest::_internal_echo_request() const {
  return _internal_has_echo_request()
      ? *msg_.echo_request_
      : *reinterpret_cast< ::kentik::diagnostic::v202501::EchoRequest*>(&::kentik::diagnostic::v202501::_EchoRequest_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatRequest::echo_request() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatRequest.echo_request)
  return _internal_echo_request();
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::unsafe_arena_release_echo_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatRequest.echo_request)
  if (_internal_has_echo_request()) {
    clear_has_msg();
    ::kentik::diagnostic::v202501::EchoRequest* temp = msg_.echo_request_;
    msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatRequest::unsafe_arena_set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request) {
  clear_msg();
  if (echo_request) {
    set_has_echo_request();
    msg_.echo_request_ = echo_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_request)
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::_internal_mutable_echo_request() {
  if (!_internal_has_echo_request()) {
    clear_msg();
    set_has_echo_request();
    msg_.echo_request_ = CreateMaybeMessage< ::kentik::diagnostic::v202501::EchoRequest >(GetArena());
  }
  return msg_.echo_request_;
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatRequest::mutable_echo_request() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatRequest.echo_request)
  return _internal_mutable_echo_request();
}

// .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
inline bool ChatRequest::_internal_has_echo_response() const {
  return msg_case() == kEchoResponse;
}
inline bool ChatRequest::has_echo_response() const {
  return _internal_has_echo_response();
}
inline void ChatRequest::set_has_echo_response() {
  _oneof_case_[0] = kEchoResponse;
}
inline void ChatRequest::clear_echo_response() {
  if (_internal_has_echo_response()) {
    if (GetArena() == nullptr) {
      delete msg_.echo_response_;
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::release_echo_response() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatRequest.echo_response)
  if (_internal_has_echo_response()) {
    clear_has_msg();
      ::kentik::diagnostic::v202501::EchoResponse* temp = msg_.echo_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatRequest::_internal_echo_response() const {
  return _internal_has_echo_response()
      ? *msg_.echo_response_
      : *reinterpret_cast< ::kentik::diagnostic::v202501::EchoResponse*>(&::kentik::diagnostic::v202501::_EchoResponse_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatRequest::echo_response() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatRequest.echo_response)
  return _internal_echo_response();
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::unsafe_arena_release_echo_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatRequest.echo_response)
  if (_internal_has_echo_response()) {
    clear_has_msg();
    ::kentik::diagnostic::v202501::EchoResponse* temp = msg_.echo_response_;
    msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatRequest::unsafe_arena_set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response) {
  clear_msg();
  if (echo_response) {
    set_has_echo_response();
    msg_.echo_response_ = echo_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_response)
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::_internal_mutable_echo_response() {
  if (!_internal_has_echo_response()) {
    clear_msg();
    set_has_echo_response();
    msg_.echo_response_ = CreateMaybeMessage< ::kentik::diagnostic::v202501::EchoResponse >(GetArena());
  }
  return msg_.echo_response_;
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatRequest::mutable_echo_response() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatRequest.echo_response)
  return _internal_mutable_echo_response();
}

inline bool ChatRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ChatRequest::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ChatRequest::MsgCase ChatRequest::msg_case() const {
  return ChatRequest::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChatResponse

// string message_id = 1[json_name = "messageId"];
inline void ChatResponse::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatResponse::message_id() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatResponse.message_id)
  return _internal_message_id();
}
inline void ChatResponse::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:kentik.diagnostic.v202501.ChatResponse.message_id)
}
inline std::string* ChatResponse::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatResponse.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& ChatResponse::_internal_message_id() const {
  return message_id_.Get();
}
inline void ChatResponse::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatResponse::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.diagnostic.v202501.ChatResponse.message_id)
}
inline void ChatResponse::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.diagnostic.v202501.ChatResponse.message_id)
}
inline void ChatResponse::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.diagnostic.v202501.ChatResponse.message_id)
}
inline std::string* ChatResponse::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatResponse::release_message_id() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatResponse.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatResponse::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatResponse.message_id)
}
inline std::string* ChatResponse::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatResponse.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatResponse::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatResponse.message_id)
}

// .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
inline bool ChatResponse::_internal_has_echo_request() const {
  return msg_case() == kEchoRequest;
}
inline bool ChatResponse::has_echo_request() const {
  return _internal_has_echo_request();
}
inline void ChatResponse::set_has_echo_request() {
  _oneof_case_[0] = kEchoRequest;
}
inline void ChatResponse::clear_echo_request() {
  if (_internal_has_echo_request()) {
    if (GetArena() == nullptr) {
      delete msg_.echo_request_;
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::release_echo_request() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatResponse.echo_request)
  if (_internal_has_echo_request()) {
    clear_has_msg();
      ::kentik::diagnostic::v202501::EchoRequest* temp = msg_.echo_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatResponse::_internal_echo_request() const {
  return _internal_has_echo_request()
      ? *msg_.echo_request_
      : *reinterpret_cast< ::kentik::diagnostic::v202501::EchoRequest*>(&::kentik::diagnostic::v202501::_EchoRequest_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoRequest& ChatResponse::echo_request() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatResponse.echo_request)
  return _internal_echo_request();
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::unsafe_arena_release_echo_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatResponse.echo_request)
  if (_internal_has_echo_request()) {
    clear_has_msg();
    ::kentik::diagnostic::v202501::EchoRequest* temp = msg_.echo_request_;
    msg_.echo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatResponse::unsafe_arena_set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request) {
  clear_msg();
  if (echo_request) {
    set_has_echo_request();
    msg_.echo_request_ = echo_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_request)
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::_internal_mutable_echo_request() {
  if (!_internal_has_echo_request()) {
    clear_msg();
    set_has_echo_request();
    msg_.echo_request_ = CreateMaybeMessage< ::kentik::diagnostic::v202501::EchoRequest >(GetArena());
  }
  return msg_.echo_request_;
}
inline ::kentik::diagnostic::v202501::EchoRequest* ChatResponse::mutable_echo_request() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatResponse.echo_request)
  return _internal_mutable_echo_request();
}

// .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
inline bool ChatResponse::_internal_has_echo_response() const {
  return msg_case() == kEchoResponse;
}
inline bool ChatResponse::has_echo_response() const {
  return _internal_has_echo_response();
}
inline void ChatResponse::set_has_echo_response() {
  _oneof_case_[0] = kEchoResponse;
}
inline void ChatResponse::clear_echo_response() {
  if (_internal_has_echo_response()) {
    if (GetArena() == nullptr) {
      delete msg_.echo_response_;
    }
    clear_has_msg();
  }
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::release_echo_response() {
  // @@protoc_insertion_point(field_release:kentik.diagnostic.v202501.ChatResponse.echo_response)
  if (_internal_has_echo_response()) {
    clear_has_msg();
      ::kentik::diagnostic::v202501::EchoResponse* temp = msg_.echo_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatResponse::_internal_echo_response() const {
  return _internal_has_echo_response()
      ? *msg_.echo_response_
      : *reinterpret_cast< ::kentik::diagnostic::v202501::EchoResponse*>(&::kentik::diagnostic::v202501::_EchoResponse_default_instance_);
}
inline const ::kentik::diagnostic::v202501::EchoResponse& ChatResponse::echo_response() const {
  // @@protoc_insertion_point(field_get:kentik.diagnostic.v202501.ChatResponse.echo_response)
  return _internal_echo_response();
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::unsafe_arena_release_echo_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.diagnostic.v202501.ChatResponse.echo_response)
  if (_internal_has_echo_response()) {
    clear_has_msg();
    ::kentik::diagnostic::v202501::EchoResponse* temp = msg_.echo_response_;
    msg_.echo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatResponse::unsafe_arena_set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response) {
  clear_msg();
  if (echo_response) {
    set_has_echo_response();
    msg_.echo_response_ = echo_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_response)
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::_internal_mutable_echo_response() {
  if (!_internal_has_echo_response()) {
    clear_msg();
    set_has_echo_response();
    msg_.echo_response_ = CreateMaybeMessage< ::kentik::diagnostic::v202501::EchoResponse >(GetArena());
  }
  return msg_.echo_response_;
}
inline ::kentik::diagnostic::v202501::EchoResponse* ChatResponse::mutable_echo_response() {
  // @@protoc_insertion_point(field_mutable:kentik.diagnostic.v202501.ChatResponse.echo_response)
  return _internal_mutable_echo_response();
}

inline bool ChatResponse::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ChatResponse::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ChatResponse::MsgCase ChatResponse::msg_case() const {
  return ChatResponse::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto
