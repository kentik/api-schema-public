// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/diagnostic/v202501/diagnostic.proto
// Protobuf C++ Version: 5.29.3

#include "kentik/diagnostic/v202501/diagnostic.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kentik {
namespace diagnostic {
namespace v202501 {

inline constexpr EchoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EchoResponse::EchoResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EchoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoResponseDefaultTypeInternal() {}
  union {
    EchoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;

inline constexpr EchoRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EchoRequest::EchoRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EchoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoRequestDefaultTypeInternal() {}
  union {
    EchoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;

inline constexpr ChatResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ChatResponse::ChatResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatResponseDefaultTypeInternal() {}
  union {
    ChatResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatResponseDefaultTypeInternal _ChatResponse_default_instance_;

inline constexpr ChatRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ChatRequest::ChatRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRequestDefaultTypeInternal() {}
  union {
    ChatRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRequestDefaultTypeInternal _ChatRequest_default_instance_;
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = nullptr;
const ::uint32_t
    TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoRequest, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoResponse, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _impl_.message_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _impl_.msg_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _impl_.message_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _impl_.msg_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kentik::diagnostic::v202501::EchoRequest)},
        {9, -1, -1, sizeof(::kentik::diagnostic::v202501::EchoResponse)},
        {18, -1, -1, sizeof(::kentik::diagnostic::v202501::ChatRequest)},
        {30, -1, -1, sizeof(::kentik::diagnostic::v202501::ChatResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kentik::diagnostic::v202501::_EchoRequest_default_instance_._instance,
    &::kentik::diagnostic::v202501::_EchoResponse_default_instance_._instance,
    &::kentik::diagnostic::v202501::_ChatRequest_default_instance_._instance,
    &::kentik::diagnostic::v202501::_ChatResponse_default_instance_._instance,
};
const char descriptor_table_protodef_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*kentik/diagnostic/v202501/diagnostic.p"
    "roto\022\031kentik.diagnostic.v202501\032\027google/"
    "api/client.proto\032%kentik/core/v202303/an"
    "notations.proto\"\'\n\013EchoRequest\022\030\n\007messag"
    "e\030\001 \001(\tR\007message\"(\n\014EchoResponse\022\030\n\007mess"
    "age\030\001 \001(\tR\007message\"\320\001\n\013ChatRequest\022\035\n\nme"
    "ssage_id\030\001 \001(\tR\tmessageId\022K\n\014echo_reques"
    "t\030\002 \001(\0132&.kentik.diagnostic.v202501.Echo"
    "RequestH\000R\013echoRequest\022N\n\recho_response\030"
    "\003 \001(\0132\'.kentik.diagnostic.v202501.EchoRe"
    "sponseH\000R\014echoResponseB\005\n\003msg\"\321\001\n\014ChatRe"
    "sponse\022\035\n\nmessage_id\030\001 \001(\tR\tmessageId\022K\n"
    "\014echo_request\030\002 \001(\0132&.kentik.diagnostic."
    "v202501.EchoRequestH\000R\013echoRequest\022N\n\rec"
    "ho_response\030\003 \001(\0132\'.kentik.diagnostic.v2"
    "02501.EchoResponseH\000R\014echoResponseB\005\n\003ms"
    "g2\375\001\n\021DiagnosticService\022c\n\004Echo\022&.kentik"
    ".diagnostic.v202501.EchoRequest\032\'.kentik"
    ".diagnostic.v202501.EchoResponse\"\n\362\327\002\006PU"
    "BLIC\022g\n\004Chat\022&.kentik.diagnostic.v202501"
    ".ChatRequest\032\'.kentik.diagnostic.v202501"
    ".ChatResponse\"\n\362\327\002\006PUBLIC(\0010\001\032\032\312A\023grpc.a"
    "pi.kentik.com\220\330\002\004BQZOgithub.com/kentik/a"
    "pi-schema-public/gen/go/kentik/diagnosti"
    "c/v202501;diagnosticb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fapi_2fclient_2eproto,
        &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = {
    false,
    false,
    988,
    descriptor_table_protodef_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
    "kentik/diagnostic/v202501/diagnostic.proto",
    &descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_once,
    descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto::offsets,
    file_level_enum_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
    file_level_service_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
};
namespace kentik {
namespace diagnostic {
namespace v202501 {
// ===================================================================

class EchoRequest::_Internal {
 public:
};

EchoRequest::EchoRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.EchoRequest)
}
inline PROTOBUF_NDEBUG_INLINE EchoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::diagnostic::v202501::EchoRequest& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

EchoRequest::EchoRequest(
    ::google::protobuf::Arena* arena,
    const EchoRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EchoRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.EchoRequest)
}
inline PROTOBUF_NDEBUG_INLINE EchoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void EchoRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.EchoRequest)
  SharedDtor(*this);
}
inline void EchoRequest::SharedDtor(MessageLite& self) {
  EchoRequest& this_ = static_cast<EchoRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EchoRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EchoRequest(arena);
}
constexpr auto EchoRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EchoRequest),
                                            alignof(EchoRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EchoRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EchoRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EchoRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EchoRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EchoRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EchoRequest>(), &EchoRequest::ByteSizeLong,
            &EchoRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EchoRequest, _impl_._cached_size_),
        false,
    },
    &EchoRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EchoRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 53, 2> EchoRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::EchoRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 1 [json_name = "message"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EchoRequest, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1 [json_name = "message"];
    {PROTOBUF_FIELD_OFFSET(EchoRequest, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\7\0\0\0\0\0\0"
    "kentik.diagnostic.v202501.EchoRequest"
    "message"
  }},
};

PROTOBUF_NOINLINE void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.EchoRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EchoRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EchoRequest& this_ = static_cast<const EchoRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EchoRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EchoRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.EchoRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 1 [json_name = "message"];
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.diagnostic.v202501.EchoRequest.message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.EchoRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EchoRequest::ByteSizeLong(const MessageLite& base) {
          const EchoRequest& this_ = static_cast<const EchoRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EchoRequest::ByteSizeLong() const {
          const EchoRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.EchoRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string message = 1 [json_name = "message"];
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EchoRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EchoRequest*>(&to_msg);
  auto& from = static_cast<const EchoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.EchoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EchoRequest::InternalSwap(EchoRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
}

::google::protobuf::Metadata EchoRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EchoResponse::_Internal {
 public:
};

EchoResponse::EchoResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.EchoResponse)
}
inline PROTOBUF_NDEBUG_INLINE EchoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::diagnostic::v202501::EchoResponse& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

EchoResponse::EchoResponse(
    ::google::protobuf::Arena* arena,
    const EchoResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EchoResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.EchoResponse)
}
inline PROTOBUF_NDEBUG_INLINE EchoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void EchoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.EchoResponse)
  SharedDtor(*this);
}
inline void EchoResponse::SharedDtor(MessageLite& self) {
  EchoResponse& this_ = static_cast<EchoResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EchoResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EchoResponse(arena);
}
constexpr auto EchoResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EchoResponse),
                                            alignof(EchoResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EchoResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EchoResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EchoResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EchoResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EchoResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EchoResponse>(), &EchoResponse::ByteSizeLong,
            &EchoResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EchoResponse, _impl_._cached_size_),
        false,
    },
    &EchoResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EchoResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 54, 2> EchoResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::EchoResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 1 [json_name = "message"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EchoResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1 [json_name = "message"];
    {PROTOBUF_FIELD_OFFSET(EchoResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\7\0\0\0\0\0\0"
    "kentik.diagnostic.v202501.EchoResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.EchoResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EchoResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EchoResponse& this_ = static_cast<const EchoResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EchoResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EchoResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.EchoResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 1 [json_name = "message"];
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.diagnostic.v202501.EchoResponse.message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.EchoResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EchoResponse::ByteSizeLong(const MessageLite& base) {
          const EchoResponse& this_ = static_cast<const EchoResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EchoResponse::ByteSizeLong() const {
          const EchoResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.EchoResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string message = 1 [json_name = "message"];
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EchoResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EchoResponse*>(&to_msg);
  auto& from = static_cast<const EchoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.EchoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EchoResponse::InternalSwap(EchoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
}

::google::protobuf::Metadata EchoResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _impl_._oneof_case_);
};

void ChatRequest::set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_request) {
    ::google::protobuf::Arena* submessage_arena = echo_request->GetArena();
    if (message_arena != submessage_arena) {
      echo_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, echo_request, submessage_arena);
    }
    set_has_echo_request();
    _impl_.msg_.echo_request_ = echo_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_request)
}
void ChatRequest::set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_response) {
    ::google::protobuf::Arena* submessage_arena = echo_response->GetArena();
    if (message_arena != submessage_arena) {
      echo_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, echo_response, submessage_arena);
    }
    set_has_echo_response();
    _impl_.msg_.echo_response_ = echo_response;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_response)
}
ChatRequest::ChatRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.ChatRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChatRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::diagnostic::v202501::ChatRequest& from_msg)
      : message_id_(arena, from.message_id_),
        msg_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ChatRequest::ChatRequest(
    ::google::protobuf::Arena* arena,
    const ChatRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (msg_case()) {
    case MSG_NOT_SET:
      break;
      case kEchoRequest:
        _impl_.msg_.echo_request_ = ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoRequest>(arena, *from._impl_.msg_.echo_request_);
        break;
      case kEchoResponse:
        _impl_.msg_.echo_response_ = ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoResponse>(arena, *from._impl_.msg_.echo_response_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.ChatRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChatRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_id_(arena),
        msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ChatRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ChatRequest::~ChatRequest() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.ChatRequest)
  SharedDtor(*this);
}
inline void ChatRequest::SharedDtor(MessageLite& self) {
  ChatRequest& this_ = static_cast<ChatRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  if (this_.has_msg()) {
    this_.clear_msg();
  }
  this_._impl_.~Impl_();
}

void ChatRequest::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:kentik.diagnostic.v202501.ChatRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (msg_case()) {
    case kEchoRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.echo_request_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_request_);
      }
      break;
    }
    case kEchoResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.echo_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_response_);
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


inline void* ChatRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatRequest(arena);
}
constexpr auto ChatRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChatRequest),
                                            alignof(ChatRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatRequest>(), &ChatRequest::ByteSizeLong,
            &ChatRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatRequest, _impl_._cached_size_),
        false,
    },
    &ChatRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 56, 2> ChatRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::ChatRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message_id = 1 [json_name = "messageId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatRequest, _impl_.message_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1 [json_name = "messageId"];
    {PROTOBUF_FIELD_OFFSET(ChatRequest, _impl_.message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
    {PROTOBUF_FIELD_OFFSET(ChatRequest, _impl_.msg_.echo_request_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
    {PROTOBUF_FIELD_OFFSET(ChatRequest, _impl_.msg_.echo_response_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::EchoRequest>()},
    {::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::EchoResponse>()},
  }}, {{
    "\45\12\0\0\0\0\0\0"
    "kentik.diagnostic.v202501.ChatRequest"
    "message_id"
  }},
};

PROTOBUF_NOINLINE void ChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.ChatRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  clear_msg();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatRequest& this_ = static_cast<const ChatRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.ChatRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message_id = 1 [json_name = "messageId"];
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.diagnostic.v202501.ChatRequest.message_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          switch (this_.msg_case()) {
            case kEchoRequest: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.msg_.echo_request_, this_._impl_.msg_.echo_request_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEchoResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.msg_.echo_response_, this_._impl_.msg_.echo_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.ChatRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatRequest::ByteSizeLong(const MessageLite& base) {
          const ChatRequest& this_ = static_cast<const ChatRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatRequest::ByteSizeLong() const {
          const ChatRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.ChatRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string message_id = 1 [json_name = "messageId"];
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
          }
          switch (this_.msg_case()) {
            // .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
            case kEchoRequest: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.msg_.echo_request_);
              break;
            }
            // .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
            case kEchoResponse: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.msg_.echo_response_);
              break;
            }
            case MSG_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatRequest*>(&to_msg);
  auto& from = static_cast<const ChatRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.ChatRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_msg();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kEchoRequest: {
        if (oneof_needs_init) {
          _this->_impl_.msg_.echo_request_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoRequest>(arena, *from._impl_.msg_.echo_request_);
        } else {
          _this->_impl_.msg_.echo_request_->MergeFrom(from._internal_echo_request());
        }
        break;
      }
      case kEchoResponse: {
        if (oneof_needs_init) {
          _this->_impl_.msg_.echo_response_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoResponse>(arena, *from._impl_.msg_.echo_response_);
        } else {
          _this->_impl_.msg_.echo_response_->MergeFrom(from._internal_echo_response());
        }
        break;
      }
      case MSG_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatRequest::CopyFrom(const ChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.ChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatRequest::InternalSwap(ChatRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ChatRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _impl_._oneof_case_);
};

void ChatResponse::set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_request) {
    ::google::protobuf::Arena* submessage_arena = echo_request->GetArena();
    if (message_arena != submessage_arena) {
      echo_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, echo_request, submessage_arena);
    }
    set_has_echo_request();
    _impl_.msg_.echo_request_ = echo_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_request)
}
void ChatResponse::set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_response) {
    ::google::protobuf::Arena* submessage_arena = echo_response->GetArena();
    if (message_arena != submessage_arena) {
      echo_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, echo_response, submessage_arena);
    }
    set_has_echo_response();
    _impl_.msg_.echo_response_ = echo_response;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_response)
}
ChatResponse::ChatResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.ChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::diagnostic::v202501::ChatResponse& from_msg)
      : message_id_(arena, from.message_id_),
        msg_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ChatResponse::ChatResponse(
    ::google::protobuf::Arena* arena,
    const ChatResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (msg_case()) {
    case MSG_NOT_SET:
      break;
      case kEchoRequest:
        _impl_.msg_.echo_request_ = ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoRequest>(arena, *from._impl_.msg_.echo_request_);
        break;
      case kEchoResponse:
        _impl_.msg_.echo_response_ = ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoResponse>(arena, *from._impl_.msg_.echo_response_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.ChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_id_(arena),
        msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ChatResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ChatResponse::~ChatResponse() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.ChatResponse)
  SharedDtor(*this);
}
inline void ChatResponse::SharedDtor(MessageLite& self) {
  ChatResponse& this_ = static_cast<ChatResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  if (this_.has_msg()) {
    this_.clear_msg();
  }
  this_._impl_.~Impl_();
}

void ChatResponse::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:kentik.diagnostic.v202501.ChatResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (msg_case()) {
    case kEchoRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.echo_request_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_request_);
      }
      break;
    }
    case kEchoResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.echo_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.msg_.echo_response_);
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


inline void* ChatResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatResponse(arena);
}
constexpr auto ChatResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChatResponse),
                                            alignof(ChatResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatResponse>(), &ChatResponse::ByteSizeLong,
            &ChatResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatResponse, _impl_._cached_size_),
        false,
    },
    &ChatResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 57, 2> ChatResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::ChatResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message_id = 1 [json_name = "messageId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatResponse, _impl_.message_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1 [json_name = "messageId"];
    {PROTOBUF_FIELD_OFFSET(ChatResponse, _impl_.message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
    {PROTOBUF_FIELD_OFFSET(ChatResponse, _impl_.msg_.echo_request_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
    {PROTOBUF_FIELD_OFFSET(ChatResponse, _impl_.msg_.echo_response_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::EchoRequest>()},
    {::_pbi::TcParser::GetTable<::kentik::diagnostic::v202501::EchoResponse>()},
  }}, {{
    "\46\12\0\0\0\0\0\0"
    "kentik.diagnostic.v202501.ChatResponse"
    "message_id"
  }},
};

PROTOBUF_NOINLINE void ChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.ChatResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  clear_msg();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatResponse& this_ = static_cast<const ChatResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.ChatResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message_id = 1 [json_name = "messageId"];
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.diagnostic.v202501.ChatResponse.message_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          switch (this_.msg_case()) {
            case kEchoRequest: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.msg_.echo_request_, this_._impl_.msg_.echo_request_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEchoResponse: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.msg_.echo_response_, this_._impl_.msg_.echo_response_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.ChatResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatResponse::ByteSizeLong(const MessageLite& base) {
          const ChatResponse& this_ = static_cast<const ChatResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatResponse::ByteSizeLong() const {
          const ChatResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.ChatResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string message_id = 1 [json_name = "messageId"];
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
          }
          switch (this_.msg_case()) {
            // .kentik.diagnostic.v202501.EchoRequest echo_request = 2 [json_name = "echoRequest"];
            case kEchoRequest: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.msg_.echo_request_);
              break;
            }
            // .kentik.diagnostic.v202501.EchoResponse echo_response = 3 [json_name = "echoResponse"];
            case kEchoResponse: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.msg_.echo_response_);
              break;
            }
            case MSG_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatResponse*>(&to_msg);
  auto& from = static_cast<const ChatResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.ChatResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_msg();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kEchoRequest: {
        if (oneof_needs_init) {
          _this->_impl_.msg_.echo_request_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoRequest>(arena, *from._impl_.msg_.echo_request_);
        } else {
          _this->_impl_.msg_.echo_request_->MergeFrom(from._internal_echo_request());
        }
        break;
      }
      case kEchoResponse: {
        if (oneof_needs_init) {
          _this->_impl_.msg_.echo_response_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::diagnostic::v202501::EchoResponse>(arena, *from._impl_.msg_.echo_response_);
        } else {
          _this->_impl_.msg_.echo_response_->MergeFrom(from._internal_echo_response());
        }
        break;
      }
      case MSG_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatResponse::CopyFrom(const ChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.ChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatResponse::InternalSwap(ChatResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ChatResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
