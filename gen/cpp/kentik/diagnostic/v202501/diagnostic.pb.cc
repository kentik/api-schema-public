// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/diagnostic/v202501/diagnostic.proto

#include "kentik/diagnostic/v202501/diagnostic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto;
namespace kentik {
namespace diagnostic {
namespace v202501 {
class EchoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoRequest> _instance;
} _EchoRequest_default_instance_;
class EchoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoResponse> _instance;
} _EchoResponse_default_instance_;
class ChatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRequest> _instance;
  const ::kentik::diagnostic::v202501::EchoRequest* echo_request_;
  const ::kentik::diagnostic::v202501::EchoResponse* echo_response_;
} _ChatRequest_default_instance_;
class ChatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatResponse> _instance;
  const ::kentik::diagnostic::v202501::EchoRequest* echo_request_;
  const ::kentik::diagnostic::v202501::EchoResponse* echo_response_;
} _ChatResponse_default_instance_;
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik
static void InitDefaultsscc_info_ChatRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::diagnostic::v202501::_ChatRequest_default_instance_;
    new (ptr) ::kentik::diagnostic::v202501::ChatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::diagnostic::v202501::ChatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChatRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChatRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto}, {
      &scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,
      &scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,}};

static void InitDefaultsscc_info_ChatResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::diagnostic::v202501::_ChatResponse_default_instance_;
    new (ptr) ::kentik::diagnostic::v202501::ChatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::diagnostic::v202501::ChatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChatResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChatResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto}, {
      &scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,
      &scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,}};

static void InitDefaultsscc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::diagnostic::v202501::_EchoRequest_default_instance_;
    new (ptr) ::kentik::diagnostic::v202501::EchoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::diagnostic::v202501::EchoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto}, {}};

static void InitDefaultsscc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::diagnostic::v202501::_EchoResponse_default_instance_;
    new (ptr) ::kentik::diagnostic::v202501::EchoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::diagnostic::v202501::EchoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::EchoResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, message_id_),
  offsetof(::kentik::diagnostic::v202501::ChatRequestDefaultTypeInternal, echo_request_),
  offsetof(::kentik::diagnostic::v202501::ChatRequestDefaultTypeInternal, echo_response_),
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, message_id_),
  offsetof(::kentik::diagnostic::v202501::ChatResponseDefaultTypeInternal, echo_request_),
  offsetof(::kentik::diagnostic::v202501::ChatResponseDefaultTypeInternal, echo_response_),
  PROTOBUF_FIELD_OFFSET(::kentik::diagnostic::v202501::ChatResponse, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::diagnostic::v202501::EchoRequest)},
  { 6, -1, sizeof(::kentik::diagnostic::v202501::EchoResponse)},
  { 12, -1, sizeof(::kentik::diagnostic::v202501::ChatRequest)},
  { 21, -1, sizeof(::kentik::diagnostic::v202501::ChatResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::diagnostic::v202501::_EchoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::diagnostic::v202501::_EchoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::diagnostic::v202501::_ChatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::diagnostic::v202501::_ChatResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*kentik/diagnostic/v202501/diagnostic.p"
  "roto\022\031kentik.diagnostic.v202501\032\027google/"
  "api/client.proto\032%kentik/core/v202303/an"
  "notations.proto\"\'\n\013EchoRequest\022\030\n\007messag"
  "e\030\001 \001(\tR\007message\"(\n\014EchoResponse\022\030\n\007mess"
  "age\030\001 \001(\tR\007message\"\320\001\n\013ChatRequest\022\035\n\nme"
  "ssage_id\030\001 \001(\tR\tmessageId\022K\n\014echo_reques"
  "t\030\002 \001(\0132&.kentik.diagnostic.v202501.Echo"
  "RequestH\000R\013echoRequest\022N\n\recho_response\030"
  "\003 \001(\0132\'.kentik.diagnostic.v202501.EchoRe"
  "sponseH\000R\014echoResponseB\005\n\003msg\"\321\001\n\014ChatRe"
  "sponse\022\035\n\nmessage_id\030\001 \001(\tR\tmessageId\022K\n"
  "\014echo_request\030\002 \001(\0132&.kentik.diagnostic."
  "v202501.EchoRequestH\000R\013echoRequest\022N\n\rec"
  "ho_response\030\003 \001(\0132\'.kentik.diagnostic.v2"
  "02501.EchoResponseH\000R\014echoResponseB\005\n\003ms"
  "g2\375\001\n\021DiagnosticService\022c\n\004Echo\022&.kentik"
  ".diagnostic.v202501.EchoRequest\032\'.kentik"
  ".diagnostic.v202501.EchoResponse\"\n\362\327\002\006PU"
  "BLIC\022g\n\004Chat\022&.kentik.diagnostic.v202501"
  ".ChatRequest\032\'.kentik.diagnostic.v202501"
  ".ChatResponse\"\n\362\327\002\006PUBLIC(\0010\001\032\032\312A\023grpc.a"
  "pi.kentik.com\220\330\002\004BQZOgithub.com/kentik/a"
  "pi-schema-public/gen/go/kentik/diagnosti"
  "c/v202501;diagnosticb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_sccs[4] = {
  &scc_info_ChatRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,
  &scc_info_ChatResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,
  &scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,
  &scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto, "kentik/diagnostic/v202501/diagnostic.proto", 988,
  &descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_once, descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_sccs, descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto::offsets,
  file_level_metadata_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto, 4, file_level_enum_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto, file_level_service_descriptors_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto)), true);
namespace kentik {
namespace diagnostic {
namespace v202501 {

// ===================================================================

void EchoRequest::InitAsDefaultInstance() {
}
class EchoRequest::_Internal {
 public:
};

EchoRequest::EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.EchoRequest)
}

void EchoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.EchoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoRequest::ArenaDtor(void* object) {
  EchoRequest* _this = reinterpret_cast< EchoRequest* >(object);
  (void)_this;
}
void EchoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoRequest& EchoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  return *internal_default_instance();
}


void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1[json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.diagnostic.v202501.EchoRequest.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1[json_name = "message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.diagnostic.v202501.EchoRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.EchoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1[json_name = "message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.diagnostic.v202501.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.diagnostic.v202501.EchoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.diagnostic.v202501.EchoRequest)
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void EchoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.diagnostic.v202501.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  return true;
}

void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoResponse::InitAsDefaultInstance() {
}
class EchoResponse::_Internal {
 public:
};

EchoResponse::EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.EchoResponse)
}

void EchoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.EchoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoResponse::ArenaDtor(void* object) {
  EchoResponse* _this = reinterpret_cast< EchoResponse* >(object);
  (void)_this;
}
void EchoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoResponse& EchoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  return *internal_default_instance();
}


void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1[json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.diagnostic.v202501.EchoResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1[json_name = "message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.diagnostic.v202501.EchoResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.EchoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1[json_name = "message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.diagnostic.v202501.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.diagnostic.v202501.EchoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.diagnostic.v202501.EchoResponse)
    MergeFrom(*source);
  }
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void EchoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.diagnostic.v202501.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  return true;
}

void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatRequest::InitAsDefaultInstance() {
  ::kentik::diagnostic::v202501::_ChatRequest_default_instance_.echo_request_ = const_cast< ::kentik::diagnostic::v202501::EchoRequest*>(
      ::kentik::diagnostic::v202501::EchoRequest::internal_default_instance());
  ::kentik::diagnostic::v202501::_ChatRequest_default_instance_.echo_response_ = const_cast< ::kentik::diagnostic::v202501::EchoResponse*>(
      ::kentik::diagnostic::v202501::EchoResponse::internal_default_instance());
}
class ChatRequest::_Internal {
 public:
  static const ::kentik::diagnostic::v202501::EchoRequest& echo_request(const ChatRequest* msg);
  static const ::kentik::diagnostic::v202501::EchoResponse& echo_response(const ChatRequest* msg);
};

const ::kentik::diagnostic::v202501::EchoRequest&
ChatRequest::_Internal::echo_request(const ChatRequest* msg) {
  return *msg->msg_.echo_request_;
}
const ::kentik::diagnostic::v202501::EchoResponse&
ChatRequest::_Internal::echo_response(const ChatRequest* msg) {
  return *msg->msg_.echo_response_;
}
void ChatRequest::set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(echo_request);
    if (message_arena != submessage_arena) {
      echo_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo_request, submessage_arena);
    }
    set_has_echo_request();
    msg_.echo_request_ = echo_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_request)
}
void ChatRequest::set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(echo_response);
    if (message_arena != submessage_arena) {
      echo_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo_response, submessage_arena);
    }
    set_has_echo_response();
    msg_.echo_response_ = echo_response;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatRequest.echo_response)
}
ChatRequest::ChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.ChatRequest)
}
ChatRequest::ChatRequest(const ChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kEchoRequest: {
      _internal_mutable_echo_request()->::kentik::diagnostic::v202501::EchoRequest::MergeFrom(from._internal_echo_request());
      break;
    }
    case kEchoResponse: {
      _internal_mutable_echo_response()->::kentik::diagnostic::v202501::EchoResponse::MergeFrom(from._internal_echo_response());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.ChatRequest)
}

void ChatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}

ChatRequest::~ChatRequest() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.ChatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_msg()) {
    clear_msg();
  }
}

void ChatRequest::ArenaDtor(void* object) {
  ChatRequest* _this = reinterpret_cast< ChatRequest* >(object);
  (void)_this;
}
void ChatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRequest& ChatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRequest_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  return *internal_default_instance();
}


void ChatRequest::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:kentik.diagnostic.v202501.ChatRequest)
  switch (msg_case()) {
    case kEchoRequest: {
      if (GetArena() == nullptr) {
        delete msg_.echo_request_;
      }
      break;
    }
    case kEchoResponse: {
      if (GetArena() == nullptr) {
        delete msg_.echo_response_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.ChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1[json_name = "messageId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.diagnostic.v202501.ChatRequest.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.ChatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1[json_name = "messageId"];
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.diagnostic.v202501.ChatRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
  if (_internal_has_echo_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::echo_request(this), target, stream);
  }

  // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
  if (_internal_has_echo_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::echo_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.ChatRequest)
  return target;
}

size_t ChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.ChatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1[json_name = "messageId"];
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  switch (msg_case()) {
    // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
    case kEchoRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.echo_request_);
      break;
    }
    // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
    case kEchoResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.echo_response_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.diagnostic.v202501.ChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.diagnostic.v202501.ChatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.diagnostic.v202501.ChatRequest)
    MergeFrom(*source);
  }
}

void ChatRequest::MergeFrom(const ChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.ChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  switch (from.msg_case()) {
    case kEchoRequest: {
      _internal_mutable_echo_request()->::kentik::diagnostic::v202501::EchoRequest::MergeFrom(from._internal_echo_request());
      break;
    }
    case kEchoResponse: {
      _internal_mutable_echo_response()->::kentik::diagnostic::v202501::EchoResponse::MergeFrom(from._internal_echo_response());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ChatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.diagnostic.v202501.ChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRequest::CopyFrom(const ChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.ChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRequest::IsInitialized() const {
  return true;
}

void ChatRequest::InternalSwap(ChatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatResponse::InitAsDefaultInstance() {
  ::kentik::diagnostic::v202501::_ChatResponse_default_instance_.echo_request_ = const_cast< ::kentik::diagnostic::v202501::EchoRequest*>(
      ::kentik::diagnostic::v202501::EchoRequest::internal_default_instance());
  ::kentik::diagnostic::v202501::_ChatResponse_default_instance_.echo_response_ = const_cast< ::kentik::diagnostic::v202501::EchoResponse*>(
      ::kentik::diagnostic::v202501::EchoResponse::internal_default_instance());
}
class ChatResponse::_Internal {
 public:
  static const ::kentik::diagnostic::v202501::EchoRequest& echo_request(const ChatResponse* msg);
  static const ::kentik::diagnostic::v202501::EchoResponse& echo_response(const ChatResponse* msg);
};

const ::kentik::diagnostic::v202501::EchoRequest&
ChatResponse::_Internal::echo_request(const ChatResponse* msg) {
  return *msg->msg_.echo_request_;
}
const ::kentik::diagnostic::v202501::EchoResponse&
ChatResponse::_Internal::echo_response(const ChatResponse* msg) {
  return *msg->msg_.echo_response_;
}
void ChatResponse::set_allocated_echo_request(::kentik::diagnostic::v202501::EchoRequest* echo_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(echo_request);
    if (message_arena != submessage_arena) {
      echo_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo_request, submessage_arena);
    }
    set_has_echo_request();
    msg_.echo_request_ = echo_request;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_request)
}
void ChatResponse::set_allocated_echo_response(::kentik::diagnostic::v202501::EchoResponse* echo_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(echo_response);
    if (message_arena != submessage_arena) {
      echo_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo_response, submessage_arena);
    }
    set_has_echo_response();
    msg_.echo_response_ = echo_response;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.diagnostic.v202501.ChatResponse.echo_response)
}
ChatResponse::ChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.diagnostic.v202501.ChatResponse)
}
ChatResponse::ChatResponse(const ChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kEchoRequest: {
      _internal_mutable_echo_request()->::kentik::diagnostic::v202501::EchoRequest::MergeFrom(from._internal_echo_request());
      break;
    }
    case kEchoResponse: {
      _internal_mutable_echo_response()->::kentik::diagnostic::v202501::EchoResponse::MergeFrom(from._internal_echo_response());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kentik.diagnostic.v202501.ChatResponse)
}

void ChatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}

ChatResponse::~ChatResponse() {
  // @@protoc_insertion_point(destructor:kentik.diagnostic.v202501.ChatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_msg()) {
    clear_msg();
  }
}

void ChatResponse::ArenaDtor(void* object) {
  ChatResponse* _this = reinterpret_cast< ChatResponse* >(object);
  (void)_this;
}
void ChatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatResponse& ChatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatResponse_kentik_2fdiagnostic_2fv202501_2fdiagnostic_2eproto.base);
  return *internal_default_instance();
}


void ChatResponse::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:kentik.diagnostic.v202501.ChatResponse)
  switch (msg_case()) {
    case kEchoRequest: {
      if (GetArena() == nullptr) {
        delete msg_.echo_request_;
      }
      break;
    }
    case kEchoResponse: {
      if (GetArena() == nullptr) {
        delete msg_.echo_response_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.diagnostic.v202501.ChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1[json_name = "messageId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.diagnostic.v202501.ChatResponse.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.diagnostic.v202501.ChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1[json_name = "messageId"];
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.diagnostic.v202501.ChatResponse.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
  if (_internal_has_echo_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::echo_request(this), target, stream);
  }

  // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
  if (_internal_has_echo_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::echo_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.diagnostic.v202501.ChatResponse)
  return target;
}

size_t ChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.diagnostic.v202501.ChatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1[json_name = "messageId"];
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  switch (msg_case()) {
    // .kentik.diagnostic.v202501.EchoRequest echo_request = 2[json_name = "echoRequest"];
    case kEchoRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.echo_request_);
      break;
    }
    // .kentik.diagnostic.v202501.EchoResponse echo_response = 3[json_name = "echoResponse"];
    case kEchoResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.echo_response_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.diagnostic.v202501.ChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.diagnostic.v202501.ChatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.diagnostic.v202501.ChatResponse)
    MergeFrom(*source);
  }
}

void ChatResponse::MergeFrom(const ChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.diagnostic.v202501.ChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  switch (from.msg_case()) {
    case kEchoRequest: {
      _internal_mutable_echo_request()->::kentik::diagnostic::v202501::EchoRequest::MergeFrom(from._internal_echo_request());
      break;
    }
    case kEchoResponse: {
      _internal_mutable_echo_response()->::kentik::diagnostic::v202501::EchoResponse::MergeFrom(from._internal_echo_response());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ChatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.diagnostic.v202501.ChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatResponse::CopyFrom(const ChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.diagnostic.v202501.ChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatResponse::IsInitialized() const {
  return true;
}

void ChatResponse::InternalSwap(ChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202501
}  // namespace diagnostic
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::diagnostic::v202501::EchoRequest* Arena::CreateMaybeMessage< ::kentik::diagnostic::v202501::EchoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::diagnostic::v202501::EchoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::diagnostic::v202501::EchoResponse* Arena::CreateMaybeMessage< ::kentik::diagnostic::v202501::EchoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::diagnostic::v202501::EchoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::diagnostic::v202501::ChatRequest* Arena::CreateMaybeMessage< ::kentik::diagnostic::v202501::ChatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::diagnostic::v202501::ChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::diagnostic::v202501::ChatResponse* Arena::CreateMaybeMessage< ::kentik::diagnostic::v202501::ChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::diagnostic::v202501::ChatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
