// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/device/v202308beta1/device.proto

#include "kentik/device/v202308beta1/device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
namespace kentik {
namespace device {
namespace v202308beta1 {
class DeviceSnmpV3ConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceSnmpV3Conf> _instance;
} _DeviceSnmpV3Conf_default_instance_;
class DeviceNmsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNmsConfig> _instance;
} _DeviceNmsConfig_default_instance_;
class DeviceNmsSnmpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNmsSnmpConfig> _instance;
} _DeviceNmsSnmpConfig_default_instance_;
class DeviceNmsStConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNmsStConfig> _instance;
} _DeviceNmsStConfig_default_instance_;
class DeviceConciseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceConcise> _instance;
} _DeviceConcise_default_instance_;
class SiteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Site> _instance;
} _Site_default_instance_;
class PlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plan> _instance;
} _Plan_default_instance_;
class LabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label> _instance;
} _Label_default_instance_;
class InterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Interface> _instance;
} _Interface_default_instance_;
class CustomColumnDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomColumnData> _instance;
} _CustomColumnData_default_instance_;
class GnmiV1ConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnmiV1Conf> _instance;
} _GnmiV1Conf_default_instance_;
class DeviceDetailedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceDetailed> _instance;
} _DeviceDetailed_default_instance_;
class LabelConciseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelConcise> _instance;
} _LabelConcise_default_instance_;
class ListDevicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDevicesRequest> _instance;
} _ListDevicesRequest_default_instance_;
class ListDevicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDevicesResponse> _instance;
} _ListDevicesResponse_default_instance_;
class GetDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceRequest> _instance;
} _GetDeviceRequest_default_instance_;
class GetDeviceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceResponse> _instance;
} _GetDeviceResponse_default_instance_;
class CreateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDeviceRequest> _instance;
} _CreateDeviceRequest_default_instance_;
class CreateDeviceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDeviceResponse> _instance;
} _CreateDeviceResponse_default_instance_;
class CreateDevicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDevicesRequest> _instance;
} _CreateDevicesRequest_default_instance_;
class CreateDevicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDevicesResponse> _instance;
} _CreateDevicesResponse_default_instance_;
class UpdateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeviceRequest> _instance;
} _UpdateDeviceRequest_default_instance_;
class UpdateDeviceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeviceResponse> _instance;
} _UpdateDeviceResponse_default_instance_;
class UpdateDevicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDevicesRequest> _instance;
} _UpdateDevicesRequest_default_instance_;
class UpdateDevicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDevicesResponse> _instance;
} _UpdateDevicesResponse_default_instance_;
class UpdateDeviceLabelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeviceLabelsRequest> _instance;
} _UpdateDeviceLabelsRequest_default_instance_;
class UpdateDeviceLabelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeviceLabelsResponse> _instance;
} _UpdateDeviceLabelsResponse_default_instance_;
class DeleteDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDeviceRequest> _instance;
} _DeleteDeviceRequest_default_instance_;
class DeleteDeviceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDeviceResponse> _instance;
} _DeleteDeviceResponse_default_instance_;
class DeleteDevicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDevicesRequest> _instance;
} _DeleteDevicesRequest_default_instance_;
class DeleteDevicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDevicesResponse> _instance;
} _DeleteDevicesResponse_default_instance_;
}  // namespace v202308beta1
}  // namespace device
}  // namespace kentik
static void InitDefaultsscc_info_CreateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_CreateDeviceRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::CreateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::CreateDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_CreateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_CreateDeviceResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::CreateDeviceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::CreateDeviceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_CreateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_CreateDevicesRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::CreateDevicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::CreateDevicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_CreateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_CreateDevicesResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::CreateDevicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::CreateDevicesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_CustomColumnData_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::CustomColumnData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::CustomColumnData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeleteDeviceRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeleteDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeleteDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeleteDeviceResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeleteDeviceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeleteDeviceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeleteDevicesRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeleteDevicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeleteDevicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeleteDevicesResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeleteDevicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeleteDevicesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeviceConcise_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeviceConcise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeviceConcise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeviceDetailed_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeviceDetailed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeviceDetailed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeviceNmsConfig_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeviceNmsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeviceNmsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
      &scc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeviceNmsSnmpConfig_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeviceNmsSnmpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeviceNmsStConfig_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeviceNmsStConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeviceNmsStConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_DeviceSnmpV3Conf_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::DeviceSnmpV3Conf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_GetDeviceRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::GetDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::GetDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_GetDeviceResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::GetDeviceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::GetDeviceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_GnmiV1Conf_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::GnmiV1Conf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::GnmiV1Conf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_Interface_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::Interface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::Interface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_Label_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::Label();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::Label::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_LabelConcise_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::LabelConcise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::LabelConcise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_ListDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_ListDevicesRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::ListDevicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::ListDevicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_ListDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_ListDevicesResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::ListDevicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::ListDevicesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_Plan_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::Plan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::Plan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_Site_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::Site();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::Site::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_UpdateDeviceLabelsRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_UpdateDeviceLabelsRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::UpdateDeviceLabelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::UpdateDeviceLabelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeviceLabelsRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeviceLabelsRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDeviceLabelsResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_UpdateDeviceLabelsResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::UpdateDeviceLabelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::UpdateDeviceLabelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeviceLabelsResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeviceLabelsResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_UpdateDeviceRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::UpdateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::UpdateDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_UpdateDeviceResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::UpdateDeviceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::UpdateDeviceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_UpdateDevicesRequest_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::UpdateDevicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::UpdateDevicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::device::v202308beta1::_UpdateDevicesResponse_default_instance_;
    new (ptr) ::kentik::device::v202308beta1::UpdateDevicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::device::v202308beta1::UpdateDevicesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto}, {
      &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto[31];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceSnmpV3Conf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceSnmpV3Conf, username_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceSnmpV3Conf, authentication_protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceSnmpV3Conf, authentication_passphrase_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceSnmpV3Conf, privacy_protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceSnmpV3Conf, privacy_passphrase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsConfig, agent_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsConfig, ip_address_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsConfig, snmp_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsConfig, st_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsSnmpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsSnmpConfig, credential_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsSnmpConfig, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsSnmpConfig, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsStConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsStConfig, credential_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsStConfig, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsStConfig, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceNmsStConfig, secure_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_subtype_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, cdn_attr_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_description_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, sending_ips_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, plan_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, site_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, minimize_snmp_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_snmp_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_snmp_community_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_snmp_v3_conf_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_neighbor_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_neighbor_ip6_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_neighbor_asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_password_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, use_bgp_device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_flowspec_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, nms_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, device_bgp_credential_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, flow_snmp_credential_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceConcise, monitoring_template_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Site, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Site, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Site, site_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Site, lat_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Site, lon_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Site, company_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Plan, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Plan, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, user_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, company_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, color_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, order_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, pivot_device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Label, pivot_label_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, interface_description_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, initial_snmp_speed_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, snmp_speed_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, snmp_alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, snmp_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, connectivity_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, network_boundary_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::Interface, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, field_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, col_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, col_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CustomColumnData, device_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::GnmiV1Conf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::GnmiV1Conf, dialout_server_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, company_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_description_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, site_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, plan_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, labels_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, all_interfaces_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_flow_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, sending_ips_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_snmp_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_snmp_community_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, minimize_snmp_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_neighbor_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_neighbor_ip6_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_neighbor_asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_flowspec_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_password_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_label_unicast_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, bgp_lookup_strategy_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_status_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, use_bgp_device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, custom_columns_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, custom_column_data_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_chf_client_port_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_chf_client_protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_chf_interface_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_agent_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, max_flow_rate_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, max_big_flow_rate_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_proxy_bgp_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_proxy_bgp6_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, created_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, updated_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_snmp_v3_conf_enabled_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_snmp_v3_conf_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, cdn_attr_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, bgp_peer_ip4_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, bgp_peer_ip6_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_subtype_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_vendor_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_model_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, cloud_export_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_kproxy_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, snmp_enabled_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, snmp_disabled_reason_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, snmp_disabled_reason_other_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, bgp_disabled_reason_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, bgp_disabled_reason_other_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_manufacturer_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_alert_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, role_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_gnmi_v1_conf_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, use_asn_from_flow_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, max_interface_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, max_interface_check_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, nms_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, device_bgp_credential_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeviceDetailed, flow_snmp_credential_name_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::LabelConcise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::LabelConcise, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::ListDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::ListDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::ListDevicesResponse, devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::ListDevicesResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::GetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::GetDeviceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::GetDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::GetDeviceResponse, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDeviceRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDeviceResponse, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDevicesRequest, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDevicesResponse, devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::CreateDevicesResponse, failed_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceResponse, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDevicesRequest, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDevicesResponse, devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDevicesResponse, failed_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceLabelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceLabelsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceLabelsRequest, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceLabelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::UpdateDeviceLabelsResponse, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDeviceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDevicesRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::device::v202308beta1::DeleteDevicesResponse, failed_devices_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::device::v202308beta1::DeviceSnmpV3Conf)},
  { 10, -1, sizeof(::kentik::device::v202308beta1::DeviceNmsConfig)},
  { 19, -1, sizeof(::kentik::device::v202308beta1::DeviceNmsSnmpConfig)},
  { 27, -1, sizeof(::kentik::device::v202308beta1::DeviceNmsStConfig)},
  { 36, 65, sizeof(::kentik::device::v202308beta1::DeviceConcise)},
  { 89, -1, sizeof(::kentik::device::v202308beta1::Site)},
  { 99, -1, sizeof(::kentik::device::v202308beta1::Plan)},
  { 106, -1, sizeof(::kentik::device::v202308beta1::Label)},
  { 122, -1, sizeof(::kentik::device::v202308beta1::Interface)},
  { 136, -1, sizeof(::kentik::device::v202308beta1::CustomColumnData)},
  { 147, -1, sizeof(::kentik::device::v202308beta1::GnmiV1Conf)},
  { 153, 221, sizeof(::kentik::device::v202308beta1::DeviceDetailed)},
  { 284, -1, sizeof(::kentik::device::v202308beta1::LabelConcise)},
  { 290, -1, sizeof(::kentik::device::v202308beta1::ListDevicesRequest)},
  { 295, -1, sizeof(::kentik::device::v202308beta1::ListDevicesResponse)},
  { 302, -1, sizeof(::kentik::device::v202308beta1::GetDeviceRequest)},
  { 308, -1, sizeof(::kentik::device::v202308beta1::GetDeviceResponse)},
  { 314, -1, sizeof(::kentik::device::v202308beta1::CreateDeviceRequest)},
  { 320, -1, sizeof(::kentik::device::v202308beta1::CreateDeviceResponse)},
  { 326, -1, sizeof(::kentik::device::v202308beta1::CreateDevicesRequest)},
  { 332, -1, sizeof(::kentik::device::v202308beta1::CreateDevicesResponse)},
  { 339, -1, sizeof(::kentik::device::v202308beta1::UpdateDeviceRequest)},
  { 345, -1, sizeof(::kentik::device::v202308beta1::UpdateDeviceResponse)},
  { 351, -1, sizeof(::kentik::device::v202308beta1::UpdateDevicesRequest)},
  { 357, -1, sizeof(::kentik::device::v202308beta1::UpdateDevicesResponse)},
  { 364, -1, sizeof(::kentik::device::v202308beta1::UpdateDeviceLabelsRequest)},
  { 371, -1, sizeof(::kentik::device::v202308beta1::UpdateDeviceLabelsResponse)},
  { 377, -1, sizeof(::kentik::device::v202308beta1::DeleteDeviceRequest)},
  { 383, -1, sizeof(::kentik::device::v202308beta1::DeleteDeviceResponse)},
  { 388, -1, sizeof(::kentik::device::v202308beta1::DeleteDevicesRequest)},
  { 394, -1, sizeof(::kentik::device::v202308beta1::DeleteDevicesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeviceSnmpV3Conf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeviceNmsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeviceNmsSnmpConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeviceNmsStConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeviceConcise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_Site_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_Plan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_Label_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_Interface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_CustomColumnData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_GnmiV1Conf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeviceDetailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_LabelConcise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_ListDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_ListDevicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_GetDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_GetDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_CreateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_CreateDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_CreateDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_CreateDevicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_UpdateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_UpdateDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_UpdateDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_UpdateDevicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_UpdateDeviceLabelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_UpdateDeviceLabelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeleteDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeleteDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeleteDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::device::v202308beta1::_DeleteDevicesResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'kentik/device/v202308beta1/device.prot"
  "o\022\032kentik.device.v202308beta1\032\034google/ap"
  "i/annotations.proto\032\027google/api/client.p"
  "roto\032\037google/api/field_behavior.proto\032\037g"
  "oogle/protobuf/timestamp.proto\032\036google/p"
  "rotobuf/duration.proto\032.protoc-gen-opena"
  "piv2/options/annotations.proto\032%kentik/c"
  "ore/v202303/annotations.proto\"\222\007\n\020Device"
  "SnmpV3Conf\022\250\001\n\010username\030\001 \001(\tB\213\001\222A\207\0012\204\001U"
  "serName (username) - the user name to us"
  "e to authenticate via SNMP v3. ** UserNa"
  "me is required when device_snmp_v3_conf "
  "is not nullR\010username\022\226\001\n\027authentication"
  "_protocol\030\002 \001(\tB]\222AZ2XAuthentication Pro"
  "tocol (authentication_protocol) - the au"
  "th protocol to use via SNMP v3R\026authenti"
  "cationProtocol\022\350\001\n\031authentication_passph"
  "rase\030\003 \001(\tB\252\001\222A\246\0012\243\001Authentication Passp"
  "hrase (authentication_passphrase) - the "
  "passphrase to use for SNMP v3 authentica"
  "tion protocol (required when Authenticat"
  "ionProtocol not NoAuth)R\030authenticationP"
  "assphrase\022\215\001\n\020privacy_protocol\030\004 \001(\tBb\222A"
  "_2]Privacy Protocol (privacy_protocol) -"
  " the privacy protocol to use to authenti"
  "cate via SNMP v3R\017privacyProtocol\022\276\001\n\022pr"
  "ivacy_passphrase\030\005 \001(\tB\216\001\222A\212\0012\207\001Privacy "
  "Passphrase (privacy_passphrase) - the pa"
  "ssphrase to use for SNMP v3 privacy prot"
  "ocol (required when PrivacyProtocol not "
  "NoPriv)R\021privacyPassphrase\"\371\003\n\017DeviceNms"
  "Config\022O\n\010agent_id\030\002 \001(\tB4\222A12/ID of the"
  " agent that is monitoring this device.R\007"
  "agentId\022D\n\nip_address\030\003 \001(\tB%\222A\"2 Local "
  "IP address of this device.R\tipAddress\022\303\001"
  "\n\004snmp\030\004 \001(\0132/.kentik.device.v202308beta"
  "1.DeviceNmsSnmpConfigB~\222A{2yConfiguratio"
  "n if metrics will be collected over SNMP"
  ". Not including this configuration will "
  "make this a ping-only device.R\004snmp\022\210\001\n\002"
  "st\030\005 \001(\0132-.kentik.device.v202308beta1.De"
  "viceNmsStConfigBI\222AF2DConfiguration if m"
  "etrics will be collected over Streaming "
  "Telemetry.R\002st\"\234\002\n\023DeviceNmsSnmpConfig\022e"
  "\n\017credential_name\030\001 \001(\tB<\222A927Name of th"
  "e SNMP credentials from the credential v"
  "ault.R\016credentialName\022\?\n\004port\030\002 \001(\rB+\222A("
  "2&SNMP port, to override default of 161."
  "R\004port\022]\n\007timeout\030\003 \001(\0132\031.google.protobu"
  "f.DurationB(\222A%2#Timeout, to override de"
  "fault of 2s.R\007timeout\"\330\002\n\021DeviceNmsStCon"
  "fig\022c\n\017credential_name\030\001 \001(\tB:\222A725Name "
  "of the ST credentials from the credentia"
  "l vault.R\016credentialName\022>\n\004port\030\002 \001(\rB*"
  "\222A\'2%ST port, to override default of 603"
  "0.R\004port\022]\n\007timeout\030\003 \001(\0132\031.google.proto"
  "buf.DurationB(\222A%2#Timeout, to override "
  "default of 2s.R\007timeout\022\?\n\006secure\030\004 \001(\010B"
  "\'\222A$2\"Use SSL to connect to this device."
  "R\006secure\"\367)\n\rDeviceConcise\0227\n\002id\030\001 \001(\tB\'"
  "\222A$2\"System generated unique identifierR"
  "\002id\022\240\001\n\013device_name\030\002 \001(\tB\177\222A|2zDevice n"
  "ame (device_name) - The name of the devi"
  "ce. Valid characters: alphanumeric and u"
  "nderscores. Length: min=4, max=60.R\ndevi"
  "ceName\022a\n\016device_subtype\030\003 \001(\tB:\222A725Dev"
  "ice subtype (device_subtype) - The devic"
  "e subtype.R\rdeviceSubtype\022\215\002\n\010cdn_attr\030\004"
  " \001(\tB\361\001\222A\355\0012\352\001CDN attributes (cdn_attr) "
  "- If this is a DNS server, you can contr"
  "ibute its queries to Kentik\'s CDN attrib"
  "ution database. Valid values: \"Y\" or \"N\""
  ". ** cdn_attr is required when the devic"
  "e subtype\'s parent type is \"host-nprobe-"
  "dns-www\"R\007cdnAttr\022\226\001\n\022device_description"
  "\030\005 \001(\tBg\222Ad2bDescription (device_descrip"
  "tion) - The device description. Valid ch"
  "aracters: any. Length: max=128.R\021deviceD"
  "escription\022\343\001\n\013sending_ips\030\006 \003(\tB\301\001\222A\275\0012"
  "\272\001Device ip (sending_ips) - Array contai"
  "ning one or more IP address(es), from wh"
  "ich the device is sending flow. ** sendi"
  "ng_ips is required when the device subty"
  "pe\'s parent type is \"router\"R\nsendingIps"
  "\022\352\002\n\022device_sample_rate\030\007 \001(\001B\273\002\222A\267\0022\264\002S"
  "ample rate (device_sample_rate) - The ra"
  "te at which the device is sampling flows"
  ". Valid values: integer bigger than 1. R"
  "ecommended rate varies depending on flow"
  " volume; see https://kb.kentik.com/Ab02."
  "htm#Ab02-Flow_Sampling. ** device_sample"
  "_rate is required when the device subtyp"
  "e\'s parent type is \"router\"R\020deviceSampl"
  "eRate\022\256\001\n\007plan_id\030\010 \001(\rB\224\001\222A\220\0012\215\001Plan (p"
  "lan_id) - The ID of the plan to which th"
  "is device is assigned. Available plan(s)"
  " can be found via the Plans API. Valid v"
  "alue: integer.R\006planId\022\273\001\n\007site_id\030\t \001(\r"
  "B\241\001\222A\235\0012\232\001Site (site_id) - The ID of the"
  " site (if any) to which this device is a"
  "ssigned. Site IDs are system generated w"
  "hen a site is created. Valid value: inte"
  "ger.R\006siteId\022\270\003\n\rminimize_snmp\030\n \001(\010B\215\003\222"
  "A\211\0032\206\003SNMP polling (minimize_snmp) - The"
  " interval at which SNMP will be polled. "
  "If \"false\" (Standard), interface counter"
  " will be polled every 10 minutes and int"
  "erface description every 30 minutes. If "
  "\"true\" (Minimum) (Minimum), interface co"
  "unter won\'t be polled and interface desc"
  "ription will be polled every 6 hours. **"
  " minimize_snmp is required when the devi"
  "ce subtype\'s parent type is \"router\"H\000R\014"
  "minimizeSnmp\210\001\001\022\311\001\n\016device_snmp_ip\030\013 \001(\t"
  "B\242\001\222A\236\0012\233\001Device SNMP IP (device_snmp_ip"
  ") - The SNMP IP to use when polling the "
  "device. device_snmp_ip is ignored unless"
  " the device subtype\'s parent type is \"ro"
  "uter\"R\014deviceSnmpIp\022\354\001\n\025device_snmp_comm"
  "unity\030\014 \001(\tB\267\001\222A\263\0012\260\001SNMP community (dev"
  "ice_snmp_community) - The SNMP community"
  " to use when polling the device. device_"
  "snmp_community is ignored unless the dev"
  "ice subtype\'s parent type is \"router\"R\023d"
  "eviceSnmpCommunity\022\374\001\n\023device_snmp_v3_co"
  "nf\030\r \001(\0132,.kentik.device.v202308beta1.De"
  "viceSnmpV3ConfB\236\001\222A\232\0012\227\001SNMP v3 configur"
  "ation (device_snmp_v3_conf) - SNMP v3 co"
  "nfiguration. device_snmp_v3_conf is igno"
  "red unless the device subtype\'s parent t"
  "ype is \"router\"R\020deviceSnmpV3Conf\022\362\001\n\017de"
  "vice_bgp_type\030\016 \001(\tB\311\001\222A\305\0012\302\001BGP (device"
  "_bgp_type) - Device bgp type. Valid valu"
  "es: \"none\" (use generic IP/ASN mapping),"
  " \"device\" (peer with the device itself),"
  " \"other_device\" (share routing table of "
  "existing peered device)R\rdeviceBgpType\022\205"
  "\002\n\026device_bgp_neighbor_ip\030\017 \001(\tB\317\001\222A\313\0012\310"
  "\001Your IPv4 peering address (device_bgp_n"
  "eighbor_ip) - A valid IPv4 address to us"
  "e for peering with the device. ** An IPv"
  "4 and/or IPv6 peering address is require"
  "d when device_bgp_type is set to \"device"
  "\"R\023deviceBgpNeighborIp\022\210\002\n\027device_bgp_ne"
  "ighbor_ip6\030\020 \001(\tB\320\001\222A\314\0012\311\001Your IPv6 peer"
  "ing address (device_bgp_neighbor_ip6) - "
  "A valid IPv6 address to use for peering "
  "with the device. ** An IPv4 and/or IPv6 "
  "peering address is required when device_"
  "bgp_type is set to \"device\"R\024deviceBgpNe"
  "ighborIp6\022\202\002\n\027device_bgp_neighbor_asn\030\021 "
  "\001(\tB\312\001\222A\306\0012\303\001Your ASN (device_bgp_neighb"
  "or_asn) - The valid AS number (ASN) of t"
  "he autonomous system that this device be"
  "longs to. ** device_bgp_neighbor_asn is "
  "required when device_bgp_type is set to "
  "\"device\"R\024deviceBgpNeighborAsn\022\240\002\n\023devic"
  "e_bgp_password\030\022 \001(\tB\357\001\222A\353\0012\350\001BGP md5 pa"
  "ssword (device_bgp_password) - Optional "
  "BGP MD5 password (shared authentication "
  "password for BGP peering). Valid charact"
  "ers: alphanumeric. Length: 32. device_bg"
  "p_password is optional when device_bgp_t"
  "ype is set to \"device\"R\021deviceBgpPasswor"
  "d\022\244\002\n\021use_bgp_device_id\030\023 \001(\rB\370\001\222A\364\0012\361\001S"
  "elect master BGP device (use_bgp_device_"
  "id) - The ID of the device whose BGP tab"
  "le should be shared with this device. **"
  " use_bgp_device_id is required when devi"
  "ce_bgp_type is set to \"other_device\"). V"
  "alid value: a system-generated device_id"
  "R\016useBgpDeviceId\022\225\001\n\023device_bgp_flowspec"
  "\030\024 \001(\010Be\222Ab2`BGP Flowspec Compatibility "
  "(device_bgp_flowspec) - Toggle BGP Flows"
  "pec Compatibility for device.R\021deviceBgp"
  "Flowspec\022z\n\003nms\030\025 \001(\0132+.kentik.device.v2"
  "02308beta1.DeviceNmsConfigB;\222A826Configu"
  "ration if this device will be monitored "
  "by NMS.R\003nms\022\332\001\n\032device_bgp_credential_n"
  "ame\030\026 \001(\tB\234\001\222A\230\0012\225\001BGP Credential Name ("
  "device_bgp_credential_name) - Optional C"
  "redential Name (Credential for BGP peeri"
  "ng). Valid characters: alphanumeric. Len"
  "gth: 32.R\027deviceBgpCredentialName\022\336\001\n\031fl"
  "ow_snmp_credential_name\030\027 \001(\tB\242\001\222A\236\0012\233\001S"
  "nmp Credential Name (flow_snmp_credentia"
  "l_name) - Optional Credential Name (Cred"
  "ential for Flow Snmp peering). Valid cha"
  "racters: alphanumeric. Length: 32.R\026flow"
  "SnmpCredentialName\022\213\001\n\026monitoring_templa"
  "te_id\030\030 \001(\rBU\222AR2PMonitoring template - "
  "The ID of the monitoring template assign"
  "ed to this device.R\024monitoringTemplateId"
  "B\020\n\016_minimize_snmp\"\316\001\n\004Site\022\034\n\002id\030\001 \001(\tB"
  "\014\222A\t2\007Site IDR\002id\022+\n\tsite_name\030\002 \001(\tB\016\222A"
  "\0132\tSite nameR\010siteName\022$\n\003lat\030\003 \001(\001B\022\222A\017"
  "2\rSite latitudeR\003lat\022%\n\003lon\030\004 \001(\001B\023\222A\0202\016"
  "Site longitudeR\003lon\022.\n\ncompany_id\030\005 \001(\tB"
  "\017\222A\0142\nCompany IDR\tcompanyId\"H\n\004Plan\022\034\n\002i"
  "d\030\001 \001(\tB\014\222A\t2\007Plan IDR\002id\022\"\n\004name\030\002 \001(\tB"
  "\016\222A\0132\tPlan nameR\004name\"\304\004\n\005Label\022\035\n\002id\030\001 "
  "\001(\tB\r\222A\n2\010Label IDR\002id\022#\n\004name\030\002 \001(\tB\017\222A"
  "\0142\nLabel nameR\004name\0228\n\013description\030\003 \001(\t"
  "B\026\222A\0232\021Label descriptionR\013description\022K\n"
  "\005edate\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "B\031\222A\0262\024Label end date (UTC)R\005edate\022P\n\005cd"
  "ate\030\005 \001(\0132\032.google.protobuf.TimestampB\036\222"
  "A\0332\031Label creation date (UTC)R\005cdate\022%\n\007"
  "user_id\030\006 \001(\tB\014\222A\t2\007User IDR\006userId\022.\n\nc"
  "ompany_id\030\007 \001(\tB\017\222A\0142\nCompany IDR\tcompan"
  "yId\022&\n\005color\030\010 \001(\tB\020\222A\r2\013Label colorR\005co"
  "lor\022&\n\005order\030\t \001(\tB\020\222A\r2\013Label orderR\005or"
  "der\022<\n\017pivot_device_id\030\n \001(\tB\024\222A\0212\017Pivot"
  " device IDR\rpivotDeviceId\0229\n\016pivot_label"
  "_id\030\013 \001(\tB\023\222A\0202\016Pivot label IDR\014pivotLab"
  "elId\"\211\004\n\tInterface\022O\n\025interface_descript"
  "ion\030\001 \001(\tB\032\222A\0272\025Interface descriptionR\024i"
  "nterfaceDescription\022E\n\022initial_snmp_spee"
  "d\030\002 \001(\tB\027\222A\0242\022Initial SNMP speedR\020initia"
  "lSnmpSpeed\022+\n\tdevice_id\030\003 \001(\tB\016\222A\0132\tDevi"
  "ce IDR\010deviceId\022.\n\nsnmp_speed\030\004 \001(\tB\017\222A\014"
  "2\nSNMP speedR\tsnmpSpeed\022.\n\nsnmp_alias\030\005 "
  "\001(\tB\017\222A\0142\nSNMP aliasR\tsnmpAlias\022%\n\007snmp_"
  "id\030\006 \001(\tB\014\222A\t2\007SNMP IDR\006snmpId\022C\n\021connec"
  "tivity_type\030\007 \001(\tB\026\222A\0232\021Connectivity typ"
  "eR\020connectivityType\022@\n\020network_boundary\030"
  "\010 \001(\tB\025\222A\0222\020Network boundaryR\017networkBou"
  "ndary\022)\n\010provider\030\t \001(\tB\r\222A\n2\010ProviderR\010"
  "provider\"\252\002\n\020CustomColumnData\022+\n\tdevice_"
  "id\030\001 \001(\tB\016\222A\0132\tDevice IDR\010deviceId\022(\n\010fi"
  "eld_id\030\002 \001(\tB\r\222A\n2\010Field IDR\007fieldId\022+\n\010"
  "col_name\030\003 \001(\tB\020\222A\r2\013Column nameR\007colNam"
  "e\0222\n\013description\030\004 \001(\tB\020\222A\r2\013Description"
  "R\013description\022+\n\010col_type\030\005 \001(\tB\020\222A\r2\013Co"
  "lumn typeR\007colType\0221\n\013device_type\030\006 \001(\tB"
  "\020\222A\r2\013Device typeR\ndeviceType\"H\n\nGnmiV1C"
  "onf\022:\n\016dialout_server\030\001 \001(\tB\023\222A\0202\016Dialou"
  "t serverR\rdialoutServer\"\267&\n\016DeviceDetail"
  "ed\022;\n\002id\030\001 \001(\tB+\222A$2\"System generated un"
  "ique identifier\342A\001\003R\002id\022.\n\ncompany_id\030\002 "
  "\001(\tB\017\222A\0142\nCompany IDR\tcompanyId\0221\n\013devic"
  "e_name\030\003 \001(\tB\020\222A\r2\013Device nameR\ndeviceNa"
  "me\0224\n\014device_alias\030\004 \001(\tB\021\222A\0162\014Device al"
  "iasR\013deviceAlias\0221\n\013device_type\030\005 \001(\tB\020\222"
  "A\r2\013Device typeR\ndeviceType\022F\n\022device_de"
  "scription\030\006 \001(\tB\027\222A\0242\022Device description"
  "R\021deviceDescription\022\?\n\004site\030\007 \001(\0132 .kent"
  "ik.device.v202308beta1.SiteB\t\222A\0062\004SiteR\004"
  "site\022\?\n\004plan\030\010 \001(\0132 .kentik.device.v2023"
  "08beta1.PlanB\t\222A\0062\004PlanR\004plan\022N\n\006labels\030"
  "\t \003(\0132!.kentik.device.v202308beta1.Label"
  "B\023\222A\0202\016List of labelsR\006labels\022e\n\016all_int"
  "erfaces\030\n \003(\0132%.kentik.device.v202308bet"
  "a1.InterfaceB\027\222A\0242\022List of interfacesR\ra"
  "llInterfaces\022\?\n\020device_flow_type\030\013 \001(\tB\025"
  "\222A\0222\020Device flow typeR\016deviceFlowType\022E\n"
  "\022device_sample_rate\030\014 \001(\tB\027\222A\0242\022Device s"
  "ample rateR\020deviceSampleRate\0229\n\013sending_"
  "ips\030\r \003(\tB\030\222A\0252\023List of sending IPsR\nsen"
  "dingIps\0229\n\016device_snmp_ip\030\016 \001(\tB\023\222A\0202\016De"
  "vice SNMP IPR\014deviceSnmpIp\022N\n\025device_snm"
  "p_community\030\017 \001(\tB\032\222A\0272\025Device SNMP comm"
  "unityR\023deviceSnmpCommunity\022<\n\rminimize_s"
  "nmp\030\020 \001(\010B\022\222A\0172\rMinimize SNMPH\000R\014minimiz"
  "eSnmp\210\001\001\022<\n\017device_bgp_type\030\021 \001(\tB\024\222A\0212\017"
  "Device BGP typeR\rdeviceBgpType\022P\n\026device"
  "_bgp_neighbor_ip\030\022 \001(\tB\033\222A\0302\026Device BGP "
  "neighbor IPR\023deviceBgpNeighborIp\022S\n\027devi"
  "ce_bgp_neighbor_ip6\030\023 \001(\tB\034\222A\0312\027Device B"
  "GP neighbor IP6R\024deviceBgpNeighborIp6\022S\n"
  "\027device_bgp_neighbor_asn\030\024 \001(\tB\034\222A\0312\027Dev"
  "ice BGP neighbor ASNR\024deviceBgpNeighborA"
  "sn\022H\n\023device_bgp_flowspec\030\025 \001(\010B\030\222A\0252\023De"
  "vice BGP flowspecR\021deviceBgpFlowspec\022H\n\023"
  "device_bgp_password\030\026 \001(\tB\030\222A\0252\023Device B"
  "GP passwordR\021deviceBgpPassword\022V\n\030device"
  "_bgp_label_unicast\030\027 \001(\010B\035\222A\0322\030Device BG"
  "P label unicastR\025deviceBgpLabelUnicast\022H"
  "\n\023bgp_lookup_strategy\030\030 \001(\tB\030\222A\0252\023BGP lo"
  "okup strategyR\021bgpLookupStrategy\0227\n\rdevi"
  "ce_status\030\031 \001(\tB\022\222A\0172\rDevice statusR\014dev"
  "iceStatus\022A\n\021use_bgp_device_id\030\032 \001(\tB\026\222A"
  "\0232\021Use BGP device IDR\016useBgpDeviceId\022:\n\016"
  "custom_columns\030\033 \001(\tB\023\222A\0202\016Custom column"
  "sR\rcustomColumns\022s\n\022custom_column_data\030\034"
  " \003(\0132,.kentik.device.v202308beta1.Custom"
  "ColumnDataB\027\222A\0242\022Custom column dataR\020cus"
  "tomColumnData\022P\n\026device_chf_client_port\030"
  "\035 \001(\tB\033\222A\0302\026Device CHF client portR\023devi"
  "ceChfClientPort\022\\\n\032device_chf_client_pro"
  "tocol\030\036 \001(\tB\037\222A\0342\032Device CHF client prot"
  "ocolR\027deviceChfClientProtocol\022K\n\024device_"
  "chf_interface\030\037 \001(\tB\031\222A\0262\024Device CHF int"
  "erfaceR\022deviceChfInterface\022B\n\021device_age"
  "nt_type\030  \001(\tB\026\222A\0232\021Device agent typeR\017d"
  "eviceAgentType\0226\n\rmax_flow_rate\030! \001(\rB\022\222"
  "A\0172\rMax flow rateR\013maxFlowRate\022A\n\021max_bi"
  "g_flow_rate\030\" \001(\rB\026\222A\0232\021Max big flow rat"
  "eR\016maxBigFlowRate\022\?\n\020device_proxy_bgp\030# "
  "\001(\tB\025\222A\0222\020Device proxy BGPR\016deviceProxyB"
  "gp\022B\n\021device_proxy_bgp6\030$ \001(\tB\026\222A\0232\021Devi"
  "ce proxy BGP6R\017deviceProxyBgp6\022\\\n\014create"
  "d_date\030% \001(\0132\032.google.protobuf.Timestamp"
  "B\035\222A\0322\030Creation timestamp (UTC)R\013created"
  "Date\022e\n\014updated_date\030& \001(\0132\032.google.prot"
  "obuf.TimestampB&\222A#2!Last modification t"
  "imestamp (UTC)R\013updatedDate\022g\n\033device_sn"
  "mp_v3_conf_enabled\030\' \001(\010B)\222A&2$Device SN"
  "MP v3 configuration enabledR\027deviceSnmpV"
  "3ConfEnabled\022~\n\023device_snmp_v3_conf\030( \001("
  "\0132,.kentik.device.v202308beta1.DeviceSnm"
  "pV3ConfB!\222A\0362\034Device SNMP v3 configurati"
  "onR\020deviceSnmpV3Conf\022.\n\010cdn_attr\030) \001(\tB\023"
  "\222A\0202\016CDN attributesR\007cdnAttr\0223\n\014bgp_peer"
  "_ip4\030* \001(\tB\021\222A\0162\014BGP peer IP4R\nbgpPeerIp"
  "4\0223\n\014bgp_peer_ip6\030+ \001(\tB\021\222A\0162\014BGP peer I"
  "P6R\nbgpPeerIp6\022:\n\016device_subtype\030, \001(\tB\023"
  "\222A\0202\016Device subtypeR\rdeviceSubtype\022E\n\022de"
  "vice_vendor_type\030- \001(\tB\027\222A\0242\022Device vend"
  "or typeR\020deviceVendorType\022B\n\021device_mode"
  "l_type\030. \001(\tB\026\222A\0232\021Device model typeR\017de"
  "viceModelType\022<\n\017cloud_export_id\030/ \001(\tB\024"
  "\222A\0212\017Cloud export IDR\rcloudExportId\0227\n\rd"
  "evice_kproxy\0300 \001(\tB\022\222A\0172\rDevice KProxyR\014"
  "deviceKproxy\0224\n\014snmp_enabled\0301 \001(\tB\021\222A\0162"
  "\014SNMP enabledR\013snmpEnabled\022K\n\024snmp_disab"
  "led_reason\0302 \001(\tB\031\222A\0262\024SNMP disabled rea"
  "sonR\022snmpDisabledReason\022\\\n\032snmp_disabled"
  "_reason_other\0303 \001(\tB\037\222A\0342\032SNMP disabled "
  "reason otherR\027snmpDisabledReasonOther\022H\n"
  "\023bgp_disabled_reason\0304 \001(\tB\030\222A\0252\023BGP dis"
  "abled reasonR\021bgpDisabledReason\022Y\n\031bgp_d"
  "isabled_reason_other\0305 \001(\tB\036\222A\0332\031BGP dis"
  "abled reason otherR\026bgpDisabledReasonOth"
  "er\022I\n\023device_manufacturer\0306 \001(\tB\030\222A\0252\023De"
  "vice manufacturerR\022deviceManufacturer\0224\n"
  "\014device_alert\0307 \001(\tB\021\222A\0162\014Device alertR\013"
  "deviceAlert\022\035\n\004role\0308 \001(\tB\t\222A\0062\004RoleR\004ro"
  "le\022x\n\023device_gnmi_v1_conf\0309 \001(\0132&.kentik"
  ".device.v202308beta1.GnmiV1ConfB!\222A\0362\034De"
  "vice GNMI v1 configurationR\020deviceGnmiV1"
  "Conf\022A\n\021use_asn_from_flow\030: \001(\010B\026\222A\0232\021Us"
  "e ASN from flowR\016useAsnFromFlow\0227\n\rmax_i"
  "nterface\030; \001(\rB\022\222A\0172\rMax interfaceR\014maxI"
  "nterface\022H\n\023max_interface_check\030< \001(\rB\030\222"
  "A\0252\023Max interface checkR\021maxInterfaceChe"
  "ck\022u\n\003nms\030= \001(\0132+.kentik.device.v202308b"
  "eta1.DeviceNmsConfigB6\222A321Configuration"
  " if this device is monitored by NMS.R\003nm"
  "s\022\332\001\n\032device_bgp_credential_name\030> \001(\tB\234"
  "\001\222A\230\0012\225\001BGP Credential Name (device_bgp_"
  "credential_name) - Optional Credential N"
  "ame (Credential for BGP peering). Valid "
  "characters: alphanumeric. Length: 32.R\027d"
  "eviceBgpCredentialName\022\336\001\n\031flow_snmp_cre"
  "dential_name\030\? \001(\tB\242\001\222A\236\0012\233\001Snmp Credent"
  "ial Name (flow_snmp_credential_name) - O"
  "ptional Credential Name (Credential for "
  "Flow Snmp peering). Valid characters: al"
  "phanumeric. Length: 32.R\026flowSnmpCredent"
  "ialNameB\020\n\016_minimize_snmp\"-\n\014LabelConcis"
  "e\022\035\n\002id\030\001 \001(\rB\r\222A\n2\010Label IDR\002id\"\024\n\022List"
  "DevicesRequest\"\352\001\n\023ListDevicesResponse\022l"
  "\n\007devices\030\001 \003(\0132*.kentik.device.v202308b"
  "eta1.DeviceDetailedB&\222A#2!List of config"
  "urations of devicesR\007devices\022e\n\rinvalid_"
  "count\030\002 \001(\rB@\222A=2;Number of invalid entr"
  "ies encountered while collecting dataR\014i"
  "nvalidCount\"G\n\020GetDeviceRequest\0223\n\002id\030\001 "
  "\001(\tB#\222A\0342\032ID of the requested device\342A\001\002"
  "R\002id\"\203\001\n\021GetDeviceResponse\022n\n\006device\030\001 \001"
  "(\0132*.kentik.device.v202308beta1.DeviceDe"
  "tailedB*\222A\'2%Configuration of the reques"
  "ted deviceR\006device\"\202\001\n\023CreateDeviceReque"
  "st\022k\n\006device\030\001 \001(\0132).kentik.device.v2023"
  "08beta1.DeviceConciseB(\222A!2\037Configuratio"
  "n of the new device\342A\001\002R\006device\"\212\001\n\024Crea"
  "teDeviceResponse\022r\n\006device\030\001 \001(\0132*.kenti"
  "k.device.v202308beta1.DeviceDetailedB.\222A"
  "+2)Configuration of the newly created de"
  "viceR\006device\"\225\001\n\024CreateDevicesRequest\022}\n"
  "\007devices\030\001 \003(\0132).kentik.device.v202308be"
  "ta1.DeviceConciseB8\222A12/List of configur"
  "ations of devices to be created\342A\001\002R\007dev"
  "ices\"\363\001\n\025CreateDevicesResponse\022z\n\007device"
  "s\030\001 \003(\0132*.kentik.device.v202308beta1.Dev"
  "iceDetailedB4\222A12/List of configurations"
  " of newly created devicesR\007devices\022^\n\016fa"
  "iled_devices\030\002 \003(\tB7\222A422List of names o"
  "f devices that failed to be createdR\rfai"
  "ledDevices\"\235\001\n\023UpdateDeviceRequest\022\205\001\n\006d"
  "evice\030\001 \001(\0132).kentik.device.v202308beta1"
  ".DeviceConciseBB\222A;29New configuration a"
  "ttributes for the device to be updated\342A"
  "\001\002R\006device\"\204\001\n\024UpdateDeviceResponse\022l\n\006d"
  "evice\030\001 \001(\0132*.kentik.device.v202308beta1"
  ".DeviceDetailedB(\222A%2#Updated configurat"
  "ion of the deviceR\006device\"\225\001\n\024UpdateDevi"
  "cesRequest\022}\n\007devices\030\001 \003(\0132).kentik.dev"
  "ice.v202308beta1.DeviceConciseB8\222A12/Lis"
  "t of configurations of devices to be upd"
  "ated\342A\001\002R\007devices\"\353\001\n\025UpdateDevicesRespo"
  "nse\022t\n\007devices\030\001 \003(\0132*.kentik.device.v20"
  "2308beta1.DeviceDetailedB.\222A+2)List of c"
  "onfigurations of updated devicesR\007device"
  "s\022\\\n\016failed_devices\030\002 \003(\tB5\222A220List of "
  "IDs of devices that failed to be updated"
  "R\rfailedDevices\"\311\001\n\031UpdateDeviceLabelsRe"
  "quest\0227\n\002id\030\001 \001(\tB\'\222A 2\036ID of the device"
  " to be updated\342A\001\002R\002id\022s\n\006labels\030\002 \003(\0132("
  ".kentik.device.v202308beta1.LabelConcise"
  "B1\222A*2(List of labels to be added to the"
  " device\342A\001\002R\006labels\"\212\001\n\032UpdateDeviceLabe"
  "lsResponse\022l\n\006device\030\001 \001(\0132*.kentik.devi"
  "ce.v202308beta1.DeviceDetailedB(\222A%2#Upd"
  "ated configuration of the deviceR\006device"
  "\"N\n\023DeleteDeviceRequest\0227\n\002id\030\001 \001(\tB\'\222A "
  "2\036ID of the device to be deleted\342A\001\002R\002id"
  "\"\026\n\024DeleteDeviceResponse\"W\n\024DeleteDevice"
  "sRequest\022\?\n\003ids\030\001 \003(\tB-\222A&2$List of IDs "
  "of devices to be deleted\342A\001\002R\003ids\"u\n\025Del"
  "eteDevicesResponse\022\\\n\016failed_devices\030\001 \003"
  "(\tB5\222A220List of IDs of devices that fai"
  "led to be deletedR\rfailedDevices2\366\032\n\rDev"
  "iceService\022\252\002\n\013ListDevices\022..kentik.devi"
  "ce.v202308beta1.ListDevicesRequest\032/.ken"
  "tik.device.v202308beta1.ListDevicesRespo"
  "nse\"\271\001\222A~\022\021List all devices.\032\\Returns li"
  "st of configured devices (see [About Dev"
  "ices](https://kb.kentik.com/v4/Cb01.htm)"
  ").*\013ListDevices\362\327\002\021admin.device:read\202\323\344\223"
  "\002\035\022\033/device/v202308beta1/device\022\311\002\n\tGetD"
  "evice\022,.kentik.device.v202308beta1.GetDe"
  "viceRequest\032-.kentik.device.v202308beta1"
  ".GetDeviceResponse\"\336\001\222A\235\001\022#Retrieve conf"
  "iguration of a device.\032kReturns configur"
  "ation of a device specified by ID (see ["
  "About Devices](https://kb.kentik.com/v4/"
  "Cb01.htm)).*\tGetDevice\362\327\002\021admin.device:r"
  "ead\202\323\344\223\002\"\022 /device/v202308beta1/device/{"
  "id}\022\346\002\n\014CreateDevice\022/.kentik.device.v20"
  "2308beta1.CreateDeviceRequest\0320.kentik.d"
  "evice.v202308beta1.CreateDeviceResponse\""
  "\362\001\222A\262\001\022\027Configure a new device.\032\210\001Create"
  " configuration for a new device. Returns"
  " the newly created configuration (see [A"
  "bout Devices](https://kb.kentik.com/v4/C"
  "b01.htm)).*\014CreateDevice\362\327\002\022admin.device"
  ":write\202\323\344\223\002 \"\033/device/v202308beta1/devic"
  "e:\001*\022\203\003\n\rCreateDevices\0220.kentik.device.v"
  "202308beta1.CreateDevicesRequest\0321.kenti"
  "k.device.v202308beta1.CreateDevicesRespo"
  "nse\"\214\002\222A\306\001\022%Configure multiple devices ("
  "max 100).\032\215\001Create configuration for mul"
  "tiple devices. Returns the newly created"
  " configurations (see [About Devices](htt"
  "ps://kb.kentik.com/v4/Cb01.htm)).*\rCreat"
  "eDevices\362\327\002\022admin.device:write\202\323\344\223\002&\"!/d"
  "evice/v202308beta1/device/batch:\001*\022\223\003\n\014U"
  "pdateDevice\022/.kentik.device.v202308beta1"
  ".UpdateDeviceRequest\0320.kentik.device.v20"
  "2308beta1.UpdateDeviceResponse\"\237\002\222A\323\001\022\"U"
  "pdates configuration of a device.\032\236\001Repl"
  "aces configuration of a device with attr"
  "ibutes in the request. Returns the updat"
  "ed configuration (see [About Devices](ht"
  "tps://kb.kentik.com/v4/Cb01.htm)).*\014Upda"
  "teDevice\362\327\002\022admin.device:write\202\323\344\223\002,\032\'/d"
  "evice/v202308beta1/device/{device.id}:\001*"
  "\022\254\003\n\rUpdateDevices\0220.kentik.device.v2023"
  "08beta1.UpdateDevicesRequest\0321.kentik.de"
  "vice.v202308beta1.UpdateDevicesResponse\""
  "\265\002\222A\357\001\0224Updates configuration of multipl"
  "e devices (max 100).\032\247\001Replaces configur"
  "ation of multiple devices with attribute"
  "s in the request. Returns the updated co"
  "nfigurations (see [About Devices](https:"
  "//kb.kentik.com/v4/Cb01.htm)).*\rUpdateDe"
  "vices\362\327\002\022admin.device:write\202\323\344\223\002&\032!/devi"
  "ce/v202308beta1/device/batch:\001*\022\302\003\n\022Upda"
  "teDeviceLabels\0225.kentik.device.v202308be"
  "ta1.UpdateDeviceLabelsRequest\0326.kentik.d"
  "evice.v202308beta1.UpdateDeviceLabelsRes"
  "ponse\"\274\002\222A\360\001\022\033Updates labels of a device"
  ".\032\274\001Removes all existing labels from the"
  " device and applies the device labels (s"
  "ee [About Device Labels](https://kb.kent"
  "ik.com/v4/Cb16.htm)) specified by id. Re"
  "turns the updated configuration.*\022Update"
  "DeviceLabels\362\327\002\022admin.device:write\202\323\344\223\002,"
  "\032\'/device/v202308beta1/device/{id}/label"
  "s:\001*\022\325\002\n\014DeleteDevice\022/.kentik.device.v2"
  "02308beta1.DeleteDeviceRequest\0320.kentik."
  "device.v202308beta1.DeleteDeviceResponse"
  "\"\341\001\222A\237\001\022!Delete configuration of a devic"
  "e.\032lDeletes configuration of a device wi"
  "th specific ID (see [About Devices](http"
  "s://kb.kentik.com/v4/Cb01.htm)).*\014Delete"
  "Device\362\327\002\022admin.device:write\202\323\344\223\002\"* /dev"
  "ice/v202308beta1/device/{id}\022\356\002\n\rDeleteD"
  "evices\0220.kentik.device.v202308beta1.Dele"
  "teDevicesRequest\0321.kentik.device.v202308"
  "beta1.DeleteDevicesResponse\"\367\001\222A\261\001\022)Dele"
  "te configuration of multiple devices.\032uD"
  "eletes configuration of multiple devices"
  " with specific IDs (see [About Devices]("
  "https://kb.kentik.com/v4/Cb01.htm)).*\rDe"
  "leteDevices\362\327\002\022admin.device:write\202\323\344\223\002&\""
  "!/device/v202308beta1/device/batch:\001*\032*\312"
  "A\023grpc.api.kentik.com\352\327\002\014admin.device\220\330\002"
  "\003B\356\003ZLgithub.com/kentik/api-schema-publi"
  "c/gen/go/kentik/device/v202308beta1;devi"
  "ce\222A\234\003\022\265\001\n\nDevice API\022R# Overview\nThe De"
  "vice API provides programmatic access to"
  " configuration of devices\"E\n\026Kentik API "
  "Engineering\022+https://github.com/kentik/a"
  "pi-schema-public2\014v202308beta1*\001\0022\020appli"
  "cation/json:\020application/jsonZD\n\036\n\005email"
  "\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010\002\032\023X-"
  "CH-Auth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n\005toke"
  "n\022\000r]\n%General information about Kentik "
  "APIs\0224https://kb.kentik.com/v0/Ab09.htm#"
  "Ab09-APIs_Overviewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto_sccs[31] = {
  &scc_info_CreateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_CreateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_CreateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_CreateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeleteDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeleteDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeleteDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeleteDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_GetDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_GetDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_ListDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_ListDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_UpdateDeviceLabelsRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_UpdateDeviceLabelsResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_UpdateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_UpdateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_UpdateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
  &scc_info_UpdateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto, "kentik/device/v202308beta1/device.proto", 20906,
  &descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto_once, descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto_sccs, descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto_deps, 31, 7,
  schemas, file_default_instances, TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto::offsets,
  file_level_metadata_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto, 31, file_level_enum_descriptors_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto, file_level_service_descriptors_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto)), true);
namespace kentik {
namespace device {
namespace v202308beta1 {

// ===================================================================

void DeviceSnmpV3Conf::InitAsDefaultInstance() {
}
class DeviceSnmpV3Conf::_Internal {
 public:
};

DeviceSnmpV3Conf::DeviceSnmpV3Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeviceSnmpV3Conf)
}
DeviceSnmpV3Conf::DeviceSnmpV3Conf(const DeviceSnmpV3Conf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  authentication_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authentication_protocol().empty()) {
    authentication_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_authentication_protocol(),
      GetArena());
  }
  authentication_passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authentication_passphrase().empty()) {
    authentication_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_authentication_passphrase(),
      GetArena());
  }
  privacy_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privacy_protocol().empty()) {
    privacy_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_privacy_protocol(),
      GetArena());
  }
  privacy_passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privacy_passphrase().empty()) {
    privacy_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_privacy_passphrase(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeviceSnmpV3Conf)
}

void DeviceSnmpV3Conf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authentication_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authentication_passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privacy_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privacy_passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceSnmpV3Conf::~DeviceSnmpV3Conf() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceSnmpV3Conf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authentication_protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authentication_passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privacy_protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privacy_passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceSnmpV3Conf::ArenaDtor(void* object) {
  DeviceSnmpV3Conf* _this = reinterpret_cast< DeviceSnmpV3Conf* >(object);
  (void)_this;
}
void DeviceSnmpV3Conf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceSnmpV3Conf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceSnmpV3Conf& DeviceSnmpV3Conf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceSnmpV3Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceSnmpV3Conf::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authentication_protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authentication_passphrase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  privacy_protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  privacy_passphrase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceSnmpV3Conf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1[json_name = "username", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceSnmpV3Conf.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string authentication_protocol = 2[json_name = "authenticationProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_authentication_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string authentication_passphrase = 3[json_name = "authenticationPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_authentication_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string privacy_protocol = 4[json_name = "privacyProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_privacy_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string privacy_passphrase = 5[json_name = "privacyPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_privacy_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceSnmpV3Conf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1[json_name = "username", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceSnmpV3Conf.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string authentication_protocol = 2[json_name = "authenticationProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->authentication_protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authentication_protocol().data(), static_cast<int>(this->_internal_authentication_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_authentication_protocol(), target);
  }

  // string authentication_passphrase = 3[json_name = "authenticationPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->authentication_passphrase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authentication_passphrase().data(), static_cast<int>(this->_internal_authentication_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_authentication_passphrase(), target);
  }

  // string privacy_protocol = 4[json_name = "privacyProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->privacy_protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_privacy_protocol().data(), static_cast<int>(this->_internal_privacy_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_privacy_protocol(), target);
  }

  // string privacy_passphrase = 5[json_name = "privacyPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->privacy_passphrase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_privacy_passphrase().data(), static_cast<int>(this->_internal_privacy_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_privacy_passphrase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  return target;
}

size_t DeviceSnmpV3Conf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1[json_name = "username", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string authentication_protocol = 2[json_name = "authenticationProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->authentication_protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authentication_protocol());
  }

  // string authentication_passphrase = 3[json_name = "authenticationPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->authentication_passphrase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authentication_passphrase());
  }

  // string privacy_protocol = 4[json_name = "privacyProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->privacy_protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_privacy_protocol());
  }

  // string privacy_passphrase = 5[json_name = "privacyPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->privacy_passphrase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_privacy_passphrase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSnmpV3Conf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSnmpV3Conf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceSnmpV3Conf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeviceSnmpV3Conf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeviceSnmpV3Conf)
    MergeFrom(*source);
  }
}

void DeviceSnmpV3Conf::MergeFrom(const DeviceSnmpV3Conf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.authentication_protocol().size() > 0) {
    _internal_set_authentication_protocol(from._internal_authentication_protocol());
  }
  if (from.authentication_passphrase().size() > 0) {
    _internal_set_authentication_passphrase(from._internal_authentication_passphrase());
  }
  if (from.privacy_protocol().size() > 0) {
    _internal_set_privacy_protocol(from._internal_privacy_protocol());
  }
  if (from.privacy_passphrase().size() > 0) {
    _internal_set_privacy_passphrase(from._internal_privacy_passphrase());
  }
}

void DeviceSnmpV3Conf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSnmpV3Conf::CopyFrom(const DeviceSnmpV3Conf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeviceSnmpV3Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSnmpV3Conf::IsInitialized() const {
  return true;
}

void DeviceSnmpV3Conf::InternalSwap(DeviceSnmpV3Conf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authentication_protocol_.Swap(&other->authentication_protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authentication_passphrase_.Swap(&other->authentication_passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  privacy_protocol_.Swap(&other->privacy_protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  privacy_passphrase_.Swap(&other->privacy_passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceSnmpV3Conf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceNmsConfig::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_DeviceNmsConfig_default_instance_._instance.get_mutable()->snmp_ = const_cast< ::kentik::device::v202308beta1::DeviceNmsSnmpConfig*>(
      ::kentik::device::v202308beta1::DeviceNmsSnmpConfig::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceNmsConfig_default_instance_._instance.get_mutable()->st_ = const_cast< ::kentik::device::v202308beta1::DeviceNmsStConfig*>(
      ::kentik::device::v202308beta1::DeviceNmsStConfig::internal_default_instance());
}
class DeviceNmsConfig::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig& snmp(const DeviceNmsConfig* msg);
  static const ::kentik::device::v202308beta1::DeviceNmsStConfig& st(const DeviceNmsConfig* msg);
};

const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig&
DeviceNmsConfig::_Internal::snmp(const DeviceNmsConfig* msg) {
  return *msg->snmp_;
}
const ::kentik::device::v202308beta1::DeviceNmsStConfig&
DeviceNmsConfig::_Internal::st(const DeviceNmsConfig* msg) {
  return *msg->st_;
}
DeviceNmsConfig::DeviceNmsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeviceNmsConfig)
}
DeviceNmsConfig::DeviceNmsConfig(const DeviceNmsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_id(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  if (from._internal_has_snmp()) {
    snmp_ = new ::kentik::device::v202308beta1::DeviceNmsSnmpConfig(*from.snmp_);
  } else {
    snmp_ = nullptr;
  }
  if (from._internal_has_st()) {
    st_ = new ::kentik::device::v202308beta1::DeviceNmsStConfig(*from.st_);
  } else {
    st_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeviceNmsConfig)
}

void DeviceNmsConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&snmp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_) -
      reinterpret_cast<char*>(&snmp_)) + sizeof(st_));
}

DeviceNmsConfig::~DeviceNmsConfig() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeviceNmsConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceNmsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete snmp_;
  if (this != internal_default_instance()) delete st_;
}

void DeviceNmsConfig::ArenaDtor(void* object) {
  DeviceNmsConfig* _this = reinterpret_cast< DeviceNmsConfig* >(object);
  (void)_this;
}
void DeviceNmsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNmsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNmsConfig& DeviceNmsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNmsConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceNmsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeviceNmsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && snmp_ != nullptr) {
    delete snmp_;
  }
  snmp_ = nullptr;
  if (GetArena() == nullptr && st_ != nullptr) {
    delete st_;
  }
  st_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceNmsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 2[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceNmsConfig.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 3[json_name = "ipAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceNmsConfig.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.DeviceNmsSnmpConfig snmp = 4[json_name = "snmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_snmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.DeviceNmsStConfig st = 5[json_name = "st", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_st(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNmsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeviceNmsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 2[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceNmsConfig.agent_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agent_id(), target);
  }

  // string ip_address = 3[json_name = "ipAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceNmsConfig.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  // .kentik.device.v202308beta1.DeviceNmsSnmpConfig snmp = 4[json_name = "snmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_snmp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::snmp(this), target, stream);
  }

  // .kentik.device.v202308beta1.DeviceNmsStConfig st = 5[json_name = "st", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_st()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::st(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeviceNmsConfig)
  return target;
}

size_t DeviceNmsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeviceNmsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 2[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string ip_address = 3[json_name = "ipAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .kentik.device.v202308beta1.DeviceNmsSnmpConfig snmp = 4[json_name = "snmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_snmp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snmp_);
  }

  // .kentik.device.v202308beta1.DeviceNmsStConfig st = 5[json_name = "st", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_st()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNmsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeviceNmsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceNmsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceNmsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeviceNmsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeviceNmsConfig)
    MergeFrom(*source);
  }
}

void DeviceNmsConfig::MergeFrom(const DeviceNmsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeviceNmsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.has_snmp()) {
    _internal_mutable_snmp()->::kentik::device::v202308beta1::DeviceNmsSnmpConfig::MergeFrom(from._internal_snmp());
  }
  if (from.has_st()) {
    _internal_mutable_st()->::kentik::device::v202308beta1::DeviceNmsStConfig::MergeFrom(from._internal_st());
  }
}

void DeviceNmsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeviceNmsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceNmsConfig::CopyFrom(const DeviceNmsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeviceNmsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNmsConfig::IsInitialized() const {
  return true;
}

void DeviceNmsConfig::InternalSwap(DeviceNmsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceNmsConfig, st_)
      + sizeof(DeviceNmsConfig::st_)
      - PROTOBUF_FIELD_OFFSET(DeviceNmsConfig, snmp_)>(
          reinterpret_cast<char*>(&snmp_),
          reinterpret_cast<char*>(&other->snmp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceNmsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceNmsSnmpConfig::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_DeviceNmsSnmpConfig_default_instance_._instance.get_mutable()->timeout_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class DeviceNmsSnmpConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& timeout(const DeviceNmsSnmpConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
DeviceNmsSnmpConfig::_Internal::timeout(const DeviceNmsSnmpConfig* msg) {
  return *msg->timeout_;
}
void DeviceNmsSnmpConfig::clear_timeout() {
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
DeviceNmsSnmpConfig::DeviceNmsSnmpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
}
DeviceNmsSnmpConfig::DeviceNmsSnmpConfig(const DeviceNmsSnmpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_credential_name().empty()) {
    credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_credential_name(),
      GetArena());
  }
  if (from._internal_has_timeout()) {
    timeout_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
}

void DeviceNmsSnmpConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
}

DeviceNmsSnmpConfig::~DeviceNmsSnmpConfig() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceNmsSnmpConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  credential_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_;
}

void DeviceNmsSnmpConfig::ArenaDtor(void* object) {
  DeviceNmsSnmpConfig* _this = reinterpret_cast< DeviceNmsSnmpConfig* >(object);
  (void)_this;
}
void DeviceNmsSnmpConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNmsSnmpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNmsSnmpConfig& DeviceNmsSnmpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNmsSnmpConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceNmsSnmpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceNmsSnmpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_credential_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNmsSnmpConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->credential_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential_name().data(), static_cast<int>(this->_internal_credential_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_credential_name(), target);
  }

  // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  return target;
}

size_t DeviceNmsSnmpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->credential_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential_name());
  }

  // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNmsSnmpConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceNmsSnmpConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceNmsSnmpConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
    MergeFrom(*source);
  }
}

void DeviceNmsSnmpConfig::MergeFrom(const DeviceNmsSnmpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.credential_name().size() > 0) {
    _internal_set_credential_name(from._internal_credential_name());
  }
  if (from.has_timeout()) {
    _internal_mutable_timeout()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DeviceNmsSnmpConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceNmsSnmpConfig::CopyFrom(const DeviceNmsSnmpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNmsSnmpConfig::IsInitialized() const {
  return true;
}

void DeviceNmsSnmpConfig::InternalSwap(DeviceNmsSnmpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  credential_name_.Swap(&other->credential_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceNmsSnmpConfig, port_)
      + sizeof(DeviceNmsSnmpConfig::port_)
      - PROTOBUF_FIELD_OFFSET(DeviceNmsSnmpConfig, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceNmsSnmpConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceNmsStConfig::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_DeviceNmsStConfig_default_instance_._instance.get_mutable()->timeout_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class DeviceNmsStConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& timeout(const DeviceNmsStConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
DeviceNmsStConfig::_Internal::timeout(const DeviceNmsStConfig* msg) {
  return *msg->timeout_;
}
void DeviceNmsStConfig::clear_timeout() {
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
DeviceNmsStConfig::DeviceNmsStConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeviceNmsStConfig)
}
DeviceNmsStConfig::DeviceNmsStConfig(const DeviceNmsStConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_credential_name().empty()) {
    credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_credential_name(),
      GetArena());
  }
  if (from._internal_has_timeout()) {
    timeout_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&secure_) -
    reinterpret_cast<char*>(&port_)) + sizeof(secure_));
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeviceNmsStConfig)
}

void DeviceNmsStConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secure_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(secure_));
}

DeviceNmsStConfig::~DeviceNmsStConfig() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeviceNmsStConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceNmsStConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  credential_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_;
}

void DeviceNmsStConfig::ArenaDtor(void* object) {
  DeviceNmsStConfig* _this = reinterpret_cast< DeviceNmsStConfig* >(object);
  (void)_this;
}
void DeviceNmsStConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNmsStConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNmsStConfig& DeviceNmsStConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNmsStConfig_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceNmsStConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secure_) -
      reinterpret_cast<char*>(&port_)) + sizeof(secure_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceNmsStConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_credential_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceNmsStConfig.credential_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool secure = 4[json_name = "secure", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNmsStConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->credential_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential_name().data(), static_cast<int>(this->_internal_credential_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceNmsStConfig.credential_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_credential_name(), target);
  }

  // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timeout(this), target, stream);
  }

  // bool secure = 4[json_name = "secure", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->secure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_secure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeviceNmsStConfig)
  return target;
}

size_t DeviceNmsStConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->credential_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential_name());
  }

  // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // bool secure = 4[json_name = "secure", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->secure() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNmsStConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceNmsStConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceNmsStConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeviceNmsStConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeviceNmsStConfig)
    MergeFrom(*source);
  }
}

void DeviceNmsStConfig::MergeFrom(const DeviceNmsStConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.credential_name().size() > 0) {
    _internal_set_credential_name(from._internal_credential_name());
  }
  if (from.has_timeout()) {
    _internal_mutable_timeout()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.secure() != 0) {
    _internal_set_secure(from._internal_secure());
  }
}

void DeviceNmsStConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceNmsStConfig::CopyFrom(const DeviceNmsStConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeviceNmsStConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNmsStConfig::IsInitialized() const {
  return true;
}

void DeviceNmsStConfig::InternalSwap(DeviceNmsStConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  credential_name_.Swap(&other->credential_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceNmsStConfig, secure_)
      + sizeof(DeviceNmsStConfig::secure_)
      - PROTOBUF_FIELD_OFFSET(DeviceNmsStConfig, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceNmsStConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceConcise::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_DeviceConcise_default_instance_._instance.get_mutable()->device_snmp_v3_conf_ = const_cast< ::kentik::device::v202308beta1::DeviceSnmpV3Conf*>(
      ::kentik::device::v202308beta1::DeviceSnmpV3Conf::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceConcise_default_instance_._instance.get_mutable()->nms_ = const_cast< ::kentik::device::v202308beta1::DeviceNmsConfig*>(
      ::kentik::device::v202308beta1::DeviceNmsConfig::internal_default_instance());
}
class DeviceConcise::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceConcise>()._has_bits_);
  static void set_has_minimize_snmp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& device_snmp_v3_conf(const DeviceConcise* msg);
  static const ::kentik::device::v202308beta1::DeviceNmsConfig& nms(const DeviceConcise* msg);
};

const ::kentik::device::v202308beta1::DeviceSnmpV3Conf&
DeviceConcise::_Internal::device_snmp_v3_conf(const DeviceConcise* msg) {
  return *msg->device_snmp_v3_conf_;
}
const ::kentik::device::v202308beta1::DeviceNmsConfig&
DeviceConcise::_Internal::nms(const DeviceConcise* msg) {
  return *msg->nms_;
}
DeviceConcise::DeviceConcise(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sending_ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeviceConcise)
}
DeviceConcise::DeviceConcise(const DeviceConcise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sending_ips_(from.sending_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  device_subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_subtype().empty()) {
    device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_subtype(),
      GetArena());
  }
  cdn_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cdn_attr().empty()) {
    cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cdn_attr(),
      GetArena());
  }
  device_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_description().empty()) {
    device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_description(),
      GetArena());
  }
  device_snmp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_snmp_ip().empty()) {
    device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_snmp_ip(),
      GetArena());
  }
  device_snmp_community_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_snmp_community().empty()) {
    device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_snmp_community(),
      GetArena());
  }
  device_bgp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_type().empty()) {
    device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_type(),
      GetArena());
  }
  device_bgp_neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_neighbor_ip().empty()) {
    device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_neighbor_ip(),
      GetArena());
  }
  device_bgp_neighbor_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_neighbor_ip6().empty()) {
    device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_neighbor_ip6(),
      GetArena());
  }
  device_bgp_neighbor_asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_neighbor_asn().empty()) {
    device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_neighbor_asn(),
      GetArena());
  }
  device_bgp_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_password().empty()) {
    device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_password(),
      GetArena());
  }
  device_bgp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_credential_name().empty()) {
    device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_credential_name(),
      GetArena());
  }
  flow_snmp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_snmp_credential_name().empty()) {
    flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flow_snmp_credential_name(),
      GetArena());
  }
  if (from._internal_has_device_snmp_v3_conf()) {
    device_snmp_v3_conf_ = new ::kentik::device::v202308beta1::DeviceSnmpV3Conf(*from.device_snmp_v3_conf_);
  } else {
    device_snmp_v3_conf_ = nullptr;
  }
  if (from._internal_has_nms()) {
    nms_ = new ::kentik::device::v202308beta1::DeviceNmsConfig(*from.nms_);
  } else {
    nms_ = nullptr;
  }
  ::memcpy(&device_sample_rate_, &from.device_sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&monitoring_template_id_) -
    reinterpret_cast<char*>(&device_sample_rate_)) + sizeof(monitoring_template_id_));
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeviceConcise)
}

void DeviceConcise::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_community_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_snmp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_snmp_v3_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitoring_template_id_) -
      reinterpret_cast<char*>(&device_snmp_v3_conf_)) + sizeof(monitoring_template_id_));
}

DeviceConcise::~DeviceConcise() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeviceConcise)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceConcise::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_community_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_asn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_credential_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_snmp_credential_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_snmp_v3_conf_;
  if (this != internal_default_instance()) delete nms_;
}

void DeviceConcise::ArenaDtor(void* object) {
  DeviceConcise* _this = reinterpret_cast< DeviceConcise* >(object);
  (void)_this;
}
void DeviceConcise::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceConcise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceConcise& DeviceConcise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceConcise::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeviceConcise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sending_ips_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_subtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cdn_attr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_community_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flow_snmp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && device_snmp_v3_conf_ != nullptr) {
    delete device_snmp_v3_conf_;
  }
  device_snmp_v3_conf_ = nullptr;
  if (GetArena() == nullptr && nms_ != nullptr) {
    delete nms_;
  }
  nms_ = nullptr;
  ::memset(&device_sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_id_) -
      reinterpret_cast<char*>(&device_sample_rate_)) + sizeof(site_id_));
  minimize_snmp_ = false;
  ::memset(&device_bgp_flowspec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitoring_template_id_) -
      reinterpret_cast<char*>(&device_bgp_flowspec_)) + sizeof(monitoring_template_id_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConcise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_subtype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cdn_attr = 4[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cdn_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.cdn_attr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_description = 5[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string sending_ips = 6[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sending_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.sending_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // double device_sample_rate = 7[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          device_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 plan_id = 8[json_name = "planId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          plan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 site_id = 9[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          site_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool minimize_snmp = 10[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_minimize_snmp(&has_bits);
          minimize_snmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_snmp_ip = 11[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_device_snmp_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_snmp_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_snmp_community = 12[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_device_snmp_community();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_snmp_community"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 13[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_snmp_v3_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_type = 14[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_device_bgp_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_bgp_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_neighbor_ip = 15[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_device_bgp_neighbor_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_neighbor_ip6 = 16[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_device_bgp_neighbor_ip6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_neighbor_asn = 17[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_device_bgp_neighbor_asn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_password = 18[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_device_bgp_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_bgp_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 use_bgp_device_id = 19[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          use_bgp_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool device_bgp_flowspec = 20[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          device_bgp_flowspec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.DeviceNmsConfig nms = 21[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_credential_name = 22[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_device_bgp_credential_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flow_snmp_credential_name = 23[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_flow_snmp_credential_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 monitoring_template_id = 24[json_name = "monitoringTemplateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          monitoring_template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceConcise::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeviceConcise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  // string device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_subtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_subtype().data(), static_cast<int>(this->_internal_device_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_subtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_subtype(), target);
  }

  // string cdn_attr = 4[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cdn_attr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cdn_attr().data(), static_cast<int>(this->_internal_cdn_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.cdn_attr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cdn_attr(), target);
  }

  // string device_description = 5[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_description().data(), static_cast<int>(this->_internal_device_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_description(), target);
  }

  // repeated string sending_ips = 6[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_sending_ips_size(); i < n; i++) {
    const auto& s = this->_internal_sending_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.sending_ips");
    target = stream->WriteString(6, s, target);
  }

  // double device_sample_rate = 7[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->device_sample_rate() <= 0 && this->device_sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_device_sample_rate(), target);
  }

  // uint32 plan_id = 8[json_name = "planId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->plan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_plan_id(), target);
  }

  // uint32 site_id = 9[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_site_id(), target);
  }

  // bool minimize_snmp = 10[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_minimize_snmp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_minimize_snmp(), target);
  }

  // string device_snmp_ip = 11[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_snmp_ip().data(), static_cast<int>(this->_internal_device_snmp_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_snmp_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_device_snmp_ip(), target);
  }

  // string device_snmp_community = 12[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_community().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_snmp_community().data(), static_cast<int>(this->_internal_device_snmp_community().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_snmp_community");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_device_snmp_community(), target);
  }

  // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 13[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device_snmp_v3_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::device_snmp_v3_conf(this), target, stream);
  }

  // string device_bgp_type = 14[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_type().data(), static_cast<int>(this->_internal_device_bgp_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_bgp_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_device_bgp_type(), target);
  }

  // string device_bgp_neighbor_ip = 15[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_neighbor_ip().data(), static_cast<int>(this->_internal_device_bgp_neighbor_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_device_bgp_neighbor_ip(), target);
  }

  // string device_bgp_neighbor_ip6 = 16[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_neighbor_ip6().data(), static_cast<int>(this->_internal_device_bgp_neighbor_ip6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_device_bgp_neighbor_ip6(), target);
  }

  // string device_bgp_neighbor_asn = 17[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_asn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_neighbor_asn().data(), static_cast<int>(this->_internal_device_bgp_neighbor_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_device_bgp_neighbor_asn(), target);
  }

  // string device_bgp_password = 18[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_password().data(), static_cast<int>(this->_internal_device_bgp_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_bgp_password");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_device_bgp_password(), target);
  }

  // uint32 use_bgp_device_id = 19[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_bgp_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_use_bgp_device_id(), target);
  }

  // bool device_bgp_flowspec = 20[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_flowspec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_device_bgp_flowspec(), target);
  }

  // .kentik.device.v202308beta1.DeviceNmsConfig nms = 21[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_nms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::nms(this), target, stream);
  }

  // string device_bgp_credential_name = 22[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_credential_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_credential_name().data(), static_cast<int>(this->_internal_device_bgp_credential_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_device_bgp_credential_name(), target);
  }

  // string flow_snmp_credential_name = 23[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->flow_snmp_credential_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_snmp_credential_name().data(), static_cast<int>(this->_internal_flow_snmp_credential_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_flow_snmp_credential_name(), target);
  }

  // uint32 monitoring_template_id = 24[json_name = "monitoringTemplateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->monitoring_template_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_monitoring_template_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeviceConcise)
  return target;
}

size_t DeviceConcise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeviceConcise)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sending_ips = 6[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sending_ips_.size());
  for (int i = 0, n = sending_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sending_ips_.Get(i));
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // string device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_subtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_subtype());
  }

  // string cdn_attr = 4[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cdn_attr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cdn_attr());
  }

  // string device_description = 5[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_description());
  }

  // string device_snmp_ip = 11[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_snmp_ip());
  }

  // string device_snmp_community = 12[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_community().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_snmp_community());
  }

  // string device_bgp_type = 14[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_type());
  }

  // string device_bgp_neighbor_ip = 15[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_neighbor_ip());
  }

  // string device_bgp_neighbor_ip6 = 16[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip6().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_neighbor_ip6());
  }

  // string device_bgp_neighbor_asn = 17[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_asn().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_neighbor_asn());
  }

  // string device_bgp_password = 18[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_password().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_password());
  }

  // string device_bgp_credential_name = 22[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_credential_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_credential_name());
  }

  // string flow_snmp_credential_name = 23[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->flow_snmp_credential_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_snmp_credential_name());
  }

  // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 13[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device_snmp_v3_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_snmp_v3_conf_);
  }

  // .kentik.device.v202308beta1.DeviceNmsConfig nms = 21[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_nms()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nms_);
  }

  // double device_sample_rate = 7[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->device_sample_rate() <= 0 && this->device_sample_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 plan_id = 8[json_name = "planId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->plan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plan_id());
  }

  // uint32 site_id = 9[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_site_id());
  }

  // bool minimize_snmp = 10[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  // bool device_bgp_flowspec = 20[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_flowspec() != 0) {
    total_size += 2 + 1;
  }

  // uint32 use_bgp_device_id = 19[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_bgp_device_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_use_bgp_device_id());
  }

  // uint32 monitoring_template_id = 24[json_name = "monitoringTemplateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->monitoring_template_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monitoring_template_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConcise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeviceConcise)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceConcise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceConcise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeviceConcise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeviceConcise)
    MergeFrom(*source);
  }
}

void DeviceConcise::MergeFrom(const DeviceConcise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeviceConcise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sending_ips_.MergeFrom(from.sending_ips_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.device_subtype().size() > 0) {
    _internal_set_device_subtype(from._internal_device_subtype());
  }
  if (from.cdn_attr().size() > 0) {
    _internal_set_cdn_attr(from._internal_cdn_attr());
  }
  if (from.device_description().size() > 0) {
    _internal_set_device_description(from._internal_device_description());
  }
  if (from.device_snmp_ip().size() > 0) {
    _internal_set_device_snmp_ip(from._internal_device_snmp_ip());
  }
  if (from.device_snmp_community().size() > 0) {
    _internal_set_device_snmp_community(from._internal_device_snmp_community());
  }
  if (from.device_bgp_type().size() > 0) {
    _internal_set_device_bgp_type(from._internal_device_bgp_type());
  }
  if (from.device_bgp_neighbor_ip().size() > 0) {
    _internal_set_device_bgp_neighbor_ip(from._internal_device_bgp_neighbor_ip());
  }
  if (from.device_bgp_neighbor_ip6().size() > 0) {
    _internal_set_device_bgp_neighbor_ip6(from._internal_device_bgp_neighbor_ip6());
  }
  if (from.device_bgp_neighbor_asn().size() > 0) {
    _internal_set_device_bgp_neighbor_asn(from._internal_device_bgp_neighbor_asn());
  }
  if (from.device_bgp_password().size() > 0) {
    _internal_set_device_bgp_password(from._internal_device_bgp_password());
  }
  if (from.device_bgp_credential_name().size() > 0) {
    _internal_set_device_bgp_credential_name(from._internal_device_bgp_credential_name());
  }
  if (from.flow_snmp_credential_name().size() > 0) {
    _internal_set_flow_snmp_credential_name(from._internal_flow_snmp_credential_name());
  }
  if (from.has_device_snmp_v3_conf()) {
    _internal_mutable_device_snmp_v3_conf()->::kentik::device::v202308beta1::DeviceSnmpV3Conf::MergeFrom(from._internal_device_snmp_v3_conf());
  }
  if (from.has_nms()) {
    _internal_mutable_nms()->::kentik::device::v202308beta1::DeviceNmsConfig::MergeFrom(from._internal_nms());
  }
  if (!(from.device_sample_rate() <= 0 && from.device_sample_rate() >= 0)) {
    _internal_set_device_sample_rate(from._internal_device_sample_rate());
  }
  if (from.plan_id() != 0) {
    _internal_set_plan_id(from._internal_plan_id());
  }
  if (from.site_id() != 0) {
    _internal_set_site_id(from._internal_site_id());
  }
  if (from._internal_has_minimize_snmp()) {
    _internal_set_minimize_snmp(from._internal_minimize_snmp());
  }
  if (from.device_bgp_flowspec() != 0) {
    _internal_set_device_bgp_flowspec(from._internal_device_bgp_flowspec());
  }
  if (from.use_bgp_device_id() != 0) {
    _internal_set_use_bgp_device_id(from._internal_use_bgp_device_id());
  }
  if (from.monitoring_template_id() != 0) {
    _internal_set_monitoring_template_id(from._internal_monitoring_template_id());
  }
}

void DeviceConcise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeviceConcise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConcise::CopyFrom(const DeviceConcise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeviceConcise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConcise::IsInitialized() const {
  return true;
}

void DeviceConcise::InternalSwap(DeviceConcise* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sending_ips_.InternalSwap(&other->sending_ips_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_subtype_.Swap(&other->device_subtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cdn_attr_.Swap(&other->cdn_attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_description_.Swap(&other->device_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_ip_.Swap(&other->device_snmp_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_community_.Swap(&other->device_snmp_community_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_type_.Swap(&other->device_bgp_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip_.Swap(&other->device_bgp_neighbor_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip6_.Swap(&other->device_bgp_neighbor_ip6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_asn_.Swap(&other->device_bgp_neighbor_asn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_password_.Swap(&other->device_bgp_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_credential_name_.Swap(&other->device_bgp_credential_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flow_snmp_credential_name_.Swap(&other->flow_snmp_credential_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConcise, monitoring_template_id_)
      + sizeof(DeviceConcise::monitoring_template_id_)
      - PROTOBUF_FIELD_OFFSET(DeviceConcise, device_snmp_v3_conf_)>(
          reinterpret_cast<char*>(&device_snmp_v3_conf_),
          reinterpret_cast<char*>(&other->device_snmp_v3_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConcise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Site::InitAsDefaultInstance() {
}
class Site::_Internal {
 public:
};

Site::Site(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.Site)
}
Site::Site(const Site& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_name().empty()) {
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_name(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.Site)
}

void Site::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.Site)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Site::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Site::ArenaDtor(void* object) {
  Site* _this = reinterpret_cast< Site* >(object);
  (void)_this;
}
void Site::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Site::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Site& Site::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Site_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void Site::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.Site)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Site::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Site.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Site.site_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 3[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 4[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string company_id = 5[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Site.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Site::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.Site)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Site.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_name().data(), static_cast<int>(this->_internal_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Site.site_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_site_name(), target);
  }

  // double lat = 3[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lat(), target);
  }

  // double lon = 4[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lon(), target);
  }

  // string company_id = 5[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Site.company_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.Site)
  return target;
}

size_t Site::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.Site)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_name());
  }

  // string company_id = 5[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // double lat = 3[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 4[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Site::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.Site)
  GOOGLE_DCHECK_NE(&from, this);
  const Site* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Site>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.Site)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.Site)
    MergeFrom(*source);
  }
}

void Site::MergeFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.Site)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.site_name().size() > 0) {
    _internal_set_site_name(from._internal_site_name());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
}

void Site::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Site::CopyFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {
  return true;
}

void Site::InternalSwap(Site* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_name_.Swap(&other->site_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Site, lon_)
      + sizeof(Site::lon_)
      - PROTOBUF_FIELD_OFFSET(Site, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Site::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plan::InitAsDefaultInstance() {
}
class Plan::_Internal {
 public:
};

Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.Plan)
}

void Plan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.Plan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Plan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Plan::ArenaDtor(void* object) {
  Plan* _this = reinterpret_cast< Plan* >(object);
  (void)_this;
}
void Plan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plan& Plan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plan_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Plan.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Plan.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Plan.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Plan.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.Plan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  const Plan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.Plan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.Plan)
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Plan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Label::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_Label_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::device::v202308beta1::_Label_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Label::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const Label* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const Label* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Label::_Internal::edate(const Label* msg) {
  return *msg->edate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Label::_Internal::cdate(const Label* msg) {
  return *msg->cdate_;
}
void Label::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
void Label::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_color(),
      GetArena());
  }
  order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order().empty()) {
    order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order(),
      GetArena());
  }
  pivot_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_device_id().empty()) {
    pivot_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_device_id(),
      GetArena());
  }
  pivot_label_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_label_id().empty()) {
    pivot_label_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_label_id(),
      GetArena());
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.Label)
}

void Label::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_label_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&edate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdate_) -
      reinterpret_cast<char*>(&edate_)) + sizeof(cdate_));
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.Label)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_label_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete edate_;
  if (this != internal_default_instance()) delete cdate_;
}

void Label::ArenaDtor(void* object) {
  Label* _this = reinterpret_cast< Label* >(object);
  (void)_this;
}
void Label::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label& Label::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_label_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 4[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 6[json_name = "userId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_id = 7[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 8[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order = 9[json_name = "order", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_device_id = 10[json_name = "pivotDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pivot_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.pivot_device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_label_id = 11[json_name = "pivotLabelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_pivot_label_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Label.pivot_label_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Label::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp edate = 4[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::edate(this), target, stream);
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cdate(this), target, stream);
  }

  // string user_id = 6[json_name = "userId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id(), target);
  }

  // string company_id = 7[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.company_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_company_id(), target);
  }

  // string color = 8[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.color");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_color(), target);
  }

  // string order = 9[json_name = "order", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->order().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order().data(), static_cast<int>(this->_internal_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.order");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_order(), target);
  }

  // string pivot_device_id = 10[json_name = "pivotDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->pivot_device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_device_id().data(), static_cast<int>(this->_internal_pivot_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.pivot_device_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pivot_device_id(), target);
  }

  // string pivot_label_id = 11[json_name = "pivotLabelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->pivot_label_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_label_id().data(), static_cast<int>(this->_internal_pivot_label_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Label.pivot_label_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_pivot_label_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.Label)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string user_id = 6[json_name = "userId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string company_id = 7[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // string color = 8[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // string order = 9[json_name = "order", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->order().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order());
  }

  // string pivot_device_id = 10[json_name = "pivotDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->pivot_device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_device_id());
  }

  // string pivot_label_id = 11[json_name = "pivotLabelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->pivot_label_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_label_id());
  }

  // .google.protobuf.Timestamp edate = 4[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.Label)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.color().size() > 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.order().size() > 0) {
    _internal_set_order(from._internal_order());
  }
  if (from.pivot_device_id().size() > 0) {
    _internal_set_pivot_device_id(from._internal_pivot_device_id());
  }
  if (from.pivot_label_id().size() > 0) {
    _internal_set_pivot_label_id(from._internal_pivot_label_id());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
}

void Label::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_.Swap(&other->order_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_device_id_.Swap(&other->pivot_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_label_id_.Swap(&other->pivot_label_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Label, cdate_)
      + sizeof(Label::cdate_)
      - PROTOBUF_FIELD_OFFSET(Label, edate_)>(
          reinterpret_cast<char*>(&edate_),
          reinterpret_cast<char*>(&other->edate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Interface::InitAsDefaultInstance() {
}
class Interface::_Internal {
 public:
};

Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_description().empty()) {
    interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_description(),
      GetArena());
  }
  initial_snmp_speed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_snmp_speed().empty()) {
    initial_snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_initial_snmp_speed(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  snmp_speed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_speed().empty()) {
    snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_speed(),
      GetArena());
  }
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_alias().empty()) {
    snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_alias(),
      GetArena());
  }
  snmp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_id().empty()) {
    snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_id(),
      GetArena());
  }
  connectivity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connectivity_type().empty()) {
    connectivity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_connectivity_type(),
      GetArena());
  }
  network_boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_boundary().empty()) {
    network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_network_boundary(),
      GetArena());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_provider(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.Interface)
}

void Interface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  interface_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_snmp_speed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_speed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectivity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_boundary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.Interface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interface_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_snmp_speed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_speed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectivity_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_boundary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Interface::ArenaDtor(void* object) {
  Interface* _this = reinterpret_cast< Interface* >(object);
  (void)_this;
}
void Interface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Interface& Interface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Interface_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.Interface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initial_snmp_speed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_speed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connectivity_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_boundary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interface_description = 1[json_name = "interfaceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interface_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.interface_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_snmp_speed = 2[json_name = "initialSnmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_initial_snmp_speed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.initial_snmp_speed"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 3[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_speed = 4[json_name = "snmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_snmp_speed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.snmp_speed"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_alias = 5[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_snmp_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.snmp_alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_id = 6[json_name = "snmpId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_snmp_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.snmp_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string connectivity_type = 7[json_name = "connectivityType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_connectivity_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.connectivity_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network_boundary = 8[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_network_boundary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.network_boundary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 9[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.Interface.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Interface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.Interface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interface_description = 1[json_name = "interfaceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->interface_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_description().data(), static_cast<int>(this->_internal_interface_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.interface_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_description(), target);
  }

  // string initial_snmp_speed = 2[json_name = "initialSnmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->initial_snmp_speed().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_snmp_speed().data(), static_cast<int>(this->_internal_initial_snmp_speed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.initial_snmp_speed");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_initial_snmp_speed(), target);
  }

  // string device_id = 3[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  // string snmp_speed = 4[json_name = "snmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_speed().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_speed().data(), static_cast<int>(this->_internal_snmp_speed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.snmp_speed");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_snmp_speed(), target);
  }

  // string snmp_alias = 5[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_alias().data(), static_cast<int>(this->_internal_snmp_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.snmp_alias");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_snmp_alias(), target);
  }

  // string snmp_id = 6[json_name = "snmpId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_id().data(), static_cast<int>(this->_internal_snmp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.snmp_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_snmp_id(), target);
  }

  // string connectivity_type = 7[json_name = "connectivityType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->connectivity_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectivity_type().data(), static_cast<int>(this->_internal_connectivity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.connectivity_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_connectivity_type(), target);
  }

  // string network_boundary = 8[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->network_boundary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_boundary().data(), static_cast<int>(this->_internal_network_boundary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.network_boundary");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_network_boundary(), target);
  }

  // string provider = 9[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.Interface.provider");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.Interface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_description = 1[json_name = "interfaceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->interface_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_description());
  }

  // string initial_snmp_speed = 2[json_name = "initialSnmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->initial_snmp_speed().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_snmp_speed());
  }

  // string device_id = 3[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string snmp_speed = 4[json_name = "snmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_speed().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_speed());
  }

  // string snmp_alias = 5[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_alias());
  }

  // string snmp_id = 6[json_name = "snmpId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_id());
  }

  // string connectivity_type = 7[json_name = "connectivityType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->connectivity_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectivity_type());
  }

  // string network_boundary = 8[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->network_boundary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_boundary());
  }

  // string provider = 9[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Interface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  const Interface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Interface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.Interface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.Interface)
    MergeFrom(*source);
  }
}

void Interface::MergeFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface_description().size() > 0) {
    _internal_set_interface_description(from._internal_interface_description());
  }
  if (from.initial_snmp_speed().size() > 0) {
    _internal_set_initial_snmp_speed(from._internal_initial_snmp_speed());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.snmp_speed().size() > 0) {
    _internal_set_snmp_speed(from._internal_snmp_speed());
  }
  if (from.snmp_alias().size() > 0) {
    _internal_set_snmp_alias(from._internal_snmp_alias());
  }
  if (from.snmp_id().size() > 0) {
    _internal_set_snmp_id(from._internal_snmp_id());
  }
  if (from.connectivity_type().size() > 0) {
    _internal_set_connectivity_type(from._internal_connectivity_type());
  }
  if (from.network_boundary().size() > 0) {
    _internal_set_network_boundary(from._internal_network_boundary());
  }
  if (from.provider().size() > 0) {
    _internal_set_provider(from._internal_provider());
  }
}

void Interface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interface_description_.Swap(&other->interface_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initial_snmp_speed_.Swap(&other->initial_snmp_speed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_speed_.Swap(&other->snmp_speed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.Swap(&other->snmp_alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_id_.Swap(&other->snmp_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connectivity_type_.Swap(&other->connectivity_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_boundary_.Swap(&other->network_boundary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomColumnData::InitAsDefaultInstance() {
}
class CustomColumnData::_Internal {
 public:
};

CustomColumnData::CustomColumnData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.CustomColumnData)
}
CustomColumnData::CustomColumnData(const CustomColumnData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  field_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_id().empty()) {
    field_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field_id(),
      GetArena());
  }
  col_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_col_name().empty()) {
    col_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_col_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  col_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_col_type().empty()) {
    col_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_col_type(),
      GetArena());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.CustomColumnData)
}

void CustomColumnData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomColumnData::~CustomColumnData() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.CustomColumnData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomColumnData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomColumnData::ArenaDtor(void* object) {
  CustomColumnData* _this = reinterpret_cast< CustomColumnData* >(object);
  (void)_this;
}
void CustomColumnData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomColumnData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomColumnData& CustomColumnData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomColumnData_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CustomColumnData::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.CustomColumnData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  col_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  col_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomColumnData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CustomColumnData.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_id = 2[json_name = "fieldId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CustomColumnData.field_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string col_name = 3[json_name = "colName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_col_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CustomColumnData.col_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CustomColumnData.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string col_type = 5[json_name = "colType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_col_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CustomColumnData.col_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 6[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CustomColumnData.device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomColumnData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.CustomColumnData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CustomColumnData.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string field_id = 2[json_name = "fieldId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->field_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_id().data(), static_cast<int>(this->_internal_field_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CustomColumnData.field_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_id(), target);
  }

  // string col_name = 3[json_name = "colName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->col_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CustomColumnData.col_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_col_name(), target);
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CustomColumnData.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string col_type = 5[json_name = "colType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->col_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_type().data(), static_cast<int>(this->_internal_col_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CustomColumnData.col_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_col_type(), target);
  }

  // string device_type = 6[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CustomColumnData.device_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.CustomColumnData)
  return target;
}

size_t CustomColumnData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.CustomColumnData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string field_id = 2[json_name = "fieldId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->field_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_id());
  }

  // string col_name = 3[json_name = "colName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->col_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string col_type = 5[json_name = "colType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->col_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_type());
  }

  // string device_type = 6[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomColumnData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.CustomColumnData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomColumnData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomColumnData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.CustomColumnData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.CustomColumnData)
    MergeFrom(*source);
  }
}

void CustomColumnData::MergeFrom(const CustomColumnData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.CustomColumnData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.field_id().size() > 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  if (from.col_name().size() > 0) {
    _internal_set_col_name(from._internal_col_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.col_type().size() > 0) {
    _internal_set_col_type(from._internal_col_type());
  }
  if (from.device_type().size() > 0) {
    _internal_set_device_type(from._internal_device_type());
  }
}

void CustomColumnData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.CustomColumnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomColumnData::CopyFrom(const CustomColumnData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.CustomColumnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomColumnData::IsInitialized() const {
  return true;
}

void CustomColumnData::InternalSwap(CustomColumnData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_id_.Swap(&other->field_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  col_name_.Swap(&other->col_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  col_type_.Swap(&other->col_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomColumnData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnmiV1Conf::InitAsDefaultInstance() {
}
class GnmiV1Conf::_Internal {
 public:
};

GnmiV1Conf::GnmiV1Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.GnmiV1Conf)
}
GnmiV1Conf::GnmiV1Conf(const GnmiV1Conf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dialout_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dialout_server().empty()) {
    dialout_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dialout_server(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.GnmiV1Conf)
}

void GnmiV1Conf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  dialout_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GnmiV1Conf::~GnmiV1Conf() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.GnmiV1Conf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnmiV1Conf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dialout_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GnmiV1Conf::ArenaDtor(void* object) {
  GnmiV1Conf* _this = reinterpret_cast< GnmiV1Conf* >(object);
  (void)_this;
}
void GnmiV1Conf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnmiV1Conf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnmiV1Conf& GnmiV1Conf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnmiV1Conf_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GnmiV1Conf::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.GnmiV1Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dialout_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnmiV1Conf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dialout_server = 1[json_name = "dialoutServer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dialout_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.GnmiV1Conf.dialout_server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnmiV1Conf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.GnmiV1Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dialout_server = 1[json_name = "dialoutServer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dialout_server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dialout_server().data(), static_cast<int>(this->_internal_dialout_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.GnmiV1Conf.dialout_server");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dialout_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.GnmiV1Conf)
  return target;
}

size_t GnmiV1Conf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.GnmiV1Conf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dialout_server = 1[json_name = "dialoutServer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dialout_server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dialout_server());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnmiV1Conf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.GnmiV1Conf)
  GOOGLE_DCHECK_NE(&from, this);
  const GnmiV1Conf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnmiV1Conf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.GnmiV1Conf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.GnmiV1Conf)
    MergeFrom(*source);
  }
}

void GnmiV1Conf::MergeFrom(const GnmiV1Conf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.GnmiV1Conf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dialout_server().size() > 0) {
    _internal_set_dialout_server(from._internal_dialout_server());
  }
}

void GnmiV1Conf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.GnmiV1Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnmiV1Conf::CopyFrom(const GnmiV1Conf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.GnmiV1Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnmiV1Conf::IsInitialized() const {
  return true;
}

void GnmiV1Conf::InternalSwap(GnmiV1Conf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dialout_server_.Swap(&other->dialout_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GnmiV1Conf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceDetailed::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::device::v202308beta1::Site*>(
      ::kentik::device::v202308beta1::Site::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->plan_ = const_cast< ::kentik::device::v202308beta1::Plan*>(
      ::kentik::device::v202308beta1::Plan::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->created_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->updated_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->device_snmp_v3_conf_ = const_cast< ::kentik::device::v202308beta1::DeviceSnmpV3Conf*>(
      ::kentik::device::v202308beta1::DeviceSnmpV3Conf::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->device_gnmi_v1_conf_ = const_cast< ::kentik::device::v202308beta1::GnmiV1Conf*>(
      ::kentik::device::v202308beta1::GnmiV1Conf::internal_default_instance());
  ::kentik::device::v202308beta1::_DeviceDetailed_default_instance_._instance.get_mutable()->nms_ = const_cast< ::kentik::device::v202308beta1::DeviceNmsConfig*>(
      ::kentik::device::v202308beta1::DeviceNmsConfig::internal_default_instance());
}
class DeviceDetailed::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceDetailed>()._has_bits_);
  static const ::kentik::device::v202308beta1::Site& site(const DeviceDetailed* msg);
  static const ::kentik::device::v202308beta1::Plan& plan(const DeviceDetailed* msg);
  static void set_has_minimize_snmp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_date(const DeviceDetailed* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date(const DeviceDetailed* msg);
  static const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& device_snmp_v3_conf(const DeviceDetailed* msg);
  static const ::kentik::device::v202308beta1::GnmiV1Conf& device_gnmi_v1_conf(const DeviceDetailed* msg);
  static const ::kentik::device::v202308beta1::DeviceNmsConfig& nms(const DeviceDetailed* msg);
};

const ::kentik::device::v202308beta1::Site&
DeviceDetailed::_Internal::site(const DeviceDetailed* msg) {
  return *msg->site_;
}
const ::kentik::device::v202308beta1::Plan&
DeviceDetailed::_Internal::plan(const DeviceDetailed* msg) {
  return *msg->plan_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceDetailed::_Internal::created_date(const DeviceDetailed* msg) {
  return *msg->created_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceDetailed::_Internal::updated_date(const DeviceDetailed* msg) {
  return *msg->updated_date_;
}
const ::kentik::device::v202308beta1::DeviceSnmpV3Conf&
DeviceDetailed::_Internal::device_snmp_v3_conf(const DeviceDetailed* msg) {
  return *msg->device_snmp_v3_conf_;
}
const ::kentik::device::v202308beta1::GnmiV1Conf&
DeviceDetailed::_Internal::device_gnmi_v1_conf(const DeviceDetailed* msg) {
  return *msg->device_gnmi_v1_conf_;
}
const ::kentik::device::v202308beta1::DeviceNmsConfig&
DeviceDetailed::_Internal::nms(const DeviceDetailed* msg) {
  return *msg->nms_;
}
void DeviceDetailed::clear_created_date() {
  if (GetArena() == nullptr && created_date_ != nullptr) {
    delete created_date_;
  }
  created_date_ = nullptr;
}
void DeviceDetailed::clear_updated_date() {
  if (GetArena() == nullptr && updated_date_ != nullptr) {
    delete updated_date_;
  }
  updated_date_ = nullptr;
}
DeviceDetailed::DeviceDetailed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  all_interfaces_(arena),
  sending_ips_(arena),
  custom_column_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeviceDetailed)
}
DeviceDetailed::DeviceDetailed(const DeviceDetailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      labels_(from.labels_),
      all_interfaces_(from.all_interfaces_),
      sending_ips_(from.sending_ips_),
      custom_column_data_(from.custom_column_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  device_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_alias().empty()) {
    device_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_alias(),
      GetArena());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_type(),
      GetArena());
  }
  device_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_description().empty()) {
    device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_description(),
      GetArena());
  }
  device_flow_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_flow_type().empty()) {
    device_flow_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_flow_type(),
      GetArena());
  }
  device_sample_rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_sample_rate().empty()) {
    device_sample_rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_sample_rate(),
      GetArena());
  }
  device_snmp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_snmp_ip().empty()) {
    device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_snmp_ip(),
      GetArena());
  }
  device_snmp_community_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_snmp_community().empty()) {
    device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_snmp_community(),
      GetArena());
  }
  device_bgp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_type().empty()) {
    device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_type(),
      GetArena());
  }
  device_bgp_neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_neighbor_ip().empty()) {
    device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_neighbor_ip(),
      GetArena());
  }
  device_bgp_neighbor_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_neighbor_ip6().empty()) {
    device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_neighbor_ip6(),
      GetArena());
  }
  device_bgp_neighbor_asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_neighbor_asn().empty()) {
    device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_neighbor_asn(),
      GetArena());
  }
  device_bgp_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_password().empty()) {
    device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_password(),
      GetArena());
  }
  bgp_lookup_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgp_lookup_strategy().empty()) {
    bgp_lookup_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bgp_lookup_strategy(),
      GetArena());
  }
  device_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_status().empty()) {
    device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_status(),
      GetArena());
  }
  use_bgp_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use_bgp_device_id().empty()) {
    use_bgp_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_use_bgp_device_id(),
      GetArena());
  }
  custom_columns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_columns().empty()) {
    custom_columns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_columns(),
      GetArena());
  }
  device_chf_client_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_chf_client_port().empty()) {
    device_chf_client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_chf_client_port(),
      GetArena());
  }
  device_chf_client_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_chf_client_protocol().empty()) {
    device_chf_client_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_chf_client_protocol(),
      GetArena());
  }
  device_chf_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_chf_interface().empty()) {
    device_chf_interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_chf_interface(),
      GetArena());
  }
  device_agent_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_agent_type().empty()) {
    device_agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_agent_type(),
      GetArena());
  }
  device_proxy_bgp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_proxy_bgp().empty()) {
    device_proxy_bgp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_proxy_bgp(),
      GetArena());
  }
  device_proxy_bgp6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_proxy_bgp6().empty()) {
    device_proxy_bgp6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_proxy_bgp6(),
      GetArena());
  }
  cdn_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cdn_attr().empty()) {
    cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cdn_attr(),
      GetArena());
  }
  bgp_peer_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgp_peer_ip4().empty()) {
    bgp_peer_ip4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bgp_peer_ip4(),
      GetArena());
  }
  bgp_peer_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgp_peer_ip6().empty()) {
    bgp_peer_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bgp_peer_ip6(),
      GetArena());
  }
  device_subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_subtype().empty()) {
    device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_subtype(),
      GetArena());
  }
  device_vendor_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_vendor_type().empty()) {
    device_vendor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_vendor_type(),
      GetArena());
  }
  device_model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_model_type().empty()) {
    device_model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_model_type(),
      GetArena());
  }
  cloud_export_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloud_export_id().empty()) {
    cloud_export_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cloud_export_id(),
      GetArena());
  }
  device_kproxy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_kproxy().empty()) {
    device_kproxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_kproxy(),
      GetArena());
  }
  snmp_enabled_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_enabled().empty()) {
    snmp_enabled_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_enabled(),
      GetArena());
  }
  snmp_disabled_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_disabled_reason().empty()) {
    snmp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_disabled_reason(),
      GetArena());
  }
  snmp_disabled_reason_other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_disabled_reason_other().empty()) {
    snmp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_disabled_reason_other(),
      GetArena());
  }
  bgp_disabled_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgp_disabled_reason().empty()) {
    bgp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bgp_disabled_reason(),
      GetArena());
  }
  bgp_disabled_reason_other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgp_disabled_reason_other().empty()) {
    bgp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bgp_disabled_reason_other(),
      GetArena());
  }
  device_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_manufacturer().empty()) {
    device_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_manufacturer(),
      GetArena());
  }
  device_alert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_alert().empty()) {
    device_alert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_alert(),
      GetArena());
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_role(),
      GetArena());
  }
  device_bgp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_bgp_credential_name().empty()) {
    device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bgp_credential_name(),
      GetArena());
  }
  flow_snmp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_snmp_credential_name().empty()) {
    flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flow_snmp_credential_name(),
      GetArena());
  }
  if (from._internal_has_site()) {
    site_ = new ::kentik::device::v202308beta1::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  if (from._internal_has_plan()) {
    plan_ = new ::kentik::device::v202308beta1::Plan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  if (from._internal_has_created_date()) {
    created_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_date_);
  } else {
    created_date_ = nullptr;
  }
  if (from._internal_has_updated_date()) {
    updated_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_date_);
  } else {
    updated_date_ = nullptr;
  }
  if (from._internal_has_device_snmp_v3_conf()) {
    device_snmp_v3_conf_ = new ::kentik::device::v202308beta1::DeviceSnmpV3Conf(*from.device_snmp_v3_conf_);
  } else {
    device_snmp_v3_conf_ = nullptr;
  }
  if (from._internal_has_device_gnmi_v1_conf()) {
    device_gnmi_v1_conf_ = new ::kentik::device::v202308beta1::GnmiV1Conf(*from.device_gnmi_v1_conf_);
  } else {
    device_gnmi_v1_conf_ = nullptr;
  }
  if (from._internal_has_nms()) {
    nms_ = new ::kentik::device::v202308beta1::DeviceNmsConfig(*from.nms_);
  } else {
    nms_ = nullptr;
  }
  ::memcpy(&minimize_snmp_, &from.minimize_snmp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_interface_check_) -
    reinterpret_cast<char*>(&minimize_snmp_)) + sizeof(max_interface_check_));
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeviceDetailed)
}

void DeviceDetailed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_flow_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_sample_rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_community_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_lookup_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_bgp_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_columns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_chf_client_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_chf_client_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_chf_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_agent_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_proxy_bgp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_proxy_bgp6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_peer_ip4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_peer_ip6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_vendor_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_export_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_kproxy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_enabled_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_disabled_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_disabled_reason_other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_disabled_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_disabled_reason_other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_alert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_snmp_credential_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&site_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_interface_check_) -
      reinterpret_cast<char*>(&site_)) + sizeof(max_interface_check_));
}

DeviceDetailed::~DeviceDetailed() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeviceDetailed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceDetailed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_flow_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_sample_rate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_snmp_community_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_ip6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_neighbor_asn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_lookup_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_bgp_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_columns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_chf_client_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_chf_client_protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_chf_interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_agent_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_proxy_bgp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_proxy_bgp6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_peer_ip4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_peer_ip6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_vendor_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_model_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_export_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_kproxy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_enabled_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_disabled_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_disabled_reason_other_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_disabled_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgp_disabled_reason_other_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_alert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bgp_credential_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_snmp_credential_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete site_;
  if (this != internal_default_instance()) delete plan_;
  if (this != internal_default_instance()) delete created_date_;
  if (this != internal_default_instance()) delete updated_date_;
  if (this != internal_default_instance()) delete device_snmp_v3_conf_;
  if (this != internal_default_instance()) delete device_gnmi_v1_conf_;
  if (this != internal_default_instance()) delete nms_;
}

void DeviceDetailed::ArenaDtor(void* object) {
  DeviceDetailed* _this = reinterpret_cast< DeviceDetailed* >(object);
  (void)_this;
}
void DeviceDetailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceDetailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceDetailed& DeviceDetailed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceDetailed_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceDetailed::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeviceDetailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  all_interfaces_.Clear();
  sending_ips_.Clear();
  custom_column_data_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_flow_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_sample_rate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_community_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_lookup_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  use_bgp_device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_columns_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_chf_client_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_chf_client_protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_chf_interface_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_agent_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_proxy_bgp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_proxy_bgp6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cdn_attr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_peer_ip4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_peer_ip6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_subtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_vendor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_export_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_kproxy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_enabled_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_disabled_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_disabled_reason_other_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_disabled_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_disabled_reason_other_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_manufacturer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_alert_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flow_snmp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  if (GetArena() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  if (GetArena() == nullptr && created_date_ != nullptr) {
    delete created_date_;
  }
  created_date_ = nullptr;
  if (GetArena() == nullptr && updated_date_ != nullptr) {
    delete updated_date_;
  }
  updated_date_ = nullptr;
  if (GetArena() == nullptr && device_snmp_v3_conf_ != nullptr) {
    delete device_snmp_v3_conf_;
  }
  device_snmp_v3_conf_ = nullptr;
  if (GetArena() == nullptr && device_gnmi_v1_conf_ != nullptr) {
    delete device_gnmi_v1_conf_;
  }
  device_gnmi_v1_conf_ = nullptr;
  if (GetArena() == nullptr && nms_ != nullptr) {
    delete nms_;
  }
  nms_ = nullptr;
  minimize_snmp_ = false;
  ::memset(&device_bgp_flowspec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_interface_check_) -
      reinterpret_cast<char*>(&device_bgp_flowspec_)) + sizeof(max_interface_check_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceDetailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_name = 3[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_alias = 4[json_name = "deviceAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 5[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_description = 6[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.Site site = 7[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.Plan plan = 8[json_name = "plan", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.device.v202308beta1.Label labels = 9[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.device.v202308beta1.Interface all_interfaces = 10[json_name = "allInterfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string device_flow_type = 11[json_name = "deviceFlowType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_device_flow_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_flow_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_sample_rate = 12[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_device_sample_rate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_sample_rate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string sending_ips = 13[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sending_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.sending_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // string device_snmp_ip = 14[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_device_snmp_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_snmp_community = 15[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_device_snmp_community();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_snmp_community"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool minimize_snmp = 16[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_minimize_snmp(&has_bits);
          minimize_snmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_type = 17[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_device_bgp_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_bgp_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_neighbor_ip = 18[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_device_bgp_neighbor_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_neighbor_ip6 = 19[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_device_bgp_neighbor_ip6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_neighbor_asn = 20[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_device_bgp_neighbor_asn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool device_bgp_flowspec = 21[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          device_bgp_flowspec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_password = 22[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_device_bgp_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_bgp_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool device_bgp_label_unicast = 23[json_name = "deviceBgpLabelUnicast", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          device_bgp_label_unicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bgp_lookup_strategy = 24[json_name = "bgpLookupStrategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_bgp_lookup_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_status = 25[json_name = "deviceStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_device_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use_bgp_device_id = 26[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_use_bgp_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string custom_columns = 27[json_name = "customColumns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_custom_columns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.custom_columns"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.device.v202308beta1.CustomColumnData custom_column_data = 28[json_name = "customColumnData", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_custom_column_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // string device_chf_client_port = 29[json_name = "deviceChfClientPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_device_chf_client_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_chf_client_protocol = 30[json_name = "deviceChfClientProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_device_chf_client_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_chf_interface = 31[json_name = "deviceChfInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_device_chf_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_chf_interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_agent_type = 32[json_name = "deviceAgentType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_device_agent_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_agent_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_flow_rate = 33[json_name = "maxFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_flow_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_big_flow_rate = 34[json_name = "maxBigFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_big_flow_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_proxy_bgp = 35[json_name = "deviceProxyBgp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_proxy_bgp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_proxy_bgp6 = 36[json_name = "deviceProxyBgp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_proxy_bgp6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_date = 37[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_date = 38[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool device_snmp_v3_conf_enabled = 39[json_name = "deviceSnmpV3ConfEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          device_snmp_v3_conf_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 40[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_snmp_v3_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cdn_attr = 41[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_cdn_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.cdn_attr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bgp_peer_ip4 = 42[json_name = "bgpPeerIp4", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_bgp_peer_ip4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bgp_peer_ip6 = 43[json_name = "bgpPeerIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_bgp_peer_ip6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_subtype = 44[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_device_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_subtype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_vendor_type = 45[json_name = "deviceVendorType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_device_vendor_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_vendor_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_model_type = 46[json_name = "deviceModelType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_device_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_model_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloud_export_id = 47[json_name = "cloudExportId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_cloud_export_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.cloud_export_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_kproxy = 48[json_name = "deviceKproxy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_device_kproxy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_kproxy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_enabled = 49[json_name = "snmpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_snmp_enabled();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.snmp_enabled"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_disabled_reason = 50[json_name = "snmpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_snmp_disabled_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_disabled_reason_other = 51[json_name = "snmpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_snmp_disabled_reason_other();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bgp_disabled_reason = 52[json_name = "bgpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_bgp_disabled_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bgp_disabled_reason_other = 53[json_name = "bgpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_bgp_disabled_reason_other();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_manufacturer = 54[json_name = "deviceManufacturer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_device_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_alert = 55[json_name = "deviceAlert", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_device_alert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_alert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 56[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.GnmiV1Conf device_gnmi_v1_conf = 57[json_name = "deviceGnmiV1Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_gnmi_v1_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_asn_from_flow = 58[json_name = "useAsnFromFlow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          use_asn_from_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_interface = 59[json_name = "maxInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          max_interface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_interface_check = 60[json_name = "maxInterfaceCheck", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          max_interface_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.device.v202308beta1.DeviceNmsConfig nms = 61[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_bgp_credential_name = 62[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_device_bgp_credential_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flow_snmp_credential_name = 63[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_flow_snmp_credential_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceDetailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeviceDetailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.company_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_id(), target);
  }

  // string device_name = 3[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  // string device_alias = 4[json_name = "deviceAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_alias().data(), static_cast<int>(this->_internal_device_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_alias(), target);
  }

  // string device_type = 5[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_type(), target);
  }

  // string device_description = 6[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_description().data(), static_cast<int>(this->_internal_device_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_description(), target);
  }

  // .kentik.device.v202308beta1.Site site = 7[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::site(this), target, stream);
  }

  // .kentik.device.v202308beta1.Plan plan = 8[json_name = "plan", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::plan(this), target, stream);
  }

  // repeated .kentik.device.v202308beta1.Label labels = 9[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_labels(i), target, stream);
  }

  // repeated .kentik.device.v202308beta1.Interface all_interfaces = 10[json_name = "allInterfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_all_interfaces(i), target, stream);
  }

  // string device_flow_type = 11[json_name = "deviceFlowType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_flow_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_flow_type().data(), static_cast<int>(this->_internal_device_flow_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_flow_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_device_flow_type(), target);
  }

  // string device_sample_rate = 12[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_sample_rate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_sample_rate().data(), static_cast<int>(this->_internal_device_sample_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_sample_rate");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_device_sample_rate(), target);
  }

  // repeated string sending_ips = 13[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_sending_ips_size(); i < n; i++) {
    const auto& s = this->_internal_sending_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.sending_ips");
    target = stream->WriteString(13, s, target);
  }

  // string device_snmp_ip = 14[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_snmp_ip().data(), static_cast<int>(this->_internal_device_snmp_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_device_snmp_ip(), target);
  }

  // string device_snmp_community = 15[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_community().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_snmp_community().data(), static_cast<int>(this->_internal_device_snmp_community().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_snmp_community");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_device_snmp_community(), target);
  }

  // bool minimize_snmp = 16[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_minimize_snmp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_minimize_snmp(), target);
  }

  // string device_bgp_type = 17[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_type().data(), static_cast<int>(this->_internal_device_bgp_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_bgp_type");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_device_bgp_type(), target);
  }

  // string device_bgp_neighbor_ip = 18[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_neighbor_ip().data(), static_cast<int>(this->_internal_device_bgp_neighbor_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_device_bgp_neighbor_ip(), target);
  }

  // string device_bgp_neighbor_ip6 = 19[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_neighbor_ip6().data(), static_cast<int>(this->_internal_device_bgp_neighbor_ip6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_device_bgp_neighbor_ip6(), target);
  }

  // string device_bgp_neighbor_asn = 20[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_asn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_neighbor_asn().data(), static_cast<int>(this->_internal_device_bgp_neighbor_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_device_bgp_neighbor_asn(), target);
  }

  // bool device_bgp_flowspec = 21[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_flowspec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_device_bgp_flowspec(), target);
  }

  // string device_bgp_password = 22[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_password().data(), static_cast<int>(this->_internal_device_bgp_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_bgp_password");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_device_bgp_password(), target);
  }

  // bool device_bgp_label_unicast = 23[json_name = "deviceBgpLabelUnicast", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_label_unicast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_device_bgp_label_unicast(), target);
  }

  // string bgp_lookup_strategy = 24[json_name = "bgpLookupStrategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_lookup_strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgp_lookup_strategy().data(), static_cast<int>(this->_internal_bgp_lookup_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_bgp_lookup_strategy(), target);
  }

  // string device_status = 25[json_name = "deviceStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_status().data(), static_cast<int>(this->_internal_device_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_status");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_device_status(), target);
  }

  // string use_bgp_device_id = 26[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_bgp_device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use_bgp_device_id().data(), static_cast<int>(this->_internal_use_bgp_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_use_bgp_device_id(), target);
  }

  // string custom_columns = 27[json_name = "customColumns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->custom_columns().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_columns().data(), static_cast<int>(this->_internal_custom_columns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.custom_columns");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_custom_columns(), target);
  }

  // repeated .kentik.device.v202308beta1.CustomColumnData custom_column_data = 28[json_name = "customColumnData", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_column_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_custom_column_data(i), target, stream);
  }

  // string device_chf_client_port = 29[json_name = "deviceChfClientPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_chf_client_port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_chf_client_port().data(), static_cast<int>(this->_internal_device_chf_client_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_device_chf_client_port(), target);
  }

  // string device_chf_client_protocol = 30[json_name = "deviceChfClientProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_chf_client_protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_chf_client_protocol().data(), static_cast<int>(this->_internal_device_chf_client_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_device_chf_client_protocol(), target);
  }

  // string device_chf_interface = 31[json_name = "deviceChfInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_chf_interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_chf_interface().data(), static_cast<int>(this->_internal_device_chf_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_chf_interface");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_device_chf_interface(), target);
  }

  // string device_agent_type = 32[json_name = "deviceAgentType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_agent_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_agent_type().data(), static_cast<int>(this->_internal_device_agent_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_agent_type");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_device_agent_type(), target);
  }

  // uint32 max_flow_rate = 33[json_name = "maxFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_flow_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_max_flow_rate(), target);
  }

  // uint32 max_big_flow_rate = 34[json_name = "maxBigFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_big_flow_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_max_big_flow_rate(), target);
  }

  // string device_proxy_bgp = 35[json_name = "deviceProxyBgp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_proxy_bgp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_proxy_bgp().data(), static_cast<int>(this->_internal_device_proxy_bgp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_device_proxy_bgp(), target);
  }

  // string device_proxy_bgp6 = 36[json_name = "deviceProxyBgp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_proxy_bgp6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_proxy_bgp6().data(), static_cast<int>(this->_internal_device_proxy_bgp6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_device_proxy_bgp6(), target);
  }

  // .google.protobuf.Timestamp created_date = 37[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_created_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::created_date(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_date = 38[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_updated_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::updated_date(this), target, stream);
  }

  // bool device_snmp_v3_conf_enabled = 39[json_name = "deviceSnmpV3ConfEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_v3_conf_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_device_snmp_v3_conf_enabled(), target);
  }

  // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 40[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device_snmp_v3_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::device_snmp_v3_conf(this), target, stream);
  }

  // string cdn_attr = 41[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cdn_attr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cdn_attr().data(), static_cast<int>(this->_internal_cdn_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.cdn_attr");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_cdn_attr(), target);
  }

  // string bgp_peer_ip4 = 42[json_name = "bgpPeerIp4", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_peer_ip4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgp_peer_ip4().data(), static_cast<int>(this->_internal_bgp_peer_ip4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_bgp_peer_ip4(), target);
  }

  // string bgp_peer_ip6 = 43[json_name = "bgpPeerIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_peer_ip6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgp_peer_ip6().data(), static_cast<int>(this->_internal_bgp_peer_ip6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_bgp_peer_ip6(), target);
  }

  // string device_subtype = 44[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_subtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_subtype().data(), static_cast<int>(this->_internal_device_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_subtype");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_device_subtype(), target);
  }

  // string device_vendor_type = 45[json_name = "deviceVendorType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_vendor_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_vendor_type().data(), static_cast<int>(this->_internal_device_vendor_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_vendor_type");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_device_vendor_type(), target);
  }

  // string device_model_type = 46[json_name = "deviceModelType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_model_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_model_type().data(), static_cast<int>(this->_internal_device_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_model_type");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_device_model_type(), target);
  }

  // string cloud_export_id = 47[json_name = "cloudExportId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_export_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloud_export_id().data(), static_cast<int>(this->_internal_cloud_export_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.cloud_export_id");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_cloud_export_id(), target);
  }

  // string device_kproxy = 48[json_name = "deviceKproxy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_kproxy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_kproxy().data(), static_cast<int>(this->_internal_device_kproxy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_kproxy");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_device_kproxy(), target);
  }

  // string snmp_enabled = 49[json_name = "snmpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_enabled().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_enabled().data(), static_cast<int>(this->_internal_snmp_enabled().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.snmp_enabled");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_snmp_enabled(), target);
  }

  // string snmp_disabled_reason = 50[json_name = "snmpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_disabled_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_disabled_reason().data(), static_cast<int>(this->_internal_snmp_disabled_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_snmp_disabled_reason(), target);
  }

  // string snmp_disabled_reason_other = 51[json_name = "snmpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_disabled_reason_other().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_disabled_reason_other().data(), static_cast<int>(this->_internal_snmp_disabled_reason_other().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_snmp_disabled_reason_other(), target);
  }

  // string bgp_disabled_reason = 52[json_name = "bgpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_disabled_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgp_disabled_reason().data(), static_cast<int>(this->_internal_bgp_disabled_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_bgp_disabled_reason(), target);
  }

  // string bgp_disabled_reason_other = 53[json_name = "bgpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_disabled_reason_other().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgp_disabled_reason_other().data(), static_cast<int>(this->_internal_bgp_disabled_reason_other().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_bgp_disabled_reason_other(), target);
  }

  // string device_manufacturer = 54[json_name = "deviceManufacturer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_manufacturer().data(), static_cast<int>(this->_internal_device_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_manufacturer");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_device_manufacturer(), target);
  }

  // string device_alert = 55[json_name = "deviceAlert", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_alert().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_alert().data(), static_cast<int>(this->_internal_device_alert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_alert");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_device_alert(), target);
  }

  // string role = 56[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.role");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_role(), target);
  }

  // .kentik.device.v202308beta1.GnmiV1Conf device_gnmi_v1_conf = 57[json_name = "deviceGnmiV1Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device_gnmi_v1_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::device_gnmi_v1_conf(this), target, stream);
  }

  // bool use_asn_from_flow = 58[json_name = "useAsnFromFlow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_asn_from_flow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_use_asn_from_flow(), target);
  }

  // uint32 max_interface = 59[json_name = "maxInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_max_interface(), target);
  }

  // uint32 max_interface_check = 60[json_name = "maxInterfaceCheck", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_interface_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_max_interface_check(), target);
  }

  // .kentik.device.v202308beta1.DeviceNmsConfig nms = 61[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_nms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::nms(this), target, stream);
  }

  // string device_bgp_credential_name = 62[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_credential_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_bgp_credential_name().data(), static_cast<int>(this->_internal_device_bgp_credential_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name");
    target = stream->WriteStringMaybeAliased(
        62, this->_internal_device_bgp_credential_name(), target);
  }

  // string flow_snmp_credential_name = 63[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->flow_snmp_credential_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_snmp_credential_name().data(), static_cast<int>(this->_internal_flow_snmp_credential_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name");
    target = stream->WriteStringMaybeAliased(
        63, this->_internal_flow_snmp_credential_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeviceDetailed)
  return target;
}

size_t DeviceDetailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeviceDetailed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.Label labels = 9[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.device.v202308beta1.Interface all_interfaces = 10[json_name = "allInterfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_all_interfaces_size();
  for (const auto& msg : this->all_interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string sending_ips = 13[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sending_ips_.size());
  for (int i = 0, n = sending_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sending_ips_.Get(i));
  }

  // repeated .kentik.device.v202308beta1.CustomColumnData custom_column_data = 28[json_name = "customColumnData", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2UL * this->_internal_custom_column_data_size();
  for (const auto& msg : this->custom_column_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // string device_name = 3[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // string device_alias = 4[json_name = "deviceAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_alias());
  }

  // string device_type = 5[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string device_description = 6[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_description());
  }

  // string device_flow_type = 11[json_name = "deviceFlowType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_flow_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_flow_type());
  }

  // string device_sample_rate = 12[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_sample_rate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_sample_rate());
  }

  // string device_snmp_ip = 14[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_snmp_ip());
  }

  // string device_snmp_community = 15[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_community().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_snmp_community());
  }

  // string device_bgp_type = 17[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_type());
  }

  // string device_bgp_neighbor_ip = 18[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_neighbor_ip());
  }

  // string device_bgp_neighbor_ip6 = 19[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_ip6().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_neighbor_ip6());
  }

  // string device_bgp_neighbor_asn = 20[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_neighbor_asn().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_neighbor_asn());
  }

  // string device_bgp_password = 22[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_password().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_password());
  }

  // string bgp_lookup_strategy = 24[json_name = "bgpLookupStrategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_lookup_strategy().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgp_lookup_strategy());
  }

  // string device_status = 25[json_name = "deviceStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_status().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_status());
  }

  // string use_bgp_device_id = 26[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_bgp_device_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use_bgp_device_id());
  }

  // string custom_columns = 27[json_name = "customColumns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->custom_columns().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_columns());
  }

  // string device_chf_client_port = 29[json_name = "deviceChfClientPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_chf_client_port().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_chf_client_port());
  }

  // string device_chf_client_protocol = 30[json_name = "deviceChfClientProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_chf_client_protocol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_chf_client_protocol());
  }

  // string device_chf_interface = 31[json_name = "deviceChfInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_chf_interface().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_chf_interface());
  }

  // string device_agent_type = 32[json_name = "deviceAgentType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_agent_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_agent_type());
  }

  // string device_proxy_bgp = 35[json_name = "deviceProxyBgp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_proxy_bgp().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_proxy_bgp());
  }

  // string device_proxy_bgp6 = 36[json_name = "deviceProxyBgp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_proxy_bgp6().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_proxy_bgp6());
  }

  // string cdn_attr = 41[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cdn_attr().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cdn_attr());
  }

  // string bgp_peer_ip4 = 42[json_name = "bgpPeerIp4", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_peer_ip4().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgp_peer_ip4());
  }

  // string bgp_peer_ip6 = 43[json_name = "bgpPeerIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_peer_ip6().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgp_peer_ip6());
  }

  // string device_subtype = 44[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_subtype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_subtype());
  }

  // string device_vendor_type = 45[json_name = "deviceVendorType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_vendor_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_vendor_type());
  }

  // string device_model_type = 46[json_name = "deviceModelType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_model_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_model_type());
  }

  // string cloud_export_id = 47[json_name = "cloudExportId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_export_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloud_export_id());
  }

  // string device_kproxy = 48[json_name = "deviceKproxy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_kproxy().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_kproxy());
  }

  // string snmp_enabled = 49[json_name = "snmpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_enabled().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_enabled());
  }

  // string snmp_disabled_reason = 50[json_name = "snmpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_disabled_reason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_disabled_reason());
  }

  // string snmp_disabled_reason_other = 51[json_name = "snmpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_disabled_reason_other().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_disabled_reason_other());
  }

  // string bgp_disabled_reason = 52[json_name = "bgpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_disabled_reason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgp_disabled_reason());
  }

  // string bgp_disabled_reason_other = 53[json_name = "bgpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->bgp_disabled_reason_other().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgp_disabled_reason_other());
  }

  // string device_manufacturer = 54[json_name = "deviceManufacturer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_manufacturer().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_manufacturer());
  }

  // string device_alert = 55[json_name = "deviceAlert", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_alert().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_alert());
  }

  // string role = 56[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->role().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // string device_bgp_credential_name = 62[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_credential_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_bgp_credential_name());
  }

  // string flow_snmp_credential_name = 63[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->flow_snmp_credential_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_snmp_credential_name());
  }

  // .kentik.device.v202308beta1.Site site = 7[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  // .kentik.device.v202308beta1.Plan plan = 8[json_name = "plan", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  // .google.protobuf.Timestamp created_date = 37[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_created_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_date_);
  }

  // .google.protobuf.Timestamp updated_date = 38[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_updated_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_date_);
  }

  // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 40[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device_snmp_v3_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_snmp_v3_conf_);
  }

  // .kentik.device.v202308beta1.GnmiV1Conf device_gnmi_v1_conf = 57[json_name = "deviceGnmiV1Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device_gnmi_v1_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_gnmi_v1_conf_);
  }

  // .kentik.device.v202308beta1.DeviceNmsConfig nms = 61[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_nms()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nms_);
  }

  // bool minimize_snmp = 16[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 1;
  }

  // bool device_bgp_flowspec = 21[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_flowspec() != 0) {
    total_size += 2 + 1;
  }

  // bool device_bgp_label_unicast = 23[json_name = "deviceBgpLabelUnicast", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_bgp_label_unicast() != 0) {
    total_size += 2 + 1;
  }

  // bool device_snmp_v3_conf_enabled = 39[json_name = "deviceSnmpV3ConfEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_snmp_v3_conf_enabled() != 0) {
    total_size += 2 + 1;
  }

  // uint32 max_flow_rate = 33[json_name = "maxFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_flow_rate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_flow_rate());
  }

  // uint32 max_big_flow_rate = 34[json_name = "maxBigFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_big_flow_rate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_big_flow_rate());
  }

  // bool use_asn_from_flow = 58[json_name = "useAsnFromFlow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_asn_from_flow() != 0) {
    total_size += 2 + 1;
  }

  // uint32 max_interface = 59[json_name = "maxInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_interface() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_interface());
  }

  // uint32 max_interface_check = 60[json_name = "maxInterfaceCheck", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_interface_check() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_interface_check());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceDetailed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeviceDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceDetailed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceDetailed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeviceDetailed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeviceDetailed)
    MergeFrom(*source);
  }
}

void DeviceDetailed::MergeFrom(const DeviceDetailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeviceDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  all_interfaces_.MergeFrom(from.all_interfaces_);
  sending_ips_.MergeFrom(from.sending_ips_);
  custom_column_data_.MergeFrom(from.custom_column_data_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.device_alias().size() > 0) {
    _internal_set_device_alias(from._internal_device_alias());
  }
  if (from.device_type().size() > 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from.device_description().size() > 0) {
    _internal_set_device_description(from._internal_device_description());
  }
  if (from.device_flow_type().size() > 0) {
    _internal_set_device_flow_type(from._internal_device_flow_type());
  }
  if (from.device_sample_rate().size() > 0) {
    _internal_set_device_sample_rate(from._internal_device_sample_rate());
  }
  if (from.device_snmp_ip().size() > 0) {
    _internal_set_device_snmp_ip(from._internal_device_snmp_ip());
  }
  if (from.device_snmp_community().size() > 0) {
    _internal_set_device_snmp_community(from._internal_device_snmp_community());
  }
  if (from.device_bgp_type().size() > 0) {
    _internal_set_device_bgp_type(from._internal_device_bgp_type());
  }
  if (from.device_bgp_neighbor_ip().size() > 0) {
    _internal_set_device_bgp_neighbor_ip(from._internal_device_bgp_neighbor_ip());
  }
  if (from.device_bgp_neighbor_ip6().size() > 0) {
    _internal_set_device_bgp_neighbor_ip6(from._internal_device_bgp_neighbor_ip6());
  }
  if (from.device_bgp_neighbor_asn().size() > 0) {
    _internal_set_device_bgp_neighbor_asn(from._internal_device_bgp_neighbor_asn());
  }
  if (from.device_bgp_password().size() > 0) {
    _internal_set_device_bgp_password(from._internal_device_bgp_password());
  }
  if (from.bgp_lookup_strategy().size() > 0) {
    _internal_set_bgp_lookup_strategy(from._internal_bgp_lookup_strategy());
  }
  if (from.device_status().size() > 0) {
    _internal_set_device_status(from._internal_device_status());
  }
  if (from.use_bgp_device_id().size() > 0) {
    _internal_set_use_bgp_device_id(from._internal_use_bgp_device_id());
  }
  if (from.custom_columns().size() > 0) {
    _internal_set_custom_columns(from._internal_custom_columns());
  }
  if (from.device_chf_client_port().size() > 0) {
    _internal_set_device_chf_client_port(from._internal_device_chf_client_port());
  }
  if (from.device_chf_client_protocol().size() > 0) {
    _internal_set_device_chf_client_protocol(from._internal_device_chf_client_protocol());
  }
  if (from.device_chf_interface().size() > 0) {
    _internal_set_device_chf_interface(from._internal_device_chf_interface());
  }
  if (from.device_agent_type().size() > 0) {
    _internal_set_device_agent_type(from._internal_device_agent_type());
  }
  if (from.device_proxy_bgp().size() > 0) {
    _internal_set_device_proxy_bgp(from._internal_device_proxy_bgp());
  }
  if (from.device_proxy_bgp6().size() > 0) {
    _internal_set_device_proxy_bgp6(from._internal_device_proxy_bgp6());
  }
  if (from.cdn_attr().size() > 0) {
    _internal_set_cdn_attr(from._internal_cdn_attr());
  }
  if (from.bgp_peer_ip4().size() > 0) {
    _internal_set_bgp_peer_ip4(from._internal_bgp_peer_ip4());
  }
  if (from.bgp_peer_ip6().size() > 0) {
    _internal_set_bgp_peer_ip6(from._internal_bgp_peer_ip6());
  }
  if (from.device_subtype().size() > 0) {
    _internal_set_device_subtype(from._internal_device_subtype());
  }
  if (from.device_vendor_type().size() > 0) {
    _internal_set_device_vendor_type(from._internal_device_vendor_type());
  }
  if (from.device_model_type().size() > 0) {
    _internal_set_device_model_type(from._internal_device_model_type());
  }
  if (from.cloud_export_id().size() > 0) {
    _internal_set_cloud_export_id(from._internal_cloud_export_id());
  }
  if (from.device_kproxy().size() > 0) {
    _internal_set_device_kproxy(from._internal_device_kproxy());
  }
  if (from.snmp_enabled().size() > 0) {
    _internal_set_snmp_enabled(from._internal_snmp_enabled());
  }
  if (from.snmp_disabled_reason().size() > 0) {
    _internal_set_snmp_disabled_reason(from._internal_snmp_disabled_reason());
  }
  if (from.snmp_disabled_reason_other().size() > 0) {
    _internal_set_snmp_disabled_reason_other(from._internal_snmp_disabled_reason_other());
  }
  if (from.bgp_disabled_reason().size() > 0) {
    _internal_set_bgp_disabled_reason(from._internal_bgp_disabled_reason());
  }
  if (from.bgp_disabled_reason_other().size() > 0) {
    _internal_set_bgp_disabled_reason_other(from._internal_bgp_disabled_reason_other());
  }
  if (from.device_manufacturer().size() > 0) {
    _internal_set_device_manufacturer(from._internal_device_manufacturer());
  }
  if (from.device_alert().size() > 0) {
    _internal_set_device_alert(from._internal_device_alert());
  }
  if (from.role().size() > 0) {
    _internal_set_role(from._internal_role());
  }
  if (from.device_bgp_credential_name().size() > 0) {
    _internal_set_device_bgp_credential_name(from._internal_device_bgp_credential_name());
  }
  if (from.flow_snmp_credential_name().size() > 0) {
    _internal_set_flow_snmp_credential_name(from._internal_flow_snmp_credential_name());
  }
  if (from.has_site()) {
    _internal_mutable_site()->::kentik::device::v202308beta1::Site::MergeFrom(from._internal_site());
  }
  if (from.has_plan()) {
    _internal_mutable_plan()->::kentik::device::v202308beta1::Plan::MergeFrom(from._internal_plan());
  }
  if (from.has_created_date()) {
    _internal_mutable_created_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_date());
  }
  if (from.has_updated_date()) {
    _internal_mutable_updated_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_date());
  }
  if (from.has_device_snmp_v3_conf()) {
    _internal_mutable_device_snmp_v3_conf()->::kentik::device::v202308beta1::DeviceSnmpV3Conf::MergeFrom(from._internal_device_snmp_v3_conf());
  }
  if (from.has_device_gnmi_v1_conf()) {
    _internal_mutable_device_gnmi_v1_conf()->::kentik::device::v202308beta1::GnmiV1Conf::MergeFrom(from._internal_device_gnmi_v1_conf());
  }
  if (from.has_nms()) {
    _internal_mutable_nms()->::kentik::device::v202308beta1::DeviceNmsConfig::MergeFrom(from._internal_nms());
  }
  if (from._internal_has_minimize_snmp()) {
    _internal_set_minimize_snmp(from._internal_minimize_snmp());
  }
  if (from.device_bgp_flowspec() != 0) {
    _internal_set_device_bgp_flowspec(from._internal_device_bgp_flowspec());
  }
  if (from.device_bgp_label_unicast() != 0) {
    _internal_set_device_bgp_label_unicast(from._internal_device_bgp_label_unicast());
  }
  if (from.device_snmp_v3_conf_enabled() != 0) {
    _internal_set_device_snmp_v3_conf_enabled(from._internal_device_snmp_v3_conf_enabled());
  }
  if (from.max_flow_rate() != 0) {
    _internal_set_max_flow_rate(from._internal_max_flow_rate());
  }
  if (from.max_big_flow_rate() != 0) {
    _internal_set_max_big_flow_rate(from._internal_max_big_flow_rate());
  }
  if (from.use_asn_from_flow() != 0) {
    _internal_set_use_asn_from_flow(from._internal_use_asn_from_flow());
  }
  if (from.max_interface() != 0) {
    _internal_set_max_interface(from._internal_max_interface());
  }
  if (from.max_interface_check() != 0) {
    _internal_set_max_interface_check(from._internal_max_interface_check());
  }
}

void DeviceDetailed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeviceDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDetailed::CopyFrom(const DeviceDetailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeviceDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDetailed::IsInitialized() const {
  return true;
}

void DeviceDetailed::InternalSwap(DeviceDetailed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  labels_.InternalSwap(&other->labels_);
  all_interfaces_.InternalSwap(&other->all_interfaces_);
  sending_ips_.InternalSwap(&other->sending_ips_);
  custom_column_data_.InternalSwap(&other->custom_column_data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_alias_.Swap(&other->device_alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_description_.Swap(&other->device_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_flow_type_.Swap(&other->device_flow_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_sample_rate_.Swap(&other->device_sample_rate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_ip_.Swap(&other->device_snmp_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_snmp_community_.Swap(&other->device_snmp_community_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_type_.Swap(&other->device_bgp_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip_.Swap(&other->device_bgp_neighbor_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_ip6_.Swap(&other->device_bgp_neighbor_ip6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_neighbor_asn_.Swap(&other->device_bgp_neighbor_asn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_password_.Swap(&other->device_bgp_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_lookup_strategy_.Swap(&other->bgp_lookup_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_status_.Swap(&other->device_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  use_bgp_device_id_.Swap(&other->use_bgp_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_columns_.Swap(&other->custom_columns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_chf_client_port_.Swap(&other->device_chf_client_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_chf_client_protocol_.Swap(&other->device_chf_client_protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_chf_interface_.Swap(&other->device_chf_interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_agent_type_.Swap(&other->device_agent_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_proxy_bgp_.Swap(&other->device_proxy_bgp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_proxy_bgp6_.Swap(&other->device_proxy_bgp6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cdn_attr_.Swap(&other->cdn_attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_peer_ip4_.Swap(&other->bgp_peer_ip4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_peer_ip6_.Swap(&other->bgp_peer_ip6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_subtype_.Swap(&other->device_subtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_vendor_type_.Swap(&other->device_vendor_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_model_type_.Swap(&other->device_model_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_export_id_.Swap(&other->cloud_export_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_kproxy_.Swap(&other->device_kproxy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_enabled_.Swap(&other->snmp_enabled_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_disabled_reason_.Swap(&other->snmp_disabled_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_disabled_reason_other_.Swap(&other->snmp_disabled_reason_other_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_disabled_reason_.Swap(&other->bgp_disabled_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgp_disabled_reason_other_.Swap(&other->bgp_disabled_reason_other_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_manufacturer_.Swap(&other->device_manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_alert_.Swap(&other->device_alert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bgp_credential_name_.Swap(&other->device_bgp_credential_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flow_snmp_credential_name_.Swap(&other->flow_snmp_credential_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceDetailed, max_interface_check_)
      + sizeof(DeviceDetailed::max_interface_check_)
      - PROTOBUF_FIELD_OFFSET(DeviceDetailed, site_)>(
          reinterpret_cast<char*>(&site_),
          reinterpret_cast<char*>(&other->site_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceDetailed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelConcise::InitAsDefaultInstance() {
}
class LabelConcise::_Internal {
 public:
};

LabelConcise::LabelConcise(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.LabelConcise)
}
LabelConcise::LabelConcise(const LabelConcise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.LabelConcise)
}

void LabelConcise::SharedCtor() {
  id_ = 0u;
}

LabelConcise::~LabelConcise() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.LabelConcise)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelConcise::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelConcise::ArenaDtor(void* object) {
  LabelConcise* _this = reinterpret_cast< LabelConcise* >(object);
  (void)_this;
}
void LabelConcise::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelConcise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelConcise& LabelConcise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelConcise_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void LabelConcise::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.LabelConcise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelConcise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelConcise::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.LabelConcise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.LabelConcise)
  return target;
}

size_t LabelConcise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.LabelConcise)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelConcise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.LabelConcise)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelConcise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelConcise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.LabelConcise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.LabelConcise)
    MergeFrom(*source);
  }
}

void LabelConcise::MergeFrom(const LabelConcise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.LabelConcise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LabelConcise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.LabelConcise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelConcise::CopyFrom(const LabelConcise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.LabelConcise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelConcise::IsInitialized() const {
  return true;
}

void LabelConcise::InternalSwap(LabelConcise* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelConcise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDevicesRequest::InitAsDefaultInstance() {
}
class ListDevicesRequest::_Internal {
 public:
};

ListDevicesRequest::ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.ListDevicesRequest)
}
ListDevicesRequest::ListDevicesRequest(const ListDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.ListDevicesRequest)
}

void ListDevicesRequest::SharedCtor() {
}

ListDevicesRequest::~ListDevicesRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.ListDevicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListDevicesRequest::ArenaDtor(void* object) {
  ListDevicesRequest* _this = reinterpret_cast< ListDevicesRequest* >(object);
  (void)_this;
}
void ListDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDevicesRequest& ListDevicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void ListDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.ListDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.ListDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.ListDevicesRequest)
  return target;
}

size_t ListDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.ListDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDevicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDevicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDevicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.ListDevicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.ListDevicesRequest)
    MergeFrom(*source);
  }
}

void ListDevicesRequest::MergeFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListDevicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesRequest::CopyFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesRequest::IsInitialized() const {
  return true;
}

void ListDevicesRequest::InternalSwap(ListDevicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDevicesResponse::InitAsDefaultInstance() {
}
class ListDevicesResponse::_Internal {
 public:
};

ListDevicesResponse::ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.ListDevicesResponse)
}
ListDevicesResponse::ListDevicesResponse(const ListDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.ListDevicesResponse)
}

void ListDevicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  invalid_count_ = 0u;
}

ListDevicesResponse::~ListDevicesResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.ListDevicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListDevicesResponse::ArenaDtor(void* object) {
  ListDevicesResponse* _this = reinterpret_cast< ListDevicesResponse* >(object);
  (void)_this;
}
void ListDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDevicesResponse& ListDevicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void ListDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.ListDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDevicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.ListDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.ListDevicesResponse)
  return target;
}

size_t ListDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.ListDevicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDevicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDevicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDevicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.ListDevicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.ListDevicesResponse)
    MergeFrom(*source);
  }
}

void ListDevicesResponse::MergeFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListDevicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesResponse::CopyFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesResponse::IsInitialized() const {
  return true;
}

void ListDevicesResponse::InternalSwap(ListDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceRequest::InitAsDefaultInstance() {
}
class GetDeviceRequest::_Internal {
 public:
};

GetDeviceRequest::GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.GetDeviceRequest)
}
GetDeviceRequest::GetDeviceRequest(const GetDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.GetDeviceRequest)
}

void GetDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceRequest::~GetDeviceRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.GetDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceRequest::ArenaDtor(void* object) {
  GetDeviceRequest* _this = reinterpret_cast< GetDeviceRequest* >(object);
  (void)_this;
}
void GetDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceRequest& GetDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.GetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.GetDeviceRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.GetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.GetDeviceRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.GetDeviceRequest)
  return target;
}

size_t GetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.GetDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.GetDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.GetDeviceRequest)
    MergeFrom(*source);
  }
}

void GetDeviceRequest::MergeFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceRequest::CopyFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceRequest::IsInitialized() const {
  return true;
}

void GetDeviceRequest::InternalSwap(GetDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceResponse::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_GetDeviceResponse_default_instance_._instance.get_mutable()->device_ = const_cast< ::kentik::device::v202308beta1::DeviceDetailed*>(
      ::kentik::device::v202308beta1::DeviceDetailed::internal_default_instance());
}
class GetDeviceResponse::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceDetailed& device(const GetDeviceResponse* msg);
};

const ::kentik::device::v202308beta1::DeviceDetailed&
GetDeviceResponse::_Internal::device(const GetDeviceResponse* msg) {
  return *msg->device_;
}
GetDeviceResponse::GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.GetDeviceResponse)
}
GetDeviceResponse::GetDeviceResponse(const GetDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::kentik::device::v202308beta1::DeviceDetailed(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.GetDeviceResponse)
}

void GetDeviceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_ = nullptr;
}

GetDeviceResponse::~GetDeviceResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.GetDeviceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void GetDeviceResponse::ArenaDtor(void* object) {
  GetDeviceResponse* _this = reinterpret_cast< GetDeviceResponse* >(object);
  (void)_this;
}
void GetDeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceResponse& GetDeviceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.GetDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.GetDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.GetDeviceResponse)
  return target;
}

size_t GetDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.GetDeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.GetDeviceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.GetDeviceResponse)
    MergeFrom(*source);
  }
}

void GetDeviceResponse::MergeFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::kentik::device::v202308beta1::DeviceDetailed::MergeFrom(from._internal_device());
  }
}

void GetDeviceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceResponse::CopyFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceResponse::IsInitialized() const {
  return true;
}

void GetDeviceResponse::InternalSwap(GetDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDeviceRequest::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_CreateDeviceRequest_default_instance_._instance.get_mutable()->device_ = const_cast< ::kentik::device::v202308beta1::DeviceConcise*>(
      ::kentik::device::v202308beta1::DeviceConcise::internal_default_instance());
}
class CreateDeviceRequest::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceConcise& device(const CreateDeviceRequest* msg);
};

const ::kentik::device::v202308beta1::DeviceConcise&
CreateDeviceRequest::_Internal::device(const CreateDeviceRequest* msg) {
  return *msg->device_;
}
CreateDeviceRequest::CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.CreateDeviceRequest)
}
CreateDeviceRequest::CreateDeviceRequest(const CreateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::kentik::device::v202308beta1::DeviceConcise(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.CreateDeviceRequest)
}

void CreateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_ = nullptr;
}

CreateDeviceRequest::~CreateDeviceRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.CreateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void CreateDeviceRequest::ArenaDtor(void* object) {
  CreateDeviceRequest* _this = reinterpret_cast< CreateDeviceRequest* >(object);
  (void)_this;
}
void CreateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDeviceRequest& CreateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CreateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.CreateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.CreateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.CreateDeviceRequest)
  return target;
}

size_t CreateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.CreateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.CreateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.CreateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.CreateDeviceRequest)
    MergeFrom(*source);
  }
}

void CreateDeviceRequest::MergeFrom(const CreateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.CreateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::kentik::device::v202308beta1::DeviceConcise::MergeFrom(from._internal_device());
  }
}

void CreateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.CreateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDeviceRequest::CopyFrom(const CreateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.CreateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeviceRequest::IsInitialized() const {
  return true;
}

void CreateDeviceRequest::InternalSwap(CreateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDeviceResponse::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_CreateDeviceResponse_default_instance_._instance.get_mutable()->device_ = const_cast< ::kentik::device::v202308beta1::DeviceDetailed*>(
      ::kentik::device::v202308beta1::DeviceDetailed::internal_default_instance());
}
class CreateDeviceResponse::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceDetailed& device(const CreateDeviceResponse* msg);
};

const ::kentik::device::v202308beta1::DeviceDetailed&
CreateDeviceResponse::_Internal::device(const CreateDeviceResponse* msg) {
  return *msg->device_;
}
CreateDeviceResponse::CreateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.CreateDeviceResponse)
}
CreateDeviceResponse::CreateDeviceResponse(const CreateDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::kentik::device::v202308beta1::DeviceDetailed(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.CreateDeviceResponse)
}

void CreateDeviceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_ = nullptr;
}

CreateDeviceResponse::~CreateDeviceResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.CreateDeviceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void CreateDeviceResponse::ArenaDtor(void* object) {
  CreateDeviceResponse* _this = reinterpret_cast< CreateDeviceResponse* >(object);
  (void)_this;
}
void CreateDeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDeviceResponse& CreateDeviceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CreateDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.CreateDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.CreateDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.CreateDeviceResponse)
  return target;
}

size_t CreateDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.CreateDeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDeviceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.CreateDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDeviceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDeviceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.CreateDeviceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.CreateDeviceResponse)
    MergeFrom(*source);
  }
}

void CreateDeviceResponse::MergeFrom(const CreateDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.CreateDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::kentik::device::v202308beta1::DeviceDetailed::MergeFrom(from._internal_device());
  }
}

void CreateDeviceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.CreateDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDeviceResponse::CopyFrom(const CreateDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.CreateDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeviceResponse::IsInitialized() const {
  return true;
}

void CreateDeviceResponse::InternalSwap(CreateDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeviceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDevicesRequest::InitAsDefaultInstance() {
}
class CreateDevicesRequest::_Internal {
 public:
};

CreateDevicesRequest::CreateDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.CreateDevicesRequest)
}
CreateDevicesRequest::CreateDevicesRequest(const CreateDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.CreateDevicesRequest)
}

void CreateDevicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
}

CreateDevicesRequest::~CreateDevicesRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.CreateDevicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateDevicesRequest::ArenaDtor(void* object) {
  CreateDevicesRequest* _this = reinterpret_cast< CreateDevicesRequest* >(object);
  (void)_this;
}
void CreateDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDevicesRequest& CreateDevicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CreateDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.CreateDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.CreateDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.CreateDevicesRequest)
  return target;
}

size_t CreateDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.CreateDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDevicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.CreateDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDevicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDevicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.CreateDevicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.CreateDevicesRequest)
    MergeFrom(*source);
  }
}

void CreateDevicesRequest::MergeFrom(const CreateDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.CreateDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CreateDevicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.CreateDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDevicesRequest::CopyFrom(const CreateDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.CreateDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDevicesRequest::IsInitialized() const {
  return true;
}

void CreateDevicesRequest::InternalSwap(CreateDevicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDevicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDevicesResponse::InitAsDefaultInstance() {
}
class CreateDevicesResponse::_Internal {
 public:
};

CreateDevicesResponse::CreateDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena),
  failed_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.CreateDevicesResponse)
}
CreateDevicesResponse::CreateDevicesResponse(const CreateDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_),
      failed_devices_(from.failed_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.CreateDevicesResponse)
}

void CreateDevicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
}

CreateDevicesResponse::~CreateDevicesResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.CreateDevicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateDevicesResponse::ArenaDtor(void* object) {
  CreateDevicesResponse* _this = reinterpret_cast< CreateDevicesResponse* >(object);
  (void)_this;
}
void CreateDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDevicesResponse& CreateDevicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CreateDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.CreateDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  failed_devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_devices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.CreateDevicesResponse.failed_devices"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDevicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.CreateDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_failed_devices_size(); i < n; i++) {
    const auto& s = this->_internal_failed_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.CreateDevicesResponse.failed_devices");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.CreateDevicesResponse)
  return target;
}

size_t CreateDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.CreateDevicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(failed_devices_.size());
  for (int i = 0, n = failed_devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      failed_devices_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDevicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.CreateDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDevicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDevicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.CreateDevicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.CreateDevicesResponse)
    MergeFrom(*source);
  }
}

void CreateDevicesResponse::MergeFrom(const CreateDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.CreateDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  failed_devices_.MergeFrom(from.failed_devices_);
}

void CreateDevicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.CreateDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDevicesResponse::CopyFrom(const CreateDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.CreateDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDevicesResponse::IsInitialized() const {
  return true;
}

void CreateDevicesResponse::InternalSwap(CreateDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  failed_devices_.InternalSwap(&other->failed_devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDevicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDeviceRequest::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_UpdateDeviceRequest_default_instance_._instance.get_mutable()->device_ = const_cast< ::kentik::device::v202308beta1::DeviceConcise*>(
      ::kentik::device::v202308beta1::DeviceConcise::internal_default_instance());
}
class UpdateDeviceRequest::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceConcise& device(const UpdateDeviceRequest* msg);
};

const ::kentik::device::v202308beta1::DeviceConcise&
UpdateDeviceRequest::_Internal::device(const UpdateDeviceRequest* msg) {
  return *msg->device_;
}
UpdateDeviceRequest::UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.UpdateDeviceRequest)
}
UpdateDeviceRequest::UpdateDeviceRequest(const UpdateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::kentik::device::v202308beta1::DeviceConcise(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.UpdateDeviceRequest)
}

void UpdateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_ = nullptr;
}

UpdateDeviceRequest::~UpdateDeviceRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.UpdateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void UpdateDeviceRequest::ArenaDtor(void* object) {
  UpdateDeviceRequest* _this = reinterpret_cast< UpdateDeviceRequest* >(object);
  (void)_this;
}
void UpdateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeviceRequest& UpdateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.UpdateDeviceRequest)
  return target;
}

size_t UpdateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.UpdateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.UpdateDeviceRequest)
    MergeFrom(*source);
  }
}

void UpdateDeviceRequest::MergeFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::kentik::device::v202308beta1::DeviceConcise::MergeFrom(from._internal_device());
  }
}

void UpdateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceRequest::CopyFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceRequest::InternalSwap(UpdateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDeviceResponse::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_UpdateDeviceResponse_default_instance_._instance.get_mutable()->device_ = const_cast< ::kentik::device::v202308beta1::DeviceDetailed*>(
      ::kentik::device::v202308beta1::DeviceDetailed::internal_default_instance());
}
class UpdateDeviceResponse::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceDetailed& device(const UpdateDeviceResponse* msg);
};

const ::kentik::device::v202308beta1::DeviceDetailed&
UpdateDeviceResponse::_Internal::device(const UpdateDeviceResponse* msg) {
  return *msg->device_;
}
UpdateDeviceResponse::UpdateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.UpdateDeviceResponse)
}
UpdateDeviceResponse::UpdateDeviceResponse(const UpdateDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::kentik::device::v202308beta1::DeviceDetailed(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.UpdateDeviceResponse)
}

void UpdateDeviceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_ = nullptr;
}

UpdateDeviceResponse::~UpdateDeviceResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.UpdateDeviceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void UpdateDeviceResponse::ArenaDtor(void* object) {
  UpdateDeviceResponse* _this = reinterpret_cast< UpdateDeviceResponse* >(object);
  (void)_this;
}
void UpdateDeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeviceResponse& UpdateDeviceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.UpdateDeviceResponse)
  return target;
}

size_t UpdateDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeviceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeviceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.UpdateDeviceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.UpdateDeviceResponse)
    MergeFrom(*source);
  }
}

void UpdateDeviceResponse::MergeFrom(const UpdateDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::kentik::device::v202308beta1::DeviceDetailed::MergeFrom(from._internal_device());
  }
}

void UpdateDeviceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceResponse::CopyFrom(const UpdateDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.UpdateDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceResponse::IsInitialized() const {
  return true;
}

void UpdateDeviceResponse::InternalSwap(UpdateDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDevicesRequest::InitAsDefaultInstance() {
}
class UpdateDevicesRequest::_Internal {
 public:
};

UpdateDevicesRequest::UpdateDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.UpdateDevicesRequest)
}
UpdateDevicesRequest::UpdateDevicesRequest(const UpdateDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.UpdateDevicesRequest)
}

void UpdateDevicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
}

UpdateDevicesRequest::~UpdateDevicesRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.UpdateDevicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateDevicesRequest::ArenaDtor(void* object) {
  UpdateDevicesRequest* _this = reinterpret_cast< UpdateDevicesRequest* >(object);
  (void)_this;
}
void UpdateDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDevicesRequest& UpdateDevicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.UpdateDevicesRequest)
  return target;
}

size_t UpdateDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDevicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDevicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDevicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.UpdateDevicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.UpdateDevicesRequest)
    MergeFrom(*source);
  }
}

void UpdateDevicesRequest::MergeFrom(const UpdateDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void UpdateDevicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDevicesRequest::CopyFrom(const UpdateDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.UpdateDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDevicesRequest::IsInitialized() const {
  return true;
}

void UpdateDevicesRequest::InternalSwap(UpdateDevicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDevicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDevicesResponse::InitAsDefaultInstance() {
}
class UpdateDevicesResponse::_Internal {
 public:
};

UpdateDevicesResponse::UpdateDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena),
  failed_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.UpdateDevicesResponse)
}
UpdateDevicesResponse::UpdateDevicesResponse(const UpdateDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_),
      failed_devices_(from.failed_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.UpdateDevicesResponse)
}

void UpdateDevicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
}

UpdateDevicesResponse::~UpdateDevicesResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.UpdateDevicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateDevicesResponse::ArenaDtor(void* object) {
  UpdateDevicesResponse* _this = reinterpret_cast< UpdateDevicesResponse* >(object);
  (void)_this;
}
void UpdateDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDevicesResponse& UpdateDevicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  failed_devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_devices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDevicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_failed_devices_size(); i < n; i++) {
    const auto& s = this->_internal_failed_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.UpdateDevicesResponse)
  return target;
}

size_t UpdateDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(failed_devices_.size());
  for (int i = 0, n = failed_devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      failed_devices_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDevicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDevicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDevicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.UpdateDevicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.UpdateDevicesResponse)
    MergeFrom(*source);
  }
}

void UpdateDevicesResponse::MergeFrom(const UpdateDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  failed_devices_.MergeFrom(from.failed_devices_);
}

void UpdateDevicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDevicesResponse::CopyFrom(const UpdateDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.UpdateDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDevicesResponse::IsInitialized() const {
  return true;
}

void UpdateDevicesResponse::InternalSwap(UpdateDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  failed_devices_.InternalSwap(&other->failed_devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDevicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDeviceLabelsRequest::InitAsDefaultInstance() {
}
class UpdateDeviceLabelsRequest::_Internal {
 public:
};

UpdateDeviceLabelsRequest::UpdateDeviceLabelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
}
UpdateDeviceLabelsRequest::UpdateDeviceLabelsRequest(const UpdateDeviceLabelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
}

void UpdateDeviceLabelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeviceLabelsRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateDeviceLabelsRequest::~UpdateDeviceLabelsRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeviceLabelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateDeviceLabelsRequest::ArenaDtor(void* object) {
  UpdateDeviceLabelsRequest* _this = reinterpret_cast< UpdateDeviceLabelsRequest* >(object);
  (void)_this;
}
void UpdateDeviceLabelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceLabelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeviceLabelsRequest& UpdateDeviceLabelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeviceLabelsRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeviceLabelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceLabelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.device.v202308beta1.LabelConcise labels = 2[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceLabelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .kentik.device.v202308beta1.LabelConcise labels = 2[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_labels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  return target;
}

size_t UpdateDeviceLabelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.device.v202308beta1.LabelConcise labels = 2[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceLabelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeviceLabelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeviceLabelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
    MergeFrom(*source);
  }
}

void UpdateDeviceLabelsRequest::MergeFrom(const UpdateDeviceLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateDeviceLabelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceLabelsRequest::CopyFrom(const UpdateDeviceLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceLabelsRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceLabelsRequest::InternalSwap(UpdateDeviceLabelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceLabelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDeviceLabelsResponse::InitAsDefaultInstance() {
  ::kentik::device::v202308beta1::_UpdateDeviceLabelsResponse_default_instance_._instance.get_mutable()->device_ = const_cast< ::kentik::device::v202308beta1::DeviceDetailed*>(
      ::kentik::device::v202308beta1::DeviceDetailed::internal_default_instance());
}
class UpdateDeviceLabelsResponse::_Internal {
 public:
  static const ::kentik::device::v202308beta1::DeviceDetailed& device(const UpdateDeviceLabelsResponse* msg);
};

const ::kentik::device::v202308beta1::DeviceDetailed&
UpdateDeviceLabelsResponse::_Internal::device(const UpdateDeviceLabelsResponse* msg) {
  return *msg->device_;
}
UpdateDeviceLabelsResponse::UpdateDeviceLabelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
}
UpdateDeviceLabelsResponse::UpdateDeviceLabelsResponse(const UpdateDeviceLabelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::kentik::device::v202308beta1::DeviceDetailed(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
}

void UpdateDeviceLabelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeviceLabelsResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  device_ = nullptr;
}

UpdateDeviceLabelsResponse::~UpdateDeviceLabelsResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeviceLabelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void UpdateDeviceLabelsResponse::ArenaDtor(void* object) {
  UpdateDeviceLabelsResponse* _this = reinterpret_cast< UpdateDeviceLabelsResponse* >(object);
  (void)_this;
}
void UpdateDeviceLabelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceLabelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeviceLabelsResponse& UpdateDeviceLabelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeviceLabelsResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeviceLabelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceLabelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceLabelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  return target;
}

size_t UpdateDeviceLabelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceLabelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeviceLabelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeviceLabelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
    MergeFrom(*source);
  }
}

void UpdateDeviceLabelsResponse::MergeFrom(const UpdateDeviceLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::kentik::device::v202308beta1::DeviceDetailed::MergeFrom(from._internal_device());
  }
}

void UpdateDeviceLabelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceLabelsResponse::CopyFrom(const UpdateDeviceLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceLabelsResponse::IsInitialized() const {
  return true;
}

void UpdateDeviceLabelsResponse::InternalSwap(UpdateDeviceLabelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceLabelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDeviceRequest::InitAsDefaultInstance() {
}
class DeleteDeviceRequest::_Internal {
 public:
};

DeleteDeviceRequest::DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeleteDeviceRequest)
}
DeleteDeviceRequest::DeleteDeviceRequest(const DeleteDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeleteDeviceRequest)
}

void DeleteDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteDeviceRequest::~DeleteDeviceRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeleteDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteDeviceRequest::ArenaDtor(void* object) {
  DeleteDeviceRequest* _this = reinterpret_cast< DeleteDeviceRequest* >(object);
  (void)_this;
}
void DeleteDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDeviceRequest& DeleteDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDeviceRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeleteDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeleteDeviceRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeleteDeviceRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeleteDeviceRequest)
  return target;
}

size_t DeleteDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeleteDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeleteDeviceRequest)
    MergeFrom(*source);
  }
}

void DeleteDeviceRequest::MergeFrom(const DeleteDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDeviceRequest::CopyFrom(const DeleteDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeleteDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeviceRequest::IsInitialized() const {
  return true;
}

void DeleteDeviceRequest::InternalSwap(DeleteDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDeviceResponse::InitAsDefaultInstance() {
}
class DeleteDeviceResponse::_Internal {
 public:
};

DeleteDeviceResponse::DeleteDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeleteDeviceResponse)
}
DeleteDeviceResponse::DeleteDeviceResponse(const DeleteDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeleteDeviceResponse)
}

void DeleteDeviceResponse::SharedCtor() {
}

DeleteDeviceResponse::~DeleteDeviceResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeleteDeviceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteDeviceResponse::ArenaDtor(void* object) {
  DeleteDeviceResponse* _this = reinterpret_cast< DeleteDeviceResponse* >(object);
  (void)_this;
}
void DeleteDeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDeviceResponse& DeleteDeviceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDeviceResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeleteDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeleteDeviceResponse)
  return target;
}

size_t DeleteDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDeviceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDeviceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDeviceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeleteDeviceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeleteDeviceResponse)
    MergeFrom(*source);
  }
}

void DeleteDeviceResponse::MergeFrom(const DeleteDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteDeviceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDeviceResponse::CopyFrom(const DeleteDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeleteDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeviceResponse::IsInitialized() const {
  return true;
}

void DeleteDeviceResponse::InternalSwap(DeleteDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeviceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDevicesRequest::InitAsDefaultInstance() {
}
class DeleteDevicesRequest::_Internal {
 public:
};

DeleteDevicesRequest::DeleteDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeleteDevicesRequest)
}
DeleteDevicesRequest::DeleteDevicesRequest(const DeleteDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeleteDevicesRequest)
}

void DeleteDevicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
}

DeleteDevicesRequest::~DeleteDevicesRequest() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeleteDevicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteDevicesRequest::ArenaDtor(void* object) {
  DeleteDevicesRequest* _this = reinterpret_cast< DeleteDevicesRequest* >(object);
  (void)_this;
}
void DeleteDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDevicesRequest& DeleteDevicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDevicesRequest_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeleteDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeleteDevicesRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeleteDevicesRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeleteDevicesRequest)
  return target;
}

size_t DeleteDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDevicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDevicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDevicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeleteDevicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeleteDevicesRequest)
    MergeFrom(*source);
  }
}

void DeleteDevicesRequest::MergeFrom(const DeleteDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void DeleteDevicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDevicesRequest::CopyFrom(const DeleteDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeleteDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDevicesRequest::IsInitialized() const {
  return true;
}

void DeleteDevicesRequest::InternalSwap(DeleteDevicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDevicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDevicesResponse::InitAsDefaultInstance() {
}
class DeleteDevicesResponse::_Internal {
 public:
};

DeleteDevicesResponse::DeleteDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  failed_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.device.v202308beta1.DeleteDevicesResponse)
}
DeleteDevicesResponse::DeleteDevicesResponse(const DeleteDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      failed_devices_(from.failed_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.device.v202308beta1.DeleteDevicesResponse)
}

void DeleteDevicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
}

DeleteDevicesResponse::~DeleteDevicesResponse() {
  // @@protoc_insertion_point(destructor:kentik.device.v202308beta1.DeleteDevicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteDevicesResponse::ArenaDtor(void* object) {
  DeleteDevicesResponse* _this = reinterpret_cast< DeleteDevicesResponse* >(object);
  (void)_this;
}
void DeleteDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDevicesResponse& DeleteDevicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDevicesResponse_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeleteDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failed_devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string failed_devices = 1[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_devices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDevicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failed_devices = 1[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_failed_devices_size(); i < n; i++) {
    const auto& s = this->_internal_failed_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.device.v202308beta1.DeleteDevicesResponse)
  return target;
}

size_t DeleteDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failed_devices = 1[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(failed_devices_.size());
  for (int i = 0, n = failed_devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      failed_devices_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDevicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDevicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDevicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.device.v202308beta1.DeleteDevicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.device.v202308beta1.DeleteDevicesResponse)
    MergeFrom(*source);
  }
}

void DeleteDevicesResponse::MergeFrom(const DeleteDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failed_devices_.MergeFrom(from.failed_devices_);
}

void DeleteDevicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDevicesResponse::CopyFrom(const DeleteDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.device.v202308beta1.DeleteDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDevicesResponse::IsInitialized() const {
  return true;
}

void DeleteDevicesResponse::InternalSwap(DeleteDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  failed_devices_.InternalSwap(&other->failed_devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDevicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202308beta1
}  // namespace device
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeviceSnmpV3Conf* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeviceSnmpV3Conf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeviceSnmpV3Conf >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeviceNmsConfig* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeviceNmsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeviceNmsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeviceNmsSnmpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeviceNmsSnmpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeviceNmsStConfig* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeviceNmsStConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeviceNmsStConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeviceConcise* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeviceConcise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeviceConcise >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::Site* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::Site >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::Site >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::Plan* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::Plan >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::Label* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::Interface* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::CustomColumnData* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::CustomColumnData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::CustomColumnData >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::GnmiV1Conf* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::GnmiV1Conf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::GnmiV1Conf >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeviceDetailed* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeviceDetailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeviceDetailed >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::LabelConcise* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::LabelConcise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::LabelConcise >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::ListDevicesRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::ListDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::ListDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::ListDevicesResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::ListDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::ListDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::GetDeviceRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::GetDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::GetDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::GetDeviceResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::GetDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::GetDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::CreateDeviceRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::CreateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::CreateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::CreateDeviceResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::CreateDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::CreateDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::CreateDevicesRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::CreateDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::CreateDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::CreateDevicesResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::CreateDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::CreateDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::UpdateDeviceRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::UpdateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::UpdateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::UpdateDeviceResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::UpdateDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::UpdateDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::UpdateDevicesRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::UpdateDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::UpdateDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::UpdateDevicesResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::UpdateDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::UpdateDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::UpdateDeviceLabelsRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::UpdateDeviceLabelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::UpdateDeviceLabelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::UpdateDeviceLabelsResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::UpdateDeviceLabelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::UpdateDeviceLabelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeleteDeviceRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeleteDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeleteDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeleteDeviceResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeleteDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeleteDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeleteDevicesRequest* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeleteDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeleteDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::device::v202308beta1::DeleteDevicesResponse* Arena::CreateMaybeMessage< ::kentik::device::v202308beta1::DeleteDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::device::v202308beta1::DeleteDevicesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
