// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/device/v202308beta1/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
namespace kentik {
namespace device {
namespace v202308beta1 {
class CreateDeviceRequest;
class CreateDeviceRequestDefaultTypeInternal;
extern CreateDeviceRequestDefaultTypeInternal _CreateDeviceRequest_default_instance_;
class CreateDeviceResponse;
class CreateDeviceResponseDefaultTypeInternal;
extern CreateDeviceResponseDefaultTypeInternal _CreateDeviceResponse_default_instance_;
class CreateDevicesRequest;
class CreateDevicesRequestDefaultTypeInternal;
extern CreateDevicesRequestDefaultTypeInternal _CreateDevicesRequest_default_instance_;
class CreateDevicesResponse;
class CreateDevicesResponseDefaultTypeInternal;
extern CreateDevicesResponseDefaultTypeInternal _CreateDevicesResponse_default_instance_;
class CustomColumnData;
class CustomColumnDataDefaultTypeInternal;
extern CustomColumnDataDefaultTypeInternal _CustomColumnData_default_instance_;
class DeleteDeviceRequest;
class DeleteDeviceRequestDefaultTypeInternal;
extern DeleteDeviceRequestDefaultTypeInternal _DeleteDeviceRequest_default_instance_;
class DeleteDeviceResponse;
class DeleteDeviceResponseDefaultTypeInternal;
extern DeleteDeviceResponseDefaultTypeInternal _DeleteDeviceResponse_default_instance_;
class DeleteDevicesRequest;
class DeleteDevicesRequestDefaultTypeInternal;
extern DeleteDevicesRequestDefaultTypeInternal _DeleteDevicesRequest_default_instance_;
class DeleteDevicesResponse;
class DeleteDevicesResponseDefaultTypeInternal;
extern DeleteDevicesResponseDefaultTypeInternal _DeleteDevicesResponse_default_instance_;
class DeviceConcise;
class DeviceConciseDefaultTypeInternal;
extern DeviceConciseDefaultTypeInternal _DeviceConcise_default_instance_;
class DeviceDetailed;
class DeviceDetailedDefaultTypeInternal;
extern DeviceDetailedDefaultTypeInternal _DeviceDetailed_default_instance_;
class DeviceNmsConfig;
class DeviceNmsConfigDefaultTypeInternal;
extern DeviceNmsConfigDefaultTypeInternal _DeviceNmsConfig_default_instance_;
class DeviceNmsSnmpConfig;
class DeviceNmsSnmpConfigDefaultTypeInternal;
extern DeviceNmsSnmpConfigDefaultTypeInternal _DeviceNmsSnmpConfig_default_instance_;
class DeviceNmsStConfig;
class DeviceNmsStConfigDefaultTypeInternal;
extern DeviceNmsStConfigDefaultTypeInternal _DeviceNmsStConfig_default_instance_;
class DeviceSnmpV3Conf;
class DeviceSnmpV3ConfDefaultTypeInternal;
extern DeviceSnmpV3ConfDefaultTypeInternal _DeviceSnmpV3Conf_default_instance_;
class GetDeviceRequest;
class GetDeviceRequestDefaultTypeInternal;
extern GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
class GetDeviceResponse;
class GetDeviceResponseDefaultTypeInternal;
extern GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
class GnmiV1Conf;
class GnmiV1ConfDefaultTypeInternal;
extern GnmiV1ConfDefaultTypeInternal _GnmiV1Conf_default_instance_;
class Interface;
class InterfaceDefaultTypeInternal;
extern InterfaceDefaultTypeInternal _Interface_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class LabelConcise;
class LabelConciseDefaultTypeInternal;
extern LabelConciseDefaultTypeInternal _LabelConcise_default_instance_;
class ListDevicesRequest;
class ListDevicesRequestDefaultTypeInternal;
extern ListDevicesRequestDefaultTypeInternal _ListDevicesRequest_default_instance_;
class ListDevicesResponse;
class ListDevicesResponseDefaultTypeInternal;
extern ListDevicesResponseDefaultTypeInternal _ListDevicesResponse_default_instance_;
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class Site;
class SiteDefaultTypeInternal;
extern SiteDefaultTypeInternal _Site_default_instance_;
class UpdateDeviceLabelsRequest;
class UpdateDeviceLabelsRequestDefaultTypeInternal;
extern UpdateDeviceLabelsRequestDefaultTypeInternal _UpdateDeviceLabelsRequest_default_instance_;
class UpdateDeviceLabelsResponse;
class UpdateDeviceLabelsResponseDefaultTypeInternal;
extern UpdateDeviceLabelsResponseDefaultTypeInternal _UpdateDeviceLabelsResponse_default_instance_;
class UpdateDeviceRequest;
class UpdateDeviceRequestDefaultTypeInternal;
extern UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
class UpdateDeviceResponse;
class UpdateDeviceResponseDefaultTypeInternal;
extern UpdateDeviceResponseDefaultTypeInternal _UpdateDeviceResponse_default_instance_;
class UpdateDevicesRequest;
class UpdateDevicesRequestDefaultTypeInternal;
extern UpdateDevicesRequestDefaultTypeInternal _UpdateDevicesRequest_default_instance_;
class UpdateDevicesResponse;
class UpdateDevicesResponseDefaultTypeInternal;
extern UpdateDevicesResponseDefaultTypeInternal _UpdateDevicesResponse_default_instance_;
}  // namespace v202308beta1
}  // namespace device
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::device::v202308beta1::CreateDeviceRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::CreateDeviceRequest>(Arena*);
template<> ::kentik::device::v202308beta1::CreateDeviceResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::CreateDeviceResponse>(Arena*);
template<> ::kentik::device::v202308beta1::CreateDevicesRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::CreateDevicesRequest>(Arena*);
template<> ::kentik::device::v202308beta1::CreateDevicesResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::CreateDevicesResponse>(Arena*);
template<> ::kentik::device::v202308beta1::CustomColumnData* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::CustomColumnData>(Arena*);
template<> ::kentik::device::v202308beta1::DeleteDeviceRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeleteDeviceRequest>(Arena*);
template<> ::kentik::device::v202308beta1::DeleteDeviceResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeleteDeviceResponse>(Arena*);
template<> ::kentik::device::v202308beta1::DeleteDevicesRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeleteDevicesRequest>(Arena*);
template<> ::kentik::device::v202308beta1::DeleteDevicesResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeleteDevicesResponse>(Arena*);
template<> ::kentik::device::v202308beta1::DeviceConcise* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeviceConcise>(Arena*);
template<> ::kentik::device::v202308beta1::DeviceDetailed* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeviceDetailed>(Arena*);
template<> ::kentik::device::v202308beta1::DeviceNmsConfig* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsConfig>(Arena*);
template<> ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsSnmpConfig>(Arena*);
template<> ::kentik::device::v202308beta1::DeviceNmsStConfig* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsStConfig>(Arena*);
template<> ::kentik::device::v202308beta1::DeviceSnmpV3Conf* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::DeviceSnmpV3Conf>(Arena*);
template<> ::kentik::device::v202308beta1::GetDeviceRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::GetDeviceRequest>(Arena*);
template<> ::kentik::device::v202308beta1::GetDeviceResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::GetDeviceResponse>(Arena*);
template<> ::kentik::device::v202308beta1::GnmiV1Conf* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::GnmiV1Conf>(Arena*);
template<> ::kentik::device::v202308beta1::Interface* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::Interface>(Arena*);
template<> ::kentik::device::v202308beta1::Label* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::Label>(Arena*);
template<> ::kentik::device::v202308beta1::LabelConcise* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::LabelConcise>(Arena*);
template<> ::kentik::device::v202308beta1::ListDevicesRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::ListDevicesRequest>(Arena*);
template<> ::kentik::device::v202308beta1::ListDevicesResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::ListDevicesResponse>(Arena*);
template<> ::kentik::device::v202308beta1::Plan* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::Plan>(Arena*);
template<> ::kentik::device::v202308beta1::Site* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::Site>(Arena*);
template<> ::kentik::device::v202308beta1::UpdateDeviceLabelsRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::UpdateDeviceLabelsRequest>(Arena*);
template<> ::kentik::device::v202308beta1::UpdateDeviceLabelsResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::UpdateDeviceLabelsResponse>(Arena*);
template<> ::kentik::device::v202308beta1::UpdateDeviceRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::UpdateDeviceRequest>(Arena*);
template<> ::kentik::device::v202308beta1::UpdateDeviceResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::UpdateDeviceResponse>(Arena*);
template<> ::kentik::device::v202308beta1::UpdateDevicesRequest* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::UpdateDevicesRequest>(Arena*);
template<> ::kentik::device::v202308beta1::UpdateDevicesResponse* Arena::CreateMaybeMessage<::kentik::device::v202308beta1::UpdateDevicesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace device {
namespace v202308beta1 {

// ===================================================================

class DeviceSnmpV3Conf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeviceSnmpV3Conf) */ {
 public:
  inline DeviceSnmpV3Conf() : DeviceSnmpV3Conf(nullptr) {};
  virtual ~DeviceSnmpV3Conf();

  DeviceSnmpV3Conf(const DeviceSnmpV3Conf& from);
  DeviceSnmpV3Conf(DeviceSnmpV3Conf&& from) noexcept
    : DeviceSnmpV3Conf() {
    *this = ::std::move(from);
  }

  inline DeviceSnmpV3Conf& operator=(const DeviceSnmpV3Conf& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSnmpV3Conf& operator=(DeviceSnmpV3Conf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceSnmpV3Conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceSnmpV3Conf* internal_default_instance() {
    return reinterpret_cast<const DeviceSnmpV3Conf*>(
               &_DeviceSnmpV3Conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceSnmpV3Conf& a, DeviceSnmpV3Conf& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSnmpV3Conf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSnmpV3Conf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceSnmpV3Conf* New() const final {
    return CreateMaybeMessage<DeviceSnmpV3Conf>(nullptr);
  }

  DeviceSnmpV3Conf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSnmpV3Conf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceSnmpV3Conf& from);
  void MergeFrom(const DeviceSnmpV3Conf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSnmpV3Conf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeviceSnmpV3Conf";
  }
  protected:
  explicit DeviceSnmpV3Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kAuthenticationProtocolFieldNumber = 2,
    kAuthenticationPassphraseFieldNumber = 3,
    kPrivacyProtocolFieldNumber = 4,
    kPrivacyPassphraseFieldNumber = 5,
  };
  // string username = 1[json_name = "username", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string authentication_protocol = 2[json_name = "authenticationProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_authentication_protocol();
  const std::string& authentication_protocol() const;
  void set_authentication_protocol(const std::string& value);
  void set_authentication_protocol(std::string&& value);
  void set_authentication_protocol(const char* value);
  void set_authentication_protocol(const char* value, size_t size);
  std::string* mutable_authentication_protocol();
  std::string* release_authentication_protocol();
  void set_allocated_authentication_protocol(std::string* authentication_protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_authentication_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_authentication_protocol(
      std::string* authentication_protocol);
  private:
  const std::string& _internal_authentication_protocol() const;
  void _internal_set_authentication_protocol(const std::string& value);
  std::string* _internal_mutable_authentication_protocol();
  public:

  // string authentication_passphrase = 3[json_name = "authenticationPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_authentication_passphrase();
  const std::string& authentication_passphrase() const;
  void set_authentication_passphrase(const std::string& value);
  void set_authentication_passphrase(std::string&& value);
  void set_authentication_passphrase(const char* value);
  void set_authentication_passphrase(const char* value, size_t size);
  std::string* mutable_authentication_passphrase();
  std::string* release_authentication_passphrase();
  void set_allocated_authentication_passphrase(std::string* authentication_passphrase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_authentication_passphrase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_authentication_passphrase(
      std::string* authentication_passphrase);
  private:
  const std::string& _internal_authentication_passphrase() const;
  void _internal_set_authentication_passphrase(const std::string& value);
  std::string* _internal_mutable_authentication_passphrase();
  public:

  // string privacy_protocol = 4[json_name = "privacyProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_privacy_protocol();
  const std::string& privacy_protocol() const;
  void set_privacy_protocol(const std::string& value);
  void set_privacy_protocol(std::string&& value);
  void set_privacy_protocol(const char* value);
  void set_privacy_protocol(const char* value, size_t size);
  std::string* mutable_privacy_protocol();
  std::string* release_privacy_protocol();
  void set_allocated_privacy_protocol(std::string* privacy_protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_privacy_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_privacy_protocol(
      std::string* privacy_protocol);
  private:
  const std::string& _internal_privacy_protocol() const;
  void _internal_set_privacy_protocol(const std::string& value);
  std::string* _internal_mutable_privacy_protocol();
  public:

  // string privacy_passphrase = 5[json_name = "privacyPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_privacy_passphrase();
  const std::string& privacy_passphrase() const;
  void set_privacy_passphrase(const std::string& value);
  void set_privacy_passphrase(std::string&& value);
  void set_privacy_passphrase(const char* value);
  void set_privacy_passphrase(const char* value, size_t size);
  std::string* mutable_privacy_passphrase();
  std::string* release_privacy_passphrase();
  void set_allocated_privacy_passphrase(std::string* privacy_passphrase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_privacy_passphrase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_privacy_passphrase(
      std::string* privacy_passphrase);
  private:
  const std::string& _internal_privacy_passphrase() const;
  void _internal_set_privacy_passphrase(const std::string& value);
  std::string* _internal_mutable_privacy_passphrase();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeviceSnmpV3Conf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authentication_protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authentication_passphrase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privacy_protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privacy_passphrase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceNmsConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeviceNmsConfig) */ {
 public:
  inline DeviceNmsConfig() : DeviceNmsConfig(nullptr) {};
  virtual ~DeviceNmsConfig();

  DeviceNmsConfig(const DeviceNmsConfig& from);
  DeviceNmsConfig(DeviceNmsConfig&& from) noexcept
    : DeviceNmsConfig() {
    *this = ::std::move(from);
  }

  inline DeviceNmsConfig& operator=(const DeviceNmsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNmsConfig& operator=(DeviceNmsConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceNmsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNmsConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceNmsConfig*>(
               &_DeviceNmsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceNmsConfig& a, DeviceNmsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNmsConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNmsConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNmsConfig* New() const final {
    return CreateMaybeMessage<DeviceNmsConfig>(nullptr);
  }

  DeviceNmsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNmsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceNmsConfig& from);
  void MergeFrom(const DeviceNmsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceNmsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeviceNmsConfig";
  }
  protected:
  explicit DeviceNmsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 2,
    kIpAddressFieldNumber = 3,
    kSnmpFieldNumber = 4,
    kStFieldNumber = 5,
  };
  // string agent_id = 2[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_agent_id();
  const std::string& agent_id() const;
  void set_agent_id(const std::string& value);
  void set_agent_id(std::string&& value);
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  std::string* mutable_agent_id();
  std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_id(
      std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string ip_address = 3[json_name = "ipAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .kentik.device.v202308beta1.DeviceNmsSnmpConfig snmp = 4[json_name = "snmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_snmp() const;
  private:
  bool _internal_has_snmp() const;
  public:
  void clear_snmp();
  const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig& snmp() const;
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* release_snmp();
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* mutable_snmp();
  void set_allocated_snmp(::kentik::device::v202308beta1::DeviceNmsSnmpConfig* snmp);
  private:
  const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig& _internal_snmp() const;
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* _internal_mutable_snmp();
  public:
  void unsafe_arena_set_allocated_snmp(
      ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* snmp);
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* unsafe_arena_release_snmp();

  // .kentik.device.v202308beta1.DeviceNmsStConfig st = 5[json_name = "st", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_st() const;
  private:
  bool _internal_has_st() const;
  public:
  void clear_st();
  const ::kentik::device::v202308beta1::DeviceNmsStConfig& st() const;
  ::kentik::device::v202308beta1::DeviceNmsStConfig* release_st();
  ::kentik::device::v202308beta1::DeviceNmsStConfig* mutable_st();
  void set_allocated_st(::kentik::device::v202308beta1::DeviceNmsStConfig* st);
  private:
  const ::kentik::device::v202308beta1::DeviceNmsStConfig& _internal_st() const;
  ::kentik::device::v202308beta1::DeviceNmsStConfig* _internal_mutable_st();
  public:
  void unsafe_arena_set_allocated_st(
      ::kentik::device::v202308beta1::DeviceNmsStConfig* st);
  ::kentik::device::v202308beta1::DeviceNmsStConfig* unsafe_arena_release_st();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeviceNmsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* snmp_;
  ::kentik::device::v202308beta1::DeviceNmsStConfig* st_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceNmsSnmpConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeviceNmsSnmpConfig) */ {
 public:
  inline DeviceNmsSnmpConfig() : DeviceNmsSnmpConfig(nullptr) {};
  virtual ~DeviceNmsSnmpConfig();

  DeviceNmsSnmpConfig(const DeviceNmsSnmpConfig& from);
  DeviceNmsSnmpConfig(DeviceNmsSnmpConfig&& from) noexcept
    : DeviceNmsSnmpConfig() {
    *this = ::std::move(from);
  }

  inline DeviceNmsSnmpConfig& operator=(const DeviceNmsSnmpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNmsSnmpConfig& operator=(DeviceNmsSnmpConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceNmsSnmpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNmsSnmpConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceNmsSnmpConfig*>(
               &_DeviceNmsSnmpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceNmsSnmpConfig& a, DeviceNmsSnmpConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNmsSnmpConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNmsSnmpConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNmsSnmpConfig* New() const final {
    return CreateMaybeMessage<DeviceNmsSnmpConfig>(nullptr);
  }

  DeviceNmsSnmpConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNmsSnmpConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceNmsSnmpConfig& from);
  void MergeFrom(const DeviceNmsSnmpConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceNmsSnmpConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeviceNmsSnmpConfig";
  }
  protected:
  explicit DeviceNmsSnmpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialNameFieldNumber = 1,
    kTimeoutFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_credential_name();
  const std::string& credential_name() const;
  void set_credential_name(const std::string& value);
  void set_credential_name(std::string&& value);
  void set_credential_name(const char* value);
  void set_credential_name(const char* value, size_t size);
  std::string* mutable_credential_name();
  std::string* release_credential_name();
  void set_allocated_credential_name(std::string* credential_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_credential_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_credential_name(
      std::string* credential_name);
  private:
  const std::string& _internal_credential_name() const;
  void _internal_set_credential_name(const std::string& value);
  std::string* _internal_mutable_credential_name();
  public:

  // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      PROTOBUF_NAMESPACE_ID::Duration* timeout);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeviceNmsSnmpConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_name_;
  PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceNmsStConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeviceNmsStConfig) */ {
 public:
  inline DeviceNmsStConfig() : DeviceNmsStConfig(nullptr) {};
  virtual ~DeviceNmsStConfig();

  DeviceNmsStConfig(const DeviceNmsStConfig& from);
  DeviceNmsStConfig(DeviceNmsStConfig&& from) noexcept
    : DeviceNmsStConfig() {
    *this = ::std::move(from);
  }

  inline DeviceNmsStConfig& operator=(const DeviceNmsStConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNmsStConfig& operator=(DeviceNmsStConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceNmsStConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNmsStConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceNmsStConfig*>(
               &_DeviceNmsStConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceNmsStConfig& a, DeviceNmsStConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNmsStConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNmsStConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNmsStConfig* New() const final {
    return CreateMaybeMessage<DeviceNmsStConfig>(nullptr);
  }

  DeviceNmsStConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNmsStConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceNmsStConfig& from);
  void MergeFrom(const DeviceNmsStConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceNmsStConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeviceNmsStConfig";
  }
  protected:
  explicit DeviceNmsStConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialNameFieldNumber = 1,
    kTimeoutFieldNumber = 3,
    kPortFieldNumber = 2,
    kSecureFieldNumber = 4,
  };
  // string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_credential_name();
  const std::string& credential_name() const;
  void set_credential_name(const std::string& value);
  void set_credential_name(std::string&& value);
  void set_credential_name(const char* value);
  void set_credential_name(const char* value, size_t size);
  std::string* mutable_credential_name();
  std::string* release_credential_name();
  void set_allocated_credential_name(std::string* credential_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_credential_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_credential_name(
      std::string* credential_name);
  private:
  const std::string& _internal_credential_name() const;
  void _internal_set_credential_name(const std::string& value);
  std::string* _internal_mutable_credential_name();
  public:

  // .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      PROTOBUF_NAMESPACE_ID::Duration* timeout);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool secure = 4[json_name = "secure", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_secure();
  bool secure() const;
  void set_secure(bool value);
  private:
  bool _internal_secure() const;
  void _internal_set_secure(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeviceNmsStConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_name_;
  PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  bool secure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceConcise PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeviceConcise) */ {
 public:
  inline DeviceConcise() : DeviceConcise(nullptr) {};
  virtual ~DeviceConcise();

  DeviceConcise(const DeviceConcise& from);
  DeviceConcise(DeviceConcise&& from) noexcept
    : DeviceConcise() {
    *this = ::std::move(from);
  }

  inline DeviceConcise& operator=(const DeviceConcise& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConcise& operator=(DeviceConcise&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceConcise& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConcise* internal_default_instance() {
    return reinterpret_cast<const DeviceConcise*>(
               &_DeviceConcise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceConcise& a, DeviceConcise& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConcise* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConcise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConcise* New() const final {
    return CreateMaybeMessage<DeviceConcise>(nullptr);
  }

  DeviceConcise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConcise>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceConcise& from);
  void MergeFrom(const DeviceConcise& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConcise* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeviceConcise";
  }
  protected:
  explicit DeviceConcise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendingIpsFieldNumber = 6,
    kIdFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
    kDeviceSubtypeFieldNumber = 3,
    kCdnAttrFieldNumber = 4,
    kDeviceDescriptionFieldNumber = 5,
    kDeviceSnmpIpFieldNumber = 11,
    kDeviceSnmpCommunityFieldNumber = 12,
    kDeviceBgpTypeFieldNumber = 14,
    kDeviceBgpNeighborIpFieldNumber = 15,
    kDeviceBgpNeighborIp6FieldNumber = 16,
    kDeviceBgpNeighborAsnFieldNumber = 17,
    kDeviceBgpPasswordFieldNumber = 18,
    kDeviceBgpCredentialNameFieldNumber = 22,
    kFlowSnmpCredentialNameFieldNumber = 23,
    kDeviceSnmpV3ConfFieldNumber = 13,
    kNmsFieldNumber = 21,
    kDeviceSampleRateFieldNumber = 7,
    kPlanIdFieldNumber = 8,
    kSiteIdFieldNumber = 9,
    kMinimizeSnmpFieldNumber = 10,
    kDeviceBgpFlowspecFieldNumber = 20,
    kUseBgpDeviceIdFieldNumber = 19,
    kMonitoringTemplateIdFieldNumber = 24,
  };
  // repeated string sending_ips = 6[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int sending_ips_size() const;
  private:
  int _internal_sending_ips_size() const;
  public:
  void clear_sending_ips();
  const std::string& sending_ips(int index) const;
  std::string* mutable_sending_ips(int index);
  void set_sending_ips(int index, const std::string& value);
  void set_sending_ips(int index, std::string&& value);
  void set_sending_ips(int index, const char* value);
  void set_sending_ips(int index, const char* value, size_t size);
  std::string* add_sending_ips();
  void add_sending_ips(const std::string& value);
  void add_sending_ips(std::string&& value);
  void add_sending_ips(const char* value);
  void add_sending_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sending_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sending_ips();
  private:
  const std::string& _internal_sending_ips(int index) const;
  std::string* _internal_add_sending_ips();
  public:

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_name(
      std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_subtype();
  const std::string& device_subtype() const;
  void set_device_subtype(const std::string& value);
  void set_device_subtype(std::string&& value);
  void set_device_subtype(const char* value);
  void set_device_subtype(const char* value, size_t size);
  std::string* mutable_device_subtype();
  std::string* release_device_subtype();
  void set_allocated_device_subtype(std::string* device_subtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_subtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_subtype(
      std::string* device_subtype);
  private:
  const std::string& _internal_device_subtype() const;
  void _internal_set_device_subtype(const std::string& value);
  std::string* _internal_mutable_device_subtype();
  public:

  // string cdn_attr = 4[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cdn_attr();
  const std::string& cdn_attr() const;
  void set_cdn_attr(const std::string& value);
  void set_cdn_attr(std::string&& value);
  void set_cdn_attr(const char* value);
  void set_cdn_attr(const char* value, size_t size);
  std::string* mutable_cdn_attr();
  std::string* release_cdn_attr();
  void set_allocated_cdn_attr(std::string* cdn_attr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cdn_attr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cdn_attr(
      std::string* cdn_attr);
  private:
  const std::string& _internal_cdn_attr() const;
  void _internal_set_cdn_attr(const std::string& value);
  std::string* _internal_mutable_cdn_attr();
  public:

  // string device_description = 5[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_description();
  const std::string& device_description() const;
  void set_device_description(const std::string& value);
  void set_device_description(std::string&& value);
  void set_device_description(const char* value);
  void set_device_description(const char* value, size_t size);
  std::string* mutable_device_description();
  std::string* release_device_description();
  void set_allocated_device_description(std::string* device_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_description(
      std::string* device_description);
  private:
  const std::string& _internal_device_description() const;
  void _internal_set_device_description(const std::string& value);
  std::string* _internal_mutable_device_description();
  public:

  // string device_snmp_ip = 11[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_snmp_ip();
  const std::string& device_snmp_ip() const;
  void set_device_snmp_ip(const std::string& value);
  void set_device_snmp_ip(std::string&& value);
  void set_device_snmp_ip(const char* value);
  void set_device_snmp_ip(const char* value, size_t size);
  std::string* mutable_device_snmp_ip();
  std::string* release_device_snmp_ip();
  void set_allocated_device_snmp_ip(std::string* device_snmp_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_snmp_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_snmp_ip(
      std::string* device_snmp_ip);
  private:
  const std::string& _internal_device_snmp_ip() const;
  void _internal_set_device_snmp_ip(const std::string& value);
  std::string* _internal_mutable_device_snmp_ip();
  public:

  // string device_snmp_community = 12[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_snmp_community();
  const std::string& device_snmp_community() const;
  void set_device_snmp_community(const std::string& value);
  void set_device_snmp_community(std::string&& value);
  void set_device_snmp_community(const char* value);
  void set_device_snmp_community(const char* value, size_t size);
  std::string* mutable_device_snmp_community();
  std::string* release_device_snmp_community();
  void set_allocated_device_snmp_community(std::string* device_snmp_community);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_snmp_community();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_snmp_community(
      std::string* device_snmp_community);
  private:
  const std::string& _internal_device_snmp_community() const;
  void _internal_set_device_snmp_community(const std::string& value);
  std::string* _internal_mutable_device_snmp_community();
  public:

  // string device_bgp_type = 14[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_type();
  const std::string& device_bgp_type() const;
  void set_device_bgp_type(const std::string& value);
  void set_device_bgp_type(std::string&& value);
  void set_device_bgp_type(const char* value);
  void set_device_bgp_type(const char* value, size_t size);
  std::string* mutable_device_bgp_type();
  std::string* release_device_bgp_type();
  void set_allocated_device_bgp_type(std::string* device_bgp_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_type(
      std::string* device_bgp_type);
  private:
  const std::string& _internal_device_bgp_type() const;
  void _internal_set_device_bgp_type(const std::string& value);
  std::string* _internal_mutable_device_bgp_type();
  public:

  // string device_bgp_neighbor_ip = 15[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_neighbor_ip();
  const std::string& device_bgp_neighbor_ip() const;
  void set_device_bgp_neighbor_ip(const std::string& value);
  void set_device_bgp_neighbor_ip(std::string&& value);
  void set_device_bgp_neighbor_ip(const char* value);
  void set_device_bgp_neighbor_ip(const char* value, size_t size);
  std::string* mutable_device_bgp_neighbor_ip();
  std::string* release_device_bgp_neighbor_ip();
  void set_allocated_device_bgp_neighbor_ip(std::string* device_bgp_neighbor_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_neighbor_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_neighbor_ip(
      std::string* device_bgp_neighbor_ip);
  private:
  const std::string& _internal_device_bgp_neighbor_ip() const;
  void _internal_set_device_bgp_neighbor_ip(const std::string& value);
  std::string* _internal_mutable_device_bgp_neighbor_ip();
  public:

  // string device_bgp_neighbor_ip6 = 16[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_neighbor_ip6();
  const std::string& device_bgp_neighbor_ip6() const;
  void set_device_bgp_neighbor_ip6(const std::string& value);
  void set_device_bgp_neighbor_ip6(std::string&& value);
  void set_device_bgp_neighbor_ip6(const char* value);
  void set_device_bgp_neighbor_ip6(const char* value, size_t size);
  std::string* mutable_device_bgp_neighbor_ip6();
  std::string* release_device_bgp_neighbor_ip6();
  void set_allocated_device_bgp_neighbor_ip6(std::string* device_bgp_neighbor_ip6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_neighbor_ip6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_neighbor_ip6(
      std::string* device_bgp_neighbor_ip6);
  private:
  const std::string& _internal_device_bgp_neighbor_ip6() const;
  void _internal_set_device_bgp_neighbor_ip6(const std::string& value);
  std::string* _internal_mutable_device_bgp_neighbor_ip6();
  public:

  // string device_bgp_neighbor_asn = 17[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_neighbor_asn();
  const std::string& device_bgp_neighbor_asn() const;
  void set_device_bgp_neighbor_asn(const std::string& value);
  void set_device_bgp_neighbor_asn(std::string&& value);
  void set_device_bgp_neighbor_asn(const char* value);
  void set_device_bgp_neighbor_asn(const char* value, size_t size);
  std::string* mutable_device_bgp_neighbor_asn();
  std::string* release_device_bgp_neighbor_asn();
  void set_allocated_device_bgp_neighbor_asn(std::string* device_bgp_neighbor_asn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_neighbor_asn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_neighbor_asn(
      std::string* device_bgp_neighbor_asn);
  private:
  const std::string& _internal_device_bgp_neighbor_asn() const;
  void _internal_set_device_bgp_neighbor_asn(const std::string& value);
  std::string* _internal_mutable_device_bgp_neighbor_asn();
  public:

  // string device_bgp_password = 18[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_password();
  const std::string& device_bgp_password() const;
  void set_device_bgp_password(const std::string& value);
  void set_device_bgp_password(std::string&& value);
  void set_device_bgp_password(const char* value);
  void set_device_bgp_password(const char* value, size_t size);
  std::string* mutable_device_bgp_password();
  std::string* release_device_bgp_password();
  void set_allocated_device_bgp_password(std::string* device_bgp_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_password(
      std::string* device_bgp_password);
  private:
  const std::string& _internal_device_bgp_password() const;
  void _internal_set_device_bgp_password(const std::string& value);
  std::string* _internal_mutable_device_bgp_password();
  public:

  // string device_bgp_credential_name = 22[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_credential_name();
  const std::string& device_bgp_credential_name() const;
  void set_device_bgp_credential_name(const std::string& value);
  void set_device_bgp_credential_name(std::string&& value);
  void set_device_bgp_credential_name(const char* value);
  void set_device_bgp_credential_name(const char* value, size_t size);
  std::string* mutable_device_bgp_credential_name();
  std::string* release_device_bgp_credential_name();
  void set_allocated_device_bgp_credential_name(std::string* device_bgp_credential_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_credential_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_credential_name(
      std::string* device_bgp_credential_name);
  private:
  const std::string& _internal_device_bgp_credential_name() const;
  void _internal_set_device_bgp_credential_name(const std::string& value);
  std::string* _internal_mutable_device_bgp_credential_name();
  public:

  // string flow_snmp_credential_name = 23[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_flow_snmp_credential_name();
  const std::string& flow_snmp_credential_name() const;
  void set_flow_snmp_credential_name(const std::string& value);
  void set_flow_snmp_credential_name(std::string&& value);
  void set_flow_snmp_credential_name(const char* value);
  void set_flow_snmp_credential_name(const char* value, size_t size);
  std::string* mutable_flow_snmp_credential_name();
  std::string* release_flow_snmp_credential_name();
  void set_allocated_flow_snmp_credential_name(std::string* flow_snmp_credential_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_flow_snmp_credential_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_flow_snmp_credential_name(
      std::string* flow_snmp_credential_name);
  private:
  const std::string& _internal_flow_snmp_credential_name() const;
  void _internal_set_flow_snmp_credential_name(const std::string& value);
  std::string* _internal_mutable_flow_snmp_credential_name();
  public:

  // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 13[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device_snmp_v3_conf() const;
  private:
  bool _internal_has_device_snmp_v3_conf() const;
  public:
  void clear_device_snmp_v3_conf();
  const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& device_snmp_v3_conf() const;
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* release_device_snmp_v3_conf();
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* mutable_device_snmp_v3_conf();
  void set_allocated_device_snmp_v3_conf(::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf);
  private:
  const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& _internal_device_snmp_v3_conf() const;
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* _internal_mutable_device_snmp_v3_conf();
  public:
  void unsafe_arena_set_allocated_device_snmp_v3_conf(
      ::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf);
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* unsafe_arena_release_device_snmp_v3_conf();

  // .kentik.device.v202308beta1.DeviceNmsConfig nms = 21[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_nms() const;
  private:
  bool _internal_has_nms() const;
  public:
  void clear_nms();
  const ::kentik::device::v202308beta1::DeviceNmsConfig& nms() const;
  ::kentik::device::v202308beta1::DeviceNmsConfig* release_nms();
  ::kentik::device::v202308beta1::DeviceNmsConfig* mutable_nms();
  void set_allocated_nms(::kentik::device::v202308beta1::DeviceNmsConfig* nms);
  private:
  const ::kentik::device::v202308beta1::DeviceNmsConfig& _internal_nms() const;
  ::kentik::device::v202308beta1::DeviceNmsConfig* _internal_mutable_nms();
  public:
  void unsafe_arena_set_allocated_nms(
      ::kentik::device::v202308beta1::DeviceNmsConfig* nms);
  ::kentik::device::v202308beta1::DeviceNmsConfig* unsafe_arena_release_nms();

  // double device_sample_rate = 7[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_sample_rate();
  double device_sample_rate() const;
  void set_device_sample_rate(double value);
  private:
  double _internal_device_sample_rate() const;
  void _internal_set_device_sample_rate(double value);
  public:

  // uint32 plan_id = 8[json_name = "planId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_plan_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 plan_id() const;
  void set_plan_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_plan_id() const;
  void _internal_set_plan_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 site_id = 9[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_site_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 site_id() const;
  void set_site_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_site_id() const;
  void _internal_set_site_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool minimize_snmp = 10[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_minimize_snmp() const;
  private:
  bool _internal_has_minimize_snmp() const;
  public:
  void clear_minimize_snmp();
  bool minimize_snmp() const;
  void set_minimize_snmp(bool value);
  private:
  bool _internal_minimize_snmp() const;
  void _internal_set_minimize_snmp(bool value);
  public:

  // bool device_bgp_flowspec = 20[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_flowspec();
  bool device_bgp_flowspec() const;
  void set_device_bgp_flowspec(bool value);
  private:
  bool _internal_device_bgp_flowspec() const;
  void _internal_set_device_bgp_flowspec(bool value);
  public:

  // uint32 use_bgp_device_id = 19[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_use_bgp_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 use_bgp_device_id() const;
  void set_use_bgp_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_use_bgp_device_id() const;
  void _internal_set_use_bgp_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 monitoring_template_id = 24[json_name = "monitoringTemplateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_monitoring_template_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 monitoring_template_id() const;
  void set_monitoring_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_monitoring_template_id() const;
  void _internal_set_monitoring_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeviceConcise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sending_ips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_snmp_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_snmp_community_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_neighbor_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_neighbor_ip6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_neighbor_asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_credential_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_snmp_credential_name_;
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf_;
  ::kentik::device::v202308beta1::DeviceNmsConfig* nms_;
  double device_sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plan_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 site_id_;
  bool minimize_snmp_;
  bool device_bgp_flowspec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 use_bgp_device_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 monitoring_template_id_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class Site PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.Site) */ {
 public:
  inline Site() : Site(nullptr) {};
  virtual ~Site();

  Site(const Site& from);
  Site(Site&& from) noexcept
    : Site() {
    *this = ::std::move(from);
  }

  inline Site& operator=(const Site& from) {
    CopyFrom(from);
    return *this;
  }
  inline Site& operator=(Site&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Site& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Site* internal_default_instance() {
    return reinterpret_cast<const Site*>(
               &_Site_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Site& a, Site& b) {
    a.Swap(&b);
  }
  inline void Swap(Site* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Site* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Site* New() const final {
    return CreateMaybeMessage<Site>(nullptr);
  }

  Site* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Site>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Site& from);
  void MergeFrom(const Site& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Site* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.Site";
  }
  protected:
  explicit Site(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSiteNameFieldNumber = 2,
    kCompanyIdFieldNumber = 5,
    kLatFieldNumber = 3,
    kLonFieldNumber = 4,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_site_name();
  const std::string& site_name() const;
  void set_site_name(const std::string& value);
  void set_site_name(std::string&& value);
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  std::string* mutable_site_name();
  std::string* release_site_name();
  void set_allocated_site_name(std::string* site_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_name(
      std::string* site_name);
  private:
  const std::string& _internal_site_name() const;
  void _internal_set_site_name(const std::string& value);
  std::string* _internal_mutable_site_name();
  public:

  // string company_id = 5[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_company_id();
  const std::string& company_id() const;
  void set_company_id(const std::string& value);
  void set_company_id(std::string&& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  std::string* mutable_company_id();
  std::string* release_company_id();
  void set_allocated_company_id(std::string* company_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_company_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_company_id(
      std::string* company_id);
  private:
  const std::string& _internal_company_id() const;
  void _internal_set_company_id(const std::string& value);
  std::string* _internal_mutable_company_id();
  public:

  // double lat = 3[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 4[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.Site)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_id_;
  double lat_;
  double lon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class Plan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {};
  virtual ~Plan();

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(nullptr);
  }

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class Label PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.Label) */ {
 public:
  inline Label() : Label(nullptr) {};
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kUserIdFieldNumber = 6,
    kCompanyIdFieldNumber = 7,
    kColorFieldNumber = 8,
    kOrderFieldNumber = 9,
    kPivotDeviceIdFieldNumber = 10,
    kPivotLabelIdFieldNumber = 11,
    kEdateFieldNumber = 4,
    kCdateFieldNumber = 5,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string user_id = 6[json_name = "userId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string company_id = 7[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_company_id();
  const std::string& company_id() const;
  void set_company_id(const std::string& value);
  void set_company_id(std::string&& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  std::string* mutable_company_id();
  std::string* release_company_id();
  void set_allocated_company_id(std::string* company_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_company_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_company_id(
      std::string* company_id);
  private:
  const std::string& _internal_company_id() const;
  void _internal_set_company_id(const std::string& value);
  std::string* _internal_mutable_company_id();
  public:

  // string color = 8[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color(
      std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string order = 9[json_name = "order", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_order();
  const std::string& order() const;
  void set_order(const std::string& value);
  void set_order(std::string&& value);
  void set_order(const char* value);
  void set_order(const char* value, size_t size);
  std::string* mutable_order();
  std::string* release_order();
  void set_allocated_order(std::string* order);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order(
      std::string* order);
  private:
  const std::string& _internal_order() const;
  void _internal_set_order(const std::string& value);
  std::string* _internal_mutable_order();
  public:

  // string pivot_device_id = 10[json_name = "pivotDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_pivot_device_id();
  const std::string& pivot_device_id() const;
  void set_pivot_device_id(const std::string& value);
  void set_pivot_device_id(std::string&& value);
  void set_pivot_device_id(const char* value);
  void set_pivot_device_id(const char* value, size_t size);
  std::string* mutable_pivot_device_id();
  std::string* release_pivot_device_id();
  void set_allocated_pivot_device_id(std::string* pivot_device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pivot_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pivot_device_id(
      std::string* pivot_device_id);
  private:
  const std::string& _internal_pivot_device_id() const;
  void _internal_set_pivot_device_id(const std::string& value);
  std::string* _internal_mutable_pivot_device_id();
  public:

  // string pivot_label_id = 11[json_name = "pivotLabelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_pivot_label_id();
  const std::string& pivot_label_id() const;
  void set_pivot_label_id(const std::string& value);
  void set_pivot_label_id(std::string&& value);
  void set_pivot_label_id(const char* value);
  void set_pivot_label_id(const char* value, size_t size);
  std::string* mutable_pivot_label_id();
  std::string* release_pivot_label_id();
  void set_allocated_pivot_label_id(std::string* pivot_label_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pivot_label_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pivot_label_id(
      std::string* pivot_label_id);
  private:
  const std::string& _internal_pivot_label_id() const;
  void _internal_set_pivot_label_id(const std::string& value);
  std::string* _internal_mutable_pivot_label_id();
  public:

  // .google.protobuf.Timestamp edate = 4[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pivot_device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pivot_label_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class Interface PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.Interface) */ {
 public:
  inline Interface() : Interface(nullptr) {};
  virtual ~Interface();

  Interface(const Interface& from);
  Interface(Interface&& from) noexcept
    : Interface() {
    *this = ::std::move(from);
  }

  inline Interface& operator=(const Interface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface& operator=(Interface&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Interface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interface* internal_default_instance() {
    return reinterpret_cast<const Interface*>(
               &_Interface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Interface& a, Interface& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interface* New() const final {
    return CreateMaybeMessage<Interface>(nullptr);
  }

  Interface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interface& from);
  void MergeFrom(const Interface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.Interface";
  }
  protected:
  explicit Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceDescriptionFieldNumber = 1,
    kInitialSnmpSpeedFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kSnmpSpeedFieldNumber = 4,
    kSnmpAliasFieldNumber = 5,
    kSnmpIdFieldNumber = 6,
    kConnectivityTypeFieldNumber = 7,
    kNetworkBoundaryFieldNumber = 8,
    kProviderFieldNumber = 9,
  };
  // string interface_description = 1[json_name = "interfaceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_interface_description();
  const std::string& interface_description() const;
  void set_interface_description(const std::string& value);
  void set_interface_description(std::string&& value);
  void set_interface_description(const char* value);
  void set_interface_description(const char* value, size_t size);
  std::string* mutable_interface_description();
  std::string* release_interface_description();
  void set_allocated_interface_description(std::string* interface_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_description(
      std::string* interface_description);
  private:
  const std::string& _internal_interface_description() const;
  void _internal_set_interface_description(const std::string& value);
  std::string* _internal_mutable_interface_description();
  public:

  // string initial_snmp_speed = 2[json_name = "initialSnmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_initial_snmp_speed();
  const std::string& initial_snmp_speed() const;
  void set_initial_snmp_speed(const std::string& value);
  void set_initial_snmp_speed(std::string&& value);
  void set_initial_snmp_speed(const char* value);
  void set_initial_snmp_speed(const char* value, size_t size);
  std::string* mutable_initial_snmp_speed();
  std::string* release_initial_snmp_speed();
  void set_allocated_initial_snmp_speed(std::string* initial_snmp_speed);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_initial_snmp_speed();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_initial_snmp_speed(
      std::string* initial_snmp_speed);
  private:
  const std::string& _internal_initial_snmp_speed() const;
  void _internal_set_initial_snmp_speed(const std::string& value);
  std::string* _internal_mutable_initial_snmp_speed();
  public:

  // string device_id = 3[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string snmp_speed = 4[json_name = "snmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_snmp_speed();
  const std::string& snmp_speed() const;
  void set_snmp_speed(const std::string& value);
  void set_snmp_speed(std::string&& value);
  void set_snmp_speed(const char* value);
  void set_snmp_speed(const char* value, size_t size);
  std::string* mutable_snmp_speed();
  std::string* release_snmp_speed();
  void set_allocated_snmp_speed(std::string* snmp_speed);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_speed();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_speed(
      std::string* snmp_speed);
  private:
  const std::string& _internal_snmp_speed() const;
  void _internal_set_snmp_speed(const std::string& value);
  std::string* _internal_mutable_snmp_speed();
  public:

  // string snmp_alias = 5[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_snmp_alias();
  const std::string& snmp_alias() const;
  void set_snmp_alias(const std::string& value);
  void set_snmp_alias(std::string&& value);
  void set_snmp_alias(const char* value);
  void set_snmp_alias(const char* value, size_t size);
  std::string* mutable_snmp_alias();
  std::string* release_snmp_alias();
  void set_allocated_snmp_alias(std::string* snmp_alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_alias(
      std::string* snmp_alias);
  private:
  const std::string& _internal_snmp_alias() const;
  void _internal_set_snmp_alias(const std::string& value);
  std::string* _internal_mutable_snmp_alias();
  public:

  // string snmp_id = 6[json_name = "snmpId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_snmp_id();
  const std::string& snmp_id() const;
  void set_snmp_id(const std::string& value);
  void set_snmp_id(std::string&& value);
  void set_snmp_id(const char* value);
  void set_snmp_id(const char* value, size_t size);
  std::string* mutable_snmp_id();
  std::string* release_snmp_id();
  void set_allocated_snmp_id(std::string* snmp_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_id(
      std::string* snmp_id);
  private:
  const std::string& _internal_snmp_id() const;
  void _internal_set_snmp_id(const std::string& value);
  std::string* _internal_mutable_snmp_id();
  public:

  // string connectivity_type = 7[json_name = "connectivityType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_connectivity_type();
  const std::string& connectivity_type() const;
  void set_connectivity_type(const std::string& value);
  void set_connectivity_type(std::string&& value);
  void set_connectivity_type(const char* value);
  void set_connectivity_type(const char* value, size_t size);
  std::string* mutable_connectivity_type();
  std::string* release_connectivity_type();
  void set_allocated_connectivity_type(std::string* connectivity_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_connectivity_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_connectivity_type(
      std::string* connectivity_type);
  private:
  const std::string& _internal_connectivity_type() const;
  void _internal_set_connectivity_type(const std::string& value);
  std::string* _internal_mutable_connectivity_type();
  public:

  // string network_boundary = 8[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_network_boundary();
  const std::string& network_boundary() const;
  void set_network_boundary(const std::string& value);
  void set_network_boundary(std::string&& value);
  void set_network_boundary(const char* value);
  void set_network_boundary(const char* value, size_t size);
  std::string* mutable_network_boundary();
  std::string* release_network_boundary();
  void set_allocated_network_boundary(std::string* network_boundary);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_network_boundary();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_network_boundary(
      std::string* network_boundary);
  private:
  const std::string& _internal_network_boundary() const;
  void _internal_set_network_boundary(const std::string& value);
  std::string* _internal_mutable_network_boundary();
  public:

  // string provider = 9[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_provider(
      std::string* provider);
  private:
  const std::string& _internal_provider() const;
  void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.Interface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initial_snmp_speed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_speed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectivity_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_boundary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CustomColumnData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.CustomColumnData) */ {
 public:
  inline CustomColumnData() : CustomColumnData(nullptr) {};
  virtual ~CustomColumnData();

  CustomColumnData(const CustomColumnData& from);
  CustomColumnData(CustomColumnData&& from) noexcept
    : CustomColumnData() {
    *this = ::std::move(from);
  }

  inline CustomColumnData& operator=(const CustomColumnData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomColumnData& operator=(CustomColumnData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomColumnData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomColumnData* internal_default_instance() {
    return reinterpret_cast<const CustomColumnData*>(
               &_CustomColumnData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CustomColumnData& a, CustomColumnData& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomColumnData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomColumnData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomColumnData* New() const final {
    return CreateMaybeMessage<CustomColumnData>(nullptr);
  }

  CustomColumnData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomColumnData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomColumnData& from);
  void MergeFrom(const CustomColumnData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomColumnData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.CustomColumnData";
  }
  protected:
  explicit CustomColumnData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kFieldIdFieldNumber = 2,
    kColNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kColTypeFieldNumber = 5,
    kDeviceTypeFieldNumber = 6,
  };
  // string device_id = 1[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string field_id = 2[json_name = "fieldId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_field_id();
  const std::string& field_id() const;
  void set_field_id(const std::string& value);
  void set_field_id(std::string&& value);
  void set_field_id(const char* value);
  void set_field_id(const char* value, size_t size);
  std::string* mutable_field_id();
  std::string* release_field_id();
  void set_allocated_field_id(std::string* field_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_field_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_id(
      std::string* field_id);
  private:
  const std::string& _internal_field_id() const;
  void _internal_set_field_id(const std::string& value);
  std::string* _internal_mutable_field_id();
  public:

  // string col_name = 3[json_name = "colName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_col_name();
  const std::string& col_name() const;
  void set_col_name(const std::string& value);
  void set_col_name(std::string&& value);
  void set_col_name(const char* value);
  void set_col_name(const char* value, size_t size);
  std::string* mutable_col_name();
  std::string* release_col_name();
  void set_allocated_col_name(std::string* col_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_col_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_col_name(
      std::string* col_name);
  private:
  const std::string& _internal_col_name() const;
  void _internal_set_col_name(const std::string& value);
  std::string* _internal_mutable_col_name();
  public:

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string col_type = 5[json_name = "colType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_col_type();
  const std::string& col_type() const;
  void set_col_type(const std::string& value);
  void set_col_type(std::string&& value);
  void set_col_type(const char* value);
  void set_col_type(const char* value, size_t size);
  std::string* mutable_col_type();
  std::string* release_col_type();
  void set_allocated_col_type(std::string* col_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_col_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_col_type(
      std::string* col_type);
  private:
  const std::string& _internal_col_type() const;
  void _internal_set_col_type(const std::string& value);
  std::string* _internal_mutable_col_type();
  public:

  // string device_type = 6[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_type();
  const std::string& device_type() const;
  void set_device_type(const std::string& value);
  void set_device_type(std::string&& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  std::string* mutable_device_type();
  std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_type(
      std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.CustomColumnData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GnmiV1Conf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.GnmiV1Conf) */ {
 public:
  inline GnmiV1Conf() : GnmiV1Conf(nullptr) {};
  virtual ~GnmiV1Conf();

  GnmiV1Conf(const GnmiV1Conf& from);
  GnmiV1Conf(GnmiV1Conf&& from) noexcept
    : GnmiV1Conf() {
    *this = ::std::move(from);
  }

  inline GnmiV1Conf& operator=(const GnmiV1Conf& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnmiV1Conf& operator=(GnmiV1Conf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnmiV1Conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnmiV1Conf* internal_default_instance() {
    return reinterpret_cast<const GnmiV1Conf*>(
               &_GnmiV1Conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GnmiV1Conf& a, GnmiV1Conf& b) {
    a.Swap(&b);
  }
  inline void Swap(GnmiV1Conf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnmiV1Conf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnmiV1Conf* New() const final {
    return CreateMaybeMessage<GnmiV1Conf>(nullptr);
  }

  GnmiV1Conf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnmiV1Conf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnmiV1Conf& from);
  void MergeFrom(const GnmiV1Conf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnmiV1Conf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.GnmiV1Conf";
  }
  protected:
  explicit GnmiV1Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDialoutServerFieldNumber = 1,
  };
  // string dialout_server = 1[json_name = "dialoutServer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dialout_server();
  const std::string& dialout_server() const;
  void set_dialout_server(const std::string& value);
  void set_dialout_server(std::string&& value);
  void set_dialout_server(const char* value);
  void set_dialout_server(const char* value, size_t size);
  std::string* mutable_dialout_server();
  std::string* release_dialout_server();
  void set_allocated_dialout_server(std::string* dialout_server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dialout_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dialout_server(
      std::string* dialout_server);
  private:
  const std::string& _internal_dialout_server() const;
  void _internal_set_dialout_server(const std::string& value);
  std::string* _internal_mutable_dialout_server();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.GnmiV1Conf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dialout_server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceDetailed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeviceDetailed) */ {
 public:
  inline DeviceDetailed() : DeviceDetailed(nullptr) {};
  virtual ~DeviceDetailed();

  DeviceDetailed(const DeviceDetailed& from);
  DeviceDetailed(DeviceDetailed&& from) noexcept
    : DeviceDetailed() {
    *this = ::std::move(from);
  }

  inline DeviceDetailed& operator=(const DeviceDetailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDetailed& operator=(DeviceDetailed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceDetailed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDetailed* internal_default_instance() {
    return reinterpret_cast<const DeviceDetailed*>(
               &_DeviceDetailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeviceDetailed& a, DeviceDetailed& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDetailed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceDetailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceDetailed* New() const final {
    return CreateMaybeMessage<DeviceDetailed>(nullptr);
  }

  DeviceDetailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDetailed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceDetailed& from);
  void MergeFrom(const DeviceDetailed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDetailed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeviceDetailed";
  }
  protected:
  explicit DeviceDetailed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 9,
    kAllInterfacesFieldNumber = 10,
    kSendingIpsFieldNumber = 13,
    kCustomColumnDataFieldNumber = 28,
    kIdFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
    kDeviceNameFieldNumber = 3,
    kDeviceAliasFieldNumber = 4,
    kDeviceTypeFieldNumber = 5,
    kDeviceDescriptionFieldNumber = 6,
    kDeviceFlowTypeFieldNumber = 11,
    kDeviceSampleRateFieldNumber = 12,
    kDeviceSnmpIpFieldNumber = 14,
    kDeviceSnmpCommunityFieldNumber = 15,
    kDeviceBgpTypeFieldNumber = 17,
    kDeviceBgpNeighborIpFieldNumber = 18,
    kDeviceBgpNeighborIp6FieldNumber = 19,
    kDeviceBgpNeighborAsnFieldNumber = 20,
    kDeviceBgpPasswordFieldNumber = 22,
    kBgpLookupStrategyFieldNumber = 24,
    kDeviceStatusFieldNumber = 25,
    kUseBgpDeviceIdFieldNumber = 26,
    kCustomColumnsFieldNumber = 27,
    kDeviceChfClientPortFieldNumber = 29,
    kDeviceChfClientProtocolFieldNumber = 30,
    kDeviceChfInterfaceFieldNumber = 31,
    kDeviceAgentTypeFieldNumber = 32,
    kDeviceProxyBgpFieldNumber = 35,
    kDeviceProxyBgp6FieldNumber = 36,
    kCdnAttrFieldNumber = 41,
    kBgpPeerIp4FieldNumber = 42,
    kBgpPeerIp6FieldNumber = 43,
    kDeviceSubtypeFieldNumber = 44,
    kDeviceVendorTypeFieldNumber = 45,
    kDeviceModelTypeFieldNumber = 46,
    kCloudExportIdFieldNumber = 47,
    kDeviceKproxyFieldNumber = 48,
    kSnmpEnabledFieldNumber = 49,
    kSnmpDisabledReasonFieldNumber = 50,
    kSnmpDisabledReasonOtherFieldNumber = 51,
    kBgpDisabledReasonFieldNumber = 52,
    kBgpDisabledReasonOtherFieldNumber = 53,
    kDeviceManufacturerFieldNumber = 54,
    kDeviceAlertFieldNumber = 55,
    kRoleFieldNumber = 56,
    kDeviceBgpCredentialNameFieldNumber = 62,
    kFlowSnmpCredentialNameFieldNumber = 63,
    kSiteFieldNumber = 7,
    kPlanFieldNumber = 8,
    kCreatedDateFieldNumber = 37,
    kUpdatedDateFieldNumber = 38,
    kDeviceSnmpV3ConfFieldNumber = 40,
    kDeviceGnmiV1ConfFieldNumber = 57,
    kNmsFieldNumber = 61,
    kMinimizeSnmpFieldNumber = 16,
    kDeviceBgpFlowspecFieldNumber = 21,
    kDeviceBgpLabelUnicastFieldNumber = 23,
    kDeviceSnmpV3ConfEnabledFieldNumber = 39,
    kMaxFlowRateFieldNumber = 33,
    kMaxBigFlowRateFieldNumber = 34,
    kUseAsnFromFlowFieldNumber = 58,
    kMaxInterfaceFieldNumber = 59,
    kMaxInterfaceCheckFieldNumber = 60,
  };
  // repeated .kentik.device.v202308beta1.Label labels = 9[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::kentik::device::v202308beta1::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Label >*
      mutable_labels();
  private:
  const ::kentik::device::v202308beta1::Label& _internal_labels(int index) const;
  ::kentik::device::v202308beta1::Label* _internal_add_labels();
  public:
  const ::kentik::device::v202308beta1::Label& labels(int index) const;
  ::kentik::device::v202308beta1::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Label >&
      labels() const;

  // repeated .kentik.device.v202308beta1.Interface all_interfaces = 10[json_name = "allInterfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int all_interfaces_size() const;
  private:
  int _internal_all_interfaces_size() const;
  public:
  void clear_all_interfaces();
  ::kentik::device::v202308beta1::Interface* mutable_all_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Interface >*
      mutable_all_interfaces();
  private:
  const ::kentik::device::v202308beta1::Interface& _internal_all_interfaces(int index) const;
  ::kentik::device::v202308beta1::Interface* _internal_add_all_interfaces();
  public:
  const ::kentik::device::v202308beta1::Interface& all_interfaces(int index) const;
  ::kentik::device::v202308beta1::Interface* add_all_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Interface >&
      all_interfaces() const;

  // repeated string sending_ips = 13[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int sending_ips_size() const;
  private:
  int _internal_sending_ips_size() const;
  public:
  void clear_sending_ips();
  const std::string& sending_ips(int index) const;
  std::string* mutable_sending_ips(int index);
  void set_sending_ips(int index, const std::string& value);
  void set_sending_ips(int index, std::string&& value);
  void set_sending_ips(int index, const char* value);
  void set_sending_ips(int index, const char* value, size_t size);
  std::string* add_sending_ips();
  void add_sending_ips(const std::string& value);
  void add_sending_ips(std::string&& value);
  void add_sending_ips(const char* value);
  void add_sending_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sending_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sending_ips();
  private:
  const std::string& _internal_sending_ips(int index) const;
  std::string* _internal_add_sending_ips();
  public:

  // repeated .kentik.device.v202308beta1.CustomColumnData custom_column_data = 28[json_name = "customColumnData", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int custom_column_data_size() const;
  private:
  int _internal_custom_column_data_size() const;
  public:
  void clear_custom_column_data();
  ::kentik::device::v202308beta1::CustomColumnData* mutable_custom_column_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::CustomColumnData >*
      mutable_custom_column_data();
  private:
  const ::kentik::device::v202308beta1::CustomColumnData& _internal_custom_column_data(int index) const;
  ::kentik::device::v202308beta1::CustomColumnData* _internal_add_custom_column_data();
  public:
  const ::kentik::device::v202308beta1::CustomColumnData& custom_column_data(int index) const;
  ::kentik::device::v202308beta1::CustomColumnData* add_custom_column_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::CustomColumnData >&
      custom_column_data() const;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_company_id();
  const std::string& company_id() const;
  void set_company_id(const std::string& value);
  void set_company_id(std::string&& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  std::string* mutable_company_id();
  std::string* release_company_id();
  void set_allocated_company_id(std::string* company_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_company_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_company_id(
      std::string* company_id);
  private:
  const std::string& _internal_company_id() const;
  void _internal_set_company_id(const std::string& value);
  std::string* _internal_mutable_company_id();
  public:

  // string device_name = 3[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_name(
      std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string device_alias = 4[json_name = "deviceAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_alias();
  const std::string& device_alias() const;
  void set_device_alias(const std::string& value);
  void set_device_alias(std::string&& value);
  void set_device_alias(const char* value);
  void set_device_alias(const char* value, size_t size);
  std::string* mutable_device_alias();
  std::string* release_device_alias();
  void set_allocated_device_alias(std::string* device_alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_alias(
      std::string* device_alias);
  private:
  const std::string& _internal_device_alias() const;
  void _internal_set_device_alias(const std::string& value);
  std::string* _internal_mutable_device_alias();
  public:

  // string device_type = 5[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_type();
  const std::string& device_type() const;
  void set_device_type(const std::string& value);
  void set_device_type(std::string&& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  std::string* mutable_device_type();
  std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_type(
      std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string device_description = 6[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_description();
  const std::string& device_description() const;
  void set_device_description(const std::string& value);
  void set_device_description(std::string&& value);
  void set_device_description(const char* value);
  void set_device_description(const char* value, size_t size);
  std::string* mutable_device_description();
  std::string* release_device_description();
  void set_allocated_device_description(std::string* device_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_description(
      std::string* device_description);
  private:
  const std::string& _internal_device_description() const;
  void _internal_set_device_description(const std::string& value);
  std::string* _internal_mutable_device_description();
  public:

  // string device_flow_type = 11[json_name = "deviceFlowType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_flow_type();
  const std::string& device_flow_type() const;
  void set_device_flow_type(const std::string& value);
  void set_device_flow_type(std::string&& value);
  void set_device_flow_type(const char* value);
  void set_device_flow_type(const char* value, size_t size);
  std::string* mutable_device_flow_type();
  std::string* release_device_flow_type();
  void set_allocated_device_flow_type(std::string* device_flow_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_flow_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_flow_type(
      std::string* device_flow_type);
  private:
  const std::string& _internal_device_flow_type() const;
  void _internal_set_device_flow_type(const std::string& value);
  std::string* _internal_mutable_device_flow_type();
  public:

  // string device_sample_rate = 12[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_sample_rate();
  const std::string& device_sample_rate() const;
  void set_device_sample_rate(const std::string& value);
  void set_device_sample_rate(std::string&& value);
  void set_device_sample_rate(const char* value);
  void set_device_sample_rate(const char* value, size_t size);
  std::string* mutable_device_sample_rate();
  std::string* release_device_sample_rate();
  void set_allocated_device_sample_rate(std::string* device_sample_rate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_sample_rate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_sample_rate(
      std::string* device_sample_rate);
  private:
  const std::string& _internal_device_sample_rate() const;
  void _internal_set_device_sample_rate(const std::string& value);
  std::string* _internal_mutable_device_sample_rate();
  public:

  // string device_snmp_ip = 14[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_snmp_ip();
  const std::string& device_snmp_ip() const;
  void set_device_snmp_ip(const std::string& value);
  void set_device_snmp_ip(std::string&& value);
  void set_device_snmp_ip(const char* value);
  void set_device_snmp_ip(const char* value, size_t size);
  std::string* mutable_device_snmp_ip();
  std::string* release_device_snmp_ip();
  void set_allocated_device_snmp_ip(std::string* device_snmp_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_snmp_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_snmp_ip(
      std::string* device_snmp_ip);
  private:
  const std::string& _internal_device_snmp_ip() const;
  void _internal_set_device_snmp_ip(const std::string& value);
  std::string* _internal_mutable_device_snmp_ip();
  public:

  // string device_snmp_community = 15[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_snmp_community();
  const std::string& device_snmp_community() const;
  void set_device_snmp_community(const std::string& value);
  void set_device_snmp_community(std::string&& value);
  void set_device_snmp_community(const char* value);
  void set_device_snmp_community(const char* value, size_t size);
  std::string* mutable_device_snmp_community();
  std::string* release_device_snmp_community();
  void set_allocated_device_snmp_community(std::string* device_snmp_community);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_snmp_community();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_snmp_community(
      std::string* device_snmp_community);
  private:
  const std::string& _internal_device_snmp_community() const;
  void _internal_set_device_snmp_community(const std::string& value);
  std::string* _internal_mutable_device_snmp_community();
  public:

  // string device_bgp_type = 17[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_type();
  const std::string& device_bgp_type() const;
  void set_device_bgp_type(const std::string& value);
  void set_device_bgp_type(std::string&& value);
  void set_device_bgp_type(const char* value);
  void set_device_bgp_type(const char* value, size_t size);
  std::string* mutable_device_bgp_type();
  std::string* release_device_bgp_type();
  void set_allocated_device_bgp_type(std::string* device_bgp_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_type(
      std::string* device_bgp_type);
  private:
  const std::string& _internal_device_bgp_type() const;
  void _internal_set_device_bgp_type(const std::string& value);
  std::string* _internal_mutable_device_bgp_type();
  public:

  // string device_bgp_neighbor_ip = 18[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_neighbor_ip();
  const std::string& device_bgp_neighbor_ip() const;
  void set_device_bgp_neighbor_ip(const std::string& value);
  void set_device_bgp_neighbor_ip(std::string&& value);
  void set_device_bgp_neighbor_ip(const char* value);
  void set_device_bgp_neighbor_ip(const char* value, size_t size);
  std::string* mutable_device_bgp_neighbor_ip();
  std::string* release_device_bgp_neighbor_ip();
  void set_allocated_device_bgp_neighbor_ip(std::string* device_bgp_neighbor_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_neighbor_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_neighbor_ip(
      std::string* device_bgp_neighbor_ip);
  private:
  const std::string& _internal_device_bgp_neighbor_ip() const;
  void _internal_set_device_bgp_neighbor_ip(const std::string& value);
  std::string* _internal_mutable_device_bgp_neighbor_ip();
  public:

  // string device_bgp_neighbor_ip6 = 19[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_neighbor_ip6();
  const std::string& device_bgp_neighbor_ip6() const;
  void set_device_bgp_neighbor_ip6(const std::string& value);
  void set_device_bgp_neighbor_ip6(std::string&& value);
  void set_device_bgp_neighbor_ip6(const char* value);
  void set_device_bgp_neighbor_ip6(const char* value, size_t size);
  std::string* mutable_device_bgp_neighbor_ip6();
  std::string* release_device_bgp_neighbor_ip6();
  void set_allocated_device_bgp_neighbor_ip6(std::string* device_bgp_neighbor_ip6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_neighbor_ip6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_neighbor_ip6(
      std::string* device_bgp_neighbor_ip6);
  private:
  const std::string& _internal_device_bgp_neighbor_ip6() const;
  void _internal_set_device_bgp_neighbor_ip6(const std::string& value);
  std::string* _internal_mutable_device_bgp_neighbor_ip6();
  public:

  // string device_bgp_neighbor_asn = 20[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_neighbor_asn();
  const std::string& device_bgp_neighbor_asn() const;
  void set_device_bgp_neighbor_asn(const std::string& value);
  void set_device_bgp_neighbor_asn(std::string&& value);
  void set_device_bgp_neighbor_asn(const char* value);
  void set_device_bgp_neighbor_asn(const char* value, size_t size);
  std::string* mutable_device_bgp_neighbor_asn();
  std::string* release_device_bgp_neighbor_asn();
  void set_allocated_device_bgp_neighbor_asn(std::string* device_bgp_neighbor_asn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_neighbor_asn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_neighbor_asn(
      std::string* device_bgp_neighbor_asn);
  private:
  const std::string& _internal_device_bgp_neighbor_asn() const;
  void _internal_set_device_bgp_neighbor_asn(const std::string& value);
  std::string* _internal_mutable_device_bgp_neighbor_asn();
  public:

  // string device_bgp_password = 22[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_password();
  const std::string& device_bgp_password() const;
  void set_device_bgp_password(const std::string& value);
  void set_device_bgp_password(std::string&& value);
  void set_device_bgp_password(const char* value);
  void set_device_bgp_password(const char* value, size_t size);
  std::string* mutable_device_bgp_password();
  std::string* release_device_bgp_password();
  void set_allocated_device_bgp_password(std::string* device_bgp_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_password(
      std::string* device_bgp_password);
  private:
  const std::string& _internal_device_bgp_password() const;
  void _internal_set_device_bgp_password(const std::string& value);
  std::string* _internal_mutable_device_bgp_password();
  public:

  // string bgp_lookup_strategy = 24[json_name = "bgpLookupStrategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_bgp_lookup_strategy();
  const std::string& bgp_lookup_strategy() const;
  void set_bgp_lookup_strategy(const std::string& value);
  void set_bgp_lookup_strategy(std::string&& value);
  void set_bgp_lookup_strategy(const char* value);
  void set_bgp_lookup_strategy(const char* value, size_t size);
  std::string* mutable_bgp_lookup_strategy();
  std::string* release_bgp_lookup_strategy();
  void set_allocated_bgp_lookup_strategy(std::string* bgp_lookup_strategy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bgp_lookup_strategy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bgp_lookup_strategy(
      std::string* bgp_lookup_strategy);
  private:
  const std::string& _internal_bgp_lookup_strategy() const;
  void _internal_set_bgp_lookup_strategy(const std::string& value);
  std::string* _internal_mutable_bgp_lookup_strategy();
  public:

  // string device_status = 25[json_name = "deviceStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_status();
  const std::string& device_status() const;
  void set_device_status(const std::string& value);
  void set_device_status(std::string&& value);
  void set_device_status(const char* value);
  void set_device_status(const char* value, size_t size);
  std::string* mutable_device_status();
  std::string* release_device_status();
  void set_allocated_device_status(std::string* device_status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_status(
      std::string* device_status);
  private:
  const std::string& _internal_device_status() const;
  void _internal_set_device_status(const std::string& value);
  std::string* _internal_mutable_device_status();
  public:

  // string use_bgp_device_id = 26[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_use_bgp_device_id();
  const std::string& use_bgp_device_id() const;
  void set_use_bgp_device_id(const std::string& value);
  void set_use_bgp_device_id(std::string&& value);
  void set_use_bgp_device_id(const char* value);
  void set_use_bgp_device_id(const char* value, size_t size);
  std::string* mutable_use_bgp_device_id();
  std::string* release_use_bgp_device_id();
  void set_allocated_use_bgp_device_id(std::string* use_bgp_device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_use_bgp_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_use_bgp_device_id(
      std::string* use_bgp_device_id);
  private:
  const std::string& _internal_use_bgp_device_id() const;
  void _internal_set_use_bgp_device_id(const std::string& value);
  std::string* _internal_mutable_use_bgp_device_id();
  public:

  // string custom_columns = 27[json_name = "customColumns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_custom_columns();
  const std::string& custom_columns() const;
  void set_custom_columns(const std::string& value);
  void set_custom_columns(std::string&& value);
  void set_custom_columns(const char* value);
  void set_custom_columns(const char* value, size_t size);
  std::string* mutable_custom_columns();
  std::string* release_custom_columns();
  void set_allocated_custom_columns(std::string* custom_columns);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_custom_columns();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_custom_columns(
      std::string* custom_columns);
  private:
  const std::string& _internal_custom_columns() const;
  void _internal_set_custom_columns(const std::string& value);
  std::string* _internal_mutable_custom_columns();
  public:

  // string device_chf_client_port = 29[json_name = "deviceChfClientPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_chf_client_port();
  const std::string& device_chf_client_port() const;
  void set_device_chf_client_port(const std::string& value);
  void set_device_chf_client_port(std::string&& value);
  void set_device_chf_client_port(const char* value);
  void set_device_chf_client_port(const char* value, size_t size);
  std::string* mutable_device_chf_client_port();
  std::string* release_device_chf_client_port();
  void set_allocated_device_chf_client_port(std::string* device_chf_client_port);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_chf_client_port();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_chf_client_port(
      std::string* device_chf_client_port);
  private:
  const std::string& _internal_device_chf_client_port() const;
  void _internal_set_device_chf_client_port(const std::string& value);
  std::string* _internal_mutable_device_chf_client_port();
  public:

  // string device_chf_client_protocol = 30[json_name = "deviceChfClientProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_chf_client_protocol();
  const std::string& device_chf_client_protocol() const;
  void set_device_chf_client_protocol(const std::string& value);
  void set_device_chf_client_protocol(std::string&& value);
  void set_device_chf_client_protocol(const char* value);
  void set_device_chf_client_protocol(const char* value, size_t size);
  std::string* mutable_device_chf_client_protocol();
  std::string* release_device_chf_client_protocol();
  void set_allocated_device_chf_client_protocol(std::string* device_chf_client_protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_chf_client_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_chf_client_protocol(
      std::string* device_chf_client_protocol);
  private:
  const std::string& _internal_device_chf_client_protocol() const;
  void _internal_set_device_chf_client_protocol(const std::string& value);
  std::string* _internal_mutable_device_chf_client_protocol();
  public:

  // string device_chf_interface = 31[json_name = "deviceChfInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_chf_interface();
  const std::string& device_chf_interface() const;
  void set_device_chf_interface(const std::string& value);
  void set_device_chf_interface(std::string&& value);
  void set_device_chf_interface(const char* value);
  void set_device_chf_interface(const char* value, size_t size);
  std::string* mutable_device_chf_interface();
  std::string* release_device_chf_interface();
  void set_allocated_device_chf_interface(std::string* device_chf_interface);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_chf_interface();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_chf_interface(
      std::string* device_chf_interface);
  private:
  const std::string& _internal_device_chf_interface() const;
  void _internal_set_device_chf_interface(const std::string& value);
  std::string* _internal_mutable_device_chf_interface();
  public:

  // string device_agent_type = 32[json_name = "deviceAgentType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_agent_type();
  const std::string& device_agent_type() const;
  void set_device_agent_type(const std::string& value);
  void set_device_agent_type(std::string&& value);
  void set_device_agent_type(const char* value);
  void set_device_agent_type(const char* value, size_t size);
  std::string* mutable_device_agent_type();
  std::string* release_device_agent_type();
  void set_allocated_device_agent_type(std::string* device_agent_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_agent_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_agent_type(
      std::string* device_agent_type);
  private:
  const std::string& _internal_device_agent_type() const;
  void _internal_set_device_agent_type(const std::string& value);
  std::string* _internal_mutable_device_agent_type();
  public:

  // string device_proxy_bgp = 35[json_name = "deviceProxyBgp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_proxy_bgp();
  const std::string& device_proxy_bgp() const;
  void set_device_proxy_bgp(const std::string& value);
  void set_device_proxy_bgp(std::string&& value);
  void set_device_proxy_bgp(const char* value);
  void set_device_proxy_bgp(const char* value, size_t size);
  std::string* mutable_device_proxy_bgp();
  std::string* release_device_proxy_bgp();
  void set_allocated_device_proxy_bgp(std::string* device_proxy_bgp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_proxy_bgp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_proxy_bgp(
      std::string* device_proxy_bgp);
  private:
  const std::string& _internal_device_proxy_bgp() const;
  void _internal_set_device_proxy_bgp(const std::string& value);
  std::string* _internal_mutable_device_proxy_bgp();
  public:

  // string device_proxy_bgp6 = 36[json_name = "deviceProxyBgp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_proxy_bgp6();
  const std::string& device_proxy_bgp6() const;
  void set_device_proxy_bgp6(const std::string& value);
  void set_device_proxy_bgp6(std::string&& value);
  void set_device_proxy_bgp6(const char* value);
  void set_device_proxy_bgp6(const char* value, size_t size);
  std::string* mutable_device_proxy_bgp6();
  std::string* release_device_proxy_bgp6();
  void set_allocated_device_proxy_bgp6(std::string* device_proxy_bgp6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_proxy_bgp6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_proxy_bgp6(
      std::string* device_proxy_bgp6);
  private:
  const std::string& _internal_device_proxy_bgp6() const;
  void _internal_set_device_proxy_bgp6(const std::string& value);
  std::string* _internal_mutable_device_proxy_bgp6();
  public:

  // string cdn_attr = 41[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cdn_attr();
  const std::string& cdn_attr() const;
  void set_cdn_attr(const std::string& value);
  void set_cdn_attr(std::string&& value);
  void set_cdn_attr(const char* value);
  void set_cdn_attr(const char* value, size_t size);
  std::string* mutable_cdn_attr();
  std::string* release_cdn_attr();
  void set_allocated_cdn_attr(std::string* cdn_attr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cdn_attr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cdn_attr(
      std::string* cdn_attr);
  private:
  const std::string& _internal_cdn_attr() const;
  void _internal_set_cdn_attr(const std::string& value);
  std::string* _internal_mutable_cdn_attr();
  public:

  // string bgp_peer_ip4 = 42[json_name = "bgpPeerIp4", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_bgp_peer_ip4();
  const std::string& bgp_peer_ip4() const;
  void set_bgp_peer_ip4(const std::string& value);
  void set_bgp_peer_ip4(std::string&& value);
  void set_bgp_peer_ip4(const char* value);
  void set_bgp_peer_ip4(const char* value, size_t size);
  std::string* mutable_bgp_peer_ip4();
  std::string* release_bgp_peer_ip4();
  void set_allocated_bgp_peer_ip4(std::string* bgp_peer_ip4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bgp_peer_ip4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bgp_peer_ip4(
      std::string* bgp_peer_ip4);
  private:
  const std::string& _internal_bgp_peer_ip4() const;
  void _internal_set_bgp_peer_ip4(const std::string& value);
  std::string* _internal_mutable_bgp_peer_ip4();
  public:

  // string bgp_peer_ip6 = 43[json_name = "bgpPeerIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_bgp_peer_ip6();
  const std::string& bgp_peer_ip6() const;
  void set_bgp_peer_ip6(const std::string& value);
  void set_bgp_peer_ip6(std::string&& value);
  void set_bgp_peer_ip6(const char* value);
  void set_bgp_peer_ip6(const char* value, size_t size);
  std::string* mutable_bgp_peer_ip6();
  std::string* release_bgp_peer_ip6();
  void set_allocated_bgp_peer_ip6(std::string* bgp_peer_ip6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bgp_peer_ip6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bgp_peer_ip6(
      std::string* bgp_peer_ip6);
  private:
  const std::string& _internal_bgp_peer_ip6() const;
  void _internal_set_bgp_peer_ip6(const std::string& value);
  std::string* _internal_mutable_bgp_peer_ip6();
  public:

  // string device_subtype = 44[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_subtype();
  const std::string& device_subtype() const;
  void set_device_subtype(const std::string& value);
  void set_device_subtype(std::string&& value);
  void set_device_subtype(const char* value);
  void set_device_subtype(const char* value, size_t size);
  std::string* mutable_device_subtype();
  std::string* release_device_subtype();
  void set_allocated_device_subtype(std::string* device_subtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_subtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_subtype(
      std::string* device_subtype);
  private:
  const std::string& _internal_device_subtype() const;
  void _internal_set_device_subtype(const std::string& value);
  std::string* _internal_mutable_device_subtype();
  public:

  // string device_vendor_type = 45[json_name = "deviceVendorType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_vendor_type();
  const std::string& device_vendor_type() const;
  void set_device_vendor_type(const std::string& value);
  void set_device_vendor_type(std::string&& value);
  void set_device_vendor_type(const char* value);
  void set_device_vendor_type(const char* value, size_t size);
  std::string* mutable_device_vendor_type();
  std::string* release_device_vendor_type();
  void set_allocated_device_vendor_type(std::string* device_vendor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_vendor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_vendor_type(
      std::string* device_vendor_type);
  private:
  const std::string& _internal_device_vendor_type() const;
  void _internal_set_device_vendor_type(const std::string& value);
  std::string* _internal_mutable_device_vendor_type();
  public:

  // string device_model_type = 46[json_name = "deviceModelType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_model_type();
  const std::string& device_model_type() const;
  void set_device_model_type(const std::string& value);
  void set_device_model_type(std::string&& value);
  void set_device_model_type(const char* value);
  void set_device_model_type(const char* value, size_t size);
  std::string* mutable_device_model_type();
  std::string* release_device_model_type();
  void set_allocated_device_model_type(std::string* device_model_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_model_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_model_type(
      std::string* device_model_type);
  private:
  const std::string& _internal_device_model_type() const;
  void _internal_set_device_model_type(const std::string& value);
  std::string* _internal_mutable_device_model_type();
  public:

  // string cloud_export_id = 47[json_name = "cloudExportId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cloud_export_id();
  const std::string& cloud_export_id() const;
  void set_cloud_export_id(const std::string& value);
  void set_cloud_export_id(std::string&& value);
  void set_cloud_export_id(const char* value);
  void set_cloud_export_id(const char* value, size_t size);
  std::string* mutable_cloud_export_id();
  std::string* release_cloud_export_id();
  void set_allocated_cloud_export_id(std::string* cloud_export_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cloud_export_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cloud_export_id(
      std::string* cloud_export_id);
  private:
  const std::string& _internal_cloud_export_id() const;
  void _internal_set_cloud_export_id(const std::string& value);
  std::string* _internal_mutable_cloud_export_id();
  public:

  // string device_kproxy = 48[json_name = "deviceKproxy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_kproxy();
  const std::string& device_kproxy() const;
  void set_device_kproxy(const std::string& value);
  void set_device_kproxy(std::string&& value);
  void set_device_kproxy(const char* value);
  void set_device_kproxy(const char* value, size_t size);
  std::string* mutable_device_kproxy();
  std::string* release_device_kproxy();
  void set_allocated_device_kproxy(std::string* device_kproxy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_kproxy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_kproxy(
      std::string* device_kproxy);
  private:
  const std::string& _internal_device_kproxy() const;
  void _internal_set_device_kproxy(const std::string& value);
  std::string* _internal_mutable_device_kproxy();
  public:

  // string snmp_enabled = 49[json_name = "snmpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_snmp_enabled();
  const std::string& snmp_enabled() const;
  void set_snmp_enabled(const std::string& value);
  void set_snmp_enabled(std::string&& value);
  void set_snmp_enabled(const char* value);
  void set_snmp_enabled(const char* value, size_t size);
  std::string* mutable_snmp_enabled();
  std::string* release_snmp_enabled();
  void set_allocated_snmp_enabled(std::string* snmp_enabled);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_enabled();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_enabled(
      std::string* snmp_enabled);
  private:
  const std::string& _internal_snmp_enabled() const;
  void _internal_set_snmp_enabled(const std::string& value);
  std::string* _internal_mutable_snmp_enabled();
  public:

  // string snmp_disabled_reason = 50[json_name = "snmpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_snmp_disabled_reason();
  const std::string& snmp_disabled_reason() const;
  void set_snmp_disabled_reason(const std::string& value);
  void set_snmp_disabled_reason(std::string&& value);
  void set_snmp_disabled_reason(const char* value);
  void set_snmp_disabled_reason(const char* value, size_t size);
  std::string* mutable_snmp_disabled_reason();
  std::string* release_snmp_disabled_reason();
  void set_allocated_snmp_disabled_reason(std::string* snmp_disabled_reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_disabled_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_disabled_reason(
      std::string* snmp_disabled_reason);
  private:
  const std::string& _internal_snmp_disabled_reason() const;
  void _internal_set_snmp_disabled_reason(const std::string& value);
  std::string* _internal_mutable_snmp_disabled_reason();
  public:

  // string snmp_disabled_reason_other = 51[json_name = "snmpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_snmp_disabled_reason_other();
  const std::string& snmp_disabled_reason_other() const;
  void set_snmp_disabled_reason_other(const std::string& value);
  void set_snmp_disabled_reason_other(std::string&& value);
  void set_snmp_disabled_reason_other(const char* value);
  void set_snmp_disabled_reason_other(const char* value, size_t size);
  std::string* mutable_snmp_disabled_reason_other();
  std::string* release_snmp_disabled_reason_other();
  void set_allocated_snmp_disabled_reason_other(std::string* snmp_disabled_reason_other);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_disabled_reason_other();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_disabled_reason_other(
      std::string* snmp_disabled_reason_other);
  private:
  const std::string& _internal_snmp_disabled_reason_other() const;
  void _internal_set_snmp_disabled_reason_other(const std::string& value);
  std::string* _internal_mutable_snmp_disabled_reason_other();
  public:

  // string bgp_disabled_reason = 52[json_name = "bgpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_bgp_disabled_reason();
  const std::string& bgp_disabled_reason() const;
  void set_bgp_disabled_reason(const std::string& value);
  void set_bgp_disabled_reason(std::string&& value);
  void set_bgp_disabled_reason(const char* value);
  void set_bgp_disabled_reason(const char* value, size_t size);
  std::string* mutable_bgp_disabled_reason();
  std::string* release_bgp_disabled_reason();
  void set_allocated_bgp_disabled_reason(std::string* bgp_disabled_reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bgp_disabled_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bgp_disabled_reason(
      std::string* bgp_disabled_reason);
  private:
  const std::string& _internal_bgp_disabled_reason() const;
  void _internal_set_bgp_disabled_reason(const std::string& value);
  std::string* _internal_mutable_bgp_disabled_reason();
  public:

  // string bgp_disabled_reason_other = 53[json_name = "bgpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_bgp_disabled_reason_other();
  const std::string& bgp_disabled_reason_other() const;
  void set_bgp_disabled_reason_other(const std::string& value);
  void set_bgp_disabled_reason_other(std::string&& value);
  void set_bgp_disabled_reason_other(const char* value);
  void set_bgp_disabled_reason_other(const char* value, size_t size);
  std::string* mutable_bgp_disabled_reason_other();
  std::string* release_bgp_disabled_reason_other();
  void set_allocated_bgp_disabled_reason_other(std::string* bgp_disabled_reason_other);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bgp_disabled_reason_other();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bgp_disabled_reason_other(
      std::string* bgp_disabled_reason_other);
  private:
  const std::string& _internal_bgp_disabled_reason_other() const;
  void _internal_set_bgp_disabled_reason_other(const std::string& value);
  std::string* _internal_mutable_bgp_disabled_reason_other();
  public:

  // string device_manufacturer = 54[json_name = "deviceManufacturer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_manufacturer();
  const std::string& device_manufacturer() const;
  void set_device_manufacturer(const std::string& value);
  void set_device_manufacturer(std::string&& value);
  void set_device_manufacturer(const char* value);
  void set_device_manufacturer(const char* value, size_t size);
  std::string* mutable_device_manufacturer();
  std::string* release_device_manufacturer();
  void set_allocated_device_manufacturer(std::string* device_manufacturer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_manufacturer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_manufacturer(
      std::string* device_manufacturer);
  private:
  const std::string& _internal_device_manufacturer() const;
  void _internal_set_device_manufacturer(const std::string& value);
  std::string* _internal_mutable_device_manufacturer();
  public:

  // string device_alert = 55[json_name = "deviceAlert", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_alert();
  const std::string& device_alert() const;
  void set_device_alert(const std::string& value);
  void set_device_alert(std::string&& value);
  void set_device_alert(const char* value);
  void set_device_alert(const char* value, size_t size);
  std::string* mutable_device_alert();
  std::string* release_device_alert();
  void set_allocated_device_alert(std::string* device_alert);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_alert();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_alert(
      std::string* device_alert);
  private:
  const std::string& _internal_device_alert() const;
  void _internal_set_device_alert(const std::string& value);
  std::string* _internal_mutable_device_alert();
  public:

  // string role = 56[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_role();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_role(
      std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string device_bgp_credential_name = 62[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_credential_name();
  const std::string& device_bgp_credential_name() const;
  void set_device_bgp_credential_name(const std::string& value);
  void set_device_bgp_credential_name(std::string&& value);
  void set_device_bgp_credential_name(const char* value);
  void set_device_bgp_credential_name(const char* value, size_t size);
  std::string* mutable_device_bgp_credential_name();
  std::string* release_device_bgp_credential_name();
  void set_allocated_device_bgp_credential_name(std::string* device_bgp_credential_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_bgp_credential_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_bgp_credential_name(
      std::string* device_bgp_credential_name);
  private:
  const std::string& _internal_device_bgp_credential_name() const;
  void _internal_set_device_bgp_credential_name(const std::string& value);
  std::string* _internal_mutable_device_bgp_credential_name();
  public:

  // string flow_snmp_credential_name = 63[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_flow_snmp_credential_name();
  const std::string& flow_snmp_credential_name() const;
  void set_flow_snmp_credential_name(const std::string& value);
  void set_flow_snmp_credential_name(std::string&& value);
  void set_flow_snmp_credential_name(const char* value);
  void set_flow_snmp_credential_name(const char* value, size_t size);
  std::string* mutable_flow_snmp_credential_name();
  std::string* release_flow_snmp_credential_name();
  void set_allocated_flow_snmp_credential_name(std::string* flow_snmp_credential_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_flow_snmp_credential_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_flow_snmp_credential_name(
      std::string* flow_snmp_credential_name);
  private:
  const std::string& _internal_flow_snmp_credential_name() const;
  void _internal_set_flow_snmp_credential_name(const std::string& value);
  std::string* _internal_mutable_flow_snmp_credential_name();
  public:

  // .kentik.device.v202308beta1.Site site = 7[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::device::v202308beta1::Site& site() const;
  ::kentik::device::v202308beta1::Site* release_site();
  ::kentik::device::v202308beta1::Site* mutable_site();
  void set_allocated_site(::kentik::device::v202308beta1::Site* site);
  private:
  const ::kentik::device::v202308beta1::Site& _internal_site() const;
  ::kentik::device::v202308beta1::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::device::v202308beta1::Site* site);
  ::kentik::device::v202308beta1::Site* unsafe_arena_release_site();

  // .kentik.device.v202308beta1.Plan plan = 8[json_name = "plan", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::kentik::device::v202308beta1::Plan& plan() const;
  ::kentik::device::v202308beta1::Plan* release_plan();
  ::kentik::device::v202308beta1::Plan* mutable_plan();
  void set_allocated_plan(::kentik::device::v202308beta1::Plan* plan);
  private:
  const ::kentik::device::v202308beta1::Plan& _internal_plan() const;
  ::kentik::device::v202308beta1::Plan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::kentik::device::v202308beta1::Plan* plan);
  ::kentik::device::v202308beta1::Plan* unsafe_arena_release_plan();

  // .google.protobuf.Timestamp created_date = 37[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_created_date() const;
  private:
  bool _internal_has_created_date() const;
  public:
  void clear_created_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_date();
  void set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_date();
  public:
  void unsafe_arena_set_allocated_created_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_date();

  // .google.protobuf.Timestamp updated_date = 38[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_updated_date() const;
  private:
  bool _internal_has_updated_date() const;
  public:
  void clear_updated_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_date();
  void set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_date();
  public:
  void unsafe_arena_set_allocated_updated_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_date();

  // .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 40[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device_snmp_v3_conf() const;
  private:
  bool _internal_has_device_snmp_v3_conf() const;
  public:
  void clear_device_snmp_v3_conf();
  const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& device_snmp_v3_conf() const;
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* release_device_snmp_v3_conf();
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* mutable_device_snmp_v3_conf();
  void set_allocated_device_snmp_v3_conf(::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf);
  private:
  const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& _internal_device_snmp_v3_conf() const;
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* _internal_mutable_device_snmp_v3_conf();
  public:
  void unsafe_arena_set_allocated_device_snmp_v3_conf(
      ::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf);
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* unsafe_arena_release_device_snmp_v3_conf();

  // .kentik.device.v202308beta1.GnmiV1Conf device_gnmi_v1_conf = 57[json_name = "deviceGnmiV1Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device_gnmi_v1_conf() const;
  private:
  bool _internal_has_device_gnmi_v1_conf() const;
  public:
  void clear_device_gnmi_v1_conf();
  const ::kentik::device::v202308beta1::GnmiV1Conf& device_gnmi_v1_conf() const;
  ::kentik::device::v202308beta1::GnmiV1Conf* release_device_gnmi_v1_conf();
  ::kentik::device::v202308beta1::GnmiV1Conf* mutable_device_gnmi_v1_conf();
  void set_allocated_device_gnmi_v1_conf(::kentik::device::v202308beta1::GnmiV1Conf* device_gnmi_v1_conf);
  private:
  const ::kentik::device::v202308beta1::GnmiV1Conf& _internal_device_gnmi_v1_conf() const;
  ::kentik::device::v202308beta1::GnmiV1Conf* _internal_mutable_device_gnmi_v1_conf();
  public:
  void unsafe_arena_set_allocated_device_gnmi_v1_conf(
      ::kentik::device::v202308beta1::GnmiV1Conf* device_gnmi_v1_conf);
  ::kentik::device::v202308beta1::GnmiV1Conf* unsafe_arena_release_device_gnmi_v1_conf();

  // .kentik.device.v202308beta1.DeviceNmsConfig nms = 61[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_nms() const;
  private:
  bool _internal_has_nms() const;
  public:
  void clear_nms();
  const ::kentik::device::v202308beta1::DeviceNmsConfig& nms() const;
  ::kentik::device::v202308beta1::DeviceNmsConfig* release_nms();
  ::kentik::device::v202308beta1::DeviceNmsConfig* mutable_nms();
  void set_allocated_nms(::kentik::device::v202308beta1::DeviceNmsConfig* nms);
  private:
  const ::kentik::device::v202308beta1::DeviceNmsConfig& _internal_nms() const;
  ::kentik::device::v202308beta1::DeviceNmsConfig* _internal_mutable_nms();
  public:
  void unsafe_arena_set_allocated_nms(
      ::kentik::device::v202308beta1::DeviceNmsConfig* nms);
  ::kentik::device::v202308beta1::DeviceNmsConfig* unsafe_arena_release_nms();

  // bool minimize_snmp = 16[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_minimize_snmp() const;
  private:
  bool _internal_has_minimize_snmp() const;
  public:
  void clear_minimize_snmp();
  bool minimize_snmp() const;
  void set_minimize_snmp(bool value);
  private:
  bool _internal_minimize_snmp() const;
  void _internal_set_minimize_snmp(bool value);
  public:

  // bool device_bgp_flowspec = 21[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_flowspec();
  bool device_bgp_flowspec() const;
  void set_device_bgp_flowspec(bool value);
  private:
  bool _internal_device_bgp_flowspec() const;
  void _internal_set_device_bgp_flowspec(bool value);
  public:

  // bool device_bgp_label_unicast = 23[json_name = "deviceBgpLabelUnicast", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_bgp_label_unicast();
  bool device_bgp_label_unicast() const;
  void set_device_bgp_label_unicast(bool value);
  private:
  bool _internal_device_bgp_label_unicast() const;
  void _internal_set_device_bgp_label_unicast(bool value);
  public:

  // bool device_snmp_v3_conf_enabled = 39[json_name = "deviceSnmpV3ConfEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_snmp_v3_conf_enabled();
  bool device_snmp_v3_conf_enabled() const;
  void set_device_snmp_v3_conf_enabled(bool value);
  private:
  bool _internal_device_snmp_v3_conf_enabled() const;
  void _internal_set_device_snmp_v3_conf_enabled(bool value);
  public:

  // uint32 max_flow_rate = 33[json_name = "maxFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_flow_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_flow_rate() const;
  void set_max_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_flow_rate() const;
  void _internal_set_max_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_big_flow_rate = 34[json_name = "maxBigFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_big_flow_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_big_flow_rate() const;
  void set_max_big_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_big_flow_rate() const;
  void _internal_set_max_big_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool use_asn_from_flow = 58[json_name = "useAsnFromFlow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_use_asn_from_flow();
  bool use_asn_from_flow() const;
  void set_use_asn_from_flow(bool value);
  private:
  bool _internal_use_asn_from_flow() const;
  void _internal_set_use_asn_from_flow(bool value);
  public:

  // uint32 max_interface = 59[json_name = "maxInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_interface();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_interface() const;
  void set_max_interface(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_interface() const;
  void _internal_set_max_interface(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_interface_check = 60[json_name = "maxInterfaceCheck", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_interface_check();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_interface_check() const;
  void set_max_interface_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_interface_check() const;
  void _internal_set_max_interface_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeviceDetailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Interface > all_interfaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sending_ips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::CustomColumnData > custom_column_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_flow_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_snmp_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_snmp_community_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_neighbor_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_neighbor_ip6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_neighbor_asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_lookup_strategy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_bgp_device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_chf_client_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_chf_client_protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_chf_interface_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_agent_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_proxy_bgp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_proxy_bgp6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_peer_ip4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_peer_ip6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_vendor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_model_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloud_export_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_kproxy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_enabled_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_disabled_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_disabled_reason_other_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_disabled_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_disabled_reason_other_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_alert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_bgp_credential_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_snmp_credential_name_;
  ::kentik::device::v202308beta1::Site* site_;
  ::kentik::device::v202308beta1::Plan* plan_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_date_;
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf_;
  ::kentik::device::v202308beta1::GnmiV1Conf* device_gnmi_v1_conf_;
  ::kentik::device::v202308beta1::DeviceNmsConfig* nms_;
  bool minimize_snmp_;
  bool device_bgp_flowspec_;
  bool device_bgp_label_unicast_;
  bool device_snmp_v3_conf_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_flow_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_big_flow_rate_;
  bool use_asn_from_flow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_interface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_interface_check_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class LabelConcise PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.LabelConcise) */ {
 public:
  inline LabelConcise() : LabelConcise(nullptr) {};
  virtual ~LabelConcise();

  LabelConcise(const LabelConcise& from);
  LabelConcise(LabelConcise&& from) noexcept
    : LabelConcise() {
    *this = ::std::move(from);
  }

  inline LabelConcise& operator=(const LabelConcise& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelConcise& operator=(LabelConcise&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelConcise& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelConcise* internal_default_instance() {
    return reinterpret_cast<const LabelConcise*>(
               &_LabelConcise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LabelConcise& a, LabelConcise& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelConcise* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelConcise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelConcise* New() const final {
    return CreateMaybeMessage<LabelConcise>(nullptr);
  }

  LabelConcise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelConcise>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelConcise& from);
  void MergeFrom(const LabelConcise& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelConcise* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.LabelConcise";
  }
  protected:
  explicit LabelConcise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.LabelConcise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ListDevicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.ListDevicesRequest) */ {
 public:
  inline ListDevicesRequest() : ListDevicesRequest(nullptr) {};
  virtual ~ListDevicesRequest();

  ListDevicesRequest(const ListDevicesRequest& from);
  ListDevicesRequest(ListDevicesRequest&& from) noexcept
    : ListDevicesRequest() {
    *this = ::std::move(from);
  }

  inline ListDevicesRequest& operator=(const ListDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDevicesRequest& operator=(ListDevicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDevicesRequest*>(
               &_ListDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListDevicesRequest& a, ListDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDevicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDevicesRequest* New() const final {
    return CreateMaybeMessage<ListDevicesRequest>(nullptr);
  }

  ListDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDevicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDevicesRequest& from);
  void MergeFrom(const ListDevicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.ListDevicesRequest";
  }
  protected:
  explicit ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.ListDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ListDevicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.ListDevicesResponse) */ {
 public:
  inline ListDevicesResponse() : ListDevicesResponse(nullptr) {};
  virtual ~ListDevicesResponse();

  ListDevicesResponse(const ListDevicesResponse& from);
  ListDevicesResponse(ListDevicesResponse&& from) noexcept
    : ListDevicesResponse() {
    *this = ::std::move(from);
  }

  inline ListDevicesResponse& operator=(const ListDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDevicesResponse& operator=(ListDevicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDevicesResponse*>(
               &_ListDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListDevicesResponse& a, ListDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDevicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDevicesResponse* New() const final {
    return CreateMaybeMessage<ListDevicesResponse>(nullptr);
  }

  ListDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDevicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDevicesResponse& from);
  void MergeFrom(const ListDevicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.ListDevicesResponse";
  }
  protected:
  explicit ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >*
      mutable_devices();
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_devices(int index) const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_add_devices();
  public:
  const ::kentik::device::v202308beta1::DeviceDetailed& devices(int index) const;
  ::kentik::device::v202308beta1::DeviceDetailed* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >&
      devices() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.ListDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed > devices_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.GetDeviceRequest) */ {
 public:
  inline GetDeviceRequest() : GetDeviceRequest(nullptr) {};
  virtual ~GetDeviceRequest();

  GetDeviceRequest(const GetDeviceRequest& from);
  GetDeviceRequest(GetDeviceRequest&& from) noexcept
    : GetDeviceRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceRequest& operator=(const GetDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceRequest& operator=(GetDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceRequest*>(
               &_GetDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetDeviceRequest& a, GetDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceRequest* New() const final {
    return CreateMaybeMessage<GetDeviceRequest>(nullptr);
  }

  GetDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceRequest& from);
  void MergeFrom(const GetDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.GetDeviceRequest";
  }
  protected:
  explicit GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.GetDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.GetDeviceResponse) */ {
 public:
  inline GetDeviceResponse() : GetDeviceResponse(nullptr) {};
  virtual ~GetDeviceResponse();

  GetDeviceResponse(const GetDeviceResponse& from);
  GetDeviceResponse(GetDeviceResponse&& from) noexcept
    : GetDeviceResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceResponse& operator=(const GetDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceResponse& operator=(GetDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceResponse*>(
               &_GetDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetDeviceResponse& a, GetDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceResponse* New() const final {
    return CreateMaybeMessage<GetDeviceResponse>(nullptr);
  }

  GetDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceResponse& from);
  void MergeFrom(const GetDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.GetDeviceResponse";
  }
  protected:
  explicit GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::kentik::device::v202308beta1::DeviceDetailed& device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* release_device();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_device();
  void set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device);
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::kentik::device::v202308beta1::DeviceDetailed* device);
  ::kentik::device::v202308beta1::DeviceDetailed* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.GetDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::device::v202308beta1::DeviceDetailed* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.CreateDeviceRequest) */ {
 public:
  inline CreateDeviceRequest() : CreateDeviceRequest(nullptr) {};
  virtual ~CreateDeviceRequest();

  CreateDeviceRequest(const CreateDeviceRequest& from);
  CreateDeviceRequest(CreateDeviceRequest&& from) noexcept
    : CreateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeviceRequest& operator=(const CreateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceRequest& operator=(CreateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceRequest*>(
               &_CreateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateDeviceRequest& a, CreateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceRequest* New() const final {
    return CreateMaybeMessage<CreateDeviceRequest>(nullptr);
  }

  CreateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceRequest& from);
  void MergeFrom(const CreateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.CreateDeviceRequest";
  }
  protected:
  explicit CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::kentik::device::v202308beta1::DeviceConcise& device() const;
  ::kentik::device::v202308beta1::DeviceConcise* release_device();
  ::kentik::device::v202308beta1::DeviceConcise* mutable_device();
  void set_allocated_device(::kentik::device::v202308beta1::DeviceConcise* device);
  private:
  const ::kentik::device::v202308beta1::DeviceConcise& _internal_device() const;
  ::kentik::device::v202308beta1::DeviceConcise* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::kentik::device::v202308beta1::DeviceConcise* device);
  ::kentik::device::v202308beta1::DeviceConcise* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.CreateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::device::v202308beta1::DeviceConcise* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.CreateDeviceResponse) */ {
 public:
  inline CreateDeviceResponse() : CreateDeviceResponse(nullptr) {};
  virtual ~CreateDeviceResponse();

  CreateDeviceResponse(const CreateDeviceResponse& from);
  CreateDeviceResponse(CreateDeviceResponse&& from) noexcept
    : CreateDeviceResponse() {
    *this = ::std::move(from);
  }

  inline CreateDeviceResponse& operator=(const CreateDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceResponse& operator=(CreateDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceResponse*>(
               &_CreateDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CreateDeviceResponse& a, CreateDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceResponse* New() const final {
    return CreateMaybeMessage<CreateDeviceResponse>(nullptr);
  }

  CreateDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceResponse& from);
  void MergeFrom(const CreateDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.CreateDeviceResponse";
  }
  protected:
  explicit CreateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::kentik::device::v202308beta1::DeviceDetailed& device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* release_device();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_device();
  void set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device);
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::kentik::device::v202308beta1::DeviceDetailed* device);
  ::kentik::device::v202308beta1::DeviceDetailed* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.CreateDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::device::v202308beta1::DeviceDetailed* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CreateDevicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.CreateDevicesRequest) */ {
 public:
  inline CreateDevicesRequest() : CreateDevicesRequest(nullptr) {};
  virtual ~CreateDevicesRequest();

  CreateDevicesRequest(const CreateDevicesRequest& from);
  CreateDevicesRequest(CreateDevicesRequest&& from) noexcept
    : CreateDevicesRequest() {
    *this = ::std::move(from);
  }

  inline CreateDevicesRequest& operator=(const CreateDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDevicesRequest& operator=(CreateDevicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDevicesRequest*>(
               &_CreateDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateDevicesRequest& a, CreateDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDevicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDevicesRequest* New() const final {
    return CreateMaybeMessage<CreateDevicesRequest>(nullptr);
  }

  CreateDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDevicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDevicesRequest& from);
  void MergeFrom(const CreateDevicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.CreateDevicesRequest";
  }
  protected:
  explicit CreateDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::device::v202308beta1::DeviceConcise* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >*
      mutable_devices();
  private:
  const ::kentik::device::v202308beta1::DeviceConcise& _internal_devices(int index) const;
  ::kentik::device::v202308beta1::DeviceConcise* _internal_add_devices();
  public:
  const ::kentik::device::v202308beta1::DeviceConcise& devices(int index) const;
  ::kentik::device::v202308beta1::DeviceConcise* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >&
      devices() const;

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.CreateDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CreateDevicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.CreateDevicesResponse) */ {
 public:
  inline CreateDevicesResponse() : CreateDevicesResponse(nullptr) {};
  virtual ~CreateDevicesResponse();

  CreateDevicesResponse(const CreateDevicesResponse& from);
  CreateDevicesResponse(CreateDevicesResponse&& from) noexcept
    : CreateDevicesResponse() {
    *this = ::std::move(from);
  }

  inline CreateDevicesResponse& operator=(const CreateDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDevicesResponse& operator=(CreateDevicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDevicesResponse*>(
               &_CreateDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateDevicesResponse& a, CreateDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDevicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDevicesResponse* New() const final {
    return CreateMaybeMessage<CreateDevicesResponse>(nullptr);
  }

  CreateDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDevicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDevicesResponse& from);
  void MergeFrom(const CreateDevicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDevicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.CreateDevicesResponse";
  }
  protected:
  explicit CreateDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kFailedDevicesFieldNumber = 2,
  };
  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >*
      mutable_devices();
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_devices(int index) const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_add_devices();
  public:
  const ::kentik::device::v202308beta1::DeviceDetailed& devices(int index) const;
  ::kentik::device::v202308beta1::DeviceDetailed* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >&
      devices() const;

  // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int failed_devices_size() const;
  private:
  int _internal_failed_devices_size() const;
  public:
  void clear_failed_devices();
  const std::string& failed_devices(int index) const;
  std::string* mutable_failed_devices(int index);
  void set_failed_devices(int index, const std::string& value);
  void set_failed_devices(int index, std::string&& value);
  void set_failed_devices(int index, const char* value);
  void set_failed_devices(int index, const char* value, size_t size);
  std::string* add_failed_devices();
  void add_failed_devices(const std::string& value);
  void add_failed_devices(std::string&& value);
  void add_failed_devices(const char* value);
  void add_failed_devices(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_devices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_devices();
  private:
  const std::string& _internal_failed_devices(int index) const;
  std::string* _internal_add_failed_devices();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.CreateDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed > devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.UpdateDeviceRequest) */ {
 public:
  inline UpdateDeviceRequest() : UpdateDeviceRequest(nullptr) {};
  virtual ~UpdateDeviceRequest();

  UpdateDeviceRequest(const UpdateDeviceRequest& from);
  UpdateDeviceRequest(UpdateDeviceRequest&& from) noexcept
    : UpdateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceRequest& operator=(const UpdateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceRequest& operator=(UpdateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceRequest*>(
               &_UpdateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateDeviceRequest& a, UpdateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceRequest* New() const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(nullptr);
  }

  UpdateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeviceRequest& from);
  void MergeFrom(const UpdateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.UpdateDeviceRequest";
  }
  protected:
  explicit UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::kentik::device::v202308beta1::DeviceConcise& device() const;
  ::kentik::device::v202308beta1::DeviceConcise* release_device();
  ::kentik::device::v202308beta1::DeviceConcise* mutable_device();
  void set_allocated_device(::kentik::device::v202308beta1::DeviceConcise* device);
  private:
  const ::kentik::device::v202308beta1::DeviceConcise& _internal_device() const;
  ::kentik::device::v202308beta1::DeviceConcise* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::kentik::device::v202308beta1::DeviceConcise* device);
  ::kentik::device::v202308beta1::DeviceConcise* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.UpdateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::device::v202308beta1::DeviceConcise* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.UpdateDeviceResponse) */ {
 public:
  inline UpdateDeviceResponse() : UpdateDeviceResponse(nullptr) {};
  virtual ~UpdateDeviceResponse();

  UpdateDeviceResponse(const UpdateDeviceResponse& from);
  UpdateDeviceResponse(UpdateDeviceResponse&& from) noexcept
    : UpdateDeviceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceResponse& operator=(const UpdateDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceResponse& operator=(UpdateDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceResponse*>(
               &_UpdateDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateDeviceResponse& a, UpdateDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceResponse* New() const final {
    return CreateMaybeMessage<UpdateDeviceResponse>(nullptr);
  }

  UpdateDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeviceResponse& from);
  void MergeFrom(const UpdateDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.UpdateDeviceResponse";
  }
  protected:
  explicit UpdateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::kentik::device::v202308beta1::DeviceDetailed& device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* release_device();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_device();
  void set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device);
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::kentik::device::v202308beta1::DeviceDetailed* device);
  ::kentik::device::v202308beta1::DeviceDetailed* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.UpdateDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::device::v202308beta1::DeviceDetailed* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDevicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.UpdateDevicesRequest) */ {
 public:
  inline UpdateDevicesRequest() : UpdateDevicesRequest(nullptr) {};
  virtual ~UpdateDevicesRequest();

  UpdateDevicesRequest(const UpdateDevicesRequest& from);
  UpdateDevicesRequest(UpdateDevicesRequest&& from) noexcept
    : UpdateDevicesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDevicesRequest& operator=(const UpdateDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDevicesRequest& operator=(UpdateDevicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDevicesRequest*>(
               &_UpdateDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateDevicesRequest& a, UpdateDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDevicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDevicesRequest* New() const final {
    return CreateMaybeMessage<UpdateDevicesRequest>(nullptr);
  }

  UpdateDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDevicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDevicesRequest& from);
  void MergeFrom(const UpdateDevicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.UpdateDevicesRequest";
  }
  protected:
  explicit UpdateDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::device::v202308beta1::DeviceConcise* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >*
      mutable_devices();
  private:
  const ::kentik::device::v202308beta1::DeviceConcise& _internal_devices(int index) const;
  ::kentik::device::v202308beta1::DeviceConcise* _internal_add_devices();
  public:
  const ::kentik::device::v202308beta1::DeviceConcise& devices(int index) const;
  ::kentik::device::v202308beta1::DeviceConcise* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >&
      devices() const;

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.UpdateDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDevicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.UpdateDevicesResponse) */ {
 public:
  inline UpdateDevicesResponse() : UpdateDevicesResponse(nullptr) {};
  virtual ~UpdateDevicesResponse();

  UpdateDevicesResponse(const UpdateDevicesResponse& from);
  UpdateDevicesResponse(UpdateDevicesResponse&& from) noexcept
    : UpdateDevicesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDevicesResponse& operator=(const UpdateDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDevicesResponse& operator=(UpdateDevicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDevicesResponse*>(
               &_UpdateDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateDevicesResponse& a, UpdateDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDevicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDevicesResponse* New() const final {
    return CreateMaybeMessage<UpdateDevicesResponse>(nullptr);
  }

  UpdateDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDevicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDevicesResponse& from);
  void MergeFrom(const UpdateDevicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDevicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.UpdateDevicesResponse";
  }
  protected:
  explicit UpdateDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kFailedDevicesFieldNumber = 2,
  };
  // repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >*
      mutable_devices();
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_devices(int index) const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_add_devices();
  public:
  const ::kentik::device::v202308beta1::DeviceDetailed& devices(int index) const;
  ::kentik::device::v202308beta1::DeviceDetailed* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >&
      devices() const;

  // repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int failed_devices_size() const;
  private:
  int _internal_failed_devices_size() const;
  public:
  void clear_failed_devices();
  const std::string& failed_devices(int index) const;
  std::string* mutable_failed_devices(int index);
  void set_failed_devices(int index, const std::string& value);
  void set_failed_devices(int index, std::string&& value);
  void set_failed_devices(int index, const char* value);
  void set_failed_devices(int index, const char* value, size_t size);
  std::string* add_failed_devices();
  void add_failed_devices(const std::string& value);
  void add_failed_devices(std::string&& value);
  void add_failed_devices(const char* value);
  void add_failed_devices(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_devices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_devices();
  private:
  const std::string& _internal_failed_devices(int index) const;
  std::string* _internal_add_failed_devices();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.UpdateDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed > devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceLabelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.UpdateDeviceLabelsRequest) */ {
 public:
  inline UpdateDeviceLabelsRequest() : UpdateDeviceLabelsRequest(nullptr) {};
  virtual ~UpdateDeviceLabelsRequest();

  UpdateDeviceLabelsRequest(const UpdateDeviceLabelsRequest& from);
  UpdateDeviceLabelsRequest(UpdateDeviceLabelsRequest&& from) noexcept
    : UpdateDeviceLabelsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceLabelsRequest& operator=(const UpdateDeviceLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceLabelsRequest& operator=(UpdateDeviceLabelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeviceLabelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeviceLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceLabelsRequest*>(
               &_UpdateDeviceLabelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateDeviceLabelsRequest& a, UpdateDeviceLabelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceLabelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceLabelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceLabelsRequest* New() const final {
    return CreateMaybeMessage<UpdateDeviceLabelsRequest>(nullptr);
  }

  UpdateDeviceLabelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceLabelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeviceLabelsRequest& from);
  void MergeFrom(const UpdateDeviceLabelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceLabelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.UpdateDeviceLabelsRequest";
  }
  protected:
  explicit UpdateDeviceLabelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .kentik.device.v202308beta1.LabelConcise labels = 2[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::kentik::device::v202308beta1::LabelConcise* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::LabelConcise >*
      mutable_labels();
  private:
  const ::kentik::device::v202308beta1::LabelConcise& _internal_labels(int index) const;
  ::kentik::device::v202308beta1::LabelConcise* _internal_add_labels();
  public:
  const ::kentik::device::v202308beta1::LabelConcise& labels(int index) const;
  ::kentik::device::v202308beta1::LabelConcise* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::LabelConcise >&
      labels() const;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.UpdateDeviceLabelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::LabelConcise > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceLabelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.UpdateDeviceLabelsResponse) */ {
 public:
  inline UpdateDeviceLabelsResponse() : UpdateDeviceLabelsResponse(nullptr) {};
  virtual ~UpdateDeviceLabelsResponse();

  UpdateDeviceLabelsResponse(const UpdateDeviceLabelsResponse& from);
  UpdateDeviceLabelsResponse(UpdateDeviceLabelsResponse&& from) noexcept
    : UpdateDeviceLabelsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceLabelsResponse& operator=(const UpdateDeviceLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceLabelsResponse& operator=(UpdateDeviceLabelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeviceLabelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeviceLabelsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceLabelsResponse*>(
               &_UpdateDeviceLabelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UpdateDeviceLabelsResponse& a, UpdateDeviceLabelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceLabelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceLabelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceLabelsResponse* New() const final {
    return CreateMaybeMessage<UpdateDeviceLabelsResponse>(nullptr);
  }

  UpdateDeviceLabelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceLabelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeviceLabelsResponse& from);
  void MergeFrom(const UpdateDeviceLabelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceLabelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.UpdateDeviceLabelsResponse";
  }
  protected:
  explicit UpdateDeviceLabelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::kentik::device::v202308beta1::DeviceDetailed& device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* release_device();
  ::kentik::device::v202308beta1::DeviceDetailed* mutable_device();
  void set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device);
  private:
  const ::kentik::device::v202308beta1::DeviceDetailed& _internal_device() const;
  ::kentik::device::v202308beta1::DeviceDetailed* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::kentik::device::v202308beta1::DeviceDetailed* device);
  ::kentik::device::v202308beta1::DeviceDetailed* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.UpdateDeviceLabelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::device::v202308beta1::DeviceDetailed* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeleteDeviceRequest) */ {
 public:
  inline DeleteDeviceRequest() : DeleteDeviceRequest(nullptr) {};
  virtual ~DeleteDeviceRequest();

  DeleteDeviceRequest(const DeleteDeviceRequest& from);
  DeleteDeviceRequest(DeleteDeviceRequest&& from) noexcept
    : DeleteDeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDeviceRequest& operator=(const DeleteDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeviceRequest& operator=(DeleteDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDeviceRequest*>(
               &_DeleteDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DeleteDeviceRequest& a, DeleteDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeviceRequest* New() const final {
    return CreateMaybeMessage<DeleteDeviceRequest>(nullptr);
  }

  DeleteDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDeviceRequest& from);
  void MergeFrom(const DeleteDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeleteDeviceRequest";
  }
  protected:
  explicit DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeleteDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeleteDeviceResponse) */ {
 public:
  inline DeleteDeviceResponse() : DeleteDeviceResponse(nullptr) {};
  virtual ~DeleteDeviceResponse();

  DeleteDeviceResponse(const DeleteDeviceResponse& from);
  DeleteDeviceResponse(DeleteDeviceResponse&& from) noexcept
    : DeleteDeviceResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDeviceResponse& operator=(const DeleteDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeviceResponse& operator=(DeleteDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDeviceResponse*>(
               &_DeleteDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteDeviceResponse& a, DeleteDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeviceResponse* New() const final {
    return CreateMaybeMessage<DeleteDeviceResponse>(nullptr);
  }

  DeleteDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDeviceResponse& from);
  void MergeFrom(const DeleteDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeleteDeviceResponse";
  }
  protected:
  explicit DeleteDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeleteDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDevicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeleteDevicesRequest) */ {
 public:
  inline DeleteDevicesRequest() : DeleteDevicesRequest(nullptr) {};
  virtual ~DeleteDevicesRequest();

  DeleteDevicesRequest(const DeleteDevicesRequest& from);
  DeleteDevicesRequest(DeleteDevicesRequest&& from) noexcept
    : DeleteDevicesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDevicesRequest& operator=(const DeleteDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDevicesRequest& operator=(DeleteDevicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDevicesRequest*>(
               &_DeleteDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DeleteDevicesRequest& a, DeleteDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDevicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDevicesRequest* New() const final {
    return CreateMaybeMessage<DeleteDevicesRequest>(nullptr);
  }

  DeleteDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDevicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDevicesRequest& from);
  void MergeFrom(const DeleteDevicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeleteDevicesRequest";
  }
  protected:
  explicit DeleteDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeleteDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDevicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.device.v202308beta1.DeleteDevicesResponse) */ {
 public:
  inline DeleteDevicesResponse() : DeleteDevicesResponse(nullptr) {};
  virtual ~DeleteDevicesResponse();

  DeleteDevicesResponse(const DeleteDevicesResponse& from);
  DeleteDevicesResponse(DeleteDevicesResponse&& from) noexcept
    : DeleteDevicesResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDevicesResponse& operator=(const DeleteDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDevicesResponse& operator=(DeleteDevicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDevicesResponse*>(
               &_DeleteDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DeleteDevicesResponse& a, DeleteDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDevicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDevicesResponse* New() const final {
    return CreateMaybeMessage<DeleteDevicesResponse>(nullptr);
  }

  DeleteDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDevicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDevicesResponse& from);
  void MergeFrom(const DeleteDevicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDevicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.device.v202308beta1.DeleteDevicesResponse";
  }
  protected:
  explicit DeleteDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto);
    return ::descriptor_table_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailedDevicesFieldNumber = 1,
  };
  // repeated string failed_devices = 1[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int failed_devices_size() const;
  private:
  int _internal_failed_devices_size() const;
  public:
  void clear_failed_devices();
  const std::string& failed_devices(int index) const;
  std::string* mutable_failed_devices(int index);
  void set_failed_devices(int index, const std::string& value);
  void set_failed_devices(int index, std::string&& value);
  void set_failed_devices(int index, const char* value);
  void set_failed_devices(int index, const char* value, size_t size);
  std::string* add_failed_devices();
  void add_failed_devices(const std::string& value);
  void add_failed_devices(std::string&& value);
  void add_failed_devices(const char* value);
  void add_failed_devices(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_devices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_devices();
  private:
  const std::string& _internal_failed_devices(int index) const;
  std::string* _internal_add_failed_devices();
  public:

  // @@protoc_insertion_point(class_scope:kentik.device.v202308beta1.DeleteDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceSnmpV3Conf

// string username = 1[json_name = "username", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceSnmpV3Conf::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceSnmpV3Conf::username() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
  return _internal_username();
}
inline void DeviceSnmpV3Conf::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
}
inline std::string* DeviceSnmpV3Conf::mutable_username() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
  return _internal_mutable_username();
}
inline const std::string& DeviceSnmpV3Conf::_internal_username() const {
  return username_.Get();
}
inline void DeviceSnmpV3Conf::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceSnmpV3Conf::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
}
inline void DeviceSnmpV3Conf::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
}
inline void DeviceSnmpV3Conf::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
}
inline std::string* DeviceSnmpV3Conf::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceSnmpV3Conf::release_username() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSnmpV3Conf::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
}
inline std::string* DeviceSnmpV3Conf::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceSnmpV3Conf::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.username)
}

// string authentication_protocol = 2[json_name = "authenticationProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceSnmpV3Conf::clear_authentication_protocol() {
  authentication_protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceSnmpV3Conf::authentication_protocol() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
  return _internal_authentication_protocol();
}
inline void DeviceSnmpV3Conf::set_authentication_protocol(const std::string& value) {
  _internal_set_authentication_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
}
inline std::string* DeviceSnmpV3Conf::mutable_authentication_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
  return _internal_mutable_authentication_protocol();
}
inline const std::string& DeviceSnmpV3Conf::_internal_authentication_protocol() const {
  return authentication_protocol_.Get();
}
inline void DeviceSnmpV3Conf::_internal_set_authentication_protocol(const std::string& value) {
  
  authentication_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceSnmpV3Conf::set_authentication_protocol(std::string&& value) {
  
  authentication_protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
}
inline void DeviceSnmpV3Conf::set_authentication_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authentication_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
}
inline void DeviceSnmpV3Conf::set_authentication_protocol(const char* value,
    size_t size) {
  
  authentication_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
}
inline std::string* DeviceSnmpV3Conf::_internal_mutable_authentication_protocol() {
  
  return authentication_protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceSnmpV3Conf::release_authentication_protocol() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
  return authentication_protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSnmpV3Conf::set_allocated_authentication_protocol(std::string* authentication_protocol) {
  if (authentication_protocol != nullptr) {
    
  } else {
    
  }
  authentication_protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authentication_protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
}
inline std::string* DeviceSnmpV3Conf::unsafe_arena_release_authentication_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return authentication_protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceSnmpV3Conf::unsafe_arena_set_allocated_authentication_protocol(
    std::string* authentication_protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (authentication_protocol != nullptr) {
    
  } else {
    
  }
  authentication_protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      authentication_protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_protocol)
}

// string authentication_passphrase = 3[json_name = "authenticationPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceSnmpV3Conf::clear_authentication_passphrase() {
  authentication_passphrase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceSnmpV3Conf::authentication_passphrase() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
  return _internal_authentication_passphrase();
}
inline void DeviceSnmpV3Conf::set_authentication_passphrase(const std::string& value) {
  _internal_set_authentication_passphrase(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
}
inline std::string* DeviceSnmpV3Conf::mutable_authentication_passphrase() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
  return _internal_mutable_authentication_passphrase();
}
inline const std::string& DeviceSnmpV3Conf::_internal_authentication_passphrase() const {
  return authentication_passphrase_.Get();
}
inline void DeviceSnmpV3Conf::_internal_set_authentication_passphrase(const std::string& value) {
  
  authentication_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceSnmpV3Conf::set_authentication_passphrase(std::string&& value) {
  
  authentication_passphrase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
}
inline void DeviceSnmpV3Conf::set_authentication_passphrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authentication_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
}
inline void DeviceSnmpV3Conf::set_authentication_passphrase(const char* value,
    size_t size) {
  
  authentication_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
}
inline std::string* DeviceSnmpV3Conf::_internal_mutable_authentication_passphrase() {
  
  return authentication_passphrase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceSnmpV3Conf::release_authentication_passphrase() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
  return authentication_passphrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSnmpV3Conf::set_allocated_authentication_passphrase(std::string* authentication_passphrase) {
  if (authentication_passphrase != nullptr) {
    
  } else {
    
  }
  authentication_passphrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authentication_passphrase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
}
inline std::string* DeviceSnmpV3Conf::unsafe_arena_release_authentication_passphrase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return authentication_passphrase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceSnmpV3Conf::unsafe_arena_set_allocated_authentication_passphrase(
    std::string* authentication_passphrase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (authentication_passphrase != nullptr) {
    
  } else {
    
  }
  authentication_passphrase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      authentication_passphrase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.authentication_passphrase)
}

// string privacy_protocol = 4[json_name = "privacyProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceSnmpV3Conf::clear_privacy_protocol() {
  privacy_protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceSnmpV3Conf::privacy_protocol() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
  return _internal_privacy_protocol();
}
inline void DeviceSnmpV3Conf::set_privacy_protocol(const std::string& value) {
  _internal_set_privacy_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
}
inline std::string* DeviceSnmpV3Conf::mutable_privacy_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
  return _internal_mutable_privacy_protocol();
}
inline const std::string& DeviceSnmpV3Conf::_internal_privacy_protocol() const {
  return privacy_protocol_.Get();
}
inline void DeviceSnmpV3Conf::_internal_set_privacy_protocol(const std::string& value) {
  
  privacy_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceSnmpV3Conf::set_privacy_protocol(std::string&& value) {
  
  privacy_protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
}
inline void DeviceSnmpV3Conf::set_privacy_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privacy_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
}
inline void DeviceSnmpV3Conf::set_privacy_protocol(const char* value,
    size_t size) {
  
  privacy_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
}
inline std::string* DeviceSnmpV3Conf::_internal_mutable_privacy_protocol() {
  
  return privacy_protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceSnmpV3Conf::release_privacy_protocol() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
  return privacy_protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSnmpV3Conf::set_allocated_privacy_protocol(std::string* privacy_protocol) {
  if (privacy_protocol != nullptr) {
    
  } else {
    
  }
  privacy_protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privacy_protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
}
inline std::string* DeviceSnmpV3Conf::unsafe_arena_release_privacy_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return privacy_protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceSnmpV3Conf::unsafe_arena_set_allocated_privacy_protocol(
    std::string* privacy_protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (privacy_protocol != nullptr) {
    
  } else {
    
  }
  privacy_protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      privacy_protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_protocol)
}

// string privacy_passphrase = 5[json_name = "privacyPassphrase", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceSnmpV3Conf::clear_privacy_passphrase() {
  privacy_passphrase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceSnmpV3Conf::privacy_passphrase() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
  return _internal_privacy_passphrase();
}
inline void DeviceSnmpV3Conf::set_privacy_passphrase(const std::string& value) {
  _internal_set_privacy_passphrase(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
}
inline std::string* DeviceSnmpV3Conf::mutable_privacy_passphrase() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
  return _internal_mutable_privacy_passphrase();
}
inline const std::string& DeviceSnmpV3Conf::_internal_privacy_passphrase() const {
  return privacy_passphrase_.Get();
}
inline void DeviceSnmpV3Conf::_internal_set_privacy_passphrase(const std::string& value) {
  
  privacy_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceSnmpV3Conf::set_privacy_passphrase(std::string&& value) {
  
  privacy_passphrase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
}
inline void DeviceSnmpV3Conf::set_privacy_passphrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privacy_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
}
inline void DeviceSnmpV3Conf::set_privacy_passphrase(const char* value,
    size_t size) {
  
  privacy_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
}
inline std::string* DeviceSnmpV3Conf::_internal_mutable_privacy_passphrase() {
  
  return privacy_passphrase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceSnmpV3Conf::release_privacy_passphrase() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
  return privacy_passphrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceSnmpV3Conf::set_allocated_privacy_passphrase(std::string* privacy_passphrase) {
  if (privacy_passphrase != nullptr) {
    
  } else {
    
  }
  privacy_passphrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privacy_passphrase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
}
inline std::string* DeviceSnmpV3Conf::unsafe_arena_release_privacy_passphrase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return privacy_passphrase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceSnmpV3Conf::unsafe_arena_set_allocated_privacy_passphrase(
    std::string* privacy_passphrase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (privacy_passphrase != nullptr) {
    
  } else {
    
  }
  privacy_passphrase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      privacy_passphrase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceSnmpV3Conf.privacy_passphrase)
}

// -------------------------------------------------------------------

// DeviceNmsConfig

// string agent_id = 2[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsConfig::clear_agent_id() {
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceNmsConfig::agent_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
  return _internal_agent_id();
}
inline void DeviceNmsConfig::set_agent_id(const std::string& value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
}
inline std::string* DeviceNmsConfig::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
  return _internal_mutable_agent_id();
}
inline const std::string& DeviceNmsConfig::_internal_agent_id() const {
  return agent_id_.Get();
}
inline void DeviceNmsConfig::_internal_set_agent_id(const std::string& value) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceNmsConfig::set_agent_id(std::string&& value) {
  
  agent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
}
inline void DeviceNmsConfig::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
}
inline void DeviceNmsConfig::set_agent_id(const char* value,
    size_t size) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
}
inline std::string* DeviceNmsConfig::_internal_mutable_agent_id() {
  
  return agent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceNmsConfig::release_agent_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
  return agent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNmsConfig::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
}
inline std::string* DeviceNmsConfig::unsafe_arena_release_agent_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceNmsConfig::unsafe_arena_set_allocated_agent_id(
    std::string* agent_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.agent_id)
}

// string ip_address = 3[json_name = "ipAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsConfig::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceNmsConfig::ip_address() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
  return _internal_ip_address();
}
inline void DeviceNmsConfig::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
}
inline std::string* DeviceNmsConfig::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& DeviceNmsConfig::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void DeviceNmsConfig::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceNmsConfig::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
}
inline void DeviceNmsConfig::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
}
inline void DeviceNmsConfig::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
}
inline std::string* DeviceNmsConfig::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceNmsConfig::release_ip_address() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNmsConfig::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
}
inline std::string* DeviceNmsConfig::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceNmsConfig::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.ip_address)
}

// .kentik.device.v202308beta1.DeviceNmsSnmpConfig snmp = 4[json_name = "snmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceNmsConfig::_internal_has_snmp() const {
  return this != internal_default_instance() && snmp_ != nullptr;
}
inline bool DeviceNmsConfig::has_snmp() const {
  return _internal_has_snmp();
}
inline void DeviceNmsConfig::clear_snmp() {
  if (GetArena() == nullptr && snmp_ != nullptr) {
    delete snmp_;
  }
  snmp_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig& DeviceNmsConfig::_internal_snmp() const {
  const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* p = snmp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig*>(
      &::kentik::device::v202308beta1::_DeviceNmsSnmpConfig_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceNmsSnmpConfig& DeviceNmsConfig::snmp() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsConfig.snmp)
  return _internal_snmp();
}
inline void DeviceNmsConfig::unsafe_arena_set_allocated_snmp(
    ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* snmp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snmp_);
  }
  snmp_ = snmp;
  if (snmp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.snmp)
}
inline ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* DeviceNmsConfig::release_snmp() {
  auto temp = unsafe_arena_release_snmp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* DeviceNmsConfig::unsafe_arena_release_snmp() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsConfig.snmp)
  
  ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* temp = snmp_;
  snmp_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* DeviceNmsConfig::_internal_mutable_snmp() {
  
  if (snmp_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsSnmpConfig>(GetArena());
    snmp_ = p;
  }
  return snmp_;
}
inline ::kentik::device::v202308beta1::DeviceNmsSnmpConfig* DeviceNmsConfig::mutable_snmp() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsConfig.snmp)
  return _internal_mutable_snmp();
}
inline void DeviceNmsConfig::set_allocated_snmp(::kentik::device::v202308beta1::DeviceNmsSnmpConfig* snmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snmp_;
  }
  if (snmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snmp);
    if (message_arena != submessage_arena) {
      snmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snmp, submessage_arena);
    }
    
  } else {
    
  }
  snmp_ = snmp;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.snmp)
}

// .kentik.device.v202308beta1.DeviceNmsStConfig st = 5[json_name = "st", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceNmsConfig::_internal_has_st() const {
  return this != internal_default_instance() && st_ != nullptr;
}
inline bool DeviceNmsConfig::has_st() const {
  return _internal_has_st();
}
inline void DeviceNmsConfig::clear_st() {
  if (GetArena() == nullptr && st_ != nullptr) {
    delete st_;
  }
  st_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceNmsStConfig& DeviceNmsConfig::_internal_st() const {
  const ::kentik::device::v202308beta1::DeviceNmsStConfig* p = st_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceNmsStConfig*>(
      &::kentik::device::v202308beta1::_DeviceNmsStConfig_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceNmsStConfig& DeviceNmsConfig::st() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsConfig.st)
  return _internal_st();
}
inline void DeviceNmsConfig::unsafe_arena_set_allocated_st(
    ::kentik::device::v202308beta1::DeviceNmsStConfig* st) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(st_);
  }
  st_ = st;
  if (st) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.st)
}
inline ::kentik::device::v202308beta1::DeviceNmsStConfig* DeviceNmsConfig::release_st() {
  auto temp = unsafe_arena_release_st();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsStConfig* DeviceNmsConfig::unsafe_arena_release_st() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsConfig.st)
  
  ::kentik::device::v202308beta1::DeviceNmsStConfig* temp = st_;
  st_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsStConfig* DeviceNmsConfig::_internal_mutable_st() {
  
  if (st_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsStConfig>(GetArena());
    st_ = p;
  }
  return st_;
}
inline ::kentik::device::v202308beta1::DeviceNmsStConfig* DeviceNmsConfig::mutable_st() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsConfig.st)
  return _internal_mutable_st();
}
inline void DeviceNmsConfig::set_allocated_st(::kentik::device::v202308beta1::DeviceNmsStConfig* st) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete st_;
  }
  if (st) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(st);
    if (message_arena != submessage_arena) {
      st = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, st, submessage_arena);
    }
    
  } else {
    
  }
  st_ = st;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsConfig.st)
}

// -------------------------------------------------------------------

// DeviceNmsSnmpConfig

// string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsSnmpConfig::clear_credential_name() {
  credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceNmsSnmpConfig::credential_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
  return _internal_credential_name();
}
inline void DeviceNmsSnmpConfig::set_credential_name(const std::string& value) {
  _internal_set_credential_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
}
inline std::string* DeviceNmsSnmpConfig::mutable_credential_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
  return _internal_mutable_credential_name();
}
inline const std::string& DeviceNmsSnmpConfig::_internal_credential_name() const {
  return credential_name_.Get();
}
inline void DeviceNmsSnmpConfig::_internal_set_credential_name(const std::string& value) {
  
  credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceNmsSnmpConfig::set_credential_name(std::string&& value) {
  
  credential_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
}
inline void DeviceNmsSnmpConfig::set_credential_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
}
inline void DeviceNmsSnmpConfig::set_credential_name(const char* value,
    size_t size) {
  
  credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
}
inline std::string* DeviceNmsSnmpConfig::_internal_mutable_credential_name() {
  
  return credential_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceNmsSnmpConfig::release_credential_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
  return credential_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNmsSnmpConfig::set_allocated_credential_name(std::string* credential_name) {
  if (credential_name != nullptr) {
    
  } else {
    
  }
  credential_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
}
inline std::string* DeviceNmsSnmpConfig::unsafe_arena_release_credential_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return credential_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceNmsSnmpConfig::unsafe_arena_set_allocated_credential_name(
    std::string* credential_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (credential_name != nullptr) {
    
  } else {
    
  }
  credential_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      credential_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsSnmpConfig.credential_name)
}

// uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsSnmpConfig::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceNmsSnmpConfig::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceNmsSnmpConfig::port() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsSnmpConfig.port)
  return _internal_port();
}
inline void DeviceNmsSnmpConfig::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DeviceNmsSnmpConfig::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsSnmpConfig.port)
}

// .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceNmsSnmpConfig::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool DeviceNmsSnmpConfig::has_timeout() const {
  return _internal_has_timeout();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DeviceNmsSnmpConfig::_internal_timeout() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DeviceNmsSnmpConfig::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout)
  return _internal_timeout();
}
inline void DeviceNmsSnmpConfig::unsafe_arena_set_allocated_timeout(
    PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsSnmpConfig::release_timeout() {
  auto temp = unsafe_arena_release_timeout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsSnmpConfig::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsSnmpConfig::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    timeout_ = p;
  }
  return timeout_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsSnmpConfig::mutable_timeout() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout)
  return _internal_mutable_timeout();
}
inline void DeviceNmsSnmpConfig::set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout)
}

// -------------------------------------------------------------------

// DeviceNmsStConfig

// string credential_name = 1[json_name = "credentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsStConfig::clear_credential_name() {
  credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceNmsStConfig::credential_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
  return _internal_credential_name();
}
inline void DeviceNmsStConfig::set_credential_name(const std::string& value) {
  _internal_set_credential_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
}
inline std::string* DeviceNmsStConfig::mutable_credential_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
  return _internal_mutable_credential_name();
}
inline const std::string& DeviceNmsStConfig::_internal_credential_name() const {
  return credential_name_.Get();
}
inline void DeviceNmsStConfig::_internal_set_credential_name(const std::string& value) {
  
  credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceNmsStConfig::set_credential_name(std::string&& value) {
  
  credential_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
}
inline void DeviceNmsStConfig::set_credential_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
}
inline void DeviceNmsStConfig::set_credential_name(const char* value,
    size_t size) {
  
  credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
}
inline std::string* DeviceNmsStConfig::_internal_mutable_credential_name() {
  
  return credential_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceNmsStConfig::release_credential_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
  return credential_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNmsStConfig::set_allocated_credential_name(std::string* credential_name) {
  if (credential_name != nullptr) {
    
  } else {
    
  }
  credential_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
}
inline std::string* DeviceNmsStConfig::unsafe_arena_release_credential_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return credential_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceNmsStConfig::unsafe_arena_set_allocated_credential_name(
    std::string* credential_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (credential_name != nullptr) {
    
  } else {
    
  }
  credential_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      credential_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsStConfig.credential_name)
}

// uint32 port = 2[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsStConfig::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceNmsStConfig::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceNmsStConfig::port() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsStConfig.port)
  return _internal_port();
}
inline void DeviceNmsStConfig::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DeviceNmsStConfig::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsStConfig.port)
}

// .google.protobuf.Duration timeout = 3[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceNmsStConfig::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool DeviceNmsStConfig::has_timeout() const {
  return _internal_has_timeout();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DeviceNmsStConfig::_internal_timeout() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DeviceNmsStConfig::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsStConfig.timeout)
  return _internal_timeout();
}
inline void DeviceNmsStConfig::unsafe_arena_set_allocated_timeout(
    PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceNmsStConfig.timeout)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsStConfig::release_timeout() {
  auto temp = unsafe_arena_release_timeout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsStConfig::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceNmsStConfig.timeout)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsStConfig::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    timeout_ = p;
  }
  return timeout_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DeviceNmsStConfig::mutable_timeout() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceNmsStConfig.timeout)
  return _internal_mutable_timeout();
}
inline void DeviceNmsStConfig::set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceNmsStConfig.timeout)
}

// bool secure = 4[json_name = "secure", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceNmsStConfig::clear_secure() {
  secure_ = false;
}
inline bool DeviceNmsStConfig::_internal_secure() const {
  return secure_;
}
inline bool DeviceNmsStConfig::secure() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceNmsStConfig.secure)
  return _internal_secure();
}
inline void DeviceNmsStConfig::_internal_set_secure(bool value) {
  
  secure_ = value;
}
inline void DeviceNmsStConfig::set_secure(bool value) {
  _internal_set_secure(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceNmsStConfig.secure)
}

// -------------------------------------------------------------------

// DeviceConcise

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.id)
  return _internal_id();
}
inline void DeviceConcise::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.id)
}
inline std::string* DeviceConcise::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.id)
  return _internal_mutable_id();
}
inline const std::string& DeviceConcise::_internal_id() const {
  return id_.Get();
}
inline void DeviceConcise::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.id)
}
inline void DeviceConcise::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.id)
}
inline void DeviceConcise::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.id)
}
inline std::string* DeviceConcise::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.id)
}
inline std::string* DeviceConcise::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.id)
}

// string device_name = 2[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_name() {
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_name)
  return _internal_device_name();
}
inline void DeviceConcise::set_device_name(const std::string& value) {
  _internal_set_device_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_name)
}
inline std::string* DeviceConcise::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_name)
  return _internal_mutable_device_name();
}
inline const std::string& DeviceConcise::_internal_device_name() const {
  return device_name_.Get();
}
inline void DeviceConcise::_internal_set_device_name(const std::string& value) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_name(std::string&& value) {
  
  device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_name)
}
inline void DeviceConcise::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_name)
}
inline void DeviceConcise::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_name)
}
inline std::string* DeviceConcise::_internal_mutable_device_name() {
  
  return device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_name)
  return device_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_name)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_name(
    std::string* device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_name)
}

// string device_subtype = 3[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_subtype() {
  device_subtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_subtype() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_subtype)
  return _internal_device_subtype();
}
inline void DeviceConcise::set_device_subtype(const std::string& value) {
  _internal_set_device_subtype(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_subtype)
}
inline std::string* DeviceConcise::mutable_device_subtype() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_subtype)
  return _internal_mutable_device_subtype();
}
inline const std::string& DeviceConcise::_internal_device_subtype() const {
  return device_subtype_.Get();
}
inline void DeviceConcise::_internal_set_device_subtype(const std::string& value) {
  
  device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_subtype(std::string&& value) {
  
  device_subtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_subtype)
}
inline void DeviceConcise::set_device_subtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_subtype)
}
inline void DeviceConcise::set_device_subtype(const char* value,
    size_t size) {
  
  device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_subtype)
}
inline std::string* DeviceConcise::_internal_mutable_device_subtype() {
  
  return device_subtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_subtype() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_subtype)
  return device_subtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_subtype(std::string* device_subtype) {
  if (device_subtype != nullptr) {
    
  } else {
    
  }
  device_subtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_subtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_subtype)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_subtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_subtype)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_subtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_subtype(
    std::string* device_subtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_subtype != nullptr) {
    
  } else {
    
  }
  device_subtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_subtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_subtype)
}

// string cdn_attr = 4[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_cdn_attr() {
  cdn_attr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::cdn_attr() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
  return _internal_cdn_attr();
}
inline void DeviceConcise::set_cdn_attr(const std::string& value) {
  _internal_set_cdn_attr(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
}
inline std::string* DeviceConcise::mutable_cdn_attr() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
  return _internal_mutable_cdn_attr();
}
inline const std::string& DeviceConcise::_internal_cdn_attr() const {
  return cdn_attr_.Get();
}
inline void DeviceConcise::_internal_set_cdn_attr(const std::string& value) {
  
  cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_cdn_attr(std::string&& value) {
  
  cdn_attr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
}
inline void DeviceConcise::set_cdn_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
}
inline void DeviceConcise::set_cdn_attr(const char* value,
    size_t size) {
  
  cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
}
inline std::string* DeviceConcise::_internal_mutable_cdn_attr() {
  
  return cdn_attr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_cdn_attr() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
  return cdn_attr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_cdn_attr(std::string* cdn_attr) {
  if (cdn_attr != nullptr) {
    
  } else {
    
  }
  cdn_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
}
inline std::string* DeviceConcise::unsafe_arena_release_cdn_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cdn_attr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_cdn_attr(
    std::string* cdn_attr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cdn_attr != nullptr) {
    
  } else {
    
  }
  cdn_attr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cdn_attr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.cdn_attr)
}

// string device_description = 5[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_description() {
  device_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_description() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_description)
  return _internal_device_description();
}
inline void DeviceConcise::set_device_description(const std::string& value) {
  _internal_set_device_description(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_description)
}
inline std::string* DeviceConcise::mutable_device_description() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_description)
  return _internal_mutable_device_description();
}
inline const std::string& DeviceConcise::_internal_device_description() const {
  return device_description_.Get();
}
inline void DeviceConcise::_internal_set_device_description(const std::string& value) {
  
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_description(std::string&& value) {
  
  device_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_description)
}
inline void DeviceConcise::set_device_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_description)
}
inline void DeviceConcise::set_device_description(const char* value,
    size_t size) {
  
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_description)
}
inline std::string* DeviceConcise::_internal_mutable_device_description() {
  
  return device_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_description() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_description)
  return device_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_description(std::string* device_description) {
  if (device_description != nullptr) {
    
  } else {
    
  }
  device_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_description)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_description(
    std::string* device_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_description != nullptr) {
    
  } else {
    
  }
  device_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_description)
}

// repeated string sending_ips = 6[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeviceConcise::_internal_sending_ips_size() const {
  return sending_ips_.size();
}
inline int DeviceConcise::sending_ips_size() const {
  return _internal_sending_ips_size();
}
inline void DeviceConcise::clear_sending_ips() {
  sending_ips_.Clear();
}
inline std::string* DeviceConcise::add_sending_ips() {
  // @@protoc_insertion_point(field_add_mutable:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  return _internal_add_sending_ips();
}
inline const std::string& DeviceConcise::_internal_sending_ips(int index) const {
  return sending_ips_.Get(index);
}
inline const std::string& DeviceConcise::sending_ips(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  return _internal_sending_ips(index);
}
inline std::string* DeviceConcise::mutable_sending_ips(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  return sending_ips_.Mutable(index);
}
inline void DeviceConcise::set_sending_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  sending_ips_.Mutable(index)->assign(value);
}
inline void DeviceConcise::set_sending_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  sending_ips_.Mutable(index)->assign(std::move(value));
}
inline void DeviceConcise::set_sending_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sending_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.sending_ips)
}
inline void DeviceConcise::set_sending_ips(int index, const char* value, size_t size) {
  sending_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.sending_ips)
}
inline std::string* DeviceConcise::_internal_add_sending_ips() {
  return sending_ips_.Add();
}
inline void DeviceConcise::add_sending_ips(const std::string& value) {
  sending_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceConcise.sending_ips)
}
inline void DeviceConcise::add_sending_ips(std::string&& value) {
  sending_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceConcise.sending_ips)
}
inline void DeviceConcise::add_sending_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sending_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.device.v202308beta1.DeviceConcise.sending_ips)
}
inline void DeviceConcise::add_sending_ips(const char* value, size_t size) {
  sending_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.device.v202308beta1.DeviceConcise.sending_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceConcise::sending_ips() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  return sending_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceConcise::mutable_sending_ips() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeviceConcise.sending_ips)
  return &sending_ips_;
}

// double device_sample_rate = 7[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_sample_rate() {
  device_sample_rate_ = 0;
}
inline double DeviceConcise::_internal_device_sample_rate() const {
  return device_sample_rate_;
}
inline double DeviceConcise::device_sample_rate() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_sample_rate)
  return _internal_device_sample_rate();
}
inline void DeviceConcise::_internal_set_device_sample_rate(double value) {
  
  device_sample_rate_ = value;
}
inline void DeviceConcise::set_device_sample_rate(double value) {
  _internal_set_device_sample_rate(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_sample_rate)
}

// uint32 plan_id = 8[json_name = "planId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_plan_id() {
  plan_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::_internal_plan_id() const {
  return plan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::plan_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.plan_id)
  return _internal_plan_id();
}
inline void DeviceConcise::_internal_set_plan_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  plan_id_ = value;
}
inline void DeviceConcise::set_plan_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_plan_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.plan_id)
}

// uint32 site_id = 9[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_site_id() {
  site_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::_internal_site_id() const {
  return site_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::site_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.site_id)
  return _internal_site_id();
}
inline void DeviceConcise::_internal_set_site_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  site_id_ = value;
}
inline void DeviceConcise::set_site_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.site_id)
}

// bool minimize_snmp = 10[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceConcise::_internal_has_minimize_snmp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceConcise::has_minimize_snmp() const {
  return _internal_has_minimize_snmp();
}
inline void DeviceConcise::clear_minimize_snmp() {
  minimize_snmp_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceConcise::_internal_minimize_snmp() const {
  return minimize_snmp_;
}
inline bool DeviceConcise::minimize_snmp() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.minimize_snmp)
  return _internal_minimize_snmp();
}
inline void DeviceConcise::_internal_set_minimize_snmp(bool value) {
  _has_bits_[0] |= 0x00000001u;
  minimize_snmp_ = value;
}
inline void DeviceConcise::set_minimize_snmp(bool value) {
  _internal_set_minimize_snmp(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.minimize_snmp)
}

// string device_snmp_ip = 11[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_snmp_ip() {
  device_snmp_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_snmp_ip() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
  return _internal_device_snmp_ip();
}
inline void DeviceConcise::set_device_snmp_ip(const std::string& value) {
  _internal_set_device_snmp_ip(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
}
inline std::string* DeviceConcise::mutable_device_snmp_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
  return _internal_mutable_device_snmp_ip();
}
inline const std::string& DeviceConcise::_internal_device_snmp_ip() const {
  return device_snmp_ip_.Get();
}
inline void DeviceConcise::_internal_set_device_snmp_ip(const std::string& value) {
  
  device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_snmp_ip(std::string&& value) {
  
  device_snmp_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
}
inline void DeviceConcise::set_device_snmp_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
}
inline void DeviceConcise::set_device_snmp_ip(const char* value,
    size_t size) {
  
  device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
}
inline std::string* DeviceConcise::_internal_mutable_device_snmp_ip() {
  
  return device_snmp_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_snmp_ip() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
  return device_snmp_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_snmp_ip(std::string* device_snmp_ip) {
  if (device_snmp_ip != nullptr) {
    
  } else {
    
  }
  device_snmp_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_snmp_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_snmp_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_snmp_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_snmp_ip(
    std::string* device_snmp_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_snmp_ip != nullptr) {
    
  } else {
    
  }
  device_snmp_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_snmp_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_snmp_ip)
}

// string device_snmp_community = 12[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_snmp_community() {
  device_snmp_community_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_snmp_community() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
  return _internal_device_snmp_community();
}
inline void DeviceConcise::set_device_snmp_community(const std::string& value) {
  _internal_set_device_snmp_community(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
}
inline std::string* DeviceConcise::mutable_device_snmp_community() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
  return _internal_mutable_device_snmp_community();
}
inline const std::string& DeviceConcise::_internal_device_snmp_community() const {
  return device_snmp_community_.Get();
}
inline void DeviceConcise::_internal_set_device_snmp_community(const std::string& value) {
  
  device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_snmp_community(std::string&& value) {
  
  device_snmp_community_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
}
inline void DeviceConcise::set_device_snmp_community(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
}
inline void DeviceConcise::set_device_snmp_community(const char* value,
    size_t size) {
  
  device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
}
inline std::string* DeviceConcise::_internal_mutable_device_snmp_community() {
  
  return device_snmp_community_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_snmp_community() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
  return device_snmp_community_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_snmp_community(std::string* device_snmp_community) {
  if (device_snmp_community != nullptr) {
    
  } else {
    
  }
  device_snmp_community_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_snmp_community,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_snmp_community() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_snmp_community_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_snmp_community(
    std::string* device_snmp_community) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_snmp_community != nullptr) {
    
  } else {
    
  }
  device_snmp_community_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_snmp_community, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_snmp_community)
}

// .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 13[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceConcise::_internal_has_device_snmp_v3_conf() const {
  return this != internal_default_instance() && device_snmp_v3_conf_ != nullptr;
}
inline bool DeviceConcise::has_device_snmp_v3_conf() const {
  return _internal_has_device_snmp_v3_conf();
}
inline void DeviceConcise::clear_device_snmp_v3_conf() {
  if (GetArena() == nullptr && device_snmp_v3_conf_ != nullptr) {
    delete device_snmp_v3_conf_;
  }
  device_snmp_v3_conf_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& DeviceConcise::_internal_device_snmp_v3_conf() const {
  const ::kentik::device::v202308beta1::DeviceSnmpV3Conf* p = device_snmp_v3_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceSnmpV3Conf*>(
      &::kentik::device::v202308beta1::_DeviceSnmpV3Conf_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& DeviceConcise::device_snmp_v3_conf() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf)
  return _internal_device_snmp_v3_conf();
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_snmp_v3_conf(
    ::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_snmp_v3_conf_);
  }
  device_snmp_v3_conf_ = device_snmp_v3_conf;
  if (device_snmp_v3_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf)
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceConcise::release_device_snmp_v3_conf() {
  auto temp = unsafe_arena_release_device_snmp_v3_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceConcise::unsafe_arena_release_device_snmp_v3_conf() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf)
  
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* temp = device_snmp_v3_conf_;
  device_snmp_v3_conf_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceConcise::_internal_mutable_device_snmp_v3_conf() {
  
  if (device_snmp_v3_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceSnmpV3Conf>(GetArena());
    device_snmp_v3_conf_ = p;
  }
  return device_snmp_v3_conf_;
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceConcise::mutable_device_snmp_v3_conf() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf)
  return _internal_mutable_device_snmp_v3_conf();
}
inline void DeviceConcise::set_allocated_device_snmp_v3_conf(::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_snmp_v3_conf_;
  }
  if (device_snmp_v3_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_snmp_v3_conf);
    if (message_arena != submessage_arena) {
      device_snmp_v3_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_snmp_v3_conf, submessage_arena);
    }
    
  } else {
    
  }
  device_snmp_v3_conf_ = device_snmp_v3_conf;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf)
}

// string device_bgp_type = 14[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_type() {
  device_bgp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_bgp_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
  return _internal_device_bgp_type();
}
inline void DeviceConcise::set_device_bgp_type(const std::string& value) {
  _internal_set_device_bgp_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
}
inline std::string* DeviceConcise::mutable_device_bgp_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
  return _internal_mutable_device_bgp_type();
}
inline const std::string& DeviceConcise::_internal_device_bgp_type() const {
  return device_bgp_type_.Get();
}
inline void DeviceConcise::_internal_set_device_bgp_type(const std::string& value) {
  
  device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_bgp_type(std::string&& value) {
  
  device_bgp_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
}
inline void DeviceConcise::set_device_bgp_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
}
inline void DeviceConcise::set_device_bgp_type(const char* value,
    size_t size) {
  
  device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
}
inline std::string* DeviceConcise::_internal_mutable_device_bgp_type() {
  
  return device_bgp_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_bgp_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
  return device_bgp_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_bgp_type(std::string* device_bgp_type) {
  if (device_bgp_type != nullptr) {
    
  } else {
    
  }
  device_bgp_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_bgp_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_bgp_type(
    std::string* device_bgp_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_type != nullptr) {
    
  } else {
    
  }
  device_bgp_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_type)
}

// string device_bgp_neighbor_ip = 15[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_neighbor_ip() {
  device_bgp_neighbor_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_bgp_neighbor_ip() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
  return _internal_device_bgp_neighbor_ip();
}
inline void DeviceConcise::set_device_bgp_neighbor_ip(const std::string& value) {
  _internal_set_device_bgp_neighbor_ip(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
}
inline std::string* DeviceConcise::mutable_device_bgp_neighbor_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
  return _internal_mutable_device_bgp_neighbor_ip();
}
inline const std::string& DeviceConcise::_internal_device_bgp_neighbor_ip() const {
  return device_bgp_neighbor_ip_.Get();
}
inline void DeviceConcise::_internal_set_device_bgp_neighbor_ip(const std::string& value) {
  
  device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_bgp_neighbor_ip(std::string&& value) {
  
  device_bgp_neighbor_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
}
inline void DeviceConcise::set_device_bgp_neighbor_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
}
inline void DeviceConcise::set_device_bgp_neighbor_ip(const char* value,
    size_t size) {
  
  device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
}
inline std::string* DeviceConcise::_internal_mutable_device_bgp_neighbor_ip() {
  
  return device_bgp_neighbor_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_bgp_neighbor_ip() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
  return device_bgp_neighbor_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_bgp_neighbor_ip(std::string* device_bgp_neighbor_ip) {
  if (device_bgp_neighbor_ip != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_neighbor_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_bgp_neighbor_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_neighbor_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_bgp_neighbor_ip(
    std::string* device_bgp_neighbor_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_neighbor_ip != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_neighbor_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip)
}

// string device_bgp_neighbor_ip6 = 16[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_neighbor_ip6() {
  device_bgp_neighbor_ip6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_bgp_neighbor_ip6() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
  return _internal_device_bgp_neighbor_ip6();
}
inline void DeviceConcise::set_device_bgp_neighbor_ip6(const std::string& value) {
  _internal_set_device_bgp_neighbor_ip6(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
}
inline std::string* DeviceConcise::mutable_device_bgp_neighbor_ip6() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
  return _internal_mutable_device_bgp_neighbor_ip6();
}
inline const std::string& DeviceConcise::_internal_device_bgp_neighbor_ip6() const {
  return device_bgp_neighbor_ip6_.Get();
}
inline void DeviceConcise::_internal_set_device_bgp_neighbor_ip6(const std::string& value) {
  
  device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_bgp_neighbor_ip6(std::string&& value) {
  
  device_bgp_neighbor_ip6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
}
inline void DeviceConcise::set_device_bgp_neighbor_ip6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
}
inline void DeviceConcise::set_device_bgp_neighbor_ip6(const char* value,
    size_t size) {
  
  device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
}
inline std::string* DeviceConcise::_internal_mutable_device_bgp_neighbor_ip6() {
  
  return device_bgp_neighbor_ip6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_bgp_neighbor_ip6() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
  return device_bgp_neighbor_ip6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_bgp_neighbor_ip6(std::string* device_bgp_neighbor_ip6) {
  if (device_bgp_neighbor_ip6 != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_neighbor_ip6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_bgp_neighbor_ip6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_neighbor_ip6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_bgp_neighbor_ip6(
    std::string* device_bgp_neighbor_ip6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_neighbor_ip6 != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_neighbor_ip6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_ip6)
}

// string device_bgp_neighbor_asn = 17[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_neighbor_asn() {
  device_bgp_neighbor_asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_bgp_neighbor_asn() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
  return _internal_device_bgp_neighbor_asn();
}
inline void DeviceConcise::set_device_bgp_neighbor_asn(const std::string& value) {
  _internal_set_device_bgp_neighbor_asn(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
}
inline std::string* DeviceConcise::mutable_device_bgp_neighbor_asn() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
  return _internal_mutable_device_bgp_neighbor_asn();
}
inline const std::string& DeviceConcise::_internal_device_bgp_neighbor_asn() const {
  return device_bgp_neighbor_asn_.Get();
}
inline void DeviceConcise::_internal_set_device_bgp_neighbor_asn(const std::string& value) {
  
  device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_bgp_neighbor_asn(std::string&& value) {
  
  device_bgp_neighbor_asn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
}
inline void DeviceConcise::set_device_bgp_neighbor_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
}
inline void DeviceConcise::set_device_bgp_neighbor_asn(const char* value,
    size_t size) {
  
  device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
}
inline std::string* DeviceConcise::_internal_mutable_device_bgp_neighbor_asn() {
  
  return device_bgp_neighbor_asn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_bgp_neighbor_asn() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
  return device_bgp_neighbor_asn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_bgp_neighbor_asn(std::string* device_bgp_neighbor_asn) {
  if (device_bgp_neighbor_asn != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_asn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_neighbor_asn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_bgp_neighbor_asn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_neighbor_asn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_bgp_neighbor_asn(
    std::string* device_bgp_neighbor_asn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_neighbor_asn != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_asn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_neighbor_asn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_neighbor_asn)
}

// string device_bgp_password = 18[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_password() {
  device_bgp_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_bgp_password() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
  return _internal_device_bgp_password();
}
inline void DeviceConcise::set_device_bgp_password(const std::string& value) {
  _internal_set_device_bgp_password(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
}
inline std::string* DeviceConcise::mutable_device_bgp_password() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
  return _internal_mutable_device_bgp_password();
}
inline const std::string& DeviceConcise::_internal_device_bgp_password() const {
  return device_bgp_password_.Get();
}
inline void DeviceConcise::_internal_set_device_bgp_password(const std::string& value) {
  
  device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_bgp_password(std::string&& value) {
  
  device_bgp_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
}
inline void DeviceConcise::set_device_bgp_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
}
inline void DeviceConcise::set_device_bgp_password(const char* value,
    size_t size) {
  
  device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
}
inline std::string* DeviceConcise::_internal_mutable_device_bgp_password() {
  
  return device_bgp_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_bgp_password() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
  return device_bgp_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_bgp_password(std::string* device_bgp_password) {
  if (device_bgp_password != nullptr) {
    
  } else {
    
  }
  device_bgp_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_bgp_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_bgp_password(
    std::string* device_bgp_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_password != nullptr) {
    
  } else {
    
  }
  device_bgp_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_password)
}

// uint32 use_bgp_device_id = 19[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_use_bgp_device_id() {
  use_bgp_device_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::_internal_use_bgp_device_id() const {
  return use_bgp_device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::use_bgp_device_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.use_bgp_device_id)
  return _internal_use_bgp_device_id();
}
inline void DeviceConcise::_internal_set_use_bgp_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  use_bgp_device_id_ = value;
}
inline void DeviceConcise::set_use_bgp_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_use_bgp_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.use_bgp_device_id)
}

// bool device_bgp_flowspec = 20[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_flowspec() {
  device_bgp_flowspec_ = false;
}
inline bool DeviceConcise::_internal_device_bgp_flowspec() const {
  return device_bgp_flowspec_;
}
inline bool DeviceConcise::device_bgp_flowspec() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_flowspec)
  return _internal_device_bgp_flowspec();
}
inline void DeviceConcise::_internal_set_device_bgp_flowspec(bool value) {
  
  device_bgp_flowspec_ = value;
}
inline void DeviceConcise::set_device_bgp_flowspec(bool value) {
  _internal_set_device_bgp_flowspec(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_flowspec)
}

// .kentik.device.v202308beta1.DeviceNmsConfig nms = 21[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceConcise::_internal_has_nms() const {
  return this != internal_default_instance() && nms_ != nullptr;
}
inline bool DeviceConcise::has_nms() const {
  return _internal_has_nms();
}
inline void DeviceConcise::clear_nms() {
  if (GetArena() == nullptr && nms_ != nullptr) {
    delete nms_;
  }
  nms_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceNmsConfig& DeviceConcise::_internal_nms() const {
  const ::kentik::device::v202308beta1::DeviceNmsConfig* p = nms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceNmsConfig*>(
      &::kentik::device::v202308beta1::_DeviceNmsConfig_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceNmsConfig& DeviceConcise::nms() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.nms)
  return _internal_nms();
}
inline void DeviceConcise::unsafe_arena_set_allocated_nms(
    ::kentik::device::v202308beta1::DeviceNmsConfig* nms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nms_);
  }
  nms_ = nms;
  if (nms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.nms)
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceConcise::release_nms() {
  auto temp = unsafe_arena_release_nms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceConcise::unsafe_arena_release_nms() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.nms)
  
  ::kentik::device::v202308beta1::DeviceNmsConfig* temp = nms_;
  nms_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceConcise::_internal_mutable_nms() {
  
  if (nms_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsConfig>(GetArena());
    nms_ = p;
  }
  return nms_;
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceConcise::mutable_nms() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.nms)
  return _internal_mutable_nms();
}
inline void DeviceConcise::set_allocated_nms(::kentik::device::v202308beta1::DeviceNmsConfig* nms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nms_;
  }
  if (nms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nms);
    if (message_arena != submessage_arena) {
      nms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms, submessage_arena);
    }
    
  } else {
    
  }
  nms_ = nms;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.nms)
}

// string device_bgp_credential_name = 22[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_device_bgp_credential_name() {
  device_bgp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::device_bgp_credential_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
  return _internal_device_bgp_credential_name();
}
inline void DeviceConcise::set_device_bgp_credential_name(const std::string& value) {
  _internal_set_device_bgp_credential_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
}
inline std::string* DeviceConcise::mutable_device_bgp_credential_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
  return _internal_mutable_device_bgp_credential_name();
}
inline const std::string& DeviceConcise::_internal_device_bgp_credential_name() const {
  return device_bgp_credential_name_.Get();
}
inline void DeviceConcise::_internal_set_device_bgp_credential_name(const std::string& value) {
  
  device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_device_bgp_credential_name(std::string&& value) {
  
  device_bgp_credential_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
}
inline void DeviceConcise::set_device_bgp_credential_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
}
inline void DeviceConcise::set_device_bgp_credential_name(const char* value,
    size_t size) {
  
  device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
}
inline std::string* DeviceConcise::_internal_mutable_device_bgp_credential_name() {
  
  return device_bgp_credential_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_device_bgp_credential_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
  return device_bgp_credential_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_device_bgp_credential_name(std::string* device_bgp_credential_name) {
  if (device_bgp_credential_name != nullptr) {
    
  } else {
    
  }
  device_bgp_credential_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_credential_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
}
inline std::string* DeviceConcise::unsafe_arena_release_device_bgp_credential_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_credential_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_device_bgp_credential_name(
    std::string* device_bgp_credential_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_credential_name != nullptr) {
    
  } else {
    
  }
  device_bgp_credential_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_credential_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.device_bgp_credential_name)
}

// string flow_snmp_credential_name = 23[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_flow_snmp_credential_name() {
  flow_snmp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceConcise::flow_snmp_credential_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
  return _internal_flow_snmp_credential_name();
}
inline void DeviceConcise::set_flow_snmp_credential_name(const std::string& value) {
  _internal_set_flow_snmp_credential_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
}
inline std::string* DeviceConcise::mutable_flow_snmp_credential_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
  return _internal_mutable_flow_snmp_credential_name();
}
inline const std::string& DeviceConcise::_internal_flow_snmp_credential_name() const {
  return flow_snmp_credential_name_.Get();
}
inline void DeviceConcise::_internal_set_flow_snmp_credential_name(const std::string& value) {
  
  flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceConcise::set_flow_snmp_credential_name(std::string&& value) {
  
  flow_snmp_credential_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
}
inline void DeviceConcise::set_flow_snmp_credential_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
}
inline void DeviceConcise::set_flow_snmp_credential_name(const char* value,
    size_t size) {
  
  flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
}
inline std::string* DeviceConcise::_internal_mutable_flow_snmp_credential_name() {
  
  return flow_snmp_credential_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceConcise::release_flow_snmp_credential_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
  return flow_snmp_credential_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceConcise::set_allocated_flow_snmp_credential_name(std::string* flow_snmp_credential_name) {
  if (flow_snmp_credential_name != nullptr) {
    
  } else {
    
  }
  flow_snmp_credential_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_snmp_credential_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
}
inline std::string* DeviceConcise::unsafe_arena_release_flow_snmp_credential_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return flow_snmp_credential_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceConcise::unsafe_arena_set_allocated_flow_snmp_credential_name(
    std::string* flow_snmp_credential_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (flow_snmp_credential_name != nullptr) {
    
  } else {
    
  }
  flow_snmp_credential_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      flow_snmp_credential_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceConcise.flow_snmp_credential_name)
}

// uint32 monitoring_template_id = 24[json_name = "monitoringTemplateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceConcise::clear_monitoring_template_id() {
  monitoring_template_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::_internal_monitoring_template_id() const {
  return monitoring_template_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConcise::monitoring_template_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceConcise.monitoring_template_id)
  return _internal_monitoring_template_id();
}
inline void DeviceConcise::_internal_set_monitoring_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  monitoring_template_id_ = value;
}
inline void DeviceConcise::set_monitoring_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_monitoring_template_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceConcise.monitoring_template_id)
}

// -------------------------------------------------------------------

// Site

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Site.id)
  return _internal_id();
}
inline void Site::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Site.id)
}
inline std::string* Site::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Site.id)
  return _internal_mutable_id();
}
inline const std::string& Site::_internal_id() const {
  return id_.Get();
}
inline void Site::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Site.id)
}
inline void Site::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Site.id)
}
inline void Site::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Site.id)
}
inline std::string* Site::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Site.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Site.id)
}
inline std::string* Site::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Site.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Site.id)
}

// string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_site_name() {
  site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::site_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Site.site_name)
  return _internal_site_name();
}
inline void Site::set_site_name(const std::string& value) {
  _internal_set_site_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Site.site_name)
}
inline std::string* Site::mutable_site_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Site.site_name)
  return _internal_mutable_site_name();
}
inline const std::string& Site::_internal_site_name() const {
  return site_name_.Get();
}
inline void Site::_internal_set_site_name(const std::string& value) {
  
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_site_name(std::string&& value) {
  
  site_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Site.site_name)
}
inline void Site::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Site.site_name)
}
inline void Site::set_site_name(const char* value,
    size_t size) {
  
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Site.site_name)
}
inline std::string* Site::_internal_mutable_site_name() {
  
  return site_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_site_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Site.site_name)
  return site_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_site_name(std::string* site_name) {
  if (site_name != nullptr) {
    
  } else {
    
  }
  site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Site.site_name)
}
inline std::string* Site::unsafe_arena_release_site_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Site.site_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_site_name(
    std::string* site_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_name != nullptr) {
    
  } else {
    
  }
  site_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Site.site_name)
}

// double lat = 3[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_lat() {
  lat_ = 0;
}
inline double Site::_internal_lat() const {
  return lat_;
}
inline double Site::lat() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Site.lat)
  return _internal_lat();
}
inline void Site::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Site::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Site.lat)
}

// double lon = 4[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_lon() {
  lon_ = 0;
}
inline double Site::_internal_lon() const {
  return lon_;
}
inline double Site::lon() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Site.lon)
  return _internal_lon();
}
inline void Site::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Site::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Site.lon)
}

// string company_id = 5[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_company_id() {
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Site.company_id)
  return _internal_company_id();
}
inline void Site::set_company_id(const std::string& value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Site.company_id)
}
inline std::string* Site::mutable_company_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Site.company_id)
  return _internal_mutable_company_id();
}
inline const std::string& Site::_internal_company_id() const {
  return company_id_.Get();
}
inline void Site::_internal_set_company_id(const std::string& value) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_company_id(std::string&& value) {
  
  company_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Site.company_id)
}
inline void Site::set_company_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Site.company_id)
}
inline void Site::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Site.company_id)
}
inline std::string* Site::_internal_mutable_company_id() {
  
  return company_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_company_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Site.company_id)
  return company_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_company_id(std::string* company_id) {
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Site.company_id)
}
inline std::string* Site::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Site.company_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return company_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_company_id(
    std::string* company_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Site.company_id)
}

// -------------------------------------------------------------------

// Plan

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Plan.id)
  return _internal_id();
}
inline void Plan::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Plan.id)
}
inline std::string* Plan::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Plan.id)
  return _internal_mutable_id();
}
inline const std::string& Plan::_internal_id() const {
  return id_.Get();
}
inline void Plan::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Plan.id)
}
inline void Plan::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Plan.id)
}
inline void Plan::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Plan.id)
}
inline std::string* Plan::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Plan.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Plan.id)
}
inline std::string* Plan::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Plan.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Plan::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Plan.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Plan::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Plan.name)
  return _internal_name();
}
inline void Plan::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Plan.name)
}
inline std::string* Plan::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Plan.name)
  return _internal_mutable_name();
}
inline const std::string& Plan::_internal_name() const {
  return name_.Get();
}
inline void Plan::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Plan.name)
}
inline void Plan::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Plan.name)
}
inline void Plan::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Plan.name)
}
inline std::string* Plan::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Plan.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Plan.name)
}
inline std::string* Plan::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Plan.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Plan::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Plan.name)
}

// -------------------------------------------------------------------

// Label

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.id)
  return _internal_id();
}
inline void Label::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.id)
}
inline std::string* Label::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.id)
  return _internal_mutable_id();
}
inline const std::string& Label::_internal_id() const {
  return id_.Get();
}
inline void Label::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.id)
}
inline void Label::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.id)
}
inline void Label::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.id)
}
inline std::string* Label::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.id)
}
inline std::string* Label::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.name)
  return _internal_name();
}
inline void Label::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.name)
}
inline std::string* Label::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.name)
  return _internal_mutable_name();
}
inline const std::string& Label::_internal_name() const {
  return name_.Get();
}
inline void Label::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.name)
}
inline void Label::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.name)
}
inline void Label::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.name)
}
inline std::string* Label::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.name)
}
inline std::string* Label::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.name)
}

// string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::description() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.description)
  return _internal_description();
}
inline void Label::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.description)
}
inline std::string* Label::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.description)
  return _internal_mutable_description();
}
inline const std::string& Label::_internal_description() const {
  return description_.Get();
}
inline void Label::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.description)
}
inline void Label::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.description)
}
inline void Label::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.description)
}
inline std::string* Label::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_description() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.description)
}
inline std::string* Label::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.description)
}

// .google.protobuf.Timestamp edate = 4[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Label::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool Label::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::edate() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.edate)
  return _internal_edate();
}
inline void Label::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.edate)
  return _internal_mutable_edate();
}
inline void Label::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.edate)
}

// .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Label::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool Label::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.cdate)
  return _internal_cdate();
}
inline void Label::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.cdate)
  return _internal_mutable_cdate();
}
inline void Label::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.cdate)
}

// string user_id = 6[json_name = "userId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::user_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.user_id)
  return _internal_user_id();
}
inline void Label::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.user_id)
}
inline std::string* Label::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Label::_internal_user_id() const {
  return user_id_.Get();
}
inline void Label::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.user_id)
}
inline void Label::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.user_id)
}
inline void Label::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.user_id)
}
inline std::string* Label::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_user_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.user_id)
}
inline std::string* Label::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.user_id)
}

// string company_id = 7[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_company_id() {
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.company_id)
  return _internal_company_id();
}
inline void Label::set_company_id(const std::string& value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.company_id)
}
inline std::string* Label::mutable_company_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.company_id)
  return _internal_mutable_company_id();
}
inline const std::string& Label::_internal_company_id() const {
  return company_id_.Get();
}
inline void Label::_internal_set_company_id(const std::string& value) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_company_id(std::string&& value) {
  
  company_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.company_id)
}
inline void Label::set_company_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.company_id)
}
inline void Label::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.company_id)
}
inline std::string* Label::_internal_mutable_company_id() {
  
  return company_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_company_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.company_id)
  return company_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_company_id(std::string* company_id) {
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.company_id)
}
inline std::string* Label::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.company_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return company_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_company_id(
    std::string* company_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.company_id)
}

// string color = 8[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::color() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.color)
  return _internal_color();
}
inline void Label::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.color)
}
inline std::string* Label::mutable_color() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.color)
  return _internal_mutable_color();
}
inline const std::string& Label::_internal_color() const {
  return color_.Get();
}
inline void Label::_internal_set_color(const std::string& value) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_color(std::string&& value) {
  
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.color)
}
inline void Label::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.color)
}
inline void Label::set_color(const char* value,
    size_t size) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.color)
}
inline std::string* Label::_internal_mutable_color() {
  
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_color() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.color)
}
inline std::string* Label::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.color)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return color_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_color(
    std::string* color) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color != nullptr) {
    
  } else {
    
  }
  color_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.color)
}

// string order = 9[json_name = "order", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_order() {
  order_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::order() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.order)
  return _internal_order();
}
inline void Label::set_order(const std::string& value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.order)
}
inline std::string* Label::mutable_order() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.order)
  return _internal_mutable_order();
}
inline const std::string& Label::_internal_order() const {
  return order_.Get();
}
inline void Label::_internal_set_order(const std::string& value) {
  
  order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_order(std::string&& value) {
  
  order_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.order)
}
inline void Label::set_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.order)
}
inline void Label::set_order(const char* value,
    size_t size) {
  
  order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.order)
}
inline std::string* Label::_internal_mutable_order() {
  
  return order_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_order() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.order)
  return order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_order(std::string* order) {
  if (order != nullptr) {
    
  } else {
    
  }
  order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.order)
}
inline std::string* Label::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.order)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return order_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_order(
    std::string* order) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (order != nullptr) {
    
  } else {
    
  }
  order_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.order)
}

// string pivot_device_id = 10[json_name = "pivotDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_pivot_device_id() {
  pivot_device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::pivot_device_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.pivot_device_id)
  return _internal_pivot_device_id();
}
inline void Label::set_pivot_device_id(const std::string& value) {
  _internal_set_pivot_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.pivot_device_id)
}
inline std::string* Label::mutable_pivot_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.pivot_device_id)
  return _internal_mutable_pivot_device_id();
}
inline const std::string& Label::_internal_pivot_device_id() const {
  return pivot_device_id_.Get();
}
inline void Label::_internal_set_pivot_device_id(const std::string& value) {
  
  pivot_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_pivot_device_id(std::string&& value) {
  
  pivot_device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.pivot_device_id)
}
inline void Label::set_pivot_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pivot_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.pivot_device_id)
}
inline void Label::set_pivot_device_id(const char* value,
    size_t size) {
  
  pivot_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.pivot_device_id)
}
inline std::string* Label::_internal_mutable_pivot_device_id() {
  
  return pivot_device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_pivot_device_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.pivot_device_id)
  return pivot_device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_pivot_device_id(std::string* pivot_device_id) {
  if (pivot_device_id != nullptr) {
    
  } else {
    
  }
  pivot_device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pivot_device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.pivot_device_id)
}
inline std::string* Label::unsafe_arena_release_pivot_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.pivot_device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pivot_device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_pivot_device_id(
    std::string* pivot_device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pivot_device_id != nullptr) {
    
  } else {
    
  }
  pivot_device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pivot_device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.pivot_device_id)
}

// string pivot_label_id = 11[json_name = "pivotLabelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_pivot_label_id() {
  pivot_label_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::pivot_label_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Label.pivot_label_id)
  return _internal_pivot_label_id();
}
inline void Label::set_pivot_label_id(const std::string& value) {
  _internal_set_pivot_label_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Label.pivot_label_id)
}
inline std::string* Label::mutable_pivot_label_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Label.pivot_label_id)
  return _internal_mutable_pivot_label_id();
}
inline const std::string& Label::_internal_pivot_label_id() const {
  return pivot_label_id_.Get();
}
inline void Label::_internal_set_pivot_label_id(const std::string& value) {
  
  pivot_label_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_pivot_label_id(std::string&& value) {
  
  pivot_label_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Label.pivot_label_id)
}
inline void Label::set_pivot_label_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pivot_label_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Label.pivot_label_id)
}
inline void Label::set_pivot_label_id(const char* value,
    size_t size) {
  
  pivot_label_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Label.pivot_label_id)
}
inline std::string* Label::_internal_mutable_pivot_label_id() {
  
  return pivot_label_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_pivot_label_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Label.pivot_label_id)
  return pivot_label_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_pivot_label_id(std::string* pivot_label_id) {
  if (pivot_label_id != nullptr) {
    
  } else {
    
  }
  pivot_label_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pivot_label_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Label.pivot_label_id)
}
inline std::string* Label::unsafe_arena_release_pivot_label_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Label.pivot_label_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pivot_label_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_pivot_label_id(
    std::string* pivot_label_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pivot_label_id != nullptr) {
    
  } else {
    
  }
  pivot_label_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pivot_label_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Label.pivot_label_id)
}

// -------------------------------------------------------------------

// Interface

// string interface_description = 1[json_name = "interfaceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_interface_description() {
  interface_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::interface_description() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.interface_description)
  return _internal_interface_description();
}
inline void Interface::set_interface_description(const std::string& value) {
  _internal_set_interface_description(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.interface_description)
}
inline std::string* Interface::mutable_interface_description() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.interface_description)
  return _internal_mutable_interface_description();
}
inline const std::string& Interface::_internal_interface_description() const {
  return interface_description_.Get();
}
inline void Interface::_internal_set_interface_description(const std::string& value) {
  
  interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_interface_description(std::string&& value) {
  
  interface_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.interface_description)
}
inline void Interface::set_interface_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.interface_description)
}
inline void Interface::set_interface_description(const char* value,
    size_t size) {
  
  interface_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.interface_description)
}
inline std::string* Interface::_internal_mutable_interface_description() {
  
  return interface_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_interface_description() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.interface_description)
  return interface_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_interface_description(std::string* interface_description) {
  if (interface_description != nullptr) {
    
  } else {
    
  }
  interface_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.interface_description)
}
inline std::string* Interface::unsafe_arena_release_interface_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.interface_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_interface_description(
    std::string* interface_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_description != nullptr) {
    
  } else {
    
  }
  interface_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.interface_description)
}

// string initial_snmp_speed = 2[json_name = "initialSnmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_initial_snmp_speed() {
  initial_snmp_speed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::initial_snmp_speed() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.initial_snmp_speed)
  return _internal_initial_snmp_speed();
}
inline void Interface::set_initial_snmp_speed(const std::string& value) {
  _internal_set_initial_snmp_speed(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.initial_snmp_speed)
}
inline std::string* Interface::mutable_initial_snmp_speed() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.initial_snmp_speed)
  return _internal_mutable_initial_snmp_speed();
}
inline const std::string& Interface::_internal_initial_snmp_speed() const {
  return initial_snmp_speed_.Get();
}
inline void Interface::_internal_set_initial_snmp_speed(const std::string& value) {
  
  initial_snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_initial_snmp_speed(std::string&& value) {
  
  initial_snmp_speed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.initial_snmp_speed)
}
inline void Interface::set_initial_snmp_speed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initial_snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.initial_snmp_speed)
}
inline void Interface::set_initial_snmp_speed(const char* value,
    size_t size) {
  
  initial_snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.initial_snmp_speed)
}
inline std::string* Interface::_internal_mutable_initial_snmp_speed() {
  
  return initial_snmp_speed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_initial_snmp_speed() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.initial_snmp_speed)
  return initial_snmp_speed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_initial_snmp_speed(std::string* initial_snmp_speed) {
  if (initial_snmp_speed != nullptr) {
    
  } else {
    
  }
  initial_snmp_speed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initial_snmp_speed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.initial_snmp_speed)
}
inline std::string* Interface::unsafe_arena_release_initial_snmp_speed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.initial_snmp_speed)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return initial_snmp_speed_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_initial_snmp_speed(
    std::string* initial_snmp_speed) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (initial_snmp_speed != nullptr) {
    
  } else {
    
  }
  initial_snmp_speed_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      initial_snmp_speed, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.initial_snmp_speed)
}

// string device_id = 3[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.device_id)
  return _internal_device_id();
}
inline void Interface::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.device_id)
}
inline std::string* Interface::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& Interface::_internal_device_id() const {
  return device_id_.Get();
}
inline void Interface::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.device_id)
}
inline void Interface::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.device_id)
}
inline void Interface::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.device_id)
}
inline std::string* Interface::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.device_id)
}
inline std::string* Interface::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.device_id)
}

// string snmp_speed = 4[json_name = "snmpSpeed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_snmp_speed() {
  snmp_speed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::snmp_speed() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.snmp_speed)
  return _internal_snmp_speed();
}
inline void Interface::set_snmp_speed(const std::string& value) {
  _internal_set_snmp_speed(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.snmp_speed)
}
inline std::string* Interface::mutable_snmp_speed() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.snmp_speed)
  return _internal_mutable_snmp_speed();
}
inline const std::string& Interface::_internal_snmp_speed() const {
  return snmp_speed_.Get();
}
inline void Interface::_internal_set_snmp_speed(const std::string& value) {
  
  snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_snmp_speed(std::string&& value) {
  
  snmp_speed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.snmp_speed)
}
inline void Interface::set_snmp_speed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.snmp_speed)
}
inline void Interface::set_snmp_speed(const char* value,
    size_t size) {
  
  snmp_speed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.snmp_speed)
}
inline std::string* Interface::_internal_mutable_snmp_speed() {
  
  return snmp_speed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_snmp_speed() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.snmp_speed)
  return snmp_speed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_snmp_speed(std::string* snmp_speed) {
  if (snmp_speed != nullptr) {
    
  } else {
    
  }
  snmp_speed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_speed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.snmp_speed)
}
inline std::string* Interface::unsafe_arena_release_snmp_speed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.snmp_speed)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_speed_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_snmp_speed(
    std::string* snmp_speed) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_speed != nullptr) {
    
  } else {
    
  }
  snmp_speed_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_speed, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.snmp_speed)
}

// string snmp_alias = 5[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_snmp_alias() {
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::snmp_alias() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.snmp_alias)
  return _internal_snmp_alias();
}
inline void Interface::set_snmp_alias(const std::string& value) {
  _internal_set_snmp_alias(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.snmp_alias)
}
inline std::string* Interface::mutable_snmp_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.snmp_alias)
  return _internal_mutable_snmp_alias();
}
inline const std::string& Interface::_internal_snmp_alias() const {
  return snmp_alias_.Get();
}
inline void Interface::_internal_set_snmp_alias(const std::string& value) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_snmp_alias(std::string&& value) {
  
  snmp_alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.snmp_alias)
}
inline void Interface::set_snmp_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.snmp_alias)
}
inline void Interface::set_snmp_alias(const char* value,
    size_t size) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.snmp_alias)
}
inline std::string* Interface::_internal_mutable_snmp_alias() {
  
  return snmp_alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_snmp_alias() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.snmp_alias)
  return snmp_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_snmp_alias(std::string* snmp_alias) {
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.snmp_alias)
}
inline std::string* Interface::unsafe_arena_release_snmp_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.snmp_alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_snmp_alias(
    std::string* snmp_alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.snmp_alias)
}

// string snmp_id = 6[json_name = "snmpId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_snmp_id() {
  snmp_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::snmp_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.snmp_id)
  return _internal_snmp_id();
}
inline void Interface::set_snmp_id(const std::string& value) {
  _internal_set_snmp_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.snmp_id)
}
inline std::string* Interface::mutable_snmp_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.snmp_id)
  return _internal_mutable_snmp_id();
}
inline const std::string& Interface::_internal_snmp_id() const {
  return snmp_id_.Get();
}
inline void Interface::_internal_set_snmp_id(const std::string& value) {
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_snmp_id(std::string&& value) {
  
  snmp_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.snmp_id)
}
inline void Interface::set_snmp_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.snmp_id)
}
inline void Interface::set_snmp_id(const char* value,
    size_t size) {
  
  snmp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.snmp_id)
}
inline std::string* Interface::_internal_mutable_snmp_id() {
  
  return snmp_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_snmp_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.snmp_id)
  return snmp_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_snmp_id(std::string* snmp_id) {
  if (snmp_id != nullptr) {
    
  } else {
    
  }
  snmp_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.snmp_id)
}
inline std::string* Interface::unsafe_arena_release_snmp_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.snmp_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_snmp_id(
    std::string* snmp_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_id != nullptr) {
    
  } else {
    
  }
  snmp_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.snmp_id)
}

// string connectivity_type = 7[json_name = "connectivityType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_connectivity_type() {
  connectivity_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::connectivity_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.connectivity_type)
  return _internal_connectivity_type();
}
inline void Interface::set_connectivity_type(const std::string& value) {
  _internal_set_connectivity_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.connectivity_type)
}
inline std::string* Interface::mutable_connectivity_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.connectivity_type)
  return _internal_mutable_connectivity_type();
}
inline const std::string& Interface::_internal_connectivity_type() const {
  return connectivity_type_.Get();
}
inline void Interface::_internal_set_connectivity_type(const std::string& value) {
  
  connectivity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_connectivity_type(std::string&& value) {
  
  connectivity_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.connectivity_type)
}
inline void Interface::set_connectivity_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connectivity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.connectivity_type)
}
inline void Interface::set_connectivity_type(const char* value,
    size_t size) {
  
  connectivity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.connectivity_type)
}
inline std::string* Interface::_internal_mutable_connectivity_type() {
  
  return connectivity_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_connectivity_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.connectivity_type)
  return connectivity_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_connectivity_type(std::string* connectivity_type) {
  if (connectivity_type != nullptr) {
    
  } else {
    
  }
  connectivity_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectivity_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.connectivity_type)
}
inline std::string* Interface::unsafe_arena_release_connectivity_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.connectivity_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return connectivity_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_connectivity_type(
    std::string* connectivity_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (connectivity_type != nullptr) {
    
  } else {
    
  }
  connectivity_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      connectivity_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.connectivity_type)
}

// string network_boundary = 8[json_name = "networkBoundary", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_network_boundary() {
  network_boundary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::network_boundary() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.network_boundary)
  return _internal_network_boundary();
}
inline void Interface::set_network_boundary(const std::string& value) {
  _internal_set_network_boundary(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.network_boundary)
}
inline std::string* Interface::mutable_network_boundary() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.network_boundary)
  return _internal_mutable_network_boundary();
}
inline const std::string& Interface::_internal_network_boundary() const {
  return network_boundary_.Get();
}
inline void Interface::_internal_set_network_boundary(const std::string& value) {
  
  network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_network_boundary(std::string&& value) {
  
  network_boundary_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.network_boundary)
}
inline void Interface::set_network_boundary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.network_boundary)
}
inline void Interface::set_network_boundary(const char* value,
    size_t size) {
  
  network_boundary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.network_boundary)
}
inline std::string* Interface::_internal_mutable_network_boundary() {
  
  return network_boundary_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_network_boundary() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.network_boundary)
  return network_boundary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_network_boundary(std::string* network_boundary) {
  if (network_boundary != nullptr) {
    
  } else {
    
  }
  network_boundary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_boundary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.network_boundary)
}
inline std::string* Interface::unsafe_arena_release_network_boundary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.network_boundary)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return network_boundary_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_network_boundary(
    std::string* network_boundary) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (network_boundary != nullptr) {
    
  } else {
    
  }
  network_boundary_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      network_boundary, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.network_boundary)
}

// string provider = 9[json_name = "provider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Interface::clear_provider() {
  provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Interface::provider() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.Interface.provider)
  return _internal_provider();
}
inline void Interface::set_provider(const std::string& value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.Interface.provider)
}
inline std::string* Interface::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.Interface.provider)
  return _internal_mutable_provider();
}
inline const std::string& Interface::_internal_provider() const {
  return provider_.Get();
}
inline void Interface::_internal_set_provider(const std::string& value) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Interface::set_provider(std::string&& value) {
  
  provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.Interface.provider)
}
inline void Interface::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.Interface.provider)
}
inline void Interface::set_provider(const char* value,
    size_t size) {
  
  provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.Interface.provider)
}
inline std::string* Interface::_internal_mutable_provider() {
  
  return provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Interface::release_provider() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.Interface.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Interface::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.Interface.provider)
}
inline std::string* Interface::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.Interface.provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Interface::unsafe_arena_set_allocated_provider(
    std::string* provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.Interface.provider)
}

// -------------------------------------------------------------------

// CustomColumnData

// string device_id = 1[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomColumnData::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomColumnData::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CustomColumnData.device_id)
  return _internal_device_id();
}
inline void CustomColumnData::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CustomColumnData.device_id)
}
inline std::string* CustomColumnData::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CustomColumnData.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& CustomColumnData::_internal_device_id() const {
  return device_id_.Get();
}
inline void CustomColumnData::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomColumnData::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.CustomColumnData.device_id)
}
inline void CustomColumnData::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CustomColumnData.device_id)
}
inline void CustomColumnData::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CustomColumnData.device_id)
}
inline std::string* CustomColumnData::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomColumnData::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CustomColumnData.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomColumnData::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CustomColumnData.device_id)
}
inline std::string* CustomColumnData::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.CustomColumnData.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomColumnData::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CustomColumnData.device_id)
}

// string field_id = 2[json_name = "fieldId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomColumnData::clear_field_id() {
  field_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomColumnData::field_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CustomColumnData.field_id)
  return _internal_field_id();
}
inline void CustomColumnData::set_field_id(const std::string& value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CustomColumnData.field_id)
}
inline std::string* CustomColumnData::mutable_field_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CustomColumnData.field_id)
  return _internal_mutable_field_id();
}
inline const std::string& CustomColumnData::_internal_field_id() const {
  return field_id_.Get();
}
inline void CustomColumnData::_internal_set_field_id(const std::string& value) {
  
  field_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomColumnData::set_field_id(std::string&& value) {
  
  field_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.CustomColumnData.field_id)
}
inline void CustomColumnData::set_field_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CustomColumnData.field_id)
}
inline void CustomColumnData::set_field_id(const char* value,
    size_t size) {
  
  field_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CustomColumnData.field_id)
}
inline std::string* CustomColumnData::_internal_mutable_field_id() {
  
  return field_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomColumnData::release_field_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CustomColumnData.field_id)
  return field_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomColumnData::set_allocated_field_id(std::string* field_id) {
  if (field_id != nullptr) {
    
  } else {
    
  }
  field_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CustomColumnData.field_id)
}
inline std::string* CustomColumnData::unsafe_arena_release_field_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.CustomColumnData.field_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return field_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomColumnData::unsafe_arena_set_allocated_field_id(
    std::string* field_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (field_id != nullptr) {
    
  } else {
    
  }
  field_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      field_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CustomColumnData.field_id)
}

// string col_name = 3[json_name = "colName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomColumnData::clear_col_name() {
  col_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomColumnData::col_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CustomColumnData.col_name)
  return _internal_col_name();
}
inline void CustomColumnData::set_col_name(const std::string& value) {
  _internal_set_col_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CustomColumnData.col_name)
}
inline std::string* CustomColumnData::mutable_col_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CustomColumnData.col_name)
  return _internal_mutable_col_name();
}
inline const std::string& CustomColumnData::_internal_col_name() const {
  return col_name_.Get();
}
inline void CustomColumnData::_internal_set_col_name(const std::string& value) {
  
  col_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomColumnData::set_col_name(std::string&& value) {
  
  col_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.CustomColumnData.col_name)
}
inline void CustomColumnData::set_col_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CustomColumnData.col_name)
}
inline void CustomColumnData::set_col_name(const char* value,
    size_t size) {
  
  col_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CustomColumnData.col_name)
}
inline std::string* CustomColumnData::_internal_mutable_col_name() {
  
  return col_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomColumnData::release_col_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CustomColumnData.col_name)
  return col_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomColumnData::set_allocated_col_name(std::string* col_name) {
  if (col_name != nullptr) {
    
  } else {
    
  }
  col_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), col_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CustomColumnData.col_name)
}
inline std::string* CustomColumnData::unsafe_arena_release_col_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.CustomColumnData.col_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return col_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomColumnData::unsafe_arena_set_allocated_col_name(
    std::string* col_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (col_name != nullptr) {
    
  } else {
    
  }
  col_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      col_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CustomColumnData.col_name)
}

// string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomColumnData::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomColumnData::description() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CustomColumnData.description)
  return _internal_description();
}
inline void CustomColumnData::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CustomColumnData.description)
}
inline std::string* CustomColumnData::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CustomColumnData.description)
  return _internal_mutable_description();
}
inline const std::string& CustomColumnData::_internal_description() const {
  return description_.Get();
}
inline void CustomColumnData::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomColumnData::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.CustomColumnData.description)
}
inline void CustomColumnData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CustomColumnData.description)
}
inline void CustomColumnData::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CustomColumnData.description)
}
inline std::string* CustomColumnData::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomColumnData::release_description() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CustomColumnData.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomColumnData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CustomColumnData.description)
}
inline std::string* CustomColumnData::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.CustomColumnData.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomColumnData::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CustomColumnData.description)
}

// string col_type = 5[json_name = "colType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomColumnData::clear_col_type() {
  col_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomColumnData::col_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CustomColumnData.col_type)
  return _internal_col_type();
}
inline void CustomColumnData::set_col_type(const std::string& value) {
  _internal_set_col_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CustomColumnData.col_type)
}
inline std::string* CustomColumnData::mutable_col_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CustomColumnData.col_type)
  return _internal_mutable_col_type();
}
inline const std::string& CustomColumnData::_internal_col_type() const {
  return col_type_.Get();
}
inline void CustomColumnData::_internal_set_col_type(const std::string& value) {
  
  col_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomColumnData::set_col_type(std::string&& value) {
  
  col_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.CustomColumnData.col_type)
}
inline void CustomColumnData::set_col_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CustomColumnData.col_type)
}
inline void CustomColumnData::set_col_type(const char* value,
    size_t size) {
  
  col_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CustomColumnData.col_type)
}
inline std::string* CustomColumnData::_internal_mutable_col_type() {
  
  return col_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomColumnData::release_col_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CustomColumnData.col_type)
  return col_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomColumnData::set_allocated_col_type(std::string* col_type) {
  if (col_type != nullptr) {
    
  } else {
    
  }
  col_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), col_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CustomColumnData.col_type)
}
inline std::string* CustomColumnData::unsafe_arena_release_col_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.CustomColumnData.col_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return col_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomColumnData::unsafe_arena_set_allocated_col_type(
    std::string* col_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (col_type != nullptr) {
    
  } else {
    
  }
  col_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      col_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CustomColumnData.col_type)
}

// string device_type = 6[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomColumnData::clear_device_type() {
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomColumnData::device_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CustomColumnData.device_type)
  return _internal_device_type();
}
inline void CustomColumnData::set_device_type(const std::string& value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CustomColumnData.device_type)
}
inline std::string* CustomColumnData::mutable_device_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CustomColumnData.device_type)
  return _internal_mutable_device_type();
}
inline const std::string& CustomColumnData::_internal_device_type() const {
  return device_type_.Get();
}
inline void CustomColumnData::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomColumnData::set_device_type(std::string&& value) {
  
  device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.CustomColumnData.device_type)
}
inline void CustomColumnData::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CustomColumnData.device_type)
}
inline void CustomColumnData::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CustomColumnData.device_type)
}
inline std::string* CustomColumnData::_internal_mutable_device_type() {
  
  return device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomColumnData::release_device_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CustomColumnData.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomColumnData::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CustomColumnData.device_type)
}
inline std::string* CustomColumnData::unsafe_arena_release_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.CustomColumnData.device_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomColumnData::unsafe_arena_set_allocated_device_type(
    std::string* device_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CustomColumnData.device_type)
}

// -------------------------------------------------------------------

// GnmiV1Conf

// string dialout_server = 1[json_name = "dialoutServer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GnmiV1Conf::clear_dialout_server() {
  dialout_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GnmiV1Conf::dialout_server() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
  return _internal_dialout_server();
}
inline void GnmiV1Conf::set_dialout_server(const std::string& value) {
  _internal_set_dialout_server(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
}
inline std::string* GnmiV1Conf::mutable_dialout_server() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
  return _internal_mutable_dialout_server();
}
inline const std::string& GnmiV1Conf::_internal_dialout_server() const {
  return dialout_server_.Get();
}
inline void GnmiV1Conf::_internal_set_dialout_server(const std::string& value) {
  
  dialout_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GnmiV1Conf::set_dialout_server(std::string&& value) {
  
  dialout_server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
}
inline void GnmiV1Conf::set_dialout_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dialout_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
}
inline void GnmiV1Conf::set_dialout_server(const char* value,
    size_t size) {
  
  dialout_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
}
inline std::string* GnmiV1Conf::_internal_mutable_dialout_server() {
  
  return dialout_server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GnmiV1Conf::release_dialout_server() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
  return dialout_server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GnmiV1Conf::set_allocated_dialout_server(std::string* dialout_server) {
  if (dialout_server != nullptr) {
    
  } else {
    
  }
  dialout_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dialout_server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
}
inline std::string* GnmiV1Conf::unsafe_arena_release_dialout_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dialout_server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GnmiV1Conf::unsafe_arena_set_allocated_dialout_server(
    std::string* dialout_server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dialout_server != nullptr) {
    
  } else {
    
  }
  dialout_server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dialout_server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.GnmiV1Conf.dialout_server)
}

// -------------------------------------------------------------------

// DeviceDetailed

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.id)
  return _internal_id();
}
inline void DeviceDetailed::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.id)
}
inline std::string* DeviceDetailed::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.id)
  return _internal_mutable_id();
}
inline const std::string& DeviceDetailed::_internal_id() const {
  return id_.Get();
}
inline void DeviceDetailed::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.id)
}
inline void DeviceDetailed::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.id)
}
inline void DeviceDetailed::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.id)
}
inline std::string* DeviceDetailed::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.id)
}
inline std::string* DeviceDetailed::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.id)
}

// string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_company_id() {
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.company_id)
  return _internal_company_id();
}
inline void DeviceDetailed::set_company_id(const std::string& value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.company_id)
}
inline std::string* DeviceDetailed::mutable_company_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.company_id)
  return _internal_mutable_company_id();
}
inline const std::string& DeviceDetailed::_internal_company_id() const {
  return company_id_.Get();
}
inline void DeviceDetailed::_internal_set_company_id(const std::string& value) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_company_id(std::string&& value) {
  
  company_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.company_id)
}
inline void DeviceDetailed::set_company_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.company_id)
}
inline void DeviceDetailed::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.company_id)
}
inline std::string* DeviceDetailed::_internal_mutable_company_id() {
  
  return company_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_company_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.company_id)
  return company_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_company_id(std::string* company_id) {
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.company_id)
}
inline std::string* DeviceDetailed::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.company_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return company_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_company_id(
    std::string* company_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (company_id != nullptr) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.company_id)
}

// string device_name = 3[json_name = "deviceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_name() {
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_name)
  return _internal_device_name();
}
inline void DeviceDetailed::set_device_name(const std::string& value) {
  _internal_set_device_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_name)
}
inline std::string* DeviceDetailed::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_name)
  return _internal_mutable_device_name();
}
inline const std::string& DeviceDetailed::_internal_device_name() const {
  return device_name_.Get();
}
inline void DeviceDetailed::_internal_set_device_name(const std::string& value) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_name(std::string&& value) {
  
  device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_name)
}
inline void DeviceDetailed::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_name)
}
inline void DeviceDetailed::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_name)
}
inline std::string* DeviceDetailed::_internal_mutable_device_name() {
  
  return device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_name)
  return device_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_name)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_name(
    std::string* device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_name)
}

// string device_alias = 4[json_name = "deviceAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_alias() {
  device_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_alias() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_alias)
  return _internal_device_alias();
}
inline void DeviceDetailed::set_device_alias(const std::string& value) {
  _internal_set_device_alias(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_alias)
}
inline std::string* DeviceDetailed::mutable_device_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_alias)
  return _internal_mutable_device_alias();
}
inline const std::string& DeviceDetailed::_internal_device_alias() const {
  return device_alias_.Get();
}
inline void DeviceDetailed::_internal_set_device_alias(const std::string& value) {
  
  device_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_alias(std::string&& value) {
  
  device_alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_alias)
}
inline void DeviceDetailed::set_device_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_alias)
}
inline void DeviceDetailed::set_device_alias(const char* value,
    size_t size) {
  
  device_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_alias)
}
inline std::string* DeviceDetailed::_internal_mutable_device_alias() {
  
  return device_alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_alias() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_alias)
  return device_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_alias(std::string* device_alias) {
  if (device_alias != nullptr) {
    
  } else {
    
  }
  device_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_alias)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_alias(
    std::string* device_alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_alias != nullptr) {
    
  } else {
    
  }
  device_alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_alias)
}

// string device_type = 5[json_name = "deviceType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_type() {
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_type)
  return _internal_device_type();
}
inline void DeviceDetailed::set_device_type(const std::string& value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_type)
}
inline std::string* DeviceDetailed::mutable_device_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_type)
  return _internal_mutable_device_type();
}
inline const std::string& DeviceDetailed::_internal_device_type() const {
  return device_type_.Get();
}
inline void DeviceDetailed::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_type(std::string&& value) {
  
  device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_type)
}
inline void DeviceDetailed::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_type)
}
inline void DeviceDetailed::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_type)
}
inline std::string* DeviceDetailed::_internal_mutable_device_type() {
  
  return device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_type)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_type(
    std::string* device_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_type)
}

// string device_description = 6[json_name = "deviceDescription", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_description() {
  device_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_description() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_description)
  return _internal_device_description();
}
inline void DeviceDetailed::set_device_description(const std::string& value) {
  _internal_set_device_description(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_description)
}
inline std::string* DeviceDetailed::mutable_device_description() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_description)
  return _internal_mutable_device_description();
}
inline const std::string& DeviceDetailed::_internal_device_description() const {
  return device_description_.Get();
}
inline void DeviceDetailed::_internal_set_device_description(const std::string& value) {
  
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_description(std::string&& value) {
  
  device_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_description)
}
inline void DeviceDetailed::set_device_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_description)
}
inline void DeviceDetailed::set_device_description(const char* value,
    size_t size) {
  
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_description)
}
inline std::string* DeviceDetailed::_internal_mutable_device_description() {
  
  return device_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_description() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_description)
  return device_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_description(std::string* device_description) {
  if (device_description != nullptr) {
    
  } else {
    
  }
  device_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_description)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_description(
    std::string* device_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_description != nullptr) {
    
  } else {
    
  }
  device_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_description)
}

// .kentik.device.v202308beta1.Site site = 7[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool DeviceDetailed::has_site() const {
  return _internal_has_site();
}
inline void DeviceDetailed::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::device::v202308beta1::Site& DeviceDetailed::_internal_site() const {
  const ::kentik::device::v202308beta1::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::Site*>(
      &::kentik::device::v202308beta1::_Site_default_instance_);
}
inline const ::kentik::device::v202308beta1::Site& DeviceDetailed::site() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.site)
  return _internal_site();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_site(
    ::kentik::device::v202308beta1::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.site)
}
inline ::kentik::device::v202308beta1::Site* DeviceDetailed::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::Site* DeviceDetailed::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.site)
  
  ::kentik::device::v202308beta1::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::Site* DeviceDetailed::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::device::v202308beta1::Site* DeviceDetailed::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.site)
  return _internal_mutable_site();
}
inline void DeviceDetailed::set_allocated_site(::kentik::device::v202308beta1::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.site)
}

// .kentik.device.v202308beta1.Plan plan = 8[json_name = "plan", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool DeviceDetailed::has_plan() const {
  return _internal_has_plan();
}
inline void DeviceDetailed::clear_plan() {
  if (GetArena() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
inline const ::kentik::device::v202308beta1::Plan& DeviceDetailed::_internal_plan() const {
  const ::kentik::device::v202308beta1::Plan* p = plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::Plan*>(
      &::kentik::device::v202308beta1::_Plan_default_instance_);
}
inline const ::kentik::device::v202308beta1::Plan& DeviceDetailed::plan() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.plan)
  return _internal_plan();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_plan(
    ::kentik::device::v202308beta1::Plan* plan) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  plan_ = plan;
  if (plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.plan)
}
inline ::kentik::device::v202308beta1::Plan* DeviceDetailed::release_plan() {
  auto temp = unsafe_arena_release_plan();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::Plan* DeviceDetailed::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.plan)
  
  ::kentik::device::v202308beta1::Plan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::Plan* DeviceDetailed::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::Plan>(GetArena());
    plan_ = p;
  }
  return plan_;
}
inline ::kentik::device::v202308beta1::Plan* DeviceDetailed::mutable_plan() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.plan)
  return _internal_mutable_plan();
}
inline void DeviceDetailed::set_allocated_plan(::kentik::device::v202308beta1::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plan_;
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plan);
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.plan)
}

// repeated .kentik.device.v202308beta1.Label labels = 9[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeviceDetailed::_internal_labels_size() const {
  return labels_.size();
}
inline int DeviceDetailed::labels_size() const {
  return _internal_labels_size();
}
inline void DeviceDetailed::clear_labels() {
  labels_.Clear();
}
inline ::kentik::device::v202308beta1::Label* DeviceDetailed::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Label >*
DeviceDetailed::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeviceDetailed.labels)
  return &labels_;
}
inline const ::kentik::device::v202308beta1::Label& DeviceDetailed::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::kentik::device::v202308beta1::Label& DeviceDetailed::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.labels)
  return _internal_labels(index);
}
inline ::kentik::device::v202308beta1::Label* DeviceDetailed::_internal_add_labels() {
  return labels_.Add();
}
inline ::kentik::device::v202308beta1::Label* DeviceDetailed::add_labels() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceDetailed.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Label >&
DeviceDetailed::labels() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeviceDetailed.labels)
  return labels_;
}

// repeated .kentik.device.v202308beta1.Interface all_interfaces = 10[json_name = "allInterfaces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeviceDetailed::_internal_all_interfaces_size() const {
  return all_interfaces_.size();
}
inline int DeviceDetailed::all_interfaces_size() const {
  return _internal_all_interfaces_size();
}
inline void DeviceDetailed::clear_all_interfaces() {
  all_interfaces_.Clear();
}
inline ::kentik::device::v202308beta1::Interface* DeviceDetailed::mutable_all_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.all_interfaces)
  return all_interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Interface >*
DeviceDetailed::mutable_all_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeviceDetailed.all_interfaces)
  return &all_interfaces_;
}
inline const ::kentik::device::v202308beta1::Interface& DeviceDetailed::_internal_all_interfaces(int index) const {
  return all_interfaces_.Get(index);
}
inline const ::kentik::device::v202308beta1::Interface& DeviceDetailed::all_interfaces(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.all_interfaces)
  return _internal_all_interfaces(index);
}
inline ::kentik::device::v202308beta1::Interface* DeviceDetailed::_internal_add_all_interfaces() {
  return all_interfaces_.Add();
}
inline ::kentik::device::v202308beta1::Interface* DeviceDetailed::add_all_interfaces() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceDetailed.all_interfaces)
  return _internal_add_all_interfaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::Interface >&
DeviceDetailed::all_interfaces() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeviceDetailed.all_interfaces)
  return all_interfaces_;
}

// string device_flow_type = 11[json_name = "deviceFlowType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_flow_type() {
  device_flow_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_flow_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
  return _internal_device_flow_type();
}
inline void DeviceDetailed::set_device_flow_type(const std::string& value) {
  _internal_set_device_flow_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
}
inline std::string* DeviceDetailed::mutable_device_flow_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
  return _internal_mutable_device_flow_type();
}
inline const std::string& DeviceDetailed::_internal_device_flow_type() const {
  return device_flow_type_.Get();
}
inline void DeviceDetailed::_internal_set_device_flow_type(const std::string& value) {
  
  device_flow_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_flow_type(std::string&& value) {
  
  device_flow_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
}
inline void DeviceDetailed::set_device_flow_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_flow_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
}
inline void DeviceDetailed::set_device_flow_type(const char* value,
    size_t size) {
  
  device_flow_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
}
inline std::string* DeviceDetailed::_internal_mutable_device_flow_type() {
  
  return device_flow_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_flow_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
  return device_flow_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_flow_type(std::string* device_flow_type) {
  if (device_flow_type != nullptr) {
    
  } else {
    
  }
  device_flow_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_flow_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_flow_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_flow_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_flow_type(
    std::string* device_flow_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_flow_type != nullptr) {
    
  } else {
    
  }
  device_flow_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_flow_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_flow_type)
}

// string device_sample_rate = 12[json_name = "deviceSampleRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_sample_rate() {
  device_sample_rate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_sample_rate() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
  return _internal_device_sample_rate();
}
inline void DeviceDetailed::set_device_sample_rate(const std::string& value) {
  _internal_set_device_sample_rate(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
}
inline std::string* DeviceDetailed::mutable_device_sample_rate() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
  return _internal_mutable_device_sample_rate();
}
inline const std::string& DeviceDetailed::_internal_device_sample_rate() const {
  return device_sample_rate_.Get();
}
inline void DeviceDetailed::_internal_set_device_sample_rate(const std::string& value) {
  
  device_sample_rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_sample_rate(std::string&& value) {
  
  device_sample_rate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
}
inline void DeviceDetailed::set_device_sample_rate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_sample_rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
}
inline void DeviceDetailed::set_device_sample_rate(const char* value,
    size_t size) {
  
  device_sample_rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
}
inline std::string* DeviceDetailed::_internal_mutable_device_sample_rate() {
  
  return device_sample_rate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_sample_rate() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
  return device_sample_rate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_sample_rate(std::string* device_sample_rate) {
  if (device_sample_rate != nullptr) {
    
  } else {
    
  }
  device_sample_rate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_sample_rate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_sample_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_sample_rate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_sample_rate(
    std::string* device_sample_rate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_sample_rate != nullptr) {
    
  } else {
    
  }
  device_sample_rate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_sample_rate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_sample_rate)
}

// repeated string sending_ips = 13[json_name = "sendingIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeviceDetailed::_internal_sending_ips_size() const {
  return sending_ips_.size();
}
inline int DeviceDetailed::sending_ips_size() const {
  return _internal_sending_ips_size();
}
inline void DeviceDetailed::clear_sending_ips() {
  sending_ips_.Clear();
}
inline std::string* DeviceDetailed::add_sending_ips() {
  // @@protoc_insertion_point(field_add_mutable:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  return _internal_add_sending_ips();
}
inline const std::string& DeviceDetailed::_internal_sending_ips(int index) const {
  return sending_ips_.Get(index);
}
inline const std::string& DeviceDetailed::sending_ips(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  return _internal_sending_ips(index);
}
inline std::string* DeviceDetailed::mutable_sending_ips(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  return sending_ips_.Mutable(index);
}
inline void DeviceDetailed::set_sending_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  sending_ips_.Mutable(index)->assign(value);
}
inline void DeviceDetailed::set_sending_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  sending_ips_.Mutable(index)->assign(std::move(value));
}
inline void DeviceDetailed::set_sending_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sending_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
}
inline void DeviceDetailed::set_sending_ips(int index, const char* value, size_t size) {
  sending_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
}
inline std::string* DeviceDetailed::_internal_add_sending_ips() {
  return sending_ips_.Add();
}
inline void DeviceDetailed::add_sending_ips(const std::string& value) {
  sending_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
}
inline void DeviceDetailed::add_sending_ips(std::string&& value) {
  sending_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
}
inline void DeviceDetailed::add_sending_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sending_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
}
inline void DeviceDetailed::add_sending_ips(const char* value, size_t size) {
  sending_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceDetailed::sending_ips() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  return sending_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceDetailed::mutable_sending_ips() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeviceDetailed.sending_ips)
  return &sending_ips_;
}

// string device_snmp_ip = 14[json_name = "deviceSnmpIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_snmp_ip() {
  device_snmp_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_snmp_ip() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
  return _internal_device_snmp_ip();
}
inline void DeviceDetailed::set_device_snmp_ip(const std::string& value) {
  _internal_set_device_snmp_ip(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
}
inline std::string* DeviceDetailed::mutable_device_snmp_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
  return _internal_mutable_device_snmp_ip();
}
inline const std::string& DeviceDetailed::_internal_device_snmp_ip() const {
  return device_snmp_ip_.Get();
}
inline void DeviceDetailed::_internal_set_device_snmp_ip(const std::string& value) {
  
  device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_snmp_ip(std::string&& value) {
  
  device_snmp_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
}
inline void DeviceDetailed::set_device_snmp_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
}
inline void DeviceDetailed::set_device_snmp_ip(const char* value,
    size_t size) {
  
  device_snmp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
}
inline std::string* DeviceDetailed::_internal_mutable_device_snmp_ip() {
  
  return device_snmp_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_snmp_ip() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
  return device_snmp_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_snmp_ip(std::string* device_snmp_ip) {
  if (device_snmp_ip != nullptr) {
    
  } else {
    
  }
  device_snmp_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_snmp_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_snmp_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_snmp_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_snmp_ip(
    std::string* device_snmp_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_snmp_ip != nullptr) {
    
  } else {
    
  }
  device_snmp_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_snmp_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_snmp_ip)
}

// string device_snmp_community = 15[json_name = "deviceSnmpCommunity", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_snmp_community() {
  device_snmp_community_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_snmp_community() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
  return _internal_device_snmp_community();
}
inline void DeviceDetailed::set_device_snmp_community(const std::string& value) {
  _internal_set_device_snmp_community(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
}
inline std::string* DeviceDetailed::mutable_device_snmp_community() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
  return _internal_mutable_device_snmp_community();
}
inline const std::string& DeviceDetailed::_internal_device_snmp_community() const {
  return device_snmp_community_.Get();
}
inline void DeviceDetailed::_internal_set_device_snmp_community(const std::string& value) {
  
  device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_snmp_community(std::string&& value) {
  
  device_snmp_community_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
}
inline void DeviceDetailed::set_device_snmp_community(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
}
inline void DeviceDetailed::set_device_snmp_community(const char* value,
    size_t size) {
  
  device_snmp_community_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
}
inline std::string* DeviceDetailed::_internal_mutable_device_snmp_community() {
  
  return device_snmp_community_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_snmp_community() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
  return device_snmp_community_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_snmp_community(std::string* device_snmp_community) {
  if (device_snmp_community != nullptr) {
    
  } else {
    
  }
  device_snmp_community_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_snmp_community,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_snmp_community() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_snmp_community_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_snmp_community(
    std::string* device_snmp_community) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_snmp_community != nullptr) {
    
  } else {
    
  }
  device_snmp_community_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_snmp_community, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_snmp_community)
}

// bool minimize_snmp = 16[json_name = "minimizeSnmp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_minimize_snmp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceDetailed::has_minimize_snmp() const {
  return _internal_has_minimize_snmp();
}
inline void DeviceDetailed::clear_minimize_snmp() {
  minimize_snmp_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceDetailed::_internal_minimize_snmp() const {
  return minimize_snmp_;
}
inline bool DeviceDetailed::minimize_snmp() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.minimize_snmp)
  return _internal_minimize_snmp();
}
inline void DeviceDetailed::_internal_set_minimize_snmp(bool value) {
  _has_bits_[0] |= 0x00000001u;
  minimize_snmp_ = value;
}
inline void DeviceDetailed::set_minimize_snmp(bool value) {
  _internal_set_minimize_snmp(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.minimize_snmp)
}

// string device_bgp_type = 17[json_name = "deviceBgpType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_type() {
  device_bgp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_bgp_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
  return _internal_device_bgp_type();
}
inline void DeviceDetailed::set_device_bgp_type(const std::string& value) {
  _internal_set_device_bgp_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
}
inline std::string* DeviceDetailed::mutable_device_bgp_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
  return _internal_mutable_device_bgp_type();
}
inline const std::string& DeviceDetailed::_internal_device_bgp_type() const {
  return device_bgp_type_.Get();
}
inline void DeviceDetailed::_internal_set_device_bgp_type(const std::string& value) {
  
  device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_bgp_type(std::string&& value) {
  
  device_bgp_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
}
inline void DeviceDetailed::set_device_bgp_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
}
inline void DeviceDetailed::set_device_bgp_type(const char* value,
    size_t size) {
  
  device_bgp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
}
inline std::string* DeviceDetailed::_internal_mutable_device_bgp_type() {
  
  return device_bgp_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_bgp_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
  return device_bgp_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_bgp_type(std::string* device_bgp_type) {
  if (device_bgp_type != nullptr) {
    
  } else {
    
  }
  device_bgp_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_bgp_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_bgp_type(
    std::string* device_bgp_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_type != nullptr) {
    
  } else {
    
  }
  device_bgp_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_type)
}

// string device_bgp_neighbor_ip = 18[json_name = "deviceBgpNeighborIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_neighbor_ip() {
  device_bgp_neighbor_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_bgp_neighbor_ip() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
  return _internal_device_bgp_neighbor_ip();
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip(const std::string& value) {
  _internal_set_device_bgp_neighbor_ip(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
}
inline std::string* DeviceDetailed::mutable_device_bgp_neighbor_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
  return _internal_mutable_device_bgp_neighbor_ip();
}
inline const std::string& DeviceDetailed::_internal_device_bgp_neighbor_ip() const {
  return device_bgp_neighbor_ip_.Get();
}
inline void DeviceDetailed::_internal_set_device_bgp_neighbor_ip(const std::string& value) {
  
  device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip(std::string&& value) {
  
  device_bgp_neighbor_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip(const char* value,
    size_t size) {
  
  device_bgp_neighbor_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
}
inline std::string* DeviceDetailed::_internal_mutable_device_bgp_neighbor_ip() {
  
  return device_bgp_neighbor_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_bgp_neighbor_ip() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
  return device_bgp_neighbor_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_bgp_neighbor_ip(std::string* device_bgp_neighbor_ip) {
  if (device_bgp_neighbor_ip != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_neighbor_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_bgp_neighbor_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_neighbor_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_bgp_neighbor_ip(
    std::string* device_bgp_neighbor_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_neighbor_ip != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_neighbor_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip)
}

// string device_bgp_neighbor_ip6 = 19[json_name = "deviceBgpNeighborIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_neighbor_ip6() {
  device_bgp_neighbor_ip6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_bgp_neighbor_ip6() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
  return _internal_device_bgp_neighbor_ip6();
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip6(const std::string& value) {
  _internal_set_device_bgp_neighbor_ip6(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
}
inline std::string* DeviceDetailed::mutable_device_bgp_neighbor_ip6() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
  return _internal_mutable_device_bgp_neighbor_ip6();
}
inline const std::string& DeviceDetailed::_internal_device_bgp_neighbor_ip6() const {
  return device_bgp_neighbor_ip6_.Get();
}
inline void DeviceDetailed::_internal_set_device_bgp_neighbor_ip6(const std::string& value) {
  
  device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip6(std::string&& value) {
  
  device_bgp_neighbor_ip6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
}
inline void DeviceDetailed::set_device_bgp_neighbor_ip6(const char* value,
    size_t size) {
  
  device_bgp_neighbor_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
}
inline std::string* DeviceDetailed::_internal_mutable_device_bgp_neighbor_ip6() {
  
  return device_bgp_neighbor_ip6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_bgp_neighbor_ip6() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
  return device_bgp_neighbor_ip6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_bgp_neighbor_ip6(std::string* device_bgp_neighbor_ip6) {
  if (device_bgp_neighbor_ip6 != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_neighbor_ip6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_bgp_neighbor_ip6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_neighbor_ip6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_bgp_neighbor_ip6(
    std::string* device_bgp_neighbor_ip6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_neighbor_ip6 != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_ip6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_neighbor_ip6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_ip6)
}

// string device_bgp_neighbor_asn = 20[json_name = "deviceBgpNeighborAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_neighbor_asn() {
  device_bgp_neighbor_asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_bgp_neighbor_asn() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
  return _internal_device_bgp_neighbor_asn();
}
inline void DeviceDetailed::set_device_bgp_neighbor_asn(const std::string& value) {
  _internal_set_device_bgp_neighbor_asn(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
}
inline std::string* DeviceDetailed::mutable_device_bgp_neighbor_asn() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
  return _internal_mutable_device_bgp_neighbor_asn();
}
inline const std::string& DeviceDetailed::_internal_device_bgp_neighbor_asn() const {
  return device_bgp_neighbor_asn_.Get();
}
inline void DeviceDetailed::_internal_set_device_bgp_neighbor_asn(const std::string& value) {
  
  device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_bgp_neighbor_asn(std::string&& value) {
  
  device_bgp_neighbor_asn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
}
inline void DeviceDetailed::set_device_bgp_neighbor_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
}
inline void DeviceDetailed::set_device_bgp_neighbor_asn(const char* value,
    size_t size) {
  
  device_bgp_neighbor_asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
}
inline std::string* DeviceDetailed::_internal_mutable_device_bgp_neighbor_asn() {
  
  return device_bgp_neighbor_asn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_bgp_neighbor_asn() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
  return device_bgp_neighbor_asn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_bgp_neighbor_asn(std::string* device_bgp_neighbor_asn) {
  if (device_bgp_neighbor_asn != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_asn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_neighbor_asn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_bgp_neighbor_asn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_neighbor_asn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_bgp_neighbor_asn(
    std::string* device_bgp_neighbor_asn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_neighbor_asn != nullptr) {
    
  } else {
    
  }
  device_bgp_neighbor_asn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_neighbor_asn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_neighbor_asn)
}

// bool device_bgp_flowspec = 21[json_name = "deviceBgpFlowspec", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_flowspec() {
  device_bgp_flowspec_ = false;
}
inline bool DeviceDetailed::_internal_device_bgp_flowspec() const {
  return device_bgp_flowspec_;
}
inline bool DeviceDetailed::device_bgp_flowspec() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_flowspec)
  return _internal_device_bgp_flowspec();
}
inline void DeviceDetailed::_internal_set_device_bgp_flowspec(bool value) {
  
  device_bgp_flowspec_ = value;
}
inline void DeviceDetailed::set_device_bgp_flowspec(bool value) {
  _internal_set_device_bgp_flowspec(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_flowspec)
}

// string device_bgp_password = 22[json_name = "deviceBgpPassword", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_password() {
  device_bgp_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_bgp_password() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
  return _internal_device_bgp_password();
}
inline void DeviceDetailed::set_device_bgp_password(const std::string& value) {
  _internal_set_device_bgp_password(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
}
inline std::string* DeviceDetailed::mutable_device_bgp_password() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
  return _internal_mutable_device_bgp_password();
}
inline const std::string& DeviceDetailed::_internal_device_bgp_password() const {
  return device_bgp_password_.Get();
}
inline void DeviceDetailed::_internal_set_device_bgp_password(const std::string& value) {
  
  device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_bgp_password(std::string&& value) {
  
  device_bgp_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
}
inline void DeviceDetailed::set_device_bgp_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
}
inline void DeviceDetailed::set_device_bgp_password(const char* value,
    size_t size) {
  
  device_bgp_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
}
inline std::string* DeviceDetailed::_internal_mutable_device_bgp_password() {
  
  return device_bgp_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_bgp_password() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
  return device_bgp_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_bgp_password(std::string* device_bgp_password) {
  if (device_bgp_password != nullptr) {
    
  } else {
    
  }
  device_bgp_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_bgp_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_bgp_password(
    std::string* device_bgp_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_password != nullptr) {
    
  } else {
    
  }
  device_bgp_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_password)
}

// bool device_bgp_label_unicast = 23[json_name = "deviceBgpLabelUnicast", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_label_unicast() {
  device_bgp_label_unicast_ = false;
}
inline bool DeviceDetailed::_internal_device_bgp_label_unicast() const {
  return device_bgp_label_unicast_;
}
inline bool DeviceDetailed::device_bgp_label_unicast() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_label_unicast)
  return _internal_device_bgp_label_unicast();
}
inline void DeviceDetailed::_internal_set_device_bgp_label_unicast(bool value) {
  
  device_bgp_label_unicast_ = value;
}
inline void DeviceDetailed::set_device_bgp_label_unicast(bool value) {
  _internal_set_device_bgp_label_unicast(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_label_unicast)
}

// string bgp_lookup_strategy = 24[json_name = "bgpLookupStrategy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_bgp_lookup_strategy() {
  bgp_lookup_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::bgp_lookup_strategy() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
  return _internal_bgp_lookup_strategy();
}
inline void DeviceDetailed::set_bgp_lookup_strategy(const std::string& value) {
  _internal_set_bgp_lookup_strategy(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
}
inline std::string* DeviceDetailed::mutable_bgp_lookup_strategy() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
  return _internal_mutable_bgp_lookup_strategy();
}
inline const std::string& DeviceDetailed::_internal_bgp_lookup_strategy() const {
  return bgp_lookup_strategy_.Get();
}
inline void DeviceDetailed::_internal_set_bgp_lookup_strategy(const std::string& value) {
  
  bgp_lookup_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_bgp_lookup_strategy(std::string&& value) {
  
  bgp_lookup_strategy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
}
inline void DeviceDetailed::set_bgp_lookup_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bgp_lookup_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
}
inline void DeviceDetailed::set_bgp_lookup_strategy(const char* value,
    size_t size) {
  
  bgp_lookup_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
}
inline std::string* DeviceDetailed::_internal_mutable_bgp_lookup_strategy() {
  
  return bgp_lookup_strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_bgp_lookup_strategy() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
  return bgp_lookup_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_bgp_lookup_strategy(std::string* bgp_lookup_strategy) {
  if (bgp_lookup_strategy != nullptr) {
    
  } else {
    
  }
  bgp_lookup_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_lookup_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
}
inline std::string* DeviceDetailed::unsafe_arena_release_bgp_lookup_strategy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bgp_lookup_strategy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_bgp_lookup_strategy(
    std::string* bgp_lookup_strategy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bgp_lookup_strategy != nullptr) {
    
  } else {
    
  }
  bgp_lookup_strategy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bgp_lookup_strategy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_lookup_strategy)
}

// string device_status = 25[json_name = "deviceStatus", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_status() {
  device_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_status() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_status)
  return _internal_device_status();
}
inline void DeviceDetailed::set_device_status(const std::string& value) {
  _internal_set_device_status(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_status)
}
inline std::string* DeviceDetailed::mutable_device_status() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_status)
  return _internal_mutable_device_status();
}
inline const std::string& DeviceDetailed::_internal_device_status() const {
  return device_status_.Get();
}
inline void DeviceDetailed::_internal_set_device_status(const std::string& value) {
  
  device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_status(std::string&& value) {
  
  device_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_status)
}
inline void DeviceDetailed::set_device_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_status)
}
inline void DeviceDetailed::set_device_status(const char* value,
    size_t size) {
  
  device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_status)
}
inline std::string* DeviceDetailed::_internal_mutable_device_status() {
  
  return device_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_status() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_status)
  return device_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_status(std::string* device_status) {
  if (device_status != nullptr) {
    
  } else {
    
  }
  device_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_status)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_status(
    std::string* device_status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_status != nullptr) {
    
  } else {
    
  }
  device_status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_status)
}

// string use_bgp_device_id = 26[json_name = "useBgpDeviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_use_bgp_device_id() {
  use_bgp_device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::use_bgp_device_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
  return _internal_use_bgp_device_id();
}
inline void DeviceDetailed::set_use_bgp_device_id(const std::string& value) {
  _internal_set_use_bgp_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
}
inline std::string* DeviceDetailed::mutable_use_bgp_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
  return _internal_mutable_use_bgp_device_id();
}
inline const std::string& DeviceDetailed::_internal_use_bgp_device_id() const {
  return use_bgp_device_id_.Get();
}
inline void DeviceDetailed::_internal_set_use_bgp_device_id(const std::string& value) {
  
  use_bgp_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_use_bgp_device_id(std::string&& value) {
  
  use_bgp_device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
}
inline void DeviceDetailed::set_use_bgp_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_bgp_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
}
inline void DeviceDetailed::set_use_bgp_device_id(const char* value,
    size_t size) {
  
  use_bgp_device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
}
inline std::string* DeviceDetailed::_internal_mutable_use_bgp_device_id() {
  
  return use_bgp_device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_use_bgp_device_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
  return use_bgp_device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_use_bgp_device_id(std::string* use_bgp_device_id) {
  if (use_bgp_device_id != nullptr) {
    
  } else {
    
  }
  use_bgp_device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use_bgp_device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
}
inline std::string* DeviceDetailed::unsafe_arena_release_use_bgp_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return use_bgp_device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_use_bgp_device_id(
    std::string* use_bgp_device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (use_bgp_device_id != nullptr) {
    
  } else {
    
  }
  use_bgp_device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      use_bgp_device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.use_bgp_device_id)
}

// string custom_columns = 27[json_name = "customColumns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_custom_columns() {
  custom_columns_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::custom_columns() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
  return _internal_custom_columns();
}
inline void DeviceDetailed::set_custom_columns(const std::string& value) {
  _internal_set_custom_columns(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
}
inline std::string* DeviceDetailed::mutable_custom_columns() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
  return _internal_mutable_custom_columns();
}
inline const std::string& DeviceDetailed::_internal_custom_columns() const {
  return custom_columns_.Get();
}
inline void DeviceDetailed::_internal_set_custom_columns(const std::string& value) {
  
  custom_columns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_custom_columns(std::string&& value) {
  
  custom_columns_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
}
inline void DeviceDetailed::set_custom_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_columns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
}
inline void DeviceDetailed::set_custom_columns(const char* value,
    size_t size) {
  
  custom_columns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
}
inline std::string* DeviceDetailed::_internal_mutable_custom_columns() {
  
  return custom_columns_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_custom_columns() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
  return custom_columns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_custom_columns(std::string* custom_columns) {
  if (custom_columns != nullptr) {
    
  } else {
    
  }
  custom_columns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_columns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
}
inline std::string* DeviceDetailed::unsafe_arena_release_custom_columns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return custom_columns_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_custom_columns(
    std::string* custom_columns) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (custom_columns != nullptr) {
    
  } else {
    
  }
  custom_columns_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      custom_columns, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.custom_columns)
}

// repeated .kentik.device.v202308beta1.CustomColumnData custom_column_data = 28[json_name = "customColumnData", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeviceDetailed::_internal_custom_column_data_size() const {
  return custom_column_data_.size();
}
inline int DeviceDetailed::custom_column_data_size() const {
  return _internal_custom_column_data_size();
}
inline void DeviceDetailed::clear_custom_column_data() {
  custom_column_data_.Clear();
}
inline ::kentik::device::v202308beta1::CustomColumnData* DeviceDetailed::mutable_custom_column_data(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.custom_column_data)
  return custom_column_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::CustomColumnData >*
DeviceDetailed::mutable_custom_column_data() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeviceDetailed.custom_column_data)
  return &custom_column_data_;
}
inline const ::kentik::device::v202308beta1::CustomColumnData& DeviceDetailed::_internal_custom_column_data(int index) const {
  return custom_column_data_.Get(index);
}
inline const ::kentik::device::v202308beta1::CustomColumnData& DeviceDetailed::custom_column_data(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.custom_column_data)
  return _internal_custom_column_data(index);
}
inline ::kentik::device::v202308beta1::CustomColumnData* DeviceDetailed::_internal_add_custom_column_data() {
  return custom_column_data_.Add();
}
inline ::kentik::device::v202308beta1::CustomColumnData* DeviceDetailed::add_custom_column_data() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeviceDetailed.custom_column_data)
  return _internal_add_custom_column_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::CustomColumnData >&
DeviceDetailed::custom_column_data() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeviceDetailed.custom_column_data)
  return custom_column_data_;
}

// string device_chf_client_port = 29[json_name = "deviceChfClientPort", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_chf_client_port() {
  device_chf_client_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_chf_client_port() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
  return _internal_device_chf_client_port();
}
inline void DeviceDetailed::set_device_chf_client_port(const std::string& value) {
  _internal_set_device_chf_client_port(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
}
inline std::string* DeviceDetailed::mutable_device_chf_client_port() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
  return _internal_mutable_device_chf_client_port();
}
inline const std::string& DeviceDetailed::_internal_device_chf_client_port() const {
  return device_chf_client_port_.Get();
}
inline void DeviceDetailed::_internal_set_device_chf_client_port(const std::string& value) {
  
  device_chf_client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_chf_client_port(std::string&& value) {
  
  device_chf_client_port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
}
inline void DeviceDetailed::set_device_chf_client_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_chf_client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
}
inline void DeviceDetailed::set_device_chf_client_port(const char* value,
    size_t size) {
  
  device_chf_client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
}
inline std::string* DeviceDetailed::_internal_mutable_device_chf_client_port() {
  
  return device_chf_client_port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_chf_client_port() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
  return device_chf_client_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_chf_client_port(std::string* device_chf_client_port) {
  if (device_chf_client_port != nullptr) {
    
  } else {
    
  }
  device_chf_client_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_chf_client_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_chf_client_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_chf_client_port_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_chf_client_port(
    std::string* device_chf_client_port) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_chf_client_port != nullptr) {
    
  } else {
    
  }
  device_chf_client_port_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_chf_client_port, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_port)
}

// string device_chf_client_protocol = 30[json_name = "deviceChfClientProtocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_chf_client_protocol() {
  device_chf_client_protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_chf_client_protocol() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
  return _internal_device_chf_client_protocol();
}
inline void DeviceDetailed::set_device_chf_client_protocol(const std::string& value) {
  _internal_set_device_chf_client_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
}
inline std::string* DeviceDetailed::mutable_device_chf_client_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
  return _internal_mutable_device_chf_client_protocol();
}
inline const std::string& DeviceDetailed::_internal_device_chf_client_protocol() const {
  return device_chf_client_protocol_.Get();
}
inline void DeviceDetailed::_internal_set_device_chf_client_protocol(const std::string& value) {
  
  device_chf_client_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_chf_client_protocol(std::string&& value) {
  
  device_chf_client_protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
}
inline void DeviceDetailed::set_device_chf_client_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_chf_client_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
}
inline void DeviceDetailed::set_device_chf_client_protocol(const char* value,
    size_t size) {
  
  device_chf_client_protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
}
inline std::string* DeviceDetailed::_internal_mutable_device_chf_client_protocol() {
  
  return device_chf_client_protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_chf_client_protocol() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
  return device_chf_client_protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_chf_client_protocol(std::string* device_chf_client_protocol) {
  if (device_chf_client_protocol != nullptr) {
    
  } else {
    
  }
  device_chf_client_protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_chf_client_protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_chf_client_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_chf_client_protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_chf_client_protocol(
    std::string* device_chf_client_protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_chf_client_protocol != nullptr) {
    
  } else {
    
  }
  device_chf_client_protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_chf_client_protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_chf_client_protocol)
}

// string device_chf_interface = 31[json_name = "deviceChfInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_chf_interface() {
  device_chf_interface_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_chf_interface() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
  return _internal_device_chf_interface();
}
inline void DeviceDetailed::set_device_chf_interface(const std::string& value) {
  _internal_set_device_chf_interface(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
}
inline std::string* DeviceDetailed::mutable_device_chf_interface() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
  return _internal_mutable_device_chf_interface();
}
inline const std::string& DeviceDetailed::_internal_device_chf_interface() const {
  return device_chf_interface_.Get();
}
inline void DeviceDetailed::_internal_set_device_chf_interface(const std::string& value) {
  
  device_chf_interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_chf_interface(std::string&& value) {
  
  device_chf_interface_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
}
inline void DeviceDetailed::set_device_chf_interface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_chf_interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
}
inline void DeviceDetailed::set_device_chf_interface(const char* value,
    size_t size) {
  
  device_chf_interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
}
inline std::string* DeviceDetailed::_internal_mutable_device_chf_interface() {
  
  return device_chf_interface_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_chf_interface() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
  return device_chf_interface_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_chf_interface(std::string* device_chf_interface) {
  if (device_chf_interface != nullptr) {
    
  } else {
    
  }
  device_chf_interface_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_chf_interface,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_chf_interface() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_chf_interface_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_chf_interface(
    std::string* device_chf_interface) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_chf_interface != nullptr) {
    
  } else {
    
  }
  device_chf_interface_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_chf_interface, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_chf_interface)
}

// string device_agent_type = 32[json_name = "deviceAgentType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_agent_type() {
  device_agent_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_agent_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
  return _internal_device_agent_type();
}
inline void DeviceDetailed::set_device_agent_type(const std::string& value) {
  _internal_set_device_agent_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
}
inline std::string* DeviceDetailed::mutable_device_agent_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
  return _internal_mutable_device_agent_type();
}
inline const std::string& DeviceDetailed::_internal_device_agent_type() const {
  return device_agent_type_.Get();
}
inline void DeviceDetailed::_internal_set_device_agent_type(const std::string& value) {
  
  device_agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_agent_type(std::string&& value) {
  
  device_agent_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
}
inline void DeviceDetailed::set_device_agent_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
}
inline void DeviceDetailed::set_device_agent_type(const char* value,
    size_t size) {
  
  device_agent_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
}
inline std::string* DeviceDetailed::_internal_mutable_device_agent_type() {
  
  return device_agent_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_agent_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
  return device_agent_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_agent_type(std::string* device_agent_type) {
  if (device_agent_type != nullptr) {
    
  } else {
    
  }
  device_agent_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_agent_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_agent_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_agent_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_agent_type(
    std::string* device_agent_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_agent_type != nullptr) {
    
  } else {
    
  }
  device_agent_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_agent_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_agent_type)
}

// uint32 max_flow_rate = 33[json_name = "maxFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_max_flow_rate() {
  max_flow_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::_internal_max_flow_rate() const {
  return max_flow_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::max_flow_rate() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.max_flow_rate)
  return _internal_max_flow_rate();
}
inline void DeviceDetailed::_internal_set_max_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_flow_rate_ = value;
}
inline void DeviceDetailed::set_max_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_flow_rate(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.max_flow_rate)
}

// uint32 max_big_flow_rate = 34[json_name = "maxBigFlowRate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_max_big_flow_rate() {
  max_big_flow_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::_internal_max_big_flow_rate() const {
  return max_big_flow_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::max_big_flow_rate() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.max_big_flow_rate)
  return _internal_max_big_flow_rate();
}
inline void DeviceDetailed::_internal_set_max_big_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_big_flow_rate_ = value;
}
inline void DeviceDetailed::set_max_big_flow_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_big_flow_rate(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.max_big_flow_rate)
}

// string device_proxy_bgp = 35[json_name = "deviceProxyBgp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_proxy_bgp() {
  device_proxy_bgp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_proxy_bgp() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
  return _internal_device_proxy_bgp();
}
inline void DeviceDetailed::set_device_proxy_bgp(const std::string& value) {
  _internal_set_device_proxy_bgp(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
}
inline std::string* DeviceDetailed::mutable_device_proxy_bgp() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
  return _internal_mutable_device_proxy_bgp();
}
inline const std::string& DeviceDetailed::_internal_device_proxy_bgp() const {
  return device_proxy_bgp_.Get();
}
inline void DeviceDetailed::_internal_set_device_proxy_bgp(const std::string& value) {
  
  device_proxy_bgp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_proxy_bgp(std::string&& value) {
  
  device_proxy_bgp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
}
inline void DeviceDetailed::set_device_proxy_bgp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_proxy_bgp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
}
inline void DeviceDetailed::set_device_proxy_bgp(const char* value,
    size_t size) {
  
  device_proxy_bgp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
}
inline std::string* DeviceDetailed::_internal_mutable_device_proxy_bgp() {
  
  return device_proxy_bgp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_proxy_bgp() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
  return device_proxy_bgp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_proxy_bgp(std::string* device_proxy_bgp) {
  if (device_proxy_bgp != nullptr) {
    
  } else {
    
  }
  device_proxy_bgp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_proxy_bgp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_proxy_bgp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_proxy_bgp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_proxy_bgp(
    std::string* device_proxy_bgp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_proxy_bgp != nullptr) {
    
  } else {
    
  }
  device_proxy_bgp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_proxy_bgp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp)
}

// string device_proxy_bgp6 = 36[json_name = "deviceProxyBgp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_proxy_bgp6() {
  device_proxy_bgp6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_proxy_bgp6() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
  return _internal_device_proxy_bgp6();
}
inline void DeviceDetailed::set_device_proxy_bgp6(const std::string& value) {
  _internal_set_device_proxy_bgp6(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
}
inline std::string* DeviceDetailed::mutable_device_proxy_bgp6() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
  return _internal_mutable_device_proxy_bgp6();
}
inline const std::string& DeviceDetailed::_internal_device_proxy_bgp6() const {
  return device_proxy_bgp6_.Get();
}
inline void DeviceDetailed::_internal_set_device_proxy_bgp6(const std::string& value) {
  
  device_proxy_bgp6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_proxy_bgp6(std::string&& value) {
  
  device_proxy_bgp6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
}
inline void DeviceDetailed::set_device_proxy_bgp6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_proxy_bgp6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
}
inline void DeviceDetailed::set_device_proxy_bgp6(const char* value,
    size_t size) {
  
  device_proxy_bgp6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
}
inline std::string* DeviceDetailed::_internal_mutable_device_proxy_bgp6() {
  
  return device_proxy_bgp6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_proxy_bgp6() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
  return device_proxy_bgp6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_proxy_bgp6(std::string* device_proxy_bgp6) {
  if (device_proxy_bgp6 != nullptr) {
    
  } else {
    
  }
  device_proxy_bgp6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_proxy_bgp6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_proxy_bgp6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_proxy_bgp6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_proxy_bgp6(
    std::string* device_proxy_bgp6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_proxy_bgp6 != nullptr) {
    
  } else {
    
  }
  device_proxy_bgp6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_proxy_bgp6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_proxy_bgp6)
}

// .google.protobuf.Timestamp created_date = 37[json_name = "createdDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_created_date() const {
  return this != internal_default_instance() && created_date_ != nullptr;
}
inline bool DeviceDetailed::has_created_date() const {
  return _internal_has_created_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceDetailed::_internal_created_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceDetailed::created_date() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.created_date)
  return _internal_created_date();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_created_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  created_date_ = created_date;
  if (created_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.created_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::release_created_date() {
  auto temp = unsafe_arena_release_created_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::unsafe_arena_release_created_date() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.created_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_date_;
  created_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::_internal_mutable_created_date() {
  
  if (created_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_date_ = p;
  }
  return created_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::mutable_created_date() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.created_date)
  return _internal_mutable_created_date();
}
inline void DeviceDetailed::set_allocated_created_date(PROTOBUF_NAMESPACE_ID::Timestamp* created_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date_);
  }
  if (created_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_date)->GetArena();
    if (message_arena != submessage_arena) {
      created_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_date, submessage_arena);
    }
    
  } else {
    
  }
  created_date_ = created_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.created_date)
}

// .google.protobuf.Timestamp updated_date = 38[json_name = "updatedDate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_updated_date() const {
  return this != internal_default_instance() && updated_date_ != nullptr;
}
inline bool DeviceDetailed::has_updated_date() const {
  return _internal_has_updated_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceDetailed::_internal_updated_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceDetailed::updated_date() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.updated_date)
  return _internal_updated_date();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_updated_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  updated_date_ = updated_date;
  if (updated_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.updated_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::release_updated_date() {
  auto temp = unsafe_arena_release_updated_date();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::unsafe_arena_release_updated_date() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.updated_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_date_;
  updated_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::_internal_mutable_updated_date() {
  
  if (updated_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_date_ = p;
  }
  return updated_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceDetailed::mutable_updated_date() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.updated_date)
  return _internal_mutable_updated_date();
}
inline void DeviceDetailed::set_allocated_updated_date(PROTOBUF_NAMESPACE_ID::Timestamp* updated_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date_);
  }
  if (updated_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_date)->GetArena();
    if (message_arena != submessage_arena) {
      updated_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_date, submessage_arena);
    }
    
  } else {
    
  }
  updated_date_ = updated_date;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.updated_date)
}

// bool device_snmp_v3_conf_enabled = 39[json_name = "deviceSnmpV3ConfEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_snmp_v3_conf_enabled() {
  device_snmp_v3_conf_enabled_ = false;
}
inline bool DeviceDetailed::_internal_device_snmp_v3_conf_enabled() const {
  return device_snmp_v3_conf_enabled_;
}
inline bool DeviceDetailed::device_snmp_v3_conf_enabled() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf_enabled)
  return _internal_device_snmp_v3_conf_enabled();
}
inline void DeviceDetailed::_internal_set_device_snmp_v3_conf_enabled(bool value) {
  
  device_snmp_v3_conf_enabled_ = value;
}
inline void DeviceDetailed::set_device_snmp_v3_conf_enabled(bool value) {
  _internal_set_device_snmp_v3_conf_enabled(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf_enabled)
}

// .kentik.device.v202308beta1.DeviceSnmpV3Conf device_snmp_v3_conf = 40[json_name = "deviceSnmpV3Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_device_snmp_v3_conf() const {
  return this != internal_default_instance() && device_snmp_v3_conf_ != nullptr;
}
inline bool DeviceDetailed::has_device_snmp_v3_conf() const {
  return _internal_has_device_snmp_v3_conf();
}
inline void DeviceDetailed::clear_device_snmp_v3_conf() {
  if (GetArena() == nullptr && device_snmp_v3_conf_ != nullptr) {
    delete device_snmp_v3_conf_;
  }
  device_snmp_v3_conf_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& DeviceDetailed::_internal_device_snmp_v3_conf() const {
  const ::kentik::device::v202308beta1::DeviceSnmpV3Conf* p = device_snmp_v3_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceSnmpV3Conf*>(
      &::kentik::device::v202308beta1::_DeviceSnmpV3Conf_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceSnmpV3Conf& DeviceDetailed::device_snmp_v3_conf() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf)
  return _internal_device_snmp_v3_conf();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_snmp_v3_conf(
    ::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_snmp_v3_conf_);
  }
  device_snmp_v3_conf_ = device_snmp_v3_conf;
  if (device_snmp_v3_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf)
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceDetailed::release_device_snmp_v3_conf() {
  auto temp = unsafe_arena_release_device_snmp_v3_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceDetailed::unsafe_arena_release_device_snmp_v3_conf() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf)
  
  ::kentik::device::v202308beta1::DeviceSnmpV3Conf* temp = device_snmp_v3_conf_;
  device_snmp_v3_conf_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceDetailed::_internal_mutable_device_snmp_v3_conf() {
  
  if (device_snmp_v3_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceSnmpV3Conf>(GetArena());
    device_snmp_v3_conf_ = p;
  }
  return device_snmp_v3_conf_;
}
inline ::kentik::device::v202308beta1::DeviceSnmpV3Conf* DeviceDetailed::mutable_device_snmp_v3_conf() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf)
  return _internal_mutable_device_snmp_v3_conf();
}
inline void DeviceDetailed::set_allocated_device_snmp_v3_conf(::kentik::device::v202308beta1::DeviceSnmpV3Conf* device_snmp_v3_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_snmp_v3_conf_;
  }
  if (device_snmp_v3_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_snmp_v3_conf);
    if (message_arena != submessage_arena) {
      device_snmp_v3_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_snmp_v3_conf, submessage_arena);
    }
    
  } else {
    
  }
  device_snmp_v3_conf_ = device_snmp_v3_conf;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf)
}

// string cdn_attr = 41[json_name = "cdnAttr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_cdn_attr() {
  cdn_attr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::cdn_attr() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
  return _internal_cdn_attr();
}
inline void DeviceDetailed::set_cdn_attr(const std::string& value) {
  _internal_set_cdn_attr(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
}
inline std::string* DeviceDetailed::mutable_cdn_attr() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
  return _internal_mutable_cdn_attr();
}
inline const std::string& DeviceDetailed::_internal_cdn_attr() const {
  return cdn_attr_.Get();
}
inline void DeviceDetailed::_internal_set_cdn_attr(const std::string& value) {
  
  cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_cdn_attr(std::string&& value) {
  
  cdn_attr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
}
inline void DeviceDetailed::set_cdn_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
}
inline void DeviceDetailed::set_cdn_attr(const char* value,
    size_t size) {
  
  cdn_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
}
inline std::string* DeviceDetailed::_internal_mutable_cdn_attr() {
  
  return cdn_attr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_cdn_attr() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
  return cdn_attr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_cdn_attr(std::string* cdn_attr) {
  if (cdn_attr != nullptr) {
    
  } else {
    
  }
  cdn_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
}
inline std::string* DeviceDetailed::unsafe_arena_release_cdn_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cdn_attr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_cdn_attr(
    std::string* cdn_attr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cdn_attr != nullptr) {
    
  } else {
    
  }
  cdn_attr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cdn_attr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.cdn_attr)
}

// string bgp_peer_ip4 = 42[json_name = "bgpPeerIp4", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_bgp_peer_ip4() {
  bgp_peer_ip4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::bgp_peer_ip4() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
  return _internal_bgp_peer_ip4();
}
inline void DeviceDetailed::set_bgp_peer_ip4(const std::string& value) {
  _internal_set_bgp_peer_ip4(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
}
inline std::string* DeviceDetailed::mutable_bgp_peer_ip4() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
  return _internal_mutable_bgp_peer_ip4();
}
inline const std::string& DeviceDetailed::_internal_bgp_peer_ip4() const {
  return bgp_peer_ip4_.Get();
}
inline void DeviceDetailed::_internal_set_bgp_peer_ip4(const std::string& value) {
  
  bgp_peer_ip4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_bgp_peer_ip4(std::string&& value) {
  
  bgp_peer_ip4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
}
inline void DeviceDetailed::set_bgp_peer_ip4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bgp_peer_ip4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
}
inline void DeviceDetailed::set_bgp_peer_ip4(const char* value,
    size_t size) {
  
  bgp_peer_ip4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
}
inline std::string* DeviceDetailed::_internal_mutable_bgp_peer_ip4() {
  
  return bgp_peer_ip4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_bgp_peer_ip4() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
  return bgp_peer_ip4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_bgp_peer_ip4(std::string* bgp_peer_ip4) {
  if (bgp_peer_ip4 != nullptr) {
    
  } else {
    
  }
  bgp_peer_ip4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_peer_ip4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
}
inline std::string* DeviceDetailed::unsafe_arena_release_bgp_peer_ip4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bgp_peer_ip4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_bgp_peer_ip4(
    std::string* bgp_peer_ip4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bgp_peer_ip4 != nullptr) {
    
  } else {
    
  }
  bgp_peer_ip4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bgp_peer_ip4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip4)
}

// string bgp_peer_ip6 = 43[json_name = "bgpPeerIp6", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_bgp_peer_ip6() {
  bgp_peer_ip6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::bgp_peer_ip6() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
  return _internal_bgp_peer_ip6();
}
inline void DeviceDetailed::set_bgp_peer_ip6(const std::string& value) {
  _internal_set_bgp_peer_ip6(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
}
inline std::string* DeviceDetailed::mutable_bgp_peer_ip6() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
  return _internal_mutable_bgp_peer_ip6();
}
inline const std::string& DeviceDetailed::_internal_bgp_peer_ip6() const {
  return bgp_peer_ip6_.Get();
}
inline void DeviceDetailed::_internal_set_bgp_peer_ip6(const std::string& value) {
  
  bgp_peer_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_bgp_peer_ip6(std::string&& value) {
  
  bgp_peer_ip6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
}
inline void DeviceDetailed::set_bgp_peer_ip6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bgp_peer_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
}
inline void DeviceDetailed::set_bgp_peer_ip6(const char* value,
    size_t size) {
  
  bgp_peer_ip6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
}
inline std::string* DeviceDetailed::_internal_mutable_bgp_peer_ip6() {
  
  return bgp_peer_ip6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_bgp_peer_ip6() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
  return bgp_peer_ip6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_bgp_peer_ip6(std::string* bgp_peer_ip6) {
  if (bgp_peer_ip6 != nullptr) {
    
  } else {
    
  }
  bgp_peer_ip6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_peer_ip6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
}
inline std::string* DeviceDetailed::unsafe_arena_release_bgp_peer_ip6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bgp_peer_ip6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_bgp_peer_ip6(
    std::string* bgp_peer_ip6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bgp_peer_ip6 != nullptr) {
    
  } else {
    
  }
  bgp_peer_ip6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bgp_peer_ip6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_peer_ip6)
}

// string device_subtype = 44[json_name = "deviceSubtype", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_subtype() {
  device_subtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_subtype() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
  return _internal_device_subtype();
}
inline void DeviceDetailed::set_device_subtype(const std::string& value) {
  _internal_set_device_subtype(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
}
inline std::string* DeviceDetailed::mutable_device_subtype() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
  return _internal_mutable_device_subtype();
}
inline const std::string& DeviceDetailed::_internal_device_subtype() const {
  return device_subtype_.Get();
}
inline void DeviceDetailed::_internal_set_device_subtype(const std::string& value) {
  
  device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_subtype(std::string&& value) {
  
  device_subtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
}
inline void DeviceDetailed::set_device_subtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
}
inline void DeviceDetailed::set_device_subtype(const char* value,
    size_t size) {
  
  device_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
}
inline std::string* DeviceDetailed::_internal_mutable_device_subtype() {
  
  return device_subtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_subtype() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
  return device_subtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_subtype(std::string* device_subtype) {
  if (device_subtype != nullptr) {
    
  } else {
    
  }
  device_subtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_subtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_subtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_subtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_subtype(
    std::string* device_subtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_subtype != nullptr) {
    
  } else {
    
  }
  device_subtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_subtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_subtype)
}

// string device_vendor_type = 45[json_name = "deviceVendorType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_vendor_type() {
  device_vendor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_vendor_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
  return _internal_device_vendor_type();
}
inline void DeviceDetailed::set_device_vendor_type(const std::string& value) {
  _internal_set_device_vendor_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
}
inline std::string* DeviceDetailed::mutable_device_vendor_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
  return _internal_mutable_device_vendor_type();
}
inline const std::string& DeviceDetailed::_internal_device_vendor_type() const {
  return device_vendor_type_.Get();
}
inline void DeviceDetailed::_internal_set_device_vendor_type(const std::string& value) {
  
  device_vendor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_vendor_type(std::string&& value) {
  
  device_vendor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
}
inline void DeviceDetailed::set_device_vendor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_vendor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
}
inline void DeviceDetailed::set_device_vendor_type(const char* value,
    size_t size) {
  
  device_vendor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
}
inline std::string* DeviceDetailed::_internal_mutable_device_vendor_type() {
  
  return device_vendor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_vendor_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
  return device_vendor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_vendor_type(std::string* device_vendor_type) {
  if (device_vendor_type != nullptr) {
    
  } else {
    
  }
  device_vendor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_vendor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_vendor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_vendor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_vendor_type(
    std::string* device_vendor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_vendor_type != nullptr) {
    
  } else {
    
  }
  device_vendor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_vendor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_vendor_type)
}

// string device_model_type = 46[json_name = "deviceModelType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_model_type() {
  device_model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_model_type() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
  return _internal_device_model_type();
}
inline void DeviceDetailed::set_device_model_type(const std::string& value) {
  _internal_set_device_model_type(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
}
inline std::string* DeviceDetailed::mutable_device_model_type() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
  return _internal_mutable_device_model_type();
}
inline const std::string& DeviceDetailed::_internal_device_model_type() const {
  return device_model_type_.Get();
}
inline void DeviceDetailed::_internal_set_device_model_type(const std::string& value) {
  
  device_model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_model_type(std::string&& value) {
  
  device_model_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
}
inline void DeviceDetailed::set_device_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
}
inline void DeviceDetailed::set_device_model_type(const char* value,
    size_t size) {
  
  device_model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
}
inline std::string* DeviceDetailed::_internal_mutable_device_model_type() {
  
  return device_model_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_model_type() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
  return device_model_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_model_type(std::string* device_model_type) {
  if (device_model_type != nullptr) {
    
  } else {
    
  }
  device_model_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_model_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_model_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_model_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_model_type(
    std::string* device_model_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_model_type != nullptr) {
    
  } else {
    
  }
  device_model_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_model_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_model_type)
}

// string cloud_export_id = 47[json_name = "cloudExportId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_cloud_export_id() {
  cloud_export_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::cloud_export_id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
  return _internal_cloud_export_id();
}
inline void DeviceDetailed::set_cloud_export_id(const std::string& value) {
  _internal_set_cloud_export_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
}
inline std::string* DeviceDetailed::mutable_cloud_export_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
  return _internal_mutable_cloud_export_id();
}
inline const std::string& DeviceDetailed::_internal_cloud_export_id() const {
  return cloud_export_id_.Get();
}
inline void DeviceDetailed::_internal_set_cloud_export_id(const std::string& value) {
  
  cloud_export_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_cloud_export_id(std::string&& value) {
  
  cloud_export_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
}
inline void DeviceDetailed::set_cloud_export_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloud_export_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
}
inline void DeviceDetailed::set_cloud_export_id(const char* value,
    size_t size) {
  
  cloud_export_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
}
inline std::string* DeviceDetailed::_internal_mutable_cloud_export_id() {
  
  return cloud_export_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_cloud_export_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
  return cloud_export_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_cloud_export_id(std::string* cloud_export_id) {
  if (cloud_export_id != nullptr) {
    
  } else {
    
  }
  cloud_export_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloud_export_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
}
inline std::string* DeviceDetailed::unsafe_arena_release_cloud_export_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cloud_export_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_cloud_export_id(
    std::string* cloud_export_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cloud_export_id != nullptr) {
    
  } else {
    
  }
  cloud_export_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cloud_export_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.cloud_export_id)
}

// string device_kproxy = 48[json_name = "deviceKproxy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_kproxy() {
  device_kproxy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_kproxy() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
  return _internal_device_kproxy();
}
inline void DeviceDetailed::set_device_kproxy(const std::string& value) {
  _internal_set_device_kproxy(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
}
inline std::string* DeviceDetailed::mutable_device_kproxy() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
  return _internal_mutable_device_kproxy();
}
inline const std::string& DeviceDetailed::_internal_device_kproxy() const {
  return device_kproxy_.Get();
}
inline void DeviceDetailed::_internal_set_device_kproxy(const std::string& value) {
  
  device_kproxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_kproxy(std::string&& value) {
  
  device_kproxy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
}
inline void DeviceDetailed::set_device_kproxy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_kproxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
}
inline void DeviceDetailed::set_device_kproxy(const char* value,
    size_t size) {
  
  device_kproxy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
}
inline std::string* DeviceDetailed::_internal_mutable_device_kproxy() {
  
  return device_kproxy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_kproxy() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
  return device_kproxy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_kproxy(std::string* device_kproxy) {
  if (device_kproxy != nullptr) {
    
  } else {
    
  }
  device_kproxy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_kproxy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_kproxy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_kproxy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_kproxy(
    std::string* device_kproxy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_kproxy != nullptr) {
    
  } else {
    
  }
  device_kproxy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_kproxy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_kproxy)
}

// string snmp_enabled = 49[json_name = "snmpEnabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_snmp_enabled() {
  snmp_enabled_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::snmp_enabled() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
  return _internal_snmp_enabled();
}
inline void DeviceDetailed::set_snmp_enabled(const std::string& value) {
  _internal_set_snmp_enabled(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
}
inline std::string* DeviceDetailed::mutable_snmp_enabled() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
  return _internal_mutable_snmp_enabled();
}
inline const std::string& DeviceDetailed::_internal_snmp_enabled() const {
  return snmp_enabled_.Get();
}
inline void DeviceDetailed::_internal_set_snmp_enabled(const std::string& value) {
  
  snmp_enabled_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_snmp_enabled(std::string&& value) {
  
  snmp_enabled_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
}
inline void DeviceDetailed::set_snmp_enabled(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_enabled_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
}
inline void DeviceDetailed::set_snmp_enabled(const char* value,
    size_t size) {
  
  snmp_enabled_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
}
inline std::string* DeviceDetailed::_internal_mutable_snmp_enabled() {
  
  return snmp_enabled_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_snmp_enabled() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
  return snmp_enabled_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_snmp_enabled(std::string* snmp_enabled) {
  if (snmp_enabled != nullptr) {
    
  } else {
    
  }
  snmp_enabled_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_enabled,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
}
inline std::string* DeviceDetailed::unsafe_arena_release_snmp_enabled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_enabled_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_snmp_enabled(
    std::string* snmp_enabled) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_enabled != nullptr) {
    
  } else {
    
  }
  snmp_enabled_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_enabled, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.snmp_enabled)
}

// string snmp_disabled_reason = 50[json_name = "snmpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_snmp_disabled_reason() {
  snmp_disabled_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::snmp_disabled_reason() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
  return _internal_snmp_disabled_reason();
}
inline void DeviceDetailed::set_snmp_disabled_reason(const std::string& value) {
  _internal_set_snmp_disabled_reason(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
}
inline std::string* DeviceDetailed::mutable_snmp_disabled_reason() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
  return _internal_mutable_snmp_disabled_reason();
}
inline const std::string& DeviceDetailed::_internal_snmp_disabled_reason() const {
  return snmp_disabled_reason_.Get();
}
inline void DeviceDetailed::_internal_set_snmp_disabled_reason(const std::string& value) {
  
  snmp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_snmp_disabled_reason(std::string&& value) {
  
  snmp_disabled_reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
}
inline void DeviceDetailed::set_snmp_disabled_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
}
inline void DeviceDetailed::set_snmp_disabled_reason(const char* value,
    size_t size) {
  
  snmp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
}
inline std::string* DeviceDetailed::_internal_mutable_snmp_disabled_reason() {
  
  return snmp_disabled_reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_snmp_disabled_reason() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
  return snmp_disabled_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_snmp_disabled_reason(std::string* snmp_disabled_reason) {
  if (snmp_disabled_reason != nullptr) {
    
  } else {
    
  }
  snmp_disabled_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_disabled_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
}
inline std::string* DeviceDetailed::unsafe_arena_release_snmp_disabled_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_disabled_reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_snmp_disabled_reason(
    std::string* snmp_disabled_reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_disabled_reason != nullptr) {
    
  } else {
    
  }
  snmp_disabled_reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_disabled_reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason)
}

// string snmp_disabled_reason_other = 51[json_name = "snmpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_snmp_disabled_reason_other() {
  snmp_disabled_reason_other_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::snmp_disabled_reason_other() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
  return _internal_snmp_disabled_reason_other();
}
inline void DeviceDetailed::set_snmp_disabled_reason_other(const std::string& value) {
  _internal_set_snmp_disabled_reason_other(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
}
inline std::string* DeviceDetailed::mutable_snmp_disabled_reason_other() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
  return _internal_mutable_snmp_disabled_reason_other();
}
inline const std::string& DeviceDetailed::_internal_snmp_disabled_reason_other() const {
  return snmp_disabled_reason_other_.Get();
}
inline void DeviceDetailed::_internal_set_snmp_disabled_reason_other(const std::string& value) {
  
  snmp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_snmp_disabled_reason_other(std::string&& value) {
  
  snmp_disabled_reason_other_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
}
inline void DeviceDetailed::set_snmp_disabled_reason_other(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
}
inline void DeviceDetailed::set_snmp_disabled_reason_other(const char* value,
    size_t size) {
  
  snmp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
}
inline std::string* DeviceDetailed::_internal_mutable_snmp_disabled_reason_other() {
  
  return snmp_disabled_reason_other_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_snmp_disabled_reason_other() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
  return snmp_disabled_reason_other_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_snmp_disabled_reason_other(std::string* snmp_disabled_reason_other) {
  if (snmp_disabled_reason_other != nullptr) {
    
  } else {
    
  }
  snmp_disabled_reason_other_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_disabled_reason_other,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
}
inline std::string* DeviceDetailed::unsafe_arena_release_snmp_disabled_reason_other() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_disabled_reason_other_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_snmp_disabled_reason_other(
    std::string* snmp_disabled_reason_other) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_disabled_reason_other != nullptr) {
    
  } else {
    
  }
  snmp_disabled_reason_other_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_disabled_reason_other, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.snmp_disabled_reason_other)
}

// string bgp_disabled_reason = 52[json_name = "bgpDisabledReason", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_bgp_disabled_reason() {
  bgp_disabled_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::bgp_disabled_reason() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
  return _internal_bgp_disabled_reason();
}
inline void DeviceDetailed::set_bgp_disabled_reason(const std::string& value) {
  _internal_set_bgp_disabled_reason(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
}
inline std::string* DeviceDetailed::mutable_bgp_disabled_reason() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
  return _internal_mutable_bgp_disabled_reason();
}
inline const std::string& DeviceDetailed::_internal_bgp_disabled_reason() const {
  return bgp_disabled_reason_.Get();
}
inline void DeviceDetailed::_internal_set_bgp_disabled_reason(const std::string& value) {
  
  bgp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_bgp_disabled_reason(std::string&& value) {
  
  bgp_disabled_reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
}
inline void DeviceDetailed::set_bgp_disabled_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bgp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
}
inline void DeviceDetailed::set_bgp_disabled_reason(const char* value,
    size_t size) {
  
  bgp_disabled_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
}
inline std::string* DeviceDetailed::_internal_mutable_bgp_disabled_reason() {
  
  return bgp_disabled_reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_bgp_disabled_reason() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
  return bgp_disabled_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_bgp_disabled_reason(std::string* bgp_disabled_reason) {
  if (bgp_disabled_reason != nullptr) {
    
  } else {
    
  }
  bgp_disabled_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_disabled_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
}
inline std::string* DeviceDetailed::unsafe_arena_release_bgp_disabled_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bgp_disabled_reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_bgp_disabled_reason(
    std::string* bgp_disabled_reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bgp_disabled_reason != nullptr) {
    
  } else {
    
  }
  bgp_disabled_reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bgp_disabled_reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason)
}

// string bgp_disabled_reason_other = 53[json_name = "bgpDisabledReasonOther", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_bgp_disabled_reason_other() {
  bgp_disabled_reason_other_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::bgp_disabled_reason_other() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
  return _internal_bgp_disabled_reason_other();
}
inline void DeviceDetailed::set_bgp_disabled_reason_other(const std::string& value) {
  _internal_set_bgp_disabled_reason_other(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
}
inline std::string* DeviceDetailed::mutable_bgp_disabled_reason_other() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
  return _internal_mutable_bgp_disabled_reason_other();
}
inline const std::string& DeviceDetailed::_internal_bgp_disabled_reason_other() const {
  return bgp_disabled_reason_other_.Get();
}
inline void DeviceDetailed::_internal_set_bgp_disabled_reason_other(const std::string& value) {
  
  bgp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_bgp_disabled_reason_other(std::string&& value) {
  
  bgp_disabled_reason_other_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
}
inline void DeviceDetailed::set_bgp_disabled_reason_other(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bgp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
}
inline void DeviceDetailed::set_bgp_disabled_reason_other(const char* value,
    size_t size) {
  
  bgp_disabled_reason_other_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
}
inline std::string* DeviceDetailed::_internal_mutable_bgp_disabled_reason_other() {
  
  return bgp_disabled_reason_other_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_bgp_disabled_reason_other() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
  return bgp_disabled_reason_other_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_bgp_disabled_reason_other(std::string* bgp_disabled_reason_other) {
  if (bgp_disabled_reason_other != nullptr) {
    
  } else {
    
  }
  bgp_disabled_reason_other_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_disabled_reason_other,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
}
inline std::string* DeviceDetailed::unsafe_arena_release_bgp_disabled_reason_other() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bgp_disabled_reason_other_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_bgp_disabled_reason_other(
    std::string* bgp_disabled_reason_other) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bgp_disabled_reason_other != nullptr) {
    
  } else {
    
  }
  bgp_disabled_reason_other_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bgp_disabled_reason_other, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.bgp_disabled_reason_other)
}

// string device_manufacturer = 54[json_name = "deviceManufacturer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_manufacturer() {
  device_manufacturer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_manufacturer() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
  return _internal_device_manufacturer();
}
inline void DeviceDetailed::set_device_manufacturer(const std::string& value) {
  _internal_set_device_manufacturer(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
}
inline std::string* DeviceDetailed::mutable_device_manufacturer() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
  return _internal_mutable_device_manufacturer();
}
inline const std::string& DeviceDetailed::_internal_device_manufacturer() const {
  return device_manufacturer_.Get();
}
inline void DeviceDetailed::_internal_set_device_manufacturer(const std::string& value) {
  
  device_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_manufacturer(std::string&& value) {
  
  device_manufacturer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
}
inline void DeviceDetailed::set_device_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
}
inline void DeviceDetailed::set_device_manufacturer(const char* value,
    size_t size) {
  
  device_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
}
inline std::string* DeviceDetailed::_internal_mutable_device_manufacturer() {
  
  return device_manufacturer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_manufacturer() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
  return device_manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_manufacturer(std::string* device_manufacturer) {
  if (device_manufacturer != nullptr) {
    
  } else {
    
  }
  device_manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_manufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_manufacturer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_manufacturer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_manufacturer(
    std::string* device_manufacturer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_manufacturer != nullptr) {
    
  } else {
    
  }
  device_manufacturer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_manufacturer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_manufacturer)
}

// string device_alert = 55[json_name = "deviceAlert", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_alert() {
  device_alert_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_alert() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_alert)
  return _internal_device_alert();
}
inline void DeviceDetailed::set_device_alert(const std::string& value) {
  _internal_set_device_alert(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_alert)
}
inline std::string* DeviceDetailed::mutable_device_alert() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_alert)
  return _internal_mutable_device_alert();
}
inline const std::string& DeviceDetailed::_internal_device_alert() const {
  return device_alert_.Get();
}
inline void DeviceDetailed::_internal_set_device_alert(const std::string& value) {
  
  device_alert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_alert(std::string&& value) {
  
  device_alert_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_alert)
}
inline void DeviceDetailed::set_device_alert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_alert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_alert)
}
inline void DeviceDetailed::set_device_alert(const char* value,
    size_t size) {
  
  device_alert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_alert)
}
inline std::string* DeviceDetailed::_internal_mutable_device_alert() {
  
  return device_alert_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_alert() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_alert)
  return device_alert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_alert(std::string* device_alert) {
  if (device_alert != nullptr) {
    
  } else {
    
  }
  device_alert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_alert,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_alert)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_alert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_alert)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_alert_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_alert(
    std::string* device_alert) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_alert != nullptr) {
    
  } else {
    
  }
  device_alert_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_alert, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_alert)
}

// string role = 56[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::role() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.role)
  return _internal_role();
}
inline void DeviceDetailed::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.role)
}
inline std::string* DeviceDetailed::mutable_role() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.role)
  return _internal_mutable_role();
}
inline const std::string& DeviceDetailed::_internal_role() const {
  return role_.Get();
}
inline void DeviceDetailed::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.role)
}
inline void DeviceDetailed::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.role)
}
inline void DeviceDetailed::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.role)
}
inline std::string* DeviceDetailed::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_role() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.role)
}
inline std::string* DeviceDetailed::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.role)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return role_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_role(
    std::string* role) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (role != nullptr) {
    
  } else {
    
  }
  role_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      role, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.role)
}

// .kentik.device.v202308beta1.GnmiV1Conf device_gnmi_v1_conf = 57[json_name = "deviceGnmiV1Conf", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_device_gnmi_v1_conf() const {
  return this != internal_default_instance() && device_gnmi_v1_conf_ != nullptr;
}
inline bool DeviceDetailed::has_device_gnmi_v1_conf() const {
  return _internal_has_device_gnmi_v1_conf();
}
inline void DeviceDetailed::clear_device_gnmi_v1_conf() {
  if (GetArena() == nullptr && device_gnmi_v1_conf_ != nullptr) {
    delete device_gnmi_v1_conf_;
  }
  device_gnmi_v1_conf_ = nullptr;
}
inline const ::kentik::device::v202308beta1::GnmiV1Conf& DeviceDetailed::_internal_device_gnmi_v1_conf() const {
  const ::kentik::device::v202308beta1::GnmiV1Conf* p = device_gnmi_v1_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::GnmiV1Conf*>(
      &::kentik::device::v202308beta1::_GnmiV1Conf_default_instance_);
}
inline const ::kentik::device::v202308beta1::GnmiV1Conf& DeviceDetailed::device_gnmi_v1_conf() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf)
  return _internal_device_gnmi_v1_conf();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_gnmi_v1_conf(
    ::kentik::device::v202308beta1::GnmiV1Conf* device_gnmi_v1_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_gnmi_v1_conf_);
  }
  device_gnmi_v1_conf_ = device_gnmi_v1_conf;
  if (device_gnmi_v1_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf)
}
inline ::kentik::device::v202308beta1::GnmiV1Conf* DeviceDetailed::release_device_gnmi_v1_conf() {
  auto temp = unsafe_arena_release_device_gnmi_v1_conf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::GnmiV1Conf* DeviceDetailed::unsafe_arena_release_device_gnmi_v1_conf() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf)
  
  ::kentik::device::v202308beta1::GnmiV1Conf* temp = device_gnmi_v1_conf_;
  device_gnmi_v1_conf_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::GnmiV1Conf* DeviceDetailed::_internal_mutable_device_gnmi_v1_conf() {
  
  if (device_gnmi_v1_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::GnmiV1Conf>(GetArena());
    device_gnmi_v1_conf_ = p;
  }
  return device_gnmi_v1_conf_;
}
inline ::kentik::device::v202308beta1::GnmiV1Conf* DeviceDetailed::mutable_device_gnmi_v1_conf() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf)
  return _internal_mutable_device_gnmi_v1_conf();
}
inline void DeviceDetailed::set_allocated_device_gnmi_v1_conf(::kentik::device::v202308beta1::GnmiV1Conf* device_gnmi_v1_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_gnmi_v1_conf_;
  }
  if (device_gnmi_v1_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_gnmi_v1_conf);
    if (message_arena != submessage_arena) {
      device_gnmi_v1_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_gnmi_v1_conf, submessage_arena);
    }
    
  } else {
    
  }
  device_gnmi_v1_conf_ = device_gnmi_v1_conf;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf)
}

// bool use_asn_from_flow = 58[json_name = "useAsnFromFlow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_use_asn_from_flow() {
  use_asn_from_flow_ = false;
}
inline bool DeviceDetailed::_internal_use_asn_from_flow() const {
  return use_asn_from_flow_;
}
inline bool DeviceDetailed::use_asn_from_flow() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.use_asn_from_flow)
  return _internal_use_asn_from_flow();
}
inline void DeviceDetailed::_internal_set_use_asn_from_flow(bool value) {
  
  use_asn_from_flow_ = value;
}
inline void DeviceDetailed::set_use_asn_from_flow(bool value) {
  _internal_set_use_asn_from_flow(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.use_asn_from_flow)
}

// uint32 max_interface = 59[json_name = "maxInterface", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_max_interface() {
  max_interface_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::_internal_max_interface() const {
  return max_interface_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::max_interface() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.max_interface)
  return _internal_max_interface();
}
inline void DeviceDetailed::_internal_set_max_interface(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_interface_ = value;
}
inline void DeviceDetailed::set_max_interface(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_interface(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.max_interface)
}

// uint32 max_interface_check = 60[json_name = "maxInterfaceCheck", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_max_interface_check() {
  max_interface_check_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::_internal_max_interface_check() const {
  return max_interface_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceDetailed::max_interface_check() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.max_interface_check)
  return _internal_max_interface_check();
}
inline void DeviceDetailed::_internal_set_max_interface_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_interface_check_ = value;
}
inline void DeviceDetailed::set_max_interface_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_interface_check(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.max_interface_check)
}

// .kentik.device.v202308beta1.DeviceNmsConfig nms = 61[json_name = "nms", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DeviceDetailed::_internal_has_nms() const {
  return this != internal_default_instance() && nms_ != nullptr;
}
inline bool DeviceDetailed::has_nms() const {
  return _internal_has_nms();
}
inline void DeviceDetailed::clear_nms() {
  if (GetArena() == nullptr && nms_ != nullptr) {
    delete nms_;
  }
  nms_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceNmsConfig& DeviceDetailed::_internal_nms() const {
  const ::kentik::device::v202308beta1::DeviceNmsConfig* p = nms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceNmsConfig*>(
      &::kentik::device::v202308beta1::_DeviceNmsConfig_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceNmsConfig& DeviceDetailed::nms() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.nms)
  return _internal_nms();
}
inline void DeviceDetailed::unsafe_arena_set_allocated_nms(
    ::kentik::device::v202308beta1::DeviceNmsConfig* nms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nms_);
  }
  nms_ = nms;
  if (nms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.nms)
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceDetailed::release_nms() {
  auto temp = unsafe_arena_release_nms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceDetailed::unsafe_arena_release_nms() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.nms)
  
  ::kentik::device::v202308beta1::DeviceNmsConfig* temp = nms_;
  nms_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceDetailed::_internal_mutable_nms() {
  
  if (nms_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceNmsConfig>(GetArena());
    nms_ = p;
  }
  return nms_;
}
inline ::kentik::device::v202308beta1::DeviceNmsConfig* DeviceDetailed::mutable_nms() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.nms)
  return _internal_mutable_nms();
}
inline void DeviceDetailed::set_allocated_nms(::kentik::device::v202308beta1::DeviceNmsConfig* nms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nms_;
  }
  if (nms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nms);
    if (message_arena != submessage_arena) {
      nms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms, submessage_arena);
    }
    
  } else {
    
  }
  nms_ = nms;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.nms)
}

// string device_bgp_credential_name = 62[json_name = "deviceBgpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_device_bgp_credential_name() {
  device_bgp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::device_bgp_credential_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
  return _internal_device_bgp_credential_name();
}
inline void DeviceDetailed::set_device_bgp_credential_name(const std::string& value) {
  _internal_set_device_bgp_credential_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
}
inline std::string* DeviceDetailed::mutable_device_bgp_credential_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
  return _internal_mutable_device_bgp_credential_name();
}
inline const std::string& DeviceDetailed::_internal_device_bgp_credential_name() const {
  return device_bgp_credential_name_.Get();
}
inline void DeviceDetailed::_internal_set_device_bgp_credential_name(const std::string& value) {
  
  device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_device_bgp_credential_name(std::string&& value) {
  
  device_bgp_credential_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
}
inline void DeviceDetailed::set_device_bgp_credential_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
}
inline void DeviceDetailed::set_device_bgp_credential_name(const char* value,
    size_t size) {
  
  device_bgp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
}
inline std::string* DeviceDetailed::_internal_mutable_device_bgp_credential_name() {
  
  return device_bgp_credential_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_device_bgp_credential_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
  return device_bgp_credential_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_device_bgp_credential_name(std::string* device_bgp_credential_name) {
  if (device_bgp_credential_name != nullptr) {
    
  } else {
    
  }
  device_bgp_credential_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_bgp_credential_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
}
inline std::string* DeviceDetailed::unsafe_arena_release_device_bgp_credential_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_bgp_credential_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_device_bgp_credential_name(
    std::string* device_bgp_credential_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_bgp_credential_name != nullptr) {
    
  } else {
    
  }
  device_bgp_credential_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_bgp_credential_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.device_bgp_credential_name)
}

// string flow_snmp_credential_name = 63[json_name = "flowSnmpCredentialName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeviceDetailed::clear_flow_snmp_credential_name() {
  flow_snmp_credential_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceDetailed::flow_snmp_credential_name() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
  return _internal_flow_snmp_credential_name();
}
inline void DeviceDetailed::set_flow_snmp_credential_name(const std::string& value) {
  _internal_set_flow_snmp_credential_name(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
}
inline std::string* DeviceDetailed::mutable_flow_snmp_credential_name() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
  return _internal_mutable_flow_snmp_credential_name();
}
inline const std::string& DeviceDetailed::_internal_flow_snmp_credential_name() const {
  return flow_snmp_credential_name_.Get();
}
inline void DeviceDetailed::_internal_set_flow_snmp_credential_name(const std::string& value) {
  
  flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDetailed::set_flow_snmp_credential_name(std::string&& value) {
  
  flow_snmp_credential_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
}
inline void DeviceDetailed::set_flow_snmp_credential_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
}
inline void DeviceDetailed::set_flow_snmp_credential_name(const char* value,
    size_t size) {
  
  flow_snmp_credential_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
}
inline std::string* DeviceDetailed::_internal_mutable_flow_snmp_credential_name() {
  
  return flow_snmp_credential_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDetailed::release_flow_snmp_credential_name() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
  return flow_snmp_credential_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDetailed::set_allocated_flow_snmp_credential_name(std::string* flow_snmp_credential_name) {
  if (flow_snmp_credential_name != nullptr) {
    
  } else {
    
  }
  flow_snmp_credential_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_snmp_credential_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
}
inline std::string* DeviceDetailed::unsafe_arena_release_flow_snmp_credential_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return flow_snmp_credential_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDetailed::unsafe_arena_set_allocated_flow_snmp_credential_name(
    std::string* flow_snmp_credential_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (flow_snmp_credential_name != nullptr) {
    
  } else {
    
  }
  flow_snmp_credential_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      flow_snmp_credential_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeviceDetailed.flow_snmp_credential_name)
}

// -------------------------------------------------------------------

// LabelConcise

// uint32 id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LabelConcise::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelConcise::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelConcise::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.LabelConcise.id)
  return _internal_id();
}
inline void LabelConcise::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void LabelConcise::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.LabelConcise.id)
}

// -------------------------------------------------------------------

// ListDevicesRequest

// -------------------------------------------------------------------

// ListDevicesResponse

// repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListDevicesResponse::_internal_devices_size() const {
  return devices_.size();
}
inline int ListDevicesResponse::devices_size() const {
  return _internal_devices_size();
}
inline void ListDevicesResponse::clear_devices() {
  devices_.Clear();
}
inline ::kentik::device::v202308beta1::DeviceDetailed* ListDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.ListDevicesResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >*
ListDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.ListDevicesResponse.devices)
  return &devices_;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& ListDevicesResponse::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& ListDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.ListDevicesResponse.devices)
  return _internal_devices(index);
}
inline ::kentik::device::v202308beta1::DeviceDetailed* ListDevicesResponse::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::device::v202308beta1::DeviceDetailed* ListDevicesResponse::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.ListDevicesResponse.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >&
ListDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.ListDevicesResponse.devices)
  return devices_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListDevicesResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.ListDevicesResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListDevicesResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListDevicesResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.ListDevicesResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetDeviceRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetDeviceRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.GetDeviceRequest.id)
  return _internal_id();
}
inline void GetDeviceRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.GetDeviceRequest.id)
}
inline std::string* GetDeviceRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.GetDeviceRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetDeviceRequest::_internal_id() const {
  return id_.Get();
}
inline void GetDeviceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.GetDeviceRequest.id)
}
inline void GetDeviceRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.GetDeviceRequest.id)
}
inline void GetDeviceRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.GetDeviceRequest.id)
}
inline std::string* GetDeviceRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.GetDeviceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.GetDeviceRequest.id)
}
inline std::string* GetDeviceRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.GetDeviceRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.GetDeviceRequest.id)
}

// -------------------------------------------------------------------

// GetDeviceResponse

// .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetDeviceResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool GetDeviceResponse::has_device() const {
  return _internal_has_device();
}
inline void GetDeviceResponse::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& GetDeviceResponse::_internal_device() const {
  const ::kentik::device::v202308beta1::DeviceDetailed* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceDetailed*>(
      &::kentik::device::v202308beta1::_DeviceDetailed_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& GetDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.GetDeviceResponse.device)
  return _internal_device();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_device(
    ::kentik::device::v202308beta1::DeviceDetailed* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.GetDeviceResponse.device)
}
inline ::kentik::device::v202308beta1::DeviceDetailed* GetDeviceResponse::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* GetDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.GetDeviceResponse.device)
  
  ::kentik::device::v202308beta1::DeviceDetailed* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* GetDeviceResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceDetailed>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* GetDeviceResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.GetDeviceResponse.device)
  return _internal_mutable_device();
}
inline void GetDeviceResponse::set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.GetDeviceResponse.device)
}

// -------------------------------------------------------------------

// CreateDeviceRequest

// .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateDeviceRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool CreateDeviceRequest::has_device() const {
  return _internal_has_device();
}
inline void CreateDeviceRequest::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceConcise& CreateDeviceRequest::_internal_device() const {
  const ::kentik::device::v202308beta1::DeviceConcise* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceConcise*>(
      &::kentik::device::v202308beta1::_DeviceConcise_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceConcise& CreateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CreateDeviceRequest.device)
  return _internal_device();
}
inline void CreateDeviceRequest::unsafe_arena_set_allocated_device(
    ::kentik::device::v202308beta1::DeviceConcise* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CreateDeviceRequest.device)
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDeviceRequest::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CreateDeviceRequest.device)
  
  ::kentik::device::v202308beta1::DeviceConcise* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDeviceRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceConcise>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDeviceRequest::mutable_device() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CreateDeviceRequest.device)
  return _internal_mutable_device();
}
inline void CreateDeviceRequest::set_allocated_device(::kentik::device::v202308beta1::DeviceConcise* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CreateDeviceRequest.device)
}

// -------------------------------------------------------------------

// CreateDeviceResponse

// .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateDeviceResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool CreateDeviceResponse::has_device() const {
  return _internal_has_device();
}
inline void CreateDeviceResponse::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& CreateDeviceResponse::_internal_device() const {
  const ::kentik::device::v202308beta1::DeviceDetailed* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceDetailed*>(
      &::kentik::device::v202308beta1::_DeviceDetailed_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& CreateDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CreateDeviceResponse.device)
  return _internal_device();
}
inline void CreateDeviceResponse::unsafe_arena_set_allocated_device(
    ::kentik::device::v202308beta1::DeviceDetailed* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.CreateDeviceResponse.device)
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDeviceResponse::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.CreateDeviceResponse.device)
  
  ::kentik::device::v202308beta1::DeviceDetailed* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDeviceResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceDetailed>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDeviceResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CreateDeviceResponse.device)
  return _internal_mutable_device();
}
inline void CreateDeviceResponse::set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.CreateDeviceResponse.device)
}

// -------------------------------------------------------------------

// CreateDevicesRequest

// repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int CreateDevicesRequest::_internal_devices_size() const {
  return devices_.size();
}
inline int CreateDevicesRequest::devices_size() const {
  return _internal_devices_size();
}
inline void CreateDevicesRequest::clear_devices() {
  devices_.Clear();
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDevicesRequest::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CreateDevicesRequest.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >*
CreateDevicesRequest::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.CreateDevicesRequest.devices)
  return &devices_;
}
inline const ::kentik::device::v202308beta1::DeviceConcise& CreateDevicesRequest::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::device::v202308beta1::DeviceConcise& CreateDevicesRequest::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CreateDevicesRequest.devices)
  return _internal_devices(index);
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDevicesRequest::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::device::v202308beta1::DeviceConcise* CreateDevicesRequest::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.CreateDevicesRequest.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >&
CreateDevicesRequest::devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.CreateDevicesRequest.devices)
  return devices_;
}

// -------------------------------------------------------------------

// CreateDevicesResponse

// repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int CreateDevicesResponse::_internal_devices_size() const {
  return devices_.size();
}
inline int CreateDevicesResponse::devices_size() const {
  return _internal_devices_size();
}
inline void CreateDevicesResponse::clear_devices() {
  devices_.Clear();
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CreateDevicesResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >*
CreateDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.CreateDevicesResponse.devices)
  return &devices_;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& CreateDevicesResponse::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& CreateDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CreateDevicesResponse.devices)
  return _internal_devices(index);
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDevicesResponse::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::device::v202308beta1::DeviceDetailed* CreateDevicesResponse::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.CreateDevicesResponse.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >&
CreateDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.CreateDevicesResponse.devices)
  return devices_;
}

// repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int CreateDevicesResponse::_internal_failed_devices_size() const {
  return failed_devices_.size();
}
inline int CreateDevicesResponse::failed_devices_size() const {
  return _internal_failed_devices_size();
}
inline void CreateDevicesResponse::clear_failed_devices() {
  failed_devices_.Clear();
}
inline std::string* CreateDevicesResponse::add_failed_devices() {
  // @@protoc_insertion_point(field_add_mutable:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  return _internal_add_failed_devices();
}
inline const std::string& CreateDevicesResponse::_internal_failed_devices(int index) const {
  return failed_devices_.Get(index);
}
inline const std::string& CreateDevicesResponse::failed_devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  return _internal_failed_devices(index);
}
inline std::string* CreateDevicesResponse::mutable_failed_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  return failed_devices_.Mutable(index);
}
inline void CreateDevicesResponse::set_failed_devices(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  failed_devices_.Mutable(index)->assign(value);
}
inline void CreateDevicesResponse::set_failed_devices(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  failed_devices_.Mutable(index)->assign(std::move(value));
}
inline void CreateDevicesResponse::set_failed_devices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
}
inline void CreateDevicesResponse::set_failed_devices(int index, const char* value, size_t size) {
  failed_devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
}
inline std::string* CreateDevicesResponse::_internal_add_failed_devices() {
  return failed_devices_.Add();
}
inline void CreateDevicesResponse::add_failed_devices(const std::string& value) {
  failed_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
}
inline void CreateDevicesResponse::add_failed_devices(std::string&& value) {
  failed_devices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
}
inline void CreateDevicesResponse::add_failed_devices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
}
inline void CreateDevicesResponse::add_failed_devices(const char* value, size_t size) {
  failed_devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDevicesResponse::failed_devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  return failed_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDevicesResponse::mutable_failed_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.CreateDevicesResponse.failed_devices)
  return &failed_devices_;
}

// -------------------------------------------------------------------

// UpdateDeviceRequest

// .kentik.device.v202308beta1.DeviceConcise device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateDeviceRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool UpdateDeviceRequest::has_device() const {
  return _internal_has_device();
}
inline void UpdateDeviceRequest::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceConcise& UpdateDeviceRequest::_internal_device() const {
  const ::kentik::device::v202308beta1::DeviceConcise* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceConcise*>(
      &::kentik::device::v202308beta1::_DeviceConcise_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceConcise& UpdateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDeviceRequest.device)
  return _internal_device();
}
inline void UpdateDeviceRequest::unsafe_arena_set_allocated_device(
    ::kentik::device::v202308beta1::DeviceConcise* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.UpdateDeviceRequest.device)
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDeviceRequest::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.UpdateDeviceRequest.device)
  
  ::kentik::device::v202308beta1::DeviceConcise* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDeviceRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceConcise>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDeviceRequest::mutable_device() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDeviceRequest.device)
  return _internal_mutable_device();
}
inline void UpdateDeviceRequest::set_allocated_device(::kentik::device::v202308beta1::DeviceConcise* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.UpdateDeviceRequest.device)
}

// -------------------------------------------------------------------

// UpdateDeviceResponse

// .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateDeviceResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool UpdateDeviceResponse::has_device() const {
  return _internal_has_device();
}
inline void UpdateDeviceResponse::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& UpdateDeviceResponse::_internal_device() const {
  const ::kentik::device::v202308beta1::DeviceDetailed* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceDetailed*>(
      &::kentik::device::v202308beta1::_DeviceDetailed_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& UpdateDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDeviceResponse.device)
  return _internal_device();
}
inline void UpdateDeviceResponse::unsafe_arena_set_allocated_device(
    ::kentik::device::v202308beta1::DeviceDetailed* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.UpdateDeviceResponse.device)
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceResponse::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.UpdateDeviceResponse.device)
  
  ::kentik::device::v202308beta1::DeviceDetailed* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceDetailed>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDeviceResponse.device)
  return _internal_mutable_device();
}
inline void UpdateDeviceResponse::set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.UpdateDeviceResponse.device)
}

// -------------------------------------------------------------------

// UpdateDevicesRequest

// repeated .kentik.device.v202308beta1.DeviceConcise devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int UpdateDevicesRequest::_internal_devices_size() const {
  return devices_.size();
}
inline int UpdateDevicesRequest::devices_size() const {
  return _internal_devices_size();
}
inline void UpdateDevicesRequest::clear_devices() {
  devices_.Clear();
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDevicesRequest::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDevicesRequest.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >*
UpdateDevicesRequest::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.UpdateDevicesRequest.devices)
  return &devices_;
}
inline const ::kentik::device::v202308beta1::DeviceConcise& UpdateDevicesRequest::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::device::v202308beta1::DeviceConcise& UpdateDevicesRequest::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDevicesRequest.devices)
  return _internal_devices(index);
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDevicesRequest::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::device::v202308beta1::DeviceConcise* UpdateDevicesRequest::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.UpdateDevicesRequest.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceConcise >&
UpdateDevicesRequest::devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.UpdateDevicesRequest.devices)
  return devices_;
}

// -------------------------------------------------------------------

// UpdateDevicesResponse

// repeated .kentik.device.v202308beta1.DeviceDetailed devices = 1[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int UpdateDevicesResponse::_internal_devices_size() const {
  return devices_.size();
}
inline int UpdateDevicesResponse::devices_size() const {
  return _internal_devices_size();
}
inline void UpdateDevicesResponse::clear_devices() {
  devices_.Clear();
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDevicesResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDevicesResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >*
UpdateDevicesResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.UpdateDevicesResponse.devices)
  return &devices_;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& UpdateDevicesResponse::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& UpdateDevicesResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDevicesResponse.devices)
  return _internal_devices(index);
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDevicesResponse::_internal_add_devices() {
  return devices_.Add();
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDevicesResponse::add_devices() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.UpdateDevicesResponse.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::DeviceDetailed >&
UpdateDevicesResponse::devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.UpdateDevicesResponse.devices)
  return devices_;
}

// repeated string failed_devices = 2[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int UpdateDevicesResponse::_internal_failed_devices_size() const {
  return failed_devices_.size();
}
inline int UpdateDevicesResponse::failed_devices_size() const {
  return _internal_failed_devices_size();
}
inline void UpdateDevicesResponse::clear_failed_devices() {
  failed_devices_.Clear();
}
inline std::string* UpdateDevicesResponse::add_failed_devices() {
  // @@protoc_insertion_point(field_add_mutable:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  return _internal_add_failed_devices();
}
inline const std::string& UpdateDevicesResponse::_internal_failed_devices(int index) const {
  return failed_devices_.Get(index);
}
inline const std::string& UpdateDevicesResponse::failed_devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  return _internal_failed_devices(index);
}
inline std::string* UpdateDevicesResponse::mutable_failed_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  return failed_devices_.Mutable(index);
}
inline void UpdateDevicesResponse::set_failed_devices(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  failed_devices_.Mutable(index)->assign(value);
}
inline void UpdateDevicesResponse::set_failed_devices(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  failed_devices_.Mutable(index)->assign(std::move(value));
}
inline void UpdateDevicesResponse::set_failed_devices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
}
inline void UpdateDevicesResponse::set_failed_devices(int index, const char* value, size_t size) {
  failed_devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
}
inline std::string* UpdateDevicesResponse::_internal_add_failed_devices() {
  return failed_devices_.Add();
}
inline void UpdateDevicesResponse::add_failed_devices(const std::string& value) {
  failed_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
}
inline void UpdateDevicesResponse::add_failed_devices(std::string&& value) {
  failed_devices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
}
inline void UpdateDevicesResponse::add_failed_devices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
}
inline void UpdateDevicesResponse::add_failed_devices(const char* value, size_t size) {
  failed_devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateDevicesResponse::failed_devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  return failed_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateDevicesResponse::mutable_failed_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.UpdateDevicesResponse.failed_devices)
  return &failed_devices_;
}

// -------------------------------------------------------------------

// UpdateDeviceLabelsRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UpdateDeviceLabelsRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateDeviceLabelsRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
  return _internal_id();
}
inline void UpdateDeviceLabelsRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
}
inline std::string* UpdateDeviceLabelsRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateDeviceLabelsRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateDeviceLabelsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateDeviceLabelsRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
}
inline void UpdateDeviceLabelsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
}
inline void UpdateDeviceLabelsRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
}
inline std::string* UpdateDeviceLabelsRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateDeviceLabelsRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateDeviceLabelsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
}
inline std::string* UpdateDeviceLabelsRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateDeviceLabelsRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.id)
}

// repeated .kentik.device.v202308beta1.LabelConcise labels = 2[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int UpdateDeviceLabelsRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int UpdateDeviceLabelsRequest::labels_size() const {
  return _internal_labels_size();
}
inline void UpdateDeviceLabelsRequest::clear_labels() {
  labels_.Clear();
}
inline ::kentik::device::v202308beta1::LabelConcise* UpdateDeviceLabelsRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::LabelConcise >*
UpdateDeviceLabelsRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels)
  return &labels_;
}
inline const ::kentik::device::v202308beta1::LabelConcise& UpdateDeviceLabelsRequest::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::kentik::device::v202308beta1::LabelConcise& UpdateDeviceLabelsRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels)
  return _internal_labels(index);
}
inline ::kentik::device::v202308beta1::LabelConcise* UpdateDeviceLabelsRequest::_internal_add_labels() {
  return labels_.Add();
}
inline ::kentik::device::v202308beta1::LabelConcise* UpdateDeviceLabelsRequest::add_labels() {
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::device::v202308beta1::LabelConcise >&
UpdateDeviceLabelsRequest::labels() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels)
  return labels_;
}

// -------------------------------------------------------------------

// UpdateDeviceLabelsResponse

// .kentik.device.v202308beta1.DeviceDetailed device = 1[json_name = "device", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateDeviceLabelsResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool UpdateDeviceLabelsResponse::has_device() const {
  return _internal_has_device();
}
inline void UpdateDeviceLabelsResponse::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& UpdateDeviceLabelsResponse::_internal_device() const {
  const ::kentik::device::v202308beta1::DeviceDetailed* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::device::v202308beta1::DeviceDetailed*>(
      &::kentik::device::v202308beta1::_DeviceDetailed_default_instance_);
}
inline const ::kentik::device::v202308beta1::DeviceDetailed& UpdateDeviceLabelsResponse::device() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device)
  return _internal_device();
}
inline void UpdateDeviceLabelsResponse::unsafe_arena_set_allocated_device(
    ::kentik::device::v202308beta1::DeviceDetailed* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device)
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceLabelsResponse::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceLabelsResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device)
  
  ::kentik::device::v202308beta1::DeviceDetailed* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceLabelsResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::device::v202308beta1::DeviceDetailed>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::kentik::device::v202308beta1::DeviceDetailed* UpdateDeviceLabelsResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device)
  return _internal_mutable_device();
}
inline void UpdateDeviceLabelsResponse::set_allocated_device(::kentik::device::v202308beta1::DeviceDetailed* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device)
}

// -------------------------------------------------------------------

// DeleteDeviceRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteDeviceRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDeviceRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeleteDeviceRequest.id)
  return _internal_id();
}
inline void DeleteDeviceRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeleteDeviceRequest.id)
}
inline std::string* DeleteDeviceRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeleteDeviceRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteDeviceRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteDeviceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDeviceRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.device.v202308beta1.DeleteDeviceRequest.id)
}
inline void DeleteDeviceRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeleteDeviceRequest.id)
}
inline void DeleteDeviceRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeleteDeviceRequest.id)
}
inline std::string* DeleteDeviceRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDeviceRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.device.v202308beta1.DeleteDeviceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDeviceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.device.v202308beta1.DeleteDeviceRequest.id)
}
inline std::string* DeleteDeviceRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.device.v202308beta1.DeleteDeviceRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDeviceRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.device.v202308beta1.DeleteDeviceRequest.id)
}

// -------------------------------------------------------------------

// DeleteDeviceResponse

// -------------------------------------------------------------------

// DeleteDevicesRequest

// repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeleteDevicesRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteDevicesRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteDevicesRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteDevicesRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteDevicesRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteDevicesRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteDevicesRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteDevicesRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteDevicesRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteDevicesRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
}
inline void DeleteDevicesRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
}
inline std::string* DeleteDevicesRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteDevicesRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
}
inline void DeleteDevicesRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
}
inline void DeleteDevicesRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
}
inline void DeleteDevicesRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteDevicesRequest::ids() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteDevicesRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeleteDevicesRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// DeleteDevicesResponse

// repeated string failed_devices = 1[json_name = "failedDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DeleteDevicesResponse::_internal_failed_devices_size() const {
  return failed_devices_.size();
}
inline int DeleteDevicesResponse::failed_devices_size() const {
  return _internal_failed_devices_size();
}
inline void DeleteDevicesResponse::clear_failed_devices() {
  failed_devices_.Clear();
}
inline std::string* DeleteDevicesResponse::add_failed_devices() {
  // @@protoc_insertion_point(field_add_mutable:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  return _internal_add_failed_devices();
}
inline const std::string& DeleteDevicesResponse::_internal_failed_devices(int index) const {
  return failed_devices_.Get(index);
}
inline const std::string& DeleteDevicesResponse::failed_devices(int index) const {
  // @@protoc_insertion_point(field_get:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  return _internal_failed_devices(index);
}
inline std::string* DeleteDevicesResponse::mutable_failed_devices(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  return failed_devices_.Mutable(index);
}
inline void DeleteDevicesResponse::set_failed_devices(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  failed_devices_.Mutable(index)->assign(value);
}
inline void DeleteDevicesResponse::set_failed_devices(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  failed_devices_.Mutable(index)->assign(std::move(value));
}
inline void DeleteDevicesResponse::set_failed_devices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
}
inline void DeleteDevicesResponse::set_failed_devices(int index, const char* value, size_t size) {
  failed_devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
}
inline std::string* DeleteDevicesResponse::_internal_add_failed_devices() {
  return failed_devices_.Add();
}
inline void DeleteDevicesResponse::add_failed_devices(const std::string& value) {
  failed_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
}
inline void DeleteDevicesResponse::add_failed_devices(std::string&& value) {
  failed_devices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
}
inline void DeleteDevicesResponse::add_failed_devices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
}
inline void DeleteDevicesResponse::add_failed_devices(const char* value, size_t size) {
  failed_devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteDevicesResponse::failed_devices() const {
  // @@protoc_insertion_point(field_list:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  return failed_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteDevicesResponse::mutable_failed_devices() {
  // @@protoc_insertion_point(field_mutable_list:kentik.device.v202308beta1.DeleteDevicesResponse.failed_devices)
  return &failed_devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202308beta1
}  // namespace device
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fdevice_2fv202308beta1_2fdevice_2eproto
