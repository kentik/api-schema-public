// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/core/v202303/annotations.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2fcore_2fv202303_2fannotations_2eproto_2epb_2eh
#define kentik_2fcore_2fv202303_2fannotations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2fcore_2fv202303_2fannotations_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fcore_2fv202303_2fannotations_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace core {
namespace v202303 {
enum ServiceVisibility : int {
  SERVICE_VISIBILITY_PRIVATE = 0,
  SERVICE_VISIBILITY_PROTECTED = 1,
  SERVICE_VISIBILITY_INTERNAL = 2,
  SERVICE_VISIBILITY_PUBLIC = 3,
  SERVICE_VISIBILITY_PUBLIC_KENTIK = 4,
  ServiceVisibility_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServiceVisibility_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServiceVisibility_IsValid(int value);
extern const uint32_t ServiceVisibility_internal_data_[];
constexpr ServiceVisibility ServiceVisibility_MIN = static_cast<ServiceVisibility>(0);
constexpr ServiceVisibility ServiceVisibility_MAX = static_cast<ServiceVisibility>(4);
constexpr int ServiceVisibility_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ServiceVisibility_descriptor();
template <typename T>
const std::string& ServiceVisibility_Name(T value) {
  static_assert(std::is_same<T, ServiceVisibility>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ServiceVisibility_Name().");
  return ServiceVisibility_Name(static_cast<ServiceVisibility>(value));
}
template <>
inline const std::string& ServiceVisibility_Name(ServiceVisibility value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ServiceVisibility_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ServiceVisibility_Parse(absl::string_view name, ServiceVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceVisibility>(
      ServiceVisibility_descriptor(), name, value);
}
enum MethodVisibility : int {
  METHOD_VISIBILITY_UNSPECIFIED = 0,
  METHOD_VISIBILITY_PRIVATE = 1,
  METHOD_VISIBILITY_PROTECTED = 2,
  METHOD_VISIBILITY_INTERNAL = 3,
  METHOD_VISIBILITY_PUBLIC = 4,
  METHOD_VISIBILITY_PUBLIC_KENTIK = 5,
  MethodVisibility_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MethodVisibility_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MethodVisibility_IsValid(int value);
extern const uint32_t MethodVisibility_internal_data_[];
constexpr MethodVisibility MethodVisibility_MIN = static_cast<MethodVisibility>(0);
constexpr MethodVisibility MethodVisibility_MAX = static_cast<MethodVisibility>(5);
constexpr int MethodVisibility_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MethodVisibility_descriptor();
template <typename T>
const std::string& MethodVisibility_Name(T value) {
  static_assert(std::is_same<T, MethodVisibility>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MethodVisibility_Name().");
  return MethodVisibility_Name(static_cast<MethodVisibility>(value));
}
template <>
inline const std::string& MethodVisibility_Name(MethodVisibility value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MethodVisibility_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MethodVisibility_Parse(absl::string_view name, MethodVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MethodVisibility>(
      MethodVisibility_descriptor(), name, value);
}

// ===================================================================



// ===================================================================



static const int kServiceScopeFieldNumber = 5501;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::ServiceOptions, ::google::protobuf::internal::StringTypeTraits, 9,
    false>
    service_scope;
static const int kPrivateServiceFieldNumber = 5503;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::ServiceOptions, ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8,
    false>
    private_service;
static const int kVisibilityFieldNumber = 5506;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::ServiceOptions, ::google::protobuf::internal::EnumTypeTraits< ::kentik::core::v202303::ServiceVisibility, ::kentik::core::v202303::ServiceVisibility_IsValid>, 14,
    false>
    visibility;
static const int kMethodScopeFieldNumber = 5502;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::StringTypeTraits, 9,
    false>
    method_scope;
static const int kPrivateMethodFieldNumber = 5504;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8,
    false>
    private_method;
static const int kMethodCategoryFieldNumber = 5505;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::StringTypeTraits, 9,
    false>
    method_category;
static const int kMethodPermissionFieldNumber = 5506;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::StringTypeTraits, 9,
    false>
    method_permission;
static const int kMethodVisibilityFieldNumber = 5507;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::EnumTypeTraits< ::kentik::core::v202303::MethodVisibility, ::kentik::core::v202303::MethodVisibility_IsValid>, 14,
    false>
    method_visibility;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202303
}  // namespace core
}  // namespace kentik


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kentik::core::v202303::ServiceVisibility> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::core::v202303::ServiceVisibility>() {
  return ::kentik::core::v202303::ServiceVisibility_descriptor();
}
template <>
struct is_proto_enum<::kentik::core::v202303::MethodVisibility> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::core::v202303::MethodVisibility>() {
  return ::kentik::core::v202303::MethodVisibility_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2fcore_2fv202303_2fannotations_2eproto_2epb_2eh
