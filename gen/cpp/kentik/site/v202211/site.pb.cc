// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/site/v202211/site.proto

#include "kentik/site/v202211/site.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto;
namespace kentik {
namespace site {
namespace v202211 {
class SiteIpAddressClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteIpAddressClassification> _instance;
} _SiteIpAddressClassification_default_instance_;
class LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layer> _instance;
} _Layer_default_instance_;
class LayerSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerSet> _instance;
} _LayerSet_default_instance_;
class PostalAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostalAddress> _instance;
} _PostalAddress_default_instance_;
class SiteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Site> _instance;
} _Site_default_instance_;
class ListSitesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSitesRequest> _instance;
} _ListSitesRequest_default_instance_;
class ListSitesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSitesResponse> _instance;
} _ListSitesResponse_default_instance_;
class GetSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSiteRequest> _instance;
} _GetSiteRequest_default_instance_;
class GetSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSiteResponse> _instance;
} _GetSiteResponse_default_instance_;
class CreateSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSiteRequest> _instance;
} _CreateSiteRequest_default_instance_;
class CreateSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSiteResponse> _instance;
} _CreateSiteResponse_default_instance_;
class UpdateSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSiteRequest> _instance;
} _UpdateSiteRequest_default_instance_;
class UpdateSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSiteResponse> _instance;
} _UpdateSiteResponse_default_instance_;
class DeleteSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSiteRequest> _instance;
} _DeleteSiteRequest_default_instance_;
class DeleteSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSiteResponse> _instance;
} _DeleteSiteResponse_default_instance_;
class SiteMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteMarket> _instance;
} _SiteMarket_default_instance_;
class ListSiteMarketsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSiteMarketsRequest> _instance;
} _ListSiteMarketsRequest_default_instance_;
class ListSiteMarketsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSiteMarketsResponse> _instance;
} _ListSiteMarketsResponse_default_instance_;
class GetSiteMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSiteMarketRequest> _instance;
} _GetSiteMarketRequest_default_instance_;
class GetSiteMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSiteMarketResponse> _instance;
} _GetSiteMarketResponse_default_instance_;
class CreateSiteMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSiteMarketRequest> _instance;
} _CreateSiteMarketRequest_default_instance_;
class CreateSiteMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSiteMarketResponse> _instance;
} _CreateSiteMarketResponse_default_instance_;
class UpdateSiteMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSiteMarketRequest> _instance;
} _UpdateSiteMarketRequest_default_instance_;
class UpdateSiteMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSiteMarketResponse> _instance;
} _UpdateSiteMarketResponse_default_instance_;
class DeleteSiteMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSiteMarketRequest> _instance;
} _DeleteSiteMarketRequest_default_instance_;
class DeleteSiteMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSiteMarketResponse> _instance;
} _DeleteSiteMarketResponse_default_instance_;
}  // namespace v202211
}  // namespace site
}  // namespace kentik
static void InitDefaultsscc_info_CreateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_CreateSiteMarketRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::CreateSiteMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::CreateSiteMarketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_CreateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_CreateSiteMarketResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::CreateSiteMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::CreateSiteMarketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_CreateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_CreateSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::CreateSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::CreateSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_CreateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_CreateSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::CreateSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::CreateSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_DeleteSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_DeleteSiteMarketRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::DeleteSiteMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::DeleteSiteMarketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_DeleteSiteMarketResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::DeleteSiteMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::DeleteSiteMarketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_DeleteSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::DeleteSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::DeleteSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_DeleteSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::DeleteSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::DeleteSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_GetSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_GetSiteMarketRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::GetSiteMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::GetSiteMarketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_GetSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_GetSiteMarketResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::GetSiteMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::GetSiteMarketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_GetSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_GetSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::GetSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::GetSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_GetSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_GetSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::GetSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::GetSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_Layer_default_instance_;
    new (ptr) ::kentik::site::v202211::Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_LayerSet_default_instance_;
    new (ptr) ::kentik::site::v202211::LayerSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::LayerSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_ListSiteMarketsRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_ListSiteMarketsRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::ListSiteMarketsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::ListSiteMarketsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSiteMarketsRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSiteMarketsRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_ListSiteMarketsResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_ListSiteMarketsResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::ListSiteMarketsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::ListSiteMarketsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSiteMarketsResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSiteMarketsResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_ListSitesRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_ListSitesRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::ListSitesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::ListSitesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSitesRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSitesRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_ListSitesResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_ListSitesResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::ListSitesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::ListSitesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSitesResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSitesResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_PostalAddress_default_instance_;
    new (ptr) ::kentik::site::v202211::PostalAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::PostalAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_Site_default_instance_;
    new (ptr) ::kentik::site::v202211::Site();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::Site::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto.base,
      &scc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto.base,
      &scc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_SiteIpAddressClassification_default_instance_;
    new (ptr) ::kentik::site::v202211::SiteIpAddressClassification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::SiteIpAddressClassification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_SiteMarket_default_instance_;
    new (ptr) ::kentik::site::v202211::SiteMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::SiteMarket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_UpdateSiteMarketRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::UpdateSiteMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::UpdateSiteMarketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_UpdateSiteMarketResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::UpdateSiteMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::UpdateSiteMarketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_UpdateSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202211::UpdateSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::UpdateSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202211::_UpdateSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202211::UpdateSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202211::UpdateSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fsite_2fv202211_2fsite_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fsite_2fv202211_2fsite_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fsite_2fv202211_2fsite_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteIpAddressClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteIpAddressClassification, infrastructure_networks_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteIpAddressClassification, user_access_networks_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteIpAddressClassification, other_networks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Layer, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Layer, device_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::LayerSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::LayerSet, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::PostalAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::PostalAddress, address_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::PostalAddress, city_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::PostalAddress, region_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::PostalAddress, postal_code_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::PostalAddress, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, title_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, lat_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, lon_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, postal_address_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, address_classification_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, architecture_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::Site, site_market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSitesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSitesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSitesResponse, sites_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSitesResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteResponse, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteRequest, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteResponse, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteRequest, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteResponse, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::DeleteSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::DeleteSiteRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::DeleteSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, number_of_sites_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::SiteMarket, edate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSiteMarketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSiteMarketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSiteMarketsResponse, site_markets_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::ListSiteMarketsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteMarketRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::GetSiteMarketResponse, site_market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteMarketRequest, site_market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::CreateSiteMarketResponse, site_market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteMarketRequest, site_market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::UpdateSiteMarketResponse, site_market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::DeleteSiteMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::DeleteSiteMarketRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202211::DeleteSiteMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::site::v202211::SiteIpAddressClassification)},
  { 8, -1, sizeof(::kentik::site::v202211::Layer)},
  { 15, -1, sizeof(::kentik::site::v202211::LayerSet)},
  { 21, -1, sizeof(::kentik::site::v202211::PostalAddress)},
  { 31, -1, sizeof(::kentik::site::v202211::Site)},
  { 45, -1, sizeof(::kentik::site::v202211::ListSitesRequest)},
  { 50, -1, sizeof(::kentik::site::v202211::ListSitesResponse)},
  { 57, -1, sizeof(::kentik::site::v202211::GetSiteRequest)},
  { 63, -1, sizeof(::kentik::site::v202211::GetSiteResponse)},
  { 69, -1, sizeof(::kentik::site::v202211::CreateSiteRequest)},
  { 75, -1, sizeof(::kentik::site::v202211::CreateSiteResponse)},
  { 81, -1, sizeof(::kentik::site::v202211::UpdateSiteRequest)},
  { 87, -1, sizeof(::kentik::site::v202211::UpdateSiteResponse)},
  { 93, -1, sizeof(::kentik::site::v202211::DeleteSiteRequest)},
  { 99, -1, sizeof(::kentik::site::v202211::DeleteSiteResponse)},
  { 104, -1, sizeof(::kentik::site::v202211::SiteMarket)},
  { 115, -1, sizeof(::kentik::site::v202211::ListSiteMarketsRequest)},
  { 120, -1, sizeof(::kentik::site::v202211::ListSiteMarketsResponse)},
  { 127, -1, sizeof(::kentik::site::v202211::GetSiteMarketRequest)},
  { 133, -1, sizeof(::kentik::site::v202211::GetSiteMarketResponse)},
  { 139, -1, sizeof(::kentik::site::v202211::CreateSiteMarketRequest)},
  { 145, -1, sizeof(::kentik::site::v202211::CreateSiteMarketResponse)},
  { 151, -1, sizeof(::kentik::site::v202211::UpdateSiteMarketRequest)},
  { 157, -1, sizeof(::kentik::site::v202211::UpdateSiteMarketResponse)},
  { 163, -1, sizeof(::kentik::site::v202211::DeleteSiteMarketRequest)},
  { 169, -1, sizeof(::kentik::site::v202211::DeleteSiteMarketResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_SiteIpAddressClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_LayerSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_PostalAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_Site_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_ListSitesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_ListSitesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_GetSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_GetSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_CreateSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_CreateSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_UpdateSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_UpdateSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_DeleteSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_DeleteSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_SiteMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_ListSiteMarketsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_ListSiteMarketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_GetSiteMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_GetSiteMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_CreateSiteMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_CreateSiteMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_UpdateSiteMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_UpdateSiteMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_DeleteSiteMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202211::_DeleteSiteMarketResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fsite_2fv202211_2fsite_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036kentik/site/v202211/site.proto\022\023kentik"
  ".site.v202211\032\034google/api/annotations.pr"
  "oto\032\027google/api/client.proto\032\037google/api"
  "/field_behavior.proto\032\037google/protobuf/t"
  "imestamp.proto\032.protoc-gen-openapiv2/opt"
  "ions/annotations.proto\032%kentik/core/v202"
  "303/annotations.proto\"\272\003\n\033SiteIpAddressC"
  "lassification\022\225\001\n\027infrastructure_network"
  "s\030\001 \003(\tB\\\222AY2WList of IP address prefixe"
  "s (in standard CIDR notation) used in in"
  "frastructure networksR\026infrastructureNet"
  "works\022\206\001\n\024user_access_networks\030\002 \003(\tBT\222A"
  "Q2OList of IP address prefixes (in stand"
  "ard CIDR notation) used in access networ"
  "ksR\022userAccessNetworks\022z\n\016other_networks"
  "\030\003 \003(\tBS\222AP2NList of IP address prefixes"
  " (in standard CIDR notation) used in oth"
  "er networksR\rotherNetworks\"\237\001\n\005Layer\0222\n\004"
  "name\030\001 \001(\tB\036\222A\0332\031Name of the network lay"
  "erR\004name\022b\n\ndevice_ids\030\002 \003(\tBC\222A@2>IDs o"
  "f devices that are deemed to be part of "
  "the network layerR\tdeviceIds\"d\n\010LayerSet"
  "\022X\n\006layers\030\001 \003(\0132\032.kentik.site.v202211.L"
  "ayerB$\222A!2\037List of parallel network laye"
  "rsR\006layers\"\257\002\n\rPostalAddress\0221\n\007address\030"
  "\001 \001(\tB\027\222A\0202\016Street address\342A\001\002R\007address\022"
  "-\n\004city\030\002 \001(\tB\031\222A\0222\020City (full name)\342A\001\002"
  "R\004city\0220\n\006region\030\003 \001(\tB\030\222A\0252\023Geographica"
  "l regionR\006region\022B\n\013postal_code\030\004 \001(\tB!\222"
  "A\0362\034Country specific postal codeR\npostal"
  "Code\022F\n\007country\030\005 \001(\tB,\222A%2#Country (ful"
  "l name or country code)\342A\001\002R\007country\"\364\005\n"
  "\004Site\022;\n\002id\030\001 \001(\tB+\222A$2\"System generated"
  " unique identifier\342A\001\003R\002id\0227\n\005title\030\002 \001("
  "\tB!\222A\0322\030User selected title/name\342A\001\002R\005ti"
  "tle\0228\n\003lat\030\004 \001(\001B&\222A#2!Latitude (signed "
  "decimal degrees)R\003lat\0229\n\003lon\030\005 \001(\001B\'\222A$2"
  "\"Longitude (signed decimal degrees)R\003lon"
  "\022^\n\016postal_address\030\006 \001(\0132\".kentik.site.v"
  "202211.PostalAddressB\023\222A\0202\016Postal addres"
  "sR\rpostalAddress\022H\n\004type\030\007 \001(\0162\035.kentik."
  "site.v202211.SiteTypeB\025\222A\0162\014Type of site"
  "\342A\001\002R\004type\022\223\001\n\026address_classification\030\010 "
  "\001(\01320.kentik.site.v202211.SiteIpAddressC"
  "lassificationB*\222A\'2%Classification of si"
  "te\'s IP addressesR\025addressClassification"
  "\022m\n\014architecture\030\t \003(\0132\035.kentik.site.v20"
  "2211.LayerSetB*\222A\'2%Logical network topo"
  "logy/architectureR\014architecture\022R\n\013site_"
  "market\030\n \001(\tB1\222A.2,Name of the Site Mark"
  "et this sire belongs toR\nsiteMarket\"\022\n\020L"
  "istSitesRequest\"\333\001\n\021ListSitesResponse\022_\n"
  "\005sites\030\001 \003(\0132\031.kentik.site.v202211.SiteB"
  ".\222A+2)List of configurations of requeste"
  "d sitesR\005sites\022e\n\rinvalid_count\030\002 \001(\rB@\222"
  "A=2;Number of invalid entries encountere"
  "d while collecting dataR\014invalidCount\"C\n"
  "\016GetSiteRequest\0221\n\002id\030\001 \001(\tB!\222A\0322\030ID of "
  "the requested site\342A\001\002R\002id\"j\n\017GetSiteRes"
  "ponse\022W\n\004site\030\001 \001(\0132\031.kentik.site.v20221"
  "1.SiteB(\222A%2#Configuration of the reques"
  "ted siteR\004site\"j\n\021CreateSiteRequest\022U\n\004s"
  "ite\030\001 \001(\0132\031.kentik.site.v202211.SiteB&\222A"
  "\0372\035Configuration of the new site\342A\001\002R\004si"
  "te\"q\n\022CreateSiteResponse\022[\n\004site\030\001 \001(\0132\031"
  ".kentik.site.v202211.SiteB,\222A)2\'Configur"
  "ation of the newly created siteR\004site\"\204\001"
  "\n\021UpdateSiteRequest\022o\n\004site\030\001 \001(\0132\031.kent"
  "ik.site.v202211.SiteB@\222A927New configura"
  "tion attributes for the site to be updat"
  "ed\342A\001\002R\004site\"k\n\022UpdateSiteResponse\022U\n\004si"
  "te\030\001 \001(\0132\031.kentik.site.v202211.SiteB&\222A#"
  "2!Updated configuration of the siteR\004sit"
  "e\"J\n\021DeleteSiteRequest\0225\n\002id\030\001 \001(\tB%\222A\0362"
  "\034ID of the site to be deleted\342A\001\002R\002id\"\024\n"
  "\022DeleteSiteResponse\"\303\003\n\nSiteMarket\022;\n\002id"
  "\030\001 \001(\tB+\222A$2\"System generated unique ide"
  "ntifier\342A\001\003R\002id\0226\n\004name\030\002 \001(\tB\"\222A\0332\031User"
  " selected unique name\342A\001\002R\004name\022<\n\013descr"
  "iption\030\003 \001(\tB\032\222A\0272\025Free-form description"
  "R\013description\022O\n\017number_of_sites\030\004 \001(\rB\'"
  "\222A 2\036Number of sites in this market\342A\001\003R"
  "\rnumberOfSites\022S\n\005cdate\030\005 \001(\0132\032.google.p"
  "rotobuf.TimestampB!\222A\0322\030Creation timesta"
  "mp (UTC)\342A\001\003R\005cdate\022\\\n\005edate\030\006 \001(\0132\032.goo"
  "gle.protobuf.TimestampB*\222A#2!Last modifi"
  "cation timestamp (UTC)\342A\001\003R\005edate\"\030\n\026Lis"
  "tSiteMarketsRequest\"\373\001\n\027ListSiteMarketsR"
  "esponse\022y\n\014site_markets\030\001 \003(\0132\037.kentik.s"
  "ite.v202211.SiteMarketB5\222A220List of con"
  "figurations of requested site marketsR\013s"
  "iteMarkets\022e\n\rinvalid_count\030\002 \001(\rB@\222A=2;"
  "Number of invalid entries encountered wh"
  "ile collecting dataR\014invalidCount\"P\n\024Get"
  "SiteMarketRequest\0228\n\002id\030\001 \001(\tB(\222A!2\037ID o"
  "f the requested site market\342A\001\002R\002id\"\212\001\n\025"
  "GetSiteMarketResponse\022q\n\013site_market\030\001 \001"
  "(\0132\037.kentik.site.v202211.SiteMarketB/\222A,"
  "2*Configuration of the requested site ma"
  "rketR\nsiteMarket\"\212\001\n\027CreateSiteMarketReq"
  "uest\022o\n\013site_market\030\001 \001(\0132\037.kentik.site."
  "v202211.SiteMarketB-\222A&2$Configuration o"
  "f the new site market\342A\001\002R\nsiteMarket\"\221\001"
  "\n\030CreateSiteMarketResponse\022u\n\013site_marke"
  "t\030\001 \001(\0132\037.kentik.site.v202211.SiteMarket"
  "B3\222A02.Configuration of the newly create"
  "d site marketR\nsiteMarket\"\236\001\n\027UpdateSite"
  "MarketRequest\022\202\001\n\013site_market\030\001 \001(\0132\037.ke"
  "ntik.site.v202211.SiteMarketB@\222A927New c"
  "onfiguration attributes for the site to "
  "be updated\342A\001\002R\nsiteMarket\"\213\001\n\030UpdateSit"
  "eMarketResponse\022o\n\013site_market\030\001 \001(\0132\037.k"
  "entik.site.v202211.SiteMarketB-\222A*2(Upda"
  "ted configuration of the site marketR\nsi"
  "teMarket\"W\n\027DeleteSiteMarketRequest\022<\n\002i"
  "d\030\001 \001(\tB,\222A%2#ID of the site market to b"
  "e deleted\342A\001\002R\002id\"\032\n\030DeleteSiteMarketRes"
  "ponse*\264\001\n\010SiteType\022\031\n\025SITE_TYPE_UNSPECIF"
  "IED\020\000\022\031\n\025SITE_TYPE_DATA_CENTER\020\001\022\023\n\017SITE"
  "_TYPE_CLOUD\020\002\022\024\n\020SITE_TYPE_BRANCH\020\003\022\032\n\026S"
  "ITE_TYPE_CONNECTIVITY\020\004\022\026\n\022SITE_TYPE_CUS"
  "TOMER\020\005\022\023\n\017SITE_TYPE_OTHER\020\0062\217\026\n\013SiteSer"
  "vice\022\314\001\n\tListSites\022%.kentik.site.v202211"
  ".ListSitesRequest\032&.kentik.site.v202211."
  "ListSitesResponse\"p\222A\?\022\017List all sites.\032"
  "!Returns list of configured sites.*\tList"
  "Sites\362\327\002\017admin.site:read\202\323\344\223\002\025\022\023/site/v2"
  "02211/sites\022\353\001\n\007GetSite\022#.kentik.site.v2"
  "02211.GetSiteRequest\032$.kentik.site.v2022"
  "11.GetSiteResponse\"\224\001\222A^\022!Retrieve confi"
  "guration of a site.\0320Returns configurati"
  "on of a site specified by ID.*\007GetSite\362\327"
  "\002\017admin.site:read\202\323\344\223\002\032\022\030/site/v202211/s"
  "ites/{id}\022\207\002\n\nCreateSite\022&.kentik.site.v"
  "202211.CreateSiteRequest\032\'.kentik.site.v"
  "202211.CreateSiteResponse\"\247\001\222Ar\022\025Configu"
  "re a new site.\032MCreate configuration for"
  " a new site. Returns the newly created c"
  "onfiguration.*\nCreateSite\362\327\002\020admin.site:"
  "write\202\323\344\223\002\030\"\023/site/v202211/sites:\001*\022\263\002\n\n"
  "UpdateSite\022&.kentik.site.v202211.UpdateS"
  "iteRequest\032\'.kentik.site.v202211.UpdateS"
  "iteResponse\"\323\001\222A\223\001\022 Updates configuratio"
  "n of a site.\032cReplaces configuration of "
  "a site with attributes in the request. R"
  "eturns the updated configuration.*\nUpdat"
  "eSite\362\327\002\020admin.site:write\202\323\344\223\002\"\032\035/site/v"
  "202211/sites/{site.id}:\001*\022\367\001\n\nDeleteSite"
  "\022&.kentik.site.v202211.DeleteSiteRequest"
  "\032\'.kentik.site.v202211.DeleteSiteRespons"
  "e\"\227\001\222A`\022\037Delete configuration of a site."
  "\0321Deletes configuration of a site with s"
  "pecific ID.*\nDeleteSite\362\327\002\020admin.site:wr"
  "ite\202\323\344\223\002\032*\030/site/v202211/sites/{id}\022\372\001\n\017"
  "ListSiteMarkets\022+.kentik.site.v202211.Li"
  "stSiteMarketsRequest\032,.kentik.site.v2022"
  "11.ListSiteMarketsResponse\"\213\001\222AS\022\026List a"
  "ll site markets.\032(Returns list of config"
  "ured site markets.*\017ListSiteMarkets\362\327\002\017a"
  "dmin.site:read\202\323\344\223\002\034\022\032/site/v202211/site"
  "_markets\022\230\002\n\rGetSiteMarket\022).kentik.site"
  ".v202211.GetSiteMarketRequest\032*.kentik.s"
  "ite.v202211.GetSiteMarketResponse\"\257\001\222Ar\022"
  "(Retrieve configuration of a site market"
  ".\0327Returns configuration of a site marke"
  "t specified by ID.*\rGetSiteMarket\362\327\002\017adm"
  "in.site:read\202\323\344\223\002!\022\037/site/v202211/site_m"
  "arkets/{id}\022\265\002\n\020CreateSiteMarket\022,.kenti"
  "k.site.v202211.CreateSiteMarketRequest\032-"
  ".kentik.site.v202211.CreateSiteMarketRes"
  "ponse\"\303\001\222A\206\001\022\034Configure a new site marke"
  "t.\032TCreate configuration for a new site "
  "market. Returns the newly created config"
  "uration.*\020CreateSiteMarket\362\327\002\020admin.site"
  ":write\202\323\344\223\002\037\"\032/site/v202211/site_markets"
  ":\001*\022\347\002\n\020UpdateSiteMarket\022,.kentik.site.v"
  "202211.UpdateSiteMarketRequest\032-.kentik."
  "site.v202211.UpdateSiteMarketResponse\"\365\001"
  "\222A\247\001\022\'Updates configuration of a site ma"
  "rket.\032jReplaces configuration of a site "
  "market with attributes in the request. R"
  "eturns the updated configuration.*\020Updat"
  "eSiteMarket\362\327\002\020admin.site:write\202\323\344\223\0020\032+/"
  "site/v202211/site_markets/{site_market.i"
  "d}:\001*\022\244\002\n\020DeleteSiteMarket\022,.kentik.site"
  ".v202211.DeleteSiteMarketRequest\032-.kenti"
  "k.site.v202211.DeleteSiteMarketResponse\""
  "\262\001\222At\022&Delete configuration of a site ma"
  "rket.\0328Deletes configuration of a site m"
  "arket with specific ID.*\020DeleteSiteMarke"
  "t\362\327\002\020admin.site:write\202\323\344\223\002!*\037/site/v2022"
  "11/site_markets/{id}\032(\312A\023grpc.api.kentik"
  ".com\352\327\002\nadmin.site\220\330\002\003B\203\014ZCgithub.com/ke"
  "ntik/api-schema-public/gen/go/kentik/sit"
  "e/v202211;site\222A\272\013\022\323\t\n\026Site Configuratio"
  "n API\022\350\010# Overview\nThe Site Configuratio"
  "n API provides programmatic access to co"
  "nfiguration of Sites and Site Markets:\n\n"
  "* **Site**: A site is a specific user-de"
  "fined physical location (e.g. a data cen"
  "ter at a given address) or logical locat"
  "ion at which there is hosting of your de"
  "vices, services, providers, or partner n"
  "etworks. Information that can be associa"
  "ted with a site includes the classificat"
  "ion of IP addresses and the site\'s logic"
  "al network topology/architecture.\n* **Si"
  "te Market**: Sites with any common chara"
  "cteristics of your choosing (e.g. all Po"
  "Ps in a particular region) can be logica"
  "lly grouped into a site market.\n\nBoth RE"
  "ST endpoint and gRPC RPCs are provided.\n"
  "\n***Notes:*** \n    - Once a site is crea"
  "ted in Kentik, you can assign one or mor"
  "e devices to the site via the settings f"
  "or those devices; to do so programmatica"
  "lly you\'d use the v5 Device API (see [De"
  "vice Create](https://kb.kentik.com/v0/Ec"
  "05.htm#Ec05-Device_Create)).\n    - Sites"
  " can also be managed using the legacy RE"
  "ST-only [Site API](https://kb.kentik.com"
  "/v0/Ec10.htm#Ec10-Site_API), which provi"
  "des access to a subset of site configura"
  "tion attributes.\"E\n\026Kentik API Engineeri"
  "ng\022+https://github.com/kentik/api-schema"
  "-public2\007v202211*\001\0022\020application/json:\020a"
  "pplication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Aut"
  "h-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-To"
  "ken \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General"
  " information about Kentik APIs\0224https://"
  "kb.kentik.com/v0/Ab09.htm#Ab09-APIs_Over"
  "viewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto_sccs[26] = {
  &scc_info_CreateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_CreateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_CreateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_CreateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_DeleteSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_DeleteSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_DeleteSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_DeleteSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_GetSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_GetSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_GetSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_GetSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_ListSiteMarketsRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_ListSiteMarketsResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_ListSitesRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_ListSitesResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_UpdateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_UpdateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_UpdateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base,
  &scc_info_UpdateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fsite_2fv202211_2fsite_2eproto, "kentik/site/v202211/site.proto", 9252,
  &descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto_once, descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto_sccs, descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto_deps, 26, 6,
  schemas, file_default_instances, TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto::offsets,
  file_level_metadata_kentik_2fsite_2fv202211_2fsite_2eproto, 26, file_level_enum_descriptors_kentik_2fsite_2fv202211_2fsite_2eproto, file_level_service_descriptors_kentik_2fsite_2fv202211_2fsite_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fsite_2fv202211_2fsite_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto)), true);
namespace kentik {
namespace site {
namespace v202211 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SiteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
  return file_level_enum_descriptors_kentik_2fsite_2fv202211_2fsite_2eproto[0];
}
bool SiteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SiteIpAddressClassification::InitAsDefaultInstance() {
}
class SiteIpAddressClassification::_Internal {
 public:
};

SiteIpAddressClassification::SiteIpAddressClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infrastructure_networks_(arena),
  user_access_networks_(arena),
  other_networks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.SiteIpAddressClassification)
}
SiteIpAddressClassification::SiteIpAddressClassification(const SiteIpAddressClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infrastructure_networks_(from.infrastructure_networks_),
      user_access_networks_(from.user_access_networks_),
      other_networks_(from.other_networks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.SiteIpAddressClassification)
}

void SiteIpAddressClassification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto.base);
}

SiteIpAddressClassification::~SiteIpAddressClassification() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.SiteIpAddressClassification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SiteIpAddressClassification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SiteIpAddressClassification::ArenaDtor(void* object) {
  SiteIpAddressClassification* _this = reinterpret_cast< SiteIpAddressClassification* >(object);
  (void)_this;
}
void SiteIpAddressClassification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteIpAddressClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteIpAddressClassification& SiteIpAddressClassification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteIpAddressClassification_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void SiteIpAddressClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.SiteIpAddressClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infrastructure_networks_.Clear();
  user_access_networks_.Clear();
  other_networks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIpAddressClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_infrastructure_networks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string user_access_networks = 2[json_name = "userAccessNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_access_networks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.SiteIpAddressClassification.user_access_networks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string other_networks = 3[json_name = "otherNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_other_networks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.SiteIpAddressClassification.other_networks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteIpAddressClassification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.SiteIpAddressClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_infrastructure_networks_size(); i < n; i++) {
    const auto& s = this->_internal_infrastructure_networks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks");
    target = stream->WriteString(1, s, target);
  }

  // repeated string user_access_networks = 2[json_name = "userAccessNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_user_access_networks_size(); i < n; i++) {
    const auto& s = this->_internal_user_access_networks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.SiteIpAddressClassification.user_access_networks");
    target = stream->WriteString(2, s, target);
  }

  // repeated string other_networks = 3[json_name = "otherNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_other_networks_size(); i < n; i++) {
    const auto& s = this->_internal_other_networks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.SiteIpAddressClassification.other_networks");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.SiteIpAddressClassification)
  return target;
}

size_t SiteIpAddressClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.SiteIpAddressClassification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(infrastructure_networks_.size());
  for (int i = 0, n = infrastructure_networks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      infrastructure_networks_.Get(i));
  }

  // repeated string user_access_networks = 2[json_name = "userAccessNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_access_networks_.size());
  for (int i = 0, n = user_access_networks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_access_networks_.Get(i));
  }

  // repeated string other_networks = 3[json_name = "otherNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(other_networks_.size());
  for (int i = 0, n = other_networks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      other_networks_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteIpAddressClassification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.SiteIpAddressClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteIpAddressClassification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiteIpAddressClassification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.SiteIpAddressClassification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.SiteIpAddressClassification)
    MergeFrom(*source);
  }
}

void SiteIpAddressClassification::MergeFrom(const SiteIpAddressClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.SiteIpAddressClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infrastructure_networks_.MergeFrom(from.infrastructure_networks_);
  user_access_networks_.MergeFrom(from.user_access_networks_);
  other_networks_.MergeFrom(from.other_networks_);
}

void SiteIpAddressClassification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.SiteIpAddressClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteIpAddressClassification::CopyFrom(const SiteIpAddressClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.SiteIpAddressClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIpAddressClassification::IsInitialized() const {
  return true;
}

void SiteIpAddressClassification::InternalSwap(SiteIpAddressClassification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infrastructure_networks_.InternalSwap(&other->infrastructure_networks_);
  user_access_networks_.InternalSwap(&other->user_access_networks_);
  other_networks_.InternalSwap(&other->other_networks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIpAddressClassification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Layer::InitAsDefaultInstance() {
}
class Layer::_Internal {
 public:
};

Layer::Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_ids_(from.device_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.Layer)
}

void Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.Layer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Layer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Layer::ArenaDtor(void* object) {
  Layer* _this = reinterpret_cast< Layer* >(object);
  (void)_this;
}
void Layer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layer& Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layer_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ids_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.Layer.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_ids = 2[json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.Layer.device_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.Layer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string device_ids = 2[json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_device_ids_size(); i < n; i++) {
    const auto& s = this->_internal_device_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.Layer.device_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.Layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_ids = 2[json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_ids_.size());
  for (int i = 0, n = device_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_ids_.Get(i));
  }

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_ids_.MergeFrom(from.device_ids_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_ids_.InternalSwap(&other->device_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LayerSet::InitAsDefaultInstance() {
}
class LayerSet::_Internal {
 public:
};

LayerSet::LayerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  layers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.LayerSet)
}
LayerSet::LayerSet(const LayerSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.LayerSet)
}

void LayerSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto.base);
}

LayerSet::~LayerSet() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.LayerSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LayerSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LayerSet::ArenaDtor(void* object) {
  LayerSet* _this = reinterpret_cast< LayerSet* >(object);
  (void)_this;
}
void LayerSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayerSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerSet& LayerSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerSet_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void LayerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.LayerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.site.v202211.Layer layers = 1[json_name = "layers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayerSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.LayerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.Layer layers = 1[json_name = "layers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.LayerSet)
  return target;
}

size_t LayerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.LayerSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.Layer layers = 1[json_name = "layers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.LayerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayerSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.LayerSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.LayerSet)
    MergeFrom(*source);
  }
}

void LayerSet::MergeFrom(const LayerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.LayerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
}

void LayerSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.LayerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerSet::CopyFrom(const LayerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.LayerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerSet::IsInitialized() const {
  return true;
}

void LayerSet::InternalSwap(LayerSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostalAddress::InitAsDefaultInstance() {
}
class PostalAddress::_Internal {
 public:
};

PostalAddress::PostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.PostalAddress)
}
PostalAddress::PostalAddress(const PostalAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_city(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postal_code().empty()) {
    postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_postal_code(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.PostalAddress)
}

void PostalAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PostalAddress::~PostalAddress() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.PostalAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PostalAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PostalAddress::ArenaDtor(void* object) {
  PostalAddress* _this = reinterpret_cast< PostalAddress* >(object);
  (void)_this;
}
void PostalAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostalAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostalAddress& PostalAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostalAddress_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void PostalAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.PostalAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postal_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostalAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1[json_name = "address", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.PostalAddress.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 2[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.PostalAddress.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 3[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.PostalAddress.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal_code = 4[json_name = "postalCode", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.PostalAddress.postal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 5[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.PostalAddress.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostalAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.PostalAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1[json_name = "address", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.PostalAddress.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string city = 2[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.PostalAddress.city");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_city(), target);
  }

  // string region = 3[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.PostalAddress.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // string postal_code = 4[json_name = "postalCode", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->postal_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.PostalAddress.postal_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_postal_code(), target);
  }

  // string country = 5[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.PostalAddress.country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.PostalAddress)
  return target;
}

size_t PostalAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.PostalAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1[json_name = "address", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string city = 2[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string region = 3[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string postal_code = 4[json_name = "postalCode", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string country = 5[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostalAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.PostalAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const PostalAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostalAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.PostalAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.PostalAddress)
    MergeFrom(*source);
  }
}

void PostalAddress::MergeFrom(const PostalAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.PostalAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.city().size() > 0) {
    _internal_set_city(from._internal_city());
  }
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.postal_code().size() > 0) {
    _internal_set_postal_code(from._internal_postal_code());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
}

void PostalAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.PostalAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostalAddress::CopyFrom(const PostalAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.PostalAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostalAddress::IsInitialized() const {
  return true;
}

void PostalAddress::InternalSwap(PostalAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PostalAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Site::InitAsDefaultInstance() {
  ::kentik::site::v202211::_Site_default_instance_._instance.get_mutable()->postal_address_ = const_cast< ::kentik::site::v202211::PostalAddress*>(
      ::kentik::site::v202211::PostalAddress::internal_default_instance());
  ::kentik::site::v202211::_Site_default_instance_._instance.get_mutable()->address_classification_ = const_cast< ::kentik::site::v202211::SiteIpAddressClassification*>(
      ::kentik::site::v202211::SiteIpAddressClassification::internal_default_instance());
}
class Site::_Internal {
 public:
  static const ::kentik::site::v202211::PostalAddress& postal_address(const Site* msg);
  static const ::kentik::site::v202211::SiteIpAddressClassification& address_classification(const Site* msg);
};

const ::kentik::site::v202211::PostalAddress&
Site::_Internal::postal_address(const Site* msg) {
  return *msg->postal_address_;
}
const ::kentik::site::v202211::SiteIpAddressClassification&
Site::_Internal::address_classification(const Site* msg) {
  return *msg->address_classification_;
}
Site::Site(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  architecture_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.Site)
}
Site::Site(const Site& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      architecture_(from.architecture_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  site_market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_market().empty()) {
    site_market_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_market(),
      GetArena());
  }
  if (from._internal_has_postal_address()) {
    postal_address_ = new ::kentik::site::v202211::PostalAddress(*from.postal_address_);
  } else {
    postal_address_ = nullptr;
  }
  if (from._internal_has_address_classification()) {
    address_classification_ = new ::kentik::site::v202211::SiteIpAddressClassification(*from.address_classification_);
  } else {
    address_classification_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.Site)
}

void Site::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&postal_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&postal_address_)) + sizeof(type_));
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.Site)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Site::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete postal_address_;
  if (this != internal_default_instance()) delete address_classification_;
}

void Site::ArenaDtor(void* object) {
  Site* _this = reinterpret_cast< Site* >(object);
  (void)_this;
}
void Site::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Site::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Site& Site::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Site_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void Site::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.Site)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  architecture_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_market_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && postal_address_ != nullptr) {
    delete postal_address_;
  }
  postal_address_ = nullptr;
  if (GetArena() == nullptr && address_classification_ != nullptr) {
    delete address_classification_;
  }
  address_classification_ = nullptr;
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Site::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.Site.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2[json_name = "title", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.Site.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 4[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 5[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .kentik.site.v202211.PostalAddress postal_address = 6[json_name = "postalAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_postal_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.site.v202211.SiteType type = 7[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::site::v202211::SiteType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.site.v202211.SiteIpAddressClassification address_classification = 8[json_name = "addressClassification", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.site.v202211.LayerSet architecture = 9[json_name = "architecture", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_architecture(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string site_market = 10[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_site_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.Site.site_market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Site::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.Site)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.Site.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2[json_name = "title", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.Site.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // double lat = 4[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lat(), target);
  }

  // double lon = 5[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_lon(), target);
  }

  // .kentik.site.v202211.PostalAddress postal_address = 6[json_name = "postalAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_postal_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::postal_address(this), target, stream);
  }

  // .kentik.site.v202211.SiteType type = 7[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // .kentik.site.v202211.SiteIpAddressClassification address_classification = 8[json_name = "addressClassification", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_address_classification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::address_classification(this), target, stream);
  }

  // repeated .kentik.site.v202211.LayerSet architecture = 9[json_name = "architecture", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_architecture_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_architecture(i), target, stream);
  }

  // string site_market = 10[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_market().data(), static_cast<int>(this->_internal_site_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.Site.site_market");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_site_market(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.Site)
  return target;
}

size_t Site::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.Site)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.LayerSet architecture = 9[json_name = "architecture", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_architecture_size();
  for (const auto& msg : this->architecture_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2[json_name = "title", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string site_market = 10[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_market());
  }

  // .kentik.site.v202211.PostalAddress postal_address = 6[json_name = "postalAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_postal_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postal_address_);
  }

  // .kentik.site.v202211.SiteIpAddressClassification address_classification = 8[json_name = "addressClassification", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_address_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_classification_);
  }

  // double lat = 4[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 5[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  // .kentik.site.v202211.SiteType type = 7[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Site::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.Site)
  GOOGLE_DCHECK_NE(&from, this);
  const Site* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Site>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.Site)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.Site)
    MergeFrom(*source);
  }
}

void Site::MergeFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.Site)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  architecture_.MergeFrom(from.architecture_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.site_market().size() > 0) {
    _internal_set_site_market(from._internal_site_market());
  }
  if (from.has_postal_address()) {
    _internal_mutable_postal_address()->::kentik::site::v202211::PostalAddress::MergeFrom(from._internal_postal_address());
  }
  if (from.has_address_classification()) {
    _internal_mutable_address_classification()->::kentik::site::v202211::SiteIpAddressClassification::MergeFrom(from._internal_address_classification());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Site::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Site::CopyFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {
  return true;
}

void Site::InternalSwap(Site* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  architecture_.InternalSwap(&other->architecture_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_market_.Swap(&other->site_market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Site, type_)
      + sizeof(Site::type_)
      - PROTOBUF_FIELD_OFFSET(Site, postal_address_)>(
          reinterpret_cast<char*>(&postal_address_),
          reinterpret_cast<char*>(&other->postal_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Site::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSitesRequest::InitAsDefaultInstance() {
}
class ListSitesRequest::_Internal {
 public:
};

ListSitesRequest::ListSitesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.ListSitesRequest)
}
ListSitesRequest::ListSitesRequest(const ListSitesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.ListSitesRequest)
}

void ListSitesRequest::SharedCtor() {
}

ListSitesRequest::~ListSitesRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.ListSitesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSitesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSitesRequest::ArenaDtor(void* object) {
  ListSitesRequest* _this = reinterpret_cast< ListSitesRequest* >(object);
  (void)_this;
}
void ListSitesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSitesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSitesRequest& ListSitesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSitesRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void ListSitesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.ListSitesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSitesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSitesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.ListSitesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.ListSitesRequest)
  return target;
}

size_t ListSitesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.ListSitesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSitesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.ListSitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSitesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSitesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.ListSitesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.ListSitesRequest)
    MergeFrom(*source);
  }
}

void ListSitesRequest::MergeFrom(const ListSitesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.ListSitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListSitesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.ListSitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSitesRequest::CopyFrom(const ListSitesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.ListSitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSitesRequest::IsInitialized() const {
  return true;
}

void ListSitesRequest::InternalSwap(ListSitesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSitesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSitesResponse::InitAsDefaultInstance() {
}
class ListSitesResponse::_Internal {
 public:
};

ListSitesResponse::ListSitesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sites_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.ListSitesResponse)
}
ListSitesResponse::ListSitesResponse(const ListSitesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sites_(from.sites_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.ListSitesResponse)
}

void ListSitesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSitesResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  invalid_count_ = 0u;
}

ListSitesResponse::~ListSitesResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.ListSitesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSitesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSitesResponse::ArenaDtor(void* object) {
  ListSitesResponse* _this = reinterpret_cast< ListSitesResponse* >(object);
  (void)_this;
}
void ListSitesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSitesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSitesResponse& ListSitesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSitesResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void ListSitesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.ListSitesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sites_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSitesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.site.v202211.Site sites = 1[json_name = "sites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSitesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.ListSitesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.Site sites = 1[json_name = "sites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sites(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.ListSitesResponse)
  return target;
}

size_t ListSitesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.ListSitesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.Site sites = 1[json_name = "sites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_sites_size();
  for (const auto& msg : this->sites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSitesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.ListSitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSitesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSitesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.ListSitesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.ListSitesResponse)
    MergeFrom(*source);
  }
}

void ListSitesResponse::MergeFrom(const ListSitesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.ListSitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sites_.MergeFrom(from.sites_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListSitesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.ListSitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSitesResponse::CopyFrom(const ListSitesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.ListSitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSitesResponse::IsInitialized() const {
  return true;
}

void ListSitesResponse::InternalSwap(ListSitesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sites_.InternalSwap(&other->sites_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSitesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSiteRequest::InitAsDefaultInstance() {
}
class GetSiteRequest::_Internal {
 public:
};

GetSiteRequest::GetSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.GetSiteRequest)
}
GetSiteRequest::GetSiteRequest(const GetSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.GetSiteRequest)
}

void GetSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSiteRequest::~GetSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.GetSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSiteRequest::ArenaDtor(void* object) {
  GetSiteRequest* _this = reinterpret_cast< GetSiteRequest* >(object);
  (void)_this;
}
void GetSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSiteRequest& GetSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void GetSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.GetSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.GetSiteRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.GetSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.GetSiteRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.GetSiteRequest)
  return target;
}

size_t GetSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.GetSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.GetSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.GetSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.GetSiteRequest)
    MergeFrom(*source);
  }
}

void GetSiteRequest::MergeFrom(const GetSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.GetSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.GetSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSiteRequest::CopyFrom(const GetSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.GetSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSiteRequest::IsInitialized() const {
  return true;
}

void GetSiteRequest::InternalSwap(GetSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSiteResponse::InitAsDefaultInstance() {
  ::kentik::site::v202211::_GetSiteResponse_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202211::Site*>(
      ::kentik::site::v202211::Site::internal_default_instance());
}
class GetSiteResponse::_Internal {
 public:
  static const ::kentik::site::v202211::Site& site(const GetSiteResponse* msg);
};

const ::kentik::site::v202211::Site&
GetSiteResponse::_Internal::site(const GetSiteResponse* msg) {
  return *msg->site_;
}
GetSiteResponse::GetSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.GetSiteResponse)
}
GetSiteResponse::GetSiteResponse(const GetSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202211::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.GetSiteResponse)
}

void GetSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_ = nullptr;
}

GetSiteResponse::~GetSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.GetSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void GetSiteResponse::ArenaDtor(void* object) {
  GetSiteResponse* _this = reinterpret_cast< GetSiteResponse* >(object);
  (void)_this;
}
void GetSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSiteResponse& GetSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void GetSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.GetSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.GetSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.GetSiteResponse)
  return target;
}

size_t GetSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.GetSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.GetSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.GetSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.GetSiteResponse)
    MergeFrom(*source);
  }
}

void GetSiteResponse::MergeFrom(const GetSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.GetSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202211::Site::MergeFrom(from._internal_site());
  }
}

void GetSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.GetSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSiteResponse::CopyFrom(const GetSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.GetSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSiteResponse::IsInitialized() const {
  return true;
}

void GetSiteResponse::InternalSwap(GetSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSiteRequest::InitAsDefaultInstance() {
  ::kentik::site::v202211::_CreateSiteRequest_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202211::Site*>(
      ::kentik::site::v202211::Site::internal_default_instance());
}
class CreateSiteRequest::_Internal {
 public:
  static const ::kentik::site::v202211::Site& site(const CreateSiteRequest* msg);
};

const ::kentik::site::v202211::Site&
CreateSiteRequest::_Internal::site(const CreateSiteRequest* msg) {
  return *msg->site_;
}
CreateSiteRequest::CreateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.CreateSiteRequest)
}
CreateSiteRequest::CreateSiteRequest(const CreateSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202211::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.CreateSiteRequest)
}

void CreateSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_ = nullptr;
}

CreateSiteRequest::~CreateSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.CreateSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void CreateSiteRequest::ArenaDtor(void* object) {
  CreateSiteRequest* _this = reinterpret_cast< CreateSiteRequest* >(object);
  (void)_this;
}
void CreateSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSiteRequest& CreateSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void CreateSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.CreateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.CreateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.CreateSiteRequest)
  return target;
}

size_t CreateSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.CreateSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.CreateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.CreateSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.CreateSiteRequest)
    MergeFrom(*source);
  }
}

void CreateSiteRequest::MergeFrom(const CreateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.CreateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202211::Site::MergeFrom(from._internal_site());
  }
}

void CreateSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.CreateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSiteRequest::CopyFrom(const CreateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.CreateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSiteRequest::IsInitialized() const {
  return true;
}

void CreateSiteRequest::InternalSwap(CreateSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSiteResponse::InitAsDefaultInstance() {
  ::kentik::site::v202211::_CreateSiteResponse_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202211::Site*>(
      ::kentik::site::v202211::Site::internal_default_instance());
}
class CreateSiteResponse::_Internal {
 public:
  static const ::kentik::site::v202211::Site& site(const CreateSiteResponse* msg);
};

const ::kentik::site::v202211::Site&
CreateSiteResponse::_Internal::site(const CreateSiteResponse* msg) {
  return *msg->site_;
}
CreateSiteResponse::CreateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.CreateSiteResponse)
}
CreateSiteResponse::CreateSiteResponse(const CreateSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202211::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.CreateSiteResponse)
}

void CreateSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_ = nullptr;
}

CreateSiteResponse::~CreateSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.CreateSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void CreateSiteResponse::ArenaDtor(void* object) {
  CreateSiteResponse* _this = reinterpret_cast< CreateSiteResponse* >(object);
  (void)_this;
}
void CreateSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSiteResponse& CreateSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void CreateSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.CreateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.CreateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.CreateSiteResponse)
  return target;
}

size_t CreateSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.CreateSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.CreateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.CreateSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.CreateSiteResponse)
    MergeFrom(*source);
  }
}

void CreateSiteResponse::MergeFrom(const CreateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.CreateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202211::Site::MergeFrom(from._internal_site());
  }
}

void CreateSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.CreateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSiteResponse::CopyFrom(const CreateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.CreateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSiteResponse::IsInitialized() const {
  return true;
}

void CreateSiteResponse::InternalSwap(CreateSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSiteRequest::InitAsDefaultInstance() {
  ::kentik::site::v202211::_UpdateSiteRequest_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202211::Site*>(
      ::kentik::site::v202211::Site::internal_default_instance());
}
class UpdateSiteRequest::_Internal {
 public:
  static const ::kentik::site::v202211::Site& site(const UpdateSiteRequest* msg);
};

const ::kentik::site::v202211::Site&
UpdateSiteRequest::_Internal::site(const UpdateSiteRequest* msg) {
  return *msg->site_;
}
UpdateSiteRequest::UpdateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.UpdateSiteRequest)
}
UpdateSiteRequest::UpdateSiteRequest(const UpdateSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202211::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.UpdateSiteRequest)
}

void UpdateSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_ = nullptr;
}

UpdateSiteRequest::~UpdateSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.UpdateSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void UpdateSiteRequest::ArenaDtor(void* object) {
  UpdateSiteRequest* _this = reinterpret_cast< UpdateSiteRequest* >(object);
  (void)_this;
}
void UpdateSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSiteRequest& UpdateSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void UpdateSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.UpdateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.UpdateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.UpdateSiteRequest)
  return target;
}

size_t UpdateSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.UpdateSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.UpdateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.UpdateSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.UpdateSiteRequest)
    MergeFrom(*source);
  }
}

void UpdateSiteRequest::MergeFrom(const UpdateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.UpdateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202211::Site::MergeFrom(from._internal_site());
  }
}

void UpdateSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.UpdateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSiteRequest::CopyFrom(const UpdateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.UpdateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSiteRequest::IsInitialized() const {
  return true;
}

void UpdateSiteRequest::InternalSwap(UpdateSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSiteResponse::InitAsDefaultInstance() {
  ::kentik::site::v202211::_UpdateSiteResponse_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202211::Site*>(
      ::kentik::site::v202211::Site::internal_default_instance());
}
class UpdateSiteResponse::_Internal {
 public:
  static const ::kentik::site::v202211::Site& site(const UpdateSiteResponse* msg);
};

const ::kentik::site::v202211::Site&
UpdateSiteResponse::_Internal::site(const UpdateSiteResponse* msg) {
  return *msg->site_;
}
UpdateSiteResponse::UpdateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.UpdateSiteResponse)
}
UpdateSiteResponse::UpdateSiteResponse(const UpdateSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202211::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.UpdateSiteResponse)
}

void UpdateSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_ = nullptr;
}

UpdateSiteResponse::~UpdateSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.UpdateSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void UpdateSiteResponse::ArenaDtor(void* object) {
  UpdateSiteResponse* _this = reinterpret_cast< UpdateSiteResponse* >(object);
  (void)_this;
}
void UpdateSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSiteResponse& UpdateSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void UpdateSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.UpdateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.UpdateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.UpdateSiteResponse)
  return target;
}

size_t UpdateSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.UpdateSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.UpdateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.UpdateSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.UpdateSiteResponse)
    MergeFrom(*source);
  }
}

void UpdateSiteResponse::MergeFrom(const UpdateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.UpdateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202211::Site::MergeFrom(from._internal_site());
  }
}

void UpdateSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.UpdateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSiteResponse::CopyFrom(const UpdateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.UpdateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSiteResponse::IsInitialized() const {
  return true;
}

void UpdateSiteResponse::InternalSwap(UpdateSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSiteRequest::InitAsDefaultInstance() {
}
class DeleteSiteRequest::_Internal {
 public:
};

DeleteSiteRequest::DeleteSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.DeleteSiteRequest)
}
DeleteSiteRequest::DeleteSiteRequest(const DeleteSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.DeleteSiteRequest)
}

void DeleteSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSiteRequest::~DeleteSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.DeleteSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSiteRequest::ArenaDtor(void* object) {
  DeleteSiteRequest* _this = reinterpret_cast< DeleteSiteRequest* >(object);
  (void)_this;
}
void DeleteSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSiteRequest& DeleteSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSiteRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void DeleteSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.DeleteSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.DeleteSiteRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.DeleteSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.DeleteSiteRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.DeleteSiteRequest)
  return target;
}

size_t DeleteSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.DeleteSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.DeleteSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.DeleteSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.DeleteSiteRequest)
    MergeFrom(*source);
  }
}

void DeleteSiteRequest::MergeFrom(const DeleteSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.DeleteSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.DeleteSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSiteRequest::CopyFrom(const DeleteSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.DeleteSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSiteRequest::IsInitialized() const {
  return true;
}

void DeleteSiteRequest::InternalSwap(DeleteSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSiteResponse::InitAsDefaultInstance() {
}
class DeleteSiteResponse::_Internal {
 public:
};

DeleteSiteResponse::DeleteSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.DeleteSiteResponse)
}
DeleteSiteResponse::DeleteSiteResponse(const DeleteSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.DeleteSiteResponse)
}

void DeleteSiteResponse::SharedCtor() {
}

DeleteSiteResponse::~DeleteSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.DeleteSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteSiteResponse::ArenaDtor(void* object) {
  DeleteSiteResponse* _this = reinterpret_cast< DeleteSiteResponse* >(object);
  (void)_this;
}
void DeleteSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSiteResponse& DeleteSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSiteResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void DeleteSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.DeleteSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.DeleteSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.DeleteSiteResponse)
  return target;
}

size_t DeleteSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.DeleteSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.DeleteSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.DeleteSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.DeleteSiteResponse)
    MergeFrom(*source);
  }
}

void DeleteSiteResponse::MergeFrom(const DeleteSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.DeleteSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.DeleteSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSiteResponse::CopyFrom(const DeleteSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.DeleteSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSiteResponse::IsInitialized() const {
  return true;
}

void DeleteSiteResponse::InternalSwap(DeleteSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SiteMarket::InitAsDefaultInstance() {
  ::kentik::site::v202211::_SiteMarket_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::site::v202211::_SiteMarket_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SiteMarket::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const SiteMarket* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const SiteMarket* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SiteMarket::_Internal::cdate(const SiteMarket* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SiteMarket::_Internal::edate(const SiteMarket* msg) {
  return *msg->edate_;
}
void SiteMarket::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void SiteMarket::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
SiteMarket::SiteMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.SiteMarket)
}
SiteMarket::SiteMarket(const SiteMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  number_of_sites_ = from.number_of_sites_;
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.SiteMarket)
}

void SiteMarket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_sites_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(number_of_sites_));
}

SiteMarket::~SiteMarket() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.SiteMarket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SiteMarket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
}

void SiteMarket::ArenaDtor(void* object) {
  SiteMarket* _this = reinterpret_cast< SiteMarket* >(object);
  (void)_this;
}
void SiteMarket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteMarket& SiteMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteMarket_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void SiteMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.SiteMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  number_of_sites_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.SiteMarket.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.SiteMarket.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.SiteMarket.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_sites = 4[json_name = "numberOfSites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_of_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteMarket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.SiteMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.SiteMarket.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.SiteMarket.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.SiteMarket.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // uint32 number_of_sites = 4[json_name = "numberOfSites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->number_of_sites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number_of_sites(), target);
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::edate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.SiteMarket)
  return target;
}

size_t SiteMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.SiteMarket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // uint32 number_of_sites = 4[json_name = "numberOfSites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->number_of_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_sites());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.SiteMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiteMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.SiteMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.SiteMarket)
    MergeFrom(*source);
  }
}

void SiteMarket::MergeFrom(const SiteMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.SiteMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.number_of_sites() != 0) {
    _internal_set_number_of_sites(from._internal_number_of_sites());
  }
}

void SiteMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.SiteMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteMarket::CopyFrom(const SiteMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.SiteMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteMarket::IsInitialized() const {
  return true;
}

void SiteMarket::InternalSwap(SiteMarket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteMarket, number_of_sites_)
      + sizeof(SiteMarket::number_of_sites_)
      - PROTOBUF_FIELD_OFFSET(SiteMarket, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSiteMarketsRequest::InitAsDefaultInstance() {
}
class ListSiteMarketsRequest::_Internal {
 public:
};

ListSiteMarketsRequest::ListSiteMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.ListSiteMarketsRequest)
}
ListSiteMarketsRequest::ListSiteMarketsRequest(const ListSiteMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.ListSiteMarketsRequest)
}

void ListSiteMarketsRequest::SharedCtor() {
}

ListSiteMarketsRequest::~ListSiteMarketsRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.ListSiteMarketsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSiteMarketsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSiteMarketsRequest::ArenaDtor(void* object) {
  ListSiteMarketsRequest* _this = reinterpret_cast< ListSiteMarketsRequest* >(object);
  (void)_this;
}
void ListSiteMarketsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSiteMarketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSiteMarketsRequest& ListSiteMarketsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSiteMarketsRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void ListSiteMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.ListSiteMarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSiteMarketsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSiteMarketsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.ListSiteMarketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.ListSiteMarketsRequest)
  return target;
}

size_t ListSiteMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.ListSiteMarketsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSiteMarketsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.ListSiteMarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSiteMarketsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSiteMarketsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.ListSiteMarketsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.ListSiteMarketsRequest)
    MergeFrom(*source);
  }
}

void ListSiteMarketsRequest::MergeFrom(const ListSiteMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.ListSiteMarketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListSiteMarketsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.ListSiteMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSiteMarketsRequest::CopyFrom(const ListSiteMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.ListSiteMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSiteMarketsRequest::IsInitialized() const {
  return true;
}

void ListSiteMarketsRequest::InternalSwap(ListSiteMarketsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSiteMarketsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSiteMarketsResponse::InitAsDefaultInstance() {
}
class ListSiteMarketsResponse::_Internal {
 public:
};

ListSiteMarketsResponse::ListSiteMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  site_markets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.ListSiteMarketsResponse)
}
ListSiteMarketsResponse::ListSiteMarketsResponse(const ListSiteMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      site_markets_(from.site_markets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.ListSiteMarketsResponse)
}

void ListSiteMarketsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSiteMarketsResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  invalid_count_ = 0u;
}

ListSiteMarketsResponse::~ListSiteMarketsResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.ListSiteMarketsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSiteMarketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSiteMarketsResponse::ArenaDtor(void* object) {
  ListSiteMarketsResponse* _this = reinterpret_cast< ListSiteMarketsResponse* >(object);
  (void)_this;
}
void ListSiteMarketsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSiteMarketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSiteMarketsResponse& ListSiteMarketsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSiteMarketsResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void ListSiteMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.ListSiteMarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_markets_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSiteMarketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.site.v202211.SiteMarket site_markets = 1[json_name = "siteMarkets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_site_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSiteMarketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.ListSiteMarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.SiteMarket site_markets = 1[json_name = "siteMarkets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_site_markets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_site_markets(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.ListSiteMarketsResponse)
  return target;
}

size_t ListSiteMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.ListSiteMarketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202211.SiteMarket site_markets = 1[json_name = "siteMarkets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_site_markets_size();
  for (const auto& msg : this->site_markets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSiteMarketsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.ListSiteMarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSiteMarketsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSiteMarketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.ListSiteMarketsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.ListSiteMarketsResponse)
    MergeFrom(*source);
  }
}

void ListSiteMarketsResponse::MergeFrom(const ListSiteMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.ListSiteMarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_markets_.MergeFrom(from.site_markets_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListSiteMarketsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.ListSiteMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSiteMarketsResponse::CopyFrom(const ListSiteMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.ListSiteMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSiteMarketsResponse::IsInitialized() const {
  return true;
}

void ListSiteMarketsResponse::InternalSwap(ListSiteMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  site_markets_.InternalSwap(&other->site_markets_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSiteMarketsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSiteMarketRequest::InitAsDefaultInstance() {
}
class GetSiteMarketRequest::_Internal {
 public:
};

GetSiteMarketRequest::GetSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.GetSiteMarketRequest)
}
GetSiteMarketRequest::GetSiteMarketRequest(const GetSiteMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.GetSiteMarketRequest)
}

void GetSiteMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSiteMarketRequest::~GetSiteMarketRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.GetSiteMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSiteMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSiteMarketRequest::ArenaDtor(void* object) {
  GetSiteMarketRequest* _this = reinterpret_cast< GetSiteMarketRequest* >(object);
  (void)_this;
}
void GetSiteMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSiteMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSiteMarketRequest& GetSiteMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void GetSiteMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.GetSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSiteMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.GetSiteMarketRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSiteMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.GetSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.GetSiteMarketRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.GetSiteMarketRequest)
  return target;
}

size_t GetSiteMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.GetSiteMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSiteMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.GetSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSiteMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSiteMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.GetSiteMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.GetSiteMarketRequest)
    MergeFrom(*source);
  }
}

void GetSiteMarketRequest::MergeFrom(const GetSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.GetSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetSiteMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.GetSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSiteMarketRequest::CopyFrom(const GetSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.GetSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSiteMarketRequest::IsInitialized() const {
  return true;
}

void GetSiteMarketRequest::InternalSwap(GetSiteMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSiteMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSiteMarketResponse::InitAsDefaultInstance() {
  ::kentik::site::v202211::_GetSiteMarketResponse_default_instance_._instance.get_mutable()->site_market_ = const_cast< ::kentik::site::v202211::SiteMarket*>(
      ::kentik::site::v202211::SiteMarket::internal_default_instance());
}
class GetSiteMarketResponse::_Internal {
 public:
  static const ::kentik::site::v202211::SiteMarket& site_market(const GetSiteMarketResponse* msg);
};

const ::kentik::site::v202211::SiteMarket&
GetSiteMarketResponse::_Internal::site_market(const GetSiteMarketResponse* msg) {
  return *msg->site_market_;
}
GetSiteMarketResponse::GetSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.GetSiteMarketResponse)
}
GetSiteMarketResponse::GetSiteMarketResponse(const GetSiteMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_market()) {
    site_market_ = new ::kentik::site::v202211::SiteMarket(*from.site_market_);
  } else {
    site_market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.GetSiteMarketResponse)
}

void GetSiteMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_market_ = nullptr;
}

GetSiteMarketResponse::~GetSiteMarketResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.GetSiteMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSiteMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_market_;
}

void GetSiteMarketResponse::ArenaDtor(void* object) {
  GetSiteMarketResponse* _this = reinterpret_cast< GetSiteMarketResponse* >(object);
  (void)_this;
}
void GetSiteMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSiteMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSiteMarketResponse& GetSiteMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void GetSiteMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.GetSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSiteMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSiteMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.GetSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site_market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.GetSiteMarketResponse)
  return target;
}

size_t GetSiteMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.GetSiteMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSiteMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.GetSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSiteMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSiteMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.GetSiteMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.GetSiteMarketResponse)
    MergeFrom(*source);
  }
}

void GetSiteMarketResponse::MergeFrom(const GetSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.GetSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_market()) {
    _internal_mutable_site_market()->::kentik::site::v202211::SiteMarket::MergeFrom(from._internal_site_market());
  }
}

void GetSiteMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.GetSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSiteMarketResponse::CopyFrom(const GetSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.GetSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSiteMarketResponse::IsInitialized() const {
  return true;
}

void GetSiteMarketResponse::InternalSwap(GetSiteMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_market_, other->site_market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSiteMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSiteMarketRequest::InitAsDefaultInstance() {
  ::kentik::site::v202211::_CreateSiteMarketRequest_default_instance_._instance.get_mutable()->site_market_ = const_cast< ::kentik::site::v202211::SiteMarket*>(
      ::kentik::site::v202211::SiteMarket::internal_default_instance());
}
class CreateSiteMarketRequest::_Internal {
 public:
  static const ::kentik::site::v202211::SiteMarket& site_market(const CreateSiteMarketRequest* msg);
};

const ::kentik::site::v202211::SiteMarket&
CreateSiteMarketRequest::_Internal::site_market(const CreateSiteMarketRequest* msg) {
  return *msg->site_market_;
}
CreateSiteMarketRequest::CreateSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.CreateSiteMarketRequest)
}
CreateSiteMarketRequest::CreateSiteMarketRequest(const CreateSiteMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_market()) {
    site_market_ = new ::kentik::site::v202211::SiteMarket(*from.site_market_);
  } else {
    site_market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.CreateSiteMarketRequest)
}

void CreateSiteMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_market_ = nullptr;
}

CreateSiteMarketRequest::~CreateSiteMarketRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.CreateSiteMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSiteMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_market_;
}

void CreateSiteMarketRequest::ArenaDtor(void* object) {
  CreateSiteMarketRequest* _this = reinterpret_cast< CreateSiteMarketRequest* >(object);
  (void)_this;
}
void CreateSiteMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSiteMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSiteMarketRequest& CreateSiteMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void CreateSiteMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.CreateSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSiteMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSiteMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.CreateSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site_market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.CreateSiteMarketRequest)
  return target;
}

size_t CreateSiteMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.CreateSiteMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSiteMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.CreateSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSiteMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSiteMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.CreateSiteMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.CreateSiteMarketRequest)
    MergeFrom(*source);
  }
}

void CreateSiteMarketRequest::MergeFrom(const CreateSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.CreateSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_market()) {
    _internal_mutable_site_market()->::kentik::site::v202211::SiteMarket::MergeFrom(from._internal_site_market());
  }
}

void CreateSiteMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.CreateSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSiteMarketRequest::CopyFrom(const CreateSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.CreateSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSiteMarketRequest::IsInitialized() const {
  return true;
}

void CreateSiteMarketRequest::InternalSwap(CreateSiteMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_market_, other->site_market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSiteMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSiteMarketResponse::InitAsDefaultInstance() {
  ::kentik::site::v202211::_CreateSiteMarketResponse_default_instance_._instance.get_mutable()->site_market_ = const_cast< ::kentik::site::v202211::SiteMarket*>(
      ::kentik::site::v202211::SiteMarket::internal_default_instance());
}
class CreateSiteMarketResponse::_Internal {
 public:
  static const ::kentik::site::v202211::SiteMarket& site_market(const CreateSiteMarketResponse* msg);
};

const ::kentik::site::v202211::SiteMarket&
CreateSiteMarketResponse::_Internal::site_market(const CreateSiteMarketResponse* msg) {
  return *msg->site_market_;
}
CreateSiteMarketResponse::CreateSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.CreateSiteMarketResponse)
}
CreateSiteMarketResponse::CreateSiteMarketResponse(const CreateSiteMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_market()) {
    site_market_ = new ::kentik::site::v202211::SiteMarket(*from.site_market_);
  } else {
    site_market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.CreateSiteMarketResponse)
}

void CreateSiteMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_market_ = nullptr;
}

CreateSiteMarketResponse::~CreateSiteMarketResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.CreateSiteMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSiteMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_market_;
}

void CreateSiteMarketResponse::ArenaDtor(void* object) {
  CreateSiteMarketResponse* _this = reinterpret_cast< CreateSiteMarketResponse* >(object);
  (void)_this;
}
void CreateSiteMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSiteMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSiteMarketResponse& CreateSiteMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void CreateSiteMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.CreateSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSiteMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSiteMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.CreateSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site_market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.CreateSiteMarketResponse)
  return target;
}

size_t CreateSiteMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.CreateSiteMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSiteMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.CreateSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSiteMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSiteMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.CreateSiteMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.CreateSiteMarketResponse)
    MergeFrom(*source);
  }
}

void CreateSiteMarketResponse::MergeFrom(const CreateSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.CreateSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_market()) {
    _internal_mutable_site_market()->::kentik::site::v202211::SiteMarket::MergeFrom(from._internal_site_market());
  }
}

void CreateSiteMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.CreateSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSiteMarketResponse::CopyFrom(const CreateSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.CreateSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSiteMarketResponse::IsInitialized() const {
  return true;
}

void CreateSiteMarketResponse::InternalSwap(CreateSiteMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_market_, other->site_market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSiteMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSiteMarketRequest::InitAsDefaultInstance() {
  ::kentik::site::v202211::_UpdateSiteMarketRequest_default_instance_._instance.get_mutable()->site_market_ = const_cast< ::kentik::site::v202211::SiteMarket*>(
      ::kentik::site::v202211::SiteMarket::internal_default_instance());
}
class UpdateSiteMarketRequest::_Internal {
 public:
  static const ::kentik::site::v202211::SiteMarket& site_market(const UpdateSiteMarketRequest* msg);
};

const ::kentik::site::v202211::SiteMarket&
UpdateSiteMarketRequest::_Internal::site_market(const UpdateSiteMarketRequest* msg) {
  return *msg->site_market_;
}
UpdateSiteMarketRequest::UpdateSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.UpdateSiteMarketRequest)
}
UpdateSiteMarketRequest::UpdateSiteMarketRequest(const UpdateSiteMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_market()) {
    site_market_ = new ::kentik::site::v202211::SiteMarket(*from.site_market_);
  } else {
    site_market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.UpdateSiteMarketRequest)
}

void UpdateSiteMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_market_ = nullptr;
}

UpdateSiteMarketRequest::~UpdateSiteMarketRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.UpdateSiteMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateSiteMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_market_;
}

void UpdateSiteMarketRequest::ArenaDtor(void* object) {
  UpdateSiteMarketRequest* _this = reinterpret_cast< UpdateSiteMarketRequest* >(object);
  (void)_this;
}
void UpdateSiteMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSiteMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSiteMarketRequest& UpdateSiteMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void UpdateSiteMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.UpdateSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSiteMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSiteMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.UpdateSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site_market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.UpdateSiteMarketRequest)
  return target;
}

size_t UpdateSiteMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.UpdateSiteMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSiteMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.UpdateSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSiteMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSiteMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.UpdateSiteMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.UpdateSiteMarketRequest)
    MergeFrom(*source);
  }
}

void UpdateSiteMarketRequest::MergeFrom(const UpdateSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.UpdateSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_market()) {
    _internal_mutable_site_market()->::kentik::site::v202211::SiteMarket::MergeFrom(from._internal_site_market());
  }
}

void UpdateSiteMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.UpdateSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSiteMarketRequest::CopyFrom(const UpdateSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.UpdateSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSiteMarketRequest::IsInitialized() const {
  return true;
}

void UpdateSiteMarketRequest::InternalSwap(UpdateSiteMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_market_, other->site_market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSiteMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSiteMarketResponse::InitAsDefaultInstance() {
  ::kentik::site::v202211::_UpdateSiteMarketResponse_default_instance_._instance.get_mutable()->site_market_ = const_cast< ::kentik::site::v202211::SiteMarket*>(
      ::kentik::site::v202211::SiteMarket::internal_default_instance());
}
class UpdateSiteMarketResponse::_Internal {
 public:
  static const ::kentik::site::v202211::SiteMarket& site_market(const UpdateSiteMarketResponse* msg);
};

const ::kentik::site::v202211::SiteMarket&
UpdateSiteMarketResponse::_Internal::site_market(const UpdateSiteMarketResponse* msg) {
  return *msg->site_market_;
}
UpdateSiteMarketResponse::UpdateSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.UpdateSiteMarketResponse)
}
UpdateSiteMarketResponse::UpdateSiteMarketResponse(const UpdateSiteMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_market()) {
    site_market_ = new ::kentik::site::v202211::SiteMarket(*from.site_market_);
  } else {
    site_market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.UpdateSiteMarketResponse)
}

void UpdateSiteMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  site_market_ = nullptr;
}

UpdateSiteMarketResponse::~UpdateSiteMarketResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.UpdateSiteMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateSiteMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_market_;
}

void UpdateSiteMarketResponse::ArenaDtor(void* object) {
  UpdateSiteMarketResponse* _this = reinterpret_cast< UpdateSiteMarketResponse* >(object);
  (void)_this;
}
void UpdateSiteMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSiteMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSiteMarketResponse& UpdateSiteMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void UpdateSiteMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.UpdateSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSiteMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSiteMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.UpdateSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site_market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.UpdateSiteMarketResponse)
  return target;
}

size_t UpdateSiteMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.UpdateSiteMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_site_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSiteMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.UpdateSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSiteMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSiteMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.UpdateSiteMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.UpdateSiteMarketResponse)
    MergeFrom(*source);
  }
}

void UpdateSiteMarketResponse::MergeFrom(const UpdateSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.UpdateSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_market()) {
    _internal_mutable_site_market()->::kentik::site::v202211::SiteMarket::MergeFrom(from._internal_site_market());
  }
}

void UpdateSiteMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.UpdateSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSiteMarketResponse::CopyFrom(const UpdateSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.UpdateSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSiteMarketResponse::IsInitialized() const {
  return true;
}

void UpdateSiteMarketResponse::InternalSwap(UpdateSiteMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_market_, other->site_market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSiteMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSiteMarketRequest::InitAsDefaultInstance() {
}
class DeleteSiteMarketRequest::_Internal {
 public:
};

DeleteSiteMarketRequest::DeleteSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.DeleteSiteMarketRequest)
}
DeleteSiteMarketRequest::DeleteSiteMarketRequest(const DeleteSiteMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.DeleteSiteMarketRequest)
}

void DeleteSiteMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSiteMarketRequest::~DeleteSiteMarketRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.DeleteSiteMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSiteMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSiteMarketRequest::ArenaDtor(void* object) {
  DeleteSiteMarketRequest* _this = reinterpret_cast< DeleteSiteMarketRequest* >(object);
  (void)_this;
}
void DeleteSiteMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSiteMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSiteMarketRequest& DeleteSiteMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSiteMarketRequest_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void DeleteSiteMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.DeleteSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSiteMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202211.DeleteSiteMarketRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSiteMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.DeleteSiteMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202211.DeleteSiteMarketRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.DeleteSiteMarketRequest)
  return target;
}

size_t DeleteSiteMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.DeleteSiteMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSiteMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.DeleteSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSiteMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSiteMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.DeleteSiteMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.DeleteSiteMarketRequest)
    MergeFrom(*source);
  }
}

void DeleteSiteMarketRequest::MergeFrom(const DeleteSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.DeleteSiteMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteSiteMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.DeleteSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSiteMarketRequest::CopyFrom(const DeleteSiteMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.DeleteSiteMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSiteMarketRequest::IsInitialized() const {
  return true;
}

void DeleteSiteMarketRequest::InternalSwap(DeleteSiteMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSiteMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSiteMarketResponse::InitAsDefaultInstance() {
}
class DeleteSiteMarketResponse::_Internal {
 public:
};

DeleteSiteMarketResponse::DeleteSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202211.DeleteSiteMarketResponse)
}
DeleteSiteMarketResponse::DeleteSiteMarketResponse(const DeleteSiteMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202211.DeleteSiteMarketResponse)
}

void DeleteSiteMarketResponse::SharedCtor() {
}

DeleteSiteMarketResponse::~DeleteSiteMarketResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202211.DeleteSiteMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSiteMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteSiteMarketResponse::ArenaDtor(void* object) {
  DeleteSiteMarketResponse* _this = reinterpret_cast< DeleteSiteMarketResponse* >(object);
  (void)_this;
}
void DeleteSiteMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSiteMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSiteMarketResponse& DeleteSiteMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSiteMarketResponse_kentik_2fsite_2fv202211_2fsite_2eproto.base);
  return *internal_default_instance();
}


void DeleteSiteMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202211.DeleteSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSiteMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSiteMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202211.DeleteSiteMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202211.DeleteSiteMarketResponse)
  return target;
}

size_t DeleteSiteMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202211.DeleteSiteMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSiteMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202211.DeleteSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSiteMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSiteMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202211.DeleteSiteMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202211.DeleteSiteMarketResponse)
    MergeFrom(*source);
  }
}

void DeleteSiteMarketResponse::MergeFrom(const DeleteSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202211.DeleteSiteMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteSiteMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202211.DeleteSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSiteMarketResponse::CopyFrom(const DeleteSiteMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202211.DeleteSiteMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSiteMarketResponse::IsInitialized() const {
  return true;
}

void DeleteSiteMarketResponse::InternalSwap(DeleteSiteMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSiteMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202211
}  // namespace site
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::SiteIpAddressClassification* Arena::CreateMaybeMessage< ::kentik::site::v202211::SiteIpAddressClassification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::SiteIpAddressClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::Layer* Arena::CreateMaybeMessage< ::kentik::site::v202211::Layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::LayerSet* Arena::CreateMaybeMessage< ::kentik::site::v202211::LayerSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::LayerSet >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::PostalAddress* Arena::CreateMaybeMessage< ::kentik::site::v202211::PostalAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::PostalAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::Site* Arena::CreateMaybeMessage< ::kentik::site::v202211::Site >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::Site >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::ListSitesRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::ListSitesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::ListSitesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::ListSitesResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::ListSitesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::ListSitesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::GetSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::GetSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::GetSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::GetSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::GetSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::GetSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::CreateSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::CreateSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::CreateSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::CreateSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::CreateSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::CreateSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::UpdateSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::UpdateSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::UpdateSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::UpdateSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::UpdateSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::UpdateSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::DeleteSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::DeleteSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::DeleteSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::DeleteSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::DeleteSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::DeleteSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::SiteMarket* Arena::CreateMaybeMessage< ::kentik::site::v202211::SiteMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::SiteMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::ListSiteMarketsRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::ListSiteMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::ListSiteMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::ListSiteMarketsResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::ListSiteMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::ListSiteMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::GetSiteMarketRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::GetSiteMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::GetSiteMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::GetSiteMarketResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::GetSiteMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::GetSiteMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::CreateSiteMarketRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::CreateSiteMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::CreateSiteMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::CreateSiteMarketResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::CreateSiteMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::CreateSiteMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::UpdateSiteMarketRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::UpdateSiteMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::UpdateSiteMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::UpdateSiteMarketResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::UpdateSiteMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::UpdateSiteMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::DeleteSiteMarketRequest* Arena::CreateMaybeMessage< ::kentik::site::v202211::DeleteSiteMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::DeleteSiteMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202211::DeleteSiteMarketResponse* Arena::CreateMaybeMessage< ::kentik::site::v202211::DeleteSiteMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202211::DeleteSiteMarketResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
