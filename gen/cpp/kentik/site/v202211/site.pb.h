// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/site/v202211/site.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fsite_2fv202211_2fsite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fsite_2fv202211_2fsite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202012alpha1/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202211_2fsite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto;
namespace kentik {
namespace site {
namespace v202211 {
class CreateSiteMarketRequest;
class CreateSiteMarketRequestDefaultTypeInternal;
extern CreateSiteMarketRequestDefaultTypeInternal _CreateSiteMarketRequest_default_instance_;
class CreateSiteMarketResponse;
class CreateSiteMarketResponseDefaultTypeInternal;
extern CreateSiteMarketResponseDefaultTypeInternal _CreateSiteMarketResponse_default_instance_;
class CreateSiteRequest;
class CreateSiteRequestDefaultTypeInternal;
extern CreateSiteRequestDefaultTypeInternal _CreateSiteRequest_default_instance_;
class CreateSiteResponse;
class CreateSiteResponseDefaultTypeInternal;
extern CreateSiteResponseDefaultTypeInternal _CreateSiteResponse_default_instance_;
class DeleteSiteMarketRequest;
class DeleteSiteMarketRequestDefaultTypeInternal;
extern DeleteSiteMarketRequestDefaultTypeInternal _DeleteSiteMarketRequest_default_instance_;
class DeleteSiteMarketResponse;
class DeleteSiteMarketResponseDefaultTypeInternal;
extern DeleteSiteMarketResponseDefaultTypeInternal _DeleteSiteMarketResponse_default_instance_;
class DeleteSiteRequest;
class DeleteSiteRequestDefaultTypeInternal;
extern DeleteSiteRequestDefaultTypeInternal _DeleteSiteRequest_default_instance_;
class DeleteSiteResponse;
class DeleteSiteResponseDefaultTypeInternal;
extern DeleteSiteResponseDefaultTypeInternal _DeleteSiteResponse_default_instance_;
class GetSiteMarketRequest;
class GetSiteMarketRequestDefaultTypeInternal;
extern GetSiteMarketRequestDefaultTypeInternal _GetSiteMarketRequest_default_instance_;
class GetSiteMarketResponse;
class GetSiteMarketResponseDefaultTypeInternal;
extern GetSiteMarketResponseDefaultTypeInternal _GetSiteMarketResponse_default_instance_;
class GetSiteRequest;
class GetSiteRequestDefaultTypeInternal;
extern GetSiteRequestDefaultTypeInternal _GetSiteRequest_default_instance_;
class GetSiteResponse;
class GetSiteResponseDefaultTypeInternal;
extern GetSiteResponseDefaultTypeInternal _GetSiteResponse_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LayerSet;
class LayerSetDefaultTypeInternal;
extern LayerSetDefaultTypeInternal _LayerSet_default_instance_;
class ListSiteMarketsRequest;
class ListSiteMarketsRequestDefaultTypeInternal;
extern ListSiteMarketsRequestDefaultTypeInternal _ListSiteMarketsRequest_default_instance_;
class ListSiteMarketsResponse;
class ListSiteMarketsResponseDefaultTypeInternal;
extern ListSiteMarketsResponseDefaultTypeInternal _ListSiteMarketsResponse_default_instance_;
class ListSitesRequest;
class ListSitesRequestDefaultTypeInternal;
extern ListSitesRequestDefaultTypeInternal _ListSitesRequest_default_instance_;
class ListSitesResponse;
class ListSitesResponseDefaultTypeInternal;
extern ListSitesResponseDefaultTypeInternal _ListSitesResponse_default_instance_;
class PostalAddress;
class PostalAddressDefaultTypeInternal;
extern PostalAddressDefaultTypeInternal _PostalAddress_default_instance_;
class Site;
class SiteDefaultTypeInternal;
extern SiteDefaultTypeInternal _Site_default_instance_;
class SiteIpAddressClassification;
class SiteIpAddressClassificationDefaultTypeInternal;
extern SiteIpAddressClassificationDefaultTypeInternal _SiteIpAddressClassification_default_instance_;
class SiteMarket;
class SiteMarketDefaultTypeInternal;
extern SiteMarketDefaultTypeInternal _SiteMarket_default_instance_;
class UpdateSiteMarketRequest;
class UpdateSiteMarketRequestDefaultTypeInternal;
extern UpdateSiteMarketRequestDefaultTypeInternal _UpdateSiteMarketRequest_default_instance_;
class UpdateSiteMarketResponse;
class UpdateSiteMarketResponseDefaultTypeInternal;
extern UpdateSiteMarketResponseDefaultTypeInternal _UpdateSiteMarketResponse_default_instance_;
class UpdateSiteRequest;
class UpdateSiteRequestDefaultTypeInternal;
extern UpdateSiteRequestDefaultTypeInternal _UpdateSiteRequest_default_instance_;
class UpdateSiteResponse;
class UpdateSiteResponseDefaultTypeInternal;
extern UpdateSiteResponseDefaultTypeInternal _UpdateSiteResponse_default_instance_;
}  // namespace v202211
}  // namespace site
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::site::v202211::CreateSiteMarketRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::CreateSiteMarketRequest>(Arena*);
template<> ::kentik::site::v202211::CreateSiteMarketResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::CreateSiteMarketResponse>(Arena*);
template<> ::kentik::site::v202211::CreateSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::CreateSiteRequest>(Arena*);
template<> ::kentik::site::v202211::CreateSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::CreateSiteResponse>(Arena*);
template<> ::kentik::site::v202211::DeleteSiteMarketRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::DeleteSiteMarketRequest>(Arena*);
template<> ::kentik::site::v202211::DeleteSiteMarketResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::DeleteSiteMarketResponse>(Arena*);
template<> ::kentik::site::v202211::DeleteSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::DeleteSiteRequest>(Arena*);
template<> ::kentik::site::v202211::DeleteSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::DeleteSiteResponse>(Arena*);
template<> ::kentik::site::v202211::GetSiteMarketRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::GetSiteMarketRequest>(Arena*);
template<> ::kentik::site::v202211::GetSiteMarketResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::GetSiteMarketResponse>(Arena*);
template<> ::kentik::site::v202211::GetSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::GetSiteRequest>(Arena*);
template<> ::kentik::site::v202211::GetSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::GetSiteResponse>(Arena*);
template<> ::kentik::site::v202211::Layer* Arena::CreateMaybeMessage<::kentik::site::v202211::Layer>(Arena*);
template<> ::kentik::site::v202211::LayerSet* Arena::CreateMaybeMessage<::kentik::site::v202211::LayerSet>(Arena*);
template<> ::kentik::site::v202211::ListSiteMarketsRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::ListSiteMarketsRequest>(Arena*);
template<> ::kentik::site::v202211::ListSiteMarketsResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::ListSiteMarketsResponse>(Arena*);
template<> ::kentik::site::v202211::ListSitesRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::ListSitesRequest>(Arena*);
template<> ::kentik::site::v202211::ListSitesResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::ListSitesResponse>(Arena*);
template<> ::kentik::site::v202211::PostalAddress* Arena::CreateMaybeMessage<::kentik::site::v202211::PostalAddress>(Arena*);
template<> ::kentik::site::v202211::Site* Arena::CreateMaybeMessage<::kentik::site::v202211::Site>(Arena*);
template<> ::kentik::site::v202211::SiteIpAddressClassification* Arena::CreateMaybeMessage<::kentik::site::v202211::SiteIpAddressClassification>(Arena*);
template<> ::kentik::site::v202211::SiteMarket* Arena::CreateMaybeMessage<::kentik::site::v202211::SiteMarket>(Arena*);
template<> ::kentik::site::v202211::UpdateSiteMarketRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::UpdateSiteMarketRequest>(Arena*);
template<> ::kentik::site::v202211::UpdateSiteMarketResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::UpdateSiteMarketResponse>(Arena*);
template<> ::kentik::site::v202211::UpdateSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202211::UpdateSiteRequest>(Arena*);
template<> ::kentik::site::v202211::UpdateSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202211::UpdateSiteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace site {
namespace v202211 {

enum SiteType : int {
  SITE_TYPE_UNSPECIFIED = 0,
  SITE_TYPE_DATA_CENTER = 1,
  SITE_TYPE_CLOUD = 2,
  SITE_TYPE_BRANCH = 3,
  SITE_TYPE_CONNECTIVITY = 4,
  SITE_TYPE_CUSTOMER = 5,
  SITE_TYPE_OTHER = 6,
  SiteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SiteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SiteType_IsValid(int value);
constexpr SiteType SiteType_MIN = SITE_TYPE_UNSPECIFIED;
constexpr SiteType SiteType_MAX = SITE_TYPE_OTHER;
constexpr int SiteType_ARRAYSIZE = SiteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SiteType_descriptor();
template<typename T>
inline const std::string& SiteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SiteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SiteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SiteType_descriptor(), enum_t_value);
}
inline bool SiteType_Parse(
    const std::string& name, SiteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SiteType>(
    SiteType_descriptor(), name, value);
}
// ===================================================================

class SiteIpAddressClassification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.SiteIpAddressClassification) */ {
 public:
  inline SiteIpAddressClassification() : SiteIpAddressClassification(nullptr) {};
  virtual ~SiteIpAddressClassification();

  SiteIpAddressClassification(const SiteIpAddressClassification& from);
  SiteIpAddressClassification(SiteIpAddressClassification&& from) noexcept
    : SiteIpAddressClassification() {
    *this = ::std::move(from);
  }

  inline SiteIpAddressClassification& operator=(const SiteIpAddressClassification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteIpAddressClassification& operator=(SiteIpAddressClassification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiteIpAddressClassification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteIpAddressClassification* internal_default_instance() {
    return reinterpret_cast<const SiteIpAddressClassification*>(
               &_SiteIpAddressClassification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteIpAddressClassification& a, SiteIpAddressClassification& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteIpAddressClassification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteIpAddressClassification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteIpAddressClassification* New() const final {
    return CreateMaybeMessage<SiteIpAddressClassification>(nullptr);
  }

  SiteIpAddressClassification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteIpAddressClassification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiteIpAddressClassification& from);
  void MergeFrom(const SiteIpAddressClassification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteIpAddressClassification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.SiteIpAddressClassification";
  }
  protected:
  explicit SiteIpAddressClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfrastructureNetworksFieldNumber = 1,
    kUserAccessNetworksFieldNumber = 2,
    kOtherNetworksFieldNumber = 3,
  };
  // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int infrastructure_networks_size() const;
  private:
  int _internal_infrastructure_networks_size() const;
  public:
  void clear_infrastructure_networks();
  const std::string& infrastructure_networks(int index) const;
  std::string* mutable_infrastructure_networks(int index);
  void set_infrastructure_networks(int index, const std::string& value);
  void set_infrastructure_networks(int index, std::string&& value);
  void set_infrastructure_networks(int index, const char* value);
  void set_infrastructure_networks(int index, const char* value, size_t size);
  std::string* add_infrastructure_networks();
  void add_infrastructure_networks(const std::string& value);
  void add_infrastructure_networks(std::string&& value);
  void add_infrastructure_networks(const char* value);
  void add_infrastructure_networks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& infrastructure_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_infrastructure_networks();
  private:
  const std::string& _internal_infrastructure_networks(int index) const;
  std::string* _internal_add_infrastructure_networks();
  public:

  // repeated string user_access_networks = 2[json_name = "userAccessNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int user_access_networks_size() const;
  private:
  int _internal_user_access_networks_size() const;
  public:
  void clear_user_access_networks();
  const std::string& user_access_networks(int index) const;
  std::string* mutable_user_access_networks(int index);
  void set_user_access_networks(int index, const std::string& value);
  void set_user_access_networks(int index, std::string&& value);
  void set_user_access_networks(int index, const char* value);
  void set_user_access_networks(int index, const char* value, size_t size);
  std::string* add_user_access_networks();
  void add_user_access_networks(const std::string& value);
  void add_user_access_networks(std::string&& value);
  void add_user_access_networks(const char* value);
  void add_user_access_networks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_access_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_access_networks();
  private:
  const std::string& _internal_user_access_networks(int index) const;
  std::string* _internal_add_user_access_networks();
  public:

  // repeated string other_networks = 3[json_name = "otherNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int other_networks_size() const;
  private:
  int _internal_other_networks_size() const;
  public:
  void clear_other_networks();
  const std::string& other_networks(int index) const;
  std::string* mutable_other_networks(int index);
  void set_other_networks(int index, const std::string& value);
  void set_other_networks(int index, std::string&& value);
  void set_other_networks(int index, const char* value);
  void set_other_networks(int index, const char* value, size_t size);
  std::string* add_other_networks();
  void add_other_networks(const std::string& value);
  void add_other_networks(std::string&& value);
  void add_other_networks(const char* value);
  void add_other_networks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& other_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_other_networks();
  private:
  const std::string& _internal_other_networks(int index) const;
  std::string* _internal_add_other_networks();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.SiteIpAddressClassification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> infrastructure_networks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_access_networks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> other_networks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class Layer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.Layer) */ {
 public:
  inline Layer() : Layer(nullptr) {};
  virtual ~Layer();

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.Layer";
  }
  protected:
  explicit Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string device_ids = 2[json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int device_ids_size() const;
  private:
  int _internal_device_ids_size() const;
  public:
  void clear_device_ids();
  const std::string& device_ids(int index) const;
  std::string* mutable_device_ids(int index);
  void set_device_ids(int index, const std::string& value);
  void set_device_ids(int index, std::string&& value);
  void set_device_ids(int index, const char* value);
  void set_device_ids(int index, const char* value, size_t size);
  std::string* add_device_ids();
  void add_device_ids(const std::string& value);
  void add_device_ids(std::string&& value);
  void add_device_ids(const char* value);
  void add_device_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_ids();
  private:
  const std::string& _internal_device_ids(int index) const;
  std::string* _internal_add_device_ids();
  public:

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class LayerSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.LayerSet) */ {
 public:
  inline LayerSet() : LayerSet(nullptr) {};
  virtual ~LayerSet();

  LayerSet(const LayerSet& from);
  LayerSet(LayerSet&& from) noexcept
    : LayerSet() {
    *this = ::std::move(from);
  }

  inline LayerSet& operator=(const LayerSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerSet& operator=(LayerSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayerSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerSet* internal_default_instance() {
    return reinterpret_cast<const LayerSet*>(
               &_LayerSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LayerSet& a, LayerSet& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerSet* New() const final {
    return CreateMaybeMessage<LayerSet>(nullptr);
  }

  LayerSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayerSet& from);
  void MergeFrom(const LayerSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.LayerSet";
  }
  protected:
  explicit LayerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .kentik.site.v202211.Layer layers = 1[json_name = "layers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::kentik::site::v202211::Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Layer >*
      mutable_layers();
  private:
  const ::kentik::site::v202211::Layer& _internal_layers(int index) const;
  ::kentik::site::v202211::Layer* _internal_add_layers();
  public:
  const ::kentik::site::v202211::Layer& layers(int index) const;
  ::kentik::site::v202211::Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Layer >&
      layers() const;

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.LayerSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Layer > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class PostalAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.PostalAddress) */ {
 public:
  inline PostalAddress() : PostalAddress(nullptr) {};
  virtual ~PostalAddress();

  PostalAddress(const PostalAddress& from);
  PostalAddress(PostalAddress&& from) noexcept
    : PostalAddress() {
    *this = ::std::move(from);
  }

  inline PostalAddress& operator=(const PostalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostalAddress& operator=(PostalAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostalAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostalAddress* internal_default_instance() {
    return reinterpret_cast<const PostalAddress*>(
               &_PostalAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostalAddress& a, PostalAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(PostalAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostalAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostalAddress* New() const final {
    return CreateMaybeMessage<PostalAddress>(nullptr);
  }

  PostalAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostalAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostalAddress& from);
  void MergeFrom(const PostalAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostalAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.PostalAddress";
  }
  protected:
  explicit PostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCityFieldNumber = 2,
    kRegionFieldNumber = 3,
    kPostalCodeFieldNumber = 4,
    kCountryFieldNumber = 5,
  };
  // string address = 1[json_name = "address", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string city = 2[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string region = 3[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region(
      std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string postal_code = 4[json_name = "postalCode", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_postal_code();
  const std::string& postal_code() const;
  void set_postal_code(const std::string& value);
  void set_postal_code(std::string&& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  std::string* mutable_postal_code();
  std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_postal_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_postal_code(
      std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string country = 5[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.PostalAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class Site PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.Site) */ {
 public:
  inline Site() : Site(nullptr) {};
  virtual ~Site();

  Site(const Site& from);
  Site(Site&& from) noexcept
    : Site() {
    *this = ::std::move(from);
  }

  inline Site& operator=(const Site& from) {
    CopyFrom(from);
    return *this;
  }
  inline Site& operator=(Site&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Site& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Site* internal_default_instance() {
    return reinterpret_cast<const Site*>(
               &_Site_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Site& a, Site& b) {
    a.Swap(&b);
  }
  inline void Swap(Site* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Site* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Site* New() const final {
    return CreateMaybeMessage<Site>(nullptr);
  }

  Site* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Site>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Site& from);
  void MergeFrom(const Site& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Site* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.Site";
  }
  protected:
  explicit Site(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchitectureFieldNumber = 9,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kSiteMarketFieldNumber = 10,
    kPostalAddressFieldNumber = 6,
    kAddressClassificationFieldNumber = 8,
    kLatFieldNumber = 4,
    kLonFieldNumber = 5,
    kTypeFieldNumber = 7,
  };
  // repeated .kentik.site.v202211.LayerSet architecture = 9[json_name = "architecture", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int architecture_size() const;
  private:
  int _internal_architecture_size() const;
  public:
  void clear_architecture();
  ::kentik::site::v202211::LayerSet* mutable_architecture(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::LayerSet >*
      mutable_architecture();
  private:
  const ::kentik::site::v202211::LayerSet& _internal_architecture(int index) const;
  ::kentik::site::v202211::LayerSet* _internal_add_architecture();
  public:
  const ::kentik::site::v202211::LayerSet& architecture(int index) const;
  ::kentik::site::v202211::LayerSet* add_architecture();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::LayerSet >&
      architecture() const;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2[json_name = "title", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string site_market = 10[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_site_market();
  const std::string& site_market() const;
  void set_site_market(const std::string& value);
  void set_site_market(std::string&& value);
  void set_site_market(const char* value);
  void set_site_market(const char* value, size_t size);
  std::string* mutable_site_market();
  std::string* release_site_market();
  void set_allocated_site_market(std::string* site_market);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_market();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_market(
      std::string* site_market);
  private:
  const std::string& _internal_site_market() const;
  void _internal_set_site_market(const std::string& value);
  std::string* _internal_mutable_site_market();
  public:

  // .kentik.site.v202211.PostalAddress postal_address = 6[json_name = "postalAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_postal_address() const;
  private:
  bool _internal_has_postal_address() const;
  public:
  void clear_postal_address();
  const ::kentik::site::v202211::PostalAddress& postal_address() const;
  ::kentik::site::v202211::PostalAddress* release_postal_address();
  ::kentik::site::v202211::PostalAddress* mutable_postal_address();
  void set_allocated_postal_address(::kentik::site::v202211::PostalAddress* postal_address);
  private:
  const ::kentik::site::v202211::PostalAddress& _internal_postal_address() const;
  ::kentik::site::v202211::PostalAddress* _internal_mutable_postal_address();
  public:
  void unsafe_arena_set_allocated_postal_address(
      ::kentik::site::v202211::PostalAddress* postal_address);
  ::kentik::site::v202211::PostalAddress* unsafe_arena_release_postal_address();

  // .kentik.site.v202211.SiteIpAddressClassification address_classification = 8[json_name = "addressClassification", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_address_classification() const;
  private:
  bool _internal_has_address_classification() const;
  public:
  void clear_address_classification();
  const ::kentik::site::v202211::SiteIpAddressClassification& address_classification() const;
  ::kentik::site::v202211::SiteIpAddressClassification* release_address_classification();
  ::kentik::site::v202211::SiteIpAddressClassification* mutable_address_classification();
  void set_allocated_address_classification(::kentik::site::v202211::SiteIpAddressClassification* address_classification);
  private:
  const ::kentik::site::v202211::SiteIpAddressClassification& _internal_address_classification() const;
  ::kentik::site::v202211::SiteIpAddressClassification* _internal_mutable_address_classification();
  public:
  void unsafe_arena_set_allocated_address_classification(
      ::kentik::site::v202211::SiteIpAddressClassification* address_classification);
  ::kentik::site::v202211::SiteIpAddressClassification* unsafe_arena_release_address_classification();

  // double lat = 4[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 5[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // .kentik.site.v202211.SiteType type = 7[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  ::kentik::site::v202211::SiteType type() const;
  void set_type(::kentik::site::v202211::SiteType value);
  private:
  ::kentik::site::v202211::SiteType _internal_type() const;
  void _internal_set_type(::kentik::site::v202211::SiteType value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.Site)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::LayerSet > architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_market_;
  ::kentik::site::v202211::PostalAddress* postal_address_;
  ::kentik::site::v202211::SiteIpAddressClassification* address_classification_;
  double lat_;
  double lon_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class ListSitesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.ListSitesRequest) */ {
 public:
  inline ListSitesRequest() : ListSitesRequest(nullptr) {};
  virtual ~ListSitesRequest();

  ListSitesRequest(const ListSitesRequest& from);
  ListSitesRequest(ListSitesRequest&& from) noexcept
    : ListSitesRequest() {
    *this = ::std::move(from);
  }

  inline ListSitesRequest& operator=(const ListSitesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSitesRequest& operator=(ListSitesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSitesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSitesRequest* internal_default_instance() {
    return reinterpret_cast<const ListSitesRequest*>(
               &_ListSitesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListSitesRequest& a, ListSitesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSitesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSitesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSitesRequest* New() const final {
    return CreateMaybeMessage<ListSitesRequest>(nullptr);
  }

  ListSitesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSitesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSitesRequest& from);
  void MergeFrom(const ListSitesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSitesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.ListSitesRequest";
  }
  protected:
  explicit ListSitesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.ListSitesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class ListSitesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.ListSitesResponse) */ {
 public:
  inline ListSitesResponse() : ListSitesResponse(nullptr) {};
  virtual ~ListSitesResponse();

  ListSitesResponse(const ListSitesResponse& from);
  ListSitesResponse(ListSitesResponse&& from) noexcept
    : ListSitesResponse() {
    *this = ::std::move(from);
  }

  inline ListSitesResponse& operator=(const ListSitesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSitesResponse& operator=(ListSitesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSitesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSitesResponse* internal_default_instance() {
    return reinterpret_cast<const ListSitesResponse*>(
               &_ListSitesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListSitesResponse& a, ListSitesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSitesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSitesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSitesResponse* New() const final {
    return CreateMaybeMessage<ListSitesResponse>(nullptr);
  }

  ListSitesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSitesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSitesResponse& from);
  void MergeFrom(const ListSitesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSitesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.ListSitesResponse";
  }
  protected:
  explicit ListSitesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSitesFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.site.v202211.Site sites = 1[json_name = "sites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int sites_size() const;
  private:
  int _internal_sites_size() const;
  public:
  void clear_sites();
  ::kentik::site::v202211::Site* mutable_sites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Site >*
      mutable_sites();
  private:
  const ::kentik::site::v202211::Site& _internal_sites(int index) const;
  ::kentik::site::v202211::Site* _internal_add_sites();
  public:
  const ::kentik::site::v202211::Site& sites(int index) const;
  ::kentik::site::v202211::Site* add_sites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Site >&
      sites() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.ListSitesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Site > sites_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class GetSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.GetSiteRequest) */ {
 public:
  inline GetSiteRequest() : GetSiteRequest(nullptr) {};
  virtual ~GetSiteRequest();

  GetSiteRequest(const GetSiteRequest& from);
  GetSiteRequest(GetSiteRequest&& from) noexcept
    : GetSiteRequest() {
    *this = ::std::move(from);
  }

  inline GetSiteRequest& operator=(const GetSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSiteRequest& operator=(GetSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSiteRequest* internal_default_instance() {
    return reinterpret_cast<const GetSiteRequest*>(
               &_GetSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetSiteRequest& a, GetSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSiteRequest* New() const final {
    return CreateMaybeMessage<GetSiteRequest>(nullptr);
  }

  GetSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSiteRequest& from);
  void MergeFrom(const GetSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.GetSiteRequest";
  }
  protected:
  explicit GetSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.GetSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class GetSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.GetSiteResponse) */ {
 public:
  inline GetSiteResponse() : GetSiteResponse(nullptr) {};
  virtual ~GetSiteResponse();

  GetSiteResponse(const GetSiteResponse& from);
  GetSiteResponse(GetSiteResponse&& from) noexcept
    : GetSiteResponse() {
    *this = ::std::move(from);
  }

  inline GetSiteResponse& operator=(const GetSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSiteResponse& operator=(GetSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSiteResponse* internal_default_instance() {
    return reinterpret_cast<const GetSiteResponse*>(
               &_GetSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetSiteResponse& a, GetSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSiteResponse* New() const final {
    return CreateMaybeMessage<GetSiteResponse>(nullptr);
  }

  GetSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSiteResponse& from);
  void MergeFrom(const GetSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.GetSiteResponse";
  }
  protected:
  explicit GetSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202211::Site& site() const;
  ::kentik::site::v202211::Site* release_site();
  ::kentik::site::v202211::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202211::Site* site);
  private:
  const ::kentik::site::v202211::Site& _internal_site() const;
  ::kentik::site::v202211::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202211::Site* site);
  ::kentik::site::v202211::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.GetSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class CreateSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.CreateSiteRequest) */ {
 public:
  inline CreateSiteRequest() : CreateSiteRequest(nullptr) {};
  virtual ~CreateSiteRequest();

  CreateSiteRequest(const CreateSiteRequest& from);
  CreateSiteRequest(CreateSiteRequest&& from) noexcept
    : CreateSiteRequest() {
    *this = ::std::move(from);
  }

  inline CreateSiteRequest& operator=(const CreateSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSiteRequest& operator=(CreateSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSiteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSiteRequest*>(
               &_CreateSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateSiteRequest& a, CreateSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSiteRequest* New() const final {
    return CreateMaybeMessage<CreateSiteRequest>(nullptr);
  }

  CreateSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSiteRequest& from);
  void MergeFrom(const CreateSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.CreateSiteRequest";
  }
  protected:
  explicit CreateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202211::Site& site() const;
  ::kentik::site::v202211::Site* release_site();
  ::kentik::site::v202211::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202211::Site* site);
  private:
  const ::kentik::site::v202211::Site& _internal_site() const;
  ::kentik::site::v202211::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202211::Site* site);
  ::kentik::site::v202211::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.CreateSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class CreateSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.CreateSiteResponse) */ {
 public:
  inline CreateSiteResponse() : CreateSiteResponse(nullptr) {};
  virtual ~CreateSiteResponse();

  CreateSiteResponse(const CreateSiteResponse& from);
  CreateSiteResponse(CreateSiteResponse&& from) noexcept
    : CreateSiteResponse() {
    *this = ::std::move(from);
  }

  inline CreateSiteResponse& operator=(const CreateSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSiteResponse& operator=(CreateSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSiteResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSiteResponse*>(
               &_CreateSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateSiteResponse& a, CreateSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSiteResponse* New() const final {
    return CreateMaybeMessage<CreateSiteResponse>(nullptr);
  }

  CreateSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSiteResponse& from);
  void MergeFrom(const CreateSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.CreateSiteResponse";
  }
  protected:
  explicit CreateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202211::Site& site() const;
  ::kentik::site::v202211::Site* release_site();
  ::kentik::site::v202211::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202211::Site* site);
  private:
  const ::kentik::site::v202211::Site& _internal_site() const;
  ::kentik::site::v202211::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202211::Site* site);
  ::kentik::site::v202211::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.CreateSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class UpdateSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.UpdateSiteRequest) */ {
 public:
  inline UpdateSiteRequest() : UpdateSiteRequest(nullptr) {};
  virtual ~UpdateSiteRequest();

  UpdateSiteRequest(const UpdateSiteRequest& from);
  UpdateSiteRequest(UpdateSiteRequest&& from) noexcept
    : UpdateSiteRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSiteRequest& operator=(const UpdateSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSiteRequest& operator=(UpdateSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSiteRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSiteRequest*>(
               &_UpdateSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateSiteRequest& a, UpdateSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSiteRequest* New() const final {
    return CreateMaybeMessage<UpdateSiteRequest>(nullptr);
  }

  UpdateSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSiteRequest& from);
  void MergeFrom(const UpdateSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.UpdateSiteRequest";
  }
  protected:
  explicit UpdateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202211::Site& site() const;
  ::kentik::site::v202211::Site* release_site();
  ::kentik::site::v202211::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202211::Site* site);
  private:
  const ::kentik::site::v202211::Site& _internal_site() const;
  ::kentik::site::v202211::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202211::Site* site);
  ::kentik::site::v202211::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.UpdateSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class UpdateSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.UpdateSiteResponse) */ {
 public:
  inline UpdateSiteResponse() : UpdateSiteResponse(nullptr) {};
  virtual ~UpdateSiteResponse();

  UpdateSiteResponse(const UpdateSiteResponse& from);
  UpdateSiteResponse(UpdateSiteResponse&& from) noexcept
    : UpdateSiteResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSiteResponse& operator=(const UpdateSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSiteResponse& operator=(UpdateSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSiteResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSiteResponse*>(
               &_UpdateSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateSiteResponse& a, UpdateSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSiteResponse* New() const final {
    return CreateMaybeMessage<UpdateSiteResponse>(nullptr);
  }

  UpdateSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSiteResponse& from);
  void MergeFrom(const UpdateSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.UpdateSiteResponse";
  }
  protected:
  explicit UpdateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202211::Site& site() const;
  ::kentik::site::v202211::Site* release_site();
  ::kentik::site::v202211::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202211::Site* site);
  private:
  const ::kentik::site::v202211::Site& _internal_site() const;
  ::kentik::site::v202211::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202211::Site* site);
  ::kentik::site::v202211::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.UpdateSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class DeleteSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.DeleteSiteRequest) */ {
 public:
  inline DeleteSiteRequest() : DeleteSiteRequest(nullptr) {};
  virtual ~DeleteSiteRequest();

  DeleteSiteRequest(const DeleteSiteRequest& from);
  DeleteSiteRequest(DeleteSiteRequest&& from) noexcept
    : DeleteSiteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSiteRequest& operator=(const DeleteSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSiteRequest& operator=(DeleteSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSiteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSiteRequest*>(
               &_DeleteSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteSiteRequest& a, DeleteSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSiteRequest* New() const final {
    return CreateMaybeMessage<DeleteSiteRequest>(nullptr);
  }

  DeleteSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSiteRequest& from);
  void MergeFrom(const DeleteSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.DeleteSiteRequest";
  }
  protected:
  explicit DeleteSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.DeleteSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class DeleteSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.DeleteSiteResponse) */ {
 public:
  inline DeleteSiteResponse() : DeleteSiteResponse(nullptr) {};
  virtual ~DeleteSiteResponse();

  DeleteSiteResponse(const DeleteSiteResponse& from);
  DeleteSiteResponse(DeleteSiteResponse&& from) noexcept
    : DeleteSiteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSiteResponse& operator=(const DeleteSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSiteResponse& operator=(DeleteSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSiteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSiteResponse*>(
               &_DeleteSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteSiteResponse& a, DeleteSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSiteResponse* New() const final {
    return CreateMaybeMessage<DeleteSiteResponse>(nullptr);
  }

  DeleteSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSiteResponse& from);
  void MergeFrom(const DeleteSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.DeleteSiteResponse";
  }
  protected:
  explicit DeleteSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.DeleteSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class SiteMarket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.SiteMarket) */ {
 public:
  inline SiteMarket() : SiteMarket(nullptr) {};
  virtual ~SiteMarket();

  SiteMarket(const SiteMarket& from);
  SiteMarket(SiteMarket&& from) noexcept
    : SiteMarket() {
    *this = ::std::move(from);
  }

  inline SiteMarket& operator=(const SiteMarket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteMarket& operator=(SiteMarket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiteMarket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteMarket* internal_default_instance() {
    return reinterpret_cast<const SiteMarket*>(
               &_SiteMarket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SiteMarket& a, SiteMarket& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteMarket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteMarket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteMarket* New() const final {
    return CreateMaybeMessage<SiteMarket>(nullptr);
  }

  SiteMarket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteMarket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiteMarket& from);
  void MergeFrom(const SiteMarket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteMarket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.SiteMarket";
  }
  protected:
  explicit SiteMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCdateFieldNumber = 5,
    kEdateFieldNumber = 6,
    kNumberOfSitesFieldNumber = 4,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // uint32 number_of_sites = 4[json_name = "numberOfSites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_number_of_sites();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_sites() const;
  void set_number_of_sites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_sites() const;
  void _internal_set_number_of_sites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.SiteMarket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_sites_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class ListSiteMarketsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.ListSiteMarketsRequest) */ {
 public:
  inline ListSiteMarketsRequest() : ListSiteMarketsRequest(nullptr) {};
  virtual ~ListSiteMarketsRequest();

  ListSiteMarketsRequest(const ListSiteMarketsRequest& from);
  ListSiteMarketsRequest(ListSiteMarketsRequest&& from) noexcept
    : ListSiteMarketsRequest() {
    *this = ::std::move(from);
  }

  inline ListSiteMarketsRequest& operator=(const ListSiteMarketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSiteMarketsRequest& operator=(ListSiteMarketsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSiteMarketsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSiteMarketsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSiteMarketsRequest*>(
               &_ListSiteMarketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListSiteMarketsRequest& a, ListSiteMarketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSiteMarketsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSiteMarketsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSiteMarketsRequest* New() const final {
    return CreateMaybeMessage<ListSiteMarketsRequest>(nullptr);
  }

  ListSiteMarketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSiteMarketsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSiteMarketsRequest& from);
  void MergeFrom(const ListSiteMarketsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSiteMarketsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.ListSiteMarketsRequest";
  }
  protected:
  explicit ListSiteMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.ListSiteMarketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class ListSiteMarketsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.ListSiteMarketsResponse) */ {
 public:
  inline ListSiteMarketsResponse() : ListSiteMarketsResponse(nullptr) {};
  virtual ~ListSiteMarketsResponse();

  ListSiteMarketsResponse(const ListSiteMarketsResponse& from);
  ListSiteMarketsResponse(ListSiteMarketsResponse&& from) noexcept
    : ListSiteMarketsResponse() {
    *this = ::std::move(from);
  }

  inline ListSiteMarketsResponse& operator=(const ListSiteMarketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSiteMarketsResponse& operator=(ListSiteMarketsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSiteMarketsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSiteMarketsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSiteMarketsResponse*>(
               &_ListSiteMarketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListSiteMarketsResponse& a, ListSiteMarketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSiteMarketsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSiteMarketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSiteMarketsResponse* New() const final {
    return CreateMaybeMessage<ListSiteMarketsResponse>(nullptr);
  }

  ListSiteMarketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSiteMarketsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSiteMarketsResponse& from);
  void MergeFrom(const ListSiteMarketsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSiteMarketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.ListSiteMarketsResponse";
  }
  protected:
  explicit ListSiteMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteMarketsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.site.v202211.SiteMarket site_markets = 1[json_name = "siteMarkets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int site_markets_size() const;
  private:
  int _internal_site_markets_size() const;
  public:
  void clear_site_markets();
  ::kentik::site::v202211::SiteMarket* mutable_site_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::SiteMarket >*
      mutable_site_markets();
  private:
  const ::kentik::site::v202211::SiteMarket& _internal_site_markets(int index) const;
  ::kentik::site::v202211::SiteMarket* _internal_add_site_markets();
  public:
  const ::kentik::site::v202211::SiteMarket& site_markets(int index) const;
  ::kentik::site::v202211::SiteMarket* add_site_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::SiteMarket >&
      site_markets() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.ListSiteMarketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::SiteMarket > site_markets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class GetSiteMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.GetSiteMarketRequest) */ {
 public:
  inline GetSiteMarketRequest() : GetSiteMarketRequest(nullptr) {};
  virtual ~GetSiteMarketRequest();

  GetSiteMarketRequest(const GetSiteMarketRequest& from);
  GetSiteMarketRequest(GetSiteMarketRequest&& from) noexcept
    : GetSiteMarketRequest() {
    *this = ::std::move(from);
  }

  inline GetSiteMarketRequest& operator=(const GetSiteMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSiteMarketRequest& operator=(GetSiteMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSiteMarketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSiteMarketRequest* internal_default_instance() {
    return reinterpret_cast<const GetSiteMarketRequest*>(
               &_GetSiteMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetSiteMarketRequest& a, GetSiteMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSiteMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSiteMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSiteMarketRequest* New() const final {
    return CreateMaybeMessage<GetSiteMarketRequest>(nullptr);
  }

  GetSiteMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSiteMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSiteMarketRequest& from);
  void MergeFrom(const GetSiteMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSiteMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.GetSiteMarketRequest";
  }
  protected:
  explicit GetSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.GetSiteMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class GetSiteMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.GetSiteMarketResponse) */ {
 public:
  inline GetSiteMarketResponse() : GetSiteMarketResponse(nullptr) {};
  virtual ~GetSiteMarketResponse();

  GetSiteMarketResponse(const GetSiteMarketResponse& from);
  GetSiteMarketResponse(GetSiteMarketResponse&& from) noexcept
    : GetSiteMarketResponse() {
    *this = ::std::move(from);
  }

  inline GetSiteMarketResponse& operator=(const GetSiteMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSiteMarketResponse& operator=(GetSiteMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSiteMarketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSiteMarketResponse* internal_default_instance() {
    return reinterpret_cast<const GetSiteMarketResponse*>(
               &_GetSiteMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetSiteMarketResponse& a, GetSiteMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSiteMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSiteMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSiteMarketResponse* New() const final {
    return CreateMaybeMessage<GetSiteMarketResponse>(nullptr);
  }

  GetSiteMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSiteMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSiteMarketResponse& from);
  void MergeFrom(const GetSiteMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSiteMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.GetSiteMarketResponse";
  }
  protected:
  explicit GetSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteMarketFieldNumber = 1,
  };
  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site_market() const;
  private:
  bool _internal_has_site_market() const;
  public:
  void clear_site_market();
  const ::kentik::site::v202211::SiteMarket& site_market() const;
  ::kentik::site::v202211::SiteMarket* release_site_market();
  ::kentik::site::v202211::SiteMarket* mutable_site_market();
  void set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market);
  private:
  const ::kentik::site::v202211::SiteMarket& _internal_site_market() const;
  ::kentik::site::v202211::SiteMarket* _internal_mutable_site_market();
  public:
  void unsafe_arena_set_allocated_site_market(
      ::kentik::site::v202211::SiteMarket* site_market);
  ::kentik::site::v202211::SiteMarket* unsafe_arena_release_site_market();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.GetSiteMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::SiteMarket* site_market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class CreateSiteMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.CreateSiteMarketRequest) */ {
 public:
  inline CreateSiteMarketRequest() : CreateSiteMarketRequest(nullptr) {};
  virtual ~CreateSiteMarketRequest();

  CreateSiteMarketRequest(const CreateSiteMarketRequest& from);
  CreateSiteMarketRequest(CreateSiteMarketRequest&& from) noexcept
    : CreateSiteMarketRequest() {
    *this = ::std::move(from);
  }

  inline CreateSiteMarketRequest& operator=(const CreateSiteMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSiteMarketRequest& operator=(CreateSiteMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSiteMarketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSiteMarketRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSiteMarketRequest*>(
               &_CreateSiteMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateSiteMarketRequest& a, CreateSiteMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSiteMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSiteMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSiteMarketRequest* New() const final {
    return CreateMaybeMessage<CreateSiteMarketRequest>(nullptr);
  }

  CreateSiteMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSiteMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSiteMarketRequest& from);
  void MergeFrom(const CreateSiteMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSiteMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.CreateSiteMarketRequest";
  }
  protected:
  explicit CreateSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteMarketFieldNumber = 1,
  };
  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site_market() const;
  private:
  bool _internal_has_site_market() const;
  public:
  void clear_site_market();
  const ::kentik::site::v202211::SiteMarket& site_market() const;
  ::kentik::site::v202211::SiteMarket* release_site_market();
  ::kentik::site::v202211::SiteMarket* mutable_site_market();
  void set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market);
  private:
  const ::kentik::site::v202211::SiteMarket& _internal_site_market() const;
  ::kentik::site::v202211::SiteMarket* _internal_mutable_site_market();
  public:
  void unsafe_arena_set_allocated_site_market(
      ::kentik::site::v202211::SiteMarket* site_market);
  ::kentik::site::v202211::SiteMarket* unsafe_arena_release_site_market();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.CreateSiteMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::SiteMarket* site_market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class CreateSiteMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.CreateSiteMarketResponse) */ {
 public:
  inline CreateSiteMarketResponse() : CreateSiteMarketResponse(nullptr) {};
  virtual ~CreateSiteMarketResponse();

  CreateSiteMarketResponse(const CreateSiteMarketResponse& from);
  CreateSiteMarketResponse(CreateSiteMarketResponse&& from) noexcept
    : CreateSiteMarketResponse() {
    *this = ::std::move(from);
  }

  inline CreateSiteMarketResponse& operator=(const CreateSiteMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSiteMarketResponse& operator=(CreateSiteMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSiteMarketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSiteMarketResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSiteMarketResponse*>(
               &_CreateSiteMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CreateSiteMarketResponse& a, CreateSiteMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSiteMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSiteMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSiteMarketResponse* New() const final {
    return CreateMaybeMessage<CreateSiteMarketResponse>(nullptr);
  }

  CreateSiteMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSiteMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSiteMarketResponse& from);
  void MergeFrom(const CreateSiteMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSiteMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.CreateSiteMarketResponse";
  }
  protected:
  explicit CreateSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteMarketFieldNumber = 1,
  };
  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site_market() const;
  private:
  bool _internal_has_site_market() const;
  public:
  void clear_site_market();
  const ::kentik::site::v202211::SiteMarket& site_market() const;
  ::kentik::site::v202211::SiteMarket* release_site_market();
  ::kentik::site::v202211::SiteMarket* mutable_site_market();
  void set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market);
  private:
  const ::kentik::site::v202211::SiteMarket& _internal_site_market() const;
  ::kentik::site::v202211::SiteMarket* _internal_mutable_site_market();
  public:
  void unsafe_arena_set_allocated_site_market(
      ::kentik::site::v202211::SiteMarket* site_market);
  ::kentik::site::v202211::SiteMarket* unsafe_arena_release_site_market();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.CreateSiteMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::SiteMarket* site_market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class UpdateSiteMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.UpdateSiteMarketRequest) */ {
 public:
  inline UpdateSiteMarketRequest() : UpdateSiteMarketRequest(nullptr) {};
  virtual ~UpdateSiteMarketRequest();

  UpdateSiteMarketRequest(const UpdateSiteMarketRequest& from);
  UpdateSiteMarketRequest(UpdateSiteMarketRequest&& from) noexcept
    : UpdateSiteMarketRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSiteMarketRequest& operator=(const UpdateSiteMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSiteMarketRequest& operator=(UpdateSiteMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSiteMarketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSiteMarketRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSiteMarketRequest*>(
               &_UpdateSiteMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateSiteMarketRequest& a, UpdateSiteMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSiteMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSiteMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSiteMarketRequest* New() const final {
    return CreateMaybeMessage<UpdateSiteMarketRequest>(nullptr);
  }

  UpdateSiteMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSiteMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSiteMarketRequest& from);
  void MergeFrom(const UpdateSiteMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSiteMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.UpdateSiteMarketRequest";
  }
  protected:
  explicit UpdateSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteMarketFieldNumber = 1,
  };
  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site_market() const;
  private:
  bool _internal_has_site_market() const;
  public:
  void clear_site_market();
  const ::kentik::site::v202211::SiteMarket& site_market() const;
  ::kentik::site::v202211::SiteMarket* release_site_market();
  ::kentik::site::v202211::SiteMarket* mutable_site_market();
  void set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market);
  private:
  const ::kentik::site::v202211::SiteMarket& _internal_site_market() const;
  ::kentik::site::v202211::SiteMarket* _internal_mutable_site_market();
  public:
  void unsafe_arena_set_allocated_site_market(
      ::kentik::site::v202211::SiteMarket* site_market);
  ::kentik::site::v202211::SiteMarket* unsafe_arena_release_site_market();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.UpdateSiteMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::SiteMarket* site_market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class UpdateSiteMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.UpdateSiteMarketResponse) */ {
 public:
  inline UpdateSiteMarketResponse() : UpdateSiteMarketResponse(nullptr) {};
  virtual ~UpdateSiteMarketResponse();

  UpdateSiteMarketResponse(const UpdateSiteMarketResponse& from);
  UpdateSiteMarketResponse(UpdateSiteMarketResponse&& from) noexcept
    : UpdateSiteMarketResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSiteMarketResponse& operator=(const UpdateSiteMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSiteMarketResponse& operator=(UpdateSiteMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSiteMarketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSiteMarketResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSiteMarketResponse*>(
               &_UpdateSiteMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateSiteMarketResponse& a, UpdateSiteMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSiteMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSiteMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSiteMarketResponse* New() const final {
    return CreateMaybeMessage<UpdateSiteMarketResponse>(nullptr);
  }

  UpdateSiteMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSiteMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSiteMarketResponse& from);
  void MergeFrom(const UpdateSiteMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSiteMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.UpdateSiteMarketResponse";
  }
  protected:
  explicit UpdateSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteMarketFieldNumber = 1,
  };
  // .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_site_market() const;
  private:
  bool _internal_has_site_market() const;
  public:
  void clear_site_market();
  const ::kentik::site::v202211::SiteMarket& site_market() const;
  ::kentik::site::v202211::SiteMarket* release_site_market();
  ::kentik::site::v202211::SiteMarket* mutable_site_market();
  void set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market);
  private:
  const ::kentik::site::v202211::SiteMarket& _internal_site_market() const;
  ::kentik::site::v202211::SiteMarket* _internal_mutable_site_market();
  public:
  void unsafe_arena_set_allocated_site_market(
      ::kentik::site::v202211::SiteMarket* site_market);
  ::kentik::site::v202211::SiteMarket* unsafe_arena_release_site_market();

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.UpdateSiteMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202211::SiteMarket* site_market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class DeleteSiteMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.DeleteSiteMarketRequest) */ {
 public:
  inline DeleteSiteMarketRequest() : DeleteSiteMarketRequest(nullptr) {};
  virtual ~DeleteSiteMarketRequest();

  DeleteSiteMarketRequest(const DeleteSiteMarketRequest& from);
  DeleteSiteMarketRequest(DeleteSiteMarketRequest&& from) noexcept
    : DeleteSiteMarketRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSiteMarketRequest& operator=(const DeleteSiteMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSiteMarketRequest& operator=(DeleteSiteMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSiteMarketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSiteMarketRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSiteMarketRequest*>(
               &_DeleteSiteMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeleteSiteMarketRequest& a, DeleteSiteMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSiteMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSiteMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSiteMarketRequest* New() const final {
    return CreateMaybeMessage<DeleteSiteMarketRequest>(nullptr);
  }

  DeleteSiteMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSiteMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSiteMarketRequest& from);
  void MergeFrom(const DeleteSiteMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSiteMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.DeleteSiteMarketRequest";
  }
  protected:
  explicit DeleteSiteMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.DeleteSiteMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// -------------------------------------------------------------------

class DeleteSiteMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202211.DeleteSiteMarketResponse) */ {
 public:
  inline DeleteSiteMarketResponse() : DeleteSiteMarketResponse(nullptr) {};
  virtual ~DeleteSiteMarketResponse();

  DeleteSiteMarketResponse(const DeleteSiteMarketResponse& from);
  DeleteSiteMarketResponse(DeleteSiteMarketResponse&& from) noexcept
    : DeleteSiteMarketResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSiteMarketResponse& operator=(const DeleteSiteMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSiteMarketResponse& operator=(DeleteSiteMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSiteMarketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSiteMarketResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSiteMarketResponse*>(
               &_DeleteSiteMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteSiteMarketResponse& a, DeleteSiteMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSiteMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSiteMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSiteMarketResponse* New() const final {
    return CreateMaybeMessage<DeleteSiteMarketResponse>(nullptr);
  }

  DeleteSiteMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSiteMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSiteMarketResponse& from);
  void MergeFrom(const DeleteSiteMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSiteMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202211.DeleteSiteMarketResponse";
  }
  protected:
  explicit DeleteSiteMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202211_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.site.v202211.DeleteSiteMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202211_2fsite_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteIpAddressClassification

// repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int SiteIpAddressClassification::_internal_infrastructure_networks_size() const {
  return infrastructure_networks_.size();
}
inline int SiteIpAddressClassification::infrastructure_networks_size() const {
  return _internal_infrastructure_networks_size();
}
inline void SiteIpAddressClassification::clear_infrastructure_networks() {
  infrastructure_networks_.Clear();
}
inline std::string* SiteIpAddressClassification::add_infrastructure_networks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  return _internal_add_infrastructure_networks();
}
inline const std::string& SiteIpAddressClassification::_internal_infrastructure_networks(int index) const {
  return infrastructure_networks_.Get(index);
}
inline const std::string& SiteIpAddressClassification::infrastructure_networks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  return _internal_infrastructure_networks(index);
}
inline std::string* SiteIpAddressClassification::mutable_infrastructure_networks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  return infrastructure_networks_.Mutable(index);
}
inline void SiteIpAddressClassification::set_infrastructure_networks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  infrastructure_networks_.Mutable(index)->assign(value);
}
inline void SiteIpAddressClassification::set_infrastructure_networks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  infrastructure_networks_.Mutable(index)->assign(std::move(value));
}
inline void SiteIpAddressClassification::set_infrastructure_networks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infrastructure_networks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
}
inline void SiteIpAddressClassification::set_infrastructure_networks(int index, const char* value, size_t size) {
  infrastructure_networks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
}
inline std::string* SiteIpAddressClassification::_internal_add_infrastructure_networks() {
  return infrastructure_networks_.Add();
}
inline void SiteIpAddressClassification::add_infrastructure_networks(const std::string& value) {
  infrastructure_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
}
inline void SiteIpAddressClassification::add_infrastructure_networks(std::string&& value) {
  infrastructure_networks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
}
inline void SiteIpAddressClassification::add_infrastructure_networks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infrastructure_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
}
inline void SiteIpAddressClassification::add_infrastructure_networks(const char* value, size_t size) {
  infrastructure_networks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteIpAddressClassification::infrastructure_networks() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  return infrastructure_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteIpAddressClassification::mutable_infrastructure_networks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.SiteIpAddressClassification.infrastructure_networks)
  return &infrastructure_networks_;
}

// repeated string user_access_networks = 2[json_name = "userAccessNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int SiteIpAddressClassification::_internal_user_access_networks_size() const {
  return user_access_networks_.size();
}
inline int SiteIpAddressClassification::user_access_networks_size() const {
  return _internal_user_access_networks_size();
}
inline void SiteIpAddressClassification::clear_user_access_networks() {
  user_access_networks_.Clear();
}
inline std::string* SiteIpAddressClassification::add_user_access_networks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  return _internal_add_user_access_networks();
}
inline const std::string& SiteIpAddressClassification::_internal_user_access_networks(int index) const {
  return user_access_networks_.Get(index);
}
inline const std::string& SiteIpAddressClassification::user_access_networks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  return _internal_user_access_networks(index);
}
inline std::string* SiteIpAddressClassification::mutable_user_access_networks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  return user_access_networks_.Mutable(index);
}
inline void SiteIpAddressClassification::set_user_access_networks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  user_access_networks_.Mutable(index)->assign(value);
}
inline void SiteIpAddressClassification::set_user_access_networks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  user_access_networks_.Mutable(index)->assign(std::move(value));
}
inline void SiteIpAddressClassification::set_user_access_networks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_access_networks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
}
inline void SiteIpAddressClassification::set_user_access_networks(int index, const char* value, size_t size) {
  user_access_networks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
}
inline std::string* SiteIpAddressClassification::_internal_add_user_access_networks() {
  return user_access_networks_.Add();
}
inline void SiteIpAddressClassification::add_user_access_networks(const std::string& value) {
  user_access_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
}
inline void SiteIpAddressClassification::add_user_access_networks(std::string&& value) {
  user_access_networks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
}
inline void SiteIpAddressClassification::add_user_access_networks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_access_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
}
inline void SiteIpAddressClassification::add_user_access_networks(const char* value, size_t size) {
  user_access_networks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteIpAddressClassification::user_access_networks() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  return user_access_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteIpAddressClassification::mutable_user_access_networks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.SiteIpAddressClassification.user_access_networks)
  return &user_access_networks_;
}

// repeated string other_networks = 3[json_name = "otherNetworks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int SiteIpAddressClassification::_internal_other_networks_size() const {
  return other_networks_.size();
}
inline int SiteIpAddressClassification::other_networks_size() const {
  return _internal_other_networks_size();
}
inline void SiteIpAddressClassification::clear_other_networks() {
  other_networks_.Clear();
}
inline std::string* SiteIpAddressClassification::add_other_networks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  return _internal_add_other_networks();
}
inline const std::string& SiteIpAddressClassification::_internal_other_networks(int index) const {
  return other_networks_.Get(index);
}
inline const std::string& SiteIpAddressClassification::other_networks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  return _internal_other_networks(index);
}
inline std::string* SiteIpAddressClassification::mutable_other_networks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  return other_networks_.Mutable(index);
}
inline void SiteIpAddressClassification::set_other_networks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  other_networks_.Mutable(index)->assign(value);
}
inline void SiteIpAddressClassification::set_other_networks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  other_networks_.Mutable(index)->assign(std::move(value));
}
inline void SiteIpAddressClassification::set_other_networks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_networks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.SiteIpAddressClassification.other_networks)
}
inline void SiteIpAddressClassification::set_other_networks(int index, const char* value, size_t size) {
  other_networks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.SiteIpAddressClassification.other_networks)
}
inline std::string* SiteIpAddressClassification::_internal_add_other_networks() {
  return other_networks_.Add();
}
inline void SiteIpAddressClassification::add_other_networks(const std::string& value) {
  other_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202211.SiteIpAddressClassification.other_networks)
}
inline void SiteIpAddressClassification::add_other_networks(std::string&& value) {
  other_networks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202211.SiteIpAddressClassification.other_networks)
}
inline void SiteIpAddressClassification::add_other_networks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202211.SiteIpAddressClassification.other_networks)
}
inline void SiteIpAddressClassification::add_other_networks(const char* value, size_t size) {
  other_networks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202211.SiteIpAddressClassification.other_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteIpAddressClassification::other_networks() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  return other_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteIpAddressClassification::mutable_other_networks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.SiteIpAddressClassification.other_networks)
  return &other_networks_;
}

// -------------------------------------------------------------------

// Layer

// string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Layer::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Layer.name)
  return _internal_name();
}
inline void Layer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Layer.name)
}
inline std::string* Layer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Layer.name)
  return _internal_mutable_name();
}
inline const std::string& Layer::_internal_name() const {
  return name_.Get();
}
inline void Layer::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Layer::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.Layer.name)
}
inline void Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.Layer.name)
}
inline void Layer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.Layer.name)
}
inline std::string* Layer::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.Layer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.Layer.name)
}
inline std::string* Layer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.Layer.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Layer::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.Layer.name)
}

// repeated string device_ids = 2[json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Layer::_internal_device_ids_size() const {
  return device_ids_.size();
}
inline int Layer::device_ids_size() const {
  return _internal_device_ids_size();
}
inline void Layer::clear_device_ids() {
  device_ids_.Clear();
}
inline std::string* Layer::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202211.Layer.device_ids)
  return _internal_add_device_ids();
}
inline const std::string& Layer::_internal_device_ids(int index) const {
  return device_ids_.Get(index);
}
inline const std::string& Layer::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Layer.device_ids)
  return _internal_device_ids(index);
}
inline std::string* Layer::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Layer.device_ids)
  return device_ids_.Mutable(index);
}
inline void Layer::set_device_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Layer.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
inline void Layer::set_device_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Layer.device_ids)
  device_ids_.Mutable(index)->assign(std::move(value));
}
inline void Layer::set_device_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.Layer.device_ids)
}
inline void Layer::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.Layer.device_ids)
}
inline std::string* Layer::_internal_add_device_ids() {
  return device_ids_.Add();
}
inline void Layer::add_device_ids(const std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202211.Layer.device_ids)
}
inline void Layer::add_device_ids(std::string&& value) {
  device_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202211.Layer.device_ids)
}
inline void Layer::add_device_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202211.Layer.device_ids)
}
inline void Layer::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202211.Layer.device_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Layer::device_ids() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.Layer.device_ids)
  return device_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Layer::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.Layer.device_ids)
  return &device_ids_;
}

// -------------------------------------------------------------------

// LayerSet

// repeated .kentik.site.v202211.Layer layers = 1[json_name = "layers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int LayerSet::_internal_layers_size() const {
  return layers_.size();
}
inline int LayerSet::layers_size() const {
  return _internal_layers_size();
}
inline void LayerSet::clear_layers() {
  layers_.Clear();
}
inline ::kentik::site::v202211::Layer* LayerSet::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.LayerSet.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Layer >*
LayerSet::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.LayerSet.layers)
  return &layers_;
}
inline const ::kentik::site::v202211::Layer& LayerSet::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::kentik::site::v202211::Layer& LayerSet::layers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.LayerSet.layers)
  return _internal_layers(index);
}
inline ::kentik::site::v202211::Layer* LayerSet::_internal_add_layers() {
  return layers_.Add();
}
inline ::kentik::site::v202211::Layer* LayerSet::add_layers() {
  // @@protoc_insertion_point(field_add:kentik.site.v202211.LayerSet.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Layer >&
LayerSet::layers() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.LayerSet.layers)
  return layers_;
}

// -------------------------------------------------------------------

// PostalAddress

// string address = 1[json_name = "address", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PostalAddress::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::address() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.PostalAddress.address)
  return _internal_address();
}
inline void PostalAddress::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.PostalAddress.address)
}
inline std::string* PostalAddress::mutable_address() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.PostalAddress.address)
  return _internal_mutable_address();
}
inline const std::string& PostalAddress::_internal_address() const {
  return address_.Get();
}
inline void PostalAddress::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.PostalAddress.address)
}
inline void PostalAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.PostalAddress.address)
}
inline void PostalAddress::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.PostalAddress.address)
}
inline std::string* PostalAddress::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_address() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.PostalAddress.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.PostalAddress.address)
}
inline std::string* PostalAddress::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.PostalAddress.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.PostalAddress.address)
}

// string city = 2[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PostalAddress::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::city() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.PostalAddress.city)
  return _internal_city();
}
inline void PostalAddress::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.PostalAddress.city)
}
inline std::string* PostalAddress::mutable_city() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.PostalAddress.city)
  return _internal_mutable_city();
}
inline const std::string& PostalAddress::_internal_city() const {
  return city_.Get();
}
inline void PostalAddress::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.PostalAddress.city)
}
inline void PostalAddress::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.PostalAddress.city)
}
inline void PostalAddress::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.PostalAddress.city)
}
inline std::string* PostalAddress::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_city() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.PostalAddress.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.PostalAddress.city)
}
inline std::string* PostalAddress::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.PostalAddress.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.PostalAddress.city)
}

// string region = 3[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PostalAddress::clear_region() {
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::region() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.PostalAddress.region)
  return _internal_region();
}
inline void PostalAddress::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.PostalAddress.region)
}
inline std::string* PostalAddress::mutable_region() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.PostalAddress.region)
  return _internal_mutable_region();
}
inline const std::string& PostalAddress::_internal_region() const {
  return region_.Get();
}
inline void PostalAddress::_internal_set_region(const std::string& value) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_region(std::string&& value) {
  
  region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.PostalAddress.region)
}
inline void PostalAddress::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.PostalAddress.region)
}
inline void PostalAddress::set_region(const char* value,
    size_t size) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.PostalAddress.region)
}
inline std::string* PostalAddress::_internal_mutable_region() {
  
  return region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_region() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.PostalAddress.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.PostalAddress.region)
}
inline std::string* PostalAddress::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.PostalAddress.region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_region(
    std::string* region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region != nullptr) {
    
  } else {
    
  }
  region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.PostalAddress.region)
}

// string postal_code = 4[json_name = "postalCode", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PostalAddress::clear_postal_code() {
  postal_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::postal_code() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.PostalAddress.postal_code)
  return _internal_postal_code();
}
inline void PostalAddress::set_postal_code(const std::string& value) {
  _internal_set_postal_code(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.PostalAddress.postal_code)
}
inline std::string* PostalAddress::mutable_postal_code() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.PostalAddress.postal_code)
  return _internal_mutable_postal_code();
}
inline const std::string& PostalAddress::_internal_postal_code() const {
  return postal_code_.Get();
}
inline void PostalAddress::_internal_set_postal_code(const std::string& value) {
  
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_postal_code(std::string&& value) {
  
  postal_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.PostalAddress.postal_code)
}
inline void PostalAddress::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.PostalAddress.postal_code)
}
inline void PostalAddress::set_postal_code(const char* value,
    size_t size) {
  
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.PostalAddress.postal_code)
}
inline std::string* PostalAddress::_internal_mutable_postal_code() {
  
  return postal_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_postal_code() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.PostalAddress.postal_code)
  return postal_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.PostalAddress.postal_code)
}
inline std::string* PostalAddress::unsafe_arena_release_postal_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.PostalAddress.postal_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return postal_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_postal_code(
    std::string* postal_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      postal_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.PostalAddress.postal_code)
}

// string country = 5[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PostalAddress::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::country() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.PostalAddress.country)
  return _internal_country();
}
inline void PostalAddress::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.PostalAddress.country)
}
inline std::string* PostalAddress::mutable_country() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.PostalAddress.country)
  return _internal_mutable_country();
}
inline const std::string& PostalAddress::_internal_country() const {
  return country_.Get();
}
inline void PostalAddress::_internal_set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.PostalAddress.country)
}
inline void PostalAddress::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.PostalAddress.country)
}
inline void PostalAddress::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.PostalAddress.country)
}
inline std::string* PostalAddress::_internal_mutable_country() {
  
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_country() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.PostalAddress.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.PostalAddress.country)
}
inline std::string* PostalAddress::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.PostalAddress.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    
  } else {
    
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.PostalAddress.country)
}

// -------------------------------------------------------------------

// Site

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.id)
  return _internal_id();
}
inline void Site::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Site.id)
}
inline std::string* Site::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Site.id)
  return _internal_mutable_id();
}
inline const std::string& Site::_internal_id() const {
  return id_.Get();
}
inline void Site::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.Site.id)
}
inline void Site::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.Site.id)
}
inline void Site::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.Site.id)
}
inline std::string* Site::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.Site.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.Site.id)
}
inline std::string* Site::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.Site.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.Site.id)
}

// string title = 2[json_name = "title", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::title() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.title)
  return _internal_title();
}
inline void Site::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Site.title)
}
inline std::string* Site::mutable_title() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Site.title)
  return _internal_mutable_title();
}
inline const std::string& Site::_internal_title() const {
  return title_.Get();
}
inline void Site::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.Site.title)
}
inline void Site::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.Site.title)
}
inline void Site::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.Site.title)
}
inline std::string* Site::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_title() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.Site.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.Site.title)
}
inline std::string* Site::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.Site.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.Site.title)
}

// double lat = 4[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_lat() {
  lat_ = 0;
}
inline double Site::_internal_lat() const {
  return lat_;
}
inline double Site::lat() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.lat)
  return _internal_lat();
}
inline void Site::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Site::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Site.lat)
}

// double lon = 5[json_name = "lon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_lon() {
  lon_ = 0;
}
inline double Site::_internal_lon() const {
  return lon_;
}
inline double Site::lon() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.lon)
  return _internal_lon();
}
inline void Site::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Site::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Site.lon)
}

// .kentik.site.v202211.PostalAddress postal_address = 6[json_name = "postalAddress", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Site::_internal_has_postal_address() const {
  return this != internal_default_instance() && postal_address_ != nullptr;
}
inline bool Site::has_postal_address() const {
  return _internal_has_postal_address();
}
inline void Site::clear_postal_address() {
  if (GetArena() == nullptr && postal_address_ != nullptr) {
    delete postal_address_;
  }
  postal_address_ = nullptr;
}
inline const ::kentik::site::v202211::PostalAddress& Site::_internal_postal_address() const {
  const ::kentik::site::v202211::PostalAddress* p = postal_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::PostalAddress*>(
      &::kentik::site::v202211::_PostalAddress_default_instance_);
}
inline const ::kentik::site::v202211::PostalAddress& Site::postal_address() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.postal_address)
  return _internal_postal_address();
}
inline void Site::unsafe_arena_set_allocated_postal_address(
    ::kentik::site::v202211::PostalAddress* postal_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postal_address_);
  }
  postal_address_ = postal_address;
  if (postal_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.Site.postal_address)
}
inline ::kentik::site::v202211::PostalAddress* Site::release_postal_address() {
  auto temp = unsafe_arena_release_postal_address();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::PostalAddress* Site::unsafe_arena_release_postal_address() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.Site.postal_address)
  
  ::kentik::site::v202211::PostalAddress* temp = postal_address_;
  postal_address_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::PostalAddress* Site::_internal_mutable_postal_address() {
  
  if (postal_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::PostalAddress>(GetArena());
    postal_address_ = p;
  }
  return postal_address_;
}
inline ::kentik::site::v202211::PostalAddress* Site::mutable_postal_address() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Site.postal_address)
  return _internal_mutable_postal_address();
}
inline void Site::set_allocated_postal_address(::kentik::site::v202211::PostalAddress* postal_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete postal_address_;
  }
  if (postal_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(postal_address);
    if (message_arena != submessage_arena) {
      postal_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postal_address, submessage_arena);
    }
    
  } else {
    
  }
  postal_address_ = postal_address;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.Site.postal_address)
}

// .kentik.site.v202211.SiteType type = 7[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_type() {
  type_ = 0;
}
inline ::kentik::site::v202211::SiteType Site::_internal_type() const {
  return static_cast< ::kentik::site::v202211::SiteType >(type_);
}
inline ::kentik::site::v202211::SiteType Site::type() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.type)
  return _internal_type();
}
inline void Site::_internal_set_type(::kentik::site::v202211::SiteType value) {
  
  type_ = value;
}
inline void Site::set_type(::kentik::site::v202211::SiteType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Site.type)
}

// .kentik.site.v202211.SiteIpAddressClassification address_classification = 8[json_name = "addressClassification", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Site::_internal_has_address_classification() const {
  return this != internal_default_instance() && address_classification_ != nullptr;
}
inline bool Site::has_address_classification() const {
  return _internal_has_address_classification();
}
inline void Site::clear_address_classification() {
  if (GetArena() == nullptr && address_classification_ != nullptr) {
    delete address_classification_;
  }
  address_classification_ = nullptr;
}
inline const ::kentik::site::v202211::SiteIpAddressClassification& Site::_internal_address_classification() const {
  const ::kentik::site::v202211::SiteIpAddressClassification* p = address_classification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::SiteIpAddressClassification*>(
      &::kentik::site::v202211::_SiteIpAddressClassification_default_instance_);
}
inline const ::kentik::site::v202211::SiteIpAddressClassification& Site::address_classification() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.address_classification)
  return _internal_address_classification();
}
inline void Site::unsafe_arena_set_allocated_address_classification(
    ::kentik::site::v202211::SiteIpAddressClassification* address_classification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_classification_);
  }
  address_classification_ = address_classification;
  if (address_classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.Site.address_classification)
}
inline ::kentik::site::v202211::SiteIpAddressClassification* Site::release_address_classification() {
  auto temp = unsafe_arena_release_address_classification();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::SiteIpAddressClassification* Site::unsafe_arena_release_address_classification() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.Site.address_classification)
  
  ::kentik::site::v202211::SiteIpAddressClassification* temp = address_classification_;
  address_classification_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::SiteIpAddressClassification* Site::_internal_mutable_address_classification() {
  
  if (address_classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::SiteIpAddressClassification>(GetArena());
    address_classification_ = p;
  }
  return address_classification_;
}
inline ::kentik::site::v202211::SiteIpAddressClassification* Site::mutable_address_classification() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Site.address_classification)
  return _internal_mutable_address_classification();
}
inline void Site::set_allocated_address_classification(::kentik::site::v202211::SiteIpAddressClassification* address_classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_classification_;
  }
  if (address_classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address_classification);
    if (message_arena != submessage_arena) {
      address_classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_classification, submessage_arena);
    }
    
  } else {
    
  }
  address_classification_ = address_classification;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.Site.address_classification)
}

// repeated .kentik.site.v202211.LayerSet architecture = 9[json_name = "architecture", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Site::_internal_architecture_size() const {
  return architecture_.size();
}
inline int Site::architecture_size() const {
  return _internal_architecture_size();
}
inline void Site::clear_architecture() {
  architecture_.Clear();
}
inline ::kentik::site::v202211::LayerSet* Site::mutable_architecture(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Site.architecture)
  return architecture_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::LayerSet >*
Site::mutable_architecture() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.Site.architecture)
  return &architecture_;
}
inline const ::kentik::site::v202211::LayerSet& Site::_internal_architecture(int index) const {
  return architecture_.Get(index);
}
inline const ::kentik::site::v202211::LayerSet& Site::architecture(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.architecture)
  return _internal_architecture(index);
}
inline ::kentik::site::v202211::LayerSet* Site::_internal_add_architecture() {
  return architecture_.Add();
}
inline ::kentik::site::v202211::LayerSet* Site::add_architecture() {
  // @@protoc_insertion_point(field_add:kentik.site.v202211.Site.architecture)
  return _internal_add_architecture();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::LayerSet >&
Site::architecture() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.Site.architecture)
  return architecture_;
}

// string site_market = 10[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Site::clear_site_market() {
  site_market_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::site_market() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.Site.site_market)
  return _internal_site_market();
}
inline void Site::set_site_market(const std::string& value) {
  _internal_set_site_market(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.Site.site_market)
}
inline std::string* Site::mutable_site_market() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.Site.site_market)
  return _internal_mutable_site_market();
}
inline const std::string& Site::_internal_site_market() const {
  return site_market_.Get();
}
inline void Site::_internal_set_site_market(const std::string& value) {
  
  site_market_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_site_market(std::string&& value) {
  
  site_market_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.Site.site_market)
}
inline void Site::set_site_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_market_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.Site.site_market)
}
inline void Site::set_site_market(const char* value,
    size_t size) {
  
  site_market_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.Site.site_market)
}
inline std::string* Site::_internal_mutable_site_market() {
  
  return site_market_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_site_market() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.Site.site_market)
  return site_market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_site_market(std::string* site_market) {
  if (site_market != nullptr) {
    
  } else {
    
  }
  site_market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.Site.site_market)
}
inline std::string* Site::unsafe_arena_release_site_market() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.Site.site_market)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_market_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_site_market(
    std::string* site_market) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_market != nullptr) {
    
  } else {
    
  }
  site_market_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_market, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.Site.site_market)
}

// -------------------------------------------------------------------

// ListSitesRequest

// -------------------------------------------------------------------

// ListSitesResponse

// repeated .kentik.site.v202211.Site sites = 1[json_name = "sites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListSitesResponse::_internal_sites_size() const {
  return sites_.size();
}
inline int ListSitesResponse::sites_size() const {
  return _internal_sites_size();
}
inline void ListSitesResponse::clear_sites() {
  sites_.Clear();
}
inline ::kentik::site::v202211::Site* ListSitesResponse::mutable_sites(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.ListSitesResponse.sites)
  return sites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Site >*
ListSitesResponse::mutable_sites() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.ListSitesResponse.sites)
  return &sites_;
}
inline const ::kentik::site::v202211::Site& ListSitesResponse::_internal_sites(int index) const {
  return sites_.Get(index);
}
inline const ::kentik::site::v202211::Site& ListSitesResponse::sites(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.ListSitesResponse.sites)
  return _internal_sites(index);
}
inline ::kentik::site::v202211::Site* ListSitesResponse::_internal_add_sites() {
  return sites_.Add();
}
inline ::kentik::site::v202211::Site* ListSitesResponse::add_sites() {
  // @@protoc_insertion_point(field_add:kentik.site.v202211.ListSitesResponse.sites)
  return _internal_add_sites();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::Site >&
ListSitesResponse::sites() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.ListSitesResponse.sites)
  return sites_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListSitesResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSitesResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSitesResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.ListSitesResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListSitesResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListSitesResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.ListSitesResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetSiteRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetSiteRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSiteRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.GetSiteRequest.id)
  return _internal_id();
}
inline void GetSiteRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.GetSiteRequest.id)
}
inline std::string* GetSiteRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.GetSiteRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetSiteRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSiteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSiteRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.GetSiteRequest.id)
}
inline void GetSiteRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.GetSiteRequest.id)
}
inline void GetSiteRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.GetSiteRequest.id)
}
inline std::string* GetSiteRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSiteRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.GetSiteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSiteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.GetSiteRequest.id)
}
inline std::string* GetSiteRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.GetSiteRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSiteRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.GetSiteRequest.id)
}

// -------------------------------------------------------------------

// GetSiteResponse

// .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetSiteResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool GetSiteResponse::has_site() const {
  return _internal_has_site();
}
inline void GetSiteResponse::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202211::Site& GetSiteResponse::_internal_site() const {
  const ::kentik::site::v202211::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::Site*>(
      &::kentik::site::v202211::_Site_default_instance_);
}
inline const ::kentik::site::v202211::Site& GetSiteResponse::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.GetSiteResponse.site)
  return _internal_site();
}
inline void GetSiteResponse::unsafe_arena_set_allocated_site(
    ::kentik::site::v202211::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.GetSiteResponse.site)
}
inline ::kentik::site::v202211::Site* GetSiteResponse::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::Site* GetSiteResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.GetSiteResponse.site)
  
  ::kentik::site::v202211::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::Site* GetSiteResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202211::Site* GetSiteResponse::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.GetSiteResponse.site)
  return _internal_mutable_site();
}
inline void GetSiteResponse::set_allocated_site(::kentik::site::v202211::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.GetSiteResponse.site)
}

// -------------------------------------------------------------------

// CreateSiteRequest

// .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateSiteRequest::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool CreateSiteRequest::has_site() const {
  return _internal_has_site();
}
inline void CreateSiteRequest::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202211::Site& CreateSiteRequest::_internal_site() const {
  const ::kentik::site::v202211::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::Site*>(
      &::kentik::site::v202211::_Site_default_instance_);
}
inline const ::kentik::site::v202211::Site& CreateSiteRequest::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.CreateSiteRequest.site)
  return _internal_site();
}
inline void CreateSiteRequest::unsafe_arena_set_allocated_site(
    ::kentik::site::v202211::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.CreateSiteRequest.site)
}
inline ::kentik::site::v202211::Site* CreateSiteRequest::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::Site* CreateSiteRequest::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.CreateSiteRequest.site)
  
  ::kentik::site::v202211::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::Site* CreateSiteRequest::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202211::Site* CreateSiteRequest::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.CreateSiteRequest.site)
  return _internal_mutable_site();
}
inline void CreateSiteRequest::set_allocated_site(::kentik::site::v202211::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.CreateSiteRequest.site)
}

// -------------------------------------------------------------------

// CreateSiteResponse

// .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateSiteResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool CreateSiteResponse::has_site() const {
  return _internal_has_site();
}
inline void CreateSiteResponse::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202211::Site& CreateSiteResponse::_internal_site() const {
  const ::kentik::site::v202211::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::Site*>(
      &::kentik::site::v202211::_Site_default_instance_);
}
inline const ::kentik::site::v202211::Site& CreateSiteResponse::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.CreateSiteResponse.site)
  return _internal_site();
}
inline void CreateSiteResponse::unsafe_arena_set_allocated_site(
    ::kentik::site::v202211::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.CreateSiteResponse.site)
}
inline ::kentik::site::v202211::Site* CreateSiteResponse::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::Site* CreateSiteResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.CreateSiteResponse.site)
  
  ::kentik::site::v202211::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::Site* CreateSiteResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202211::Site* CreateSiteResponse::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.CreateSiteResponse.site)
  return _internal_mutable_site();
}
inline void CreateSiteResponse::set_allocated_site(::kentik::site::v202211::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.CreateSiteResponse.site)
}

// -------------------------------------------------------------------

// UpdateSiteRequest

// .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateSiteRequest::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool UpdateSiteRequest::has_site() const {
  return _internal_has_site();
}
inline void UpdateSiteRequest::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202211::Site& UpdateSiteRequest::_internal_site() const {
  const ::kentik::site::v202211::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::Site*>(
      &::kentik::site::v202211::_Site_default_instance_);
}
inline const ::kentik::site::v202211::Site& UpdateSiteRequest::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.UpdateSiteRequest.site)
  return _internal_site();
}
inline void UpdateSiteRequest::unsafe_arena_set_allocated_site(
    ::kentik::site::v202211::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.UpdateSiteRequest.site)
}
inline ::kentik::site::v202211::Site* UpdateSiteRequest::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::Site* UpdateSiteRequest::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.UpdateSiteRequest.site)
  
  ::kentik::site::v202211::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::Site* UpdateSiteRequest::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202211::Site* UpdateSiteRequest::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.UpdateSiteRequest.site)
  return _internal_mutable_site();
}
inline void UpdateSiteRequest::set_allocated_site(::kentik::site::v202211::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.UpdateSiteRequest.site)
}

// -------------------------------------------------------------------

// UpdateSiteResponse

// .kentik.site.v202211.Site site = 1[json_name = "site", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateSiteResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool UpdateSiteResponse::has_site() const {
  return _internal_has_site();
}
inline void UpdateSiteResponse::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202211::Site& UpdateSiteResponse::_internal_site() const {
  const ::kentik::site::v202211::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::Site*>(
      &::kentik::site::v202211::_Site_default_instance_);
}
inline const ::kentik::site::v202211::Site& UpdateSiteResponse::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.UpdateSiteResponse.site)
  return _internal_site();
}
inline void UpdateSiteResponse::unsafe_arena_set_allocated_site(
    ::kentik::site::v202211::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.UpdateSiteResponse.site)
}
inline ::kentik::site::v202211::Site* UpdateSiteResponse::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::Site* UpdateSiteResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.UpdateSiteResponse.site)
  
  ::kentik::site::v202211::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::Site* UpdateSiteResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202211::Site* UpdateSiteResponse::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.UpdateSiteResponse.site)
  return _internal_mutable_site();
}
inline void UpdateSiteResponse::set_allocated_site(::kentik::site::v202211::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.UpdateSiteResponse.site)
}

// -------------------------------------------------------------------

// DeleteSiteRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteSiteRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteSiteRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.DeleteSiteRequest.id)
  return _internal_id();
}
inline void DeleteSiteRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.DeleteSiteRequest.id)
}
inline std::string* DeleteSiteRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.DeleteSiteRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteSiteRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSiteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteSiteRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.DeleteSiteRequest.id)
}
inline void DeleteSiteRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.DeleteSiteRequest.id)
}
inline void DeleteSiteRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.DeleteSiteRequest.id)
}
inline std::string* DeleteSiteRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteSiteRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.DeleteSiteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSiteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.DeleteSiteRequest.id)
}
inline std::string* DeleteSiteRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.DeleteSiteRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteSiteRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.DeleteSiteRequest.id)
}

// -------------------------------------------------------------------

// DeleteSiteResponse

// -------------------------------------------------------------------

// SiteMarket

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SiteMarket::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMarket::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteMarket.id)
  return _internal_id();
}
inline void SiteMarket::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteMarket.id)
}
inline std::string* SiteMarket::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteMarket.id)
  return _internal_mutable_id();
}
inline const std::string& SiteMarket::_internal_id() const {
  return id_.Get();
}
inline void SiteMarket::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMarket::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.SiteMarket.id)
}
inline void SiteMarket::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.SiteMarket.id)
}
inline void SiteMarket::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.SiteMarket.id)
}
inline std::string* SiteMarket::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMarket::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.SiteMarket.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMarket::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.SiteMarket.id)
}
inline std::string* SiteMarket::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.SiteMarket.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMarket::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.SiteMarket.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SiteMarket::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMarket::name() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteMarket.name)
  return _internal_name();
}
inline void SiteMarket::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteMarket.name)
}
inline std::string* SiteMarket::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteMarket.name)
  return _internal_mutable_name();
}
inline const std::string& SiteMarket::_internal_name() const {
  return name_.Get();
}
inline void SiteMarket::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMarket::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.SiteMarket.name)
}
inline void SiteMarket::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.SiteMarket.name)
}
inline void SiteMarket::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.SiteMarket.name)
}
inline std::string* SiteMarket::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMarket::release_name() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.SiteMarket.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMarket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.SiteMarket.name)
}
inline std::string* SiteMarket::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.SiteMarket.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMarket::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.SiteMarket.name)
}

// string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SiteMarket::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMarket::description() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteMarket.description)
  return _internal_description();
}
inline void SiteMarket::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteMarket.description)
}
inline std::string* SiteMarket::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteMarket.description)
  return _internal_mutable_description();
}
inline const std::string& SiteMarket::_internal_description() const {
  return description_.Get();
}
inline void SiteMarket::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMarket::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.SiteMarket.description)
}
inline void SiteMarket::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.SiteMarket.description)
}
inline void SiteMarket::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.SiteMarket.description)
}
inline std::string* SiteMarket::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMarket::release_description() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.SiteMarket.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMarket::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.SiteMarket.description)
}
inline std::string* SiteMarket::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.SiteMarket.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMarket::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.SiteMarket.description)
}

// uint32 number_of_sites = 4[json_name = "numberOfSites", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SiteMarket::clear_number_of_sites() {
  number_of_sites_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiteMarket::_internal_number_of_sites() const {
  return number_of_sites_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiteMarket::number_of_sites() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteMarket.number_of_sites)
  return _internal_number_of_sites();
}
inline void SiteMarket::_internal_set_number_of_sites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_of_sites_ = value;
}
inline void SiteMarket::set_number_of_sites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_sites(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.SiteMarket.number_of_sites)
}

// .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool SiteMarket::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool SiteMarket::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SiteMarket::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SiteMarket::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteMarket.cdate)
  return _internal_cdate();
}
inline void SiteMarket::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.SiteMarket.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.SiteMarket.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteMarket.cdate)
  return _internal_mutable_cdate();
}
inline void SiteMarket::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.SiteMarket.cdate)
}

// .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool SiteMarket::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool SiteMarket::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SiteMarket::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SiteMarket::edate() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.SiteMarket.edate)
  return _internal_edate();
}
inline void SiteMarket::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.SiteMarket.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.SiteMarket.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SiteMarket::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.SiteMarket.edate)
  return _internal_mutable_edate();
}
inline void SiteMarket::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.SiteMarket.edate)
}

// -------------------------------------------------------------------

// ListSiteMarketsRequest

// -------------------------------------------------------------------

// ListSiteMarketsResponse

// repeated .kentik.site.v202211.SiteMarket site_markets = 1[json_name = "siteMarkets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListSiteMarketsResponse::_internal_site_markets_size() const {
  return site_markets_.size();
}
inline int ListSiteMarketsResponse::site_markets_size() const {
  return _internal_site_markets_size();
}
inline void ListSiteMarketsResponse::clear_site_markets() {
  site_markets_.Clear();
}
inline ::kentik::site::v202211::SiteMarket* ListSiteMarketsResponse::mutable_site_markets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.ListSiteMarketsResponse.site_markets)
  return site_markets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::SiteMarket >*
ListSiteMarketsResponse::mutable_site_markets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202211.ListSiteMarketsResponse.site_markets)
  return &site_markets_;
}
inline const ::kentik::site::v202211::SiteMarket& ListSiteMarketsResponse::_internal_site_markets(int index) const {
  return site_markets_.Get(index);
}
inline const ::kentik::site::v202211::SiteMarket& ListSiteMarketsResponse::site_markets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.ListSiteMarketsResponse.site_markets)
  return _internal_site_markets(index);
}
inline ::kentik::site::v202211::SiteMarket* ListSiteMarketsResponse::_internal_add_site_markets() {
  return site_markets_.Add();
}
inline ::kentik::site::v202211::SiteMarket* ListSiteMarketsResponse::add_site_markets() {
  // @@protoc_insertion_point(field_add:kentik.site.v202211.ListSiteMarketsResponse.site_markets)
  return _internal_add_site_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202211::SiteMarket >&
ListSiteMarketsResponse::site_markets() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202211.ListSiteMarketsResponse.site_markets)
  return site_markets_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListSiteMarketsResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSiteMarketsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSiteMarketsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.ListSiteMarketsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListSiteMarketsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListSiteMarketsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.ListSiteMarketsResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetSiteMarketRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetSiteMarketRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSiteMarketRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.GetSiteMarketRequest.id)
  return _internal_id();
}
inline void GetSiteMarketRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.GetSiteMarketRequest.id)
}
inline std::string* GetSiteMarketRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.GetSiteMarketRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetSiteMarketRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSiteMarketRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSiteMarketRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.GetSiteMarketRequest.id)
}
inline void GetSiteMarketRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.GetSiteMarketRequest.id)
}
inline void GetSiteMarketRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.GetSiteMarketRequest.id)
}
inline std::string* GetSiteMarketRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSiteMarketRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.GetSiteMarketRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSiteMarketRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.GetSiteMarketRequest.id)
}
inline std::string* GetSiteMarketRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.GetSiteMarketRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSiteMarketRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.GetSiteMarketRequest.id)
}

// -------------------------------------------------------------------

// GetSiteMarketResponse

// .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetSiteMarketResponse::_internal_has_site_market() const {
  return this != internal_default_instance() && site_market_ != nullptr;
}
inline bool GetSiteMarketResponse::has_site_market() const {
  return _internal_has_site_market();
}
inline void GetSiteMarketResponse::clear_site_market() {
  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
}
inline const ::kentik::site::v202211::SiteMarket& GetSiteMarketResponse::_internal_site_market() const {
  const ::kentik::site::v202211::SiteMarket* p = site_market_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::SiteMarket*>(
      &::kentik::site::v202211::_SiteMarket_default_instance_);
}
inline const ::kentik::site::v202211::SiteMarket& GetSiteMarketResponse::site_market() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.GetSiteMarketResponse.site_market)
  return _internal_site_market();
}
inline void GetSiteMarketResponse::unsafe_arena_set_allocated_site_market(
    ::kentik::site::v202211::SiteMarket* site_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_market_);
  }
  site_market_ = site_market;
  if (site_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.GetSiteMarketResponse.site_market)
}
inline ::kentik::site::v202211::SiteMarket* GetSiteMarketResponse::release_site_market() {
  auto temp = unsafe_arena_release_site_market();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* GetSiteMarketResponse::unsafe_arena_release_site_market() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.GetSiteMarketResponse.site_market)
  
  ::kentik::site::v202211::SiteMarket* temp = site_market_;
  site_market_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* GetSiteMarketResponse::_internal_mutable_site_market() {
  
  if (site_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::SiteMarket>(GetArena());
    site_market_ = p;
  }
  return site_market_;
}
inline ::kentik::site::v202211::SiteMarket* GetSiteMarketResponse::mutable_site_market() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.GetSiteMarketResponse.site_market)
  return _internal_mutable_site_market();
}
inline void GetSiteMarketResponse::set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_market_;
  }
  if (site_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site_market);
    if (message_arena != submessage_arena) {
      site_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_market, submessage_arena);
    }
    
  } else {
    
  }
  site_market_ = site_market;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.GetSiteMarketResponse.site_market)
}

// -------------------------------------------------------------------

// CreateSiteMarketRequest

// .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateSiteMarketRequest::_internal_has_site_market() const {
  return this != internal_default_instance() && site_market_ != nullptr;
}
inline bool CreateSiteMarketRequest::has_site_market() const {
  return _internal_has_site_market();
}
inline void CreateSiteMarketRequest::clear_site_market() {
  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
}
inline const ::kentik::site::v202211::SiteMarket& CreateSiteMarketRequest::_internal_site_market() const {
  const ::kentik::site::v202211::SiteMarket* p = site_market_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::SiteMarket*>(
      &::kentik::site::v202211::_SiteMarket_default_instance_);
}
inline const ::kentik::site::v202211::SiteMarket& CreateSiteMarketRequest::site_market() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.CreateSiteMarketRequest.site_market)
  return _internal_site_market();
}
inline void CreateSiteMarketRequest::unsafe_arena_set_allocated_site_market(
    ::kentik::site::v202211::SiteMarket* site_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_market_);
  }
  site_market_ = site_market;
  if (site_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.CreateSiteMarketRequest.site_market)
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketRequest::release_site_market() {
  auto temp = unsafe_arena_release_site_market();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketRequest::unsafe_arena_release_site_market() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.CreateSiteMarketRequest.site_market)
  
  ::kentik::site::v202211::SiteMarket* temp = site_market_;
  site_market_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketRequest::_internal_mutable_site_market() {
  
  if (site_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::SiteMarket>(GetArena());
    site_market_ = p;
  }
  return site_market_;
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketRequest::mutable_site_market() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.CreateSiteMarketRequest.site_market)
  return _internal_mutable_site_market();
}
inline void CreateSiteMarketRequest::set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_market_;
  }
  if (site_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site_market);
    if (message_arena != submessage_arena) {
      site_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_market, submessage_arena);
    }
    
  } else {
    
  }
  site_market_ = site_market;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.CreateSiteMarketRequest.site_market)
}

// -------------------------------------------------------------------

// CreateSiteMarketResponse

// .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateSiteMarketResponse::_internal_has_site_market() const {
  return this != internal_default_instance() && site_market_ != nullptr;
}
inline bool CreateSiteMarketResponse::has_site_market() const {
  return _internal_has_site_market();
}
inline void CreateSiteMarketResponse::clear_site_market() {
  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
}
inline const ::kentik::site::v202211::SiteMarket& CreateSiteMarketResponse::_internal_site_market() const {
  const ::kentik::site::v202211::SiteMarket* p = site_market_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::SiteMarket*>(
      &::kentik::site::v202211::_SiteMarket_default_instance_);
}
inline const ::kentik::site::v202211::SiteMarket& CreateSiteMarketResponse::site_market() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.CreateSiteMarketResponse.site_market)
  return _internal_site_market();
}
inline void CreateSiteMarketResponse::unsafe_arena_set_allocated_site_market(
    ::kentik::site::v202211::SiteMarket* site_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_market_);
  }
  site_market_ = site_market;
  if (site_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.CreateSiteMarketResponse.site_market)
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketResponse::release_site_market() {
  auto temp = unsafe_arena_release_site_market();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketResponse::unsafe_arena_release_site_market() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.CreateSiteMarketResponse.site_market)
  
  ::kentik::site::v202211::SiteMarket* temp = site_market_;
  site_market_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketResponse::_internal_mutable_site_market() {
  
  if (site_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::SiteMarket>(GetArena());
    site_market_ = p;
  }
  return site_market_;
}
inline ::kentik::site::v202211::SiteMarket* CreateSiteMarketResponse::mutable_site_market() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.CreateSiteMarketResponse.site_market)
  return _internal_mutable_site_market();
}
inline void CreateSiteMarketResponse::set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_market_;
  }
  if (site_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site_market);
    if (message_arena != submessage_arena) {
      site_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_market, submessage_arena);
    }
    
  } else {
    
  }
  site_market_ = site_market;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.CreateSiteMarketResponse.site_market)
}

// -------------------------------------------------------------------

// UpdateSiteMarketRequest

// .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateSiteMarketRequest::_internal_has_site_market() const {
  return this != internal_default_instance() && site_market_ != nullptr;
}
inline bool UpdateSiteMarketRequest::has_site_market() const {
  return _internal_has_site_market();
}
inline void UpdateSiteMarketRequest::clear_site_market() {
  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
}
inline const ::kentik::site::v202211::SiteMarket& UpdateSiteMarketRequest::_internal_site_market() const {
  const ::kentik::site::v202211::SiteMarket* p = site_market_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::SiteMarket*>(
      &::kentik::site::v202211::_SiteMarket_default_instance_);
}
inline const ::kentik::site::v202211::SiteMarket& UpdateSiteMarketRequest::site_market() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.UpdateSiteMarketRequest.site_market)
  return _internal_site_market();
}
inline void UpdateSiteMarketRequest::unsafe_arena_set_allocated_site_market(
    ::kentik::site::v202211::SiteMarket* site_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_market_);
  }
  site_market_ = site_market;
  if (site_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.UpdateSiteMarketRequest.site_market)
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketRequest::release_site_market() {
  auto temp = unsafe_arena_release_site_market();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketRequest::unsafe_arena_release_site_market() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.UpdateSiteMarketRequest.site_market)
  
  ::kentik::site::v202211::SiteMarket* temp = site_market_;
  site_market_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketRequest::_internal_mutable_site_market() {
  
  if (site_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::SiteMarket>(GetArena());
    site_market_ = p;
  }
  return site_market_;
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketRequest::mutable_site_market() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.UpdateSiteMarketRequest.site_market)
  return _internal_mutable_site_market();
}
inline void UpdateSiteMarketRequest::set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_market_;
  }
  if (site_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site_market);
    if (message_arena != submessage_arena) {
      site_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_market, submessage_arena);
    }
    
  } else {
    
  }
  site_market_ = site_market;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.UpdateSiteMarketRequest.site_market)
}

// -------------------------------------------------------------------

// UpdateSiteMarketResponse

// .kentik.site.v202211.SiteMarket site_market = 1[json_name = "siteMarket", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateSiteMarketResponse::_internal_has_site_market() const {
  return this != internal_default_instance() && site_market_ != nullptr;
}
inline bool UpdateSiteMarketResponse::has_site_market() const {
  return _internal_has_site_market();
}
inline void UpdateSiteMarketResponse::clear_site_market() {
  if (GetArena() == nullptr && site_market_ != nullptr) {
    delete site_market_;
  }
  site_market_ = nullptr;
}
inline const ::kentik::site::v202211::SiteMarket& UpdateSiteMarketResponse::_internal_site_market() const {
  const ::kentik::site::v202211::SiteMarket* p = site_market_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202211::SiteMarket*>(
      &::kentik::site::v202211::_SiteMarket_default_instance_);
}
inline const ::kentik::site::v202211::SiteMarket& UpdateSiteMarketResponse::site_market() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.UpdateSiteMarketResponse.site_market)
  return _internal_site_market();
}
inline void UpdateSiteMarketResponse::unsafe_arena_set_allocated_site_market(
    ::kentik::site::v202211::SiteMarket* site_market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_market_);
  }
  site_market_ = site_market;
  if (site_market) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.UpdateSiteMarketResponse.site_market)
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketResponse::release_site_market() {
  auto temp = unsafe_arena_release_site_market();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketResponse::unsafe_arena_release_site_market() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.UpdateSiteMarketResponse.site_market)
  
  ::kentik::site::v202211::SiteMarket* temp = site_market_;
  site_market_ = nullptr;
  return temp;
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketResponse::_internal_mutable_site_market() {
  
  if (site_market_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202211::SiteMarket>(GetArena());
    site_market_ = p;
  }
  return site_market_;
}
inline ::kentik::site::v202211::SiteMarket* UpdateSiteMarketResponse::mutable_site_market() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.UpdateSiteMarketResponse.site_market)
  return _internal_mutable_site_market();
}
inline void UpdateSiteMarketResponse::set_allocated_site_market(::kentik::site::v202211::SiteMarket* site_market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_market_;
  }
  if (site_market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site_market);
    if (message_arena != submessage_arena) {
      site_market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_market, submessage_arena);
    }
    
  } else {
    
  }
  site_market_ = site_market;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.UpdateSiteMarketResponse.site_market)
}

// -------------------------------------------------------------------

// DeleteSiteMarketRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteSiteMarketRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteSiteMarketRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202211.DeleteSiteMarketRequest.id)
  return _internal_id();
}
inline void DeleteSiteMarketRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202211.DeleteSiteMarketRequest.id)
}
inline std::string* DeleteSiteMarketRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202211.DeleteSiteMarketRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteSiteMarketRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSiteMarketRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteSiteMarketRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202211.DeleteSiteMarketRequest.id)
}
inline void DeleteSiteMarketRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202211.DeleteSiteMarketRequest.id)
}
inline void DeleteSiteMarketRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202211.DeleteSiteMarketRequest.id)
}
inline std::string* DeleteSiteMarketRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteSiteMarketRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202211.DeleteSiteMarketRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSiteMarketRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202211.DeleteSiteMarketRequest.id)
}
inline std::string* DeleteSiteMarketRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202211.DeleteSiteMarketRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteSiteMarketRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202211.DeleteSiteMarketRequest.id)
}

// -------------------------------------------------------------------

// DeleteSiteMarketResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202211
}  // namespace site
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::site::v202211::SiteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::site::v202211::SiteType>() {
  return ::kentik::site::v202211::SiteType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fsite_2fv202211_2fsite_2eproto
