// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/site/v202106alpha1/site.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fsite_2fv202106alpha1_2fsite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fsite_2fv202106alpha1_2fsite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/type/latlng.pb.h"
#include "google/type/postal_address.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202106alpha1_2fsite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
namespace kentik {
namespace site {
namespace v202106alpha1 {
class CreateSiteRequest;
class CreateSiteRequestDefaultTypeInternal;
extern CreateSiteRequestDefaultTypeInternal _CreateSiteRequest_default_instance_;
class CreateSiteResponse;
class CreateSiteResponseDefaultTypeInternal;
extern CreateSiteResponseDefaultTypeInternal _CreateSiteResponse_default_instance_;
class DeleteSiteRequest;
class DeleteSiteRequestDefaultTypeInternal;
extern DeleteSiteRequestDefaultTypeInternal _DeleteSiteRequest_default_instance_;
class DeleteSiteResponse;
class DeleteSiteResponseDefaultTypeInternal;
extern DeleteSiteResponseDefaultTypeInternal _DeleteSiteResponse_default_instance_;
class GetSiteRequest;
class GetSiteRequestDefaultTypeInternal;
extern GetSiteRequestDefaultTypeInternal _GetSiteRequest_default_instance_;
class GetSiteResponse;
class GetSiteResponseDefaultTypeInternal;
extern GetSiteResponseDefaultTypeInternal _GetSiteResponse_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class ListSiteRequest;
class ListSiteRequestDefaultTypeInternal;
extern ListSiteRequestDefaultTypeInternal _ListSiteRequest_default_instance_;
class ListSiteResponse;
class ListSiteResponseDefaultTypeInternal;
extern ListSiteResponseDefaultTypeInternal _ListSiteResponse_default_instance_;
class Site;
class SiteDefaultTypeInternal;
extern SiteDefaultTypeInternal _Site_default_instance_;
class SiteIpClassification;
class SiteIpClassificationDefaultTypeInternal;
extern SiteIpClassificationDefaultTypeInternal _SiteIpClassification_default_instance_;
class SubLayer;
class SubLayerDefaultTypeInternal;
extern SubLayerDefaultTypeInternal _SubLayer_default_instance_;
class UpdateSiteRequest;
class UpdateSiteRequestDefaultTypeInternal;
extern UpdateSiteRequestDefaultTypeInternal _UpdateSiteRequest_default_instance_;
class UpdateSiteResponse;
class UpdateSiteResponseDefaultTypeInternal;
extern UpdateSiteResponseDefaultTypeInternal _UpdateSiteResponse_default_instance_;
}  // namespace v202106alpha1
}  // namespace site
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::site::v202106alpha1::CreateSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::CreateSiteRequest>(Arena*);
template<> ::kentik::site::v202106alpha1::CreateSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::CreateSiteResponse>(Arena*);
template<> ::kentik::site::v202106alpha1::DeleteSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::DeleteSiteRequest>(Arena*);
template<> ::kentik::site::v202106alpha1::DeleteSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::DeleteSiteResponse>(Arena*);
template<> ::kentik::site::v202106alpha1::GetSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::GetSiteRequest>(Arena*);
template<> ::kentik::site::v202106alpha1::GetSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::GetSiteResponse>(Arena*);
template<> ::kentik::site::v202106alpha1::Layer* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::Layer>(Arena*);
template<> ::kentik::site::v202106alpha1::ListSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::ListSiteRequest>(Arena*);
template<> ::kentik::site::v202106alpha1::ListSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::ListSiteResponse>(Arena*);
template<> ::kentik::site::v202106alpha1::Site* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::Site>(Arena*);
template<> ::kentik::site::v202106alpha1::SiteIpClassification* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::SiteIpClassification>(Arena*);
template<> ::kentik::site::v202106alpha1::SubLayer* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::SubLayer>(Arena*);
template<> ::kentik::site::v202106alpha1::UpdateSiteRequest* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::UpdateSiteRequest>(Arena*);
template<> ::kentik::site::v202106alpha1::UpdateSiteResponse* Arena::CreateMaybeMessage<::kentik::site::v202106alpha1::UpdateSiteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace site {
namespace v202106alpha1 {

enum SiteType : int {
  SITE_TYPE_UNSPECIFIED = 0,
  SITE_TYPE_DATA_CENTER = 1,
  SITE_TYPE_CLOUD = 2,
  SITE_TYPE_BRANCH = 3,
  SITE_TYPE_CONNECTIVITY = 4,
  SITE_TYPE_CUSTOMER = 5,
  SITE_TYPE_OTHER = 6,
  SiteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SiteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SiteType_IsValid(int value);
constexpr SiteType SiteType_MIN = SITE_TYPE_UNSPECIFIED;
constexpr SiteType SiteType_MAX = SITE_TYPE_OTHER;
constexpr int SiteType_ARRAYSIZE = SiteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SiteType_descriptor();
template<typename T>
inline const std::string& SiteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SiteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SiteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SiteType_descriptor(), enum_t_value);
}
inline bool SiteType_Parse(
    const std::string& name, SiteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SiteType>(
    SiteType_descriptor(), name, value);
}
// ===================================================================

class SiteIpClassification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.SiteIpClassification) */ {
 public:
  inline SiteIpClassification() : SiteIpClassification(nullptr) {};
  virtual ~SiteIpClassification();

  SiteIpClassification(const SiteIpClassification& from);
  SiteIpClassification(SiteIpClassification&& from) noexcept
    : SiteIpClassification() {
    *this = ::std::move(from);
  }

  inline SiteIpClassification& operator=(const SiteIpClassification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteIpClassification& operator=(SiteIpClassification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiteIpClassification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteIpClassification* internal_default_instance() {
    return reinterpret_cast<const SiteIpClassification*>(
               &_SiteIpClassification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteIpClassification& a, SiteIpClassification& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteIpClassification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteIpClassification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteIpClassification* New() const final {
    return CreateMaybeMessage<SiteIpClassification>(nullptr);
  }

  SiteIpClassification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteIpClassification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiteIpClassification& from);
  void MergeFrom(const SiteIpClassification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteIpClassification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.SiteIpClassification";
  }
  protected:
  explicit SiteIpClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfrastructureNetworksFieldNumber = 1,
    kUserAccessNetworksFieldNumber = 2,
    kOtherIpsFieldNumber = 3,
  };
  // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks"];
  int infrastructure_networks_size() const;
  private:
  int _internal_infrastructure_networks_size() const;
  public:
  void clear_infrastructure_networks();
  const std::string& infrastructure_networks(int index) const;
  std::string* mutable_infrastructure_networks(int index);
  void set_infrastructure_networks(int index, const std::string& value);
  void set_infrastructure_networks(int index, std::string&& value);
  void set_infrastructure_networks(int index, const char* value);
  void set_infrastructure_networks(int index, const char* value, size_t size);
  std::string* add_infrastructure_networks();
  void add_infrastructure_networks(const std::string& value);
  void add_infrastructure_networks(std::string&& value);
  void add_infrastructure_networks(const char* value);
  void add_infrastructure_networks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& infrastructure_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_infrastructure_networks();
  private:
  const std::string& _internal_infrastructure_networks(int index) const;
  std::string* _internal_add_infrastructure_networks();
  public:

  // repeated string user_access_networks = 2[json_name = "userAccessNetworks"];
  int user_access_networks_size() const;
  private:
  int _internal_user_access_networks_size() const;
  public:
  void clear_user_access_networks();
  const std::string& user_access_networks(int index) const;
  std::string* mutable_user_access_networks(int index);
  void set_user_access_networks(int index, const std::string& value);
  void set_user_access_networks(int index, std::string&& value);
  void set_user_access_networks(int index, const char* value);
  void set_user_access_networks(int index, const char* value, size_t size);
  std::string* add_user_access_networks();
  void add_user_access_networks(const std::string& value);
  void add_user_access_networks(std::string&& value);
  void add_user_access_networks(const char* value);
  void add_user_access_networks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_access_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_access_networks();
  private:
  const std::string& _internal_user_access_networks(int index) const;
  std::string* _internal_add_user_access_networks();
  public:

  // repeated string other_ips = 3[json_name = "otherIps"];
  int other_ips_size() const;
  private:
  int _internal_other_ips_size() const;
  public:
  void clear_other_ips();
  const std::string& other_ips(int index) const;
  std::string* mutable_other_ips(int index);
  void set_other_ips(int index, const std::string& value);
  void set_other_ips(int index, std::string&& value);
  void set_other_ips(int index, const char* value);
  void set_other_ips(int index, const char* value, size_t size);
  std::string* add_other_ips();
  void add_other_ips(const std::string& value);
  void add_other_ips(std::string&& value);
  void add_other_ips(const char* value);
  void add_other_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& other_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_other_ips();
  private:
  const std::string& _internal_other_ips(int index) const;
  std::string* _internal_add_other_ips();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.SiteIpClassification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> infrastructure_networks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_access_networks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> other_ips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class SubLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.SubLayer) */ {
 public:
  inline SubLayer() : SubLayer(nullptr) {};
  virtual ~SubLayer();

  SubLayer(const SubLayer& from);
  SubLayer(SubLayer&& from) noexcept
    : SubLayer() {
    *this = ::std::move(from);
  }

  inline SubLayer& operator=(const SubLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubLayer& operator=(SubLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubLayer* internal_default_instance() {
    return reinterpret_cast<const SubLayer*>(
               &_SubLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubLayer& a, SubLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SubLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubLayer* New() const final {
    return CreateMaybeMessage<SubLayer>(nullptr);
  }

  SubLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubLayer& from);
  void MergeFrom(const SubLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.SubLayer";
  }
  protected:
  explicit SubLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string device_ids = 2[json_name = "deviceIds"];
  int device_ids_size() const;
  private:
  int _internal_device_ids_size() const;
  public:
  void clear_device_ids();
  const std::string& device_ids(int index) const;
  std::string* mutable_device_ids(int index);
  void set_device_ids(int index, const std::string& value);
  void set_device_ids(int index, std::string&& value);
  void set_device_ids(int index, const char* value);
  void set_device_ids(int index, const char* value, size_t size);
  std::string* add_device_ids();
  void add_device_ids(const std::string& value);
  void add_device_ids(std::string&& value);
  void add_device_ids(const char* value);
  void add_device_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_ids();
  private:
  const std::string& _internal_device_ids(int index) const;
  std::string* _internal_add_device_ids();
  public:

  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.SubLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class Layer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.Layer) */ {
 public:
  inline Layer() : Layer(nullptr) {};
  virtual ~Layer();

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.Layer";
  }
  protected:
  explicit Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubLayersFieldNumber = 1,
  };
  // repeated .kentik.site.v202106alpha1.SubLayer sub_layers = 1[json_name = "subLayers"];
  int sub_layers_size() const;
  private:
  int _internal_sub_layers_size() const;
  public:
  void clear_sub_layers();
  ::kentik::site::v202106alpha1::SubLayer* mutable_sub_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::SubLayer >*
      mutable_sub_layers();
  private:
  const ::kentik::site::v202106alpha1::SubLayer& _internal_sub_layers(int index) const;
  ::kentik::site::v202106alpha1::SubLayer* _internal_add_sub_layers();
  public:
  const ::kentik::site::v202106alpha1::SubLayer& sub_layers(int index) const;
  ::kentik::site::v202106alpha1::SubLayer* add_sub_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::SubLayer >&
      sub_layers() const;

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::SubLayer > sub_layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class Site PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.Site) */ {
 public:
  inline Site() : Site(nullptr) {};
  virtual ~Site();

  Site(const Site& from);
  Site(Site&& from) noexcept
    : Site() {
    *this = ::std::move(from);
  }

  inline Site& operator=(const Site& from) {
    CopyFrom(from);
    return *this;
  }
  inline Site& operator=(Site&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Site& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Site* internal_default_instance() {
    return reinterpret_cast<const Site*>(
               &_Site_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Site& a, Site& b) {
    a.Swap(&b);
  }
  inline void Swap(Site* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Site* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Site* New() const final {
    return CreateMaybeMessage<Site>(nullptr);
  }

  Site* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Site>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Site& from);
  void MergeFrom(const Site& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Site* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.Site";
  }
  protected:
  explicit Site(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchitectureFieldNumber = 8,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 3,
    kCoordinateFieldNumber = 4,
    kAddressFieldNumber = 5,
    kClassificationFieldNumber = 7,
    kTypeFieldNumber = 6,
  };
  // repeated .kentik.site.v202106alpha1.Layer architecture = 8[json_name = "architecture"];
  int architecture_size() const;
  private:
  int _internal_architecture_size() const;
  public:
  void clear_architecture();
  ::kentik::site::v202106alpha1::Layer* mutable_architecture(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Layer >*
      mutable_architecture();
  private:
  const ::kentik::site::v202106alpha1::Layer& _internal_architecture(int index) const;
  ::kentik::site::v202106alpha1::Layer* _internal_add_architecture();
  public:
  const ::kentik::site::v202106alpha1::Layer& architecture(int index) const;
  ::kentik::site::v202106alpha1::Layer* add_architecture();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Layer >&
      architecture() const;

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 3[json_name = "title"];
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .google.type.LatLng coordinate = 4[json_name = "coordinate"];
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::google::type::LatLng& coordinate() const;
  ::google::type::LatLng* release_coordinate();
  ::google::type::LatLng* mutable_coordinate();
  void set_allocated_coordinate(::google::type::LatLng* coordinate);
  private:
  const ::google::type::LatLng& _internal_coordinate() const;
  ::google::type::LatLng* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::google::type::LatLng* coordinate);
  ::google::type::LatLng* unsafe_arena_release_coordinate();

  // .google.type.PostalAddress address = 5[json_name = "address"];
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::google::type::PostalAddress& address() const;
  ::google::type::PostalAddress* release_address();
  ::google::type::PostalAddress* mutable_address();
  void set_allocated_address(::google::type::PostalAddress* address);
  private:
  const ::google::type::PostalAddress& _internal_address() const;
  ::google::type::PostalAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::google::type::PostalAddress* address);
  ::google::type::PostalAddress* unsafe_arena_release_address();

  // .kentik.site.v202106alpha1.SiteIpClassification classification = 7[json_name = "classification"];
  bool has_classification() const;
  private:
  bool _internal_has_classification() const;
  public:
  void clear_classification();
  const ::kentik::site::v202106alpha1::SiteIpClassification& classification() const;
  ::kentik::site::v202106alpha1::SiteIpClassification* release_classification();
  ::kentik::site::v202106alpha1::SiteIpClassification* mutable_classification();
  void set_allocated_classification(::kentik::site::v202106alpha1::SiteIpClassification* classification);
  private:
  const ::kentik::site::v202106alpha1::SiteIpClassification& _internal_classification() const;
  ::kentik::site::v202106alpha1::SiteIpClassification* _internal_mutable_classification();
  public:
  void unsafe_arena_set_allocated_classification(
      ::kentik::site::v202106alpha1::SiteIpClassification* classification);
  ::kentik::site::v202106alpha1::SiteIpClassification* unsafe_arena_release_classification();

  // .kentik.site.v202106alpha1.SiteType type = 6[json_name = "type"];
  void clear_type();
  ::kentik::site::v202106alpha1::SiteType type() const;
  void set_type(::kentik::site::v202106alpha1::SiteType value);
  private:
  ::kentik::site::v202106alpha1::SiteType _internal_type() const;
  void _internal_set_type(::kentik::site::v202106alpha1::SiteType value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.Site)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Layer > architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::google::type::LatLng* coordinate_;
  ::google::type::PostalAddress* address_;
  ::kentik::site::v202106alpha1::SiteIpClassification* classification_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class ListSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.ListSiteRequest) */ {
 public:
  inline ListSiteRequest() : ListSiteRequest(nullptr) {};
  virtual ~ListSiteRequest();

  ListSiteRequest(const ListSiteRequest& from);
  ListSiteRequest(ListSiteRequest&& from) noexcept
    : ListSiteRequest() {
    *this = ::std::move(from);
  }

  inline ListSiteRequest& operator=(const ListSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSiteRequest& operator=(ListSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSiteRequest* internal_default_instance() {
    return reinterpret_cast<const ListSiteRequest*>(
               &_ListSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListSiteRequest& a, ListSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSiteRequest* New() const final {
    return CreateMaybeMessage<ListSiteRequest>(nullptr);
  }

  ListSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSiteRequest& from);
  void MergeFrom(const ListSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.ListSiteRequest";
  }
  protected:
  explicit ListSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.ListSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class ListSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.ListSiteResponse) */ {
 public:
  inline ListSiteResponse() : ListSiteResponse(nullptr) {};
  virtual ~ListSiteResponse();

  ListSiteResponse(const ListSiteResponse& from);
  ListSiteResponse(ListSiteResponse&& from) noexcept
    : ListSiteResponse() {
    *this = ::std::move(from);
  }

  inline ListSiteResponse& operator=(const ListSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSiteResponse& operator=(ListSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSiteResponse* internal_default_instance() {
    return reinterpret_cast<const ListSiteResponse*>(
               &_ListSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListSiteResponse& a, ListSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSiteResponse* New() const final {
    return CreateMaybeMessage<ListSiteResponse>(nullptr);
  }

  ListSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSiteResponse& from);
  void MergeFrom(const ListSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.ListSiteResponse";
  }
  protected:
  explicit ListSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSitesFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.site.v202106alpha1.Site sites = 1[json_name = "sites"];
  int sites_size() const;
  private:
  int _internal_sites_size() const;
  public:
  void clear_sites();
  ::kentik::site::v202106alpha1::Site* mutable_sites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Site >*
      mutable_sites();
  private:
  const ::kentik::site::v202106alpha1::Site& _internal_sites(int index) const;
  ::kentik::site::v202106alpha1::Site* _internal_add_sites();
  public:
  const ::kentik::site::v202106alpha1::Site& sites(int index) const;
  ::kentik::site::v202106alpha1::Site* add_sites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Site >&
      sites() const;

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.ListSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Site > sites_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class GetSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.GetSiteRequest) */ {
 public:
  inline GetSiteRequest() : GetSiteRequest(nullptr) {};
  virtual ~GetSiteRequest();

  GetSiteRequest(const GetSiteRequest& from);
  GetSiteRequest(GetSiteRequest&& from) noexcept
    : GetSiteRequest() {
    *this = ::std::move(from);
  }

  inline GetSiteRequest& operator=(const GetSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSiteRequest& operator=(GetSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSiteRequest* internal_default_instance() {
    return reinterpret_cast<const GetSiteRequest*>(
               &_GetSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetSiteRequest& a, GetSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSiteRequest* New() const final {
    return CreateMaybeMessage<GetSiteRequest>(nullptr);
  }

  GetSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSiteRequest& from);
  void MergeFrom(const GetSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.GetSiteRequest";
  }
  protected:
  explicit GetSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.GetSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class GetSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.GetSiteResponse) */ {
 public:
  inline GetSiteResponse() : GetSiteResponse(nullptr) {};
  virtual ~GetSiteResponse();

  GetSiteResponse(const GetSiteResponse& from);
  GetSiteResponse(GetSiteResponse&& from) noexcept
    : GetSiteResponse() {
    *this = ::std::move(from);
  }

  inline GetSiteResponse& operator=(const GetSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSiteResponse& operator=(GetSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSiteResponse* internal_default_instance() {
    return reinterpret_cast<const GetSiteResponse*>(
               &_GetSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetSiteResponse& a, GetSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSiteResponse* New() const final {
    return CreateMaybeMessage<GetSiteResponse>(nullptr);
  }

  GetSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSiteResponse& from);
  void MergeFrom(const GetSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.GetSiteResponse";
  }
  protected:
  explicit GetSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202106alpha1::Site& site() const;
  ::kentik::site::v202106alpha1::Site* release_site();
  ::kentik::site::v202106alpha1::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202106alpha1::Site* site);
  private:
  const ::kentik::site::v202106alpha1::Site& _internal_site() const;
  ::kentik::site::v202106alpha1::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202106alpha1::Site* site);
  ::kentik::site::v202106alpha1::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.GetSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202106alpha1::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class CreateSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.CreateSiteRequest) */ {
 public:
  inline CreateSiteRequest() : CreateSiteRequest(nullptr) {};
  virtual ~CreateSiteRequest();

  CreateSiteRequest(const CreateSiteRequest& from);
  CreateSiteRequest(CreateSiteRequest&& from) noexcept
    : CreateSiteRequest() {
    *this = ::std::move(from);
  }

  inline CreateSiteRequest& operator=(const CreateSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSiteRequest& operator=(CreateSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSiteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSiteRequest*>(
               &_CreateSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateSiteRequest& a, CreateSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSiteRequest* New() const final {
    return CreateMaybeMessage<CreateSiteRequest>(nullptr);
  }

  CreateSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSiteRequest& from);
  void MergeFrom(const CreateSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.CreateSiteRequest";
  }
  protected:
  explicit CreateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202106alpha1::Site& site() const;
  ::kentik::site::v202106alpha1::Site* release_site();
  ::kentik::site::v202106alpha1::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202106alpha1::Site* site);
  private:
  const ::kentik::site::v202106alpha1::Site& _internal_site() const;
  ::kentik::site::v202106alpha1::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202106alpha1::Site* site);
  ::kentik::site::v202106alpha1::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.CreateSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202106alpha1::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class CreateSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.CreateSiteResponse) */ {
 public:
  inline CreateSiteResponse() : CreateSiteResponse(nullptr) {};
  virtual ~CreateSiteResponse();

  CreateSiteResponse(const CreateSiteResponse& from);
  CreateSiteResponse(CreateSiteResponse&& from) noexcept
    : CreateSiteResponse() {
    *this = ::std::move(from);
  }

  inline CreateSiteResponse& operator=(const CreateSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSiteResponse& operator=(CreateSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSiteResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSiteResponse*>(
               &_CreateSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateSiteResponse& a, CreateSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSiteResponse* New() const final {
    return CreateMaybeMessage<CreateSiteResponse>(nullptr);
  }

  CreateSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSiteResponse& from);
  void MergeFrom(const CreateSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.CreateSiteResponse";
  }
  protected:
  explicit CreateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202106alpha1::Site& site() const;
  ::kentik::site::v202106alpha1::Site* release_site();
  ::kentik::site::v202106alpha1::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202106alpha1::Site* site);
  private:
  const ::kentik::site::v202106alpha1::Site& _internal_site() const;
  ::kentik::site::v202106alpha1::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202106alpha1::Site* site);
  ::kentik::site::v202106alpha1::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.CreateSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202106alpha1::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class UpdateSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.UpdateSiteRequest) */ {
 public:
  inline UpdateSiteRequest() : UpdateSiteRequest(nullptr) {};
  virtual ~UpdateSiteRequest();

  UpdateSiteRequest(const UpdateSiteRequest& from);
  UpdateSiteRequest(UpdateSiteRequest&& from) noexcept
    : UpdateSiteRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSiteRequest& operator=(const UpdateSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSiteRequest& operator=(UpdateSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSiteRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSiteRequest*>(
               &_UpdateSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateSiteRequest& a, UpdateSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSiteRequest* New() const final {
    return CreateMaybeMessage<UpdateSiteRequest>(nullptr);
  }

  UpdateSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSiteRequest& from);
  void MergeFrom(const UpdateSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.UpdateSiteRequest";
  }
  protected:
  explicit UpdateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202106alpha1::Site& site() const;
  ::kentik::site::v202106alpha1::Site* release_site();
  ::kentik::site::v202106alpha1::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202106alpha1::Site* site);
  private:
  const ::kentik::site::v202106alpha1::Site& _internal_site() const;
  ::kentik::site::v202106alpha1::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202106alpha1::Site* site);
  ::kentik::site::v202106alpha1::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.UpdateSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202106alpha1::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class UpdateSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.UpdateSiteResponse) */ {
 public:
  inline UpdateSiteResponse() : UpdateSiteResponse(nullptr) {};
  virtual ~UpdateSiteResponse();

  UpdateSiteResponse(const UpdateSiteResponse& from);
  UpdateSiteResponse(UpdateSiteResponse&& from) noexcept
    : UpdateSiteResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSiteResponse& operator=(const UpdateSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSiteResponse& operator=(UpdateSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSiteResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSiteResponse*>(
               &_UpdateSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateSiteResponse& a, UpdateSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSiteResponse* New() const final {
    return CreateMaybeMessage<UpdateSiteResponse>(nullptr);
  }

  UpdateSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSiteResponse& from);
  void MergeFrom(const UpdateSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.UpdateSiteResponse";
  }
  protected:
  explicit UpdateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteFieldNumber = 1,
  };
  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::site::v202106alpha1::Site& site() const;
  ::kentik::site::v202106alpha1::Site* release_site();
  ::kentik::site::v202106alpha1::Site* mutable_site();
  void set_allocated_site(::kentik::site::v202106alpha1::Site* site);
  private:
  const ::kentik::site::v202106alpha1::Site& _internal_site() const;
  ::kentik::site::v202106alpha1::Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::site::v202106alpha1::Site* site);
  ::kentik::site::v202106alpha1::Site* unsafe_arena_release_site();

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.UpdateSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::site::v202106alpha1::Site* site_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class DeleteSiteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.DeleteSiteRequest) */ {
 public:
  inline DeleteSiteRequest() : DeleteSiteRequest(nullptr) {};
  virtual ~DeleteSiteRequest();

  DeleteSiteRequest(const DeleteSiteRequest& from);
  DeleteSiteRequest(DeleteSiteRequest&& from) noexcept
    : DeleteSiteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSiteRequest& operator=(const DeleteSiteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSiteRequest& operator=(DeleteSiteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSiteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSiteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSiteRequest*>(
               &_DeleteSiteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteSiteRequest& a, DeleteSiteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSiteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSiteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSiteRequest* New() const final {
    return CreateMaybeMessage<DeleteSiteRequest>(nullptr);
  }

  DeleteSiteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSiteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSiteRequest& from);
  void MergeFrom(const DeleteSiteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSiteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.DeleteSiteRequest";
  }
  protected:
  explicit DeleteSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.DeleteSiteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// -------------------------------------------------------------------

class DeleteSiteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.site.v202106alpha1.DeleteSiteResponse) */ {
 public:
  inline DeleteSiteResponse() : DeleteSiteResponse(nullptr) {};
  virtual ~DeleteSiteResponse();

  DeleteSiteResponse(const DeleteSiteResponse& from);
  DeleteSiteResponse(DeleteSiteResponse&& from) noexcept
    : DeleteSiteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSiteResponse& operator=(const DeleteSiteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSiteResponse& operator=(DeleteSiteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSiteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSiteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSiteResponse*>(
               &_DeleteSiteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteSiteResponse& a, DeleteSiteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSiteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSiteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSiteResponse* New() const final {
    return CreateMaybeMessage<DeleteSiteResponse>(nullptr);
  }

  DeleteSiteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSiteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSiteResponse& from);
  void MergeFrom(const DeleteSiteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSiteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.site.v202106alpha1.DeleteSiteResponse";
  }
  protected:
  explicit DeleteSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
    return ::descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.site.v202106alpha1.DeleteSiteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteIpClassification

// repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks"];
inline int SiteIpClassification::_internal_infrastructure_networks_size() const {
  return infrastructure_networks_.size();
}
inline int SiteIpClassification::infrastructure_networks_size() const {
  return _internal_infrastructure_networks_size();
}
inline void SiteIpClassification::clear_infrastructure_networks() {
  infrastructure_networks_.Clear();
}
inline std::string* SiteIpClassification::add_infrastructure_networks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  return _internal_add_infrastructure_networks();
}
inline const std::string& SiteIpClassification::_internal_infrastructure_networks(int index) const {
  return infrastructure_networks_.Get(index);
}
inline const std::string& SiteIpClassification::infrastructure_networks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  return _internal_infrastructure_networks(index);
}
inline std::string* SiteIpClassification::mutable_infrastructure_networks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  return infrastructure_networks_.Mutable(index);
}
inline void SiteIpClassification::set_infrastructure_networks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  infrastructure_networks_.Mutable(index)->assign(value);
}
inline void SiteIpClassification::set_infrastructure_networks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  infrastructure_networks_.Mutable(index)->assign(std::move(value));
}
inline void SiteIpClassification::set_infrastructure_networks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infrastructure_networks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
}
inline void SiteIpClassification::set_infrastructure_networks(int index, const char* value, size_t size) {
  infrastructure_networks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
}
inline std::string* SiteIpClassification::_internal_add_infrastructure_networks() {
  return infrastructure_networks_.Add();
}
inline void SiteIpClassification::add_infrastructure_networks(const std::string& value) {
  infrastructure_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
}
inline void SiteIpClassification::add_infrastructure_networks(std::string&& value) {
  infrastructure_networks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
}
inline void SiteIpClassification::add_infrastructure_networks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infrastructure_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
}
inline void SiteIpClassification::add_infrastructure_networks(const char* value, size_t size) {
  infrastructure_networks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteIpClassification::infrastructure_networks() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  return infrastructure_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteIpClassification::mutable_infrastructure_networks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks)
  return &infrastructure_networks_;
}

// repeated string user_access_networks = 2[json_name = "userAccessNetworks"];
inline int SiteIpClassification::_internal_user_access_networks_size() const {
  return user_access_networks_.size();
}
inline int SiteIpClassification::user_access_networks_size() const {
  return _internal_user_access_networks_size();
}
inline void SiteIpClassification::clear_user_access_networks() {
  user_access_networks_.Clear();
}
inline std::string* SiteIpClassification::add_user_access_networks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  return _internal_add_user_access_networks();
}
inline const std::string& SiteIpClassification::_internal_user_access_networks(int index) const {
  return user_access_networks_.Get(index);
}
inline const std::string& SiteIpClassification::user_access_networks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  return _internal_user_access_networks(index);
}
inline std::string* SiteIpClassification::mutable_user_access_networks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  return user_access_networks_.Mutable(index);
}
inline void SiteIpClassification::set_user_access_networks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  user_access_networks_.Mutable(index)->assign(value);
}
inline void SiteIpClassification::set_user_access_networks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  user_access_networks_.Mutable(index)->assign(std::move(value));
}
inline void SiteIpClassification::set_user_access_networks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_access_networks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
}
inline void SiteIpClassification::set_user_access_networks(int index, const char* value, size_t size) {
  user_access_networks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
}
inline std::string* SiteIpClassification::_internal_add_user_access_networks() {
  return user_access_networks_.Add();
}
inline void SiteIpClassification::add_user_access_networks(const std::string& value) {
  user_access_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
}
inline void SiteIpClassification::add_user_access_networks(std::string&& value) {
  user_access_networks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
}
inline void SiteIpClassification::add_user_access_networks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_access_networks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
}
inline void SiteIpClassification::add_user_access_networks(const char* value, size_t size) {
  user_access_networks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteIpClassification::user_access_networks() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  return user_access_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteIpClassification::mutable_user_access_networks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.SiteIpClassification.user_access_networks)
  return &user_access_networks_;
}

// repeated string other_ips = 3[json_name = "otherIps"];
inline int SiteIpClassification::_internal_other_ips_size() const {
  return other_ips_.size();
}
inline int SiteIpClassification::other_ips_size() const {
  return _internal_other_ips_size();
}
inline void SiteIpClassification::clear_other_ips() {
  other_ips_.Clear();
}
inline std::string* SiteIpClassification::add_other_ips() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  return _internal_add_other_ips();
}
inline const std::string& SiteIpClassification::_internal_other_ips(int index) const {
  return other_ips_.Get(index);
}
inline const std::string& SiteIpClassification::other_ips(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  return _internal_other_ips(index);
}
inline std::string* SiteIpClassification::mutable_other_ips(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  return other_ips_.Mutable(index);
}
inline void SiteIpClassification::set_other_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  other_ips_.Mutable(index)->assign(value);
}
inline void SiteIpClassification::set_other_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  other_ips_.Mutable(index)->assign(std::move(value));
}
inline void SiteIpClassification::set_other_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
}
inline void SiteIpClassification::set_other_ips(int index, const char* value, size_t size) {
  other_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
}
inline std::string* SiteIpClassification::_internal_add_other_ips() {
  return other_ips_.Add();
}
inline void SiteIpClassification::add_other_ips(const std::string& value) {
  other_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
}
inline void SiteIpClassification::add_other_ips(std::string&& value) {
  other_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
}
inline void SiteIpClassification::add_other_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
}
inline void SiteIpClassification::add_other_ips(const char* value, size_t size) {
  other_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteIpClassification::other_ips() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  return other_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteIpClassification::mutable_other_ips() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.SiteIpClassification.other_ips)
  return &other_ips_;
}

// -------------------------------------------------------------------

// SubLayer

// string name = 1[json_name = "name"];
inline void SubLayer::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubLayer::name() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.SubLayer.name)
  return _internal_name();
}
inline void SubLayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SubLayer.name)
}
inline std::string* SubLayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.SubLayer.name)
  return _internal_mutable_name();
}
inline const std::string& SubLayer::_internal_name() const {
  return name_.Get();
}
inline void SubLayer::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubLayer::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202106alpha1.SubLayer.name)
}
inline void SubLayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.SubLayer.name)
}
inline void SubLayer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.SubLayer.name)
}
inline std::string* SubLayer::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubLayer::release_name() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.SubLayer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubLayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.SubLayer.name)
}
inline std::string* SubLayer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202106alpha1.SubLayer.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubLayer::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.SubLayer.name)
}

// repeated string device_ids = 2[json_name = "deviceIds"];
inline int SubLayer::_internal_device_ids_size() const {
  return device_ids_.size();
}
inline int SubLayer::device_ids_size() const {
  return _internal_device_ids_size();
}
inline void SubLayer::clear_device_ids() {
  device_ids_.Clear();
}
inline std::string* SubLayer::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.site.v202106alpha1.SubLayer.device_ids)
  return _internal_add_device_ids();
}
inline const std::string& SubLayer::_internal_device_ids(int index) const {
  return device_ids_.Get(index);
}
inline const std::string& SubLayer::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.SubLayer.device_ids)
  return _internal_device_ids(index);
}
inline std::string* SubLayer::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.SubLayer.device_ids)
  return device_ids_.Mutable(index);
}
inline void SubLayer::set_device_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SubLayer.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
inline void SubLayer::set_device_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.SubLayer.device_ids)
  device_ids_.Mutable(index)->assign(std::move(value));
}
inline void SubLayer::set_device_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.SubLayer.device_ids)
}
inline void SubLayer::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.SubLayer.device_ids)
}
inline std::string* SubLayer::_internal_add_device_ids() {
  return device_ids_.Add();
}
inline void SubLayer::add_device_ids(const std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SubLayer.device_ids)
}
inline void SubLayer::add_device_ids(std::string&& value) {
  device_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.SubLayer.device_ids)
}
inline void SubLayer::add_device_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.site.v202106alpha1.SubLayer.device_ids)
}
inline void SubLayer::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.site.v202106alpha1.SubLayer.device_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubLayer::device_ids() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.SubLayer.device_ids)
  return device_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubLayer::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.SubLayer.device_ids)
  return &device_ids_;
}

// -------------------------------------------------------------------

// Layer

// repeated .kentik.site.v202106alpha1.SubLayer sub_layers = 1[json_name = "subLayers"];
inline int Layer::_internal_sub_layers_size() const {
  return sub_layers_.size();
}
inline int Layer::sub_layers_size() const {
  return _internal_sub_layers_size();
}
inline void Layer::clear_sub_layers() {
  sub_layers_.Clear();
}
inline ::kentik::site::v202106alpha1::SubLayer* Layer::mutable_sub_layers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Layer.sub_layers)
  return sub_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::SubLayer >*
Layer::mutable_sub_layers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.Layer.sub_layers)
  return &sub_layers_;
}
inline const ::kentik::site::v202106alpha1::SubLayer& Layer::_internal_sub_layers(int index) const {
  return sub_layers_.Get(index);
}
inline const ::kentik::site::v202106alpha1::SubLayer& Layer::sub_layers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Layer.sub_layers)
  return _internal_sub_layers(index);
}
inline ::kentik::site::v202106alpha1::SubLayer* Layer::_internal_add_sub_layers() {
  return sub_layers_.Add();
}
inline ::kentik::site::v202106alpha1::SubLayer* Layer::add_sub_layers() {
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.Layer.sub_layers)
  return _internal_add_sub_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::SubLayer >&
Layer::sub_layers() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.Layer.sub_layers)
  return sub_layers_;
}

// -------------------------------------------------------------------

// Site

// string id = 1[json_name = "id"];
inline void Site::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.id)
  return _internal_id();
}
inline void Site::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.Site.id)
}
inline std::string* Site::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Site.id)
  return _internal_mutable_id();
}
inline const std::string& Site::_internal_id() const {
  return id_.Get();
}
inline void Site::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202106alpha1.Site.id)
}
inline void Site::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.Site.id)
}
inline void Site::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.Site.id)
}
inline std::string* Site::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.Site.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.Site.id)
}
inline std::string* Site::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202106alpha1.Site.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.Site.id)
}

// string title = 3[json_name = "title"];
inline void Site::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Site::title() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.title)
  return _internal_title();
}
inline void Site::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.Site.title)
}
inline std::string* Site::mutable_title() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Site.title)
  return _internal_mutable_title();
}
inline const std::string& Site::_internal_title() const {
  return title_.Get();
}
inline void Site::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Site::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202106alpha1.Site.title)
}
inline void Site::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.Site.title)
}
inline void Site::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.Site.title)
}
inline std::string* Site::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Site::release_title() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.Site.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Site::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.Site.title)
}
inline std::string* Site::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202106alpha1.Site.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Site::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.Site.title)
}

// .google.type.LatLng coordinate = 4[json_name = "coordinate"];
inline bool Site::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool Site::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::google::type::LatLng& Site::_internal_coordinate() const {
  const ::google::type::LatLng* p = coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline const ::google::type::LatLng& Site::coordinate() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.coordinate)
  return _internal_coordinate();
}
inline void Site::unsafe_arena_set_allocated_coordinate(
    ::google::type::LatLng* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.Site.coordinate)
}
inline ::google::type::LatLng* Site::release_coordinate() {
  auto temp = unsafe_arena_release_coordinate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::type::LatLng* Site::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.Site.coordinate)
  
  ::google::type::LatLng* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::google::type::LatLng* Site::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::LatLng>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::google::type::LatLng* Site::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Site.coordinate)
  return _internal_mutable_coordinate();
}
inline void Site::set_allocated_coordinate(::google::type::LatLng* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate)->GetArena();
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.Site.coordinate)
}

// .google.type.PostalAddress address = 5[json_name = "address"];
inline bool Site::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool Site::has_address() const {
  return _internal_has_address();
}
inline const ::google::type::PostalAddress& Site::_internal_address() const {
  const ::google::type::PostalAddress* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::type::PostalAddress*>(
      &::google::type::_PostalAddress_default_instance_);
}
inline const ::google::type::PostalAddress& Site::address() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.address)
  return _internal_address();
}
inline void Site::unsafe_arena_set_allocated_address(
    ::google::type::PostalAddress* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.Site.address)
}
inline ::google::type::PostalAddress* Site::release_address() {
  auto temp = unsafe_arena_release_address();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::type::PostalAddress* Site::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.Site.address)
  
  ::google::type::PostalAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::google::type::PostalAddress* Site::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::PostalAddress>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::google::type::PostalAddress* Site::mutable_address() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Site.address)
  return _internal_mutable_address();
}
inline void Site::set_allocated_address(::google::type::PostalAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.Site.address)
}

// .kentik.site.v202106alpha1.SiteType type = 6[json_name = "type"];
inline void Site::clear_type() {
  type_ = 0;
}
inline ::kentik::site::v202106alpha1::SiteType Site::_internal_type() const {
  return static_cast< ::kentik::site::v202106alpha1::SiteType >(type_);
}
inline ::kentik::site::v202106alpha1::SiteType Site::type() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.type)
  return _internal_type();
}
inline void Site::_internal_set_type(::kentik::site::v202106alpha1::SiteType value) {
  
  type_ = value;
}
inline void Site::set_type(::kentik::site::v202106alpha1::SiteType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.Site.type)
}

// .kentik.site.v202106alpha1.SiteIpClassification classification = 7[json_name = "classification"];
inline bool Site::_internal_has_classification() const {
  return this != internal_default_instance() && classification_ != nullptr;
}
inline bool Site::has_classification() const {
  return _internal_has_classification();
}
inline void Site::clear_classification() {
  if (GetArena() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
inline const ::kentik::site::v202106alpha1::SiteIpClassification& Site::_internal_classification() const {
  const ::kentik::site::v202106alpha1::SiteIpClassification* p = classification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202106alpha1::SiteIpClassification*>(
      &::kentik::site::v202106alpha1::_SiteIpClassification_default_instance_);
}
inline const ::kentik::site::v202106alpha1::SiteIpClassification& Site::classification() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.classification)
  return _internal_classification();
}
inline void Site::unsafe_arena_set_allocated_classification(
    ::kentik::site::v202106alpha1::SiteIpClassification* classification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  classification_ = classification;
  if (classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.Site.classification)
}
inline ::kentik::site::v202106alpha1::SiteIpClassification* Site::release_classification() {
  auto temp = unsafe_arena_release_classification();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202106alpha1::SiteIpClassification* Site::unsafe_arena_release_classification() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.Site.classification)
  
  ::kentik::site::v202106alpha1::SiteIpClassification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::kentik::site::v202106alpha1::SiteIpClassification* Site::_internal_mutable_classification() {
  
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202106alpha1::SiteIpClassification>(GetArena());
    classification_ = p;
  }
  return classification_;
}
inline ::kentik::site::v202106alpha1::SiteIpClassification* Site::mutable_classification() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Site.classification)
  return _internal_mutable_classification();
}
inline void Site::set_allocated_classification(::kentik::site::v202106alpha1::SiteIpClassification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete classification_;
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(classification);
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    
  } else {
    
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.Site.classification)
}

// repeated .kentik.site.v202106alpha1.Layer architecture = 8[json_name = "architecture"];
inline int Site::_internal_architecture_size() const {
  return architecture_.size();
}
inline int Site::architecture_size() const {
  return _internal_architecture_size();
}
inline void Site::clear_architecture() {
  architecture_.Clear();
}
inline ::kentik::site::v202106alpha1::Layer* Site::mutable_architecture(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.Site.architecture)
  return architecture_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Layer >*
Site::mutable_architecture() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.Site.architecture)
  return &architecture_;
}
inline const ::kentik::site::v202106alpha1::Layer& Site::_internal_architecture(int index) const {
  return architecture_.Get(index);
}
inline const ::kentik::site::v202106alpha1::Layer& Site::architecture(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.Site.architecture)
  return _internal_architecture(index);
}
inline ::kentik::site::v202106alpha1::Layer* Site::_internal_add_architecture() {
  return architecture_.Add();
}
inline ::kentik::site::v202106alpha1::Layer* Site::add_architecture() {
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.Site.architecture)
  return _internal_add_architecture();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Layer >&
Site::architecture() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.Site.architecture)
  return architecture_;
}

// -------------------------------------------------------------------

// ListSiteRequest

// -------------------------------------------------------------------

// ListSiteResponse

// repeated .kentik.site.v202106alpha1.Site sites = 1[json_name = "sites"];
inline int ListSiteResponse::_internal_sites_size() const {
  return sites_.size();
}
inline int ListSiteResponse::sites_size() const {
  return _internal_sites_size();
}
inline void ListSiteResponse::clear_sites() {
  sites_.Clear();
}
inline ::kentik::site::v202106alpha1::Site* ListSiteResponse::mutable_sites(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.ListSiteResponse.sites)
  return sites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Site >*
ListSiteResponse::mutable_sites() {
  // @@protoc_insertion_point(field_mutable_list:kentik.site.v202106alpha1.ListSiteResponse.sites)
  return &sites_;
}
inline const ::kentik::site::v202106alpha1::Site& ListSiteResponse::_internal_sites(int index) const {
  return sites_.Get(index);
}
inline const ::kentik::site::v202106alpha1::Site& ListSiteResponse::sites(int index) const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.ListSiteResponse.sites)
  return _internal_sites(index);
}
inline ::kentik::site::v202106alpha1::Site* ListSiteResponse::_internal_add_sites() {
  return sites_.Add();
}
inline ::kentik::site::v202106alpha1::Site* ListSiteResponse::add_sites() {
  // @@protoc_insertion_point(field_add:kentik.site.v202106alpha1.ListSiteResponse.sites)
  return _internal_add_sites();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::site::v202106alpha1::Site >&
ListSiteResponse::sites() const {
  // @@protoc_insertion_point(field_list:kentik.site.v202106alpha1.ListSiteResponse.sites)
  return sites_;
}

// uint32 invalid_count = 2[json_name = "invalidCount"];
inline void ListSiteResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSiteResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSiteResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.ListSiteResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListSiteResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListSiteResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.ListSiteResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetSiteRequest

// string id = 1[json_name = "id"];
inline void GetSiteRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSiteRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.GetSiteRequest.id)
  return _internal_id();
}
inline void GetSiteRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.GetSiteRequest.id)
}
inline std::string* GetSiteRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.GetSiteRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetSiteRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSiteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSiteRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202106alpha1.GetSiteRequest.id)
}
inline void GetSiteRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.GetSiteRequest.id)
}
inline void GetSiteRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.GetSiteRequest.id)
}
inline std::string* GetSiteRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSiteRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.GetSiteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSiteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.GetSiteRequest.id)
}
inline std::string* GetSiteRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202106alpha1.GetSiteRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSiteRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.GetSiteRequest.id)
}

// -------------------------------------------------------------------

// GetSiteResponse

// .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
inline bool GetSiteResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool GetSiteResponse::has_site() const {
  return _internal_has_site();
}
inline void GetSiteResponse::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202106alpha1::Site& GetSiteResponse::_internal_site() const {
  const ::kentik::site::v202106alpha1::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202106alpha1::Site*>(
      &::kentik::site::v202106alpha1::_Site_default_instance_);
}
inline const ::kentik::site::v202106alpha1::Site& GetSiteResponse::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.GetSiteResponse.site)
  return _internal_site();
}
inline void GetSiteResponse::unsafe_arena_set_allocated_site(
    ::kentik::site::v202106alpha1::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.GetSiteResponse.site)
}
inline ::kentik::site::v202106alpha1::Site* GetSiteResponse::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* GetSiteResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.GetSiteResponse.site)
  
  ::kentik::site::v202106alpha1::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* GetSiteResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202106alpha1::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202106alpha1::Site* GetSiteResponse::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.GetSiteResponse.site)
  return _internal_mutable_site();
}
inline void GetSiteResponse::set_allocated_site(::kentik::site::v202106alpha1::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.GetSiteResponse.site)
}

// -------------------------------------------------------------------

// CreateSiteRequest

// .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
inline bool CreateSiteRequest::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool CreateSiteRequest::has_site() const {
  return _internal_has_site();
}
inline void CreateSiteRequest::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202106alpha1::Site& CreateSiteRequest::_internal_site() const {
  const ::kentik::site::v202106alpha1::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202106alpha1::Site*>(
      &::kentik::site::v202106alpha1::_Site_default_instance_);
}
inline const ::kentik::site::v202106alpha1::Site& CreateSiteRequest::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.CreateSiteRequest.site)
  return _internal_site();
}
inline void CreateSiteRequest::unsafe_arena_set_allocated_site(
    ::kentik::site::v202106alpha1::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.CreateSiteRequest.site)
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteRequest::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteRequest::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.CreateSiteRequest.site)
  
  ::kentik::site::v202106alpha1::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteRequest::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202106alpha1::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteRequest::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.CreateSiteRequest.site)
  return _internal_mutable_site();
}
inline void CreateSiteRequest::set_allocated_site(::kentik::site::v202106alpha1::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.CreateSiteRequest.site)
}

// -------------------------------------------------------------------

// CreateSiteResponse

// .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
inline bool CreateSiteResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool CreateSiteResponse::has_site() const {
  return _internal_has_site();
}
inline void CreateSiteResponse::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202106alpha1::Site& CreateSiteResponse::_internal_site() const {
  const ::kentik::site::v202106alpha1::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202106alpha1::Site*>(
      &::kentik::site::v202106alpha1::_Site_default_instance_);
}
inline const ::kentik::site::v202106alpha1::Site& CreateSiteResponse::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.CreateSiteResponse.site)
  return _internal_site();
}
inline void CreateSiteResponse::unsafe_arena_set_allocated_site(
    ::kentik::site::v202106alpha1::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.CreateSiteResponse.site)
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteResponse::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.CreateSiteResponse.site)
  
  ::kentik::site::v202106alpha1::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202106alpha1::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202106alpha1::Site* CreateSiteResponse::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.CreateSiteResponse.site)
  return _internal_mutable_site();
}
inline void CreateSiteResponse::set_allocated_site(::kentik::site::v202106alpha1::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.CreateSiteResponse.site)
}

// -------------------------------------------------------------------

// UpdateSiteRequest

// .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
inline bool UpdateSiteRequest::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool UpdateSiteRequest::has_site() const {
  return _internal_has_site();
}
inline void UpdateSiteRequest::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202106alpha1::Site& UpdateSiteRequest::_internal_site() const {
  const ::kentik::site::v202106alpha1::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202106alpha1::Site*>(
      &::kentik::site::v202106alpha1::_Site_default_instance_);
}
inline const ::kentik::site::v202106alpha1::Site& UpdateSiteRequest::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.UpdateSiteRequest.site)
  return _internal_site();
}
inline void UpdateSiteRequest::unsafe_arena_set_allocated_site(
    ::kentik::site::v202106alpha1::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.UpdateSiteRequest.site)
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteRequest::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteRequest::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.UpdateSiteRequest.site)
  
  ::kentik::site::v202106alpha1::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteRequest::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202106alpha1::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteRequest::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.UpdateSiteRequest.site)
  return _internal_mutable_site();
}
inline void UpdateSiteRequest::set_allocated_site(::kentik::site::v202106alpha1::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.UpdateSiteRequest.site)
}

// -------------------------------------------------------------------

// UpdateSiteResponse

// .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
inline bool UpdateSiteResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool UpdateSiteResponse::has_site() const {
  return _internal_has_site();
}
inline void UpdateSiteResponse::clear_site() {
  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::kentik::site::v202106alpha1::Site& UpdateSiteResponse::_internal_site() const {
  const ::kentik::site::v202106alpha1::Site* p = site_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::site::v202106alpha1::Site*>(
      &::kentik::site::v202106alpha1::_Site_default_instance_);
}
inline const ::kentik::site::v202106alpha1::Site& UpdateSiteResponse::site() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.UpdateSiteResponse.site)
  return _internal_site();
}
inline void UpdateSiteResponse::unsafe_arena_set_allocated_site(
    ::kentik::site::v202106alpha1::Site* site) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.UpdateSiteResponse.site)
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteResponse::release_site() {
  auto temp = unsafe_arena_release_site();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.UpdateSiteResponse.site)
  
  ::kentik::site::v202106alpha1::Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::site::v202106alpha1::Site>(GetArena());
    site_ = p;
  }
  return site_;
}
inline ::kentik::site::v202106alpha1::Site* UpdateSiteResponse::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.UpdateSiteResponse.site)
  return _internal_mutable_site();
}
inline void UpdateSiteResponse::set_allocated_site(::kentik::site::v202106alpha1::Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.UpdateSiteResponse.site)
}

// -------------------------------------------------------------------

// DeleteSiteRequest

// string id = 1[json_name = "id"];
inline void DeleteSiteRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteSiteRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.site.v202106alpha1.DeleteSiteRequest.id)
  return _internal_id();
}
inline void DeleteSiteRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.site.v202106alpha1.DeleteSiteRequest.id)
}
inline std::string* DeleteSiteRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.site.v202106alpha1.DeleteSiteRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteSiteRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSiteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteSiteRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.site.v202106alpha1.DeleteSiteRequest.id)
}
inline void DeleteSiteRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.site.v202106alpha1.DeleteSiteRequest.id)
}
inline void DeleteSiteRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.site.v202106alpha1.DeleteSiteRequest.id)
}
inline std::string* DeleteSiteRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteSiteRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.site.v202106alpha1.DeleteSiteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSiteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.site.v202106alpha1.DeleteSiteRequest.id)
}
inline std::string* DeleteSiteRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.site.v202106alpha1.DeleteSiteRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteSiteRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.site.v202106alpha1.DeleteSiteRequest.id)
}

// -------------------------------------------------------------------

// DeleteSiteResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202106alpha1
}  // namespace site
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::site::v202106alpha1::SiteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::site::v202106alpha1::SiteType>() {
  return ::kentik::site::v202106alpha1::SiteType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fsite_2fv202106alpha1_2fsite_2eproto
