// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/site/v202106alpha1/site.proto

#include "kentik/site/v202106alpha1/site.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2flatlng_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatLng_google_2ftype_2flatlng_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2fpostal_5faddress_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostalAddress_google_2ftype_2fpostal_5faddress_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202106alpha1_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202106alpha1_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202106alpha1_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsite_2fv202106alpha1_2fsite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto;
namespace kentik {
namespace site {
namespace v202106alpha1 {
class SiteIpClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteIpClassification> _instance;
} _SiteIpClassification_default_instance_;
class SubLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubLayer> _instance;
} _SubLayer_default_instance_;
class LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layer> _instance;
} _Layer_default_instance_;
class SiteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Site> _instance;
} _Site_default_instance_;
class ListSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSiteRequest> _instance;
} _ListSiteRequest_default_instance_;
class ListSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSiteResponse> _instance;
} _ListSiteResponse_default_instance_;
class GetSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSiteRequest> _instance;
} _GetSiteRequest_default_instance_;
class GetSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSiteResponse> _instance;
} _GetSiteResponse_default_instance_;
class CreateSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSiteRequest> _instance;
} _CreateSiteRequest_default_instance_;
class CreateSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSiteResponse> _instance;
} _CreateSiteResponse_default_instance_;
class UpdateSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSiteRequest> _instance;
} _UpdateSiteRequest_default_instance_;
class UpdateSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSiteResponse> _instance;
} _UpdateSiteResponse_default_instance_;
class DeleteSiteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSiteRequest> _instance;
} _DeleteSiteRequest_default_instance_;
class DeleteSiteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSiteResponse> _instance;
} _DeleteSiteResponse_default_instance_;
}  // namespace v202106alpha1
}  // namespace site
}  // namespace kentik
static void InitDefaultsscc_info_CreateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_CreateSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::CreateSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::CreateSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_CreateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_CreateSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::CreateSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::CreateSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_DeleteSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_DeleteSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::DeleteSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::DeleteSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_DeleteSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::DeleteSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::DeleteSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_GetSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_GetSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::GetSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::GetSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_GetSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_GetSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::GetSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::GetSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_Layer_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_ListSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_ListSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::ListSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::ListSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_ListSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_ListSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::ListSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::ListSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_Site_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::Site();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::Site::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_LatLng_google_2ftype_2flatlng_2eproto.base,
      &scc_info_PostalAddress_google_2ftype_2fpostal_5faddress_2eproto.base,
      &scc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
      &scc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_SiteIpClassification_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::SiteIpClassification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::SiteIpClassification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_SubLayer_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::SubLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::SubLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {}};

static void InitDefaultsscc_info_UpdateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_UpdateSiteRequest_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::UpdateSiteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::UpdateSiteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::site::v202106alpha1::_UpdateSiteResponse_default_instance_;
    new (ptr) ::kentik::site::v202106alpha1::UpdateSiteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::site::v202106alpha1::UpdateSiteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto}, {
      &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fsite_2fv202106alpha1_2fsite_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fsite_2fv202106alpha1_2fsite_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fsite_2fv202106alpha1_2fsite_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SiteIpClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SiteIpClassification, infrastructure_networks_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SiteIpClassification, user_access_networks_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SiteIpClassification, other_ips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SubLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SubLayer, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::SubLayer, device_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Layer, sub_layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, title_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, coordinate_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, address_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, classification_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::Site, architecture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::ListSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::ListSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::ListSiteResponse, sites_),
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::ListSiteResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::GetSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::GetSiteRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::GetSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::GetSiteResponse, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::CreateSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::CreateSiteRequest, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::CreateSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::CreateSiteResponse, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::UpdateSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::UpdateSiteRequest, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::UpdateSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::UpdateSiteResponse, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::DeleteSiteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::DeleteSiteRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::site::v202106alpha1::DeleteSiteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::site::v202106alpha1::SiteIpClassification)},
  { 8, -1, sizeof(::kentik::site::v202106alpha1::SubLayer)},
  { 15, -1, sizeof(::kentik::site::v202106alpha1::Layer)},
  { 21, -1, sizeof(::kentik::site::v202106alpha1::Site)},
  { 33, -1, sizeof(::kentik::site::v202106alpha1::ListSiteRequest)},
  { 38, -1, sizeof(::kentik::site::v202106alpha1::ListSiteResponse)},
  { 45, -1, sizeof(::kentik::site::v202106alpha1::GetSiteRequest)},
  { 51, -1, sizeof(::kentik::site::v202106alpha1::GetSiteResponse)},
  { 57, -1, sizeof(::kentik::site::v202106alpha1::CreateSiteRequest)},
  { 63, -1, sizeof(::kentik::site::v202106alpha1::CreateSiteResponse)},
  { 69, -1, sizeof(::kentik::site::v202106alpha1::UpdateSiteRequest)},
  { 75, -1, sizeof(::kentik::site::v202106alpha1::UpdateSiteResponse)},
  { 81, -1, sizeof(::kentik::site::v202106alpha1::DeleteSiteRequest)},
  { 87, -1, sizeof(::kentik::site::v202106alpha1::DeleteSiteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_SiteIpClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_SubLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_Site_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_ListSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_ListSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_GetSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_GetSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_CreateSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_CreateSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_UpdateSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_UpdateSiteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_DeleteSiteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::site::v202106alpha1::_DeleteSiteResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fsite_2fv202106alpha1_2fsite_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$kentik/site/v202106alpha1/site.proto\022\031"
  "kentik.site.v202106alpha1\032\034google/api/an"
  "notations.proto\032\027google/api/client.proto"
  "\032\030google/type/latlng.proto\032 google/type/"
  "postal_address.proto\032.protoc-gen-openapi"
  "v2/options/annotations.proto\032+kentik/cor"
  "e/v202012alpha1/annotations.proto\"\236\001\n\024Si"
  "teIpClassification\0227\n\027infrastructure_net"
  "works\030\001 \003(\tR\026infrastructureNetworks\0220\n\024u"
  "ser_access_networks\030\002 \003(\tR\022userAccessNet"
  "works\022\033\n\tother_ips\030\003 \003(\tR\010otherIps\"=\n\010Su"
  "bLayer\022\022\n\004name\030\001 \001(\tR\004name\022\035\n\ndevice_ids"
  "\030\002 \003(\tR\tdeviceIds\"K\n\005Layer\022B\n\nsub_layers"
  "\030\001 \003(\0132#.kentik.site.v202106alpha1.SubLa"
  "yerR\tsubLayers\"\365\002\n\004Site\022\016\n\002id\030\001 \001(\tR\002id\022"
  "\024\n\005title\030\003 \001(\tR\005title\0223\n\ncoordinate\030\004 \001("
  "\0132\023.google.type.LatLngR\ncoordinate\0224\n\007ad"
  "dress\030\005 \001(\0132\032.google.type.PostalAddressR"
  "\007address\0227\n\004type\030\006 \001(\0162#.kentik.site.v20"
  "2106alpha1.SiteTypeR\004type\022W\n\016classificat"
  "ion\030\007 \001(\0132/.kentik.site.v202106alpha1.Si"
  "teIpClassificationR\016classification\022D\n\014ar"
  "chitecture\030\010 \003(\0132 .kentik.site.v202106al"
  "pha1.LayerR\014architectureJ\004\010\002\020\003\"\021\n\017ListSi"
  "teRequest\"n\n\020ListSiteResponse\0225\n\005sites\030\001"
  " \003(\0132\037.kentik.site.v202106alpha1.SiteR\005s"
  "ites\022#\n\rinvalid_count\030\002 \001(\rR\014invalidCoun"
  "t\" \n\016GetSiteRequest\022\016\n\002id\030\001 \001(\tR\002id\"F\n\017G"
  "etSiteResponse\0223\n\004site\030\001 \001(\0132\037.kentik.si"
  "te.v202106alpha1.SiteR\004site\"H\n\021CreateSit"
  "eRequest\0223\n\004site\030\001 \001(\0132\037.kentik.site.v20"
  "2106alpha1.SiteR\004site\"I\n\022CreateSiteRespo"
  "nse\0223\n\004site\030\001 \001(\0132\037.kentik.site.v202106a"
  "lpha1.SiteR\004site\"H\n\021UpdateSiteRequest\0223\n"
  "\004site\030\001 \001(\0132\037.kentik.site.v202106alpha1."
  "SiteR\004site\"I\n\022UpdateSiteResponse\0223\n\004site"
  "\030\001 \001(\0132\037.kentik.site.v202106alpha1.SiteR"
  "\004site\"#\n\021DeleteSiteRequest\022\016\n\002id\030\001 \001(\tR\002"
  "id\"\024\n\022DeleteSiteResponse*\264\001\n\010SiteType\022\031\n"
  "\025SITE_TYPE_UNSPECIFIED\020\000\022\031\n\025SITE_TYPE_DA"
  "TA_CENTER\020\001\022\023\n\017SITE_TYPE_CLOUD\020\002\022\024\n\020SITE"
  "_TYPE_BRANCH\020\003\022\032\n\026SITE_TYPE_CONNECTIVITY"
  "\020\004\022\026\n\022SITE_TYPE_CUSTOMER\020\005\022\023\n\017SITE_TYPE_"
  "OTHER\020\0062\330\t\n\013SiteService\022\315\001\n\010ListSite\022*.k"
  "entik.site.v202106alpha1.ListSiteRequest"
  "\032+.kentik.site.v202106alpha1.ListSiteRes"
  "ponse\"h\222A1\022\013List sites.\032\030Returns a list "
  "of sites.*\010SiteList\362\327\002\017admin.site:read\202\323"
  "\344\223\002\033\022\031/site/v202106alpha1/sites\022\352\001\n\007GetS"
  "ite\022).kentik.site.v202106alpha1.GetSiteR"
  "equest\032*.kentik.site.v202106alpha1.GetSi"
  "teResponse\"\207\001\222AK\022\013Get a site.\0323Returns i"
  "nformation about a site specified with I"
  "D.*\007SiteGet\362\327\002\017admin.site:read\202\323\344\223\002 \022\036/s"
  "ite/v202106alpha1/sites/{id}\022\361\001\n\nCreateS"
  "ite\022,.kentik.site.v202106alpha1.CreateSi"
  "teRequest\032-.kentik.site.v202106alpha1.Cr"
  "eateSiteResponse\"\205\001\222AJ\022\016Create a site.\032,"
  "Create a site from request. returns crea"
  "ted.*\nSiteCreate\362\327\002\020admin.site:write\202\323\344\223"
  "\002\036\"\031/site/v202106alpha1/sites:\001*\022\205\002\n\nUpd"
  "ateSite\022,.kentik.site.v202106alpha1.Upda"
  "teSiteRequest\032-.kentik.site.v202106alpha"
  "1.UpdateSiteResponse\"\231\001\222AT\022\016Update a sit"
  "e.\0326Replaces the entire site attributes "
  "specified with id.*\nSiteUpdate\362\327\002\020admin."
  "site:write\202\323\344\223\002(\032#/site/v202106alpha1/si"
  "tes/{site.id}:\001*\022\351\001\n\nDeleteSite\022,.kentik"
  ".site.v202106alpha1.DeleteSiteRequest\032-."
  "kentik.site.v202106alpha1.DeleteSiteResp"
  "onse\"~\222AA\022\016Delete a site.\032#Deletes the s"
  "ite specified with id.*\nSiteDelete\362\327\002\020ad"
  "min.site:write\202\323\344\223\002 *\036/site/v202106alpha"
  "1/sites/{id}\032$\312A\023grpc.api.kentik.com\352\327\002\n"
  "admin.siteB\255\003ZBgithub.com/kentik/api-sch"
  "ema/gen/go/kentik/site/v202106alpha1;sit"
  "e\222A\345\002\022\177\n\010Site API\022K--- This API has been"
  " deprecated and will be removed in the n"
  "ear future ---\"\030\n\026Kentik API Engineering"
  "2\014202106alpha1*\001\0022\020application/json:\020app"
  "lication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-"
  "Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Toke"
  "n \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General i"
  "nformation about Kentik APIs\0224https://kb"
  ".kentik.com/v0/Ab09.htm#Ab09-APIs_Overvi"
  "ewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2ftype_2flatlng_2eproto,
  &::descriptor_table_google_2ftype_2fpostal_5faddress_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto_sccs[14] = {
  &scc_info_CreateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_CreateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_DeleteSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_DeleteSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_GetSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_GetSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_ListSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_ListSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_UpdateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
  &scc_info_UpdateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fsite_2fv202106alpha1_2fsite_2eproto, "kentik/site/v202106alpha1/site.proto", 3410,
  &descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto_once, descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto_sccs, descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto_deps, 14, 6,
  schemas, file_default_instances, TableStruct_kentik_2fsite_2fv202106alpha1_2fsite_2eproto::offsets,
  file_level_metadata_kentik_2fsite_2fv202106alpha1_2fsite_2eproto, 14, file_level_enum_descriptors_kentik_2fsite_2fv202106alpha1_2fsite_2eproto, file_level_service_descriptors_kentik_2fsite_2fv202106alpha1_2fsite_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fsite_2fv202106alpha1_2fsite_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto)), true);
namespace kentik {
namespace site {
namespace v202106alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SiteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsite_2fv202106alpha1_2fsite_2eproto);
  return file_level_enum_descriptors_kentik_2fsite_2fv202106alpha1_2fsite_2eproto[0];
}
bool SiteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SiteIpClassification::InitAsDefaultInstance() {
}
class SiteIpClassification::_Internal {
 public:
};

SiteIpClassification::SiteIpClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infrastructure_networks_(arena),
  user_access_networks_(arena),
  other_ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.SiteIpClassification)
}
SiteIpClassification::SiteIpClassification(const SiteIpClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infrastructure_networks_(from.infrastructure_networks_),
      user_access_networks_(from.user_access_networks_),
      other_ips_(from.other_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.SiteIpClassification)
}

void SiteIpClassification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
}

SiteIpClassification::~SiteIpClassification() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.SiteIpClassification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SiteIpClassification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SiteIpClassification::ArenaDtor(void* object) {
  SiteIpClassification* _this = reinterpret_cast< SiteIpClassification* >(object);
  (void)_this;
}
void SiteIpClassification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteIpClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteIpClassification& SiteIpClassification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteIpClassification_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void SiteIpClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.SiteIpClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infrastructure_networks_.Clear();
  user_access_networks_.Clear();
  other_ips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIpClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_infrastructure_networks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string user_access_networks = 2[json_name = "userAccessNetworks"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_access_networks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.SiteIpClassification.user_access_networks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string other_ips = 3[json_name = "otherIps"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_other_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.SiteIpClassification.other_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteIpClassification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.SiteIpClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks"];
  for (int i = 0, n = this->_internal_infrastructure_networks_size(); i < n; i++) {
    const auto& s = this->_internal_infrastructure_networks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.SiteIpClassification.infrastructure_networks");
    target = stream->WriteString(1, s, target);
  }

  // repeated string user_access_networks = 2[json_name = "userAccessNetworks"];
  for (int i = 0, n = this->_internal_user_access_networks_size(); i < n; i++) {
    const auto& s = this->_internal_user_access_networks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.SiteIpClassification.user_access_networks");
    target = stream->WriteString(2, s, target);
  }

  // repeated string other_ips = 3[json_name = "otherIps"];
  for (int i = 0, n = this->_internal_other_ips_size(); i < n; i++) {
    const auto& s = this->_internal_other_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.SiteIpClassification.other_ips");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.SiteIpClassification)
  return target;
}

size_t SiteIpClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.SiteIpClassification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string infrastructure_networks = 1[json_name = "infrastructureNetworks"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(infrastructure_networks_.size());
  for (int i = 0, n = infrastructure_networks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      infrastructure_networks_.Get(i));
  }

  // repeated string user_access_networks = 2[json_name = "userAccessNetworks"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_access_networks_.size());
  for (int i = 0, n = user_access_networks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_access_networks_.Get(i));
  }

  // repeated string other_ips = 3[json_name = "otherIps"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(other_ips_.size());
  for (int i = 0, n = other_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      other_ips_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteIpClassification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.SiteIpClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteIpClassification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiteIpClassification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.SiteIpClassification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.SiteIpClassification)
    MergeFrom(*source);
  }
}

void SiteIpClassification::MergeFrom(const SiteIpClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.SiteIpClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infrastructure_networks_.MergeFrom(from.infrastructure_networks_);
  user_access_networks_.MergeFrom(from.user_access_networks_);
  other_ips_.MergeFrom(from.other_ips_);
}

void SiteIpClassification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.SiteIpClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteIpClassification::CopyFrom(const SiteIpClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.SiteIpClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIpClassification::IsInitialized() const {
  return true;
}

void SiteIpClassification::InternalSwap(SiteIpClassification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infrastructure_networks_.InternalSwap(&other->infrastructure_networks_);
  user_access_networks_.InternalSwap(&other->user_access_networks_);
  other_ips_.InternalSwap(&other->other_ips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIpClassification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubLayer::InitAsDefaultInstance() {
}
class SubLayer::_Internal {
 public:
};

SubLayer::SubLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.SubLayer)
}
SubLayer::SubLayer(const SubLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_ids_(from.device_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.SubLayer)
}

void SubLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubLayer::~SubLayer() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.SubLayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubLayer::ArenaDtor(void* object) {
  SubLayer* _this = reinterpret_cast< SubLayer* >(object);
  (void)_this;
}
void SubLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubLayer& SubLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubLayer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void SubLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.SubLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ids_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.SubLayer.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_ids = 2[json_name = "deviceIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.SubLayer.device_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.SubLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.SubLayer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string device_ids = 2[json_name = "deviceIds"];
  for (int i = 0, n = this->_internal_device_ids_size(); i < n; i++) {
    const auto& s = this->_internal_device_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.SubLayer.device_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.SubLayer)
  return target;
}

size_t SubLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.SubLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_ids = 2[json_name = "deviceIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_ids_.size());
  for (int i = 0, n = device_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_ids_.Get(i));
  }

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.SubLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SubLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.SubLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.SubLayer)
    MergeFrom(*source);
  }
}

void SubLayer::MergeFrom(const SubLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.SubLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_ids_.MergeFrom(from.device_ids_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void SubLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.SubLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubLayer::CopyFrom(const SubLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.SubLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubLayer::IsInitialized() const {
  return true;
}

void SubLayer::InternalSwap(SubLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_ids_.InternalSwap(&other->device_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Layer::InitAsDefaultInstance() {
}
class Layer::_Internal {
 public:
};

Layer::Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_layers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sub_layers_(from.sub_layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.Layer)
}

void Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.Layer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Layer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Layer::ArenaDtor(void* object) {
  Layer* _this = reinterpret_cast< Layer* >(object);
  (void)_this;
}
void Layer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layer& Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layer_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_layers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.site.v202106alpha1.SubLayer sub_layers = 1[json_name = "subLayers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.site.v202106alpha1.SubLayer sub_layers = 1[json_name = "subLayers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sub_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.Layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202106alpha1.SubLayer sub_layers = 1[json_name = "subLayers"];
  total_size += 1UL * this->_internal_sub_layers_size();
  for (const auto& msg : this->sub_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_layers_.MergeFrom(from.sub_layers_);
}

void Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sub_layers_.InternalSwap(&other->sub_layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Site::InitAsDefaultInstance() {
  ::kentik::site::v202106alpha1::_Site_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::google::type::LatLng*>(
      ::google::type::LatLng::internal_default_instance());
  ::kentik::site::v202106alpha1::_Site_default_instance_._instance.get_mutable()->address_ = const_cast< ::google::type::PostalAddress*>(
      ::google::type::PostalAddress::internal_default_instance());
  ::kentik::site::v202106alpha1::_Site_default_instance_._instance.get_mutable()->classification_ = const_cast< ::kentik::site::v202106alpha1::SiteIpClassification*>(
      ::kentik::site::v202106alpha1::SiteIpClassification::internal_default_instance());
}
class Site::_Internal {
 public:
  static const ::google::type::LatLng& coordinate(const Site* msg);
  static const ::google::type::PostalAddress& address(const Site* msg);
  static const ::kentik::site::v202106alpha1::SiteIpClassification& classification(const Site* msg);
};

const ::google::type::LatLng&
Site::_Internal::coordinate(const Site* msg) {
  return *msg->coordinate_;
}
const ::google::type::PostalAddress&
Site::_Internal::address(const Site* msg) {
  return *msg->address_;
}
const ::kentik::site::v202106alpha1::SiteIpClassification&
Site::_Internal::classification(const Site* msg) {
  return *msg->classification_;
}
void Site::clear_coordinate() {
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
void Site::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
Site::Site(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  architecture_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.Site)
}
Site::Site(const Site& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      architecture_(from.architecture_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::google::type::LatLng(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  if (from._internal_has_address()) {
    address_ = new ::google::type::PostalAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_classification()) {
    classification_ = new ::kentik::site::v202106alpha1::SiteIpClassification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.Site)
}

void Site::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(type_));
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.Site)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Site::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinate_;
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete classification_;
}

void Site::ArenaDtor(void* object) {
  Site* _this = reinterpret_cast< Site* >(object);
  (void)_this;
}
void Site::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Site::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Site& Site::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Site_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void Site::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.Site)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  architecture_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Site::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.Site.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3[json_name = "title"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.Site.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.type.LatLng coordinate = 4[json_name = "coordinate"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.type.PostalAddress address = 5[json_name = "address"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.site.v202106alpha1.SiteType type = 6[json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::site::v202106alpha1::SiteType>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.site.v202106alpha1.SiteIpClassification classification = 7[json_name = "classification"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.site.v202106alpha1.Layer architecture = 8[json_name = "architecture"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_architecture(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Site::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.Site)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.Site.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 3[json_name = "title"];
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.Site.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // .google.type.LatLng coordinate = 4[json_name = "coordinate"];
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::coordinate(this), target, stream);
  }

  // .google.type.PostalAddress address = 5[json_name = "address"];
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::address(this), target, stream);
  }

  // .kentik.site.v202106alpha1.SiteType type = 6[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .kentik.site.v202106alpha1.SiteIpClassification classification = 7[json_name = "classification"];
  if (this->has_classification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::classification(this), target, stream);
  }

  // repeated .kentik.site.v202106alpha1.Layer architecture = 8[json_name = "architecture"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_architecture_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_architecture(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.Site)
  return target;
}

size_t Site::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.Site)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202106alpha1.Layer architecture = 8[json_name = "architecture"];
  total_size += 1UL * this->_internal_architecture_size();
  for (const auto& msg : this->architecture_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 3[json_name = "title"];
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .google.type.LatLng coordinate = 4[json_name = "coordinate"];
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // .google.type.PostalAddress address = 5[json_name = "address"];
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .kentik.site.v202106alpha1.SiteIpClassification classification = 7[json_name = "classification"];
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // .kentik.site.v202106alpha1.SiteType type = 6[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Site::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.Site)
  GOOGLE_DCHECK_NE(&from, this);
  const Site* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Site>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.Site)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.Site)
    MergeFrom(*source);
  }
}

void Site::MergeFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.Site)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  architecture_.MergeFrom(from.architecture_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::google::type::LatLng::MergeFrom(from._internal_coordinate());
  }
  if (from.has_address()) {
    _internal_mutable_address()->::google::type::PostalAddress::MergeFrom(from._internal_address());
  }
  if (from.has_classification()) {
    _internal_mutable_classification()->::kentik::site::v202106alpha1::SiteIpClassification::MergeFrom(from._internal_classification());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Site::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Site::CopyFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {
  return true;
}

void Site::InternalSwap(Site* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  architecture_.InternalSwap(&other->architecture_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Site, type_)
      + sizeof(Site::type_)
      - PROTOBUF_FIELD_OFFSET(Site, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Site::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSiteRequest::InitAsDefaultInstance() {
}
class ListSiteRequest::_Internal {
 public:
};

ListSiteRequest::ListSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.ListSiteRequest)
}
ListSiteRequest::ListSiteRequest(const ListSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.ListSiteRequest)
}

void ListSiteRequest::SharedCtor() {
}

ListSiteRequest::~ListSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.ListSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSiteRequest::ArenaDtor(void* object) {
  ListSiteRequest* _this = reinterpret_cast< ListSiteRequest* >(object);
  (void)_this;
}
void ListSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSiteRequest& ListSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void ListSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.ListSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.ListSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.ListSiteRequest)
  return target;
}

size_t ListSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.ListSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.ListSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.ListSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.ListSiteRequest)
    MergeFrom(*source);
  }
}

void ListSiteRequest::MergeFrom(const ListSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.ListSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.ListSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSiteRequest::CopyFrom(const ListSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.ListSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSiteRequest::IsInitialized() const {
  return true;
}

void ListSiteRequest::InternalSwap(ListSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSiteResponse::InitAsDefaultInstance() {
}
class ListSiteResponse::_Internal {
 public:
};

ListSiteResponse::ListSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sites_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.ListSiteResponse)
}
ListSiteResponse::ListSiteResponse(const ListSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sites_(from.sites_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.ListSiteResponse)
}

void ListSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  invalid_count_ = 0u;
}

ListSiteResponse::~ListSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.ListSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSiteResponse::ArenaDtor(void* object) {
  ListSiteResponse* _this = reinterpret_cast< ListSiteResponse* >(object);
  (void)_this;
}
void ListSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSiteResponse& ListSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void ListSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.ListSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sites_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.site.v202106alpha1.Site sites = 1[json_name = "sites"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.ListSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.site.v202106alpha1.Site sites = 1[json_name = "sites"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sites(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.ListSiteResponse)
  return target;
}

size_t ListSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.ListSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.site.v202106alpha1.Site sites = 1[json_name = "sites"];
  total_size += 1UL * this->_internal_sites_size();
  for (const auto& msg : this->sites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.ListSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.ListSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.ListSiteResponse)
    MergeFrom(*source);
  }
}

void ListSiteResponse::MergeFrom(const ListSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.ListSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sites_.MergeFrom(from.sites_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.ListSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSiteResponse::CopyFrom(const ListSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.ListSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSiteResponse::IsInitialized() const {
  return true;
}

void ListSiteResponse::InternalSwap(ListSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sites_.InternalSwap(&other->sites_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSiteRequest::InitAsDefaultInstance() {
}
class GetSiteRequest::_Internal {
 public:
};

GetSiteRequest::GetSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.GetSiteRequest)
}
GetSiteRequest::GetSiteRequest(const GetSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.GetSiteRequest)
}

void GetSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSiteRequest::~GetSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.GetSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSiteRequest::ArenaDtor(void* object) {
  GetSiteRequest* _this = reinterpret_cast< GetSiteRequest* >(object);
  (void)_this;
}
void GetSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSiteRequest& GetSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void GetSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.GetSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.GetSiteRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.GetSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.GetSiteRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.GetSiteRequest)
  return target;
}

size_t GetSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.GetSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.GetSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.GetSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.GetSiteRequest)
    MergeFrom(*source);
  }
}

void GetSiteRequest::MergeFrom(const GetSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.GetSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.GetSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSiteRequest::CopyFrom(const GetSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.GetSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSiteRequest::IsInitialized() const {
  return true;
}

void GetSiteRequest::InternalSwap(GetSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSiteResponse::InitAsDefaultInstance() {
  ::kentik::site::v202106alpha1::_GetSiteResponse_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202106alpha1::Site*>(
      ::kentik::site::v202106alpha1::Site::internal_default_instance());
}
class GetSiteResponse::_Internal {
 public:
  static const ::kentik::site::v202106alpha1::Site& site(const GetSiteResponse* msg);
};

const ::kentik::site::v202106alpha1::Site&
GetSiteResponse::_Internal::site(const GetSiteResponse* msg) {
  return *msg->site_;
}
GetSiteResponse::GetSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.GetSiteResponse)
}
GetSiteResponse::GetSiteResponse(const GetSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202106alpha1::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.GetSiteResponse)
}

void GetSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  site_ = nullptr;
}

GetSiteResponse::~GetSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.GetSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void GetSiteResponse::ArenaDtor(void* object) {
  GetSiteResponse* _this = reinterpret_cast< GetSiteResponse* >(object);
  (void)_this;
}
void GetSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSiteResponse& GetSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void GetSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.GetSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.GetSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.GetSiteResponse)
  return target;
}

size_t GetSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.GetSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.GetSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.GetSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.GetSiteResponse)
    MergeFrom(*source);
  }
}

void GetSiteResponse::MergeFrom(const GetSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.GetSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202106alpha1::Site::MergeFrom(from._internal_site());
  }
}

void GetSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.GetSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSiteResponse::CopyFrom(const GetSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.GetSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSiteResponse::IsInitialized() const {
  return true;
}

void GetSiteResponse::InternalSwap(GetSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSiteRequest::InitAsDefaultInstance() {
  ::kentik::site::v202106alpha1::_CreateSiteRequest_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202106alpha1::Site*>(
      ::kentik::site::v202106alpha1::Site::internal_default_instance());
}
class CreateSiteRequest::_Internal {
 public:
  static const ::kentik::site::v202106alpha1::Site& site(const CreateSiteRequest* msg);
};

const ::kentik::site::v202106alpha1::Site&
CreateSiteRequest::_Internal::site(const CreateSiteRequest* msg) {
  return *msg->site_;
}
CreateSiteRequest::CreateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.CreateSiteRequest)
}
CreateSiteRequest::CreateSiteRequest(const CreateSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202106alpha1::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.CreateSiteRequest)
}

void CreateSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  site_ = nullptr;
}

CreateSiteRequest::~CreateSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.CreateSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void CreateSiteRequest::ArenaDtor(void* object) {
  CreateSiteRequest* _this = reinterpret_cast< CreateSiteRequest* >(object);
  (void)_this;
}
void CreateSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSiteRequest& CreateSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void CreateSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.CreateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.CreateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.CreateSiteRequest)
  return target;
}

size_t CreateSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.CreateSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.CreateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.CreateSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.CreateSiteRequest)
    MergeFrom(*source);
  }
}

void CreateSiteRequest::MergeFrom(const CreateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.CreateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202106alpha1::Site::MergeFrom(from._internal_site());
  }
}

void CreateSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.CreateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSiteRequest::CopyFrom(const CreateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.CreateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSiteRequest::IsInitialized() const {
  return true;
}

void CreateSiteRequest::InternalSwap(CreateSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSiteResponse::InitAsDefaultInstance() {
  ::kentik::site::v202106alpha1::_CreateSiteResponse_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202106alpha1::Site*>(
      ::kentik::site::v202106alpha1::Site::internal_default_instance());
}
class CreateSiteResponse::_Internal {
 public:
  static const ::kentik::site::v202106alpha1::Site& site(const CreateSiteResponse* msg);
};

const ::kentik::site::v202106alpha1::Site&
CreateSiteResponse::_Internal::site(const CreateSiteResponse* msg) {
  return *msg->site_;
}
CreateSiteResponse::CreateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.CreateSiteResponse)
}
CreateSiteResponse::CreateSiteResponse(const CreateSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202106alpha1::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.CreateSiteResponse)
}

void CreateSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  site_ = nullptr;
}

CreateSiteResponse::~CreateSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.CreateSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void CreateSiteResponse::ArenaDtor(void* object) {
  CreateSiteResponse* _this = reinterpret_cast< CreateSiteResponse* >(object);
  (void)_this;
}
void CreateSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSiteResponse& CreateSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void CreateSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.CreateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.CreateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.CreateSiteResponse)
  return target;
}

size_t CreateSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.CreateSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.CreateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.CreateSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.CreateSiteResponse)
    MergeFrom(*source);
  }
}

void CreateSiteResponse::MergeFrom(const CreateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.CreateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202106alpha1::Site::MergeFrom(from._internal_site());
  }
}

void CreateSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.CreateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSiteResponse::CopyFrom(const CreateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.CreateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSiteResponse::IsInitialized() const {
  return true;
}

void CreateSiteResponse::InternalSwap(CreateSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSiteRequest::InitAsDefaultInstance() {
  ::kentik::site::v202106alpha1::_UpdateSiteRequest_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202106alpha1::Site*>(
      ::kentik::site::v202106alpha1::Site::internal_default_instance());
}
class UpdateSiteRequest::_Internal {
 public:
  static const ::kentik::site::v202106alpha1::Site& site(const UpdateSiteRequest* msg);
};

const ::kentik::site::v202106alpha1::Site&
UpdateSiteRequest::_Internal::site(const UpdateSiteRequest* msg) {
  return *msg->site_;
}
UpdateSiteRequest::UpdateSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.UpdateSiteRequest)
}
UpdateSiteRequest::UpdateSiteRequest(const UpdateSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202106alpha1::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.UpdateSiteRequest)
}

void UpdateSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  site_ = nullptr;
}

UpdateSiteRequest::~UpdateSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.UpdateSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void UpdateSiteRequest::ArenaDtor(void* object) {
  UpdateSiteRequest* _this = reinterpret_cast< UpdateSiteRequest* >(object);
  (void)_this;
}
void UpdateSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSiteRequest& UpdateSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void UpdateSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.UpdateSiteRequest)
  return target;
}

size_t UpdateSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.UpdateSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.UpdateSiteRequest)
    MergeFrom(*source);
  }
}

void UpdateSiteRequest::MergeFrom(const UpdateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202106alpha1::Site::MergeFrom(from._internal_site());
  }
}

void UpdateSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSiteRequest::CopyFrom(const UpdateSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.UpdateSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSiteRequest::IsInitialized() const {
  return true;
}

void UpdateSiteRequest::InternalSwap(UpdateSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSiteResponse::InitAsDefaultInstance() {
  ::kentik::site::v202106alpha1::_UpdateSiteResponse_default_instance_._instance.get_mutable()->site_ = const_cast< ::kentik::site::v202106alpha1::Site*>(
      ::kentik::site::v202106alpha1::Site::internal_default_instance());
}
class UpdateSiteResponse::_Internal {
 public:
  static const ::kentik::site::v202106alpha1::Site& site(const UpdateSiteResponse* msg);
};

const ::kentik::site::v202106alpha1::Site&
UpdateSiteResponse::_Internal::site(const UpdateSiteResponse* msg) {
  return *msg->site_;
}
UpdateSiteResponse::UpdateSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.UpdateSiteResponse)
}
UpdateSiteResponse::UpdateSiteResponse(const UpdateSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site()) {
    site_ = new ::kentik::site::v202106alpha1::Site(*from.site_);
  } else {
    site_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.UpdateSiteResponse)
}

void UpdateSiteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  site_ = nullptr;
}

UpdateSiteResponse::~UpdateSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.UpdateSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete site_;
}

void UpdateSiteResponse::ArenaDtor(void* object) {
  UpdateSiteResponse* _this = reinterpret_cast< UpdateSiteResponse* >(object);
  (void)_this;
}
void UpdateSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSiteResponse& UpdateSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void UpdateSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.UpdateSiteResponse)
  return target;
}

size_t UpdateSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.site.v202106alpha1.Site site = 1[json_name = "site"];
  if (this->has_site()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.UpdateSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.UpdateSiteResponse)
    MergeFrom(*source);
  }
}

void UpdateSiteResponse::MergeFrom(const UpdateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site()) {
    _internal_mutable_site()->::kentik::site::v202106alpha1::Site::MergeFrom(from._internal_site());
  }
}

void UpdateSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSiteResponse::CopyFrom(const UpdateSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.UpdateSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSiteResponse::IsInitialized() const {
  return true;
}

void UpdateSiteResponse::InternalSwap(UpdateSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSiteRequest::InitAsDefaultInstance() {
}
class DeleteSiteRequest::_Internal {
 public:
};

DeleteSiteRequest::DeleteSiteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.DeleteSiteRequest)
}
DeleteSiteRequest::DeleteSiteRequest(const DeleteSiteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.DeleteSiteRequest)
}

void DeleteSiteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSiteRequest::~DeleteSiteRequest() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.DeleteSiteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSiteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSiteRequest::ArenaDtor(void* object) {
  DeleteSiteRequest* _this = reinterpret_cast< DeleteSiteRequest* >(object);
  (void)_this;
}
void DeleteSiteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSiteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSiteRequest& DeleteSiteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSiteRequest_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void DeleteSiteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSiteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.site.v202106alpha1.DeleteSiteRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSiteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.site.v202106alpha1.DeleteSiteRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.DeleteSiteRequest)
  return target;
}

size_t DeleteSiteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSiteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSiteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSiteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.DeleteSiteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.DeleteSiteRequest)
    MergeFrom(*source);
  }
}

void DeleteSiteRequest::MergeFrom(const DeleteSiteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteSiteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSiteRequest::CopyFrom(const DeleteSiteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.DeleteSiteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSiteRequest::IsInitialized() const {
  return true;
}

void DeleteSiteRequest::InternalSwap(DeleteSiteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSiteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSiteResponse::InitAsDefaultInstance() {
}
class DeleteSiteResponse::_Internal {
 public:
};

DeleteSiteResponse::DeleteSiteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.site.v202106alpha1.DeleteSiteResponse)
}
DeleteSiteResponse::DeleteSiteResponse(const DeleteSiteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.site.v202106alpha1.DeleteSiteResponse)
}

void DeleteSiteResponse::SharedCtor() {
}

DeleteSiteResponse::~DeleteSiteResponse() {
  // @@protoc_insertion_point(destructor:kentik.site.v202106alpha1.DeleteSiteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSiteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteSiteResponse::ArenaDtor(void* object) {
  DeleteSiteResponse* _this = reinterpret_cast< DeleteSiteResponse* >(object);
  (void)_this;
}
void DeleteSiteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSiteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSiteResponse& DeleteSiteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSiteResponse_kentik_2fsite_2fv202106alpha1_2fsite_2eproto.base);
  return *internal_default_instance();
}


void DeleteSiteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSiteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSiteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.site.v202106alpha1.DeleteSiteResponse)
  return target;
}

size_t DeleteSiteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSiteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSiteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSiteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.site.v202106alpha1.DeleteSiteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.site.v202106alpha1.DeleteSiteResponse)
    MergeFrom(*source);
  }
}

void DeleteSiteResponse::MergeFrom(const DeleteSiteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteSiteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSiteResponse::CopyFrom(const DeleteSiteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.site.v202106alpha1.DeleteSiteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSiteResponse::IsInitialized() const {
  return true;
}

void DeleteSiteResponse::InternalSwap(DeleteSiteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSiteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202106alpha1
}  // namespace site
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::SiteIpClassification* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::SiteIpClassification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::SiteIpClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::SubLayer* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::SubLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::SubLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::Layer* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::Layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::Site* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::Site >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::Site >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::ListSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::ListSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::ListSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::ListSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::ListSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::ListSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::GetSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::GetSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::GetSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::GetSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::GetSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::GetSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::CreateSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::CreateSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::CreateSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::CreateSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::CreateSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::CreateSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::UpdateSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::UpdateSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::UpdateSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::UpdateSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::UpdateSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::UpdateSiteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::DeleteSiteRequest* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::DeleteSiteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::DeleteSiteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::site::v202106alpha1::DeleteSiteResponse* Arena::CreateMaybeMessage< ::kentik::site::v202106alpha1::DeleteSiteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::site::v202106alpha1::DeleteSiteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
