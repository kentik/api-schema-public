// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/kde/v202212/fastbit_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
namespace kentik {
namespace kde {
namespace v202212 {
class FastbitResponse;
class FastbitResponseDefaultTypeInternal;
extern FastbitResponseDefaultTypeInternal _FastbitResponse_default_instance_;
class FastbitResult;
class FastbitResultDefaultTypeInternal;
extern FastbitResultDefaultTypeInternal _FastbitResult_default_instance_;
class FastbitResult_BytesColumn;
class FastbitResult_BytesColumnDefaultTypeInternal;
extern FastbitResult_BytesColumnDefaultTypeInternal _FastbitResult_BytesColumn_default_instance_;
class FastbitResult_ColumnHeaderInfo;
class FastbitResult_ColumnHeaderInfoDefaultTypeInternal;
extern FastbitResult_ColumnHeaderInfoDefaultTypeInternal _FastbitResult_ColumnHeaderInfo_default_instance_;
class FastbitResult_DoubleColumn;
class FastbitResult_DoubleColumnDefaultTypeInternal;
extern FastbitResult_DoubleColumnDefaultTypeInternal _FastbitResult_DoubleColumn_default_instance_;
class FastbitResult_FloatColumn;
class FastbitResult_FloatColumnDefaultTypeInternal;
extern FastbitResult_FloatColumnDefaultTypeInternal _FastbitResult_FloatColumn_default_instance_;
class FastbitResult_InputParams;
class FastbitResult_InputParamsDefaultTypeInternal;
extern FastbitResult_InputParamsDefaultTypeInternal _FastbitResult_InputParams_default_instance_;
class FastbitResult_InputParams_MemberIdEntry_DoNotUse;
class FastbitResult_InputParams_MemberIdEntry_DoNotUseDefaultTypeInternal;
extern FastbitResult_InputParams_MemberIdEntry_DoNotUseDefaultTypeInternal _FastbitResult_InputParams_MemberIdEntry_DoNotUse_default_instance_;
class FastbitResult_Int32Column;
class FastbitResult_Int32ColumnDefaultTypeInternal;
extern FastbitResult_Int32ColumnDefaultTypeInternal _FastbitResult_Int32Column_default_instance_;
class FastbitResult_Int64Column;
class FastbitResult_Int64ColumnDefaultTypeInternal;
extern FastbitResult_Int64ColumnDefaultTypeInternal _FastbitResult_Int64Column_default_instance_;
class FastbitResult_MemberId;
class FastbitResult_MemberIdDefaultTypeInternal;
extern FastbitResult_MemberIdDefaultTypeInternal _FastbitResult_MemberId_default_instance_;
class FastbitResult_StringColumn;
class FastbitResult_StringColumnDefaultTypeInternal;
extern FastbitResult_StringColumnDefaultTypeInternal _FastbitResult_StringColumn_default_instance_;
class FastbitResult_UInt32Column;
class FastbitResult_UInt32ColumnDefaultTypeInternal;
extern FastbitResult_UInt32ColumnDefaultTypeInternal _FastbitResult_UInt32Column_default_instance_;
class FastbitResult_UInt64Column;
class FastbitResult_UInt64ColumnDefaultTypeInternal;
extern FastbitResult_UInt64ColumnDefaultTypeInternal _FastbitResult_UInt64Column_default_instance_;
}  // namespace v202212
}  // namespace kde
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::kde::v202212::FastbitResponse* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResponse>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_BytesColumn* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_BytesColumn>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_DoubleColumn* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_DoubleColumn>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_FloatColumn* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_FloatColumn>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_InputParams* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_InputParams>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_Int32Column* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_Int32Column>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_Int64Column* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_Int64Column>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_MemberId* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_MemberId>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_StringColumn* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_StringColumn>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_UInt32Column* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_UInt32Column>(Arena*);
template<> ::kentik::kde::v202212::FastbitResult_UInt64Column* Arena::CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_UInt64Column>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace kde {
namespace v202212 {

// ===================================================================

class FastbitResult_ColumnHeaderInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo) */ {
 public:
  inline FastbitResult_ColumnHeaderInfo() : FastbitResult_ColumnHeaderInfo(nullptr) {};
  virtual ~FastbitResult_ColumnHeaderInfo();

  FastbitResult_ColumnHeaderInfo(const FastbitResult_ColumnHeaderInfo& from);
  FastbitResult_ColumnHeaderInfo(FastbitResult_ColumnHeaderInfo&& from) noexcept
    : FastbitResult_ColumnHeaderInfo() {
    *this = ::std::move(from);
  }

  inline FastbitResult_ColumnHeaderInfo& operator=(const FastbitResult_ColumnHeaderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_ColumnHeaderInfo& operator=(FastbitResult_ColumnHeaderInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_ColumnHeaderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_ColumnHeaderInfo* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_ColumnHeaderInfo*>(
               &_FastbitResult_ColumnHeaderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FastbitResult_ColumnHeaderInfo& a, FastbitResult_ColumnHeaderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_ColumnHeaderInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_ColumnHeaderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_ColumnHeaderInfo* New() const final {
    return CreateMaybeMessage<FastbitResult_ColumnHeaderInfo>(nullptr);
  }

  FastbitResult_ColumnHeaderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_ColumnHeaderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_ColumnHeaderInfo& from);
  void MergeFrom(const FastbitResult_ColumnHeaderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_ColumnHeaderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo";
  }
  protected:
  explicit FastbitResult_ColumnHeaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFormatFieldNumber = 3,
    kAggNameFieldNumber = 4,
    kPositionFieldNumber = 2,
  };
  // string name = 1[json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string format = 3[json_name = "format"];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // string agg_name = 4[json_name = "aggName"];
  bool has_agg_name() const;
  private:
  bool _internal_has_agg_name() const;
  public:
  void clear_agg_name();
  const std::string& agg_name() const;
  void set_agg_name(const std::string& value);
  void set_agg_name(std::string&& value);
  void set_agg_name(const char* value);
  void set_agg_name(const char* value, size_t size);
  std::string* mutable_agg_name();
  std::string* release_agg_name();
  void set_allocated_agg_name(std::string* agg_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agg_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agg_name(
      std::string* agg_name);
  private:
  const std::string& _internal_agg_name() const;
  void _internal_set_agg_name(const std::string& value);
  std::string* _internal_mutable_agg_name();
  public:

  // int32 position = 2[json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agg_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_InputParams_MemberIdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FastbitResult_InputParams_MemberIdEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FastbitResult_InputParams_MemberIdEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FastbitResult_InputParams_MemberIdEntry_DoNotUse();
  FastbitResult_InputParams_MemberIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FastbitResult_InputParams_MemberIdEntry_DoNotUse& other);
  static const FastbitResult_InputParams_MemberIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FastbitResult_InputParams_MemberIdEntry_DoNotUse*>(&_FastbitResult_InputParams_MemberIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class FastbitResult_InputParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.InputParams) */ {
 public:
  inline FastbitResult_InputParams() : FastbitResult_InputParams(nullptr) {};
  virtual ~FastbitResult_InputParams();

  FastbitResult_InputParams(const FastbitResult_InputParams& from);
  FastbitResult_InputParams(FastbitResult_InputParams&& from) noexcept
    : FastbitResult_InputParams() {
    *this = ::std::move(from);
  }

  inline FastbitResult_InputParams& operator=(const FastbitResult_InputParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_InputParams& operator=(FastbitResult_InputParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_InputParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_InputParams* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_InputParams*>(
               &_FastbitResult_InputParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FastbitResult_InputParams& a, FastbitResult_InputParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_InputParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_InputParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_InputParams* New() const final {
    return CreateMaybeMessage<FastbitResult_InputParams>(nullptr);
  }

  FastbitResult_InputParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_InputParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_InputParams& from);
  void MergeFrom(const FastbitResult_InputParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_InputParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.InputParams";
  }
  protected:
  explicit FastbitResult_InputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 15,
    kIOrderbyFieldNumber = 1,
    kIDeviceNameFieldNumber = 6,
    kIDeviceSiteNameFieldNumber = 11,
    kIDeviceTypeFieldNumber = 12,
    kIDebugInfoFieldNumber = 13,
    kIOffsetFieldNumber = 2,
    kILimitFieldNumber = 3,
    kIStartTimeFieldNumber = 4,
    kIEndTimeFieldNumber = 5,
    kIDeviceIdFieldNumber = 7,
    kISqStartFieldNumber = 8,
    kISqEndFieldNumber = 9,
    kIDurationFieldNumber = 10,
    kUseMemberIdFieldNumber = 14,
  };
  // map<int64, .kentik.kde.v202212.FastbitResult.MemberId> member_id = 15[json_name = "memberId"];
  int member_id_size() const;
  private:
  int _internal_member_id_size() const;
  public:
  void clear_member_id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >&
      _internal_member_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >*
      _internal_mutable_member_id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >&
      member_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >*
      mutable_member_id();

  // string i_orderby = 1[json_name = "iOrderby"];
  bool has_i_orderby() const;
  private:
  bool _internal_has_i_orderby() const;
  public:
  void clear_i_orderby();
  const std::string& i_orderby() const;
  void set_i_orderby(const std::string& value);
  void set_i_orderby(std::string&& value);
  void set_i_orderby(const char* value);
  void set_i_orderby(const char* value, size_t size);
  std::string* mutable_i_orderby();
  std::string* release_i_orderby();
  void set_allocated_i_orderby(std::string* i_orderby);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_orderby();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_orderby(
      std::string* i_orderby);
  private:
  const std::string& _internal_i_orderby() const;
  void _internal_set_i_orderby(const std::string& value);
  std::string* _internal_mutable_i_orderby();
  public:

  // string i_device_name = 6[json_name = "iDeviceName"];
  bool has_i_device_name() const;
  private:
  bool _internal_has_i_device_name() const;
  public:
  void clear_i_device_name();
  const std::string& i_device_name() const;
  void set_i_device_name(const std::string& value);
  void set_i_device_name(std::string&& value);
  void set_i_device_name(const char* value);
  void set_i_device_name(const char* value, size_t size);
  std::string* mutable_i_device_name();
  std::string* release_i_device_name();
  void set_allocated_i_device_name(std::string* i_device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_device_name(
      std::string* i_device_name);
  private:
  const std::string& _internal_i_device_name() const;
  void _internal_set_i_device_name(const std::string& value);
  std::string* _internal_mutable_i_device_name();
  public:

  // string i_device_site_name = 11[json_name = "iDeviceSiteName"];
  bool has_i_device_site_name() const;
  private:
  bool _internal_has_i_device_site_name() const;
  public:
  void clear_i_device_site_name();
  const std::string& i_device_site_name() const;
  void set_i_device_site_name(const std::string& value);
  void set_i_device_site_name(std::string&& value);
  void set_i_device_site_name(const char* value);
  void set_i_device_site_name(const char* value, size_t size);
  std::string* mutable_i_device_site_name();
  std::string* release_i_device_site_name();
  void set_allocated_i_device_site_name(std::string* i_device_site_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_device_site_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_device_site_name(
      std::string* i_device_site_name);
  private:
  const std::string& _internal_i_device_site_name() const;
  void _internal_set_i_device_site_name(const std::string& value);
  std::string* _internal_mutable_i_device_site_name();
  public:

  // string i_device_type = 12[json_name = "iDeviceType"];
  bool has_i_device_type() const;
  private:
  bool _internal_has_i_device_type() const;
  public:
  void clear_i_device_type();
  const std::string& i_device_type() const;
  void set_i_device_type(const std::string& value);
  void set_i_device_type(std::string&& value);
  void set_i_device_type(const char* value);
  void set_i_device_type(const char* value, size_t size);
  std::string* mutable_i_device_type();
  std::string* release_i_device_type();
  void set_allocated_i_device_type(std::string* i_device_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_device_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_device_type(
      std::string* i_device_type);
  private:
  const std::string& _internal_i_device_type() const;
  void _internal_set_i_device_type(const std::string& value);
  std::string* _internal_mutable_i_device_type();
  public:

  // string i_debug_info = 13[json_name = "iDebugInfo"];
  bool has_i_debug_info() const;
  private:
  bool _internal_has_i_debug_info() const;
  public:
  void clear_i_debug_info();
  const std::string& i_debug_info() const;
  void set_i_debug_info(const std::string& value);
  void set_i_debug_info(std::string&& value);
  void set_i_debug_info(const char* value);
  void set_i_debug_info(const char* value, size_t size);
  std::string* mutable_i_debug_info();
  std::string* release_i_debug_info();
  void set_allocated_i_debug_info(std::string* i_debug_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_debug_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_debug_info(
      std::string* i_debug_info);
  private:
  const std::string& _internal_i_debug_info() const;
  void _internal_set_i_debug_info(const std::string& value);
  std::string* _internal_mutable_i_debug_info();
  public:

  // int32 i_offset = 2[json_name = "iOffset"];
  bool has_i_offset() const;
  private:
  bool _internal_has_i_offset() const;
  public:
  void clear_i_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 i_offset() const;
  void set_i_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i_offset() const;
  void _internal_set_i_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 i_limit = 3[json_name = "iLimit"];
  bool has_i_limit() const;
  private:
  bool _internal_has_i_limit() const;
  public:
  void clear_i_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 i_limit() const;
  void set_i_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i_limit() const;
  void _internal_set_i_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 i_start_time = 4[json_name = "iStartTime"];
  bool has_i_start_time() const;
  private:
  bool _internal_has_i_start_time() const;
  public:
  void clear_i_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 i_start_time() const;
  void set_i_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i_start_time() const;
  void _internal_set_i_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 i_end_time = 5[json_name = "iEndTime"];
  bool has_i_end_time() const;
  private:
  bool _internal_has_i_end_time() const;
  public:
  void clear_i_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 i_end_time() const;
  void set_i_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i_end_time() const;
  void _internal_set_i_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 i_device_id = 7[json_name = "iDeviceId"];
  bool has_i_device_id() const;
  private:
  bool _internal_has_i_device_id() const;
  public:
  void clear_i_device_id();
  ::PROTOBUF_NAMESPACE_ID::int64 i_device_id() const;
  void set_i_device_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i_device_id() const;
  void _internal_set_i_device_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 i_sq_start = 8[json_name = "iSqStart"];
  bool has_i_sq_start() const;
  private:
  bool _internal_has_i_sq_start() const;
  public:
  void clear_i_sq_start();
  ::PROTOBUF_NAMESPACE_ID::int64 i_sq_start() const;
  void set_i_sq_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i_sq_start() const;
  void _internal_set_i_sq_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 i_sq_end = 9[json_name = "iSqEnd"];
  bool has_i_sq_end() const;
  private:
  bool _internal_has_i_sq_end() const;
  public:
  void clear_i_sq_end();
  ::PROTOBUF_NAMESPACE_ID::int64 i_sq_end() const;
  void set_i_sq_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i_sq_end() const;
  void _internal_set_i_sq_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 i_duration = 10[json_name = "iDuration"];
  bool has_i_duration() const;
  private:
  bool _internal_has_i_duration() const;
  public:
  void clear_i_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 i_duration() const;
  void set_i_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i_duration() const;
  void _internal_set_i_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_member_id = 14[json_name = "useMemberId"];
  bool has_use_member_id() const;
  private:
  bool _internal_has_use_member_id() const;
  public:
  void clear_use_member_id();
  bool use_member_id() const;
  void set_use_member_id(bool value);
  private:
  bool _internal_use_member_id() const;
  void _internal_set_use_member_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.InputParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FastbitResult_InputParams_MemberIdEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > member_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_orderby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_device_site_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_debug_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_device_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_sq_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_sq_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_duration_;
  bool use_member_id_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_MemberId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.MemberId) */ {
 public:
  inline FastbitResult_MemberId() : FastbitResult_MemberId(nullptr) {};
  virtual ~FastbitResult_MemberId();

  FastbitResult_MemberId(const FastbitResult_MemberId& from);
  FastbitResult_MemberId(FastbitResult_MemberId&& from) noexcept
    : FastbitResult_MemberId() {
    *this = ::std::move(from);
  }

  inline FastbitResult_MemberId& operator=(const FastbitResult_MemberId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_MemberId& operator=(FastbitResult_MemberId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_MemberId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_MemberId* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_MemberId*>(
               &_FastbitResult_MemberId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FastbitResult_MemberId& a, FastbitResult_MemberId& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_MemberId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_MemberId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_MemberId* New() const final {
    return CreateMaybeMessage<FastbitResult_MemberId>(nullptr);
  }

  FastbitResult_MemberId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_MemberId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_MemberId& from);
  void MergeFrom(const FastbitResult_MemberId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_MemberId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.MemberId";
  }
  protected:
  explicit FastbitResult_MemberId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDeviceNameFieldNumber = 1,
    kIDeviceSiteNameFieldNumber = 2,
    kIDeviceTypeFieldNumber = 3,
  };
  // string i_device_name = 1[json_name = "iDeviceName"];
  bool has_i_device_name() const;
  private:
  bool _internal_has_i_device_name() const;
  public:
  void clear_i_device_name();
  const std::string& i_device_name() const;
  void set_i_device_name(const std::string& value);
  void set_i_device_name(std::string&& value);
  void set_i_device_name(const char* value);
  void set_i_device_name(const char* value, size_t size);
  std::string* mutable_i_device_name();
  std::string* release_i_device_name();
  void set_allocated_i_device_name(std::string* i_device_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_device_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_device_name(
      std::string* i_device_name);
  private:
  const std::string& _internal_i_device_name() const;
  void _internal_set_i_device_name(const std::string& value);
  std::string* _internal_mutable_i_device_name();
  public:

  // string i_device_site_name = 2[json_name = "iDeviceSiteName"];
  bool has_i_device_site_name() const;
  private:
  bool _internal_has_i_device_site_name() const;
  public:
  void clear_i_device_site_name();
  const std::string& i_device_site_name() const;
  void set_i_device_site_name(const std::string& value);
  void set_i_device_site_name(std::string&& value);
  void set_i_device_site_name(const char* value);
  void set_i_device_site_name(const char* value, size_t size);
  std::string* mutable_i_device_site_name();
  std::string* release_i_device_site_name();
  void set_allocated_i_device_site_name(std::string* i_device_site_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_device_site_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_device_site_name(
      std::string* i_device_site_name);
  private:
  const std::string& _internal_i_device_site_name() const;
  void _internal_set_i_device_site_name(const std::string& value);
  std::string* _internal_mutable_i_device_site_name();
  public:

  // string i_device_type = 3[json_name = "iDeviceType"];
  bool has_i_device_type() const;
  private:
  bool _internal_has_i_device_type() const;
  public:
  void clear_i_device_type();
  const std::string& i_device_type() const;
  void set_i_device_type(const std::string& value);
  void set_i_device_type(std::string&& value);
  void set_i_device_type(const char* value);
  void set_i_device_type(const char* value, size_t size);
  std::string* mutable_i_device_type();
  std::string* release_i_device_type();
  void set_allocated_i_device_type(std::string* i_device_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_i_device_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_i_device_type(
      std::string* i_device_type);
  private:
  const std::string& _internal_i_device_type() const;
  void _internal_set_i_device_type(const std::string& value);
  std::string* _internal_mutable_i_device_type();
  public:

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.MemberId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_device_site_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_device_type_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_Int32Column PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.Int32Column) */ {
 public:
  inline FastbitResult_Int32Column() : FastbitResult_Int32Column(nullptr) {};
  virtual ~FastbitResult_Int32Column();

  FastbitResult_Int32Column(const FastbitResult_Int32Column& from);
  FastbitResult_Int32Column(FastbitResult_Int32Column&& from) noexcept
    : FastbitResult_Int32Column() {
    *this = ::std::move(from);
  }

  inline FastbitResult_Int32Column& operator=(const FastbitResult_Int32Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_Int32Column& operator=(FastbitResult_Int32Column&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_Int32Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_Int32Column* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_Int32Column*>(
               &_FastbitResult_Int32Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FastbitResult_Int32Column& a, FastbitResult_Int32Column& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_Int32Column* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_Int32Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_Int32Column* New() const final {
    return CreateMaybeMessage<FastbitResult_Int32Column>(nullptr);
  }

  FastbitResult_Int32Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_Int32Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_Int32Column& from);
  void MergeFrom(const FastbitResult_Int32Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_Int32Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.Int32Column";
  }
  protected:
  explicit FastbitResult_Int32Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated int32 values = 2[json_name = "values", packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.Int32Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_Int64Column PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.Int64Column) */ {
 public:
  inline FastbitResult_Int64Column() : FastbitResult_Int64Column(nullptr) {};
  virtual ~FastbitResult_Int64Column();

  FastbitResult_Int64Column(const FastbitResult_Int64Column& from);
  FastbitResult_Int64Column(FastbitResult_Int64Column&& from) noexcept
    : FastbitResult_Int64Column() {
    *this = ::std::move(from);
  }

  inline FastbitResult_Int64Column& operator=(const FastbitResult_Int64Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_Int64Column& operator=(FastbitResult_Int64Column&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_Int64Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_Int64Column* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_Int64Column*>(
               &_FastbitResult_Int64Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FastbitResult_Int64Column& a, FastbitResult_Int64Column& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_Int64Column* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_Int64Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_Int64Column* New() const final {
    return CreateMaybeMessage<FastbitResult_Int64Column>(nullptr);
  }

  FastbitResult_Int64Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_Int64Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_Int64Column& from);
  void MergeFrom(const FastbitResult_Int64Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_Int64Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.Int64Column";
  }
  protected:
  explicit FastbitResult_Int64Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated int64 values = 2[json_name = "values", packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.Int64Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_UInt32Column PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.UInt32Column) */ {
 public:
  inline FastbitResult_UInt32Column() : FastbitResult_UInt32Column(nullptr) {};
  virtual ~FastbitResult_UInt32Column();

  FastbitResult_UInt32Column(const FastbitResult_UInt32Column& from);
  FastbitResult_UInt32Column(FastbitResult_UInt32Column&& from) noexcept
    : FastbitResult_UInt32Column() {
    *this = ::std::move(from);
  }

  inline FastbitResult_UInt32Column& operator=(const FastbitResult_UInt32Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_UInt32Column& operator=(FastbitResult_UInt32Column&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_UInt32Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_UInt32Column* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_UInt32Column*>(
               &_FastbitResult_UInt32Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FastbitResult_UInt32Column& a, FastbitResult_UInt32Column& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_UInt32Column* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_UInt32Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_UInt32Column* New() const final {
    return CreateMaybeMessage<FastbitResult_UInt32Column>(nullptr);
  }

  FastbitResult_UInt32Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_UInt32Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_UInt32Column& from);
  void MergeFrom(const FastbitResult_UInt32Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_UInt32Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.UInt32Column";
  }
  protected:
  explicit FastbitResult_UInt32Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated uint32 values = 2[json_name = "values", packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_values();

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.UInt32Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_UInt64Column PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.UInt64Column) */ {
 public:
  inline FastbitResult_UInt64Column() : FastbitResult_UInt64Column(nullptr) {};
  virtual ~FastbitResult_UInt64Column();

  FastbitResult_UInt64Column(const FastbitResult_UInt64Column& from);
  FastbitResult_UInt64Column(FastbitResult_UInt64Column&& from) noexcept
    : FastbitResult_UInt64Column() {
    *this = ::std::move(from);
  }

  inline FastbitResult_UInt64Column& operator=(const FastbitResult_UInt64Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_UInt64Column& operator=(FastbitResult_UInt64Column&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_UInt64Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_UInt64Column* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_UInt64Column*>(
               &_FastbitResult_UInt64Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FastbitResult_UInt64Column& a, FastbitResult_UInt64Column& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_UInt64Column* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_UInt64Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_UInt64Column* New() const final {
    return CreateMaybeMessage<FastbitResult_UInt64Column>(nullptr);
  }

  FastbitResult_UInt64Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_UInt64Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_UInt64Column& from);
  void MergeFrom(const FastbitResult_UInt64Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_UInt64Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.UInt64Column";
  }
  protected:
  explicit FastbitResult_UInt64Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated uint64 values = 2[json_name = "values", packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_values();

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.UInt64Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_StringColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.StringColumn) */ {
 public:
  inline FastbitResult_StringColumn() : FastbitResult_StringColumn(nullptr) {};
  virtual ~FastbitResult_StringColumn();

  FastbitResult_StringColumn(const FastbitResult_StringColumn& from);
  FastbitResult_StringColumn(FastbitResult_StringColumn&& from) noexcept
    : FastbitResult_StringColumn() {
    *this = ::std::move(from);
  }

  inline FastbitResult_StringColumn& operator=(const FastbitResult_StringColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_StringColumn& operator=(FastbitResult_StringColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_StringColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_StringColumn* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_StringColumn*>(
               &_FastbitResult_StringColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FastbitResult_StringColumn& a, FastbitResult_StringColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_StringColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_StringColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_StringColumn* New() const final {
    return CreateMaybeMessage<FastbitResult_StringColumn>(nullptr);
  }

  FastbitResult_StringColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_StringColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_StringColumn& from);
  void MergeFrom(const FastbitResult_StringColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_StringColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.StringColumn";
  }
  protected:
  explicit FastbitResult_StringColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string values = 2[json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.StringColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_BytesColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.BytesColumn) */ {
 public:
  inline FastbitResult_BytesColumn() : FastbitResult_BytesColumn(nullptr) {};
  virtual ~FastbitResult_BytesColumn();

  FastbitResult_BytesColumn(const FastbitResult_BytesColumn& from);
  FastbitResult_BytesColumn(FastbitResult_BytesColumn&& from) noexcept
    : FastbitResult_BytesColumn() {
    *this = ::std::move(from);
  }

  inline FastbitResult_BytesColumn& operator=(const FastbitResult_BytesColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_BytesColumn& operator=(FastbitResult_BytesColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_BytesColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_BytesColumn* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_BytesColumn*>(
               &_FastbitResult_BytesColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FastbitResult_BytesColumn& a, FastbitResult_BytesColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_BytesColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_BytesColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_BytesColumn* New() const final {
    return CreateMaybeMessage<FastbitResult_BytesColumn>(nullptr);
  }

  FastbitResult_BytesColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_BytesColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_BytesColumn& from);
  void MergeFrom(const FastbitResult_BytesColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_BytesColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.BytesColumn";
  }
  protected:
  explicit FastbitResult_BytesColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated bytes values = 2[json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.BytesColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_FloatColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.FloatColumn) */ {
 public:
  inline FastbitResult_FloatColumn() : FastbitResult_FloatColumn(nullptr) {};
  virtual ~FastbitResult_FloatColumn();

  FastbitResult_FloatColumn(const FastbitResult_FloatColumn& from);
  FastbitResult_FloatColumn(FastbitResult_FloatColumn&& from) noexcept
    : FastbitResult_FloatColumn() {
    *this = ::std::move(from);
  }

  inline FastbitResult_FloatColumn& operator=(const FastbitResult_FloatColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_FloatColumn& operator=(FastbitResult_FloatColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_FloatColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_FloatColumn* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_FloatColumn*>(
               &_FastbitResult_FloatColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FastbitResult_FloatColumn& a, FastbitResult_FloatColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_FloatColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_FloatColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_FloatColumn* New() const final {
    return CreateMaybeMessage<FastbitResult_FloatColumn>(nullptr);
  }

  FastbitResult_FloatColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_FloatColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_FloatColumn& from);
  void MergeFrom(const FastbitResult_FloatColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_FloatColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.FloatColumn";
  }
  protected:
  explicit FastbitResult_FloatColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated float values = 2[json_name = "values", packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.FloatColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult_DoubleColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult.DoubleColumn) */ {
 public:
  inline FastbitResult_DoubleColumn() : FastbitResult_DoubleColumn(nullptr) {};
  virtual ~FastbitResult_DoubleColumn();

  FastbitResult_DoubleColumn(const FastbitResult_DoubleColumn& from);
  FastbitResult_DoubleColumn(FastbitResult_DoubleColumn&& from) noexcept
    : FastbitResult_DoubleColumn() {
    *this = ::std::move(from);
  }

  inline FastbitResult_DoubleColumn& operator=(const FastbitResult_DoubleColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult_DoubleColumn& operator=(FastbitResult_DoubleColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult_DoubleColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult_DoubleColumn* internal_default_instance() {
    return reinterpret_cast<const FastbitResult_DoubleColumn*>(
               &_FastbitResult_DoubleColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FastbitResult_DoubleColumn& a, FastbitResult_DoubleColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult_DoubleColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult_DoubleColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult_DoubleColumn* New() const final {
    return CreateMaybeMessage<FastbitResult_DoubleColumn>(nullptr);
  }

  FastbitResult_DoubleColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult_DoubleColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult_DoubleColumn& from);
  void MergeFrom(const FastbitResult_DoubleColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult_DoubleColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult.DoubleColumn";
  }
  protected:
  explicit FastbitResult_DoubleColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated double values = 2[json_name = "values", packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* release_header();
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* mutable_header();
  void set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  private:
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& _internal_header() const;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header);
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult.DoubleColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResult) */ {
 public:
  inline FastbitResult() : FastbitResult(nullptr) {};
  virtual ~FastbitResult();

  FastbitResult(const FastbitResult& from);
  FastbitResult(FastbitResult&& from) noexcept
    : FastbitResult() {
    *this = ::std::move(from);
  }

  inline FastbitResult& operator=(const FastbitResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResult& operator=(FastbitResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResult* internal_default_instance() {
    return reinterpret_cast<const FastbitResult*>(
               &_FastbitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FastbitResult& a, FastbitResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResult* New() const final {
    return CreateMaybeMessage<FastbitResult>(nullptr);
  }

  FastbitResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResult& from);
  void MergeFrom(const FastbitResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResult";
  }
  protected:
  explicit FastbitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FastbitResult_ColumnHeaderInfo ColumnHeaderInfo;
  typedef FastbitResult_InputParams InputParams;
  typedef FastbitResult_MemberId MemberId;
  typedef FastbitResult_Int32Column Int32Column;
  typedef FastbitResult_Int64Column Int64Column;
  typedef FastbitResult_UInt32Column UInt32Column;
  typedef FastbitResult_UInt64Column UInt64Column;
  typedef FastbitResult_StringColumn StringColumn;
  typedef FastbitResult_BytesColumn BytesColumn;
  typedef FastbitResult_FloatColumn FloatColumn;
  typedef FastbitResult_DoubleColumn DoubleColumn;

  // accessors -------------------------------------------------------

  enum : int {
    kInt32ColumnFieldNumber = 2,
    kInt64ColumnFieldNumber = 3,
    kUint32ColumnFieldNumber = 4,
    kUint64ColumnFieldNumber = 5,
    kStringColumnFieldNumber = 6,
    kBytesColumnFieldNumber = 7,
    kFloatColumnFieldNumber = 8,
    kDoubleColumnFieldNumber = 9,
    kParamsFieldNumber = 1,
  };
  // repeated .kentik.kde.v202212.FastbitResult.Int32Column int32_column = 2[json_name = "int32Column"];
  int int32_column_size() const;
  private:
  int _internal_int32_column_size() const;
  public:
  void clear_int32_column();
  ::kentik::kde::v202212::FastbitResult_Int32Column* mutable_int32_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int32Column >*
      mutable_int32_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_Int32Column& _internal_int32_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_Int32Column* _internal_add_int32_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_Int32Column& int32_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_Int32Column* add_int32_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int32Column >&
      int32_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.Int64Column int64_column = 3[json_name = "int64Column"];
  int int64_column_size() const;
  private:
  int _internal_int64_column_size() const;
  public:
  void clear_int64_column();
  ::kentik::kde::v202212::FastbitResult_Int64Column* mutable_int64_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int64Column >*
      mutable_int64_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_Int64Column& _internal_int64_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_Int64Column* _internal_add_int64_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_Int64Column& int64_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_Int64Column* add_int64_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int64Column >&
      int64_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.UInt32Column uint32_column = 4[json_name = "uint32Column"];
  int uint32_column_size() const;
  private:
  int _internal_uint32_column_size() const;
  public:
  void clear_uint32_column();
  ::kentik::kde::v202212::FastbitResult_UInt32Column* mutable_uint32_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt32Column >*
      mutable_uint32_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_UInt32Column& _internal_uint32_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_UInt32Column* _internal_add_uint32_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_UInt32Column& uint32_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_UInt32Column* add_uint32_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt32Column >&
      uint32_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.UInt64Column uint64_column = 5[json_name = "uint64Column"];
  int uint64_column_size() const;
  private:
  int _internal_uint64_column_size() const;
  public:
  void clear_uint64_column();
  ::kentik::kde::v202212::FastbitResult_UInt64Column* mutable_uint64_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt64Column >*
      mutable_uint64_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_UInt64Column& _internal_uint64_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_UInt64Column* _internal_add_uint64_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_UInt64Column& uint64_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_UInt64Column* add_uint64_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt64Column >&
      uint64_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.StringColumn string_column = 6[json_name = "stringColumn"];
  int string_column_size() const;
  private:
  int _internal_string_column_size() const;
  public:
  void clear_string_column();
  ::kentik::kde::v202212::FastbitResult_StringColumn* mutable_string_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_StringColumn >*
      mutable_string_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_StringColumn& _internal_string_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_StringColumn* _internal_add_string_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_StringColumn& string_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_StringColumn* add_string_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_StringColumn >&
      string_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.BytesColumn bytes_column = 7[json_name = "bytesColumn"];
  int bytes_column_size() const;
  private:
  int _internal_bytes_column_size() const;
  public:
  void clear_bytes_column();
  ::kentik::kde::v202212::FastbitResult_BytesColumn* mutable_bytes_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_BytesColumn >*
      mutable_bytes_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_BytesColumn& _internal_bytes_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_BytesColumn* _internal_add_bytes_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_BytesColumn& bytes_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_BytesColumn* add_bytes_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_BytesColumn >&
      bytes_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.FloatColumn float_column = 8[json_name = "floatColumn"];
  int float_column_size() const;
  private:
  int _internal_float_column_size() const;
  public:
  void clear_float_column();
  ::kentik::kde::v202212::FastbitResult_FloatColumn* mutable_float_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_FloatColumn >*
      mutable_float_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_FloatColumn& _internal_float_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_FloatColumn* _internal_add_float_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_FloatColumn& float_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_FloatColumn* add_float_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_FloatColumn >&
      float_column() const;

  // repeated .kentik.kde.v202212.FastbitResult.DoubleColumn double_column = 9[json_name = "doubleColumn"];
  int double_column_size() const;
  private:
  int _internal_double_column_size() const;
  public:
  void clear_double_column();
  ::kentik::kde::v202212::FastbitResult_DoubleColumn* mutable_double_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_DoubleColumn >*
      mutable_double_column();
  private:
  const ::kentik::kde::v202212::FastbitResult_DoubleColumn& _internal_double_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_DoubleColumn* _internal_add_double_column();
  public:
  const ::kentik::kde::v202212::FastbitResult_DoubleColumn& double_column(int index) const;
  ::kentik::kde::v202212::FastbitResult_DoubleColumn* add_double_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_DoubleColumn >&
      double_column() const;

  // .kentik.kde.v202212.FastbitResult.InputParams params = 1[json_name = "params"];
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::kentik::kde::v202212::FastbitResult_InputParams& params() const;
  ::kentik::kde::v202212::FastbitResult_InputParams* release_params();
  ::kentik::kde::v202212::FastbitResult_InputParams* mutable_params();
  void set_allocated_params(::kentik::kde::v202212::FastbitResult_InputParams* params);
  private:
  const ::kentik::kde::v202212::FastbitResult_InputParams& _internal_params() const;
  ::kentik::kde::v202212::FastbitResult_InputParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::kentik::kde::v202212::FastbitResult_InputParams* params);
  ::kentik::kde::v202212::FastbitResult_InputParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int32Column > int32_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int64Column > int64_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt32Column > uint32_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt64Column > uint64_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_StringColumn > string_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_BytesColumn > bytes_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_FloatColumn > float_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_DoubleColumn > double_column_;
  ::kentik::kde::v202212::FastbitResult_InputParams* params_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// -------------------------------------------------------------------

class FastbitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FastbitResponse) */ {
 public:
  inline FastbitResponse() : FastbitResponse(nullptr) {};
  virtual ~FastbitResponse();

  FastbitResponse(const FastbitResponse& from);
  FastbitResponse(FastbitResponse&& from) noexcept
    : FastbitResponse() {
    *this = ::std::move(from);
  }

  inline FastbitResponse& operator=(const FastbitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastbitResponse& operator=(FastbitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastbitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastbitResponse* internal_default_instance() {
    return reinterpret_cast<const FastbitResponse*>(
               &_FastbitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FastbitResponse& a, FastbitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FastbitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastbitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastbitResponse* New() const final {
    return CreateMaybeMessage<FastbitResponse>(nullptr);
  }

  FastbitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastbitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastbitResponse& from);
  void MergeFrom(const FastbitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastbitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FastbitResponse";
  }
  protected:
  explicit FastbitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kErrorFieldNumber = 4,
    kRequestKeyFieldNumber = 5,
    kResultFieldNumber = 3,
    kNumRespFieldNumber = 7,
    kThisRespFieldNumber = 8,
    kFromCacheFieldNumber = 6,
    kMissingMdsFieldNumber = 9,
    kTooLargeEntityFieldNumber = 10,
  };
  // string target = 1[json_name = "target"];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string request_id = 2[json_name = "requestId"];
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string error = 4[json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string request_key = 5[json_name = "requestKey"];
  bool has_request_key() const;
  private:
  bool _internal_has_request_key() const;
  public:
  void clear_request_key();
  const std::string& request_key() const;
  void set_request_key(const std::string& value);
  void set_request_key(std::string&& value);
  void set_request_key(const char* value);
  void set_request_key(const char* value, size_t size);
  std::string* mutable_request_key();
  std::string* release_request_key();
  void set_allocated_request_key(std::string* request_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_key(
      std::string* request_key);
  private:
  const std::string& _internal_request_key() const;
  void _internal_set_request_key(const std::string& value);
  std::string* _internal_mutable_request_key();
  public:

  // .kentik.kde.v202212.FastbitResult result = 3[json_name = "result"];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::kentik::kde::v202212::FastbitResult& result() const;
  ::kentik::kde::v202212::FastbitResult* release_result();
  ::kentik::kde::v202212::FastbitResult* mutable_result();
  void set_allocated_result(::kentik::kde::v202212::FastbitResult* result);
  private:
  const ::kentik::kde::v202212::FastbitResult& _internal_result() const;
  ::kentik::kde::v202212::FastbitResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::kentik::kde::v202212::FastbitResult* result);
  ::kentik::kde::v202212::FastbitResult* unsafe_arena_release_result();

  // int32 num_resp = 7[json_name = "numResp"];
  bool has_num_resp() const;
  private:
  bool _internal_has_num_resp() const;
  public:
  void clear_num_resp();
  ::PROTOBUF_NAMESPACE_ID::int32 num_resp() const;
  void set_num_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_resp() const;
  void _internal_set_num_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 this_resp = 8[json_name = "thisResp"];
  bool has_this_resp() const;
  private:
  bool _internal_has_this_resp() const;
  public:
  void clear_this_resp();
  ::PROTOBUF_NAMESPACE_ID::int32 this_resp() const;
  void set_this_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_this_resp() const;
  void _internal_set_this_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool from_cache = 6[json_name = "fromCache"];
  bool has_from_cache() const;
  private:
  bool _internal_has_from_cache() const;
  public:
  void clear_from_cache();
  bool from_cache() const;
  void set_from_cache(bool value);
  private:
  bool _internal_from_cache() const;
  void _internal_set_from_cache(bool value);
  public:

  // bool missing_mds = 9[json_name = "missingMds"];
  bool has_missing_mds() const;
  private:
  bool _internal_has_missing_mds() const;
  public:
  void clear_missing_mds();
  bool missing_mds() const;
  void set_missing_mds(bool value);
  private:
  bool _internal_missing_mds() const;
  void _internal_set_missing_mds(bool value);
  public:

  // bool too_large_entity = 10[json_name = "tooLargeEntity"];
  bool has_too_large_entity() const;
  private:
  bool _internal_has_too_large_entity() const;
  public:
  void clear_too_large_entity();
  bool too_large_entity() const;
  void set_too_large_entity(bool value);
  private:
  bool _internal_too_large_entity() const;
  void _internal_set_too_large_entity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FastbitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_key_;
  ::kentik::kde::v202212::FastbitResult* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_resp_;
  ::PROTOBUF_NAMESPACE_ID::int32 this_resp_;
  bool from_cache_;
  bool missing_mds_;
  bool too_large_entity_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FastbitResult_ColumnHeaderInfo

// string name = 1[json_name = "name"];
inline bool FastbitResult_ColumnHeaderInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FastbitResult_ColumnHeaderInfo::has_name() const {
  return _internal_has_name();
}
inline void FastbitResult_ColumnHeaderInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FastbitResult_ColumnHeaderInfo::name() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
  return _internal_name();
}
inline void FastbitResult_ColumnHeaderInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
}
inline std::string* FastbitResult_ColumnHeaderInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
  return _internal_mutable_name();
}
inline const std::string& FastbitResult_ColumnHeaderInfo::_internal_name() const {
  return name_.Get();
}
inline void FastbitResult_ColumnHeaderInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
}
inline void FastbitResult_ColumnHeaderInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
}
inline void FastbitResult_ColumnHeaderInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
}
inline std::string* FastbitResult_ColumnHeaderInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_ColumnHeaderInfo::release_name() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
}
inline std::string* FastbitResult_ColumnHeaderInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name)
}

// int32 position = 2[json_name = "position"];
inline bool FastbitResult_ColumnHeaderInfo::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FastbitResult_ColumnHeaderInfo::has_position() const {
  return _internal_has_position();
}
inline void FastbitResult_ColumnHeaderInfo::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_ColumnHeaderInfo::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_ColumnHeaderInfo::position() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.position)
  return _internal_position();
}
inline void FastbitResult_ColumnHeaderInfo::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  position_ = value;
}
inline void FastbitResult_ColumnHeaderInfo::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.position)
}

// string format = 3[json_name = "format"];
inline bool FastbitResult_ColumnHeaderInfo::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FastbitResult_ColumnHeaderInfo::has_format() const {
  return _internal_has_format();
}
inline void FastbitResult_ColumnHeaderInfo::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FastbitResult_ColumnHeaderInfo::format() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
  return _internal_format();
}
inline void FastbitResult_ColumnHeaderInfo::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
}
inline std::string* FastbitResult_ColumnHeaderInfo::mutable_format() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
  return _internal_mutable_format();
}
inline const std::string& FastbitResult_ColumnHeaderInfo::_internal_format() const {
  return format_.Get();
}
inline void FastbitResult_ColumnHeaderInfo::_internal_set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::set_format(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
}
inline void FastbitResult_ColumnHeaderInfo::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
}
inline void FastbitResult_ColumnHeaderInfo::set_format(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
}
inline std::string* FastbitResult_ColumnHeaderInfo::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000002u;
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_ColumnHeaderInfo::release_format() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
  if (!_internal_has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
}
inline std::string* FastbitResult_ColumnHeaderInfo::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format)
}

// string agg_name = 4[json_name = "aggName"];
inline bool FastbitResult_ColumnHeaderInfo::_internal_has_agg_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FastbitResult_ColumnHeaderInfo::has_agg_name() const {
  return _internal_has_agg_name();
}
inline void FastbitResult_ColumnHeaderInfo::clear_agg_name() {
  agg_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FastbitResult_ColumnHeaderInfo::agg_name() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
  return _internal_agg_name();
}
inline void FastbitResult_ColumnHeaderInfo::set_agg_name(const std::string& value) {
  _internal_set_agg_name(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
}
inline std::string* FastbitResult_ColumnHeaderInfo::mutable_agg_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
  return _internal_mutable_agg_name();
}
inline const std::string& FastbitResult_ColumnHeaderInfo::_internal_agg_name() const {
  return agg_name_.Get();
}
inline void FastbitResult_ColumnHeaderInfo::_internal_set_agg_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  agg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::set_agg_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  agg_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
}
inline void FastbitResult_ColumnHeaderInfo::set_agg_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  agg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
}
inline void FastbitResult_ColumnHeaderInfo::set_agg_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  agg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
}
inline std::string* FastbitResult_ColumnHeaderInfo::_internal_mutable_agg_name() {
  _has_bits_[0] |= 0x00000004u;
  return agg_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_ColumnHeaderInfo::release_agg_name() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
  if (!_internal_has_agg_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return agg_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::set_allocated_agg_name(std::string* agg_name) {
  if (agg_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  agg_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agg_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
}
inline std::string* FastbitResult_ColumnHeaderInfo::unsafe_arena_release_agg_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return agg_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_ColumnHeaderInfo::unsafe_arena_set_allocated_agg_name(
    std::string* agg_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agg_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  agg_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agg_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FastbitResult_InputParams

// string i_orderby = 1[json_name = "iOrderby"];
inline bool FastbitResult_InputParams::_internal_has_i_orderby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_orderby() const {
  return _internal_has_i_orderby();
}
inline void FastbitResult_InputParams::clear_i_orderby() {
  i_orderby_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FastbitResult_InputParams::i_orderby() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
  return _internal_i_orderby();
}
inline void FastbitResult_InputParams::set_i_orderby(const std::string& value) {
  _internal_set_i_orderby(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
}
inline std::string* FastbitResult_InputParams::mutable_i_orderby() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
  return _internal_mutable_i_orderby();
}
inline const std::string& FastbitResult_InputParams::_internal_i_orderby() const {
  return i_orderby_.Get();
}
inline void FastbitResult_InputParams::_internal_set_i_orderby(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  i_orderby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_InputParams::set_i_orderby(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  i_orderby_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
}
inline void FastbitResult_InputParams::set_i_orderby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  i_orderby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
}
inline void FastbitResult_InputParams::set_i_orderby(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  i_orderby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
}
inline std::string* FastbitResult_InputParams::_internal_mutable_i_orderby() {
  _has_bits_[0] |= 0x00000001u;
  return i_orderby_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_InputParams::release_i_orderby() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
  if (!_internal_has_i_orderby()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return i_orderby_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_InputParams::set_allocated_i_orderby(std::string* i_orderby) {
  if (i_orderby != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_orderby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_orderby,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
}
inline std::string* FastbitResult_InputParams::unsafe_arena_release_i_orderby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return i_orderby_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_InputParams::unsafe_arena_set_allocated_i_orderby(
    std::string* i_orderby) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_orderby != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_orderby_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_orderby, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_orderby)
}

// int32 i_offset = 2[json_name = "iOffset"];
inline bool FastbitResult_InputParams::_internal_has_i_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_offset() const {
  return _internal_has_i_offset();
}
inline void FastbitResult_InputParams::clear_i_offset() {
  i_offset_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_InputParams::_internal_i_offset() const {
  return i_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_InputParams::i_offset() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_offset)
  return _internal_i_offset();
}
inline void FastbitResult_InputParams::_internal_set_i_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  i_offset_ = value;
}
inline void FastbitResult_InputParams::set_i_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i_offset(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_offset)
}

// int32 i_limit = 3[json_name = "iLimit"];
inline bool FastbitResult_InputParams::_internal_has_i_limit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_limit() const {
  return _internal_has_i_limit();
}
inline void FastbitResult_InputParams::clear_i_limit() {
  i_limit_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_InputParams::_internal_i_limit() const {
  return i_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_InputParams::i_limit() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_limit)
  return _internal_i_limit();
}
inline void FastbitResult_InputParams::_internal_set_i_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  i_limit_ = value;
}
inline void FastbitResult_InputParams::set_i_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i_limit(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_limit)
}

// int64 i_start_time = 4[json_name = "iStartTime"];
inline bool FastbitResult_InputParams::_internal_has_i_start_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_start_time() const {
  return _internal_has_i_start_time();
}
inline void FastbitResult_InputParams::clear_i_start_time() {
  i_start_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::_internal_i_start_time() const {
  return i_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::i_start_time() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_start_time)
  return _internal_i_start_time();
}
inline void FastbitResult_InputParams::_internal_set_i_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  i_start_time_ = value;
}
inline void FastbitResult_InputParams::set_i_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i_start_time(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_start_time)
}

// int64 i_end_time = 5[json_name = "iEndTime"];
inline bool FastbitResult_InputParams::_internal_has_i_end_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_end_time() const {
  return _internal_has_i_end_time();
}
inline void FastbitResult_InputParams::clear_i_end_time() {
  i_end_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::_internal_i_end_time() const {
  return i_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::i_end_time() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_end_time)
  return _internal_i_end_time();
}
inline void FastbitResult_InputParams::_internal_set_i_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  i_end_time_ = value;
}
inline void FastbitResult_InputParams::set_i_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i_end_time(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_end_time)
}

// string i_device_name = 6[json_name = "iDeviceName"];
inline bool FastbitResult_InputParams::_internal_has_i_device_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_device_name() const {
  return _internal_has_i_device_name();
}
inline void FastbitResult_InputParams::clear_i_device_name() {
  i_device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FastbitResult_InputParams::i_device_name() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
  return _internal_i_device_name();
}
inline void FastbitResult_InputParams::set_i_device_name(const std::string& value) {
  _internal_set_i_device_name(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
}
inline std::string* FastbitResult_InputParams::mutable_i_device_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
  return _internal_mutable_i_device_name();
}
inline const std::string& FastbitResult_InputParams::_internal_i_device_name() const {
  return i_device_name_.Get();
}
inline void FastbitResult_InputParams::_internal_set_i_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_InputParams::set_i_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
}
inline void FastbitResult_InputParams::set_i_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
}
inline void FastbitResult_InputParams::set_i_device_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
}
inline std::string* FastbitResult_InputParams::_internal_mutable_i_device_name() {
  _has_bits_[0] |= 0x00000002u;
  return i_device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_InputParams::release_i_device_name() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
  if (!_internal_has_i_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_InputParams::set_allocated_i_device_name(std::string* i_device_name) {
  if (i_device_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
}
inline std::string* FastbitResult_InputParams::unsafe_arena_release_i_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return i_device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_InputParams::unsafe_arena_set_allocated_i_device_name(
    std::string* i_device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_device_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_device_name)
}

// int64 i_device_id = 7[json_name = "iDeviceId"];
inline bool FastbitResult_InputParams::_internal_has_i_device_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_device_id() const {
  return _internal_has_i_device_id();
}
inline void FastbitResult_InputParams::clear_i_device_id() {
  i_device_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::_internal_i_device_id() const {
  return i_device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::i_device_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_device_id)
  return _internal_i_device_id();
}
inline void FastbitResult_InputParams::_internal_set_i_device_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  i_device_id_ = value;
}
inline void FastbitResult_InputParams::set_i_device_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_device_id)
}

// int64 i_sq_start = 8[json_name = "iSqStart"];
inline bool FastbitResult_InputParams::_internal_has_i_sq_start() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_sq_start() const {
  return _internal_has_i_sq_start();
}
inline void FastbitResult_InputParams::clear_i_sq_start() {
  i_sq_start_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::_internal_i_sq_start() const {
  return i_sq_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::i_sq_start() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_sq_start)
  return _internal_i_sq_start();
}
inline void FastbitResult_InputParams::_internal_set_i_sq_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  i_sq_start_ = value;
}
inline void FastbitResult_InputParams::set_i_sq_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i_sq_start(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_sq_start)
}

// int64 i_sq_end = 9[json_name = "iSqEnd"];
inline bool FastbitResult_InputParams::_internal_has_i_sq_end() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_sq_end() const {
  return _internal_has_i_sq_end();
}
inline void FastbitResult_InputParams::clear_i_sq_end() {
  i_sq_end_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::_internal_i_sq_end() const {
  return i_sq_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_InputParams::i_sq_end() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_sq_end)
  return _internal_i_sq_end();
}
inline void FastbitResult_InputParams::_internal_set_i_sq_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  i_sq_end_ = value;
}
inline void FastbitResult_InputParams::set_i_sq_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i_sq_end(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_sq_end)
}

// int32 i_duration = 10[json_name = "iDuration"];
inline bool FastbitResult_InputParams::_internal_has_i_duration() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_duration() const {
  return _internal_has_i_duration();
}
inline void FastbitResult_InputParams::clear_i_duration() {
  i_duration_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_InputParams::_internal_i_duration() const {
  return i_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_InputParams::i_duration() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_duration)
  return _internal_i_duration();
}
inline void FastbitResult_InputParams::_internal_set_i_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  i_duration_ = value;
}
inline void FastbitResult_InputParams::set_i_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i_duration(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_duration)
}

// string i_device_site_name = 11[json_name = "iDeviceSiteName"];
inline bool FastbitResult_InputParams::_internal_has_i_device_site_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_device_site_name() const {
  return _internal_has_i_device_site_name();
}
inline void FastbitResult_InputParams::clear_i_device_site_name() {
  i_device_site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FastbitResult_InputParams::i_device_site_name() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
  return _internal_i_device_site_name();
}
inline void FastbitResult_InputParams::set_i_device_site_name(const std::string& value) {
  _internal_set_i_device_site_name(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
}
inline std::string* FastbitResult_InputParams::mutable_i_device_site_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
  return _internal_mutable_i_device_site_name();
}
inline const std::string& FastbitResult_InputParams::_internal_i_device_site_name() const {
  return i_device_site_name_.Get();
}
inline void FastbitResult_InputParams::_internal_set_i_device_site_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_InputParams::set_i_device_site_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_device_site_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
}
inline void FastbitResult_InputParams::set_i_device_site_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
}
inline void FastbitResult_InputParams::set_i_device_site_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
}
inline std::string* FastbitResult_InputParams::_internal_mutable_i_device_site_name() {
  _has_bits_[0] |= 0x00000004u;
  return i_device_site_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_InputParams::release_i_device_site_name() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
  if (!_internal_has_i_device_site_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_device_site_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_InputParams::set_allocated_i_device_site_name(std::string* i_device_site_name) {
  if (i_device_site_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_device_site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_device_site_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
}
inline std::string* FastbitResult_InputParams::unsafe_arena_release_i_device_site_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return i_device_site_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_InputParams::unsafe_arena_set_allocated_i_device_site_name(
    std::string* i_device_site_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_device_site_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_device_site_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_device_site_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name)
}

// string i_device_type = 12[json_name = "iDeviceType"];
inline bool FastbitResult_InputParams::_internal_has_i_device_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_device_type() const {
  return _internal_has_i_device_type();
}
inline void FastbitResult_InputParams::clear_i_device_type() {
  i_device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FastbitResult_InputParams::i_device_type() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
  return _internal_i_device_type();
}
inline void FastbitResult_InputParams::set_i_device_type(const std::string& value) {
  _internal_set_i_device_type(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
}
inline std::string* FastbitResult_InputParams::mutable_i_device_type() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
  return _internal_mutable_i_device_type();
}
inline const std::string& FastbitResult_InputParams::_internal_i_device_type() const {
  return i_device_type_.Get();
}
inline void FastbitResult_InputParams::_internal_set_i_device_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_InputParams::set_i_device_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  i_device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
}
inline void FastbitResult_InputParams::set_i_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
}
inline void FastbitResult_InputParams::set_i_device_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
}
inline std::string* FastbitResult_InputParams::_internal_mutable_i_device_type() {
  _has_bits_[0] |= 0x00000008u;
  return i_device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_InputParams::release_i_device_type() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
  if (!_internal_has_i_device_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return i_device_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_InputParams::set_allocated_i_device_type(std::string* i_device_type) {
  if (i_device_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  i_device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
}
inline std::string* FastbitResult_InputParams::unsafe_arena_release_i_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return i_device_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_InputParams::unsafe_arena_set_allocated_i_device_type(
    std::string* i_device_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_device_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  i_device_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_device_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_device_type)
}

// string i_debug_info = 13[json_name = "iDebugInfo"];
inline bool FastbitResult_InputParams::_internal_has_i_debug_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_i_debug_info() const {
  return _internal_has_i_debug_info();
}
inline void FastbitResult_InputParams::clear_i_debug_info() {
  i_debug_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FastbitResult_InputParams::i_debug_info() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
  return _internal_i_debug_info();
}
inline void FastbitResult_InputParams::set_i_debug_info(const std::string& value) {
  _internal_set_i_debug_info(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
}
inline std::string* FastbitResult_InputParams::mutable_i_debug_info() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
  return _internal_mutable_i_debug_info();
}
inline const std::string& FastbitResult_InputParams::_internal_i_debug_info() const {
  return i_debug_info_.Get();
}
inline void FastbitResult_InputParams::_internal_set_i_debug_info(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  i_debug_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_InputParams::set_i_debug_info(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  i_debug_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
}
inline void FastbitResult_InputParams::set_i_debug_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  i_debug_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
}
inline void FastbitResult_InputParams::set_i_debug_info(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  i_debug_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
}
inline std::string* FastbitResult_InputParams::_internal_mutable_i_debug_info() {
  _has_bits_[0] |= 0x00000010u;
  return i_debug_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_InputParams::release_i_debug_info() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
  if (!_internal_has_i_debug_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return i_debug_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_InputParams::set_allocated_i_debug_info(std::string* i_debug_info) {
  if (i_debug_info != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  i_debug_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_debug_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
}
inline std::string* FastbitResult_InputParams::unsafe_arena_release_i_debug_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return i_debug_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_InputParams::unsafe_arena_set_allocated_i_debug_info(
    std::string* i_debug_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_debug_info != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  i_debug_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_debug_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.InputParams.i_debug_info)
}

// bool use_member_id = 14[json_name = "useMemberId"];
inline bool FastbitResult_InputParams::_internal_has_use_member_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FastbitResult_InputParams::has_use_member_id() const {
  return _internal_has_use_member_id();
}
inline void FastbitResult_InputParams::clear_use_member_id() {
  use_member_id_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool FastbitResult_InputParams::_internal_use_member_id() const {
  return use_member_id_;
}
inline bool FastbitResult_InputParams::use_member_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.InputParams.use_member_id)
  return _internal_use_member_id();
}
inline void FastbitResult_InputParams::_internal_set_use_member_id(bool value) {
  _has_bits_[0] |= 0x00002000u;
  use_member_id_ = value;
}
inline void FastbitResult_InputParams::set_use_member_id(bool value) {
  _internal_set_use_member_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.InputParams.use_member_id)
}

// map<int64, .kentik.kde.v202212.FastbitResult.MemberId> member_id = 15[json_name = "memberId"];
inline int FastbitResult_InputParams::_internal_member_id_size() const {
  return member_id_.size();
}
inline int FastbitResult_InputParams::member_id_size() const {
  return _internal_member_id_size();
}
inline void FastbitResult_InputParams::clear_member_id() {
  member_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >&
FastbitResult_InputParams::_internal_member_id() const {
  return member_id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >&
FastbitResult_InputParams::member_id() const {
  // @@protoc_insertion_point(field_map:kentik.kde.v202212.FastbitResult.InputParams.member_id)
  return _internal_member_id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >*
FastbitResult_InputParams::_internal_mutable_member_id() {
  return member_id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >*
FastbitResult_InputParams::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable_map:kentik.kde.v202212.FastbitResult.InputParams.member_id)
  return _internal_mutable_member_id();
}

// -------------------------------------------------------------------

// FastbitResult_MemberId

// string i_device_name = 1[json_name = "iDeviceName"];
inline bool FastbitResult_MemberId::_internal_has_i_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FastbitResult_MemberId::has_i_device_name() const {
  return _internal_has_i_device_name();
}
inline void FastbitResult_MemberId::clear_i_device_name() {
  i_device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FastbitResult_MemberId::i_device_name() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
  return _internal_i_device_name();
}
inline void FastbitResult_MemberId::set_i_device_name(const std::string& value) {
  _internal_set_i_device_name(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
}
inline std::string* FastbitResult_MemberId::mutable_i_device_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
  return _internal_mutable_i_device_name();
}
inline const std::string& FastbitResult_MemberId::_internal_i_device_name() const {
  return i_device_name_.Get();
}
inline void FastbitResult_MemberId::_internal_set_i_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_MemberId::set_i_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  i_device_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
}
inline void FastbitResult_MemberId::set_i_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
}
inline void FastbitResult_MemberId::set_i_device_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
}
inline std::string* FastbitResult_MemberId::_internal_mutable_i_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return i_device_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_MemberId::release_i_device_name() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
  if (!_internal_has_i_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return i_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_MemberId::set_allocated_i_device_name(std::string* i_device_name) {
  if (i_device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
}
inline std::string* FastbitResult_MemberId::unsafe_arena_release_i_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return i_device_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_MemberId::unsafe_arena_set_allocated_i_device_name(
    std::string* i_device_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_device_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_device_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.MemberId.i_device_name)
}

// string i_device_site_name = 2[json_name = "iDeviceSiteName"];
inline bool FastbitResult_MemberId::_internal_has_i_device_site_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FastbitResult_MemberId::has_i_device_site_name() const {
  return _internal_has_i_device_site_name();
}
inline void FastbitResult_MemberId::clear_i_device_site_name() {
  i_device_site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FastbitResult_MemberId::i_device_site_name() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
  return _internal_i_device_site_name();
}
inline void FastbitResult_MemberId::set_i_device_site_name(const std::string& value) {
  _internal_set_i_device_site_name(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
}
inline std::string* FastbitResult_MemberId::mutable_i_device_site_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
  return _internal_mutable_i_device_site_name();
}
inline const std::string& FastbitResult_MemberId::_internal_i_device_site_name() const {
  return i_device_site_name_.Get();
}
inline void FastbitResult_MemberId::_internal_set_i_device_site_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_MemberId::set_i_device_site_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_device_site_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
}
inline void FastbitResult_MemberId::set_i_device_site_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
}
inline void FastbitResult_MemberId::set_i_device_site_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
}
inline std::string* FastbitResult_MemberId::_internal_mutable_i_device_site_name() {
  _has_bits_[0] |= 0x00000002u;
  return i_device_site_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_MemberId::release_i_device_site_name() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
  if (!_internal_has_i_device_site_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_device_site_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_MemberId::set_allocated_i_device_site_name(std::string* i_device_site_name) {
  if (i_device_site_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_device_site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_device_site_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
}
inline std::string* FastbitResult_MemberId::unsafe_arena_release_i_device_site_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return i_device_site_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_MemberId::unsafe_arena_set_allocated_i_device_site_name(
    std::string* i_device_site_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_device_site_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_device_site_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_device_site_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name)
}

// string i_device_type = 3[json_name = "iDeviceType"];
inline bool FastbitResult_MemberId::_internal_has_i_device_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FastbitResult_MemberId::has_i_device_type() const {
  return _internal_has_i_device_type();
}
inline void FastbitResult_MemberId::clear_i_device_type() {
  i_device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FastbitResult_MemberId::i_device_type() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
  return _internal_i_device_type();
}
inline void FastbitResult_MemberId::set_i_device_type(const std::string& value) {
  _internal_set_i_device_type(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
}
inline std::string* FastbitResult_MemberId::mutable_i_device_type() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
  return _internal_mutable_i_device_type();
}
inline const std::string& FastbitResult_MemberId::_internal_i_device_type() const {
  return i_device_type_.Get();
}
inline void FastbitResult_MemberId::_internal_set_i_device_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResult_MemberId::set_i_device_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
}
inline void FastbitResult_MemberId::set_i_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
}
inline void FastbitResult_MemberId::set_i_device_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
}
inline std::string* FastbitResult_MemberId::_internal_mutable_i_device_type() {
  _has_bits_[0] |= 0x00000004u;
  return i_device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResult_MemberId::release_i_device_type() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
  if (!_internal_has_i_device_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_device_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResult_MemberId::set_allocated_i_device_type(std::string* i_device_type) {
  if (i_device_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
}
inline std::string* FastbitResult_MemberId::unsafe_arena_release_i_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return i_device_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResult_MemberId::unsafe_arena_set_allocated_i_device_type(
    std::string* i_device_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (i_device_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_device_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      i_device_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.MemberId.i_device_type)
}

// -------------------------------------------------------------------

// FastbitResult_Int32Column

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_Int32Column::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_Int32Column::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_Int32Column::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_Int32Column::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_Int32Column::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.Int32Column.header)
  return _internal_header();
}
inline void FastbitResult_Int32Column::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.Int32Column.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int32Column::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int32Column::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.Int32Column.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int32Column::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int32Column::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.Int32Column.header)
  return _internal_mutable_header();
}
inline void FastbitResult_Int32Column::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.Int32Column.header)
}

// repeated int32 values = 2[json_name = "values", packed = true];
inline int FastbitResult_Int32Column::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_Int32Column::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_Int32Column::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_Int32Column::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResult_Int32Column::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.Int32Column.values)
  return _internal_values(index);
}
inline void FastbitResult_Int32Column::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.Int32Column.values)
}
inline void FastbitResult_Int32Column::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void FastbitResult_Int32Column::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.Int32Column.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FastbitResult_Int32Column::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FastbitResult_Int32Column::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.Int32Column.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FastbitResult_Int32Column::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FastbitResult_Int32Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.Int32Column.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FastbitResult_Int64Column

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_Int64Column::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_Int64Column::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_Int64Column::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_Int64Column::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_Int64Column::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.Int64Column.header)
  return _internal_header();
}
inline void FastbitResult_Int64Column::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.Int64Column.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int64Column::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int64Column::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.Int64Column.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int64Column::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_Int64Column::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.Int64Column.header)
  return _internal_mutable_header();
}
inline void FastbitResult_Int64Column::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.Int64Column.header)
}

// repeated int64 values = 2[json_name = "values", packed = true];
inline int FastbitResult_Int64Column::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_Int64Column::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_Int64Column::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_Int64Column::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FastbitResult_Int64Column::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.Int64Column.values)
  return _internal_values(index);
}
inline void FastbitResult_Int64Column::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.Int64Column.values)
}
inline void FastbitResult_Int64Column::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Add(value);
}
inline void FastbitResult_Int64Column::add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.Int64Column.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FastbitResult_Int64Column::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FastbitResult_Int64Column::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.Int64Column.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FastbitResult_Int64Column::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FastbitResult_Int64Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.Int64Column.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FastbitResult_UInt32Column

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_UInt32Column::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_UInt32Column::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_UInt32Column::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_UInt32Column::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_UInt32Column::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.UInt32Column.header)
  return _internal_header();
}
inline void FastbitResult_UInt32Column::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.UInt32Column.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt32Column::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt32Column::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.UInt32Column.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt32Column::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt32Column::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.UInt32Column.header)
  return _internal_mutable_header();
}
inline void FastbitResult_UInt32Column::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.UInt32Column.header)
}

// repeated uint32 values = 2[json_name = "values", packed = true];
inline int FastbitResult_UInt32Column::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_UInt32Column::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_UInt32Column::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FastbitResult_UInt32Column::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FastbitResult_UInt32Column::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.UInt32Column.values)
  return _internal_values(index);
}
inline void FastbitResult_UInt32Column::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.UInt32Column.values)
}
inline void FastbitResult_UInt32Column::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Add(value);
}
inline void FastbitResult_UInt32Column::add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.UInt32Column.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FastbitResult_UInt32Column::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FastbitResult_UInt32Column::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.UInt32Column.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FastbitResult_UInt32Column::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FastbitResult_UInt32Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.UInt32Column.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FastbitResult_UInt64Column

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_UInt64Column::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_UInt64Column::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_UInt64Column::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_UInt64Column::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_UInt64Column::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.UInt64Column.header)
  return _internal_header();
}
inline void FastbitResult_UInt64Column::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.UInt64Column.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt64Column::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt64Column::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.UInt64Column.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt64Column::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_UInt64Column::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.UInt64Column.header)
  return _internal_mutable_header();
}
inline void FastbitResult_UInt64Column::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.UInt64Column.header)
}

// repeated uint64 values = 2[json_name = "values", packed = true];
inline int FastbitResult_UInt64Column::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_UInt64Column::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_UInt64Column::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FastbitResult_UInt64Column::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FastbitResult_UInt64Column::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.UInt64Column.values)
  return _internal_values(index);
}
inline void FastbitResult_UInt64Column::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.UInt64Column.values)
}
inline void FastbitResult_UInt64Column::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Add(value);
}
inline void FastbitResult_UInt64Column::add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.UInt64Column.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FastbitResult_UInt64Column::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FastbitResult_UInt64Column::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.UInt64Column.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FastbitResult_UInt64Column::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FastbitResult_UInt64Column::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.UInt64Column.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FastbitResult_StringColumn

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_StringColumn::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_StringColumn::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_StringColumn::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_StringColumn::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_StringColumn::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.StringColumn.header)
  return _internal_header();
}
inline void FastbitResult_StringColumn::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.StringColumn.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_StringColumn::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_StringColumn::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.StringColumn.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_StringColumn::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_StringColumn::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.StringColumn.header)
  return _internal_mutable_header();
}
inline void FastbitResult_StringColumn::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.StringColumn.header)
}

// repeated string values = 2[json_name = "values"];
inline int FastbitResult_StringColumn::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_StringColumn::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_StringColumn::clear_values() {
  values_.Clear();
}
inline std::string* FastbitResult_StringColumn::add_values() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kde.v202212.FastbitResult.StringColumn.values)
  return _internal_add_values();
}
inline const std::string& FastbitResult_StringColumn::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& FastbitResult_StringColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.StringColumn.values)
  return _internal_values(index);
}
inline std::string* FastbitResult_StringColumn::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.StringColumn.values)
  return values_.Mutable(index);
}
inline void FastbitResult_StringColumn::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.StringColumn.values)
  values_.Mutable(index)->assign(value);
}
inline void FastbitResult_StringColumn::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.StringColumn.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void FastbitResult_StringColumn::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.StringColumn.values)
}
inline void FastbitResult_StringColumn::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.StringColumn.values)
}
inline std::string* FastbitResult_StringColumn::_internal_add_values() {
  return values_.Add();
}
inline void FastbitResult_StringColumn::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.StringColumn.values)
}
inline void FastbitResult_StringColumn::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.StringColumn.values)
}
inline void FastbitResult_StringColumn::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kde.v202212.FastbitResult.StringColumn.values)
}
inline void FastbitResult_StringColumn::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kde.v202212.FastbitResult.StringColumn.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FastbitResult_StringColumn::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.StringColumn.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FastbitResult_StringColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.StringColumn.values)
  return &values_;
}

// -------------------------------------------------------------------

// FastbitResult_BytesColumn

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_BytesColumn::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_BytesColumn::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_BytesColumn::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_BytesColumn::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_BytesColumn::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.BytesColumn.header)
  return _internal_header();
}
inline void FastbitResult_BytesColumn::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.BytesColumn.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_BytesColumn::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_BytesColumn::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.BytesColumn.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_BytesColumn::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_BytesColumn::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.BytesColumn.header)
  return _internal_mutable_header();
}
inline void FastbitResult_BytesColumn::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.BytesColumn.header)
}

// repeated bytes values = 2[json_name = "values"];
inline int FastbitResult_BytesColumn::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_BytesColumn::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_BytesColumn::clear_values() {
  values_.Clear();
}
inline std::string* FastbitResult_BytesColumn::add_values() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  return _internal_add_values();
}
inline const std::string& FastbitResult_BytesColumn::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& FastbitResult_BytesColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  return _internal_values(index);
}
inline std::string* FastbitResult_BytesColumn::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  return values_.Mutable(index);
}
inline void FastbitResult_BytesColumn::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  values_.Mutable(index)->assign(value);
}
inline void FastbitResult_BytesColumn::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void FastbitResult_BytesColumn::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResult.BytesColumn.values)
}
inline void FastbitResult_BytesColumn::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResult.BytesColumn.values)
}
inline std::string* FastbitResult_BytesColumn::_internal_add_values() {
  return values_.Add();
}
inline void FastbitResult_BytesColumn::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.BytesColumn.values)
}
inline void FastbitResult_BytesColumn::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.BytesColumn.values)
}
inline void FastbitResult_BytesColumn::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kde.v202212.FastbitResult.BytesColumn.values)
}
inline void FastbitResult_BytesColumn::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kde.v202212.FastbitResult.BytesColumn.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FastbitResult_BytesColumn::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FastbitResult_BytesColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.BytesColumn.values)
  return &values_;
}

// -------------------------------------------------------------------

// FastbitResult_FloatColumn

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_FloatColumn::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_FloatColumn::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_FloatColumn::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_FloatColumn::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_FloatColumn::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.FloatColumn.header)
  return _internal_header();
}
inline void FastbitResult_FloatColumn::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.FloatColumn.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_FloatColumn::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_FloatColumn::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.FloatColumn.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_FloatColumn::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_FloatColumn::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.FloatColumn.header)
  return _internal_mutable_header();
}
inline void FastbitResult_FloatColumn::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.FloatColumn.header)
}

// repeated float values = 2[json_name = "values", packed = true];
inline int FastbitResult_FloatColumn::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_FloatColumn::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_FloatColumn::clear_values() {
  values_.Clear();
}
inline float FastbitResult_FloatColumn::_internal_values(int index) const {
  return values_.Get(index);
}
inline float FastbitResult_FloatColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.FloatColumn.values)
  return _internal_values(index);
}
inline void FastbitResult_FloatColumn::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.FloatColumn.values)
}
inline void FastbitResult_FloatColumn::_internal_add_values(float value) {
  values_.Add(value);
}
inline void FastbitResult_FloatColumn::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.FloatColumn.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FastbitResult_FloatColumn::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FastbitResult_FloatColumn::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.FloatColumn.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FastbitResult_FloatColumn::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FastbitResult_FloatColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.FloatColumn.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FastbitResult_DoubleColumn

// .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
inline bool FastbitResult_DoubleColumn::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FastbitResult_DoubleColumn::has_header() const {
  return _internal_has_header();
}
inline void FastbitResult_DoubleColumn::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_DoubleColumn::_internal_header() const {
  const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& FastbitResult_DoubleColumn::header() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.DoubleColumn.header)
  return _internal_header();
}
inline void FastbitResult_DoubleColumn::unsafe_arena_set_allocated_header(
    ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.DoubleColumn.header)
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_DoubleColumn::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_DoubleColumn::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.DoubleColumn.header)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_DoubleColumn::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* FastbitResult_DoubleColumn::mutable_header() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.DoubleColumn.header)
  return _internal_mutable_header();
}
inline void FastbitResult_DoubleColumn::set_allocated_header(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.DoubleColumn.header)
}

// repeated double values = 2[json_name = "values", packed = true];
inline int FastbitResult_DoubleColumn::_internal_values_size() const {
  return values_.size();
}
inline int FastbitResult_DoubleColumn::values_size() const {
  return _internal_values_size();
}
inline void FastbitResult_DoubleColumn::clear_values() {
  values_.Clear();
}
inline double FastbitResult_DoubleColumn::_internal_values(int index) const {
  return values_.Get(index);
}
inline double FastbitResult_DoubleColumn::values(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.DoubleColumn.values)
  return _internal_values(index);
}
inline void FastbitResult_DoubleColumn::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResult.DoubleColumn.values)
}
inline void FastbitResult_DoubleColumn::_internal_add_values(double value) {
  values_.Add(value);
}
inline void FastbitResult_DoubleColumn::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.DoubleColumn.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FastbitResult_DoubleColumn::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FastbitResult_DoubleColumn::values() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.DoubleColumn.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FastbitResult_DoubleColumn::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FastbitResult_DoubleColumn::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.DoubleColumn.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// FastbitResult

// .kentik.kde.v202212.FastbitResult.InputParams params = 1[json_name = "params"];
inline bool FastbitResult::_internal_has_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || params_ != nullptr);
  return value;
}
inline bool FastbitResult::has_params() const {
  return _internal_has_params();
}
inline void FastbitResult::clear_params() {
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::kde::v202212::FastbitResult_InputParams& FastbitResult::_internal_params() const {
  const ::kentik::kde::v202212::FastbitResult_InputParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult_InputParams*>(
      &::kentik::kde::v202212::_FastbitResult_InputParams_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult_InputParams& FastbitResult::params() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.params)
  return _internal_params();
}
inline void FastbitResult::unsafe_arena_set_allocated_params(
    ::kentik::kde::v202212::FastbitResult_InputParams* params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResult.params)
}
inline ::kentik::kde::v202212::FastbitResult_InputParams* FastbitResult::release_params() {
  auto temp = unsafe_arena_release_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_InputParams* FastbitResult::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResult.params)
  _has_bits_[0] &= ~0x00000001u;
  ::kentik::kde::v202212::FastbitResult_InputParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult_InputParams* FastbitResult::_internal_mutable_params() {
  _has_bits_[0] |= 0x00000001u;
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult_InputParams>(GetArena());
    params_ = p;
  }
  return params_;
}
inline ::kentik::kde::v202212::FastbitResult_InputParams* FastbitResult::mutable_params() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.params)
  return _internal_mutable_params();
}
inline void FastbitResult::set_allocated_params(::kentik::kde::v202212::FastbitResult_InputParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResult.params)
}

// repeated .kentik.kde.v202212.FastbitResult.Int32Column int32_column = 2[json_name = "int32Column"];
inline int FastbitResult::_internal_int32_column_size() const {
  return int32_column_.size();
}
inline int FastbitResult::int32_column_size() const {
  return _internal_int32_column_size();
}
inline void FastbitResult::clear_int32_column() {
  int32_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_Int32Column* FastbitResult::mutable_int32_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.int32_column)
  return int32_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int32Column >*
FastbitResult::mutable_int32_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.int32_column)
  return &int32_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_Int32Column& FastbitResult::_internal_int32_column(int index) const {
  return int32_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_Int32Column& FastbitResult::int32_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.int32_column)
  return _internal_int32_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_Int32Column* FastbitResult::_internal_add_int32_column() {
  return int32_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_Int32Column* FastbitResult::add_int32_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.int32_column)
  return _internal_add_int32_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int32Column >&
FastbitResult::int32_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.int32_column)
  return int32_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.Int64Column int64_column = 3[json_name = "int64Column"];
inline int FastbitResult::_internal_int64_column_size() const {
  return int64_column_.size();
}
inline int FastbitResult::int64_column_size() const {
  return _internal_int64_column_size();
}
inline void FastbitResult::clear_int64_column() {
  int64_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_Int64Column* FastbitResult::mutable_int64_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.int64_column)
  return int64_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int64Column >*
FastbitResult::mutable_int64_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.int64_column)
  return &int64_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_Int64Column& FastbitResult::_internal_int64_column(int index) const {
  return int64_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_Int64Column& FastbitResult::int64_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.int64_column)
  return _internal_int64_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_Int64Column* FastbitResult::_internal_add_int64_column() {
  return int64_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_Int64Column* FastbitResult::add_int64_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.int64_column)
  return _internal_add_int64_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_Int64Column >&
FastbitResult::int64_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.int64_column)
  return int64_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.UInt32Column uint32_column = 4[json_name = "uint32Column"];
inline int FastbitResult::_internal_uint32_column_size() const {
  return uint32_column_.size();
}
inline int FastbitResult::uint32_column_size() const {
  return _internal_uint32_column_size();
}
inline void FastbitResult::clear_uint32_column() {
  uint32_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_UInt32Column* FastbitResult::mutable_uint32_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.uint32_column)
  return uint32_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt32Column >*
FastbitResult::mutable_uint32_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.uint32_column)
  return &uint32_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_UInt32Column& FastbitResult::_internal_uint32_column(int index) const {
  return uint32_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_UInt32Column& FastbitResult::uint32_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.uint32_column)
  return _internal_uint32_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_UInt32Column* FastbitResult::_internal_add_uint32_column() {
  return uint32_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_UInt32Column* FastbitResult::add_uint32_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.uint32_column)
  return _internal_add_uint32_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt32Column >&
FastbitResult::uint32_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.uint32_column)
  return uint32_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.UInt64Column uint64_column = 5[json_name = "uint64Column"];
inline int FastbitResult::_internal_uint64_column_size() const {
  return uint64_column_.size();
}
inline int FastbitResult::uint64_column_size() const {
  return _internal_uint64_column_size();
}
inline void FastbitResult::clear_uint64_column() {
  uint64_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_UInt64Column* FastbitResult::mutable_uint64_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.uint64_column)
  return uint64_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt64Column >*
FastbitResult::mutable_uint64_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.uint64_column)
  return &uint64_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_UInt64Column& FastbitResult::_internal_uint64_column(int index) const {
  return uint64_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_UInt64Column& FastbitResult::uint64_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.uint64_column)
  return _internal_uint64_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_UInt64Column* FastbitResult::_internal_add_uint64_column() {
  return uint64_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_UInt64Column* FastbitResult::add_uint64_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.uint64_column)
  return _internal_add_uint64_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_UInt64Column >&
FastbitResult::uint64_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.uint64_column)
  return uint64_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.StringColumn string_column = 6[json_name = "stringColumn"];
inline int FastbitResult::_internal_string_column_size() const {
  return string_column_.size();
}
inline int FastbitResult::string_column_size() const {
  return _internal_string_column_size();
}
inline void FastbitResult::clear_string_column() {
  string_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_StringColumn* FastbitResult::mutable_string_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.string_column)
  return string_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_StringColumn >*
FastbitResult::mutable_string_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.string_column)
  return &string_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_StringColumn& FastbitResult::_internal_string_column(int index) const {
  return string_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_StringColumn& FastbitResult::string_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.string_column)
  return _internal_string_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_StringColumn* FastbitResult::_internal_add_string_column() {
  return string_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_StringColumn* FastbitResult::add_string_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.string_column)
  return _internal_add_string_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_StringColumn >&
FastbitResult::string_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.string_column)
  return string_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.BytesColumn bytes_column = 7[json_name = "bytesColumn"];
inline int FastbitResult::_internal_bytes_column_size() const {
  return bytes_column_.size();
}
inline int FastbitResult::bytes_column_size() const {
  return _internal_bytes_column_size();
}
inline void FastbitResult::clear_bytes_column() {
  bytes_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_BytesColumn* FastbitResult::mutable_bytes_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.bytes_column)
  return bytes_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_BytesColumn >*
FastbitResult::mutable_bytes_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.bytes_column)
  return &bytes_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_BytesColumn& FastbitResult::_internal_bytes_column(int index) const {
  return bytes_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_BytesColumn& FastbitResult::bytes_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.bytes_column)
  return _internal_bytes_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_BytesColumn* FastbitResult::_internal_add_bytes_column() {
  return bytes_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_BytesColumn* FastbitResult::add_bytes_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.bytes_column)
  return _internal_add_bytes_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_BytesColumn >&
FastbitResult::bytes_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.bytes_column)
  return bytes_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.FloatColumn float_column = 8[json_name = "floatColumn"];
inline int FastbitResult::_internal_float_column_size() const {
  return float_column_.size();
}
inline int FastbitResult::float_column_size() const {
  return _internal_float_column_size();
}
inline void FastbitResult::clear_float_column() {
  float_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_FloatColumn* FastbitResult::mutable_float_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.float_column)
  return float_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_FloatColumn >*
FastbitResult::mutable_float_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.float_column)
  return &float_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_FloatColumn& FastbitResult::_internal_float_column(int index) const {
  return float_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_FloatColumn& FastbitResult::float_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.float_column)
  return _internal_float_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_FloatColumn* FastbitResult::_internal_add_float_column() {
  return float_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_FloatColumn* FastbitResult::add_float_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.float_column)
  return _internal_add_float_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_FloatColumn >&
FastbitResult::float_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.float_column)
  return float_column_;
}

// repeated .kentik.kde.v202212.FastbitResult.DoubleColumn double_column = 9[json_name = "doubleColumn"];
inline int FastbitResult::_internal_double_column_size() const {
  return double_column_.size();
}
inline int FastbitResult::double_column_size() const {
  return _internal_double_column_size();
}
inline void FastbitResult::clear_double_column() {
  double_column_.Clear();
}
inline ::kentik::kde::v202212::FastbitResult_DoubleColumn* FastbitResult::mutable_double_column(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResult.double_column)
  return double_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_DoubleColumn >*
FastbitResult::mutable_double_column() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FastbitResult.double_column)
  return &double_column_;
}
inline const ::kentik::kde::v202212::FastbitResult_DoubleColumn& FastbitResult::_internal_double_column(int index) const {
  return double_column_.Get(index);
}
inline const ::kentik::kde::v202212::FastbitResult_DoubleColumn& FastbitResult::double_column(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResult.double_column)
  return _internal_double_column(index);
}
inline ::kentik::kde::v202212::FastbitResult_DoubleColumn* FastbitResult::_internal_add_double_column() {
  return double_column_.Add();
}
inline ::kentik::kde::v202212::FastbitResult_DoubleColumn* FastbitResult::add_double_column() {
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FastbitResult.double_column)
  return _internal_add_double_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kde::v202212::FastbitResult_DoubleColumn >&
FastbitResult::double_column() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FastbitResult.double_column)
  return double_column_;
}

// -------------------------------------------------------------------

// FastbitResponse

// string target = 1[json_name = "target"];
inline bool FastbitResponse::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FastbitResponse::has_target() const {
  return _internal_has_target();
}
inline void FastbitResponse::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FastbitResponse::target() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.target)
  return _internal_target();
}
inline void FastbitResponse::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.target)
}
inline std::string* FastbitResponse::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResponse.target)
  return _internal_mutable_target();
}
inline const std::string& FastbitResponse::_internal_target() const {
  return target_.Get();
}
inline void FastbitResponse::_internal_set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResponse::set_target(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResponse.target)
}
inline void FastbitResponse::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResponse.target)
}
inline void FastbitResponse::set_target(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResponse.target)
}
inline std::string* FastbitResponse::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResponse::release_target() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResponse.target)
  if (!_internal_has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResponse::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResponse.target)
}
inline std::string* FastbitResponse::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResponse.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResponse::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResponse.target)
}

// string request_id = 2[json_name = "requestId"];
inline bool FastbitResponse::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FastbitResponse::has_request_id() const {
  return _internal_has_request_id();
}
inline void FastbitResponse::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FastbitResponse::request_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.request_id)
  return _internal_request_id();
}
inline void FastbitResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.request_id)
}
inline std::string* FastbitResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FastbitResponse::_internal_request_id() const {
  return request_id_.Get();
}
inline void FastbitResponse::_internal_set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResponse::set_request_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResponse.request_id)
}
inline void FastbitResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResponse.request_id)
}
inline void FastbitResponse::set_request_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResponse.request_id)
}
inline std::string* FastbitResponse::_internal_mutable_request_id() {
  _has_bits_[0] |= 0x00000002u;
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResponse.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return request_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResponse.request_id)
}
inline std::string* FastbitResponse::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResponse.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResponse::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResponse.request_id)
}

// .kentik.kde.v202212.FastbitResult result = 3[json_name = "result"];
inline bool FastbitResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || result_ != nullptr);
  return value;
}
inline bool FastbitResponse::has_result() const {
  return _internal_has_result();
}
inline void FastbitResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::kentik::kde::v202212::FastbitResult& FastbitResponse::_internal_result() const {
  const ::kentik::kde::v202212::FastbitResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kde::v202212::FastbitResult*>(
      &::kentik::kde::v202212::_FastbitResult_default_instance_);
}
inline const ::kentik::kde::v202212::FastbitResult& FastbitResponse::result() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.result)
  return _internal_result();
}
inline void FastbitResponse::unsafe_arena_set_allocated_result(
    ::kentik::kde::v202212::FastbitResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResponse.result)
}
inline ::kentik::kde::v202212::FastbitResult* FastbitResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult* FastbitResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResponse.result)
  _has_bits_[0] &= ~0x00000010u;
  ::kentik::kde::v202212::FastbitResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::kentik::kde::v202212::FastbitResult* FastbitResponse::_internal_mutable_result() {
  _has_bits_[0] |= 0x00000010u;
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kde::v202212::FastbitResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::kentik::kde::v202212::FastbitResult* FastbitResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResponse.result)
  return _internal_mutable_result();
}
inline void FastbitResponse::set_allocated_result(::kentik::kde::v202212::FastbitResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResponse.result)
}

// string error = 4[json_name = "error"];
inline bool FastbitResponse::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FastbitResponse::has_error() const {
  return _internal_has_error();
}
inline void FastbitResponse::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FastbitResponse::error() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.error)
  return _internal_error();
}
inline void FastbitResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.error)
}
inline std::string* FastbitResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResponse.error)
  return _internal_mutable_error();
}
inline const std::string& FastbitResponse::_internal_error() const {
  return error_.Get();
}
inline void FastbitResponse::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResponse::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResponse.error)
}
inline void FastbitResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResponse.error)
}
inline void FastbitResponse::set_error(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResponse.error)
}
inline std::string* FastbitResponse::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000004u;
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResponse::release_error() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResponse.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResponse.error)
}
inline std::string* FastbitResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResponse.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResponse::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResponse.error)
}

// string request_key = 5[json_name = "requestKey"];
inline bool FastbitResponse::_internal_has_request_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FastbitResponse::has_request_key() const {
  return _internal_has_request_key();
}
inline void FastbitResponse::clear_request_key() {
  request_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FastbitResponse::request_key() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.request_key)
  return _internal_request_key();
}
inline void FastbitResponse::set_request_key(const std::string& value) {
  _internal_set_request_key(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.request_key)
}
inline std::string* FastbitResponse::mutable_request_key() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FastbitResponse.request_key)
  return _internal_mutable_request_key();
}
inline const std::string& FastbitResponse::_internal_request_key() const {
  return request_key_.Get();
}
inline void FastbitResponse::_internal_set_request_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  request_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastbitResponse::set_request_key(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  request_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FastbitResponse.request_key)
}
inline void FastbitResponse::set_request_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  request_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FastbitResponse.request_key)
}
inline void FastbitResponse::set_request_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  request_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FastbitResponse.request_key)
}
inline std::string* FastbitResponse::_internal_mutable_request_key() {
  _has_bits_[0] |= 0x00000008u;
  return request_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastbitResponse::release_request_key() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FastbitResponse.request_key)
  if (!_internal_has_request_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return request_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastbitResponse::set_allocated_request_key(std::string* request_key) {
  if (request_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  request_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FastbitResponse.request_key)
}
inline std::string* FastbitResponse::unsafe_arena_release_request_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FastbitResponse.request_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return request_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastbitResponse::unsafe_arena_set_allocated_request_key(
    std::string* request_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  request_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FastbitResponse.request_key)
}

// bool from_cache = 6[json_name = "fromCache"];
inline bool FastbitResponse::_internal_has_from_cache() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FastbitResponse::has_from_cache() const {
  return _internal_has_from_cache();
}
inline void FastbitResponse::clear_from_cache() {
  from_cache_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FastbitResponse::_internal_from_cache() const {
  return from_cache_;
}
inline bool FastbitResponse::from_cache() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.from_cache)
  return _internal_from_cache();
}
inline void FastbitResponse::_internal_set_from_cache(bool value) {
  _has_bits_[0] |= 0x00000080u;
  from_cache_ = value;
}
inline void FastbitResponse::set_from_cache(bool value) {
  _internal_set_from_cache(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.from_cache)
}

// int32 num_resp = 7[json_name = "numResp"];
inline bool FastbitResponse::_internal_has_num_resp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FastbitResponse::has_num_resp() const {
  return _internal_has_num_resp();
}
inline void FastbitResponse::clear_num_resp() {
  num_resp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResponse::_internal_num_resp() const {
  return num_resp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResponse::num_resp() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.num_resp)
  return _internal_num_resp();
}
inline void FastbitResponse::_internal_set_num_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_resp_ = value;
}
inline void FastbitResponse::set_num_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_resp(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.num_resp)
}

// int32 this_resp = 8[json_name = "thisResp"];
inline bool FastbitResponse::_internal_has_this_resp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FastbitResponse::has_this_resp() const {
  return _internal_has_this_resp();
}
inline void FastbitResponse::clear_this_resp() {
  this_resp_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResponse::_internal_this_resp() const {
  return this_resp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FastbitResponse::this_resp() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.this_resp)
  return _internal_this_resp();
}
inline void FastbitResponse::_internal_set_this_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  this_resp_ = value;
}
inline void FastbitResponse::set_this_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_this_resp(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.this_resp)
}

// bool missing_mds = 9[json_name = "missingMds"];
inline bool FastbitResponse::_internal_has_missing_mds() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FastbitResponse::has_missing_mds() const {
  return _internal_has_missing_mds();
}
inline void FastbitResponse::clear_missing_mds() {
  missing_mds_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FastbitResponse::_internal_missing_mds() const {
  return missing_mds_;
}
inline bool FastbitResponse::missing_mds() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.missing_mds)
  return _internal_missing_mds();
}
inline void FastbitResponse::_internal_set_missing_mds(bool value) {
  _has_bits_[0] |= 0x00000100u;
  missing_mds_ = value;
}
inline void FastbitResponse::set_missing_mds(bool value) {
  _internal_set_missing_mds(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.missing_mds)
}

// bool too_large_entity = 10[json_name = "tooLargeEntity"];
inline bool FastbitResponse::_internal_has_too_large_entity() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FastbitResponse::has_too_large_entity() const {
  return _internal_has_too_large_entity();
}
inline void FastbitResponse::clear_too_large_entity() {
  too_large_entity_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool FastbitResponse::_internal_too_large_entity() const {
  return too_large_entity_;
}
inline bool FastbitResponse::too_large_entity() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FastbitResponse.too_large_entity)
  return _internal_too_large_entity();
}
inline void FastbitResponse::_internal_set_too_large_entity(bool value) {
  _has_bits_[0] |= 0x00000200u;
  too_large_entity_ = value;
}
inline void FastbitResponse::set_too_large_entity(bool value) {
  _internal_set_too_large_entity(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FastbitResponse.too_large_entity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202212
}  // namespace kde
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto
