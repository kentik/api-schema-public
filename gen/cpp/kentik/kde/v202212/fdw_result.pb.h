// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/kde/v202212/fdw_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto;
namespace kentik {
namespace kde {
namespace v202212 {
class FdwQuery;
class FdwQueryDefaultTypeInternal;
extern FdwQueryDefaultTypeInternal _FdwQuery_default_instance_;
}  // namespace v202212
}  // namespace kde
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::kde::v202212::FdwQuery* Arena::CreateMaybeMessage<::kentik::kde::v202212::FdwQuery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace kde {
namespace v202212 {

// ===================================================================

class FdwQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kde.v202212.FdwQuery) */ {
 public:
  inline FdwQuery() : FdwQuery(nullptr) {};
  virtual ~FdwQuery();

  FdwQuery(const FdwQuery& from);
  FdwQuery(FdwQuery&& from) noexcept
    : FdwQuery() {
    *this = ::std::move(from);
  }

  inline FdwQuery& operator=(const FdwQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdwQuery& operator=(FdwQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FdwQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdwQuery* internal_default_instance() {
    return reinterpret_cast<const FdwQuery*>(
               &_FdwQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FdwQuery& a, FdwQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(FdwQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FdwQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdwQuery* New() const final {
    return CreateMaybeMessage<FdwQuery>(nullptr);
  }

  FdwQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdwQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FdwQuery& from);
  void MergeFrom(const FdwQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FdwQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kde.v202212.FdwQuery";
  }
  protected:
  explicit FdwQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto);
    return ::descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggsFieldNumber = 7,
    kOrderbyFieldNumber = 8,
    kGroupbyFieldNumber = 9,
    kRequestIdFieldNumber = 1,
    kQueryFieldNumber = 2,
    kTnFieldNumber = 3,
    kRemoteHostFieldNumber = 6,
    kKtRequestIdFieldNumber = 11,
    kUserIdFieldNumber = 4,
    kServerIdFieldNumber = 5,
    kKtCidFieldNumber = 10,
    kKtUidFieldNumber = 12,
    kKtSpoofUidFieldNumber = 13,
  };
  // repeated string aggs = 7[json_name = "aggs"];
  int aggs_size() const;
  private:
  int _internal_aggs_size() const;
  public:
  void clear_aggs();
  const std::string& aggs(int index) const;
  std::string* mutable_aggs(int index);
  void set_aggs(int index, const std::string& value);
  void set_aggs(int index, std::string&& value);
  void set_aggs(int index, const char* value);
  void set_aggs(int index, const char* value, size_t size);
  std::string* add_aggs();
  void add_aggs(const std::string& value);
  void add_aggs(std::string&& value);
  void add_aggs(const char* value);
  void add_aggs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aggs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aggs();
  private:
  const std::string& _internal_aggs(int index) const;
  std::string* _internal_add_aggs();
  public:

  // repeated string orderby = 8[json_name = "orderby"];
  int orderby_size() const;
  private:
  int _internal_orderby_size() const;
  public:
  void clear_orderby();
  const std::string& orderby(int index) const;
  std::string* mutable_orderby(int index);
  void set_orderby(int index, const std::string& value);
  void set_orderby(int index, std::string&& value);
  void set_orderby(int index, const char* value);
  void set_orderby(int index, const char* value, size_t size);
  std::string* add_orderby();
  void add_orderby(const std::string& value);
  void add_orderby(std::string&& value);
  void add_orderby(const char* value);
  void add_orderby(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& orderby() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_orderby();
  private:
  const std::string& _internal_orderby(int index) const;
  std::string* _internal_add_orderby();
  public:

  // repeated string groupby = 9[json_name = "groupby"];
  int groupby_size() const;
  private:
  int _internal_groupby_size() const;
  public:
  void clear_groupby();
  const std::string& groupby(int index) const;
  std::string* mutable_groupby(int index);
  void set_groupby(int index, const std::string& value);
  void set_groupby(int index, std::string&& value);
  void set_groupby(int index, const char* value);
  void set_groupby(int index, const char* value, size_t size);
  std::string* add_groupby();
  void add_groupby(const std::string& value);
  void add_groupby(std::string&& value);
  void add_groupby(const char* value);
  void add_groupby(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groupby() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groupby();
  private:
  const std::string& _internal_groupby(int index) const;
  std::string* _internal_add_groupby();
  public:

  // string request_id = 1[json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string query = 2[json_name = "query"];
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string tn = 3[json_name = "tn"];
  void clear_tn();
  const std::string& tn() const;
  void set_tn(const std::string& value);
  void set_tn(std::string&& value);
  void set_tn(const char* value);
  void set_tn(const char* value, size_t size);
  std::string* mutable_tn();
  std::string* release_tn();
  void set_allocated_tn(std::string* tn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tn(
      std::string* tn);
  private:
  const std::string& _internal_tn() const;
  void _internal_set_tn(const std::string& value);
  std::string* _internal_mutable_tn();
  public:

  // string remote_host = 6[json_name = "remoteHost"];
  void clear_remote_host();
  const std::string& remote_host() const;
  void set_remote_host(const std::string& value);
  void set_remote_host(std::string&& value);
  void set_remote_host(const char* value);
  void set_remote_host(const char* value, size_t size);
  std::string* mutable_remote_host();
  std::string* release_remote_host();
  void set_allocated_remote_host(std::string* remote_host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remote_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remote_host(
      std::string* remote_host);
  private:
  const std::string& _internal_remote_host() const;
  void _internal_set_remote_host(const std::string& value);
  std::string* _internal_mutable_remote_host();
  public:

  // string kt_request_id = 11[json_name = "ktRequestId"];
  void clear_kt_request_id();
  const std::string& kt_request_id() const;
  void set_kt_request_id(const std::string& value);
  void set_kt_request_id(std::string&& value);
  void set_kt_request_id(const char* value);
  void set_kt_request_id(const char* value, size_t size);
  std::string* mutable_kt_request_id();
  std::string* release_kt_request_id();
  void set_allocated_kt_request_id(std::string* kt_request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kt_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kt_request_id(
      std::string* kt_request_id);
  private:
  const std::string& _internal_kt_request_id() const;
  void _internal_set_kt_request_id(const std::string& value);
  std::string* _internal_mutable_kt_request_id();
  public:

  // uint32 user_id = 4[json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 server_id = 5[json_name = "serverId"];
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 kt_cid = 10[json_name = "ktCid"];
  void clear_kt_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 kt_cid() const;
  void set_kt_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kt_cid() const;
  void _internal_set_kt_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 kt_uid = 12[json_name = "ktUid"];
  void clear_kt_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 kt_uid() const;
  void set_kt_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kt_uid() const;
  void _internal_set_kt_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 kt_spoof_uid = 13[json_name = "ktSpoofUid"];
  void clear_kt_spoof_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 kt_spoof_uid() const;
  void set_kt_spoof_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kt_spoof_uid() const;
  void _internal_set_kt_spoof_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kde.v202212.FdwQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aggs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> orderby_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groupby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kt_request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kt_cid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kt_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kt_spoof_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FdwQuery

// string request_id = 1[json_name = "requestId"];
inline void FdwQuery::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FdwQuery::request_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.request_id)
  return _internal_request_id();
}
inline void FdwQuery::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.request_id)
}
inline std::string* FdwQuery::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& FdwQuery::_internal_request_id() const {
  return request_id_.Get();
}
inline void FdwQuery::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FdwQuery::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FdwQuery.request_id)
}
inline void FdwQuery::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.request_id)
}
inline void FdwQuery::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.request_id)
}
inline std::string* FdwQuery::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FdwQuery::release_request_id() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FdwQuery.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FdwQuery::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FdwQuery.request_id)
}
inline std::string* FdwQuery::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FdwQuery.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FdwQuery::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FdwQuery.request_id)
}

// string query = 2[json_name = "query"];
inline void FdwQuery::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FdwQuery::query() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.query)
  return _internal_query();
}
inline void FdwQuery::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.query)
}
inline std::string* FdwQuery::mutable_query() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.query)
  return _internal_mutable_query();
}
inline const std::string& FdwQuery::_internal_query() const {
  return query_.Get();
}
inline void FdwQuery::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FdwQuery::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FdwQuery.query)
}
inline void FdwQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.query)
}
inline void FdwQuery::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.query)
}
inline std::string* FdwQuery::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FdwQuery::release_query() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FdwQuery.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FdwQuery::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FdwQuery.query)
}
inline std::string* FdwQuery::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FdwQuery.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FdwQuery::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    
  } else {
    
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FdwQuery.query)
}

// string tn = 3[json_name = "tn"];
inline void FdwQuery::clear_tn() {
  tn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FdwQuery::tn() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.tn)
  return _internal_tn();
}
inline void FdwQuery::set_tn(const std::string& value) {
  _internal_set_tn(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.tn)
}
inline std::string* FdwQuery::mutable_tn() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.tn)
  return _internal_mutable_tn();
}
inline const std::string& FdwQuery::_internal_tn() const {
  return tn_.Get();
}
inline void FdwQuery::_internal_set_tn(const std::string& value) {
  
  tn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FdwQuery::set_tn(std::string&& value) {
  
  tn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FdwQuery.tn)
}
inline void FdwQuery::set_tn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.tn)
}
inline void FdwQuery::set_tn(const char* value,
    size_t size) {
  
  tn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.tn)
}
inline std::string* FdwQuery::_internal_mutable_tn() {
  
  return tn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FdwQuery::release_tn() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FdwQuery.tn)
  return tn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FdwQuery::set_allocated_tn(std::string* tn) {
  if (tn != nullptr) {
    
  } else {
    
  }
  tn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FdwQuery.tn)
}
inline std::string* FdwQuery::unsafe_arena_release_tn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FdwQuery.tn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FdwQuery::unsafe_arena_set_allocated_tn(
    std::string* tn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tn != nullptr) {
    
  } else {
    
  }
  tn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FdwQuery.tn)
}

// uint32 user_id = 4[json_name = "userId"];
inline void FdwQuery::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::user_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.user_id)
  return _internal_user_id();
}
inline void FdwQuery::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void FdwQuery::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.user_id)
}

// uint32 server_id = 5[json_name = "serverId"];
inline void FdwQuery::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::server_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.server_id)
  return _internal_server_id();
}
inline void FdwQuery::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void FdwQuery::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.server_id)
}

// string remote_host = 6[json_name = "remoteHost"];
inline void FdwQuery::clear_remote_host() {
  remote_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FdwQuery::remote_host() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.remote_host)
  return _internal_remote_host();
}
inline void FdwQuery::set_remote_host(const std::string& value) {
  _internal_set_remote_host(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.remote_host)
}
inline std::string* FdwQuery::mutable_remote_host() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.remote_host)
  return _internal_mutable_remote_host();
}
inline const std::string& FdwQuery::_internal_remote_host() const {
  return remote_host_.Get();
}
inline void FdwQuery::_internal_set_remote_host(const std::string& value) {
  
  remote_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FdwQuery::set_remote_host(std::string&& value) {
  
  remote_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FdwQuery.remote_host)
}
inline void FdwQuery::set_remote_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.remote_host)
}
inline void FdwQuery::set_remote_host(const char* value,
    size_t size) {
  
  remote_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.remote_host)
}
inline std::string* FdwQuery::_internal_mutable_remote_host() {
  
  return remote_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FdwQuery::release_remote_host() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FdwQuery.remote_host)
  return remote_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FdwQuery::set_allocated_remote_host(std::string* remote_host) {
  if (remote_host != nullptr) {
    
  } else {
    
  }
  remote_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FdwQuery.remote_host)
}
inline std::string* FdwQuery::unsafe_arena_release_remote_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FdwQuery.remote_host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remote_host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FdwQuery::unsafe_arena_set_allocated_remote_host(
    std::string* remote_host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remote_host != nullptr) {
    
  } else {
    
  }
  remote_host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remote_host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FdwQuery.remote_host)
}

// repeated string aggs = 7[json_name = "aggs"];
inline int FdwQuery::_internal_aggs_size() const {
  return aggs_.size();
}
inline int FdwQuery::aggs_size() const {
  return _internal_aggs_size();
}
inline void FdwQuery::clear_aggs() {
  aggs_.Clear();
}
inline std::string* FdwQuery::add_aggs() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kde.v202212.FdwQuery.aggs)
  return _internal_add_aggs();
}
inline const std::string& FdwQuery::_internal_aggs(int index) const {
  return aggs_.Get(index);
}
inline const std::string& FdwQuery::aggs(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.aggs)
  return _internal_aggs(index);
}
inline std::string* FdwQuery::mutable_aggs(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.aggs)
  return aggs_.Mutable(index);
}
inline void FdwQuery::set_aggs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.aggs)
  aggs_.Mutable(index)->assign(value);
}
inline void FdwQuery::set_aggs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.aggs)
  aggs_.Mutable(index)->assign(std::move(value));
}
inline void FdwQuery::set_aggs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aggs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.aggs)
}
inline void FdwQuery::set_aggs(int index, const char* value, size_t size) {
  aggs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.aggs)
}
inline std::string* FdwQuery::_internal_add_aggs() {
  return aggs_.Add();
}
inline void FdwQuery::add_aggs(const std::string& value) {
  aggs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FdwQuery.aggs)
}
inline void FdwQuery::add_aggs(std::string&& value) {
  aggs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FdwQuery.aggs)
}
inline void FdwQuery::add_aggs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aggs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kde.v202212.FdwQuery.aggs)
}
inline void FdwQuery::add_aggs(const char* value, size_t size) {
  aggs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kde.v202212.FdwQuery.aggs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdwQuery::aggs() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FdwQuery.aggs)
  return aggs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdwQuery::mutable_aggs() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FdwQuery.aggs)
  return &aggs_;
}

// repeated string orderby = 8[json_name = "orderby"];
inline int FdwQuery::_internal_orderby_size() const {
  return orderby_.size();
}
inline int FdwQuery::orderby_size() const {
  return _internal_orderby_size();
}
inline void FdwQuery::clear_orderby() {
  orderby_.Clear();
}
inline std::string* FdwQuery::add_orderby() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kde.v202212.FdwQuery.orderby)
  return _internal_add_orderby();
}
inline const std::string& FdwQuery::_internal_orderby(int index) const {
  return orderby_.Get(index);
}
inline const std::string& FdwQuery::orderby(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.orderby)
  return _internal_orderby(index);
}
inline std::string* FdwQuery::mutable_orderby(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.orderby)
  return orderby_.Mutable(index);
}
inline void FdwQuery::set_orderby(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.orderby)
  orderby_.Mutable(index)->assign(value);
}
inline void FdwQuery::set_orderby(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.orderby)
  orderby_.Mutable(index)->assign(std::move(value));
}
inline void FdwQuery::set_orderby(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  orderby_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.orderby)
}
inline void FdwQuery::set_orderby(int index, const char* value, size_t size) {
  orderby_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.orderby)
}
inline std::string* FdwQuery::_internal_add_orderby() {
  return orderby_.Add();
}
inline void FdwQuery::add_orderby(const std::string& value) {
  orderby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FdwQuery.orderby)
}
inline void FdwQuery::add_orderby(std::string&& value) {
  orderby_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FdwQuery.orderby)
}
inline void FdwQuery::add_orderby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  orderby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kde.v202212.FdwQuery.orderby)
}
inline void FdwQuery::add_orderby(const char* value, size_t size) {
  orderby_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kde.v202212.FdwQuery.orderby)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdwQuery::orderby() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FdwQuery.orderby)
  return orderby_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdwQuery::mutable_orderby() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FdwQuery.orderby)
  return &orderby_;
}

// repeated string groupby = 9[json_name = "groupby"];
inline int FdwQuery::_internal_groupby_size() const {
  return groupby_.size();
}
inline int FdwQuery::groupby_size() const {
  return _internal_groupby_size();
}
inline void FdwQuery::clear_groupby() {
  groupby_.Clear();
}
inline std::string* FdwQuery::add_groupby() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kde.v202212.FdwQuery.groupby)
  return _internal_add_groupby();
}
inline const std::string& FdwQuery::_internal_groupby(int index) const {
  return groupby_.Get(index);
}
inline const std::string& FdwQuery::groupby(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.groupby)
  return _internal_groupby(index);
}
inline std::string* FdwQuery::mutable_groupby(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.groupby)
  return groupby_.Mutable(index);
}
inline void FdwQuery::set_groupby(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.groupby)
  groupby_.Mutable(index)->assign(value);
}
inline void FdwQuery::set_groupby(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.groupby)
  groupby_.Mutable(index)->assign(std::move(value));
}
inline void FdwQuery::set_groupby(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groupby_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.groupby)
}
inline void FdwQuery::set_groupby(int index, const char* value, size_t size) {
  groupby_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.groupby)
}
inline std::string* FdwQuery::_internal_add_groupby() {
  return groupby_.Add();
}
inline void FdwQuery::add_groupby(const std::string& value) {
  groupby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FdwQuery.groupby)
}
inline void FdwQuery::add_groupby(std::string&& value) {
  groupby_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kde.v202212.FdwQuery.groupby)
}
inline void FdwQuery::add_groupby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groupby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kde.v202212.FdwQuery.groupby)
}
inline void FdwQuery::add_groupby(const char* value, size_t size) {
  groupby_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kde.v202212.FdwQuery.groupby)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdwQuery::groupby() const {
  // @@protoc_insertion_point(field_list:kentik.kde.v202212.FdwQuery.groupby)
  return groupby_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdwQuery::mutable_groupby() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kde.v202212.FdwQuery.groupby)
  return &groupby_;
}

// uint32 kt_cid = 10[json_name = "ktCid"];
inline void FdwQuery::clear_kt_cid() {
  kt_cid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::_internal_kt_cid() const {
  return kt_cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::kt_cid() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.kt_cid)
  return _internal_kt_cid();
}
inline void FdwQuery::_internal_set_kt_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kt_cid_ = value;
}
inline void FdwQuery::set_kt_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kt_cid(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.kt_cid)
}

// string kt_request_id = 11[json_name = "ktRequestId"];
inline void FdwQuery::clear_kt_request_id() {
  kt_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FdwQuery::kt_request_id() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.kt_request_id)
  return _internal_kt_request_id();
}
inline void FdwQuery::set_kt_request_id(const std::string& value) {
  _internal_set_kt_request_id(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.kt_request_id)
}
inline std::string* FdwQuery::mutable_kt_request_id() {
  // @@protoc_insertion_point(field_mutable:kentik.kde.v202212.FdwQuery.kt_request_id)
  return _internal_mutable_kt_request_id();
}
inline const std::string& FdwQuery::_internal_kt_request_id() const {
  return kt_request_id_.Get();
}
inline void FdwQuery::_internal_set_kt_request_id(const std::string& value) {
  
  kt_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FdwQuery::set_kt_request_id(std::string&& value) {
  
  kt_request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kde.v202212.FdwQuery.kt_request_id)
}
inline void FdwQuery::set_kt_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kt_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kde.v202212.FdwQuery.kt_request_id)
}
inline void FdwQuery::set_kt_request_id(const char* value,
    size_t size) {
  
  kt_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kde.v202212.FdwQuery.kt_request_id)
}
inline std::string* FdwQuery::_internal_mutable_kt_request_id() {
  
  return kt_request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FdwQuery::release_kt_request_id() {
  // @@protoc_insertion_point(field_release:kentik.kde.v202212.FdwQuery.kt_request_id)
  return kt_request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FdwQuery::set_allocated_kt_request_id(std::string* kt_request_id) {
  if (kt_request_id != nullptr) {
    
  } else {
    
  }
  kt_request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kt_request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kde.v202212.FdwQuery.kt_request_id)
}
inline std::string* FdwQuery::unsafe_arena_release_kt_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kde.v202212.FdwQuery.kt_request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return kt_request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FdwQuery::unsafe_arena_set_allocated_kt_request_id(
    std::string* kt_request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (kt_request_id != nullptr) {
    
  } else {
    
  }
  kt_request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kt_request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kde.v202212.FdwQuery.kt_request_id)
}

// uint32 kt_uid = 12[json_name = "ktUid"];
inline void FdwQuery::clear_kt_uid() {
  kt_uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::_internal_kt_uid() const {
  return kt_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::kt_uid() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.kt_uid)
  return _internal_kt_uid();
}
inline void FdwQuery::_internal_set_kt_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kt_uid_ = value;
}
inline void FdwQuery::set_kt_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kt_uid(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.kt_uid)
}

// uint32 kt_spoof_uid = 13[json_name = "ktSpoofUid"];
inline void FdwQuery::clear_kt_spoof_uid() {
  kt_spoof_uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::_internal_kt_spoof_uid() const {
  return kt_spoof_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdwQuery::kt_spoof_uid() const {
  // @@protoc_insertion_point(field_get:kentik.kde.v202212.FdwQuery.kt_spoof_uid)
  return _internal_kt_spoof_uid();
}
inline void FdwQuery::_internal_set_kt_spoof_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kt_spoof_uid_ = value;
}
inline void FdwQuery::set_kt_spoof_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kt_spoof_uid(value);
  // @@protoc_insertion_point(field_set:kentik.kde.v202212.FdwQuery.kt_spoof_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v202212
}  // namespace kde
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto
