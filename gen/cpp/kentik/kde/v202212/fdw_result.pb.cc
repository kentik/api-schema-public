// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/kde/v202212/fdw_result.proto

#include "kentik/kde/v202212/fdw_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace kentik {
namespace kde {
namespace v202212 {
class FdwQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdwQuery> _instance;
} _FdwQuery_default_instance_;
}  // namespace v202212
}  // namespace kde
}  // namespace kentik
static void InitDefaultsscc_info_FdwQuery_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FdwQuery_default_instance_;
    new (ptr) ::kentik::kde::v202212::FdwQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FdwQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdwQuery_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FdwQuery_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, request_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, query_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, tn_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, user_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, server_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, remote_host_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, aggs_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, orderby_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, groupby_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, kt_cid_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, kt_request_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, kt_uid_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FdwQuery, kt_spoof_uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::kde::v202212::FdwQuery)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FdwQuery_default_instance_),
};

const char descriptor_table_protodef_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#kentik/kde/v202212/fdw_result.proto\022\022k"
  "entik.kde.v202212\"\342\002\n\010FdwQuery\022\035\n\nreques"
  "t_id\030\001 \001(\tR\trequestId\022\024\n\005query\030\002 \001(\tR\005qu"
  "ery\022\016\n\002tn\030\003 \001(\tR\002tn\022\027\n\007user_id\030\004 \001(\rR\006us"
  "erId\022\033\n\tserver_id\030\005 \001(\rR\010serverId\022\037\n\013rem"
  "ote_host\030\006 \001(\tR\nremoteHost\022\022\n\004aggs\030\007 \003(\t"
  "R\004aggs\022\030\n\007orderby\030\010 \003(\tR\007orderby\022\030\n\007grou"
  "pby\030\t \003(\tR\007groupby\022\025\n\006kt_cid\030\n \001(\rR\005ktCi"
  "d\022\"\n\rkt_request_id\030\013 \001(\tR\013ktRequestId\022\025\n"
  "\006kt_uid\030\014 \001(\rR\005ktUid\022 \n\014kt_spoof_uid\030\r \001"
  "(\rR\nktSpoofUidB<Z:github.com/kentik/api-"
  "schema/gen/go/kentik/kde/v202212;kdeb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto_sccs[1] = {
  &scc_info_FdwQuery_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto, "kentik/kde/v202212/fdw_result.proto", 484,
  &descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto_once, descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto_sccs, descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto::offsets,
  file_level_metadata_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto, 1, file_level_enum_descriptors_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto, file_level_service_descriptors_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto)), true);
namespace kentik {
namespace kde {
namespace v202212 {

// ===================================================================

void FdwQuery::InitAsDefaultInstance() {
}
class FdwQuery::_Internal {
 public:
};

FdwQuery::FdwQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  aggs_(arena),
  orderby_(arena),
  groupby_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FdwQuery)
}
FdwQuery::FdwQuery(const FdwQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aggs_(from.aggs_),
      orderby_(from.orderby_),
      groupby_(from.groupby_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query(),
      GetArena());
  }
  tn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tn().empty()) {
    tn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tn(),
      GetArena());
  }
  remote_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_host().empty()) {
    remote_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_host(),
      GetArena());
  }
  kt_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kt_request_id().empty()) {
    kt_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kt_request_id(),
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kt_spoof_uid_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(kt_spoof_uid_));
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FdwQuery)
}

void FdwQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdwQuery_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kt_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kt_spoof_uid_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(kt_spoof_uid_));
}

FdwQuery::~FdwQuery() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FdwQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FdwQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kt_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdwQuery::ArenaDtor(void* object) {
  FdwQuery* _this = reinterpret_cast< FdwQuery* >(object);
  (void)_this;
}
void FdwQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FdwQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdwQuery& FdwQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdwQuery_kentik_2fkde_2fv202212_2ffdw_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FdwQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FdwQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggs_.Clear();
  orderby_.Clear();
  groupby_.Clear();
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kt_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kt_spoof_uid_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(kt_spoof_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FdwQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1[json_name = "requestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 2[json_name = "query"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tn = 3[json_name = "tn"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.tn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 4[json_name = "userId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_id = 5[json_name = "serverId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_host = 6[json_name = "remoteHost"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_remote_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.remote_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aggs = 7[json_name = "aggs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aggs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.aggs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string orderby = 8[json_name = "orderby"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_orderby();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.orderby"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string groupby = 9[json_name = "groupby"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groupby();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.groupby"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 kt_cid = 10[json_name = "ktCid"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          kt_cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kt_request_id = 11[json_name = "ktRequestId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_kt_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FdwQuery.kt_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kt_uid = 12[json_name = "ktUid"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          kt_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kt_spoof_uid = 13[json_name = "ktSpoofUid"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          kt_spoof_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdwQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FdwQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string query = 2[json_name = "query"];
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.query");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query(), target);
  }

  // string tn = 3[json_name = "tn"];
  if (this->tn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tn().data(), static_cast<int>(this->_internal_tn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.tn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tn(), target);
  }

  // uint32 user_id = 4[json_name = "userId"];
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // uint32 server_id = 5[json_name = "serverId"];
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_id(), target);
  }

  // string remote_host = 6[json_name = "remoteHost"];
  if (this->remote_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_host().data(), static_cast<int>(this->_internal_remote_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.remote_host");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_remote_host(), target);
  }

  // repeated string aggs = 7[json_name = "aggs"];
  for (int i = 0, n = this->_internal_aggs_size(); i < n; i++) {
    const auto& s = this->_internal_aggs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.aggs");
    target = stream->WriteString(7, s, target);
  }

  // repeated string orderby = 8[json_name = "orderby"];
  for (int i = 0, n = this->_internal_orderby_size(); i < n; i++) {
    const auto& s = this->_internal_orderby(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.orderby");
    target = stream->WriteString(8, s, target);
  }

  // repeated string groupby = 9[json_name = "groupby"];
  for (int i = 0, n = this->_internal_groupby_size(); i < n; i++) {
    const auto& s = this->_internal_groupby(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.groupby");
    target = stream->WriteString(9, s, target);
  }

  // uint32 kt_cid = 10[json_name = "ktCid"];
  if (this->kt_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_kt_cid(), target);
  }

  // string kt_request_id = 11[json_name = "ktRequestId"];
  if (this->kt_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kt_request_id().data(), static_cast<int>(this->_internal_kt_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FdwQuery.kt_request_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_kt_request_id(), target);
  }

  // uint32 kt_uid = 12[json_name = "ktUid"];
  if (this->kt_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_kt_uid(), target);
  }

  // uint32 kt_spoof_uid = 13[json_name = "ktSpoofUid"];
  if (this->kt_spoof_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_kt_spoof_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FdwQuery)
  return target;
}

size_t FdwQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FdwQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aggs = 7[json_name = "aggs"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aggs_.size());
  for (int i = 0, n = aggs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aggs_.Get(i));
  }

  // repeated string orderby = 8[json_name = "orderby"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(orderby_.size());
  for (int i = 0, n = orderby_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      orderby_.Get(i));
  }

  // repeated string groupby = 9[json_name = "groupby"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groupby_.size());
  for (int i = 0, n = groupby_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groupby_.Get(i));
  }

  // string request_id = 1[json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string query = 2[json_name = "query"];
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string tn = 3[json_name = "tn"];
  if (this->tn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tn());
  }

  // string remote_host = 6[json_name = "remoteHost"];
  if (this->remote_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_host());
  }

  // string kt_request_id = 11[json_name = "ktRequestId"];
  if (this->kt_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kt_request_id());
  }

  // uint32 user_id = 4[json_name = "userId"];
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 server_id = 5[json_name = "serverId"];
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  // uint32 kt_cid = 10[json_name = "ktCid"];
  if (this->kt_cid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kt_cid());
  }

  // uint32 kt_uid = 12[json_name = "ktUid"];
  if (this->kt_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kt_uid());
  }

  // uint32 kt_spoof_uid = 13[json_name = "ktSpoofUid"];
  if (this->kt_spoof_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kt_spoof_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdwQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FdwQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const FdwQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FdwQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FdwQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FdwQuery)
    MergeFrom(*source);
  }
}

void FdwQuery::MergeFrom(const FdwQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FdwQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aggs_.MergeFrom(from.aggs_);
  orderby_.MergeFrom(from.orderby_);
  groupby_.MergeFrom(from.groupby_);
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.tn().size() > 0) {
    _internal_set_tn(from._internal_tn());
  }
  if (from.remote_host().size() > 0) {
    _internal_set_remote_host(from._internal_remote_host());
  }
  if (from.kt_request_id().size() > 0) {
    _internal_set_kt_request_id(from._internal_kt_request_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.kt_cid() != 0) {
    _internal_set_kt_cid(from._internal_kt_cid());
  }
  if (from.kt_uid() != 0) {
    _internal_set_kt_uid(from._internal_kt_uid());
  }
  if (from.kt_spoof_uid() != 0) {
    _internal_set_kt_spoof_uid(from._internal_kt_spoof_uid());
  }
}

void FdwQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FdwQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FdwQuery::CopyFrom(const FdwQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FdwQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdwQuery::IsInitialized() const {
  return true;
}

void FdwQuery::InternalSwap(FdwQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  aggs_.InternalSwap(&other->aggs_);
  orderby_.InternalSwap(&other->orderby_);
  groupby_.InternalSwap(&other->groupby_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tn_.Swap(&other->tn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_host_.Swap(&other->remote_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kt_request_id_.Swap(&other->kt_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FdwQuery, kt_spoof_uid_)
      + sizeof(FdwQuery::kt_spoof_uid_)
      - PROTOBUF_FIELD_OFFSET(FdwQuery, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FdwQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202212
}  // namespace kde
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FdwQuery* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FdwQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FdwQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
