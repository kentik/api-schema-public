// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/kde/v202212/fastbit_result.proto

#include "kentik/kde/v202212/fastbit_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_InputParams_MemberIdEntry_DoNotUse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto;
namespace kentik {
namespace kde {
namespace v202212 {
class FastbitResult_ColumnHeaderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_ColumnHeaderInfo> _instance;
} _FastbitResult_ColumnHeaderInfo_default_instance_;
class FastbitResult_InputParams_MemberIdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_InputParams_MemberIdEntry_DoNotUse> _instance;
} _FastbitResult_InputParams_MemberIdEntry_DoNotUse_default_instance_;
class FastbitResult_InputParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_InputParams> _instance;
} _FastbitResult_InputParams_default_instance_;
class FastbitResult_MemberIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_MemberId> _instance;
} _FastbitResult_MemberId_default_instance_;
class FastbitResult_Int32ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_Int32Column> _instance;
} _FastbitResult_Int32Column_default_instance_;
class FastbitResult_Int64ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_Int64Column> _instance;
} _FastbitResult_Int64Column_default_instance_;
class FastbitResult_UInt32ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_UInt32Column> _instance;
} _FastbitResult_UInt32Column_default_instance_;
class FastbitResult_UInt64ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_UInt64Column> _instance;
} _FastbitResult_UInt64Column_default_instance_;
class FastbitResult_StringColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_StringColumn> _instance;
} _FastbitResult_StringColumn_default_instance_;
class FastbitResult_BytesColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_BytesColumn> _instance;
} _FastbitResult_BytesColumn_default_instance_;
class FastbitResult_FloatColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_FloatColumn> _instance;
} _FastbitResult_FloatColumn_default_instance_;
class FastbitResult_DoubleColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult_DoubleColumn> _instance;
} _FastbitResult_DoubleColumn_default_instance_;
class FastbitResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResult> _instance;
} _FastbitResult_default_instance_;
class FastbitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastbitResponse> _instance;
} _FastbitResponse_default_instance_;
}  // namespace v202212
}  // namespace kde
}  // namespace kentik
static void InitDefaultsscc_info_FastbitResponse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResponse_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResponse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResponse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
      &scc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_BytesColumn_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_BytesColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_BytesColumn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {}};

static void InitDefaultsscc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_DoubleColumn_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_DoubleColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_DoubleColumn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_FloatColumn_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_FloatColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_FloatColumn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_InputParams_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_InputParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_InputParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_InputParams_MemberIdEntry_DoNotUse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_InputParams_MemberIdEntry_DoNotUse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_InputParams_MemberIdEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse();
  }
  ::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_InputParams_MemberIdEntry_DoNotUse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_InputParams_MemberIdEntry_DoNotUse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_Int32Column_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_Int32Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_Int32Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_Int64Column_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_Int64Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_Int64Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_MemberId_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_MemberId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_MemberId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {}};

static void InitDefaultsscc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_StringColumn_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_StringColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_StringColumn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_UInt32Column_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_UInt32Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_UInt32Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::kde::v202212::_FastbitResult_UInt64Column_default_instance_;
    new (ptr) ::kentik::kde::v202212::FastbitResult_UInt64Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::kde::v202212::FastbitResult_UInt64Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto}, {
      &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo, position_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo, format_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo, agg_name_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_orderby_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_offset_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_limit_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_start_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_end_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_sq_start_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_sq_end_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_duration_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_device_site_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_device_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, i_debug_info_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, use_member_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_InputParams, member_id_),
  0,
  5,
  6,
  7,
  8,
  1,
  9,
  10,
  11,
  12,
  2,
  3,
  4,
  13,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_MemberId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_MemberId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_MemberId, i_device_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_MemberId, i_device_site_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_MemberId, i_device_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int32Column, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int32Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int32Column, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int32Column, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int64Column, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int64Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int64Column, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_Int64Column, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt32Column, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt32Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt32Column, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt32Column, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt64Column, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt64Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt64Column, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_UInt64Column, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_StringColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_StringColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_StringColumn, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_StringColumn, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_BytesColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_BytesColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_BytesColumn, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_BytesColumn, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_FloatColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_FloatColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_FloatColumn, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_FloatColumn, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_DoubleColumn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_DoubleColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_DoubleColumn, header_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult_DoubleColumn, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, params_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, int32_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, int64_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, uint32_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, uint64_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, string_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, bytes_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, float_column_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResult, double_column_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, result_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, request_key_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, from_cache_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, num_resp_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, this_resp_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, missing_mds_),
  PROTOBUF_FIELD_OFFSET(::kentik::kde::v202212::FastbitResponse, too_large_entity_),
  0,
  1,
  4,
  2,
  3,
  7,
  5,
  6,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo)},
  { 13, 20, sizeof(::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse)},
  { 22, 42, sizeof(::kentik::kde::v202212::FastbitResult_InputParams)},
  { 57, 65, sizeof(::kentik::kde::v202212::FastbitResult_MemberId)},
  { 68, 75, sizeof(::kentik::kde::v202212::FastbitResult_Int32Column)},
  { 77, 84, sizeof(::kentik::kde::v202212::FastbitResult_Int64Column)},
  { 86, 93, sizeof(::kentik::kde::v202212::FastbitResult_UInt32Column)},
  { 95, 102, sizeof(::kentik::kde::v202212::FastbitResult_UInt64Column)},
  { 104, 111, sizeof(::kentik::kde::v202212::FastbitResult_StringColumn)},
  { 113, 120, sizeof(::kentik::kde::v202212::FastbitResult_BytesColumn)},
  { 122, 129, sizeof(::kentik::kde::v202212::FastbitResult_FloatColumn)},
  { 131, 138, sizeof(::kentik::kde::v202212::FastbitResult_DoubleColumn)},
  { 140, 154, sizeof(::kentik::kde::v202212::FastbitResult)},
  { 163, 178, sizeof(::kentik::kde::v202212::FastbitResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_ColumnHeaderInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_InputParams_MemberIdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_InputParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_MemberId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_Int32Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_Int64Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_UInt32Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_UInt64Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_StringColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_BytesColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_FloatColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_DoubleColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::kde::v202212::_FastbitResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'kentik/kde/v202212/fastbit_result.prot"
  "o\022\022kentik.kde.v202212\"\200\031\n\rFastbitResult\022"
  "J\n\006params\030\001 \001(\0132-.kentik.kde.v202212.Fas"
  "tbitResult.InputParamsH\000R\006params\210\001\001\022P\n\014i"
  "nt32_column\030\002 \003(\0132-.kentik.kde.v202212.F"
  "astbitResult.Int32ColumnR\013int32Column\022P\n"
  "\014int64_column\030\003 \003(\0132-.kentik.kde.v202212"
  ".FastbitResult.Int64ColumnR\013int64Column\022"
  "S\n\ruint32_column\030\004 \003(\0132..kentik.kde.v202"
  "212.FastbitResult.UInt32ColumnR\014uint32Co"
  "lumn\022S\n\ruint64_column\030\005 \003(\0132..kentik.kde"
  ".v202212.FastbitResult.UInt64ColumnR\014uin"
  "t64Column\022S\n\rstring_column\030\006 \003(\0132..kenti"
  "k.kde.v202212.FastbitResult.StringColumn"
  "R\014stringColumn\022P\n\014bytes_column\030\007 \003(\0132-.k"
  "entik.kde.v202212.FastbitResult.BytesCol"
  "umnR\013bytesColumn\022P\n\014float_column\030\010 \003(\0132-"
  ".kentik.kde.v202212.FastbitResult.FloatC"
  "olumnR\013floatColumn\022S\n\rdouble_column\030\t \003("
  "\0132..kentik.kde.v202212.FastbitResult.Dou"
  "bleColumnR\014doubleColumn\032\267\001\n\020ColumnHeader"
  "Info\022\027\n\004name\030\001 \001(\tH\000R\004name\210\001\001\022\037\n\010positio"
  "n\030\002 \001(\005H\001R\010position\210\001\001\022\033\n\006format\030\003 \001(\tH\002"
  "R\006format\210\001\001\022\036\n\010agg_name\030\004 \001(\tH\003R\007aggName"
  "\210\001\001B\007\n\005_nameB\013\n\t_positionB\t\n\007_formatB\013\n\t"
  "_agg_name\032\271\007\n\013InputParams\022 \n\ti_orderby\030\001"
  " \001(\tH\000R\010iOrderby\210\001\001\022\036\n\010i_offset\030\002 \001(\005H\001R"
  "\007iOffset\210\001\001\022\034\n\007i_limit\030\003 \001(\005H\002R\006iLimit\210\001"
  "\001\022%\n\014i_start_time\030\004 \001(\003H\003R\niStartTime\210\001\001"
  "\022!\n\ni_end_time\030\005 \001(\003H\004R\010iEndTime\210\001\001\022\'\n\ri"
  "_device_name\030\006 \001(\tH\005R\013iDeviceName\210\001\001\022#\n\013"
  "i_device_id\030\007 \001(\003H\006R\tiDeviceId\210\001\001\022!\n\ni_s"
  "q_start\030\010 \001(\003H\007R\010iSqStart\210\001\001\022\035\n\010i_sq_end"
  "\030\t \001(\003H\010R\006iSqEnd\210\001\001\022\"\n\ni_duration\030\n \001(\005H"
  "\tR\tiDuration\210\001\001\0220\n\022i_device_site_name\030\013 "
  "\001(\tH\nR\017iDeviceSiteName\210\001\001\022\'\n\ri_device_ty"
  "pe\030\014 \001(\tH\013R\013iDeviceType\210\001\001\022%\n\014i_debug_in"
  "fo\030\r \001(\tH\014R\niDebugInfo\210\001\001\022\'\n\ruse_member_"
  "id\030\016 \001(\010H\rR\013useMemberId\210\001\001\022X\n\tmember_id\030"
  "\017 \003(\0132;.kentik.kde.v202212.FastbitResult"
  ".InputParams.MemberIdEntryR\010memberId\032g\n\r"
  "MemberIdEntry\022\020\n\003key\030\001 \001(\003R\003key\022@\n\005value"
  "\030\002 \001(\0132*.kentik.kde.v202212.FastbitResul"
  "t.MemberIdR\005value:\0028\001B\014\n\n_i_orderbyB\013\n\t_"
  "i_offsetB\n\n\010_i_limitB\017\n\r_i_start_timeB\r\n"
  "\013_i_end_timeB\020\n\016_i_device_nameB\016\n\014_i_dev"
  "ice_idB\r\n\013_i_sq_startB\013\n\t_i_sq_endB\r\n\013_i"
  "_durationB\025\n\023_i_device_site_nameB\020\n\016_i_d"
  "evice_typeB\017\n\r_i_debug_infoB\020\n\016_use_memb"
  "er_id\032\311\001\n\010MemberId\022\'\n\ri_device_name\030\001 \001("
  "\tH\000R\013iDeviceName\210\001\001\0220\n\022i_device_site_nam"
  "e\030\002 \001(\tH\001R\017iDeviceSiteName\210\001\001\022\'\n\ri_devic"
  "e_type\030\003 \001(\tH\002R\013iDeviceType\210\001\001B\020\n\016_i_dev"
  "ice_nameB\025\n\023_i_device_site_nameB\020\n\016_i_de"
  "vice_type\032\205\001\n\013Int32Column\022O\n\006header\030\001 \001("
  "\01322.kentik.kde.v202212.FastbitResult.Col"
  "umnHeaderInfoH\000R\006header\210\001\001\022\032\n\006values\030\002 \003"
  "(\005B\002\020\001R\006valuesB\t\n\007_header\032\205\001\n\013Int64Colum"
  "n\022O\n\006header\030\001 \001(\01322.kentik.kde.v202212.F"
  "astbitResult.ColumnHeaderInfoH\000R\006header\210"
  "\001\001\022\032\n\006values\030\002 \003(\003B\002\020\001R\006valuesB\t\n\007_heade"
  "r\032\206\001\n\014UInt32Column\022O\n\006header\030\001 \001(\01322.ken"
  "tik.kde.v202212.FastbitResult.ColumnHead"
  "erInfoH\000R\006header\210\001\001\022\032\n\006values\030\002 \003(\rB\002\020\001R"
  "\006valuesB\t\n\007_header\032\206\001\n\014UInt64Column\022O\n\006h"
  "eader\030\001 \001(\01322.kentik.kde.v202212.Fastbit"
  "Result.ColumnHeaderInfoH\000R\006header\210\001\001\022\032\n\006"
  "values\030\002 \003(\004B\002\020\001R\006valuesB\t\n\007_header\032\202\001\n\014"
  "StringColumn\022O\n\006header\030\001 \001(\01322.kentik.kd"
  "e.v202212.FastbitResult.ColumnHeaderInfo"
  "H\000R\006header\210\001\001\022\026\n\006values\030\002 \003(\tR\006valuesB\t\n"
  "\007_header\032\201\001\n\013BytesColumn\022O\n\006header\030\001 \001(\013"
  "22.kentik.kde.v202212.FastbitResult.Colu"
  "mnHeaderInfoH\000R\006header\210\001\001\022\026\n\006values\030\002 \003("
  "\014R\006valuesB\t\n\007_header\032\205\001\n\013FloatColumn\022O\n\006"
  "header\030\001 \001(\01322.kentik.kde.v202212.Fastbi"
  "tResult.ColumnHeaderInfoH\000R\006header\210\001\001\022\032\n"
  "\006values\030\002 \003(\002B\002\020\001R\006valuesB\t\n\007_header\032\206\001\n"
  "\014DoubleColumn\022O\n\006header\030\001 \001(\01322.kentik.k"
  "de.v202212.FastbitResult.ColumnHeaderInf"
  "oH\000R\006header\210\001\001\022\032\n\006values\030\002 \003(\001B\002\020\001R\006valu"
  "esB\t\n\007_headerB\t\n\007_params\"\234\004\n\017FastbitResp"
  "onse\022\033\n\006target\030\001 \001(\tH\000R\006target\210\001\001\022\"\n\nreq"
  "uest_id\030\002 \001(\tH\001R\trequestId\210\001\001\022>\n\006result\030"
  "\003 \001(\0132!.kentik.kde.v202212.FastbitResult"
  "H\002R\006result\210\001\001\022\031\n\005error\030\004 \001(\tH\003R\005error\210\001\001"
  "\022$\n\013request_key\030\005 \001(\tH\004R\nrequestKey\210\001\001\022\""
  "\n\nfrom_cache\030\006 \001(\010H\005R\tfromCache\210\001\001\022\036\n\010nu"
  "m_resp\030\007 \001(\005H\006R\007numResp\210\001\001\022 \n\tthis_resp\030"
  "\010 \001(\005H\007R\010thisResp\210\001\001\022$\n\013missing_mds\030\t \001("
  "\010H\010R\nmissingMds\210\001\001\022-\n\020too_large_entity\030\n"
  " \001(\010H\tR\016tooLargeEntity\210\001\001B\t\n\007_targetB\r\n\013"
  "_request_idB\t\n\007_resultB\010\n\006_errorB\016\n\014_req"
  "uest_keyB\r\n\013_from_cacheB\013\n\t_num_respB\014\n\n"
  "_this_respB\016\n\014_missing_mdsB\023\n\021_too_large"
  "_entityB<Z:github.com/kentik/api-schema/"
  "gen/go/kentik/kde/v202212;kdeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto_sccs[14] = {
  &scc_info_FastbitResponse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_InputParams_MemberIdEntry_DoNotUse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
  &scc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto, "kentik/kde/v202212/fastbit_result.proto", 3877,
  &descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto_once, descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto_sccs, descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto::offsets,
  file_level_metadata_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto, 14, file_level_enum_descriptors_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto, file_level_service_descriptors_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto)), true);
namespace kentik {
namespace kde {
namespace v202212 {

// ===================================================================

void FastbitResult_ColumnHeaderInfo::InitAsDefaultInstance() {
}
class FastbitResult_ColumnHeaderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_ColumnHeaderInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_agg_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FastbitResult_ColumnHeaderInfo::FastbitResult_ColumnHeaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
}
FastbitResult_ColumnHeaderInfo::FastbitResult_ColumnHeaderInfo(const FastbitResult_ColumnHeaderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format()) {
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_format(),
      GetArena());
  }
  agg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_agg_name()) {
    agg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agg_name(),
      GetArena());
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
}

void FastbitResult_ColumnHeaderInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_ = 0;
}

FastbitResult_ColumnHeaderInfo::~FastbitResult_ColumnHeaderInfo() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_ColumnHeaderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agg_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastbitResult_ColumnHeaderInfo::ArenaDtor(void* object) {
  FastbitResult_ColumnHeaderInfo* _this = reinterpret_cast< FastbitResult_ColumnHeaderInfo* >(object);
  (void)_this;
}
void FastbitResult_ColumnHeaderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_ColumnHeaderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_ColumnHeaderInfo& FastbitResult_ColumnHeaderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_ColumnHeaderInfo_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_ColumnHeaderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      agg_name_.ClearNonDefaultToEmpty();
    }
  }
  position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_ColumnHeaderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 position = 2[json_name = "position"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 3[json_name = "format"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string agg_name = 4[json_name = "aggName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_agg_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_ColumnHeaderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 position = 2[json_name = "position"];
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // string format = 3[json_name = "format"];
  if (_internal_has_format()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  // string agg_name = 4[json_name = "aggName"];
  if (_internal_has_agg_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agg_name().data(), static_cast<int>(this->_internal_agg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.ColumnHeaderInfo.agg_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_agg_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  return target;
}

size_t FastbitResult_ColumnHeaderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string name = 1[json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // string format = 3[json_name = "format"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format());
    }

    // string agg_name = 4[json_name = "aggName"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_agg_name());
    }

    // int32 position = 2[json_name = "position"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_ColumnHeaderInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_ColumnHeaderInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_ColumnHeaderInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
    MergeFrom(*source);
  }
}

void FastbitResult_ColumnHeaderInfo::MergeFrom(const FastbitResult_ColumnHeaderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_agg_name(from._internal_agg_name());
    }
    if (cached_has_bits & 0x00000008u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FastbitResult_ColumnHeaderInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_ColumnHeaderInfo::CopyFrom(const FastbitResult_ColumnHeaderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.ColumnHeaderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_ColumnHeaderInfo::IsInitialized() const {
  return true;
}

void FastbitResult_ColumnHeaderInfo::InternalSwap(FastbitResult_ColumnHeaderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agg_name_.Swap(&other->agg_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_ColumnHeaderInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FastbitResult_InputParams_MemberIdEntry_DoNotUse::FastbitResult_InputParams_MemberIdEntry_DoNotUse() {}
FastbitResult_InputParams_MemberIdEntry_DoNotUse::FastbitResult_InputParams_MemberIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FastbitResult_InputParams_MemberIdEntry_DoNotUse::MergeFrom(const FastbitResult_InputParams_MemberIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_InputParams_MemberIdEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FastbitResult_InputParams_MemberIdEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FastbitResult_InputParams::InitAsDefaultInstance() {
}
class FastbitResult_InputParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_InputParams>()._has_bits_);
  static void set_has_i_orderby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_i_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_i_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_i_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_i_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_i_sq_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_i_sq_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_i_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_i_device_site_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

FastbitResult_InputParams::FastbitResult_InputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.InputParams)
}
FastbitResult_InputParams::FastbitResult_InputParams(const FastbitResult_InputParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  member_id_.MergeFrom(from.member_id_);
  i_orderby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_orderby()) {
    i_orderby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_orderby(),
      GetArena());
  }
  i_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_device_name()) {
    i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_device_name(),
      GetArena());
  }
  i_device_site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_device_site_name()) {
    i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_device_site_name(),
      GetArena());
  }
  i_device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_device_type()) {
    i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_device_type(),
      GetArena());
  }
  i_debug_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_debug_info()) {
    i_debug_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_debug_info(),
      GetArena());
  }
  ::memcpy(&i_offset_, &from.i_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_member_id_) -
    reinterpret_cast<char*>(&i_offset_)) + sizeof(use_member_id_));
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.InputParams)
}

void FastbitResult_InputParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  i_orderby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_debug_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&i_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_member_id_) -
      reinterpret_cast<char*>(&i_offset_)) + sizeof(use_member_id_));
}

FastbitResult_InputParams::~FastbitResult_InputParams() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.InputParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_InputParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_orderby_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_debug_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastbitResult_InputParams::ArenaDtor(void* object) {
  FastbitResult_InputParams* _this = reinterpret_cast< FastbitResult_InputParams* >(object);
  (void)_this;
}
void FastbitResult_InputParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_InputParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_InputParams& FastbitResult_InputParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_InputParams_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_InputParams::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.InputParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      i_orderby_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_device_site_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      i_device_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      i_debug_info_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&i_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&i_start_time_) -
        reinterpret_cast<char*>(&i_offset_)) + sizeof(i_start_time_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&i_end_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_member_id_) -
        reinterpret_cast<char*>(&i_end_time_)) + sizeof(use_member_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_InputParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string i_orderby = 1[json_name = "iOrderby"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_i_orderby();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.InputParams.i_orderby"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i_offset = 2[json_name = "iOffset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_i_offset(&has_bits);
          i_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i_limit = 3[json_name = "iLimit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_i_limit(&has_bits);
          i_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i_start_time = 4[json_name = "iStartTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_i_start_time(&has_bits);
          i_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i_end_time = 5[json_name = "iEndTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_i_end_time(&has_bits);
          i_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i_device_name = 6[json_name = "iDeviceName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_i_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.InputParams.i_device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i_device_id = 7[json_name = "iDeviceId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_i_device_id(&has_bits);
          i_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i_sq_start = 8[json_name = "iSqStart"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_i_sq_start(&has_bits);
          i_sq_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i_sq_end = 9[json_name = "iSqEnd"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_i_sq_end(&has_bits);
          i_sq_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i_duration = 10[json_name = "iDuration"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_i_duration(&has_bits);
          i_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i_device_site_name = 11[json_name = "iDeviceSiteName"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_i_device_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i_device_type = 12[json_name = "iDeviceType"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_i_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.InputParams.i_device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i_debug_info = 13[json_name = "iDebugInfo"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_i_debug_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.InputParams.i_debug_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_member_id = 14[json_name = "useMemberId"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_use_member_id(&has_bits);
          use_member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .kentik.kde.v202212.FastbitResult.MemberId> member_id = 15[json_name = "memberId"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&member_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_InputParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.InputParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string i_orderby = 1[json_name = "iOrderby"];
  if (_internal_has_i_orderby()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_orderby().data(), static_cast<int>(this->_internal_i_orderby().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.InputParams.i_orderby");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_i_orderby(), target);
  }

  // int32 i_offset = 2[json_name = "iOffset"];
  if (_internal_has_i_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i_offset(), target);
  }

  // int32 i_limit = 3[json_name = "iLimit"];
  if (_internal_has_i_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_i_limit(), target);
  }

  // int64 i_start_time = 4[json_name = "iStartTime"];
  if (_internal_has_i_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_i_start_time(), target);
  }

  // int64 i_end_time = 5[json_name = "iEndTime"];
  if (_internal_has_i_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_i_end_time(), target);
  }

  // string i_device_name = 6[json_name = "iDeviceName"];
  if (_internal_has_i_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_device_name().data(), static_cast<int>(this->_internal_i_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.InputParams.i_device_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_i_device_name(), target);
  }

  // int64 i_device_id = 7[json_name = "iDeviceId"];
  if (_internal_has_i_device_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_i_device_id(), target);
  }

  // int64 i_sq_start = 8[json_name = "iSqStart"];
  if (_internal_has_i_sq_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_i_sq_start(), target);
  }

  // int64 i_sq_end = 9[json_name = "iSqEnd"];
  if (_internal_has_i_sq_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_i_sq_end(), target);
  }

  // int32 i_duration = 10[json_name = "iDuration"];
  if (_internal_has_i_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_i_duration(), target);
  }

  // string i_device_site_name = 11[json_name = "iDeviceSiteName"];
  if (_internal_has_i_device_site_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_device_site_name().data(), static_cast<int>(this->_internal_i_device_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.InputParams.i_device_site_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_i_device_site_name(), target);
  }

  // string i_device_type = 12[json_name = "iDeviceType"];
  if (_internal_has_i_device_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_device_type().data(), static_cast<int>(this->_internal_i_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.InputParams.i_device_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_i_device_type(), target);
  }

  // string i_debug_info = 13[json_name = "iDebugInfo"];
  if (_internal_has_i_debug_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_debug_info().data(), static_cast<int>(this->_internal_i_debug_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.InputParams.i_debug_info");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_i_debug_info(), target);
  }

  // bool use_member_id = 14[json_name = "useMemberId"];
  if (_internal_has_use_member_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_use_member_id(), target);
  }

  // map<int64, .kentik.kde.v202212.FastbitResult.MemberId> member_id = 15[json_name = "memberId"];
  if (!this->_internal_member_id().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_member_id().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_member_id().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >::const_iterator
          it = this->_internal_member_id().begin();
          it != this->_internal_member_id().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FastbitResult_InputParams_MemberIdEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >::const_iterator
          it = this->_internal_member_id().begin();
          it != this->_internal_member_id().end(); ++it) {
        target = FastbitResult_InputParams_MemberIdEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.InputParams)
  return target;
}

size_t FastbitResult_InputParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.InputParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .kentik.kde.v202212.FastbitResult.MemberId> member_id = 15[json_name = "memberId"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_member_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::kentik::kde::v202212::FastbitResult_MemberId >::const_iterator
      it = this->_internal_member_id().begin();
      it != this->_internal_member_id().end(); ++it) {
    total_size += FastbitResult_InputParams_MemberIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string i_orderby = 1[json_name = "iOrderby"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_orderby());
    }

    // string i_device_name = 6[json_name = "iDeviceName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_device_name());
    }

    // string i_device_site_name = 11[json_name = "iDeviceSiteName"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_device_site_name());
    }

    // string i_device_type = 12[json_name = "iDeviceType"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_device_type());
    }

    // string i_debug_info = 13[json_name = "iDebugInfo"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_debug_info());
    }

    // int32 i_offset = 2[json_name = "iOffset"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i_offset());
    }

    // int32 i_limit = 3[json_name = "iLimit"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i_limit());
    }

    // int64 i_start_time = 4[json_name = "iStartTime"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i_start_time());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // int64 i_end_time = 5[json_name = "iEndTime"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i_end_time());
    }

    // int64 i_device_id = 7[json_name = "iDeviceId"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i_device_id());
    }

    // int64 i_sq_start = 8[json_name = "iSqStart"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i_sq_start());
    }

    // int64 i_sq_end = 9[json_name = "iSqEnd"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i_sq_end());
    }

    // int32 i_duration = 10[json_name = "iDuration"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i_duration());
    }

    // bool use_member_id = 14[json_name = "useMemberId"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_InputParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.InputParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_InputParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_InputParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.InputParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.InputParams)
    MergeFrom(*source);
  }
}

void FastbitResult_InputParams::MergeFrom(const FastbitResult_InputParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.InputParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_.MergeFrom(from.member_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_orderby(from._internal_i_orderby());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_device_name(from._internal_i_device_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_device_site_name(from._internal_i_device_site_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_i_device_type(from._internal_i_device_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_i_debug_info(from._internal_i_debug_info());
    }
    if (cached_has_bits & 0x00000020u) {
      i_offset_ = from.i_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      i_limit_ = from.i_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      i_start_time_ = from.i_start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      i_end_time_ = from.i_end_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      i_device_id_ = from.i_device_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      i_sq_start_ = from.i_sq_start_;
    }
    if (cached_has_bits & 0x00000800u) {
      i_sq_end_ = from.i_sq_end_;
    }
    if (cached_has_bits & 0x00001000u) {
      i_duration_ = from.i_duration_;
    }
    if (cached_has_bits & 0x00002000u) {
      use_member_id_ = from.use_member_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FastbitResult_InputParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.InputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_InputParams::CopyFrom(const FastbitResult_InputParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.InputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_InputParams::IsInitialized() const {
  return true;
}

void FastbitResult_InputParams::InternalSwap(FastbitResult_InputParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_id_.Swap(&other->member_id_);
  i_orderby_.Swap(&other->i_orderby_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_device_name_.Swap(&other->i_device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_device_site_name_.Swap(&other->i_device_site_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_device_type_.Swap(&other->i_device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_debug_info_.Swap(&other->i_debug_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FastbitResult_InputParams, use_member_id_)
      + sizeof(FastbitResult_InputParams::use_member_id_)
      - PROTOBUF_FIELD_OFFSET(FastbitResult_InputParams, i_offset_)>(
          reinterpret_cast<char*>(&i_offset_),
          reinterpret_cast<char*>(&other->i_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_InputParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_MemberId::InitAsDefaultInstance() {
}
class FastbitResult_MemberId::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_MemberId>()._has_bits_);
  static void set_has_i_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_device_site_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FastbitResult_MemberId::FastbitResult_MemberId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.MemberId)
}
FastbitResult_MemberId::FastbitResult_MemberId(const FastbitResult_MemberId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_device_name()) {
    i_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_device_name(),
      GetArena());
  }
  i_device_site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_device_site_name()) {
    i_device_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_device_site_name(),
      GetArena());
  }
  i_device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_device_type()) {
    i_device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_device_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.MemberId)
}

void FastbitResult_MemberId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  i_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FastbitResult_MemberId::~FastbitResult_MemberId() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.MemberId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_MemberId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastbitResult_MemberId::ArenaDtor(void* object) {
  FastbitResult_MemberId* _this = reinterpret_cast< FastbitResult_MemberId* >(object);
  (void)_this;
}
void FastbitResult_MemberId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_MemberId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_MemberId& FastbitResult_MemberId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_MemberId_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_MemberId::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.MemberId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      i_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_device_site_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_device_type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_MemberId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string i_device_name = 1[json_name = "iDeviceName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_i_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.MemberId.i_device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i_device_site_name = 2[json_name = "iDeviceSiteName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_device_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i_device_type = 3[json_name = "iDeviceType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.MemberId.i_device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_MemberId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.MemberId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string i_device_name = 1[json_name = "iDeviceName"];
  if (_internal_has_i_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_device_name().data(), static_cast<int>(this->_internal_i_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.MemberId.i_device_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_i_device_name(), target);
  }

  // string i_device_site_name = 2[json_name = "iDeviceSiteName"];
  if (_internal_has_i_device_site_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_device_site_name().data(), static_cast<int>(this->_internal_i_device_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.MemberId.i_device_site_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_device_site_name(), target);
  }

  // string i_device_type = 3[json_name = "iDeviceType"];
  if (_internal_has_i_device_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i_device_type().data(), static_cast<int>(this->_internal_i_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.MemberId.i_device_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.MemberId)
  return target;
}

size_t FastbitResult_MemberId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.MemberId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string i_device_name = 1[json_name = "iDeviceName"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_device_name());
    }

    // string i_device_site_name = 2[json_name = "iDeviceSiteName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_device_site_name());
    }

    // string i_device_type = 3[json_name = "iDeviceType"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_device_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_MemberId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.MemberId)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_MemberId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_MemberId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.MemberId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.MemberId)
    MergeFrom(*source);
  }
}

void FastbitResult_MemberId::MergeFrom(const FastbitResult_MemberId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.MemberId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_device_name(from._internal_i_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_device_site_name(from._internal_i_device_site_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_device_type(from._internal_i_device_type());
    }
  }
}

void FastbitResult_MemberId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.MemberId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_MemberId::CopyFrom(const FastbitResult_MemberId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.MemberId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_MemberId::IsInitialized() const {
  return true;
}

void FastbitResult_MemberId::InternalSwap(FastbitResult_MemberId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  i_device_name_.Swap(&other->i_device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_device_site_name_.Swap(&other->i_device_site_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_device_type_.Swap(&other->i_device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_MemberId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_Int32Column::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_Int32Column_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_Int32Column::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_Int32Column>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_Int32Column* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_Int32Column::_Internal::header(const FastbitResult_Int32Column* msg) {
  return *msg->header_;
}
FastbitResult_Int32Column::FastbitResult_Int32Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.Int32Column)
}
FastbitResult_Int32Column::FastbitResult_Int32Column(const FastbitResult_Int32Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.Int32Column)
}

void FastbitResult_Int32Column::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_Int32Column::~FastbitResult_Int32Column() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.Int32Column)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_Int32Column::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_Int32Column::ArenaDtor(void* object) {
  FastbitResult_Int32Column* _this = reinterpret_cast< FastbitResult_Int32Column* >(object);
  (void)_this;
}
void FastbitResult_Int32Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_Int32Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_Int32Column& FastbitResult_Int32Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_Int32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_Int32Column::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.Int32Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_Int32Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 values = 2[json_name = "values", packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_Int32Column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.Int32Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated int32 values = 2[json_name = "values", packed = true];
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.Int32Column)
  return target;
}

size_t FastbitResult_Int32Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.Int32Column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 2[json_name = "values", packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_Int32Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.Int32Column)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_Int32Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_Int32Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.Int32Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.Int32Column)
    MergeFrom(*source);
  }
}

void FastbitResult_Int32Column::MergeFrom(const FastbitResult_Int32Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.Int32Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_Int32Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.Int32Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_Int32Column::CopyFrom(const FastbitResult_Int32Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.Int32Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_Int32Column::IsInitialized() const {
  return true;
}

void FastbitResult_Int32Column::InternalSwap(FastbitResult_Int32Column* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_Int32Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_Int64Column::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_Int64Column_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_Int64Column::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_Int64Column>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_Int64Column* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_Int64Column::_Internal::header(const FastbitResult_Int64Column* msg) {
  return *msg->header_;
}
FastbitResult_Int64Column::FastbitResult_Int64Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.Int64Column)
}
FastbitResult_Int64Column::FastbitResult_Int64Column(const FastbitResult_Int64Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.Int64Column)
}

void FastbitResult_Int64Column::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_Int64Column::~FastbitResult_Int64Column() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.Int64Column)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_Int64Column::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_Int64Column::ArenaDtor(void* object) {
  FastbitResult_Int64Column* _this = reinterpret_cast< FastbitResult_Int64Column* >(object);
  (void)_this;
}
void FastbitResult_Int64Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_Int64Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_Int64Column& FastbitResult_Int64Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_Int64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_Int64Column::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.Int64Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_Int64Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 values = 2[json_name = "values", packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_Int64Column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.Int64Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated int64 values = 2[json_name = "values", packed = true];
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.Int64Column)
  return target;
}

size_t FastbitResult_Int64Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.Int64Column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 values = 2[json_name = "values", packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_Int64Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.Int64Column)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_Int64Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_Int64Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.Int64Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.Int64Column)
    MergeFrom(*source);
  }
}

void FastbitResult_Int64Column::MergeFrom(const FastbitResult_Int64Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.Int64Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_Int64Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.Int64Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_Int64Column::CopyFrom(const FastbitResult_Int64Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.Int64Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_Int64Column::IsInitialized() const {
  return true;
}

void FastbitResult_Int64Column::InternalSwap(FastbitResult_Int64Column* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_Int64Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_UInt32Column::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_UInt32Column_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_UInt32Column::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_UInt32Column>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_UInt32Column* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_UInt32Column::_Internal::header(const FastbitResult_UInt32Column* msg) {
  return *msg->header_;
}
FastbitResult_UInt32Column::FastbitResult_UInt32Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.UInt32Column)
}
FastbitResult_UInt32Column::FastbitResult_UInt32Column(const FastbitResult_UInt32Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.UInt32Column)
}

void FastbitResult_UInt32Column::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_UInt32Column::~FastbitResult_UInt32Column() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.UInt32Column)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_UInt32Column::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_UInt32Column::ArenaDtor(void* object) {
  FastbitResult_UInt32Column* _this = reinterpret_cast< FastbitResult_UInt32Column* >(object);
  (void)_this;
}
void FastbitResult_UInt32Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_UInt32Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_UInt32Column& FastbitResult_UInt32Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_UInt32Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_UInt32Column::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_UInt32Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 values = 2[json_name = "values", packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_UInt32Column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated uint32 values = 2[json_name = "values", packed = true];
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.UInt32Column)
  return target;
}

size_t FastbitResult_UInt32Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 values = 2[json_name = "values", packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_UInt32Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_UInt32Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_UInt32Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.UInt32Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.UInt32Column)
    MergeFrom(*source);
  }
}

void FastbitResult_UInt32Column::MergeFrom(const FastbitResult_UInt32Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_UInt32Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_UInt32Column::CopyFrom(const FastbitResult_UInt32Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.UInt32Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_UInt32Column::IsInitialized() const {
  return true;
}

void FastbitResult_UInt32Column::InternalSwap(FastbitResult_UInt32Column* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_UInt32Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_UInt64Column::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_UInt64Column_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_UInt64Column::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_UInt64Column>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_UInt64Column* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_UInt64Column::_Internal::header(const FastbitResult_UInt64Column* msg) {
  return *msg->header_;
}
FastbitResult_UInt64Column::FastbitResult_UInt64Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.UInt64Column)
}
FastbitResult_UInt64Column::FastbitResult_UInt64Column(const FastbitResult_UInt64Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.UInt64Column)
}

void FastbitResult_UInt64Column::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_UInt64Column::~FastbitResult_UInt64Column() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.UInt64Column)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_UInt64Column::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_UInt64Column::ArenaDtor(void* object) {
  FastbitResult_UInt64Column* _this = reinterpret_cast< FastbitResult_UInt64Column* >(object);
  (void)_this;
}
void FastbitResult_UInt64Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_UInt64Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_UInt64Column& FastbitResult_UInt64Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_UInt64Column_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_UInt64Column::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_UInt64Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 values = 2[json_name = "values", packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_UInt64Column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated uint64 values = 2[json_name = "values", packed = true];
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.UInt64Column)
  return target;
}

size_t FastbitResult_UInt64Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 values = 2[json_name = "values", packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_UInt64Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_UInt64Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_UInt64Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.UInt64Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.UInt64Column)
    MergeFrom(*source);
  }
}

void FastbitResult_UInt64Column::MergeFrom(const FastbitResult_UInt64Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_UInt64Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_UInt64Column::CopyFrom(const FastbitResult_UInt64Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.UInt64Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_UInt64Column::IsInitialized() const {
  return true;
}

void FastbitResult_UInt64Column::InternalSwap(FastbitResult_UInt64Column* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_UInt64Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_StringColumn::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_StringColumn_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_StringColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_StringColumn>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_StringColumn* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_StringColumn::_Internal::header(const FastbitResult_StringColumn* msg) {
  return *msg->header_;
}
FastbitResult_StringColumn::FastbitResult_StringColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.StringColumn)
}
FastbitResult_StringColumn::FastbitResult_StringColumn(const FastbitResult_StringColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.StringColumn)
}

void FastbitResult_StringColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_StringColumn::~FastbitResult_StringColumn() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.StringColumn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_StringColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_StringColumn::ArenaDtor(void* object) {
  FastbitResult_StringColumn* _this = reinterpret_cast< FastbitResult_StringColumn* >(object);
  (void)_this;
}
void FastbitResult_StringColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_StringColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_StringColumn& FastbitResult_StringColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_StringColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_StringColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.StringColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_StringColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string values = 2[json_name = "values"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResult.StringColumn.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_StringColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.StringColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated string values = 2[json_name = "values"];
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResult.StringColumn.values");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.StringColumn)
  return target;
}

size_t FastbitResult_StringColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.StringColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 2[json_name = "values"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_StringColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.StringColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_StringColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_StringColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.StringColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.StringColumn)
    MergeFrom(*source);
  }
}

void FastbitResult_StringColumn::MergeFrom(const FastbitResult_StringColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.StringColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_StringColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.StringColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_StringColumn::CopyFrom(const FastbitResult_StringColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.StringColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_StringColumn::IsInitialized() const {
  return true;
}

void FastbitResult_StringColumn::InternalSwap(FastbitResult_StringColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_StringColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_BytesColumn::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_BytesColumn_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_BytesColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_BytesColumn>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_BytesColumn* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_BytesColumn::_Internal::header(const FastbitResult_BytesColumn* msg) {
  return *msg->header_;
}
FastbitResult_BytesColumn::FastbitResult_BytesColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.BytesColumn)
}
FastbitResult_BytesColumn::FastbitResult_BytesColumn(const FastbitResult_BytesColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.BytesColumn)
}

void FastbitResult_BytesColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_BytesColumn::~FastbitResult_BytesColumn() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.BytesColumn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_BytesColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_BytesColumn::ArenaDtor(void* object) {
  FastbitResult_BytesColumn* _this = reinterpret_cast< FastbitResult_BytesColumn* >(object);
  (void)_this;
}
void FastbitResult_BytesColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_BytesColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_BytesColumn& FastbitResult_BytesColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_BytesColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_BytesColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_BytesColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes values = 2[json_name = "values"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_BytesColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated bytes values = 2[json_name = "values"];
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.BytesColumn)
  return target;
}

size_t FastbitResult_BytesColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 2[json_name = "values"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_BytesColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_BytesColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_BytesColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.BytesColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.BytesColumn)
    MergeFrom(*source);
  }
}

void FastbitResult_BytesColumn::MergeFrom(const FastbitResult_BytesColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_BytesColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_BytesColumn::CopyFrom(const FastbitResult_BytesColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.BytesColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_BytesColumn::IsInitialized() const {
  return true;
}

void FastbitResult_BytesColumn::InternalSwap(FastbitResult_BytesColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_BytesColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_FloatColumn::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_FloatColumn_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_FloatColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_FloatColumn>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_FloatColumn* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_FloatColumn::_Internal::header(const FastbitResult_FloatColumn* msg) {
  return *msg->header_;
}
FastbitResult_FloatColumn::FastbitResult_FloatColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.FloatColumn)
}
FastbitResult_FloatColumn::FastbitResult_FloatColumn(const FastbitResult_FloatColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.FloatColumn)
}

void FastbitResult_FloatColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_FloatColumn::~FastbitResult_FloatColumn() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.FloatColumn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_FloatColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_FloatColumn::ArenaDtor(void* object) {
  FastbitResult_FloatColumn* _this = reinterpret_cast< FastbitResult_FloatColumn* >(object);
  (void)_this;
}
void FastbitResult_FloatColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_FloatColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_FloatColumn& FastbitResult_FloatColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_FloatColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_FloatColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_FloatColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2[json_name = "values", packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_FloatColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated float values = 2[json_name = "values", packed = true];
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.FloatColumn)
  return target;
}

size_t FastbitResult_FloatColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2[json_name = "values", packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_FloatColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_FloatColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_FloatColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.FloatColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.FloatColumn)
    MergeFrom(*source);
  }
}

void FastbitResult_FloatColumn::MergeFrom(const FastbitResult_FloatColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_FloatColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_FloatColumn::CopyFrom(const FastbitResult_FloatColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.FloatColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_FloatColumn::IsInitialized() const {
  return true;
}

void FastbitResult_FloatColumn::InternalSwap(FastbitResult_FloatColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_FloatColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult_DoubleColumn::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_DoubleColumn_default_instance_._instance.get_mutable()->header_ = const_cast< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo*>(
      ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::internal_default_instance());
}
class FastbitResult_DoubleColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult_DoubleColumn>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo& header(const FastbitResult_DoubleColumn* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo&
FastbitResult_DoubleColumn::_Internal::header(const FastbitResult_DoubleColumn* msg) {
  return *msg->header_;
}
FastbitResult_DoubleColumn::FastbitResult_DoubleColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult.DoubleColumn)
}
FastbitResult_DoubleColumn::FastbitResult_DoubleColumn(const FastbitResult_DoubleColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult.DoubleColumn)
}

void FastbitResult_DoubleColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  header_ = nullptr;
}

FastbitResult_DoubleColumn::~FastbitResult_DoubleColumn() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult.DoubleColumn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult_DoubleColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void FastbitResult_DoubleColumn::ArenaDtor(void* object) {
  FastbitResult_DoubleColumn* _this = reinterpret_cast< FastbitResult_DoubleColumn* >(object);
  (void)_this;
}
void FastbitResult_DoubleColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult_DoubleColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult_DoubleColumn& FastbitResult_DoubleColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_DoubleColumn_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult_DoubleColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult_DoubleColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double values = 2[json_name = "values", packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult_DoubleColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated double values = 2[json_name = "values", packed = true];
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult.DoubleColumn)
  return target;
}

size_t FastbitResult_DoubleColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 2[json_name = "values", packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .kentik.kde.v202212.FastbitResult.ColumnHeaderInfo header = 1[json_name = "header"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult_DoubleColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult_DoubleColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult_DoubleColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult.DoubleColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult.DoubleColumn)
    MergeFrom(*source);
  }
}

void FastbitResult_DoubleColumn::MergeFrom(const FastbitResult_DoubleColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo::MergeFrom(from._internal_header());
  }
}

void FastbitResult_DoubleColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult_DoubleColumn::CopyFrom(const FastbitResult_DoubleColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult.DoubleColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult_DoubleColumn::IsInitialized() const {
  return true;
}

void FastbitResult_DoubleColumn::InternalSwap(FastbitResult_DoubleColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult_DoubleColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResult::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResult_default_instance_._instance.get_mutable()->params_ = const_cast< ::kentik::kde::v202212::FastbitResult_InputParams*>(
      ::kentik::kde::v202212::FastbitResult_InputParams::internal_default_instance());
}
class FastbitResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResult>()._has_bits_);
  static const ::kentik::kde::v202212::FastbitResult_InputParams& params(const FastbitResult* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::kentik::kde::v202212::FastbitResult_InputParams&
FastbitResult::_Internal::params(const FastbitResult* msg) {
  return *msg->params_;
}
FastbitResult::FastbitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  int32_column_(arena),
  int64_column_(arena),
  uint32_column_(arena),
  uint64_column_(arena),
  string_column_(arena),
  bytes_column_(arena),
  float_column_(arena),
  double_column_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResult)
}
FastbitResult::FastbitResult(const FastbitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      int32_column_(from.int32_column_),
      int64_column_(from.int64_column_),
      uint32_column_(from.uint32_column_),
      uint64_column_(from.uint64_column_),
      string_column_(from.string_column_),
      bytes_column_(from.bytes_column_),
      float_column_(from.float_column_),
      double_column_(from.double_column_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::kentik::kde::v202212::FastbitResult_InputParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResult)
}

void FastbitResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  params_ = nullptr;
}

FastbitResult::~FastbitResult() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void FastbitResult::ArenaDtor(void* object) {
  FastbitResult* _this = reinterpret_cast< FastbitResult* >(object);
  (void)_this;
}
void FastbitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResult& FastbitResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResult_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int32_column_.Clear();
  int64_column_.Clear();
  uint32_column_.Clear();
  uint64_column_.Clear();
  string_column_.Clear();
  bytes_column_.Clear();
  float_column_.Clear();
  double_column_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && params_ != nullptr) {
      delete params_;
    }
    params_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.kde.v202212.FastbitResult.InputParams params = 1[json_name = "params"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.Int32Column int32_column = 2[json_name = "int32Column"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_int32_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.Int64Column int64_column = 3[json_name = "int64Column"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_int64_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.UInt32Column uint32_column = 4[json_name = "uint32Column"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uint32_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.UInt64Column uint64_column = 5[json_name = "uint64Column"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uint64_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.StringColumn string_column = 6[json_name = "stringColumn"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_string_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.BytesColumn bytes_column = 7[json_name = "bytesColumn"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bytes_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.FloatColumn float_column = 8[json_name = "floatColumn"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_float_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.kde.v202212.FastbitResult.DoubleColumn double_column = 9[json_name = "doubleColumn"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_double_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.kde.v202212.FastbitResult.InputParams params = 1[json_name = "params"];
  if (_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.Int32Column int32_column = 2[json_name = "int32Column"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_int32_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_int32_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.Int64Column int64_column = 3[json_name = "int64Column"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_int64_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_int64_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.UInt32Column uint32_column = 4[json_name = "uint32Column"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uint32_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_uint32_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.UInt64Column uint64_column = 5[json_name = "uint64Column"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uint64_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_uint64_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.StringColumn string_column = 6[json_name = "stringColumn"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_string_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_string_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.BytesColumn bytes_column = 7[json_name = "bytesColumn"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bytes_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_bytes_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.FloatColumn float_column = 8[json_name = "floatColumn"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_float_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_float_column(i), target, stream);
  }

  // repeated .kentik.kde.v202212.FastbitResult.DoubleColumn double_column = 9[json_name = "doubleColumn"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_double_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_double_column(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResult)
  return target;
}

size_t FastbitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.kde.v202212.FastbitResult.Int32Column int32_column = 2[json_name = "int32Column"];
  total_size += 1UL * this->_internal_int32_column_size();
  for (const auto& msg : this->int32_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.Int64Column int64_column = 3[json_name = "int64Column"];
  total_size += 1UL * this->_internal_int64_column_size();
  for (const auto& msg : this->int64_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.UInt32Column uint32_column = 4[json_name = "uint32Column"];
  total_size += 1UL * this->_internal_uint32_column_size();
  for (const auto& msg : this->uint32_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.UInt64Column uint64_column = 5[json_name = "uint64Column"];
  total_size += 1UL * this->_internal_uint64_column_size();
  for (const auto& msg : this->uint64_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.StringColumn string_column = 6[json_name = "stringColumn"];
  total_size += 1UL * this->_internal_string_column_size();
  for (const auto& msg : this->string_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.BytesColumn bytes_column = 7[json_name = "bytesColumn"];
  total_size += 1UL * this->_internal_bytes_column_size();
  for (const auto& msg : this->bytes_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.FloatColumn float_column = 8[json_name = "floatColumn"];
  total_size += 1UL * this->_internal_float_column_size();
  for (const auto& msg : this->float_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.kde.v202212.FastbitResult.DoubleColumn double_column = 9[json_name = "doubleColumn"];
  total_size += 1UL * this->_internal_double_column_size();
  for (const auto& msg : this->double_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kentik.kde.v202212.FastbitResult.InputParams params = 1[json_name = "params"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResult)
    MergeFrom(*source);
  }
}

void FastbitResult::MergeFrom(const FastbitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int32_column_.MergeFrom(from.int32_column_);
  int64_column_.MergeFrom(from.int64_column_);
  uint32_column_.MergeFrom(from.uint32_column_);
  uint64_column_.MergeFrom(from.uint64_column_);
  string_column_.MergeFrom(from.string_column_);
  bytes_column_.MergeFrom(from.bytes_column_);
  float_column_.MergeFrom(from.float_column_);
  double_column_.MergeFrom(from.double_column_);
  if (from._internal_has_params()) {
    _internal_mutable_params()->::kentik::kde::v202212::FastbitResult_InputParams::MergeFrom(from._internal_params());
  }
}

void FastbitResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResult::CopyFrom(const FastbitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResult::IsInitialized() const {
  return true;
}

void FastbitResult::InternalSwap(FastbitResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  int32_column_.InternalSwap(&other->int32_column_);
  int64_column_.InternalSwap(&other->int64_column_);
  uint32_column_.InternalSwap(&other->uint32_column_);
  uint64_column_.InternalSwap(&other->uint64_column_);
  string_column_.InternalSwap(&other->string_column_);
  bytes_column_.InternalSwap(&other->bytes_column_);
  float_column_.InternalSwap(&other->float_column_);
  double_column_.InternalSwap(&other->double_column_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastbitResponse::InitAsDefaultInstance() {
  ::kentik::kde::v202212::_FastbitResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::kentik::kde::v202212::FastbitResult*>(
      ::kentik::kde::v202212::FastbitResult::internal_default_instance());
}
class FastbitResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FastbitResponse>()._has_bits_);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::kentik::kde::v202212::FastbitResult& result(const FastbitResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_this_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_missing_mds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_too_large_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::kentik::kde::v202212::FastbitResult&
FastbitResponse::_Internal::result(const FastbitResponse* msg) {
  return *msg->result_;
}
FastbitResponse::FastbitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.kde.v202212.FastbitResponse)
}
FastbitResponse::FastbitResponse(const FastbitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_request_id()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  request_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_request_key()) {
    request_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_key(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::kentik::kde::v202212::FastbitResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&num_resp_, &from.num_resp_,
    static_cast<size_t>(reinterpret_cast<char*>(&too_large_entity_) -
    reinterpret_cast<char*>(&num_resp_)) + sizeof(too_large_entity_));
  // @@protoc_insertion_point(copy_constructor:kentik.kde.v202212.FastbitResponse)
}

void FastbitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastbitResponse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&too_large_entity_) -
      reinterpret_cast<char*>(&result_)) + sizeof(too_large_entity_));
}

FastbitResponse::~FastbitResponse() {
  // @@protoc_insertion_point(destructor:kentik.kde.v202212.FastbitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastbitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void FastbitResponse::ArenaDtor(void* object) {
  FastbitResponse* _this = reinterpret_cast< FastbitResponse* >(object);
  (void)_this;
}
void FastbitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastbitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastbitResponse& FastbitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastbitResponse_kentik_2fkde_2fv202212_2ffastbit_5fresult_2eproto.base);
  return *internal_default_instance();
}


void FastbitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.kde.v202212.FastbitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      request_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      if (GetArena() == nullptr && result_ != nullptr) {
        delete result_;
      }
      result_ = nullptr;
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&num_resp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_cache_) -
        reinterpret_cast<char*>(&num_resp_)) + sizeof(from_cache_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&missing_mds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&too_large_entity_) -
        reinterpret_cast<char*>(&missing_mds_)) + sizeof(too_large_entity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastbitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResponse.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2[json_name = "requestId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.kde.v202212.FastbitResult result = 3[json_name = "result"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 4[json_name = "error"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_key = 5[json_name = "requestKey"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_request_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.kde.v202212.FastbitResponse.request_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool from_cache = 6[json_name = "fromCache"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_from_cache(&has_bits);
          from_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_resp = 7[json_name = "numResp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_resp(&has_bits);
          num_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 this_resp = 8[json_name = "thisResp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_this_resp(&has_bits);
          this_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool missing_mds = 9[json_name = "missingMds"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_missing_mds(&has_bits);
          missing_mds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool too_large_entity = 10[json_name = "tooLargeEntity"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_too_large_entity(&has_bits);
          too_large_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastbitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.kde.v202212.FastbitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (_internal_has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResponse.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // string request_id = 2[json_name = "requestId"];
  if (_internal_has_request_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // .kentik.kde.v202212.FastbitResult result = 3[json_name = "result"];
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::result(this), target, stream);
  }

  // string error = 4[json_name = "error"];
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResponse.error");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error(), target);
  }

  // string request_key = 5[json_name = "requestKey"];
  if (_internal_has_request_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_key().data(), static_cast<int>(this->_internal_request_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.kde.v202212.FastbitResponse.request_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_request_key(), target);
  }

  // bool from_cache = 6[json_name = "fromCache"];
  if (_internal_has_from_cache()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_from_cache(), target);
  }

  // int32 num_resp = 7[json_name = "numResp"];
  if (_internal_has_num_resp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_resp(), target);
  }

  // int32 this_resp = 8[json_name = "thisResp"];
  if (_internal_has_this_resp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_this_resp(), target);
  }

  // bool missing_mds = 9[json_name = "missingMds"];
  if (_internal_has_missing_mds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_missing_mds(), target);
  }

  // bool too_large_entity = 10[json_name = "tooLargeEntity"];
  if (_internal_has_too_large_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_too_large_entity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.kde.v202212.FastbitResponse)
  return target;
}

size_t FastbitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.kde.v202212.FastbitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string target = 1[json_name = "target"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // string request_id = 2[json_name = "requestId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_id());
    }

    // string error = 4[json_name = "error"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // string request_key = 5[json_name = "requestKey"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_key());
    }

    // .kentik.kde.v202212.FastbitResult result = 3[json_name = "result"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // int32 num_resp = 7[json_name = "numResp"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_resp());
    }

    // int32 this_resp = 8[json_name = "thisResp"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_this_resp());
    }

    // bool from_cache = 6[json_name = "fromCache"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // bool missing_mds = 9[json_name = "missingMds"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // bool too_large_entity = 10[json_name = "tooLargeEntity"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastbitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.kde.v202212.FastbitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FastbitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastbitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.kde.v202212.FastbitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.kde.v202212.FastbitResponse)
    MergeFrom(*source);
  }
}

void FastbitResponse::MergeFrom(const FastbitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.kde.v202212.FastbitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_request_id(from._internal_request_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_request_key(from._internal_request_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_result()->::kentik::kde::v202212::FastbitResult::MergeFrom(from._internal_result());
    }
    if (cached_has_bits & 0x00000020u) {
      num_resp_ = from.num_resp_;
    }
    if (cached_has_bits & 0x00000040u) {
      this_resp_ = from.this_resp_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_cache_ = from.from_cache_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      missing_mds_ = from.missing_mds_;
    }
    if (cached_has_bits & 0x00000200u) {
      too_large_entity_ = from.too_large_entity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FastbitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.kde.v202212.FastbitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastbitResponse::CopyFrom(const FastbitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.kde.v202212.FastbitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastbitResponse::IsInitialized() const {
  return true;
}

void FastbitResponse::InternalSwap(FastbitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_key_.Swap(&other->request_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FastbitResponse, too_large_entity_)
      + sizeof(FastbitResponse::too_large_entity_)
      - PROTOBUF_FIELD_OFFSET(FastbitResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FastbitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202212
}  // namespace kde
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_ColumnHeaderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_InputParams_MemberIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_InputParams* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_InputParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_InputParams >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_MemberId* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_MemberId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_MemberId >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_Int32Column* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_Int32Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_Int32Column >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_Int64Column* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_Int64Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_Int64Column >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_UInt32Column* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_UInt32Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_UInt32Column >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_UInt64Column* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_UInt64Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_UInt64Column >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_StringColumn* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_StringColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_StringColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_BytesColumn* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_BytesColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_BytesColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_FloatColumn* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_FloatColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_FloatColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult_DoubleColumn* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult_DoubleColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult_DoubleColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResult* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::kde::v202212::FastbitResponse* Arena::CreateMaybeMessage< ::kentik::kde::v202212::FastbitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::kde::v202212::FastbitResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
