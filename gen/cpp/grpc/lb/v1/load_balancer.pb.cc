// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/lb/v1/load_balancer.proto

#include "grpc/lb/v1/load_balancer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
namespace grpc {
namespace lb {
namespace v1 {
class LoadBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadBalanceRequest> _instance;
  const ::grpc::lb::v1::InitialLoadBalanceRequest* initial_request_;
  const ::grpc::lb::v1::ClientStats* client_stats_;
} _LoadBalanceRequest_default_instance_;
class InitialLoadBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialLoadBalanceRequest> _instance;
} _InitialLoadBalanceRequest_default_instance_;
class ClientStatsPerTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientStatsPerToken> _instance;
} _ClientStatsPerToken_default_instance_;
class ClientStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientStats> _instance;
} _ClientStats_default_instance_;
class LoadBalanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadBalanceResponse> _instance;
  const ::grpc::lb::v1::InitialLoadBalanceResponse* initial_response_;
  const ::grpc::lb::v1::ServerList* server_list_;
  const ::grpc::lb::v1::FallbackResponse* fallback_response_;
} _LoadBalanceResponse_default_instance_;
class InitialLoadBalanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialLoadBalanceResponse> _instance;
} _InitialLoadBalanceResponse_default_instance_;
class ServerListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerList> _instance;
} _ServerList_default_instance_;
class ServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Server> _instance;
} _Server_default_instance_;
class FallbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FallbackResponse> _instance;
} _FallbackResponse_default_instance_;
}  // namespace v1
}  // namespace lb
}  // namespace grpc
static void InitDefaultsscc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_ClientStats_default_instance_;
    new (ptr) ::grpc::lb::v1::ClientStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::ClientStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,}};

static void InitDefaultsscc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_ClientStatsPerToken_default_instance_;
    new (ptr) ::grpc::lb::v1::ClientStatsPerToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::ClientStatsPerToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {}};

static void InitDefaultsscc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_FallbackResponse_default_instance_;
    new (ptr) ::grpc::lb::v1::FallbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::FallbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {}};

static void InitDefaultsscc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_InitialLoadBalanceRequest_default_instance_;
    new (ptr) ::grpc::lb::v1::InitialLoadBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::InitialLoadBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {}};

static void InitDefaultsscc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_InitialLoadBalanceResponse_default_instance_;
    new (ptr) ::grpc::lb::v1::InitialLoadBalanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::InitialLoadBalanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_LoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_LoadBalanceRequest_default_instance_;
    new (ptr) ::grpc::lb::v1::LoadBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::LoadBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {
      &scc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
      &scc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,}};

static void InitDefaultsscc_info_LoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_LoadBalanceResponse_default_instance_;
    new (ptr) ::grpc::lb::v1::LoadBalanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::LoadBalanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {
      &scc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
      &scc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
      &scc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,}};

static void InitDefaultsscc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_Server_default_instance_;
    new (ptr) ::grpc::lb::v1::Server();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::Server::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {}};

static void InitDefaultsscc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::lb::v1::_ServerList_default_instance_;
    new (ptr) ::grpc::lb::v1::ServerList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::lb::v1::ServerList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto}, {
      &scc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpc_2flb_2fv1_2fload_5fbalancer_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpc_2flb_2fv1_2fload_5fbalancer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpc_2flb_2fv1_2fload_5fbalancer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalanceRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grpc::lb::v1::LoadBalanceRequestDefaultTypeInternal, initial_request_),
  offsetof(::grpc::lb::v1::LoadBalanceRequestDefaultTypeInternal, client_stats_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalanceRequest, load_balance_request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadBalanceRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStatsPerToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStatsPerToken, load_balance_token_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStatsPerToken, num_calls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, num_calls_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, num_calls_finished_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, num_calls_finished_with_client_failed_to_send_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, num_calls_finished_known_received_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ClientStats, calls_finished_with_drop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalanceResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grpc::lb::v1::LoadBalanceResponseDefaultTypeInternal, initial_response_),
  offsetof(::grpc::lb::v1::LoadBalanceResponseDefaultTypeInternal, server_list_),
  offsetof(::grpc::lb::v1::LoadBalanceResponseDefaultTypeInternal, fallback_response_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::LoadBalanceResponse, load_balance_response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadBalanceResponse, load_balancer_delegate_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::InitialLoadBalanceResponse, client_stats_report_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::ServerList, servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Server, ip_address_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Server, port_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Server, load_balance_token_),
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::Server, drop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::lb::v1::FallbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc::lb::v1::LoadBalanceRequest)},
  { 8, -1, sizeof(::grpc::lb::v1::InitialLoadBalanceRequest)},
  { 14, -1, sizeof(::grpc::lb::v1::ClientStatsPerToken)},
  { 21, -1, sizeof(::grpc::lb::v1::ClientStats)},
  { 32, -1, sizeof(::grpc::lb::v1::LoadBalanceResponse)},
  { 41, -1, sizeof(::grpc::lb::v1::InitialLoadBalanceResponse)},
  { 48, -1, sizeof(::grpc::lb::v1::ServerList)},
  { 54, -1, sizeof(::grpc::lb::v1::Server)},
  { 63, -1, sizeof(::grpc::lb::v1::FallbackResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_LoadBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_InitialLoadBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_ClientStatsPerToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_ClientStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_LoadBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_InitialLoadBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_ServerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::lb::v1::_FallbackResponse_default_instance_),
};

const char descriptor_table_protodef_grpc_2flb_2fv1_2fload_5fbalancer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036grpc/lb/v1/load_balancer.proto\022\ngrpc.l"
  "b.v1\032\036google/protobuf/duration.proto\032\037go"
  "ogle/protobuf/timestamp.proto\"\301\001\n\022LoadBa"
  "lanceRequest\022P\n\017initial_request\030\001 \001(\0132%."
  "grpc.lb.v1.InitialLoadBalanceRequestH\000R\016"
  "initialRequest\022<\n\014client_stats\030\002 \001(\0132\027.g"
  "rpc.lb.v1.ClientStatsH\000R\013clientStatsB\033\n\031"
  "load_balance_request_type\"/\n\031InitialLoad"
  "BalanceRequest\022\022\n\004name\030\001 \001(\tR\004name\"`\n\023Cl"
  "ientStatsPerToken\022,\n\022load_balance_token\030"
  "\001 \001(\tR\020loadBalanceToken\022\033\n\tnum_calls\030\002 \001"
  "(\003R\010numCalls\"\260\003\n\013ClientStats\0228\n\ttimestam"
  "p\030\001 \001(\0132\032.google.protobuf.TimestampR\ttim"
  "estamp\022*\n\021num_calls_started\030\002 \001(\003R\017numCa"
  "llsStarted\022,\n\022num_calls_finished\030\003 \001(\003R\020"
  "numCallsFinished\022]\n-num_calls_finished_w"
  "ith_client_failed_to_send\030\006 \001(\003R&numCall"
  "sFinishedWithClientFailedToSend\022H\n!num_c"
  "alls_finished_known_received\030\007 \001(\003R\035numC"
  "allsFinishedKnownReceived\022X\n\030calls_finis"
  "hed_with_drop\030\010 \003(\0132\037.grpc.lb.v1.ClientS"
  "tatsPerTokenR\025callsFinishedWithDropJ\004\010\004\020"
  "\005J\004\010\005\020\006\"\220\002\n\023LoadBalanceResponse\022S\n\020initi"
  "al_response\030\001 \001(\0132&.grpc.lb.v1.InitialLo"
  "adBalanceResponseH\000R\017initialResponse\0229\n\013"
  "server_list\030\002 \001(\0132\026.grpc.lb.v1.ServerLis"
  "tH\000R\nserverList\022K\n\021fallback_response\030\003 \001"
  "(\0132\034.grpc.lb.v1.FallbackResponseH\000R\020fall"
  "backResponseB\034\n\032load_balance_response_ty"
  "pe\"\256\001\n\032InitialLoadBalanceResponse\0224\n\026loa"
  "d_balancer_delegate\030\001 \001(\tR\024loadBalancerD"
  "elegate\022Z\n\034client_stats_report_interval\030"
  "\002 \001(\0132\031.google.protobuf.DurationR\031client"
  "StatsReportInterval\"@\n\nServerList\022,\n\007ser"
  "vers\030\001 \003(\0132\022.grpc.lb.v1.ServerR\007serversJ"
  "\004\010\003\020\004\"\203\001\n\006Server\022\035\n\nip_address\030\001 \001(\014R\tip"
  "Address\022\022\n\004port\030\002 \001(\005R\004port\022,\n\022load_bala"
  "nce_token\030\003 \001(\tR\020loadBalanceToken\022\022\n\004dro"
  "p\030\004 \001(\010R\004dropJ\004\010\005\020\006\"\022\n\020FallbackResponse2"
  "b\n\014LoadBalancer\022R\n\013BalanceLoad\022\036.grpc.lb"
  ".v1.LoadBalanceRequest\032\037.grpc.lb.v1.Load"
  "BalanceResponse(\0010\001BX\n\016io.grpc.grpclbB\021L"
  "oadBalancerProtoP\001Z1google.golang.org/gr"
  "pc/balancer/grpclb/grpc_lb_v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto_sccs[9] = {
  &scc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_LoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_LoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
  &scc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto = {
  false, false, descriptor_table_protodef_grpc_2flb_2fv1_2fload_5fbalancer_2eproto, "grpc/lb/v1/load_balancer.proto", 1757,
  &descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto_once, descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto_sccs, descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto::offsets,
  file_level_metadata_grpc_2flb_2fv1_2fload_5fbalancer_2eproto, 9, file_level_enum_descriptors_grpc_2flb_2fv1_2fload_5fbalancer_2eproto, file_level_service_descriptors_grpc_2flb_2fv1_2fload_5fbalancer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grpc_2flb_2fv1_2fload_5fbalancer_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto)), true);
namespace grpc {
namespace lb {
namespace v1 {

// ===================================================================

void LoadBalanceRequest::InitAsDefaultInstance() {
  ::grpc::lb::v1::_LoadBalanceRequest_default_instance_.initial_request_ = const_cast< ::grpc::lb::v1::InitialLoadBalanceRequest*>(
      ::grpc::lb::v1::InitialLoadBalanceRequest::internal_default_instance());
  ::grpc::lb::v1::_LoadBalanceRequest_default_instance_.client_stats_ = const_cast< ::grpc::lb::v1::ClientStats*>(
      ::grpc::lb::v1::ClientStats::internal_default_instance());
}
class LoadBalanceRequest::_Internal {
 public:
  static const ::grpc::lb::v1::InitialLoadBalanceRequest& initial_request(const LoadBalanceRequest* msg);
  static const ::grpc::lb::v1::ClientStats& client_stats(const LoadBalanceRequest* msg);
};

const ::grpc::lb::v1::InitialLoadBalanceRequest&
LoadBalanceRequest::_Internal::initial_request(const LoadBalanceRequest* msg) {
  return *msg->load_balance_request_type_.initial_request_;
}
const ::grpc::lb::v1::ClientStats&
LoadBalanceRequest::_Internal::client_stats(const LoadBalanceRequest* msg) {
  return *msg->load_balance_request_type_.client_stats_;
}
void LoadBalanceRequest::set_allocated_initial_request(::grpc::lb::v1::InitialLoadBalanceRequest* initial_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_load_balance_request_type();
  if (initial_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initial_request);
    if (message_arena != submessage_arena) {
      initial_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_request, submessage_arena);
    }
    set_has_initial_request();
    load_balance_request_type_.initial_request_ = initial_request;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadBalanceRequest.initial_request)
}
void LoadBalanceRequest::set_allocated_client_stats(::grpc::lb::v1::ClientStats* client_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_load_balance_request_type();
  if (client_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_stats);
    if (message_arena != submessage_arena) {
      client_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_stats, submessage_arena);
    }
    set_has_client_stats();
    load_balance_request_type_.client_stats_ = client_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadBalanceRequest.client_stats)
}
LoadBalanceRequest::LoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.LoadBalanceRequest)
}
LoadBalanceRequest::LoadBalanceRequest(const LoadBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_load_balance_request_type();
  switch (from.load_balance_request_type_case()) {
    case kInitialRequest: {
      _internal_mutable_initial_request()->::grpc::lb::v1::InitialLoadBalanceRequest::MergeFrom(from._internal_initial_request());
      break;
    }
    case kClientStats: {
      _internal_mutable_client_stats()->::grpc::lb::v1::ClientStats::MergeFrom(from._internal_client_stats());
      break;
    }
    case LOAD_BALANCE_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.LoadBalanceRequest)
}

void LoadBalanceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  clear_has_load_balance_request_type();
}

LoadBalanceRequest::~LoadBalanceRequest() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.LoadBalanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_load_balance_request_type()) {
    clear_load_balance_request_type();
  }
}

void LoadBalanceRequest::ArenaDtor(void* object) {
  LoadBalanceRequest* _this = reinterpret_cast< LoadBalanceRequest* >(object);
  (void)_this;
}
void LoadBalanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadBalanceRequest& LoadBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void LoadBalanceRequest::clear_load_balance_request_type() {
// @@protoc_insertion_point(one_of_clear_start:grpc.lb.v1.LoadBalanceRequest)
  switch (load_balance_request_type_case()) {
    case kInitialRequest: {
      if (GetArena() == nullptr) {
        delete load_balance_request_type_.initial_request_;
      }
      break;
    }
    case kClientStats: {
      if (GetArena() == nullptr) {
        delete load_balance_request_type_.client_stats_;
      }
      break;
    }
    case LOAD_BALANCE_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOAD_BALANCE_REQUEST_TYPE_NOT_SET;
}


void LoadBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.LoadBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_load_balance_request_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc.lb.v1.InitialLoadBalanceRequest initial_request = 1[json_name = "initialRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.lb.v1.ClientStats client_stats = 2[json_name = "clientStats"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.LoadBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.lb.v1.InitialLoadBalanceRequest initial_request = 1[json_name = "initialRequest"];
  if (_internal_has_initial_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initial_request(this), target, stream);
  }

  // .grpc.lb.v1.ClientStats client_stats = 2[json_name = "clientStats"];
  if (_internal_has_client_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.LoadBalanceRequest)
  return target;
}

size_t LoadBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.LoadBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (load_balance_request_type_case()) {
    // .grpc.lb.v1.InitialLoadBalanceRequest initial_request = 1[json_name = "initialRequest"];
    case kInitialRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_balance_request_type_.initial_request_);
      break;
    }
    // .grpc.lb.v1.ClientStats client_stats = 2[json_name = "clientStats"];
    case kClientStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_balance_request_type_.client_stats_);
      break;
    }
    case LOAD_BALANCE_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.LoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.LoadBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.LoadBalanceRequest)
    MergeFrom(*source);
  }
}

void LoadBalanceRequest::MergeFrom(const LoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.LoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.load_balance_request_type_case()) {
    case kInitialRequest: {
      _internal_mutable_initial_request()->::grpc::lb::v1::InitialLoadBalanceRequest::MergeFrom(from._internal_initial_request());
      break;
    }
    case kClientStats: {
      _internal_mutable_client_stats()->::grpc::lb::v1::ClientStats::MergeFrom(from._internal_client_stats());
      break;
    }
    case LOAD_BALANCE_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
}

void LoadBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.LoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadBalanceRequest::CopyFrom(const LoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.LoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalanceRequest::IsInitialized() const {
  return true;
}

void LoadBalanceRequest::InternalSwap(LoadBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(load_balance_request_type_, other->load_balance_request_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialLoadBalanceRequest::InitAsDefaultInstance() {
}
class InitialLoadBalanceRequest::_Internal {
 public:
};

InitialLoadBalanceRequest::InitialLoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.InitialLoadBalanceRequest)
}
InitialLoadBalanceRequest::InitialLoadBalanceRequest(const InitialLoadBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.InitialLoadBalanceRequest)
}

void InitialLoadBalanceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InitialLoadBalanceRequest::~InitialLoadBalanceRequest() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.InitialLoadBalanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitialLoadBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitialLoadBalanceRequest::ArenaDtor(void* object) {
  InitialLoadBalanceRequest* _this = reinterpret_cast< InitialLoadBalanceRequest* >(object);
  (void)_this;
}
void InitialLoadBalanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialLoadBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialLoadBalanceRequest& InitialLoadBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialLoadBalanceRequest_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void InitialLoadBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.InitialLoadBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialLoadBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.InitialLoadBalanceRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialLoadBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.InitialLoadBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.InitialLoadBalanceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.InitialLoadBalanceRequest)
  return target;
}

size_t InitialLoadBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.InitialLoadBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialLoadBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.InitialLoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialLoadBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialLoadBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.InitialLoadBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.InitialLoadBalanceRequest)
    MergeFrom(*source);
  }
}

void InitialLoadBalanceRequest::MergeFrom(const InitialLoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.InitialLoadBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void InitialLoadBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.InitialLoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialLoadBalanceRequest::CopyFrom(const InitialLoadBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.InitialLoadBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialLoadBalanceRequest::IsInitialized() const {
  return true;
}

void InitialLoadBalanceRequest::InternalSwap(InitialLoadBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialLoadBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientStatsPerToken::InitAsDefaultInstance() {
}
class ClientStatsPerToken::_Internal {
 public:
};

ClientStatsPerToken::ClientStatsPerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.ClientStatsPerToken)
}
ClientStatsPerToken::ClientStatsPerToken(const ClientStatsPerToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  load_balance_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balance_token().empty()) {
    load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_load_balance_token(),
      GetArena());
  }
  num_calls_ = from.num_calls_;
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.ClientStatsPerToken)
}

void ClientStatsPerToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  load_balance_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_calls_ = PROTOBUF_LONGLONG(0);
}

ClientStatsPerToken::~ClientStatsPerToken() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.ClientStatsPerToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientStatsPerToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  load_balance_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientStatsPerToken::ArenaDtor(void* object) {
  ClientStatsPerToken* _this = reinterpret_cast< ClientStatsPerToken* >(object);
  (void)_this;
}
void ClientStatsPerToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientStatsPerToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientStatsPerToken& ClientStatsPerToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientStatsPerToken_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void ClientStatsPerToken::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.ClientStatsPerToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_balance_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  num_calls_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientStatsPerToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string load_balance_token = 1[json_name = "loadBalanceToken"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_load_balance_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.ClientStatsPerToken.load_balance_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls = 2[json_name = "numCalls"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientStatsPerToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.ClientStatsPerToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_balance_token = 1[json_name = "loadBalanceToken"];
  if (this->load_balance_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balance_token().data(), static_cast<int>(this->_internal_load_balance_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.ClientStatsPerToken.load_balance_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_balance_token(), target);
  }

  // int64 num_calls = 2[json_name = "numCalls"];
  if (this->num_calls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_calls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.ClientStatsPerToken)
  return target;
}

size_t ClientStatsPerToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.ClientStatsPerToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string load_balance_token = 1[json_name = "loadBalanceToken"];
  if (this->load_balance_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balance_token());
  }

  // int64 num_calls = 2[json_name = "numCalls"];
  if (this->num_calls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientStatsPerToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.ClientStatsPerToken)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientStatsPerToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientStatsPerToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.ClientStatsPerToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.ClientStatsPerToken)
    MergeFrom(*source);
  }
}

void ClientStatsPerToken::MergeFrom(const ClientStatsPerToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.ClientStatsPerToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.load_balance_token().size() > 0) {
    _internal_set_load_balance_token(from._internal_load_balance_token());
  }
  if (from.num_calls() != 0) {
    _internal_set_num_calls(from._internal_num_calls());
  }
}

void ClientStatsPerToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.ClientStatsPerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStatsPerToken::CopyFrom(const ClientStatsPerToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.ClientStatsPerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatsPerToken::IsInitialized() const {
  return true;
}

void ClientStatsPerToken::InternalSwap(ClientStatsPerToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  load_balance_token_.Swap(&other->load_balance_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(num_calls_, other->num_calls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientStatsPerToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientStats::InitAsDefaultInstance() {
  ::grpc::lb::v1::_ClientStats_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ClientStats::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ClientStats* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ClientStats::_Internal::timestamp(const ClientStats* msg) {
  return *msg->timestamp_;
}
void ClientStats::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ClientStats::ClientStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  calls_finished_with_drop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.ClientStats)
}
ClientStats::ClientStats(const ClientStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      calls_finished_with_drop_(from.calls_finished_with_drop_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&num_calls_started_, &from.num_calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_calls_finished_known_received_) -
    reinterpret_cast<char*>(&num_calls_started_)) + sizeof(num_calls_finished_known_received_));
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.ClientStats)
}

void ClientStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_calls_finished_known_received_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(num_calls_finished_known_received_));
}

ClientStats::~ClientStats() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.ClientStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void ClientStats::ArenaDtor(void* object) {
  ClientStats* _this = reinterpret_cast< ClientStats* >(object);
  (void)_this;
}
void ClientStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientStats& ClientStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientStats_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void ClientStats::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.ClientStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calls_finished_with_drop_.Clear();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&num_calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_calls_finished_known_received_) -
      reinterpret_cast<char*>(&num_calls_started_)) + sizeof(num_calls_finished_known_received_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_started = 2[json_name = "numCallsStarted"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_calls_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished = 3[json_name = "numCallsFinished"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_calls_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished_with_client_failed_to_send = 6[json_name = "numCallsFinishedWithClientFailedToSend"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_calls_finished_with_client_failed_to_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_calls_finished_known_received = 7[json_name = "numCallsFinishedKnownReceived"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_calls_finished_known_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.lb.v1.ClientStatsPerToken calls_finished_with_drop = 8[json_name = "callsFinishedWithDrop"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calls_finished_with_drop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.ClientStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // int64 num_calls_started = 2[json_name = "numCallsStarted"];
  if (this->num_calls_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_calls_started(), target);
  }

  // int64 num_calls_finished = 3[json_name = "numCallsFinished"];
  if (this->num_calls_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_calls_finished(), target);
  }

  // int64 num_calls_finished_with_client_failed_to_send = 6[json_name = "numCallsFinishedWithClientFailedToSend"];
  if (this->num_calls_finished_with_client_failed_to_send() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_num_calls_finished_with_client_failed_to_send(), target);
  }

  // int64 num_calls_finished_known_received = 7[json_name = "numCallsFinishedKnownReceived"];
  if (this->num_calls_finished_known_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_num_calls_finished_known_received(), target);
  }

  // repeated .grpc.lb.v1.ClientStatsPerToken calls_finished_with_drop = 8[json_name = "callsFinishedWithDrop"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calls_finished_with_drop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_calls_finished_with_drop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.ClientStats)
  return target;
}

size_t ClientStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.ClientStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.lb.v1.ClientStatsPerToken calls_finished_with_drop = 8[json_name = "callsFinishedWithDrop"];
  total_size += 1UL * this->_internal_calls_finished_with_drop_size();
  for (const auto& msg : this->calls_finished_with_drop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int64 num_calls_started = 2[json_name = "numCallsStarted"];
  if (this->num_calls_started() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_started());
  }

  // int64 num_calls_finished = 3[json_name = "numCallsFinished"];
  if (this->num_calls_finished() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished());
  }

  // int64 num_calls_finished_with_client_failed_to_send = 6[json_name = "numCallsFinishedWithClientFailedToSend"];
  if (this->num_calls_finished_with_client_failed_to_send() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished_with_client_failed_to_send());
  }

  // int64 num_calls_finished_known_received = 7[json_name = "numCallsFinishedKnownReceived"];
  if (this->num_calls_finished_known_received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_calls_finished_known_received());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.ClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.ClientStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.ClientStats)
    MergeFrom(*source);
  }
}

void ClientStats::MergeFrom(const ClientStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.ClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calls_finished_with_drop_.MergeFrom(from.calls_finished_with_drop_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.num_calls_started() != 0) {
    _internal_set_num_calls_started(from._internal_num_calls_started());
  }
  if (from.num_calls_finished() != 0) {
    _internal_set_num_calls_finished(from._internal_num_calls_finished());
  }
  if (from.num_calls_finished_with_client_failed_to_send() != 0) {
    _internal_set_num_calls_finished_with_client_failed_to_send(from._internal_num_calls_finished_with_client_failed_to_send());
  }
  if (from.num_calls_finished_known_received() != 0) {
    _internal_set_num_calls_finished_known_received(from._internal_num_calls_finished_known_received());
  }
}

void ClientStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.ClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStats::CopyFrom(const ClientStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.ClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStats::IsInitialized() const {
  return true;
}

void ClientStats::InternalSwap(ClientStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  calls_finished_with_drop_.InternalSwap(&other->calls_finished_with_drop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientStats, num_calls_finished_known_received_)
      + sizeof(ClientStats::num_calls_finished_known_received_)
      - PROTOBUF_FIELD_OFFSET(ClientStats, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadBalanceResponse::InitAsDefaultInstance() {
  ::grpc::lb::v1::_LoadBalanceResponse_default_instance_.initial_response_ = const_cast< ::grpc::lb::v1::InitialLoadBalanceResponse*>(
      ::grpc::lb::v1::InitialLoadBalanceResponse::internal_default_instance());
  ::grpc::lb::v1::_LoadBalanceResponse_default_instance_.server_list_ = const_cast< ::grpc::lb::v1::ServerList*>(
      ::grpc::lb::v1::ServerList::internal_default_instance());
  ::grpc::lb::v1::_LoadBalanceResponse_default_instance_.fallback_response_ = const_cast< ::grpc::lb::v1::FallbackResponse*>(
      ::grpc::lb::v1::FallbackResponse::internal_default_instance());
}
class LoadBalanceResponse::_Internal {
 public:
  static const ::grpc::lb::v1::InitialLoadBalanceResponse& initial_response(const LoadBalanceResponse* msg);
  static const ::grpc::lb::v1::ServerList& server_list(const LoadBalanceResponse* msg);
  static const ::grpc::lb::v1::FallbackResponse& fallback_response(const LoadBalanceResponse* msg);
};

const ::grpc::lb::v1::InitialLoadBalanceResponse&
LoadBalanceResponse::_Internal::initial_response(const LoadBalanceResponse* msg) {
  return *msg->load_balance_response_type_.initial_response_;
}
const ::grpc::lb::v1::ServerList&
LoadBalanceResponse::_Internal::server_list(const LoadBalanceResponse* msg) {
  return *msg->load_balance_response_type_.server_list_;
}
const ::grpc::lb::v1::FallbackResponse&
LoadBalanceResponse::_Internal::fallback_response(const LoadBalanceResponse* msg) {
  return *msg->load_balance_response_type_.fallback_response_;
}
void LoadBalanceResponse::set_allocated_initial_response(::grpc::lb::v1::InitialLoadBalanceResponse* initial_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_load_balance_response_type();
  if (initial_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initial_response);
    if (message_arena != submessage_arena) {
      initial_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_response, submessage_arena);
    }
    set_has_initial_response();
    load_balance_response_type_.initial_response_ = initial_response;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadBalanceResponse.initial_response)
}
void LoadBalanceResponse::set_allocated_server_list(::grpc::lb::v1::ServerList* server_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_load_balance_response_type();
  if (server_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_list);
    if (message_arena != submessage_arena) {
      server_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_list, submessage_arena);
    }
    set_has_server_list();
    load_balance_response_type_.server_list_ = server_list;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadBalanceResponse.server_list)
}
void LoadBalanceResponse::set_allocated_fallback_response(::grpc::lb::v1::FallbackResponse* fallback_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_load_balance_response_type();
  if (fallback_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fallback_response);
    if (message_arena != submessage_arena) {
      fallback_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fallback_response, submessage_arena);
    }
    set_has_fallback_response();
    load_balance_response_type_.fallback_response_ = fallback_response;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.LoadBalanceResponse.fallback_response)
}
LoadBalanceResponse::LoadBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.LoadBalanceResponse)
}
LoadBalanceResponse::LoadBalanceResponse(const LoadBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_load_balance_response_type();
  switch (from.load_balance_response_type_case()) {
    case kInitialResponse: {
      _internal_mutable_initial_response()->::grpc::lb::v1::InitialLoadBalanceResponse::MergeFrom(from._internal_initial_response());
      break;
    }
    case kServerList: {
      _internal_mutable_server_list()->::grpc::lb::v1::ServerList::MergeFrom(from._internal_server_list());
      break;
    }
    case kFallbackResponse: {
      _internal_mutable_fallback_response()->::grpc::lb::v1::FallbackResponse::MergeFrom(from._internal_fallback_response());
      break;
    }
    case LOAD_BALANCE_RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.LoadBalanceResponse)
}

void LoadBalanceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  clear_has_load_balance_response_type();
}

LoadBalanceResponse::~LoadBalanceResponse() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.LoadBalanceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_load_balance_response_type()) {
    clear_load_balance_response_type();
  }
}

void LoadBalanceResponse::ArenaDtor(void* object) {
  LoadBalanceResponse* _this = reinterpret_cast< LoadBalanceResponse* >(object);
  (void)_this;
}
void LoadBalanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadBalanceResponse& LoadBalanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void LoadBalanceResponse::clear_load_balance_response_type() {
// @@protoc_insertion_point(one_of_clear_start:grpc.lb.v1.LoadBalanceResponse)
  switch (load_balance_response_type_case()) {
    case kInitialResponse: {
      if (GetArena() == nullptr) {
        delete load_balance_response_type_.initial_response_;
      }
      break;
    }
    case kServerList: {
      if (GetArena() == nullptr) {
        delete load_balance_response_type_.server_list_;
      }
      break;
    }
    case kFallbackResponse: {
      if (GetArena() == nullptr) {
        delete load_balance_response_type_.fallback_response_;
      }
      break;
    }
    case LOAD_BALANCE_RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOAD_BALANCE_RESPONSE_TYPE_NOT_SET;
}


void LoadBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.LoadBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_load_balance_response_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc.lb.v1.InitialLoadBalanceResponse initial_response = 1[json_name = "initialResponse"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.lb.v1.ServerList server_list = 2[json_name = "serverList"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.lb.v1.FallbackResponse fallback_response = 3[json_name = "fallbackResponse"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.LoadBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.lb.v1.InitialLoadBalanceResponse initial_response = 1[json_name = "initialResponse"];
  if (_internal_has_initial_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initial_response(this), target, stream);
  }

  // .grpc.lb.v1.ServerList server_list = 2[json_name = "serverList"];
  if (_internal_has_server_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_list(this), target, stream);
  }

  // .grpc.lb.v1.FallbackResponse fallback_response = 3[json_name = "fallbackResponse"];
  if (_internal_has_fallback_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fallback_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.LoadBalanceResponse)
  return target;
}

size_t LoadBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.LoadBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (load_balance_response_type_case()) {
    // .grpc.lb.v1.InitialLoadBalanceResponse initial_response = 1[json_name = "initialResponse"];
    case kInitialResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_balance_response_type_.initial_response_);
      break;
    }
    // .grpc.lb.v1.ServerList server_list = 2[json_name = "serverList"];
    case kServerList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_balance_response_type_.server_list_);
      break;
    }
    // .grpc.lb.v1.FallbackResponse fallback_response = 3[json_name = "fallbackResponse"];
    case kFallbackResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_balance_response_type_.fallback_response_);
      break;
    }
    case LOAD_BALANCE_RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.LoadBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.LoadBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.LoadBalanceResponse)
    MergeFrom(*source);
  }
}

void LoadBalanceResponse::MergeFrom(const LoadBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.LoadBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.load_balance_response_type_case()) {
    case kInitialResponse: {
      _internal_mutable_initial_response()->::grpc::lb::v1::InitialLoadBalanceResponse::MergeFrom(from._internal_initial_response());
      break;
    }
    case kServerList: {
      _internal_mutable_server_list()->::grpc::lb::v1::ServerList::MergeFrom(from._internal_server_list());
      break;
    }
    case kFallbackResponse: {
      _internal_mutable_fallback_response()->::grpc::lb::v1::FallbackResponse::MergeFrom(from._internal_fallback_response());
      break;
    }
    case LOAD_BALANCE_RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
}

void LoadBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.LoadBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadBalanceResponse::CopyFrom(const LoadBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.LoadBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalanceResponse::IsInitialized() const {
  return true;
}

void LoadBalanceResponse::InternalSwap(LoadBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(load_balance_response_type_, other->load_balance_response_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialLoadBalanceResponse::InitAsDefaultInstance() {
  ::grpc::lb::v1::_InitialLoadBalanceResponse_default_instance_._instance.get_mutable()->client_stats_report_interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class InitialLoadBalanceResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& client_stats_report_interval(const InitialLoadBalanceResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
InitialLoadBalanceResponse::_Internal::client_stats_report_interval(const InitialLoadBalanceResponse* msg) {
  return *msg->client_stats_report_interval_;
}
void InitialLoadBalanceResponse::clear_client_stats_report_interval() {
  if (GetArena() == nullptr && client_stats_report_interval_ != nullptr) {
    delete client_stats_report_interval_;
  }
  client_stats_report_interval_ = nullptr;
}
InitialLoadBalanceResponse::InitialLoadBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.InitialLoadBalanceResponse)
}
InitialLoadBalanceResponse::InitialLoadBalanceResponse(const InitialLoadBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  load_balancer_delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balancer_delegate().empty()) {
    load_balancer_delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_load_balancer_delegate(),
      GetArena());
  }
  if (from._internal_has_client_stats_report_interval()) {
    client_stats_report_interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.client_stats_report_interval_);
  } else {
    client_stats_report_interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.InitialLoadBalanceResponse)
}

void InitialLoadBalanceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  load_balancer_delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_stats_report_interval_ = nullptr;
}

InitialLoadBalanceResponse::~InitialLoadBalanceResponse() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.InitialLoadBalanceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitialLoadBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  load_balancer_delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_stats_report_interval_;
}

void InitialLoadBalanceResponse::ArenaDtor(void* object) {
  InitialLoadBalanceResponse* _this = reinterpret_cast< InitialLoadBalanceResponse* >(object);
  (void)_this;
}
void InitialLoadBalanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialLoadBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialLoadBalanceResponse& InitialLoadBalanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialLoadBalanceResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void InitialLoadBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.InitialLoadBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_balancer_delegate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && client_stats_report_interval_ != nullptr) {
    delete client_stats_report_interval_;
  }
  client_stats_report_interval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialLoadBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string load_balancer_delegate = 1[json_name = "loadBalancerDelegate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_load_balancer_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration client_stats_report_interval = 2[json_name = "clientStatsReportInterval"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_stats_report_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialLoadBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.InitialLoadBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_balancer_delegate = 1[json_name = "loadBalancerDelegate"];
  if (this->load_balancer_delegate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balancer_delegate().data(), static_cast<int>(this->_internal_load_balancer_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_balancer_delegate(), target);
  }

  // .google.protobuf.Duration client_stats_report_interval = 2[json_name = "clientStatsReportInterval"];
  if (this->has_client_stats_report_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_stats_report_interval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.InitialLoadBalanceResponse)
  return target;
}

size_t InitialLoadBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.InitialLoadBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string load_balancer_delegate = 1[json_name = "loadBalancerDelegate"];
  if (this->load_balancer_delegate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balancer_delegate());
  }

  // .google.protobuf.Duration client_stats_report_interval = 2[json_name = "clientStatsReportInterval"];
  if (this->has_client_stats_report_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_stats_report_interval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialLoadBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.InitialLoadBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialLoadBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialLoadBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.InitialLoadBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.InitialLoadBalanceResponse)
    MergeFrom(*source);
  }
}

void InitialLoadBalanceResponse::MergeFrom(const InitialLoadBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.InitialLoadBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.load_balancer_delegate().size() > 0) {
    _internal_set_load_balancer_delegate(from._internal_load_balancer_delegate());
  }
  if (from.has_client_stats_report_interval()) {
    _internal_mutable_client_stats_report_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_client_stats_report_interval());
  }
}

void InitialLoadBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.InitialLoadBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialLoadBalanceResponse::CopyFrom(const InitialLoadBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.InitialLoadBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialLoadBalanceResponse::IsInitialized() const {
  return true;
}

void InitialLoadBalanceResponse::InternalSwap(InitialLoadBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  load_balancer_delegate_.Swap(&other->load_balancer_delegate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(client_stats_report_interval_, other->client_stats_report_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialLoadBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerList::InitAsDefaultInstance() {
}
class ServerList::_Internal {
 public:
};

ServerList::ServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.ServerList)
}
ServerList::ServerList(const ServerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.ServerList)
}

void ServerList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
}

ServerList::~ServerList() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.ServerList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerList::ArenaDtor(void* object) {
  ServerList* _this = reinterpret_cast< ServerList* >(object);
  (void)_this;
}
void ServerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerList& ServerList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerList_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void ServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.ServerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .grpc.lb.v1.Server servers = 1[json_name = "servers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.ServerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.lb.v1.Server servers = 1[json_name = "servers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.ServerList)
  return target;
}

size_t ServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.ServerList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.lb.v1.Server servers = 1[json_name = "servers"];
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.ServerList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.ServerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.ServerList)
    MergeFrom(*source);
  }
}

void ServerList::MergeFrom(const ServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.ServerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void ServerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.ServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerList::CopyFrom(const ServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.ServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  return true;
}

void ServerList::InternalSwap(ServerList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Server::InitAsDefaultInstance() {
}
class Server::_Internal {
 public:
};

Server::Server(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  load_balance_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_balance_token().empty()) {
    load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_load_balance_token(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_) -
    reinterpret_cast<char*>(&port_)) + sizeof(drop_));
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.Server)
}

void Server::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_balance_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_) -
      reinterpret_cast<char*>(&port_)) + sizeof(drop_));
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.Server)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Server::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_balance_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Server::ArenaDtor(void* object) {
  Server* _this = reinterpret_cast< Server* >(object);
  (void)_this;
}
void Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Server& Server::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Server_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  load_balance_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_) -
      reinterpret_cast<char*>(&port_)) + sizeof(drop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ip_address = 1[json_name = "ipAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2[json_name = "port"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string load_balance_token = 3[json_name = "loadBalanceToken"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_load_balance_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.lb.v1.Server.load_balance_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool drop = 4[json_name = "drop"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1[json_name = "ipAddress"];
  if (this->ip_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // int32 port = 2[json_name = "port"];
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // string load_balance_token = 3[json_name = "loadBalanceToken"];
  if (this->load_balance_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balance_token().data(), static_cast<int>(this->_internal_load_balance_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.lb.v1.Server.load_balance_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_load_balance_token(), target);
  }

  // bool drop = 4[json_name = "drop"];
  if (this->drop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_drop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip_address = 1[json_name = "ipAddress"];
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip_address());
  }

  // string load_balance_token = 3[json_name = "loadBalanceToken"];
  if (this->load_balance_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balance_token());
  }

  // int32 port = 2[json_name = "port"];
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool drop = 4[json_name = "drop"];
  if (this->drop() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const Server* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.Server)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.Server)
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.load_balance_token().size() > 0) {
    _internal_set_load_balance_token(from._internal_load_balance_token());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.drop() != 0) {
    _internal_set_drop(from._internal_drop());
  }
}

void Server::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  load_balance_token_.Swap(&other->load_balance_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Server, drop_)
      + sizeof(Server::drop_)
      - PROTOBUF_FIELD_OFFSET(Server, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FallbackResponse::InitAsDefaultInstance() {
}
class FallbackResponse::_Internal {
 public:
};

FallbackResponse::FallbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.lb.v1.FallbackResponse)
}
FallbackResponse::FallbackResponse(const FallbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grpc.lb.v1.FallbackResponse)
}

void FallbackResponse::SharedCtor() {
}

FallbackResponse::~FallbackResponse() {
  // @@protoc_insertion_point(destructor:grpc.lb.v1.FallbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FallbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FallbackResponse::ArenaDtor(void* object) {
  FallbackResponse* _this = reinterpret_cast< FallbackResponse* >(object);
  (void)_this;
}
void FallbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FallbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FallbackResponse& FallbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FallbackResponse_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.base);
  return *internal_default_instance();
}


void FallbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.lb.v1.FallbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FallbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FallbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.lb.v1.FallbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.lb.v1.FallbackResponse)
  return target;
}

size_t FallbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.lb.v1.FallbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FallbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.lb.v1.FallbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FallbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FallbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.lb.v1.FallbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.lb.v1.FallbackResponse)
    MergeFrom(*source);
  }
}

void FallbackResponse::MergeFrom(const FallbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.lb.v1.FallbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FallbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.lb.v1.FallbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FallbackResponse::CopyFrom(const FallbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.lb.v1.FallbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallbackResponse::IsInitialized() const {
  return true;
}

void FallbackResponse::InternalSwap(FallbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FallbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lb
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::LoadBalanceRequest* Arena::CreateMaybeMessage< ::grpc::lb::v1::LoadBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::LoadBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::InitialLoadBalanceRequest* Arena::CreateMaybeMessage< ::grpc::lb::v1::InitialLoadBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::InitialLoadBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::ClientStatsPerToken* Arena::CreateMaybeMessage< ::grpc::lb::v1::ClientStatsPerToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::ClientStatsPerToken >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::ClientStats* Arena::CreateMaybeMessage< ::grpc::lb::v1::ClientStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::ClientStats >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::LoadBalanceResponse* Arena::CreateMaybeMessage< ::grpc::lb::v1::LoadBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::LoadBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::InitialLoadBalanceResponse* Arena::CreateMaybeMessage< ::grpc::lb::v1::InitialLoadBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::InitialLoadBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::ServerList* Arena::CreateMaybeMessage< ::grpc::lb::v1::ServerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::ServerList >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::Server* Arena::CreateMaybeMessage< ::grpc::lb::v1::Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::Server >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::lb::v1::FallbackResponse* Arena::CreateMaybeMessage< ::grpc::lb::v1::FallbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::lb::v1::FallbackResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
