// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/lb/v1/load_balancer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_2flb_2fv1_2fload_5fbalancer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpc_2flb_2fv1_2fload_5fbalancer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpc_2flb_2fv1_2fload_5fbalancer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
namespace grpc {
namespace lb {
namespace v1 {
class ClientStats;
class ClientStatsDefaultTypeInternal;
extern ClientStatsDefaultTypeInternal _ClientStats_default_instance_;
class ClientStatsPerToken;
class ClientStatsPerTokenDefaultTypeInternal;
extern ClientStatsPerTokenDefaultTypeInternal _ClientStatsPerToken_default_instance_;
class FallbackResponse;
class FallbackResponseDefaultTypeInternal;
extern FallbackResponseDefaultTypeInternal _FallbackResponse_default_instance_;
class InitialLoadBalanceRequest;
class InitialLoadBalanceRequestDefaultTypeInternal;
extern InitialLoadBalanceRequestDefaultTypeInternal _InitialLoadBalanceRequest_default_instance_;
class InitialLoadBalanceResponse;
class InitialLoadBalanceResponseDefaultTypeInternal;
extern InitialLoadBalanceResponseDefaultTypeInternal _InitialLoadBalanceResponse_default_instance_;
class LoadBalanceRequest;
class LoadBalanceRequestDefaultTypeInternal;
extern LoadBalanceRequestDefaultTypeInternal _LoadBalanceRequest_default_instance_;
class LoadBalanceResponse;
class LoadBalanceResponseDefaultTypeInternal;
extern LoadBalanceResponseDefaultTypeInternal _LoadBalanceResponse_default_instance_;
class Server;
class ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
class ServerList;
class ServerListDefaultTypeInternal;
extern ServerListDefaultTypeInternal _ServerList_default_instance_;
}  // namespace v1
}  // namespace lb
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc::lb::v1::ClientStats* Arena::CreateMaybeMessage<::grpc::lb::v1::ClientStats>(Arena*);
template<> ::grpc::lb::v1::ClientStatsPerToken* Arena::CreateMaybeMessage<::grpc::lb::v1::ClientStatsPerToken>(Arena*);
template<> ::grpc::lb::v1::FallbackResponse* Arena::CreateMaybeMessage<::grpc::lb::v1::FallbackResponse>(Arena*);
template<> ::grpc::lb::v1::InitialLoadBalanceRequest* Arena::CreateMaybeMessage<::grpc::lb::v1::InitialLoadBalanceRequest>(Arena*);
template<> ::grpc::lb::v1::InitialLoadBalanceResponse* Arena::CreateMaybeMessage<::grpc::lb::v1::InitialLoadBalanceResponse>(Arena*);
template<> ::grpc::lb::v1::LoadBalanceRequest* Arena::CreateMaybeMessage<::grpc::lb::v1::LoadBalanceRequest>(Arena*);
template<> ::grpc::lb::v1::LoadBalanceResponse* Arena::CreateMaybeMessage<::grpc::lb::v1::LoadBalanceResponse>(Arena*);
template<> ::grpc::lb::v1::Server* Arena::CreateMaybeMessage<::grpc::lb::v1::Server>(Arena*);
template<> ::grpc::lb::v1::ServerList* Arena::CreateMaybeMessage<::grpc::lb::v1::ServerList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace lb {
namespace v1 {

// ===================================================================

class LoadBalanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.LoadBalanceRequest) */ {
 public:
  inline LoadBalanceRequest() : LoadBalanceRequest(nullptr) {};
  virtual ~LoadBalanceRequest();

  LoadBalanceRequest(const LoadBalanceRequest& from);
  LoadBalanceRequest(LoadBalanceRequest&& from) noexcept
    : LoadBalanceRequest() {
    *this = ::std::move(from);
  }

  inline LoadBalanceRequest& operator=(const LoadBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadBalanceRequest& operator=(LoadBalanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadBalanceRequest& default_instance();

  enum LoadBalanceRequestTypeCase {
    kInitialRequest = 1,
    kClientStats = 2,
    LOAD_BALANCE_REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const LoadBalanceRequest*>(
               &_LoadBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadBalanceRequest& a, LoadBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadBalanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadBalanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadBalanceRequest* New() const final {
    return CreateMaybeMessage<LoadBalanceRequest>(nullptr);
  }

  LoadBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadBalanceRequest& from);
  void MergeFrom(const LoadBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.LoadBalanceRequest";
  }
  protected:
  explicit LoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialRequestFieldNumber = 1,
    kClientStatsFieldNumber = 2,
  };
  // .grpc.lb.v1.InitialLoadBalanceRequest initial_request = 1[json_name = "initialRequest"];
  bool has_initial_request() const;
  private:
  bool _internal_has_initial_request() const;
  public:
  void clear_initial_request();
  const ::grpc::lb::v1::InitialLoadBalanceRequest& initial_request() const;
  ::grpc::lb::v1::InitialLoadBalanceRequest* release_initial_request();
  ::grpc::lb::v1::InitialLoadBalanceRequest* mutable_initial_request();
  void set_allocated_initial_request(::grpc::lb::v1::InitialLoadBalanceRequest* initial_request);
  private:
  const ::grpc::lb::v1::InitialLoadBalanceRequest& _internal_initial_request() const;
  ::grpc::lb::v1::InitialLoadBalanceRequest* _internal_mutable_initial_request();
  public:
  void unsafe_arena_set_allocated_initial_request(
      ::grpc::lb::v1::InitialLoadBalanceRequest* initial_request);
  ::grpc::lb::v1::InitialLoadBalanceRequest* unsafe_arena_release_initial_request();

  // .grpc.lb.v1.ClientStats client_stats = 2[json_name = "clientStats"];
  bool has_client_stats() const;
  private:
  bool _internal_has_client_stats() const;
  public:
  void clear_client_stats();
  const ::grpc::lb::v1::ClientStats& client_stats() const;
  ::grpc::lb::v1::ClientStats* release_client_stats();
  ::grpc::lb::v1::ClientStats* mutable_client_stats();
  void set_allocated_client_stats(::grpc::lb::v1::ClientStats* client_stats);
  private:
  const ::grpc::lb::v1::ClientStats& _internal_client_stats() const;
  ::grpc::lb::v1::ClientStats* _internal_mutable_client_stats();
  public:
  void unsafe_arena_set_allocated_client_stats(
      ::grpc::lb::v1::ClientStats* client_stats);
  ::grpc::lb::v1::ClientStats* unsafe_arena_release_client_stats();

  void clear_load_balance_request_type();
  LoadBalanceRequestTypeCase load_balance_request_type_case() const;
  // @@protoc_insertion_point(class_scope:grpc.lb.v1.LoadBalanceRequest)
 private:
  class _Internal;
  void set_has_initial_request();
  void set_has_client_stats();

  inline bool has_load_balance_request_type() const;
  inline void clear_has_load_balance_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union LoadBalanceRequestTypeUnion {
    LoadBalanceRequestTypeUnion() {}
    ::grpc::lb::v1::InitialLoadBalanceRequest* initial_request_;
    ::grpc::lb::v1::ClientStats* client_stats_;
  } load_balance_request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class InitialLoadBalanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.InitialLoadBalanceRequest) */ {
 public:
  inline InitialLoadBalanceRequest() : InitialLoadBalanceRequest(nullptr) {};
  virtual ~InitialLoadBalanceRequest();

  InitialLoadBalanceRequest(const InitialLoadBalanceRequest& from);
  InitialLoadBalanceRequest(InitialLoadBalanceRequest&& from) noexcept
    : InitialLoadBalanceRequest() {
    *this = ::std::move(from);
  }

  inline InitialLoadBalanceRequest& operator=(const InitialLoadBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialLoadBalanceRequest& operator=(InitialLoadBalanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitialLoadBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialLoadBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const InitialLoadBalanceRequest*>(
               &_InitialLoadBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitialLoadBalanceRequest& a, InitialLoadBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialLoadBalanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialLoadBalanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialLoadBalanceRequest* New() const final {
    return CreateMaybeMessage<InitialLoadBalanceRequest>(nullptr);
  }

  InitialLoadBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialLoadBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitialLoadBalanceRequest& from);
  void MergeFrom(const InitialLoadBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialLoadBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.InitialLoadBalanceRequest";
  }
  protected:
  explicit InitialLoadBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.InitialLoadBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class ClientStatsPerToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.ClientStatsPerToken) */ {
 public:
  inline ClientStatsPerToken() : ClientStatsPerToken(nullptr) {};
  virtual ~ClientStatsPerToken();

  ClientStatsPerToken(const ClientStatsPerToken& from);
  ClientStatsPerToken(ClientStatsPerToken&& from) noexcept
    : ClientStatsPerToken() {
    *this = ::std::move(from);
  }

  inline ClientStatsPerToken& operator=(const ClientStatsPerToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStatsPerToken& operator=(ClientStatsPerToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStatsPerToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatsPerToken* internal_default_instance() {
    return reinterpret_cast<const ClientStatsPerToken*>(
               &_ClientStatsPerToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientStatsPerToken& a, ClientStatsPerToken& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientStatsPerToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientStatsPerToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientStatsPerToken* New() const final {
    return CreateMaybeMessage<ClientStatsPerToken>(nullptr);
  }

  ClientStatsPerToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatsPerToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStatsPerToken& from);
  void MergeFrom(const ClientStatsPerToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStatsPerToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.ClientStatsPerToken";
  }
  protected:
  explicit ClientStatsPerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadBalanceTokenFieldNumber = 1,
    kNumCallsFieldNumber = 2,
  };
  // string load_balance_token = 1[json_name = "loadBalanceToken"];
  void clear_load_balance_token();
  const std::string& load_balance_token() const;
  void set_load_balance_token(const std::string& value);
  void set_load_balance_token(std::string&& value);
  void set_load_balance_token(const char* value);
  void set_load_balance_token(const char* value, size_t size);
  std::string* mutable_load_balance_token();
  std::string* release_load_balance_token();
  void set_allocated_load_balance_token(std::string* load_balance_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_load_balance_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_load_balance_token(
      std::string* load_balance_token);
  private:
  const std::string& _internal_load_balance_token() const;
  void _internal_set_load_balance_token(const std::string& value);
  std::string* _internal_mutable_load_balance_token();
  public:

  // int64 num_calls = 2[json_name = "numCalls"];
  void clear_num_calls();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls() const;
  void set_num_calls(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls() const;
  void _internal_set_num_calls(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.ClientStatsPerToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balance_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class ClientStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.ClientStats) */ {
 public:
  inline ClientStats() : ClientStats(nullptr) {};
  virtual ~ClientStats();

  ClientStats(const ClientStats& from);
  ClientStats(ClientStats&& from) noexcept
    : ClientStats() {
    *this = ::std::move(from);
  }

  inline ClientStats& operator=(const ClientStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStats& operator=(ClientStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStats* internal_default_instance() {
    return reinterpret_cast<const ClientStats*>(
               &_ClientStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientStats& a, ClientStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientStats* New() const final {
    return CreateMaybeMessage<ClientStats>(nullptr);
  }

  ClientStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientStats& from);
  void MergeFrom(const ClientStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.ClientStats";
  }
  protected:
  explicit ClientStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallsFinishedWithDropFieldNumber = 8,
    kTimestampFieldNumber = 1,
    kNumCallsStartedFieldNumber = 2,
    kNumCallsFinishedFieldNumber = 3,
    kNumCallsFinishedWithClientFailedToSendFieldNumber = 6,
    kNumCallsFinishedKnownReceivedFieldNumber = 7,
  };
  // repeated .grpc.lb.v1.ClientStatsPerToken calls_finished_with_drop = 8[json_name = "callsFinishedWithDrop"];
  int calls_finished_with_drop_size() const;
  private:
  int _internal_calls_finished_with_drop_size() const;
  public:
  void clear_calls_finished_with_drop();
  ::grpc::lb::v1::ClientStatsPerToken* mutable_calls_finished_with_drop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::ClientStatsPerToken >*
      mutable_calls_finished_with_drop();
  private:
  const ::grpc::lb::v1::ClientStatsPerToken& _internal_calls_finished_with_drop(int index) const;
  ::grpc::lb::v1::ClientStatsPerToken* _internal_add_calls_finished_with_drop();
  public:
  const ::grpc::lb::v1::ClientStatsPerToken& calls_finished_with_drop(int index) const;
  ::grpc::lb::v1::ClientStatsPerToken* add_calls_finished_with_drop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::ClientStatsPerToken >&
      calls_finished_with_drop() const;

  // .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // int64 num_calls_started = 2[json_name = "numCallsStarted"];
  void clear_num_calls_started();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_started() const;
  void set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_started() const;
  void _internal_set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_finished = 3[json_name = "numCallsFinished"];
  void clear_num_calls_finished();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished() const;
  void set_num_calls_finished(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished() const;
  void _internal_set_num_calls_finished(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_finished_with_client_failed_to_send = 6[json_name = "numCallsFinishedWithClientFailedToSend"];
  void clear_num_calls_finished_with_client_failed_to_send();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_client_failed_to_send() const;
  void set_num_calls_finished_with_client_failed_to_send(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished_with_client_failed_to_send() const;
  void _internal_set_num_calls_finished_with_client_failed_to_send(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_calls_finished_known_received = 7[json_name = "numCallsFinishedKnownReceived"];
  void clear_num_calls_finished_known_received();
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_known_received() const;
  void set_num_calls_finished_known_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_calls_finished_known_received() const;
  void _internal_set_num_calls_finished_known_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.ClientStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::ClientStatsPerToken > calls_finished_with_drop_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_started_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_with_client_failed_to_send_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_calls_finished_known_received_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class LoadBalanceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.LoadBalanceResponse) */ {
 public:
  inline LoadBalanceResponse() : LoadBalanceResponse(nullptr) {};
  virtual ~LoadBalanceResponse();

  LoadBalanceResponse(const LoadBalanceResponse& from);
  LoadBalanceResponse(LoadBalanceResponse&& from) noexcept
    : LoadBalanceResponse() {
    *this = ::std::move(from);
  }

  inline LoadBalanceResponse& operator=(const LoadBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadBalanceResponse& operator=(LoadBalanceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadBalanceResponse& default_instance();

  enum LoadBalanceResponseTypeCase {
    kInitialResponse = 1,
    kServerList = 2,
    kFallbackResponse = 3,
    LOAD_BALANCE_RESPONSE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const LoadBalanceResponse*>(
               &_LoadBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoadBalanceResponse& a, LoadBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadBalanceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadBalanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadBalanceResponse* New() const final {
    return CreateMaybeMessage<LoadBalanceResponse>(nullptr);
  }

  LoadBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadBalanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadBalanceResponse& from);
  void MergeFrom(const LoadBalanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.LoadBalanceResponse";
  }
  protected:
  explicit LoadBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialResponseFieldNumber = 1,
    kServerListFieldNumber = 2,
    kFallbackResponseFieldNumber = 3,
  };
  // .grpc.lb.v1.InitialLoadBalanceResponse initial_response = 1[json_name = "initialResponse"];
  bool has_initial_response() const;
  private:
  bool _internal_has_initial_response() const;
  public:
  void clear_initial_response();
  const ::grpc::lb::v1::InitialLoadBalanceResponse& initial_response() const;
  ::grpc::lb::v1::InitialLoadBalanceResponse* release_initial_response();
  ::grpc::lb::v1::InitialLoadBalanceResponse* mutable_initial_response();
  void set_allocated_initial_response(::grpc::lb::v1::InitialLoadBalanceResponse* initial_response);
  private:
  const ::grpc::lb::v1::InitialLoadBalanceResponse& _internal_initial_response() const;
  ::grpc::lb::v1::InitialLoadBalanceResponse* _internal_mutable_initial_response();
  public:
  void unsafe_arena_set_allocated_initial_response(
      ::grpc::lb::v1::InitialLoadBalanceResponse* initial_response);
  ::grpc::lb::v1::InitialLoadBalanceResponse* unsafe_arena_release_initial_response();

  // .grpc.lb.v1.ServerList server_list = 2[json_name = "serverList"];
  bool has_server_list() const;
  private:
  bool _internal_has_server_list() const;
  public:
  void clear_server_list();
  const ::grpc::lb::v1::ServerList& server_list() const;
  ::grpc::lb::v1::ServerList* release_server_list();
  ::grpc::lb::v1::ServerList* mutable_server_list();
  void set_allocated_server_list(::grpc::lb::v1::ServerList* server_list);
  private:
  const ::grpc::lb::v1::ServerList& _internal_server_list() const;
  ::grpc::lb::v1::ServerList* _internal_mutable_server_list();
  public:
  void unsafe_arena_set_allocated_server_list(
      ::grpc::lb::v1::ServerList* server_list);
  ::grpc::lb::v1::ServerList* unsafe_arena_release_server_list();

  // .grpc.lb.v1.FallbackResponse fallback_response = 3[json_name = "fallbackResponse"];
  bool has_fallback_response() const;
  private:
  bool _internal_has_fallback_response() const;
  public:
  void clear_fallback_response();
  const ::grpc::lb::v1::FallbackResponse& fallback_response() const;
  ::grpc::lb::v1::FallbackResponse* release_fallback_response();
  ::grpc::lb::v1::FallbackResponse* mutable_fallback_response();
  void set_allocated_fallback_response(::grpc::lb::v1::FallbackResponse* fallback_response);
  private:
  const ::grpc::lb::v1::FallbackResponse& _internal_fallback_response() const;
  ::grpc::lb::v1::FallbackResponse* _internal_mutable_fallback_response();
  public:
  void unsafe_arena_set_allocated_fallback_response(
      ::grpc::lb::v1::FallbackResponse* fallback_response);
  ::grpc::lb::v1::FallbackResponse* unsafe_arena_release_fallback_response();

  void clear_load_balance_response_type();
  LoadBalanceResponseTypeCase load_balance_response_type_case() const;
  // @@protoc_insertion_point(class_scope:grpc.lb.v1.LoadBalanceResponse)
 private:
  class _Internal;
  void set_has_initial_response();
  void set_has_server_list();
  void set_has_fallback_response();

  inline bool has_load_balance_response_type() const;
  inline void clear_has_load_balance_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union LoadBalanceResponseTypeUnion {
    LoadBalanceResponseTypeUnion() {}
    ::grpc::lb::v1::InitialLoadBalanceResponse* initial_response_;
    ::grpc::lb::v1::ServerList* server_list_;
    ::grpc::lb::v1::FallbackResponse* fallback_response_;
  } load_balance_response_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class InitialLoadBalanceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.InitialLoadBalanceResponse) */ {
 public:
  inline InitialLoadBalanceResponse() : InitialLoadBalanceResponse(nullptr) {};
  virtual ~InitialLoadBalanceResponse();

  InitialLoadBalanceResponse(const InitialLoadBalanceResponse& from);
  InitialLoadBalanceResponse(InitialLoadBalanceResponse&& from) noexcept
    : InitialLoadBalanceResponse() {
    *this = ::std::move(from);
  }

  inline InitialLoadBalanceResponse& operator=(const InitialLoadBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialLoadBalanceResponse& operator=(InitialLoadBalanceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitialLoadBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialLoadBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const InitialLoadBalanceResponse*>(
               &_InitialLoadBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitialLoadBalanceResponse& a, InitialLoadBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialLoadBalanceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialLoadBalanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialLoadBalanceResponse* New() const final {
    return CreateMaybeMessage<InitialLoadBalanceResponse>(nullptr);
  }

  InitialLoadBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialLoadBalanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitialLoadBalanceResponse& from);
  void MergeFrom(const InitialLoadBalanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialLoadBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.InitialLoadBalanceResponse";
  }
  protected:
  explicit InitialLoadBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadBalancerDelegateFieldNumber = 1,
    kClientStatsReportIntervalFieldNumber = 2,
  };
  // string load_balancer_delegate = 1[json_name = "loadBalancerDelegate"];
  void clear_load_balancer_delegate();
  const std::string& load_balancer_delegate() const;
  void set_load_balancer_delegate(const std::string& value);
  void set_load_balancer_delegate(std::string&& value);
  void set_load_balancer_delegate(const char* value);
  void set_load_balancer_delegate(const char* value, size_t size);
  std::string* mutable_load_balancer_delegate();
  std::string* release_load_balancer_delegate();
  void set_allocated_load_balancer_delegate(std::string* load_balancer_delegate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_load_balancer_delegate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_load_balancer_delegate(
      std::string* load_balancer_delegate);
  private:
  const std::string& _internal_load_balancer_delegate() const;
  void _internal_set_load_balancer_delegate(const std::string& value);
  std::string* _internal_mutable_load_balancer_delegate();
  public:

  // .google.protobuf.Duration client_stats_report_interval = 2[json_name = "clientStatsReportInterval"];
  bool has_client_stats_report_interval() const;
  private:
  bool _internal_has_client_stats_report_interval() const;
  public:
  void clear_client_stats_report_interval();
  const PROTOBUF_NAMESPACE_ID::Duration& client_stats_report_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_client_stats_report_interval();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_client_stats_report_interval();
  void set_allocated_client_stats_report_interval(PROTOBUF_NAMESPACE_ID::Duration* client_stats_report_interval);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_client_stats_report_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_client_stats_report_interval();
  public:
  void unsafe_arena_set_allocated_client_stats_report_interval(
      PROTOBUF_NAMESPACE_ID::Duration* client_stats_report_interval);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_client_stats_report_interval();

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.InitialLoadBalanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balancer_delegate_;
  PROTOBUF_NAMESPACE_ID::Duration* client_stats_report_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class ServerList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.ServerList) */ {
 public:
  inline ServerList() : ServerList(nullptr) {};
  virtual ~ServerList();

  ServerList(const ServerList& from);
  ServerList(ServerList&& from) noexcept
    : ServerList() {
    *this = ::std::move(from);
  }

  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerList& operator=(ServerList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerList* internal_default_instance() {
    return reinterpret_cast<const ServerList*>(
               &_ServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerList& a, ServerList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerList* New() const final {
    return CreateMaybeMessage<ServerList>(nullptr);
  }

  ServerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerList& from);
  void MergeFrom(const ServerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.ServerList";
  }
  protected:
  explicit ServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .grpc.lb.v1.Server servers = 1[json_name = "servers"];
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::grpc::lb::v1::Server* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Server >*
      mutable_servers();
  private:
  const ::grpc::lb::v1::Server& _internal_servers(int index) const;
  ::grpc::lb::v1::Server* _internal_add_servers();
  public:
  const ::grpc::lb::v1::Server& servers(int index) const;
  ::grpc::lb::v1::Server* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Server >&
      servers() const;

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.ServerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Server > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class Server PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.Server) */ {
 public:
  inline Server() : Server(nullptr) {};
  virtual ~Server();

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return CreateMaybeMessage<Server>(nullptr);
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.Server";
  }
  protected:
  explicit Server(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kLoadBalanceTokenFieldNumber = 3,
    kPortFieldNumber = 2,
    kDropFieldNumber = 4,
  };
  // bytes ip_address = 1[json_name = "ipAddress"];
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const void* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string load_balance_token = 3[json_name = "loadBalanceToken"];
  void clear_load_balance_token();
  const std::string& load_balance_token() const;
  void set_load_balance_token(const std::string& value);
  void set_load_balance_token(std::string&& value);
  void set_load_balance_token(const char* value);
  void set_load_balance_token(const char* value, size_t size);
  std::string* mutable_load_balance_token();
  std::string* release_load_balance_token();
  void set_allocated_load_balance_token(std::string* load_balance_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_load_balance_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_load_balance_token(
      std::string* load_balance_token);
  private:
  const std::string& _internal_load_balance_token() const;
  void _internal_set_load_balance_token(const std::string& value);
  std::string* _internal_mutable_load_balance_token();
  public:

  // int32 port = 2[json_name = "port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool drop = 4[json_name = "drop"];
  void clear_drop();
  bool drop() const;
  void set_drop(bool value);
  private:
  bool _internal_drop() const;
  void _internal_set_drop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_balance_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool drop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// -------------------------------------------------------------------

class FallbackResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.lb.v1.FallbackResponse) */ {
 public:
  inline FallbackResponse() : FallbackResponse(nullptr) {};
  virtual ~FallbackResponse();

  FallbackResponse(const FallbackResponse& from);
  FallbackResponse(FallbackResponse&& from) noexcept
    : FallbackResponse() {
    *this = ::std::move(from);
  }

  inline FallbackResponse& operator=(const FallbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FallbackResponse& operator=(FallbackResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FallbackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FallbackResponse* internal_default_instance() {
    return reinterpret_cast<const FallbackResponse*>(
               &_FallbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FallbackResponse& a, FallbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FallbackResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FallbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FallbackResponse* New() const final {
    return CreateMaybeMessage<FallbackResponse>(nullptr);
  }

  FallbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FallbackResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FallbackResponse& from);
  void MergeFrom(const FallbackResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FallbackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.lb.v1.FallbackResponse";
  }
  protected:
  explicit FallbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto);
    return ::descriptor_table_grpc_2flb_2fv1_2fload_5fbalancer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc.lb.v1.FallbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2flb_2fv1_2fload_5fbalancer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadBalanceRequest

// .grpc.lb.v1.InitialLoadBalanceRequest initial_request = 1[json_name = "initialRequest"];
inline bool LoadBalanceRequest::_internal_has_initial_request() const {
  return load_balance_request_type_case() == kInitialRequest;
}
inline bool LoadBalanceRequest::has_initial_request() const {
  return _internal_has_initial_request();
}
inline void LoadBalanceRequest::set_has_initial_request() {
  _oneof_case_[0] = kInitialRequest;
}
inline void LoadBalanceRequest::clear_initial_request() {
  if (_internal_has_initial_request()) {
    if (GetArena() == nullptr) {
      delete load_balance_request_type_.initial_request_;
    }
    clear_has_load_balance_request_type();
  }
}
inline ::grpc::lb::v1::InitialLoadBalanceRequest* LoadBalanceRequest::release_initial_request() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadBalanceRequest.initial_request)
  if (_internal_has_initial_request()) {
    clear_has_load_balance_request_type();
      ::grpc::lb::v1::InitialLoadBalanceRequest* temp = load_balance_request_type_.initial_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    load_balance_request_type_.initial_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::lb::v1::InitialLoadBalanceRequest& LoadBalanceRequest::_internal_initial_request() const {
  return _internal_has_initial_request()
      ? *load_balance_request_type_.initial_request_
      : *reinterpret_cast< ::grpc::lb::v1::InitialLoadBalanceRequest*>(&::grpc::lb::v1::_InitialLoadBalanceRequest_default_instance_);
}
inline const ::grpc::lb::v1::InitialLoadBalanceRequest& LoadBalanceRequest::initial_request() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalanceRequest.initial_request)
  return _internal_initial_request();
}
inline ::grpc::lb::v1::InitialLoadBalanceRequest* LoadBalanceRequest::unsafe_arena_release_initial_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.LoadBalanceRequest.initial_request)
  if (_internal_has_initial_request()) {
    clear_has_load_balance_request_type();
    ::grpc::lb::v1::InitialLoadBalanceRequest* temp = load_balance_request_type_.initial_request_;
    load_balance_request_type_.initial_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoadBalanceRequest::unsafe_arena_set_allocated_initial_request(::grpc::lb::v1::InitialLoadBalanceRequest* initial_request) {
  clear_load_balance_request_type();
  if (initial_request) {
    set_has_initial_request();
    load_balance_request_type_.initial_request_ = initial_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadBalanceRequest.initial_request)
}
inline ::grpc::lb::v1::InitialLoadBalanceRequest* LoadBalanceRequest::_internal_mutable_initial_request() {
  if (!_internal_has_initial_request()) {
    clear_load_balance_request_type();
    set_has_initial_request();
    load_balance_request_type_.initial_request_ = CreateMaybeMessage< ::grpc::lb::v1::InitialLoadBalanceRequest >(GetArena());
  }
  return load_balance_request_type_.initial_request_;
}
inline ::grpc::lb::v1::InitialLoadBalanceRequest* LoadBalanceRequest::mutable_initial_request() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadBalanceRequest.initial_request)
  return _internal_mutable_initial_request();
}

// .grpc.lb.v1.ClientStats client_stats = 2[json_name = "clientStats"];
inline bool LoadBalanceRequest::_internal_has_client_stats() const {
  return load_balance_request_type_case() == kClientStats;
}
inline bool LoadBalanceRequest::has_client_stats() const {
  return _internal_has_client_stats();
}
inline void LoadBalanceRequest::set_has_client_stats() {
  _oneof_case_[0] = kClientStats;
}
inline void LoadBalanceRequest::clear_client_stats() {
  if (_internal_has_client_stats()) {
    if (GetArena() == nullptr) {
      delete load_balance_request_type_.client_stats_;
    }
    clear_has_load_balance_request_type();
  }
}
inline ::grpc::lb::v1::ClientStats* LoadBalanceRequest::release_client_stats() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadBalanceRequest.client_stats)
  if (_internal_has_client_stats()) {
    clear_has_load_balance_request_type();
      ::grpc::lb::v1::ClientStats* temp = load_balance_request_type_.client_stats_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    load_balance_request_type_.client_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::lb::v1::ClientStats& LoadBalanceRequest::_internal_client_stats() const {
  return _internal_has_client_stats()
      ? *load_balance_request_type_.client_stats_
      : *reinterpret_cast< ::grpc::lb::v1::ClientStats*>(&::grpc::lb::v1::_ClientStats_default_instance_);
}
inline const ::grpc::lb::v1::ClientStats& LoadBalanceRequest::client_stats() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalanceRequest.client_stats)
  return _internal_client_stats();
}
inline ::grpc::lb::v1::ClientStats* LoadBalanceRequest::unsafe_arena_release_client_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.LoadBalanceRequest.client_stats)
  if (_internal_has_client_stats()) {
    clear_has_load_balance_request_type();
    ::grpc::lb::v1::ClientStats* temp = load_balance_request_type_.client_stats_;
    load_balance_request_type_.client_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoadBalanceRequest::unsafe_arena_set_allocated_client_stats(::grpc::lb::v1::ClientStats* client_stats) {
  clear_load_balance_request_type();
  if (client_stats) {
    set_has_client_stats();
    load_balance_request_type_.client_stats_ = client_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadBalanceRequest.client_stats)
}
inline ::grpc::lb::v1::ClientStats* LoadBalanceRequest::_internal_mutable_client_stats() {
  if (!_internal_has_client_stats()) {
    clear_load_balance_request_type();
    set_has_client_stats();
    load_balance_request_type_.client_stats_ = CreateMaybeMessage< ::grpc::lb::v1::ClientStats >(GetArena());
  }
  return load_balance_request_type_.client_stats_;
}
inline ::grpc::lb::v1::ClientStats* LoadBalanceRequest::mutable_client_stats() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadBalanceRequest.client_stats)
  return _internal_mutable_client_stats();
}

inline bool LoadBalanceRequest::has_load_balance_request_type() const {
  return load_balance_request_type_case() != LOAD_BALANCE_REQUEST_TYPE_NOT_SET;
}
inline void LoadBalanceRequest::clear_has_load_balance_request_type() {
  _oneof_case_[0] = LOAD_BALANCE_REQUEST_TYPE_NOT_SET;
}
inline LoadBalanceRequest::LoadBalanceRequestTypeCase LoadBalanceRequest::load_balance_request_type_case() const {
  return LoadBalanceRequest::LoadBalanceRequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InitialLoadBalanceRequest

// string name = 1[json_name = "name"];
inline void InitialLoadBalanceRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitialLoadBalanceRequest::name() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadBalanceRequest.name)
  return _internal_name();
}
inline void InitialLoadBalanceRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadBalanceRequest.name)
}
inline std::string* InitialLoadBalanceRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadBalanceRequest.name)
  return _internal_mutable_name();
}
inline const std::string& InitialLoadBalanceRequest::_internal_name() const {
  return name_.Get();
}
inline void InitialLoadBalanceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitialLoadBalanceRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.lb.v1.InitialLoadBalanceRequest.name)
}
inline void InitialLoadBalanceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.lb.v1.InitialLoadBalanceRequest.name)
}
inline void InitialLoadBalanceRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.lb.v1.InitialLoadBalanceRequest.name)
}
inline std::string* InitialLoadBalanceRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitialLoadBalanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadBalanceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitialLoadBalanceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadBalanceRequest.name)
}
inline std::string* InitialLoadBalanceRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.InitialLoadBalanceRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitialLoadBalanceRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.InitialLoadBalanceRequest.name)
}

// -------------------------------------------------------------------

// ClientStatsPerToken

// string load_balance_token = 1[json_name = "loadBalanceToken"];
inline void ClientStatsPerToken::clear_load_balance_token() {
  load_balance_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientStatsPerToken::load_balance_token() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
  return _internal_load_balance_token();
}
inline void ClientStatsPerToken::set_load_balance_token(const std::string& value) {
  _internal_set_load_balance_token(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
}
inline std::string* ClientStatsPerToken::mutable_load_balance_token() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
  return _internal_mutable_load_balance_token();
}
inline const std::string& ClientStatsPerToken::_internal_load_balance_token() const {
  return load_balance_token_.Get();
}
inline void ClientStatsPerToken::_internal_set_load_balance_token(const std::string& value) {
  
  load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientStatsPerToken::set_load_balance_token(std::string&& value) {
  
  load_balance_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
}
inline void ClientStatsPerToken::set_load_balance_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
}
inline void ClientStatsPerToken::set_load_balance_token(const char* value,
    size_t size) {
  
  load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
}
inline std::string* ClientStatsPerToken::_internal_mutable_load_balance_token() {
  
  return load_balance_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientStatsPerToken::release_load_balance_token() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
  return load_balance_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientStatsPerToken::set_allocated_load_balance_token(std::string* load_balance_token) {
  if (load_balance_token != nullptr) {
    
  } else {
    
  }
  load_balance_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balance_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
}
inline std::string* ClientStatsPerToken::unsafe_arena_release_load_balance_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return load_balance_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientStatsPerToken::unsafe_arena_set_allocated_load_balance_token(
    std::string* load_balance_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (load_balance_token != nullptr) {
    
  } else {
    
  }
  load_balance_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      load_balance_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.ClientStatsPerToken.load_balance_token)
}

// int64 num_calls = 2[json_name = "numCalls"];
inline void ClientStatsPerToken::clear_num_calls() {
  num_calls_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStatsPerToken::_internal_num_calls() const {
  return num_calls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStatsPerToken::num_calls() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStatsPerToken.num_calls)
  return _internal_num_calls();
}
inline void ClientStatsPerToken::_internal_set_num_calls(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_ = value;
}
inline void ClientStatsPerToken::set_num_calls(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.ClientStatsPerToken.num_calls)
}

// -------------------------------------------------------------------

// ClientStats

// .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
inline bool ClientStats::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool ClientStats::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ClientStats::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ClientStats::timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStats.timestamp)
  return _internal_timestamp();
}
inline void ClientStats::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.ClientStats.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ClientStats::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ClientStats::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.ClientStats.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ClientStats::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ClientStats::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.ClientStats.timestamp)
  return _internal_mutable_timestamp();
}
inline void ClientStats::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.ClientStats.timestamp)
}

// int64 num_calls_started = 2[json_name = "numCallsStarted"];
inline void ClientStats::clear_num_calls_started() {
  num_calls_started_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::_internal_num_calls_started() const {
  return num_calls_started_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::num_calls_started() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStats.num_calls_started)
  return _internal_num_calls_started();
}
inline void ClientStats::_internal_set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_started_ = value;
}
inline void ClientStats::set_num_calls_started(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_started(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.ClientStats.num_calls_started)
}

// int64 num_calls_finished = 3[json_name = "numCallsFinished"];
inline void ClientStats::clear_num_calls_finished() {
  num_calls_finished_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::_internal_num_calls_finished() const {
  return num_calls_finished_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::num_calls_finished() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStats.num_calls_finished)
  return _internal_num_calls_finished();
}
inline void ClientStats::_internal_set_num_calls_finished(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_ = value;
}
inline void ClientStats::set_num_calls_finished(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.ClientStats.num_calls_finished)
}

// int64 num_calls_finished_with_client_failed_to_send = 6[json_name = "numCallsFinishedWithClientFailedToSend"];
inline void ClientStats::clear_num_calls_finished_with_client_failed_to_send() {
  num_calls_finished_with_client_failed_to_send_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::_internal_num_calls_finished_with_client_failed_to_send() const {
  return num_calls_finished_with_client_failed_to_send_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::num_calls_finished_with_client_failed_to_send() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStats.num_calls_finished_with_client_failed_to_send)
  return _internal_num_calls_finished_with_client_failed_to_send();
}
inline void ClientStats::_internal_set_num_calls_finished_with_client_failed_to_send(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_with_client_failed_to_send_ = value;
}
inline void ClientStats::set_num_calls_finished_with_client_failed_to_send(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished_with_client_failed_to_send(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.ClientStats.num_calls_finished_with_client_failed_to_send)
}

// int64 num_calls_finished_known_received = 7[json_name = "numCallsFinishedKnownReceived"];
inline void ClientStats::clear_num_calls_finished_known_received() {
  num_calls_finished_known_received_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::_internal_num_calls_finished_known_received() const {
  return num_calls_finished_known_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientStats::num_calls_finished_known_received() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStats.num_calls_finished_known_received)
  return _internal_num_calls_finished_known_received();
}
inline void ClientStats::_internal_set_num_calls_finished_known_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_calls_finished_known_received_ = value;
}
inline void ClientStats::set_num_calls_finished_known_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_calls_finished_known_received(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.ClientStats.num_calls_finished_known_received)
}

// repeated .grpc.lb.v1.ClientStatsPerToken calls_finished_with_drop = 8[json_name = "callsFinishedWithDrop"];
inline int ClientStats::_internal_calls_finished_with_drop_size() const {
  return calls_finished_with_drop_.size();
}
inline int ClientStats::calls_finished_with_drop_size() const {
  return _internal_calls_finished_with_drop_size();
}
inline void ClientStats::clear_calls_finished_with_drop() {
  calls_finished_with_drop_.Clear();
}
inline ::grpc::lb::v1::ClientStatsPerToken* ClientStats::mutable_calls_finished_with_drop(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.ClientStats.calls_finished_with_drop)
  return calls_finished_with_drop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::ClientStatsPerToken >*
ClientStats::mutable_calls_finished_with_drop() {
  // @@protoc_insertion_point(field_mutable_list:grpc.lb.v1.ClientStats.calls_finished_with_drop)
  return &calls_finished_with_drop_;
}
inline const ::grpc::lb::v1::ClientStatsPerToken& ClientStats::_internal_calls_finished_with_drop(int index) const {
  return calls_finished_with_drop_.Get(index);
}
inline const ::grpc::lb::v1::ClientStatsPerToken& ClientStats::calls_finished_with_drop(int index) const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ClientStats.calls_finished_with_drop)
  return _internal_calls_finished_with_drop(index);
}
inline ::grpc::lb::v1::ClientStatsPerToken* ClientStats::_internal_add_calls_finished_with_drop() {
  return calls_finished_with_drop_.Add();
}
inline ::grpc::lb::v1::ClientStatsPerToken* ClientStats::add_calls_finished_with_drop() {
  // @@protoc_insertion_point(field_add:grpc.lb.v1.ClientStats.calls_finished_with_drop)
  return _internal_add_calls_finished_with_drop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::ClientStatsPerToken >&
ClientStats::calls_finished_with_drop() const {
  // @@protoc_insertion_point(field_list:grpc.lb.v1.ClientStats.calls_finished_with_drop)
  return calls_finished_with_drop_;
}

// -------------------------------------------------------------------

// LoadBalanceResponse

// .grpc.lb.v1.InitialLoadBalanceResponse initial_response = 1[json_name = "initialResponse"];
inline bool LoadBalanceResponse::_internal_has_initial_response() const {
  return load_balance_response_type_case() == kInitialResponse;
}
inline bool LoadBalanceResponse::has_initial_response() const {
  return _internal_has_initial_response();
}
inline void LoadBalanceResponse::set_has_initial_response() {
  _oneof_case_[0] = kInitialResponse;
}
inline void LoadBalanceResponse::clear_initial_response() {
  if (_internal_has_initial_response()) {
    if (GetArena() == nullptr) {
      delete load_balance_response_type_.initial_response_;
    }
    clear_has_load_balance_response_type();
  }
}
inline ::grpc::lb::v1::InitialLoadBalanceResponse* LoadBalanceResponse::release_initial_response() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadBalanceResponse.initial_response)
  if (_internal_has_initial_response()) {
    clear_has_load_balance_response_type();
      ::grpc::lb::v1::InitialLoadBalanceResponse* temp = load_balance_response_type_.initial_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    load_balance_response_type_.initial_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::lb::v1::InitialLoadBalanceResponse& LoadBalanceResponse::_internal_initial_response() const {
  return _internal_has_initial_response()
      ? *load_balance_response_type_.initial_response_
      : *reinterpret_cast< ::grpc::lb::v1::InitialLoadBalanceResponse*>(&::grpc::lb::v1::_InitialLoadBalanceResponse_default_instance_);
}
inline const ::grpc::lb::v1::InitialLoadBalanceResponse& LoadBalanceResponse::initial_response() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalanceResponse.initial_response)
  return _internal_initial_response();
}
inline ::grpc::lb::v1::InitialLoadBalanceResponse* LoadBalanceResponse::unsafe_arena_release_initial_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.LoadBalanceResponse.initial_response)
  if (_internal_has_initial_response()) {
    clear_has_load_balance_response_type();
    ::grpc::lb::v1::InitialLoadBalanceResponse* temp = load_balance_response_type_.initial_response_;
    load_balance_response_type_.initial_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoadBalanceResponse::unsafe_arena_set_allocated_initial_response(::grpc::lb::v1::InitialLoadBalanceResponse* initial_response) {
  clear_load_balance_response_type();
  if (initial_response) {
    set_has_initial_response();
    load_balance_response_type_.initial_response_ = initial_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadBalanceResponse.initial_response)
}
inline ::grpc::lb::v1::InitialLoadBalanceResponse* LoadBalanceResponse::_internal_mutable_initial_response() {
  if (!_internal_has_initial_response()) {
    clear_load_balance_response_type();
    set_has_initial_response();
    load_balance_response_type_.initial_response_ = CreateMaybeMessage< ::grpc::lb::v1::InitialLoadBalanceResponse >(GetArena());
  }
  return load_balance_response_type_.initial_response_;
}
inline ::grpc::lb::v1::InitialLoadBalanceResponse* LoadBalanceResponse::mutable_initial_response() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadBalanceResponse.initial_response)
  return _internal_mutable_initial_response();
}

// .grpc.lb.v1.ServerList server_list = 2[json_name = "serverList"];
inline bool LoadBalanceResponse::_internal_has_server_list() const {
  return load_balance_response_type_case() == kServerList;
}
inline bool LoadBalanceResponse::has_server_list() const {
  return _internal_has_server_list();
}
inline void LoadBalanceResponse::set_has_server_list() {
  _oneof_case_[0] = kServerList;
}
inline void LoadBalanceResponse::clear_server_list() {
  if (_internal_has_server_list()) {
    if (GetArena() == nullptr) {
      delete load_balance_response_type_.server_list_;
    }
    clear_has_load_balance_response_type();
  }
}
inline ::grpc::lb::v1::ServerList* LoadBalanceResponse::release_server_list() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadBalanceResponse.server_list)
  if (_internal_has_server_list()) {
    clear_has_load_balance_response_type();
      ::grpc::lb::v1::ServerList* temp = load_balance_response_type_.server_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    load_balance_response_type_.server_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::lb::v1::ServerList& LoadBalanceResponse::_internal_server_list() const {
  return _internal_has_server_list()
      ? *load_balance_response_type_.server_list_
      : *reinterpret_cast< ::grpc::lb::v1::ServerList*>(&::grpc::lb::v1::_ServerList_default_instance_);
}
inline const ::grpc::lb::v1::ServerList& LoadBalanceResponse::server_list() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalanceResponse.server_list)
  return _internal_server_list();
}
inline ::grpc::lb::v1::ServerList* LoadBalanceResponse::unsafe_arena_release_server_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.LoadBalanceResponse.server_list)
  if (_internal_has_server_list()) {
    clear_has_load_balance_response_type();
    ::grpc::lb::v1::ServerList* temp = load_balance_response_type_.server_list_;
    load_balance_response_type_.server_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoadBalanceResponse::unsafe_arena_set_allocated_server_list(::grpc::lb::v1::ServerList* server_list) {
  clear_load_balance_response_type();
  if (server_list) {
    set_has_server_list();
    load_balance_response_type_.server_list_ = server_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadBalanceResponse.server_list)
}
inline ::grpc::lb::v1::ServerList* LoadBalanceResponse::_internal_mutable_server_list() {
  if (!_internal_has_server_list()) {
    clear_load_balance_response_type();
    set_has_server_list();
    load_balance_response_type_.server_list_ = CreateMaybeMessage< ::grpc::lb::v1::ServerList >(GetArena());
  }
  return load_balance_response_type_.server_list_;
}
inline ::grpc::lb::v1::ServerList* LoadBalanceResponse::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadBalanceResponse.server_list)
  return _internal_mutable_server_list();
}

// .grpc.lb.v1.FallbackResponse fallback_response = 3[json_name = "fallbackResponse"];
inline bool LoadBalanceResponse::_internal_has_fallback_response() const {
  return load_balance_response_type_case() == kFallbackResponse;
}
inline bool LoadBalanceResponse::has_fallback_response() const {
  return _internal_has_fallback_response();
}
inline void LoadBalanceResponse::set_has_fallback_response() {
  _oneof_case_[0] = kFallbackResponse;
}
inline void LoadBalanceResponse::clear_fallback_response() {
  if (_internal_has_fallback_response()) {
    if (GetArena() == nullptr) {
      delete load_balance_response_type_.fallback_response_;
    }
    clear_has_load_balance_response_type();
  }
}
inline ::grpc::lb::v1::FallbackResponse* LoadBalanceResponse::release_fallback_response() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.LoadBalanceResponse.fallback_response)
  if (_internal_has_fallback_response()) {
    clear_has_load_balance_response_type();
      ::grpc::lb::v1::FallbackResponse* temp = load_balance_response_type_.fallback_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    load_balance_response_type_.fallback_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::lb::v1::FallbackResponse& LoadBalanceResponse::_internal_fallback_response() const {
  return _internal_has_fallback_response()
      ? *load_balance_response_type_.fallback_response_
      : *reinterpret_cast< ::grpc::lb::v1::FallbackResponse*>(&::grpc::lb::v1::_FallbackResponse_default_instance_);
}
inline const ::grpc::lb::v1::FallbackResponse& LoadBalanceResponse::fallback_response() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.LoadBalanceResponse.fallback_response)
  return _internal_fallback_response();
}
inline ::grpc::lb::v1::FallbackResponse* LoadBalanceResponse::unsafe_arena_release_fallback_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.LoadBalanceResponse.fallback_response)
  if (_internal_has_fallback_response()) {
    clear_has_load_balance_response_type();
    ::grpc::lb::v1::FallbackResponse* temp = load_balance_response_type_.fallback_response_;
    load_balance_response_type_.fallback_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoadBalanceResponse::unsafe_arena_set_allocated_fallback_response(::grpc::lb::v1::FallbackResponse* fallback_response) {
  clear_load_balance_response_type();
  if (fallback_response) {
    set_has_fallback_response();
    load_balance_response_type_.fallback_response_ = fallback_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.LoadBalanceResponse.fallback_response)
}
inline ::grpc::lb::v1::FallbackResponse* LoadBalanceResponse::_internal_mutable_fallback_response() {
  if (!_internal_has_fallback_response()) {
    clear_load_balance_response_type();
    set_has_fallback_response();
    load_balance_response_type_.fallback_response_ = CreateMaybeMessage< ::grpc::lb::v1::FallbackResponse >(GetArena());
  }
  return load_balance_response_type_.fallback_response_;
}
inline ::grpc::lb::v1::FallbackResponse* LoadBalanceResponse::mutable_fallback_response() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.LoadBalanceResponse.fallback_response)
  return _internal_mutable_fallback_response();
}

inline bool LoadBalanceResponse::has_load_balance_response_type() const {
  return load_balance_response_type_case() != LOAD_BALANCE_RESPONSE_TYPE_NOT_SET;
}
inline void LoadBalanceResponse::clear_has_load_balance_response_type() {
  _oneof_case_[0] = LOAD_BALANCE_RESPONSE_TYPE_NOT_SET;
}
inline LoadBalanceResponse::LoadBalanceResponseTypeCase LoadBalanceResponse::load_balance_response_type_case() const {
  return LoadBalanceResponse::LoadBalanceResponseTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InitialLoadBalanceResponse

// string load_balancer_delegate = 1[json_name = "loadBalancerDelegate"];
inline void InitialLoadBalanceResponse::clear_load_balancer_delegate() {
  load_balancer_delegate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitialLoadBalanceResponse::load_balancer_delegate() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
  return _internal_load_balancer_delegate();
}
inline void InitialLoadBalanceResponse::set_load_balancer_delegate(const std::string& value) {
  _internal_set_load_balancer_delegate(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
}
inline std::string* InitialLoadBalanceResponse::mutable_load_balancer_delegate() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
  return _internal_mutable_load_balancer_delegate();
}
inline const std::string& InitialLoadBalanceResponse::_internal_load_balancer_delegate() const {
  return load_balancer_delegate_.Get();
}
inline void InitialLoadBalanceResponse::_internal_set_load_balancer_delegate(const std::string& value) {
  
  load_balancer_delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitialLoadBalanceResponse::set_load_balancer_delegate(std::string&& value) {
  
  load_balancer_delegate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
}
inline void InitialLoadBalanceResponse::set_load_balancer_delegate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  load_balancer_delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
}
inline void InitialLoadBalanceResponse::set_load_balancer_delegate(const char* value,
    size_t size) {
  
  load_balancer_delegate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
}
inline std::string* InitialLoadBalanceResponse::_internal_mutable_load_balancer_delegate() {
  
  return load_balancer_delegate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitialLoadBalanceResponse::release_load_balancer_delegate() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
  return load_balancer_delegate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitialLoadBalanceResponse::set_allocated_load_balancer_delegate(std::string* load_balancer_delegate) {
  if (load_balancer_delegate != nullptr) {
    
  } else {
    
  }
  load_balancer_delegate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balancer_delegate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
}
inline std::string* InitialLoadBalanceResponse::unsafe_arena_release_load_balancer_delegate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return load_balancer_delegate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitialLoadBalanceResponse::unsafe_arena_set_allocated_load_balancer_delegate(
    std::string* load_balancer_delegate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (load_balancer_delegate != nullptr) {
    
  } else {
    
  }
  load_balancer_delegate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      load_balancer_delegate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.InitialLoadBalanceResponse.load_balancer_delegate)
}

// .google.protobuf.Duration client_stats_report_interval = 2[json_name = "clientStatsReportInterval"];
inline bool InitialLoadBalanceResponse::_internal_has_client_stats_report_interval() const {
  return this != internal_default_instance() && client_stats_report_interval_ != nullptr;
}
inline bool InitialLoadBalanceResponse::has_client_stats_report_interval() const {
  return _internal_has_client_stats_report_interval();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& InitialLoadBalanceResponse::_internal_client_stats_report_interval() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = client_stats_report_interval_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& InitialLoadBalanceResponse::client_stats_report_interval() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.InitialLoadBalanceResponse.client_stats_report_interval)
  return _internal_client_stats_report_interval();
}
inline void InitialLoadBalanceResponse::unsafe_arena_set_allocated_client_stats_report_interval(
    PROTOBUF_NAMESPACE_ID::Duration* client_stats_report_interval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_stats_report_interval_);
  }
  client_stats_report_interval_ = client_stats_report_interval;
  if (client_stats_report_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.InitialLoadBalanceResponse.client_stats_report_interval)
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadBalanceResponse::release_client_stats_report_interval() {
  auto temp = unsafe_arena_release_client_stats_report_interval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadBalanceResponse::unsafe_arena_release_client_stats_report_interval() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.InitialLoadBalanceResponse.client_stats_report_interval)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = client_stats_report_interval_;
  client_stats_report_interval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadBalanceResponse::_internal_mutable_client_stats_report_interval() {
  
  if (client_stats_report_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    client_stats_report_interval_ = p;
  }
  return client_stats_report_interval_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* InitialLoadBalanceResponse::mutable_client_stats_report_interval() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.InitialLoadBalanceResponse.client_stats_report_interval)
  return _internal_mutable_client_stats_report_interval();
}
inline void InitialLoadBalanceResponse::set_allocated_client_stats_report_interval(PROTOBUF_NAMESPACE_ID::Duration* client_stats_report_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_stats_report_interval_);
  }
  if (client_stats_report_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_stats_report_interval)->GetArena();
    if (message_arena != submessage_arena) {
      client_stats_report_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_stats_report_interval, submessage_arena);
    }
    
  } else {
    
  }
  client_stats_report_interval_ = client_stats_report_interval;
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.InitialLoadBalanceResponse.client_stats_report_interval)
}

// -------------------------------------------------------------------

// ServerList

// repeated .grpc.lb.v1.Server servers = 1[json_name = "servers"];
inline int ServerList::_internal_servers_size() const {
  return servers_.size();
}
inline int ServerList::servers_size() const {
  return _internal_servers_size();
}
inline void ServerList::clear_servers() {
  servers_.Clear();
}
inline ::grpc::lb::v1::Server* ServerList::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.ServerList.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Server >*
ServerList::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:grpc.lb.v1.ServerList.servers)
  return &servers_;
}
inline const ::grpc::lb::v1::Server& ServerList::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::grpc::lb::v1::Server& ServerList::servers(int index) const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.ServerList.servers)
  return _internal_servers(index);
}
inline ::grpc::lb::v1::Server* ServerList::_internal_add_servers() {
  return servers_.Add();
}
inline ::grpc::lb::v1::Server* ServerList::add_servers() {
  // @@protoc_insertion_point(field_add:grpc.lb.v1.ServerList.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::lb::v1::Server >&
ServerList::servers() const {
  // @@protoc_insertion_point(field_list:grpc.lb.v1.ServerList.servers)
  return servers_;
}

// -------------------------------------------------------------------

// Server

// bytes ip_address = 1[json_name = "ipAddress"];
inline void Server::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Server::ip_address() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Server.ip_address)
  return _internal_ip_address();
}
inline void Server::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Server.ip_address)
}
inline std::string* Server::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Server.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& Server::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void Server::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Server::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.lb.v1.Server.ip_address)
}
inline void Server::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.lb.v1.Server.ip_address)
}
inline void Server::set_ip_address(const void* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.lb.v1.Server.ip_address)
}
inline std::string* Server::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Server::release_ip_address() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Server.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Server::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Server.ip_address)
}
inline std::string* Server::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.Server.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Server::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.Server.ip_address)
}

// int32 port = 2[json_name = "port"];
inline void Server::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server::port() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Server.port)
  return _internal_port();
}
inline void Server::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void Server::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Server.port)
}

// string load_balance_token = 3[json_name = "loadBalanceToken"];
inline void Server::clear_load_balance_token() {
  load_balance_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Server::load_balance_token() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Server.load_balance_token)
  return _internal_load_balance_token();
}
inline void Server::set_load_balance_token(const std::string& value) {
  _internal_set_load_balance_token(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Server.load_balance_token)
}
inline std::string* Server::mutable_load_balance_token() {
  // @@protoc_insertion_point(field_mutable:grpc.lb.v1.Server.load_balance_token)
  return _internal_mutable_load_balance_token();
}
inline const std::string& Server::_internal_load_balance_token() const {
  return load_balance_token_.Get();
}
inline void Server::_internal_set_load_balance_token(const std::string& value) {
  
  load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Server::set_load_balance_token(std::string&& value) {
  
  load_balance_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.lb.v1.Server.load_balance_token)
}
inline void Server::set_load_balance_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.lb.v1.Server.load_balance_token)
}
inline void Server::set_load_balance_token(const char* value,
    size_t size) {
  
  load_balance_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.lb.v1.Server.load_balance_token)
}
inline std::string* Server::_internal_mutable_load_balance_token() {
  
  return load_balance_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Server::release_load_balance_token() {
  // @@protoc_insertion_point(field_release:grpc.lb.v1.Server.load_balance_token)
  return load_balance_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Server::set_allocated_load_balance_token(std::string* load_balance_token) {
  if (load_balance_token != nullptr) {
    
  } else {
    
  }
  load_balance_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_balance_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.lb.v1.Server.load_balance_token)
}
inline std::string* Server::unsafe_arena_release_load_balance_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.lb.v1.Server.load_balance_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return load_balance_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Server::unsafe_arena_set_allocated_load_balance_token(
    std::string* load_balance_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (load_balance_token != nullptr) {
    
  } else {
    
  }
  load_balance_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      load_balance_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.lb.v1.Server.load_balance_token)
}

// bool drop = 4[json_name = "drop"];
inline void Server::clear_drop() {
  drop_ = false;
}
inline bool Server::_internal_drop() const {
  return drop_;
}
inline bool Server::drop() const {
  // @@protoc_insertion_point(field_get:grpc.lb.v1.Server.drop)
  return _internal_drop();
}
inline void Server::_internal_set_drop(bool value) {
  
  drop_ = value;
}
inline void Server::set_drop(bool value) {
  _internal_set_drop(value);
  // @@protoc_insertion_point(field_set:grpc.lb.v1.Server.drop)
}

// -------------------------------------------------------------------

// FallbackResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace lb
}  // namespace grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpc_2flb_2fv1_2fload_5fbalancer_2eproto
