// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/http_over_grpc/http_over_grpc.proto

#include "grpc/http_over_grpc/http_over_grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto;
namespace grpc {
namespace http_over_grpc {
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class HTTPOverGRPCRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPOverGRPCRequest> _instance;
} _HTTPOverGRPCRequest_default_instance_;
class HTTPOverGRPCReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPOverGRPCReply> _instance;
} _HTTPOverGRPCReply_default_instance_;
}  // namespace http_over_grpc
}  // namespace grpc
static void InitDefaultsscc_info_HTTPOverGRPCReply_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::http_over_grpc::_HTTPOverGRPCReply_default_instance_;
    new (ptr) ::grpc::http_over_grpc::HTTPOverGRPCReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::http_over_grpc::HTTPOverGRPCReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HTTPOverGRPCReply_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HTTPOverGRPCReply_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto}, {
      &scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base,}};

static void InitDefaultsscc_info_HTTPOverGRPCRequest_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::http_over_grpc::_HTTPOverGRPCRequest_default_instance_;
    new (ptr) ::grpc::http_over_grpc::HTTPOverGRPCRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::http_over_grpc::HTTPOverGRPCRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HTTPOverGRPCRequest_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HTTPOverGRPCRequest_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto}, {
      &scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base,}};

static void InitDefaultsscc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::http_over_grpc::_Header_default_instance_;
    new (ptr) ::grpc::http_over_grpc::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc::http_over_grpc::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::Header, key_),
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::Header, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCRequest, method_),
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCRequest, url_),
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCRequest, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCReply, status_),
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCReply, headers_),
  PROTOBUF_FIELD_OFFSET(::grpc::http_over_grpc::HTTPOverGRPCReply, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc::http_over_grpc::Header)},
  { 7, -1, sizeof(::grpc::http_over_grpc::HTTPOverGRPCRequest)},
  { 16, -1, sizeof(::grpc::http_over_grpc::HTTPOverGRPCReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::http_over_grpc::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::http_over_grpc::_HTTPOverGRPCRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::http_over_grpc::_HTTPOverGRPCReply_default_instance_),
};

const char descriptor_table_protodef_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(grpc/http_over_grpc/http_over_grpc.pro"
  "to\022\023grpc.http_over_grpc\"2\n\006Header\022\020\n\003key"
  "\030\001 \001(\tR\003key\022\026\n\006values\030\002 \003(\tR\006values\"\212\001\n\023"
  "HTTPOverGRPCRequest\022\026\n\006method\030\001 \001(\tR\006met"
  "hod\022\020\n\003url\030\002 \001(\tR\003url\0225\n\007headers\030\003 \003(\0132\033"
  ".grpc.http_over_grpc.HeaderR\007headers\022\022\n\004"
  "body\030\004 \001(\014R\004body\"v\n\021HTTPOverGRPCReply\022\026\n"
  "\006status\030\001 \001(\005R\006status\0225\n\007headers\030\002 \003(\0132\033"
  ".grpc.http_over_grpc.HeaderR\007headers\022\022\n\004"
  "body\030\003 \001(\014R\004body2q\n\014HTTPOverGRPC\022a\n\013HTTP"
  "Request\022(.grpc.http_over_grpc.HTTPOverGR"
  "PCRequest\032&.grpc.http_over_grpc.HTTPOver"
  "GRPCReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto_sccs[3] = {
  &scc_info_HTTPOverGRPCReply_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base,
  &scc_info_HTTPOverGRPCRequest_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base,
  &scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto = {
  false, false, descriptor_table_protodef_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto, "grpc/http_over_grpc/http_over_grpc.proto", 499,
  &descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto_once, descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto_sccs, descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto::offsets,
  file_level_metadata_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto, 3, file_level_enum_descriptors_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto, file_level_service_descriptors_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto)), true);
namespace grpc {
namespace http_over_grpc {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.http_over_grpc.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpc.http_over_grpc.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:grpc.http_over_grpc.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.http_over_grpc.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1[json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.http_over_grpc.Header.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string values = 2[json_name = "values"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.http_over_grpc.Header.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.http_over_grpc.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1[json_name = "key"];
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.http_over_grpc.Header.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string values = 2[json_name = "values"];
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.http_over_grpc.Header.values");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.http_over_grpc.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.http_over_grpc.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 2[json_name = "values"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // string key = 1[json_name = "key"];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.http_over_grpc.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.http_over_grpc.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.http_over_grpc.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.http_over_grpc.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.http_over_grpc.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.http_over_grpc.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTTPOverGRPCRequest::InitAsDefaultInstance() {
}
class HTTPOverGRPCRequest::_Internal {
 public:
};

HTTPOverGRPCRequest::HTTPOverGRPCRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.http_over_grpc.HTTPOverGRPCRequest)
}
HTTPOverGRPCRequest::HTTPOverGRPCRequest(const HTTPOverGRPCRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_method(),
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpc.http_over_grpc.HTTPOverGRPCRequest)
}

void HTTPOverGRPCRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTTPOverGRPCRequest_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HTTPOverGRPCRequest::~HTTPOverGRPCRequest() {
  // @@protoc_insertion_point(destructor:grpc.http_over_grpc.HTTPOverGRPCRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTTPOverGRPCRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTTPOverGRPCRequest::ArenaDtor(void* object) {
  HTTPOverGRPCRequest* _this = reinterpret_cast< HTTPOverGRPCRequest* >(object);
  (void)_this;
}
void HTTPOverGRPCRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTTPOverGRPCRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTTPOverGRPCRequest& HTTPOverGRPCRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTTPOverGRPCRequest_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void HTTPOverGRPCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPOverGRPCRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1[json_name = "method"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.http_over_grpc.HTTPOverGRPCRequest.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2[json_name = "url"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc.http_over_grpc.HTTPOverGRPCRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.http_over_grpc.Header headers = 3[json_name = "headers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes body = 4[json_name = "body"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTTPOverGRPCRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1[json_name = "method"];
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.http_over_grpc.HTTPOverGRPCRequest.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string url = 2[json_name = "url"];
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.http_over_grpc.HTTPOverGRPCRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated .grpc.http_over_grpc.Header headers = 3[json_name = "headers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_headers(i), target, stream);
  }

  // bytes body = 4[json_name = "body"];
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.http_over_grpc.HTTPOverGRPCRequest)
  return target;
}

size_t HTTPOverGRPCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.http_over_grpc.Header headers = 3[json_name = "headers"];
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string method = 1[json_name = "method"];
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string url = 2[json_name = "url"];
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes body = 4[json_name = "body"];
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTTPOverGRPCRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPOverGRPCRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTTPOverGRPCRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.http_over_grpc.HTTPOverGRPCRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.http_over_grpc.HTTPOverGRPCRequest)
    MergeFrom(*source);
  }
}

void HTTPOverGRPCRequest::MergeFrom(const HTTPOverGRPCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
}

void HTTPOverGRPCRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPOverGRPCRequest::CopyFrom(const HTTPOverGRPCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.http_over_grpc.HTTPOverGRPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPOverGRPCRequest::IsInitialized() const {
  return true;
}

void HTTPOverGRPCRequest::InternalSwap(HTTPOverGRPCRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPOverGRPCRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTTPOverGRPCReply::InitAsDefaultInstance() {
}
class HTTPOverGRPCReply::_Internal {
 public:
};

HTTPOverGRPCReply::HTTPOverGRPCReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.http_over_grpc.HTTPOverGRPCReply)
}
HTTPOverGRPCReply::HTTPOverGRPCReply(const HTTPOverGRPCReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:grpc.http_over_grpc.HTTPOverGRPCReply)
}

void HTTPOverGRPCReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTTPOverGRPCReply_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

HTTPOverGRPCReply::~HTTPOverGRPCReply() {
  // @@protoc_insertion_point(destructor:grpc.http_over_grpc.HTTPOverGRPCReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTTPOverGRPCReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTTPOverGRPCReply::ArenaDtor(void* object) {
  HTTPOverGRPCReply* _this = reinterpret_cast< HTTPOverGRPCReply* >(object);
  (void)_this;
}
void HTTPOverGRPCReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTTPOverGRPCReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTTPOverGRPCReply& HTTPOverGRPCReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTTPOverGRPCReply_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.base);
  return *internal_default_instance();
}


void HTTPOverGRPCReply::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPOverGRPCReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1[json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grpc.http_over_grpc.Header headers = 2[json_name = "headers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes body = 3[json_name = "body"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTTPOverGRPCReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1[json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // repeated .grpc.http_over_grpc.Header headers = 2[json_name = "headers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_headers(i), target, stream);
  }

  // bytes body = 3[json_name = "body"];
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.http_over_grpc.HTTPOverGRPCReply)
  return target;
}

size_t HTTPOverGRPCReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.http_over_grpc.Header headers = 2[json_name = "headers"];
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes body = 3[json_name = "body"];
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // int32 status = 1[json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTTPOverGRPCReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPOverGRPCReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTTPOverGRPCReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.http_over_grpc.HTTPOverGRPCReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.http_over_grpc.HTTPOverGRPCReply)
    MergeFrom(*source);
  }
}

void HTTPOverGRPCReply::MergeFrom(const HTTPOverGRPCReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void HTTPOverGRPCReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPOverGRPCReply::CopyFrom(const HTTPOverGRPCReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.http_over_grpc.HTTPOverGRPCReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPOverGRPCReply::IsInitialized() const {
  return true;
}

void HTTPOverGRPCReply::InternalSwap(HTTPOverGRPCReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPOverGRPCReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace http_over_grpc
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc::http_over_grpc::Header* Arena::CreateMaybeMessage< ::grpc::http_over_grpc::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::http_over_grpc::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::http_over_grpc::HTTPOverGRPCRequest* Arena::CreateMaybeMessage< ::grpc::http_over_grpc::HTTPOverGRPCRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::http_over_grpc::HTTPOverGRPCRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::http_over_grpc::HTTPOverGRPCReply* Arena::CreateMaybeMessage< ::grpc::http_over_grpc::HTTPOverGRPCReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::http_over_grpc::HTTPOverGRPCReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
