// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/http_over_grpc/http_over_grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto;
namespace grpc {
namespace http_over_grpc {
class HTTPOverGRPCReply;
class HTTPOverGRPCReplyDefaultTypeInternal;
extern HTTPOverGRPCReplyDefaultTypeInternal _HTTPOverGRPCReply_default_instance_;
class HTTPOverGRPCRequest;
class HTTPOverGRPCRequestDefaultTypeInternal;
extern HTTPOverGRPCRequestDefaultTypeInternal _HTTPOverGRPCRequest_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace http_over_grpc
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc::http_over_grpc::HTTPOverGRPCReply* Arena::CreateMaybeMessage<::grpc::http_over_grpc::HTTPOverGRPCReply>(Arena*);
template<> ::grpc::http_over_grpc::HTTPOverGRPCRequest* Arena::CreateMaybeMessage<::grpc::http_over_grpc::HTTPOverGRPCRequest>(Arena*);
template<> ::grpc::http_over_grpc::Header* Arena::CreateMaybeMessage<::grpc::http_over_grpc::Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace http_over_grpc {

// ===================================================================

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.http_over_grpc.Header) */ {
 public:
  inline Header() : Header(nullptr) {};
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.http_over_grpc.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto);
    return ::descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string values = 2[json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // string key = 1[json_name = "key"];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:grpc.http_over_grpc.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class HTTPOverGRPCRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.http_over_grpc.HTTPOverGRPCRequest) */ {
 public:
  inline HTTPOverGRPCRequest() : HTTPOverGRPCRequest(nullptr) {};
  virtual ~HTTPOverGRPCRequest();

  HTTPOverGRPCRequest(const HTTPOverGRPCRequest& from);
  HTTPOverGRPCRequest(HTTPOverGRPCRequest&& from) noexcept
    : HTTPOverGRPCRequest() {
    *this = ::std::move(from);
  }

  inline HTTPOverGRPCRequest& operator=(const HTTPOverGRPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPOverGRPCRequest& operator=(HTTPOverGRPCRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPOverGRPCRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPOverGRPCRequest* internal_default_instance() {
    return reinterpret_cast<const HTTPOverGRPCRequest*>(
               &_HTTPOverGRPCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HTTPOverGRPCRequest& a, HTTPOverGRPCRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPOverGRPCRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPOverGRPCRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPOverGRPCRequest* New() const final {
    return CreateMaybeMessage<HTTPOverGRPCRequest>(nullptr);
  }

  HTTPOverGRPCRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPOverGRPCRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPOverGRPCRequest& from);
  void MergeFrom(const HTTPOverGRPCRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPOverGRPCRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.http_over_grpc.HTTPOverGRPCRequest";
  }
  protected:
  explicit HTTPOverGRPCRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto);
    return ::descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kMethodFieldNumber = 1,
    kUrlFieldNumber = 2,
    kBodyFieldNumber = 4,
  };
  // repeated .grpc.http_over_grpc.Header headers = 3[json_name = "headers"];
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::grpc::http_over_grpc::Header* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >*
      mutable_headers();
  private:
  const ::grpc::http_over_grpc::Header& _internal_headers(int index) const;
  ::grpc::http_over_grpc::Header* _internal_add_headers();
  public:
  const ::grpc::http_over_grpc::Header& headers(int index) const;
  ::grpc::http_over_grpc::Header* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >&
      headers() const;

  // string method = 1[json_name = "method"];
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string url = 2[json_name = "url"];
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes body = 4[json_name = "body"];
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:grpc.http_over_grpc.HTTPOverGRPCRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class HTTPOverGRPCReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.http_over_grpc.HTTPOverGRPCReply) */ {
 public:
  inline HTTPOverGRPCReply() : HTTPOverGRPCReply(nullptr) {};
  virtual ~HTTPOverGRPCReply();

  HTTPOverGRPCReply(const HTTPOverGRPCReply& from);
  HTTPOverGRPCReply(HTTPOverGRPCReply&& from) noexcept
    : HTTPOverGRPCReply() {
    *this = ::std::move(from);
  }

  inline HTTPOverGRPCReply& operator=(const HTTPOverGRPCReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPOverGRPCReply& operator=(HTTPOverGRPCReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPOverGRPCReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPOverGRPCReply* internal_default_instance() {
    return reinterpret_cast<const HTTPOverGRPCReply*>(
               &_HTTPOverGRPCReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HTTPOverGRPCReply& a, HTTPOverGRPCReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPOverGRPCReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPOverGRPCReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPOverGRPCReply* New() const final {
    return CreateMaybeMessage<HTTPOverGRPCReply>(nullptr);
  }

  HTTPOverGRPCReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPOverGRPCReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPOverGRPCReply& from);
  void MergeFrom(const HTTPOverGRPCReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPOverGRPCReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.http_over_grpc.HTTPOverGRPCReply";
  }
  protected:
  explicit HTTPOverGRPCReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto);
    return ::descriptor_table_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kBodyFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .grpc.http_over_grpc.Header headers = 2[json_name = "headers"];
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::grpc::http_over_grpc::Header* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >*
      mutable_headers();
  private:
  const ::grpc::http_over_grpc::Header& _internal_headers(int index) const;
  ::grpc::http_over_grpc::Header* _internal_add_headers();
  public:
  const ::grpc::http_over_grpc::Header& headers(int index) const;
  ::grpc::http_over_grpc::Header* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >&
      headers() const;

  // bytes body = 3[json_name = "body"];
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // int32 status = 1[json_name = "status"];
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.http_over_grpc.HTTPOverGRPCReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string key = 1[json_name = "key"];
inline void Header::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::key() const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.Header.key)
  return _internal_key();
}
inline void Header::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.Header.key)
}
inline std::string* Header::mutable_key() {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.Header.key)
  return _internal_mutable_key();
}
inline const std::string& Header::_internal_key() const {
  return key_.Get();
}
inline void Header::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.http_over_grpc.Header.key)
}
inline void Header::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.http_over_grpc.Header.key)
}
inline void Header::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.http_over_grpc.Header.key)
}
inline std::string* Header::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_key() {
  // @@protoc_insertion_point(field_release:grpc.http_over_grpc.Header.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.http_over_grpc.Header.key)
}
inline std::string* Header::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.http_over_grpc.Header.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.http_over_grpc.Header.key)
}

// repeated string values = 2[json_name = "values"];
inline int Header::_internal_values_size() const {
  return values_.size();
}
inline int Header::values_size() const {
  return _internal_values_size();
}
inline void Header::clear_values() {
  values_.Clear();
}
inline std::string* Header::add_values() {
  // @@protoc_insertion_point(field_add_mutable:grpc.http_over_grpc.Header.values)
  return _internal_add_values();
}
inline const std::string& Header::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& Header::values(int index) const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.Header.values)
  return _internal_values(index);
}
inline std::string* Header::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.Header.values)
  return values_.Mutable(index);
}
inline void Header::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.Header.values)
  values_.Mutable(index)->assign(value);
}
inline void Header::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.Header.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void Header::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.http_over_grpc.Header.values)
}
inline void Header::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.http_over_grpc.Header.values)
}
inline std::string* Header::_internal_add_values() {
  return values_.Add();
}
inline void Header::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.http_over_grpc.Header.values)
}
inline void Header::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.http_over_grpc.Header.values)
}
inline void Header::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.http_over_grpc.Header.values)
}
inline void Header::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.http_over_grpc.Header.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Header::values() const {
  // @@protoc_insertion_point(field_list:grpc.http_over_grpc.Header.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Header::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:grpc.http_over_grpc.Header.values)
  return &values_;
}

// -------------------------------------------------------------------

// HTTPOverGRPCRequest

// string method = 1[json_name = "method"];
inline void HTTPOverGRPCRequest::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPOverGRPCRequest::method() const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
  return _internal_method();
}
inline void HTTPOverGRPCRequest::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
}
inline std::string* HTTPOverGRPCRequest::mutable_method() {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
  return _internal_mutable_method();
}
inline const std::string& HTTPOverGRPCRequest::_internal_method() const {
  return method_.Get();
}
inline void HTTPOverGRPCRequest::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPOverGRPCRequest::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
}
inline void HTTPOverGRPCRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
}
inline void HTTPOverGRPCRequest::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
}
inline std::string* HTTPOverGRPCRequest::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPOverGRPCRequest::release_method() {
  // @@protoc_insertion_point(field_release:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPOverGRPCRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
}
inline std::string* HTTPOverGRPCRequest::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPOverGRPCRequest::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.http_over_grpc.HTTPOverGRPCRequest.method)
}

// string url = 2[json_name = "url"];
inline void HTTPOverGRPCRequest::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPOverGRPCRequest::url() const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
  return _internal_url();
}
inline void HTTPOverGRPCRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
}
inline std::string* HTTPOverGRPCRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
  return _internal_mutable_url();
}
inline const std::string& HTTPOverGRPCRequest::_internal_url() const {
  return url_.Get();
}
inline void HTTPOverGRPCRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPOverGRPCRequest::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
}
inline void HTTPOverGRPCRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
}
inline void HTTPOverGRPCRequest::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
}
inline std::string* HTTPOverGRPCRequest::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPOverGRPCRequest::release_url() {
  // @@protoc_insertion_point(field_release:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPOverGRPCRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
}
inline std::string* HTTPOverGRPCRequest::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPOverGRPCRequest::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.http_over_grpc.HTTPOverGRPCRequest.url)
}

// repeated .grpc.http_over_grpc.Header headers = 3[json_name = "headers"];
inline int HTTPOverGRPCRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int HTTPOverGRPCRequest::headers_size() const {
  return _internal_headers_size();
}
inline void HTTPOverGRPCRequest::clear_headers() {
  headers_.Clear();
}
inline ::grpc::http_over_grpc::Header* HTTPOverGRPCRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.HTTPOverGRPCRequest.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >*
HTTPOverGRPCRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:grpc.http_over_grpc.HTTPOverGRPCRequest.headers)
  return &headers_;
}
inline const ::grpc::http_over_grpc::Header& HTTPOverGRPCRequest::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::grpc::http_over_grpc::Header& HTTPOverGRPCRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCRequest.headers)
  return _internal_headers(index);
}
inline ::grpc::http_over_grpc::Header* HTTPOverGRPCRequest::_internal_add_headers() {
  return headers_.Add();
}
inline ::grpc::http_over_grpc::Header* HTTPOverGRPCRequest::add_headers() {
  // @@protoc_insertion_point(field_add:grpc.http_over_grpc.HTTPOverGRPCRequest.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >&
HTTPOverGRPCRequest::headers() const {
  // @@protoc_insertion_point(field_list:grpc.http_over_grpc.HTTPOverGRPCRequest.headers)
  return headers_;
}

// bytes body = 4[json_name = "body"];
inline void HTTPOverGRPCRequest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPOverGRPCRequest::body() const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
  return _internal_body();
}
inline void HTTPOverGRPCRequest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
}
inline std::string* HTTPOverGRPCRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
  return _internal_mutable_body();
}
inline const std::string& HTTPOverGRPCRequest::_internal_body() const {
  return body_.Get();
}
inline void HTTPOverGRPCRequest::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPOverGRPCRequest::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
}
inline void HTTPOverGRPCRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
}
inline void HTTPOverGRPCRequest::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
}
inline std::string* HTTPOverGRPCRequest::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPOverGRPCRequest::release_body() {
  // @@protoc_insertion_point(field_release:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPOverGRPCRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
}
inline std::string* HTTPOverGRPCRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPOverGRPCRequest::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.http_over_grpc.HTTPOverGRPCRequest.body)
}

// -------------------------------------------------------------------

// HTTPOverGRPCReply

// int32 status = 1[json_name = "status"];
inline void HTTPOverGRPCReply::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HTTPOverGRPCReply::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HTTPOverGRPCReply::status() const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCReply.status)
  return _internal_status();
}
inline void HTTPOverGRPCReply::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void HTTPOverGRPCReply::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.HTTPOverGRPCReply.status)
}

// repeated .grpc.http_over_grpc.Header headers = 2[json_name = "headers"];
inline int HTTPOverGRPCReply::_internal_headers_size() const {
  return headers_.size();
}
inline int HTTPOverGRPCReply::headers_size() const {
  return _internal_headers_size();
}
inline void HTTPOverGRPCReply::clear_headers() {
  headers_.Clear();
}
inline ::grpc::http_over_grpc::Header* HTTPOverGRPCReply::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.HTTPOverGRPCReply.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >*
HTTPOverGRPCReply::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:grpc.http_over_grpc.HTTPOverGRPCReply.headers)
  return &headers_;
}
inline const ::grpc::http_over_grpc::Header& HTTPOverGRPCReply::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::grpc::http_over_grpc::Header& HTTPOverGRPCReply::headers(int index) const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCReply.headers)
  return _internal_headers(index);
}
inline ::grpc::http_over_grpc::Header* HTTPOverGRPCReply::_internal_add_headers() {
  return headers_.Add();
}
inline ::grpc::http_over_grpc::Header* HTTPOverGRPCReply::add_headers() {
  // @@protoc_insertion_point(field_add:grpc.http_over_grpc.HTTPOverGRPCReply.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::http_over_grpc::Header >&
HTTPOverGRPCReply::headers() const {
  // @@protoc_insertion_point(field_list:grpc.http_over_grpc.HTTPOverGRPCReply.headers)
  return headers_;
}

// bytes body = 3[json_name = "body"];
inline void HTTPOverGRPCReply::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPOverGRPCReply::body() const {
  // @@protoc_insertion_point(field_get:grpc.http_over_grpc.HTTPOverGRPCReply.body)
  return _internal_body();
}
inline void HTTPOverGRPCReply::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:grpc.http_over_grpc.HTTPOverGRPCReply.body)
}
inline std::string* HTTPOverGRPCReply::mutable_body() {
  // @@protoc_insertion_point(field_mutable:grpc.http_over_grpc.HTTPOverGRPCReply.body)
  return _internal_mutable_body();
}
inline const std::string& HTTPOverGRPCReply::_internal_body() const {
  return body_.Get();
}
inline void HTTPOverGRPCReply::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPOverGRPCReply::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.http_over_grpc.HTTPOverGRPCReply.body)
}
inline void HTTPOverGRPCReply::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.http_over_grpc.HTTPOverGRPCReply.body)
}
inline void HTTPOverGRPCReply::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.http_over_grpc.HTTPOverGRPCReply.body)
}
inline std::string* HTTPOverGRPCReply::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPOverGRPCReply::release_body() {
  // @@protoc_insertion_point(field_release:grpc.http_over_grpc.HTTPOverGRPCReply.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPOverGRPCReply::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.http_over_grpc.HTTPOverGRPCReply.body)
}
inline std::string* HTTPOverGRPCReply::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.http_over_grpc.HTTPOverGRPCReply.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPOverGRPCReply::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.http_over_grpc.HTTPOverGRPCReply.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace http_over_grpc
}  // namespace grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpc_2fhttp_5fover_5fgrpc_2fhttp_5fover_5fgrpc_2eproto
