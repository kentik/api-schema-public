// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/binary_log/v1alpha/log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
namespace grpc {
namespace binary_log {
namespace v1alpha {
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_ClientInitialMetadata;
class Metadata_ClientInitialMetadataDefaultTypeInternal;
extern Metadata_ClientInitialMetadataDefaultTypeInternal _Metadata_ClientInitialMetadata_default_instance_;
class Metadata_ServerInitialMetadata;
class Metadata_ServerInitialMetadataDefaultTypeInternal;
extern Metadata_ServerInitialMetadataDefaultTypeInternal _Metadata_ServerInitialMetadata_default_instance_;
class Metadata_ServerStatus;
class Metadata_ServerStatusDefaultTypeInternal;
extern Metadata_ServerStatusDefaultTypeInternal _Metadata_ServerStatus_default_instance_;
class Metadata_UserData;
class Metadata_UserDataDefaultTypeInternal;
extern Metadata_UserDataDefaultTypeInternal _Metadata_UserData_default_instance_;
}  // namespace v1alpha
}  // namespace binary_log
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc::binary_log::v1alpha::KeyValuePair* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::KeyValuePair>(Arena*);
template<> ::grpc::binary_log::v1alpha::Message* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::Message>(Arena*);
template<> ::grpc::binary_log::v1alpha::Metadata* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::Metadata>(Arena*);
template<> ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata>(Arena*);
template<> ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata>(Arena*);
template<> ::grpc::binary_log::v1alpha::Metadata_ServerStatus* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::Metadata_ServerStatus>(Arena*);
template<> ::grpc::binary_log::v1alpha::Metadata_UserData* Arena::CreateMaybeMessage<::grpc::binary_log::v1alpha::Metadata_UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace binary_log {
namespace v1alpha {

enum Direction : int {
  SERVER_SEND = 0,
  SERVER_RECV = 1,
  CLIENT_SEND = 2,
  CLIENT_RECV = 3,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = SERVER_SEND;
constexpr Direction Direction_MAX = CLIENT_RECV;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    const std::string& name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class KeyValuePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {};
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1[json_name = "key"];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2[json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// -------------------------------------------------------------------

class Metadata_ClientInitialMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata) */ {
 public:
  inline Metadata_ClientInitialMetadata() : Metadata_ClientInitialMetadata(nullptr) {};
  virtual ~Metadata_ClientInitialMetadata();

  Metadata_ClientInitialMetadata(const Metadata_ClientInitialMetadata& from);
  Metadata_ClientInitialMetadata(Metadata_ClientInitialMetadata&& from) noexcept
    : Metadata_ClientInitialMetadata() {
    *this = ::std::move(from);
  }

  inline Metadata_ClientInitialMetadata& operator=(const Metadata_ClientInitialMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_ClientInitialMetadata& operator=(Metadata_ClientInitialMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata_ClientInitialMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata_ClientInitialMetadata* internal_default_instance() {
    return reinterpret_cast<const Metadata_ClientInitialMetadata*>(
               &_Metadata_ClientInitialMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata_ClientInitialMetadata& a, Metadata_ClientInitialMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_ClientInitialMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_ClientInitialMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata_ClientInitialMetadata* New() const final {
    return CreateMaybeMessage<Metadata_ClientInitialMetadata>(nullptr);
  }

  Metadata_ClientInitialMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata_ClientInitialMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata_ClientInitialMetadata& from);
  void MergeFrom(const Metadata_ClientInitialMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_ClientInitialMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata";
  }
  protected:
  explicit Metadata_ClientInitialMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 1,
    kPeerFieldNumber = 3,
    kDeadlineFieldNumber = 2,
  };
  // string method_name = 1[json_name = "methodName"];
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method_name(
      std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string peer = 3[json_name = "peer"];
  void clear_peer();
  const std::string& peer() const;
  void set_peer(const std::string& value);
  void set_peer(std::string&& value);
  void set_peer(const char* value);
  void set_peer(const char* value, size_t size);
  std::string* mutable_peer();
  std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_peer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_peer(
      std::string* peer);
  private:
  const std::string& _internal_peer() const;
  void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // .google.protobuf.Timestamp deadline = 2[json_name = "deadline"];
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  const PROTOBUF_NAMESPACE_ID::Timestamp& deadline() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_deadline();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deadline();
  void set_allocated_deadline(PROTOBUF_NAMESPACE_ID::Timestamp* deadline);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deadline() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deadline();
  public:
  void unsafe_arena_set_allocated_deadline(
      PROTOBUF_NAMESPACE_ID::Timestamp* deadline);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deadline();

  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
  PROTOBUF_NAMESPACE_ID::Timestamp* deadline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// -------------------------------------------------------------------

class Metadata_UserData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.Metadata.UserData) */ {
 public:
  inline Metadata_UserData() : Metadata_UserData(nullptr) {};
  virtual ~Metadata_UserData();

  Metadata_UserData(const Metadata_UserData& from);
  Metadata_UserData(Metadata_UserData&& from) noexcept
    : Metadata_UserData() {
    *this = ::std::move(from);
  }

  inline Metadata_UserData& operator=(const Metadata_UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_UserData& operator=(Metadata_UserData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata_UserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata_UserData* internal_default_instance() {
    return reinterpret_cast<const Metadata_UserData*>(
               &_Metadata_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metadata_UserData& a, Metadata_UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_UserData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata_UserData* New() const final {
    return CreateMaybeMessage<Metadata_UserData>(nullptr);
  }

  Metadata_UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata_UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata_UserData& from);
  void MergeFrom(const Metadata_UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.Metadata.UserData";
  }
  protected:
  explicit Metadata_UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.Metadata.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// -------------------------------------------------------------------

class Metadata_ServerInitialMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.Metadata.ServerInitialMetadata) */ {
 public:
  inline Metadata_ServerInitialMetadata() : Metadata_ServerInitialMetadata(nullptr) {};
  virtual ~Metadata_ServerInitialMetadata();

  Metadata_ServerInitialMetadata(const Metadata_ServerInitialMetadata& from);
  Metadata_ServerInitialMetadata(Metadata_ServerInitialMetadata&& from) noexcept
    : Metadata_ServerInitialMetadata() {
    *this = ::std::move(from);
  }

  inline Metadata_ServerInitialMetadata& operator=(const Metadata_ServerInitialMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_ServerInitialMetadata& operator=(Metadata_ServerInitialMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata_ServerInitialMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata_ServerInitialMetadata* internal_default_instance() {
    return reinterpret_cast<const Metadata_ServerInitialMetadata*>(
               &_Metadata_ServerInitialMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Metadata_ServerInitialMetadata& a, Metadata_ServerInitialMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_ServerInitialMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_ServerInitialMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata_ServerInitialMetadata* New() const final {
    return CreateMaybeMessage<Metadata_ServerInitialMetadata>(nullptr);
  }

  Metadata_ServerInitialMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata_ServerInitialMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata_ServerInitialMetadata& from);
  void MergeFrom(const Metadata_ServerInitialMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_ServerInitialMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.Metadata.ServerInitialMetadata";
  }
  protected:
  explicit Metadata_ServerInitialMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.Metadata.ServerInitialMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// -------------------------------------------------------------------

class Metadata_ServerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.Metadata.ServerStatus) */ {
 public:
  inline Metadata_ServerStatus() : Metadata_ServerStatus(nullptr) {};
  virtual ~Metadata_ServerStatus();

  Metadata_ServerStatus(const Metadata_ServerStatus& from);
  Metadata_ServerStatus(Metadata_ServerStatus&& from) noexcept
    : Metadata_ServerStatus() {
    *this = ::std::move(from);
  }

  inline Metadata_ServerStatus& operator=(const Metadata_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata_ServerStatus& operator=(Metadata_ServerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata_ServerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata_ServerStatus* internal_default_instance() {
    return reinterpret_cast<const Metadata_ServerStatus*>(
               &_Metadata_ServerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Metadata_ServerStatus& a, Metadata_ServerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata_ServerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata_ServerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata_ServerStatus* New() const final {
    return CreateMaybeMessage<Metadata_ServerStatus>(nullptr);
  }

  Metadata_ServerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata_ServerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata_ServerStatus& from);
  void MergeFrom(const Metadata_ServerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata_ServerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.Metadata.ServerStatus";
  }
  protected:
  explicit Metadata_ServerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string details = 2[json_name = "details"];
  void clear_details();
  const std::string& details() const;
  void set_details(const std::string& value);
  void set_details(std::string&& value);
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  std::string* mutable_details();
  std::string* release_details();
  void set_allocated_details(std::string* details);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_details();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_details(
      std::string* details);
  private:
  const std::string& _internal_details() const;
  void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // uint32 code = 1[json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.Metadata.ServerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// -------------------------------------------------------------------

class Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {};
  virtual ~Metadata();

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance();

  enum KindCase {
    kClientInitialMetadata = 5,
    kUserData = 6,
    kServerInitialMetadata = 7,
    kServerStatus = 8,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Metadata_ClientInitialMetadata ClientInitialMetadata;
  typedef Metadata_UserData UserData;
  typedef Metadata_ServerInitialMetadata ServerInitialMetadata;
  typedef Metadata_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kRpcIdFieldNumber = 1,
    kDirectionFieldNumber = 3,
    kClientInitialMetadataFieldNumber = 5,
    kUserDataFieldNumber = 6,
    kServerInitialMetadataFieldNumber = 7,
    kServerStatusFieldNumber = 8,
  };
  // repeated .grpc.binary_log.v1alpha.KeyValuePair metadata = 4[json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::grpc::binary_log::v1alpha::KeyValuePair* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::binary_log::v1alpha::KeyValuePair >*
      mutable_metadata();
  private:
  const ::grpc::binary_log::v1alpha::KeyValuePair& _internal_metadata(int index) const;
  ::grpc::binary_log::v1alpha::KeyValuePair* _internal_add_metadata();
  public:
  const ::grpc::binary_log::v1alpha::KeyValuePair& metadata(int index) const;
  ::grpc::binary_log::v1alpha::KeyValuePair* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::binary_log::v1alpha::KeyValuePair >&
      metadata() const;

  // .google.protobuf.Timestamp timestamp = 2[json_name = "timestamp"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 rpc_id = 1[json_name = "rpcId"];
  void clear_rpc_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rpc_id() const;
  void set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rpc_id() const;
  void _internal_set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .grpc.binary_log.v1alpha.Direction direction = 3[json_name = "direction"];
  void clear_direction();
  ::grpc::binary_log::v1alpha::Direction direction() const;
  void set_direction(::grpc::binary_log::v1alpha::Direction value);
  private:
  ::grpc::binary_log::v1alpha::Direction _internal_direction() const;
  void _internal_set_direction(::grpc::binary_log::v1alpha::Direction value);
  public:

  // .grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata client_initial_metadata = 5[json_name = "clientInitialMetadata"];
  bool has_client_initial_metadata() const;
  private:
  bool _internal_has_client_initial_metadata() const;
  public:
  void clear_client_initial_metadata();
  const ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata& client_initial_metadata() const;
  ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* release_client_initial_metadata();
  ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* mutable_client_initial_metadata();
  void set_allocated_client_initial_metadata(::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* client_initial_metadata);
  private:
  const ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata& _internal_client_initial_metadata() const;
  ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* _internal_mutable_client_initial_metadata();
  public:
  void unsafe_arena_set_allocated_client_initial_metadata(
      ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* client_initial_metadata);
  ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* unsafe_arena_release_client_initial_metadata();

  // .grpc.binary_log.v1alpha.Metadata.UserData user_data = 6[json_name = "userData"];
  bool has_user_data() const;
  private:
  bool _internal_has_user_data() const;
  public:
  void clear_user_data();
  const ::grpc::binary_log::v1alpha::Metadata_UserData& user_data() const;
  ::grpc::binary_log::v1alpha::Metadata_UserData* release_user_data();
  ::grpc::binary_log::v1alpha::Metadata_UserData* mutable_user_data();
  void set_allocated_user_data(::grpc::binary_log::v1alpha::Metadata_UserData* user_data);
  private:
  const ::grpc::binary_log::v1alpha::Metadata_UserData& _internal_user_data() const;
  ::grpc::binary_log::v1alpha::Metadata_UserData* _internal_mutable_user_data();
  public:
  void unsafe_arena_set_allocated_user_data(
      ::grpc::binary_log::v1alpha::Metadata_UserData* user_data);
  ::grpc::binary_log::v1alpha::Metadata_UserData* unsafe_arena_release_user_data();

  // .grpc.binary_log.v1alpha.Metadata.ServerInitialMetadata server_initial_metadata = 7[json_name = "serverInitialMetadata"];
  bool has_server_initial_metadata() const;
  private:
  bool _internal_has_server_initial_metadata() const;
  public:
  void clear_server_initial_metadata();
  const ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata& server_initial_metadata() const;
  ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* release_server_initial_metadata();
  ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* mutable_server_initial_metadata();
  void set_allocated_server_initial_metadata(::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* server_initial_metadata);
  private:
  const ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata& _internal_server_initial_metadata() const;
  ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* _internal_mutable_server_initial_metadata();
  public:
  void unsafe_arena_set_allocated_server_initial_metadata(
      ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* server_initial_metadata);
  ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* unsafe_arena_release_server_initial_metadata();

  // .grpc.binary_log.v1alpha.Metadata.ServerStatus server_status = 8[json_name = "serverStatus"];
  bool has_server_status() const;
  private:
  bool _internal_has_server_status() const;
  public:
  void clear_server_status();
  const ::grpc::binary_log::v1alpha::Metadata_ServerStatus& server_status() const;
  ::grpc::binary_log::v1alpha::Metadata_ServerStatus* release_server_status();
  ::grpc::binary_log::v1alpha::Metadata_ServerStatus* mutable_server_status();
  void set_allocated_server_status(::grpc::binary_log::v1alpha::Metadata_ServerStatus* server_status);
  private:
  const ::grpc::binary_log::v1alpha::Metadata_ServerStatus& _internal_server_status() const;
  ::grpc::binary_log::v1alpha::Metadata_ServerStatus* _internal_mutable_server_status();
  public:
  void unsafe_arena_set_allocated_server_status(
      ::grpc::binary_log::v1alpha::Metadata_ServerStatus* server_status);
  ::grpc::binary_log::v1alpha::Metadata_ServerStatus* unsafe_arena_release_server_status();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.Metadata)
 private:
  class _Internal;
  void set_has_client_initial_metadata();
  void set_has_user_data();
  void set_has_server_initial_metadata();
  void set_has_server_status();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::binary_log::v1alpha::KeyValuePair > metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rpc_id_;
  int direction_;
  union KindUnion {
    KindUnion() {}
    ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* client_initial_metadata_;
    ::grpc::binary_log::v1alpha::Metadata_UserData* user_data_;
    ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* server_initial_metadata_;
    ::grpc::binary_log::v1alpha::Metadata_ServerStatus* server_status_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.binary_log.v1alpha.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.binary_log.v1alpha.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto);
    return ::descriptor_table_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kRpcIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
    kDirectionFieldNumber = 3,
    kLengthFieldNumber = 4,
  };
  // bytes data = 5[json_name = "data"];
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 rpc_id = 1[json_name = "rpcId"];
  void clear_rpc_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rpc_id() const;
  void set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rpc_id() const;
  void _internal_set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sequence_number = 2[json_name = "sequenceNumber"];
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .grpc.binary_log.v1alpha.Direction direction = 3[json_name = "direction"];
  void clear_direction();
  ::grpc::binary_log::v1alpha::Direction direction() const;
  void set_direction(::grpc::binary_log::v1alpha::Direction value);
  private:
  ::grpc::binary_log::v1alpha::Direction _internal_direction() const;
  void _internal_set_direction(::grpc::binary_log::v1alpha::Direction value);
  public:

  // uint32 length = 4[json_name = "length"];
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.binary_log.v1alpha.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rpc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValuePair

// string key = 1[json_name = "key"];
inline void KeyValuePair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.KeyValuePair.key)
  return _internal_key();
}
inline void KeyValuePair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.KeyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValuePair::_internal_key() const {
  return key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValuePair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.binary_log.v1alpha.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.binary_log.v1alpha.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.binary_log.v1alpha.KeyValuePair.key)
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.KeyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.KeyValuePair.key)
}
inline std::string* KeyValuePair::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.KeyValuePair.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValuePair::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.KeyValuePair.key)
}

// string value = 2[json_name = "value"];
inline void KeyValuePair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValuePair::_internal_value() const {
  return value_.Get();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValuePair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.binary_log.v1alpha.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.binary_log.v1alpha.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.binary_log.v1alpha.KeyValuePair.value)
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.KeyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.KeyValuePair.value)
}
inline std::string* KeyValuePair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.KeyValuePair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValuePair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.KeyValuePair.value)
}

// -------------------------------------------------------------------

// Metadata_ClientInitialMetadata

// string method_name = 1[json_name = "methodName"];
inline void Metadata_ClientInitialMetadata::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Metadata_ClientInitialMetadata::method_name() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
  return _internal_method_name();
}
inline void Metadata_ClientInitialMetadata::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
}
inline std::string* Metadata_ClientInitialMetadata::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& Metadata_ClientInitialMetadata::_internal_method_name() const {
  return method_name_.Get();
}
inline void Metadata_ClientInitialMetadata::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Metadata_ClientInitialMetadata::set_method_name(std::string&& value) {
  
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
}
inline void Metadata_ClientInitialMetadata::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
}
inline void Metadata_ClientInitialMetadata::set_method_name(const char* value,
    size_t size) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
}
inline std::string* Metadata_ClientInitialMetadata::_internal_mutable_method_name() {
  
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Metadata_ClientInitialMetadata::release_method_name() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metadata_ClientInitialMetadata::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
}
inline std::string* Metadata_ClientInitialMetadata::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Metadata_ClientInitialMetadata::unsafe_arena_set_allocated_method_name(
    std::string* method_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.method_name)
}

// .google.protobuf.Timestamp deadline = 2[json_name = "deadline"];
inline bool Metadata_ClientInitialMetadata::_internal_has_deadline() const {
  return this != internal_default_instance() && deadline_ != nullptr;
}
inline bool Metadata_ClientInitialMetadata::has_deadline() const {
  return _internal_has_deadline();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Metadata_ClientInitialMetadata::_internal_deadline() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = deadline_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Metadata_ClientInitialMetadata::deadline() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.deadline)
  return _internal_deadline();
}
inline void Metadata_ClientInitialMetadata::unsafe_arena_set_allocated_deadline(
    PROTOBUF_NAMESPACE_ID::Timestamp* deadline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline_);
  }
  deadline_ = deadline;
  if (deadline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.deadline)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata_ClientInitialMetadata::release_deadline() {
  auto temp = unsafe_arena_release_deadline();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata_ClientInitialMetadata::unsafe_arena_release_deadline() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.deadline)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = deadline_;
  deadline_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata_ClientInitialMetadata::_internal_mutable_deadline() {
  
  if (deadline_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    deadline_ = p;
  }
  return deadline_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata_ClientInitialMetadata::mutable_deadline() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.deadline)
  return _internal_mutable_deadline();
}
inline void Metadata_ClientInitialMetadata::set_allocated_deadline(PROTOBUF_NAMESPACE_ID::Timestamp* deadline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline_);
  }
  if (deadline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline)->GetArena();
    if (message_arena != submessage_arena) {
      deadline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deadline, submessage_arena);
    }
    
  } else {
    
  }
  deadline_ = deadline;
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.deadline)
}

// string peer = 3[json_name = "peer"];
inline void Metadata_ClientInitialMetadata::clear_peer() {
  peer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Metadata_ClientInitialMetadata::peer() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
  return _internal_peer();
}
inline void Metadata_ClientInitialMetadata::set_peer(const std::string& value) {
  _internal_set_peer(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
}
inline std::string* Metadata_ClientInitialMetadata::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
  return _internal_mutable_peer();
}
inline const std::string& Metadata_ClientInitialMetadata::_internal_peer() const {
  return peer_.Get();
}
inline void Metadata_ClientInitialMetadata::_internal_set_peer(const std::string& value) {
  
  peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Metadata_ClientInitialMetadata::set_peer(std::string&& value) {
  
  peer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
}
inline void Metadata_ClientInitialMetadata::set_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
}
inline void Metadata_ClientInitialMetadata::set_peer(const char* value,
    size_t size) {
  
  peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
}
inline std::string* Metadata_ClientInitialMetadata::_internal_mutable_peer() {
  
  return peer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Metadata_ClientInitialMetadata::release_peer() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
  return peer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metadata_ClientInitialMetadata::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
}
inline std::string* Metadata_ClientInitialMetadata::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return peer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Metadata_ClientInitialMetadata::unsafe_arena_set_allocated_peer(
    std::string* peer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      peer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata.peer)
}

// -------------------------------------------------------------------

// Metadata_UserData

// -------------------------------------------------------------------

// Metadata_ServerInitialMetadata

// -------------------------------------------------------------------

// Metadata_ServerStatus

// uint32 code = 1[json_name = "code"];
inline void Metadata_ServerStatus::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Metadata_ServerStatus::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Metadata_ServerStatus::code() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.ServerStatus.code)
  return _internal_code();
}
inline void Metadata_ServerStatus::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void Metadata_ServerStatus::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Metadata.ServerStatus.code)
}

// string details = 2[json_name = "details"];
inline void Metadata_ServerStatus::clear_details() {
  details_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Metadata_ServerStatus::details() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
  return _internal_details();
}
inline void Metadata_ServerStatus::set_details(const std::string& value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
}
inline std::string* Metadata_ServerStatus::mutable_details() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
  return _internal_mutable_details();
}
inline const std::string& Metadata_ServerStatus::_internal_details() const {
  return details_.Get();
}
inline void Metadata_ServerStatus::_internal_set_details(const std::string& value) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Metadata_ServerStatus::set_details(std::string&& value) {
  
  details_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
}
inline void Metadata_ServerStatus::set_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
}
inline void Metadata_ServerStatus::set_details(const char* value,
    size_t size) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
}
inline std::string* Metadata_ServerStatus::_internal_mutable_details() {
  
  return details_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Metadata_ServerStatus::release_details() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
  return details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metadata_ServerStatus::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
}
inline std::string* Metadata_ServerStatus::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return details_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Metadata_ServerStatus::unsafe_arena_set_allocated_details(
    std::string* details) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (details != nullptr) {
    
  } else {
    
  }
  details_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      details, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.ServerStatus.details)
}

// -------------------------------------------------------------------

// Metadata

// uint64 rpc_id = 1[json_name = "rpcId"];
inline void Metadata::clear_rpc_id() {
  rpc_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::_internal_rpc_id() const {
  return rpc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::rpc_id() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.rpc_id)
  return _internal_rpc_id();
}
inline void Metadata::_internal_set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rpc_id_ = value;
}
inline void Metadata::set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rpc_id(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Metadata.rpc_id)
}

// .google.protobuf.Timestamp timestamp = 2[json_name = "timestamp"];
inline bool Metadata::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Metadata::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Metadata::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Metadata::timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.timestamp)
  return _internal_timestamp();
}
inline void Metadata::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.timestamp)
  return _internal_mutable_timestamp();
}
inline void Metadata::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.Metadata.timestamp)
}

// .grpc.binary_log.v1alpha.Direction direction = 3[json_name = "direction"];
inline void Metadata::clear_direction() {
  direction_ = 0;
}
inline ::grpc::binary_log::v1alpha::Direction Metadata::_internal_direction() const {
  return static_cast< ::grpc::binary_log::v1alpha::Direction >(direction_);
}
inline ::grpc::binary_log::v1alpha::Direction Metadata::direction() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.direction)
  return _internal_direction();
}
inline void Metadata::_internal_set_direction(::grpc::binary_log::v1alpha::Direction value) {
  
  direction_ = value;
}
inline void Metadata::set_direction(::grpc::binary_log::v1alpha::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Metadata.direction)
}

// repeated .grpc.binary_log.v1alpha.KeyValuePair metadata = 4[json_name = "metadata"];
inline int Metadata::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Metadata::metadata_size() const {
  return _internal_metadata_size();
}
inline void Metadata::clear_metadata() {
  metadata_.Clear();
}
inline ::grpc::binary_log::v1alpha::KeyValuePair* Metadata::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::binary_log::v1alpha::KeyValuePair >*
Metadata::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:grpc.binary_log.v1alpha.Metadata.metadata)
  return &metadata_;
}
inline const ::grpc::binary_log::v1alpha::KeyValuePair& Metadata::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::grpc::binary_log::v1alpha::KeyValuePair& Metadata::metadata(int index) const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.metadata)
  return _internal_metadata(index);
}
inline ::grpc::binary_log::v1alpha::KeyValuePair* Metadata::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::grpc::binary_log::v1alpha::KeyValuePair* Metadata::add_metadata() {
  // @@protoc_insertion_point(field_add:grpc.binary_log.v1alpha.Metadata.metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::binary_log::v1alpha::KeyValuePair >&
Metadata::metadata() const {
  // @@protoc_insertion_point(field_list:grpc.binary_log.v1alpha.Metadata.metadata)
  return metadata_;
}

// .grpc.binary_log.v1alpha.Metadata.ClientInitialMetadata client_initial_metadata = 5[json_name = "clientInitialMetadata"];
inline bool Metadata::_internal_has_client_initial_metadata() const {
  return kind_case() == kClientInitialMetadata;
}
inline bool Metadata::has_client_initial_metadata() const {
  return _internal_has_client_initial_metadata();
}
inline void Metadata::set_has_client_initial_metadata() {
  _oneof_case_[0] = kClientInitialMetadata;
}
inline void Metadata::clear_client_initial_metadata() {
  if (_internal_has_client_initial_metadata()) {
    if (GetArena() == nullptr) {
      delete kind_.client_initial_metadata_;
    }
    clear_has_kind();
  }
}
inline ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* Metadata::release_client_initial_metadata() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.client_initial_metadata)
  if (_internal_has_client_initial_metadata()) {
    clear_has_kind();
      ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* temp = kind_.client_initial_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.client_initial_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata& Metadata::_internal_client_initial_metadata() const {
  return _internal_has_client_initial_metadata()
      ? *kind_.client_initial_metadata_
      : *reinterpret_cast< ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata*>(&::grpc::binary_log::v1alpha::_Metadata_ClientInitialMetadata_default_instance_);
}
inline const ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata& Metadata::client_initial_metadata() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.client_initial_metadata)
  return _internal_client_initial_metadata();
}
inline ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* Metadata::unsafe_arena_release_client_initial_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.client_initial_metadata)
  if (_internal_has_client_initial_metadata()) {
    clear_has_kind();
    ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* temp = kind_.client_initial_metadata_;
    kind_.client_initial_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metadata::unsafe_arena_set_allocated_client_initial_metadata(::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* client_initial_metadata) {
  clear_kind();
  if (client_initial_metadata) {
    set_has_client_initial_metadata();
    kind_.client_initial_metadata_ = client_initial_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.client_initial_metadata)
}
inline ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* Metadata::_internal_mutable_client_initial_metadata() {
  if (!_internal_has_client_initial_metadata()) {
    clear_kind();
    set_has_client_initial_metadata();
    kind_.client_initial_metadata_ = CreateMaybeMessage< ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata >(GetArena());
  }
  return kind_.client_initial_metadata_;
}
inline ::grpc::binary_log::v1alpha::Metadata_ClientInitialMetadata* Metadata::mutable_client_initial_metadata() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.client_initial_metadata)
  return _internal_mutable_client_initial_metadata();
}

// .grpc.binary_log.v1alpha.Metadata.UserData user_data = 6[json_name = "userData"];
inline bool Metadata::_internal_has_user_data() const {
  return kind_case() == kUserData;
}
inline bool Metadata::has_user_data() const {
  return _internal_has_user_data();
}
inline void Metadata::set_has_user_data() {
  _oneof_case_[0] = kUserData;
}
inline void Metadata::clear_user_data() {
  if (_internal_has_user_data()) {
    if (GetArena() == nullptr) {
      delete kind_.user_data_;
    }
    clear_has_kind();
  }
}
inline ::grpc::binary_log::v1alpha::Metadata_UserData* Metadata::release_user_data() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.user_data)
  if (_internal_has_user_data()) {
    clear_has_kind();
      ::grpc::binary_log::v1alpha::Metadata_UserData* temp = kind_.user_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.user_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::binary_log::v1alpha::Metadata_UserData& Metadata::_internal_user_data() const {
  return _internal_has_user_data()
      ? *kind_.user_data_
      : *reinterpret_cast< ::grpc::binary_log::v1alpha::Metadata_UserData*>(&::grpc::binary_log::v1alpha::_Metadata_UserData_default_instance_);
}
inline const ::grpc::binary_log::v1alpha::Metadata_UserData& Metadata::user_data() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.user_data)
  return _internal_user_data();
}
inline ::grpc::binary_log::v1alpha::Metadata_UserData* Metadata::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.user_data)
  if (_internal_has_user_data()) {
    clear_has_kind();
    ::grpc::binary_log::v1alpha::Metadata_UserData* temp = kind_.user_data_;
    kind_.user_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metadata::unsafe_arena_set_allocated_user_data(::grpc::binary_log::v1alpha::Metadata_UserData* user_data) {
  clear_kind();
  if (user_data) {
    set_has_user_data();
    kind_.user_data_ = user_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.user_data)
}
inline ::grpc::binary_log::v1alpha::Metadata_UserData* Metadata::_internal_mutable_user_data() {
  if (!_internal_has_user_data()) {
    clear_kind();
    set_has_user_data();
    kind_.user_data_ = CreateMaybeMessage< ::grpc::binary_log::v1alpha::Metadata_UserData >(GetArena());
  }
  return kind_.user_data_;
}
inline ::grpc::binary_log::v1alpha::Metadata_UserData* Metadata::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.user_data)
  return _internal_mutable_user_data();
}

// .grpc.binary_log.v1alpha.Metadata.ServerInitialMetadata server_initial_metadata = 7[json_name = "serverInitialMetadata"];
inline bool Metadata::_internal_has_server_initial_metadata() const {
  return kind_case() == kServerInitialMetadata;
}
inline bool Metadata::has_server_initial_metadata() const {
  return _internal_has_server_initial_metadata();
}
inline void Metadata::set_has_server_initial_metadata() {
  _oneof_case_[0] = kServerInitialMetadata;
}
inline void Metadata::clear_server_initial_metadata() {
  if (_internal_has_server_initial_metadata()) {
    if (GetArena() == nullptr) {
      delete kind_.server_initial_metadata_;
    }
    clear_has_kind();
  }
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* Metadata::release_server_initial_metadata() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.server_initial_metadata)
  if (_internal_has_server_initial_metadata()) {
    clear_has_kind();
      ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* temp = kind_.server_initial_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.server_initial_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata& Metadata::_internal_server_initial_metadata() const {
  return _internal_has_server_initial_metadata()
      ? *kind_.server_initial_metadata_
      : *reinterpret_cast< ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata*>(&::grpc::binary_log::v1alpha::_Metadata_ServerInitialMetadata_default_instance_);
}
inline const ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata& Metadata::server_initial_metadata() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.server_initial_metadata)
  return _internal_server_initial_metadata();
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* Metadata::unsafe_arena_release_server_initial_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.server_initial_metadata)
  if (_internal_has_server_initial_metadata()) {
    clear_has_kind();
    ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* temp = kind_.server_initial_metadata_;
    kind_.server_initial_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metadata::unsafe_arena_set_allocated_server_initial_metadata(::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* server_initial_metadata) {
  clear_kind();
  if (server_initial_metadata) {
    set_has_server_initial_metadata();
    kind_.server_initial_metadata_ = server_initial_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.server_initial_metadata)
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* Metadata::_internal_mutable_server_initial_metadata() {
  if (!_internal_has_server_initial_metadata()) {
    clear_kind();
    set_has_server_initial_metadata();
    kind_.server_initial_metadata_ = CreateMaybeMessage< ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata >(GetArena());
  }
  return kind_.server_initial_metadata_;
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerInitialMetadata* Metadata::mutable_server_initial_metadata() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.server_initial_metadata)
  return _internal_mutable_server_initial_metadata();
}

// .grpc.binary_log.v1alpha.Metadata.ServerStatus server_status = 8[json_name = "serverStatus"];
inline bool Metadata::_internal_has_server_status() const {
  return kind_case() == kServerStatus;
}
inline bool Metadata::has_server_status() const {
  return _internal_has_server_status();
}
inline void Metadata::set_has_server_status() {
  _oneof_case_[0] = kServerStatus;
}
inline void Metadata::clear_server_status() {
  if (_internal_has_server_status()) {
    if (GetArena() == nullptr) {
      delete kind_.server_status_;
    }
    clear_has_kind();
  }
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerStatus* Metadata::release_server_status() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Metadata.server_status)
  if (_internal_has_server_status()) {
    clear_has_kind();
      ::grpc::binary_log::v1alpha::Metadata_ServerStatus* temp = kind_.server_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.server_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::binary_log::v1alpha::Metadata_ServerStatus& Metadata::_internal_server_status() const {
  return _internal_has_server_status()
      ? *kind_.server_status_
      : *reinterpret_cast< ::grpc::binary_log::v1alpha::Metadata_ServerStatus*>(&::grpc::binary_log::v1alpha::_Metadata_ServerStatus_default_instance_);
}
inline const ::grpc::binary_log::v1alpha::Metadata_ServerStatus& Metadata::server_status() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Metadata.server_status)
  return _internal_server_status();
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerStatus* Metadata::unsafe_arena_release_server_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Metadata.server_status)
  if (_internal_has_server_status()) {
    clear_has_kind();
    ::grpc::binary_log::v1alpha::Metadata_ServerStatus* temp = kind_.server_status_;
    kind_.server_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metadata::unsafe_arena_set_allocated_server_status(::grpc::binary_log::v1alpha::Metadata_ServerStatus* server_status) {
  clear_kind();
  if (server_status) {
    set_has_server_status();
    kind_.server_status_ = server_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Metadata.server_status)
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerStatus* Metadata::_internal_mutable_server_status() {
  if (!_internal_has_server_status()) {
    clear_kind();
    set_has_server_status();
    kind_.server_status_ = CreateMaybeMessage< ::grpc::binary_log::v1alpha::Metadata_ServerStatus >(GetArena());
  }
  return kind_.server_status_;
}
inline ::grpc::binary_log::v1alpha::Metadata_ServerStatus* Metadata::mutable_server_status() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Metadata.server_status)
  return _internal_mutable_server_status();
}

inline bool Metadata::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Metadata::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Metadata::KindCase Metadata::kind_case() const {
  return Metadata::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message

// uint64 rpc_id = 1[json_name = "rpcId"];
inline void Message::clear_rpc_id() {
  rpc_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_rpc_id() const {
  return rpc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::rpc_id() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Message.rpc_id)
  return _internal_rpc_id();
}
inline void Message::_internal_set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rpc_id_ = value;
}
inline void Message::set_rpc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rpc_id(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Message.rpc_id)
}

// uint32 sequence_number = 2[json_name = "sequenceNumber"];
inline void Message::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::sequence_number() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Message.sequence_number)
  return _internal_sequence_number();
}
inline void Message::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void Message::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Message.sequence_number)
}

// .grpc.binary_log.v1alpha.Direction direction = 3[json_name = "direction"];
inline void Message::clear_direction() {
  direction_ = 0;
}
inline ::grpc::binary_log::v1alpha::Direction Message::_internal_direction() const {
  return static_cast< ::grpc::binary_log::v1alpha::Direction >(direction_);
}
inline ::grpc::binary_log::v1alpha::Direction Message::direction() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Message.direction)
  return _internal_direction();
}
inline void Message::_internal_set_direction(::grpc::binary_log::v1alpha::Direction value) {
  
  direction_ = value;
}
inline void Message::set_direction(::grpc::binary_log::v1alpha::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Message.direction)
}

// uint32 length = 4[json_name = "length"];
inline void Message::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::length() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Message.length)
  return _internal_length();
}
inline void Message::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void Message::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Message.length)
}

// bytes data = 5[json_name = "data"];
inline void Message::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:grpc.binary_log.v1alpha.Message.data)
  return _internal_data();
}
inline void Message::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:grpc.binary_log.v1alpha.Message.data)
}
inline std::string* Message::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc.binary_log.v1alpha.Message.data)
  return _internal_mutable_data();
}
inline const std::string& Message::_internal_data() const {
  return data_.Get();
}
inline void Message::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.binary_log.v1alpha.Message.data)
}
inline void Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.binary_log.v1alpha.Message.data)
}
inline void Message::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.binary_log.v1alpha.Message.data)
}
inline std::string* Message::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_data() {
  // @@protoc_insertion_point(field_release:grpc.binary_log.v1alpha.Message.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.binary_log.v1alpha.Message.data)
}
inline std::string* Message::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.binary_log.v1alpha.Message.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.binary_log.v1alpha.Message.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace binary_log
}  // namespace grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grpc::binary_log::v1alpha::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::binary_log::v1alpha::Direction>() {
  return ::grpc::binary_log::v1alpha::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpc_2fbinary_5flog_2fv1alpha_2flog_2eproto
