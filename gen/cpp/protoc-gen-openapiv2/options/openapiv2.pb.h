// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoc-gen-openapiv2/options/openapiv2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
namespace grpc {
namespace gateway {
namespace protoc_gen_openapiv2 {
namespace options {
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
class ExternalDocumentation;
class ExternalDocumentationDefaultTypeInternal;
extern ExternalDocumentationDefaultTypeInternal _ExternalDocumentation_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Info;
class InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
class Info_ExtensionsEntry_DoNotUse;
class Info_ExtensionsEntry_DoNotUseDefaultTypeInternal;
extern Info_ExtensionsEntry_DoNotUseDefaultTypeInternal _Info_ExtensionsEntry_DoNotUse_default_instance_;
class JSONSchema;
class JSONSchemaDefaultTypeInternal;
extern JSONSchemaDefaultTypeInternal _JSONSchema_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Operation_ExtensionsEntry_DoNotUse;
class Operation_ExtensionsEntry_DoNotUseDefaultTypeInternal;
extern Operation_ExtensionsEntry_DoNotUseDefaultTypeInternal _Operation_ExtensionsEntry_DoNotUse_default_instance_;
class Operation_ResponsesEntry_DoNotUse;
class Operation_ResponsesEntry_DoNotUseDefaultTypeInternal;
extern Operation_ResponsesEntry_DoNotUseDefaultTypeInternal _Operation_ResponsesEntry_DoNotUse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_ExamplesEntry_DoNotUse;
class Response_ExamplesEntry_DoNotUseDefaultTypeInternal;
extern Response_ExamplesEntry_DoNotUseDefaultTypeInternal _Response_ExamplesEntry_DoNotUse_default_instance_;
class Response_ExtensionsEntry_DoNotUse;
class Response_ExtensionsEntry_DoNotUseDefaultTypeInternal;
extern Response_ExtensionsEntry_DoNotUseDefaultTypeInternal _Response_ExtensionsEntry_DoNotUse_default_instance_;
class Response_HeadersEntry_DoNotUse;
class Response_HeadersEntry_DoNotUseDefaultTypeInternal;
extern Response_HeadersEntry_DoNotUseDefaultTypeInternal _Response_HeadersEntry_DoNotUse_default_instance_;
class Schema;
class SchemaDefaultTypeInternal;
extern SchemaDefaultTypeInternal _Schema_default_instance_;
class Scopes;
class ScopesDefaultTypeInternal;
extern ScopesDefaultTypeInternal _Scopes_default_instance_;
class Scopes_ScopeEntry_DoNotUse;
class Scopes_ScopeEntry_DoNotUseDefaultTypeInternal;
extern Scopes_ScopeEntry_DoNotUseDefaultTypeInternal _Scopes_ScopeEntry_DoNotUse_default_instance_;
class SecurityDefinitions;
class SecurityDefinitionsDefaultTypeInternal;
extern SecurityDefinitionsDefaultTypeInternal _SecurityDefinitions_default_instance_;
class SecurityDefinitions_SecurityEntry_DoNotUse;
class SecurityDefinitions_SecurityEntry_DoNotUseDefaultTypeInternal;
extern SecurityDefinitions_SecurityEntry_DoNotUseDefaultTypeInternal _SecurityDefinitions_SecurityEntry_DoNotUse_default_instance_;
class SecurityRequirement;
class SecurityRequirementDefaultTypeInternal;
extern SecurityRequirementDefaultTypeInternal _SecurityRequirement_default_instance_;
class SecurityRequirement_SecurityRequirementEntry_DoNotUse;
class SecurityRequirement_SecurityRequirementEntry_DoNotUseDefaultTypeInternal;
extern SecurityRequirement_SecurityRequirementEntry_DoNotUseDefaultTypeInternal _SecurityRequirement_SecurityRequirementEntry_DoNotUse_default_instance_;
class SecurityRequirement_SecurityRequirementValue;
class SecurityRequirement_SecurityRequirementValueDefaultTypeInternal;
extern SecurityRequirement_SecurityRequirementValueDefaultTypeInternal _SecurityRequirement_SecurityRequirementValue_default_instance_;
class SecurityScheme;
class SecuritySchemeDefaultTypeInternal;
extern SecuritySchemeDefaultTypeInternal _SecurityScheme_default_instance_;
class SecurityScheme_ExtensionsEntry_DoNotUse;
class SecurityScheme_ExtensionsEntry_DoNotUseDefaultTypeInternal;
extern SecurityScheme_ExtensionsEntry_DoNotUseDefaultTypeInternal _SecurityScheme_ExtensionsEntry_DoNotUse_default_instance_;
class Swagger;
class SwaggerDefaultTypeInternal;
extern SwaggerDefaultTypeInternal _Swagger_default_instance_;
class Swagger_ExtensionsEntry_DoNotUse;
class Swagger_ExtensionsEntry_DoNotUseDefaultTypeInternal;
extern Swagger_ExtensionsEntry_DoNotUseDefaultTypeInternal _Swagger_ExtensionsEntry_DoNotUse_default_instance_;
class Swagger_ResponsesEntry_DoNotUse;
class Swagger_ResponsesEntry_DoNotUseDefaultTypeInternal;
extern Swagger_ResponsesEntry_DoNotUseDefaultTypeInternal _Swagger_ResponsesEntry_DoNotUse_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
}  // namespace options
}  // namespace protoc_gen_openapiv2
}  // namespace gateway
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Contact* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Contact>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Header* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Header>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Info* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Info>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Info_ExtensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Info_ExtensionsEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::License* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::License>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Operation* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Operation>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Operation_ExtensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Operation_ExtensionsEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Operation_ResponsesEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Operation_ResponsesEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Response* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Response>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Response_ExamplesEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Response_ExamplesEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Response_ExtensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Response_ExtensionsEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Response_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Response_HeadersEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Schema* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Schema>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Scopes>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Scopes_ScopeEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Scopes_ScopeEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions_SecurityEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions_SecurityEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_ExtensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_ExtensionsEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Swagger* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Swagger>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Swagger_ExtensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Swagger_ExtensionsEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Swagger_ResponsesEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Swagger_ResponsesEntry_DoNotUse>(Arena*);
template<> ::grpc::gateway::protoc_gen_openapiv2::options::Tag* Arena::CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Tag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace gateway {
namespace protoc_gen_openapiv2 {
namespace options {

enum JSONSchema_JSONSchemaSimpleTypes : int {
  JSONSchema_JSONSchemaSimpleTypes_UNKNOWN = 0,
  JSONSchema_JSONSchemaSimpleTypes_ARRAY = 1,
  JSONSchema_JSONSchemaSimpleTypes_BOOLEAN = 2,
  JSONSchema_JSONSchemaSimpleTypes_INTEGER = 3,
  JSONSchema_JSONSchemaSimpleTypes_NULL_ = 4,
  JSONSchema_JSONSchemaSimpleTypes_NUMBER = 5,
  JSONSchema_JSONSchemaSimpleTypes_OBJECT = 6,
  JSONSchema_JSONSchemaSimpleTypes_STRING = 7,
  JSONSchema_JSONSchemaSimpleTypes_JSONSchema_JSONSchemaSimpleTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JSONSchema_JSONSchemaSimpleTypes_JSONSchema_JSONSchemaSimpleTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JSONSchema_JSONSchemaSimpleTypes_IsValid(int value);
constexpr JSONSchema_JSONSchemaSimpleTypes JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_MIN = JSONSchema_JSONSchemaSimpleTypes_UNKNOWN;
constexpr JSONSchema_JSONSchemaSimpleTypes JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_MAX = JSONSchema_JSONSchemaSimpleTypes_STRING;
constexpr int JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_ARRAYSIZE = JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JSONSchema_JSONSchemaSimpleTypes_descriptor();
template<typename T>
inline const std::string& JSONSchema_JSONSchemaSimpleTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JSONSchema_JSONSchemaSimpleTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JSONSchema_JSONSchemaSimpleTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JSONSchema_JSONSchemaSimpleTypes_descriptor(), enum_t_value);
}
inline bool JSONSchema_JSONSchemaSimpleTypes_Parse(
    const std::string& name, JSONSchema_JSONSchemaSimpleTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JSONSchema_JSONSchemaSimpleTypes>(
    JSONSchema_JSONSchemaSimpleTypes_descriptor(), name, value);
}
enum SecurityScheme_Type : int {
  SecurityScheme_Type_TYPE_INVALID = 0,
  SecurityScheme_Type_TYPE_BASIC = 1,
  SecurityScheme_Type_TYPE_API_KEY = 2,
  SecurityScheme_Type_TYPE_OAUTH2 = 3,
  SecurityScheme_Type_SecurityScheme_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityScheme_Type_SecurityScheme_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecurityScheme_Type_IsValid(int value);
constexpr SecurityScheme_Type SecurityScheme_Type_Type_MIN = SecurityScheme_Type_TYPE_INVALID;
constexpr SecurityScheme_Type SecurityScheme_Type_Type_MAX = SecurityScheme_Type_TYPE_OAUTH2;
constexpr int SecurityScheme_Type_Type_ARRAYSIZE = SecurityScheme_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityScheme_Type_descriptor();
template<typename T>
inline const std::string& SecurityScheme_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityScheme_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityScheme_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityScheme_Type_descriptor(), enum_t_value);
}
inline bool SecurityScheme_Type_Parse(
    const std::string& name, SecurityScheme_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityScheme_Type>(
    SecurityScheme_Type_descriptor(), name, value);
}
enum SecurityScheme_In : int {
  SecurityScheme_In_IN_INVALID = 0,
  SecurityScheme_In_IN_QUERY = 1,
  SecurityScheme_In_IN_HEADER = 2,
  SecurityScheme_In_SecurityScheme_In_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityScheme_In_SecurityScheme_In_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecurityScheme_In_IsValid(int value);
constexpr SecurityScheme_In SecurityScheme_In_In_MIN = SecurityScheme_In_IN_INVALID;
constexpr SecurityScheme_In SecurityScheme_In_In_MAX = SecurityScheme_In_IN_HEADER;
constexpr int SecurityScheme_In_In_ARRAYSIZE = SecurityScheme_In_In_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityScheme_In_descriptor();
template<typename T>
inline const std::string& SecurityScheme_In_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityScheme_In>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityScheme_In_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityScheme_In_descriptor(), enum_t_value);
}
inline bool SecurityScheme_In_Parse(
    const std::string& name, SecurityScheme_In* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityScheme_In>(
    SecurityScheme_In_descriptor(), name, value);
}
enum SecurityScheme_Flow : int {
  SecurityScheme_Flow_FLOW_INVALID = 0,
  SecurityScheme_Flow_FLOW_IMPLICIT = 1,
  SecurityScheme_Flow_FLOW_PASSWORD = 2,
  SecurityScheme_Flow_FLOW_APPLICATION = 3,
  SecurityScheme_Flow_FLOW_ACCESS_CODE = 4,
  SecurityScheme_Flow_SecurityScheme_Flow_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityScheme_Flow_SecurityScheme_Flow_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecurityScheme_Flow_IsValid(int value);
constexpr SecurityScheme_Flow SecurityScheme_Flow_Flow_MIN = SecurityScheme_Flow_FLOW_INVALID;
constexpr SecurityScheme_Flow SecurityScheme_Flow_Flow_MAX = SecurityScheme_Flow_FLOW_ACCESS_CODE;
constexpr int SecurityScheme_Flow_Flow_ARRAYSIZE = SecurityScheme_Flow_Flow_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityScheme_Flow_descriptor();
template<typename T>
inline const std::string& SecurityScheme_Flow_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityScheme_Flow>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityScheme_Flow_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityScheme_Flow_descriptor(), enum_t_value);
}
inline bool SecurityScheme_Flow_Parse(
    const std::string& name, SecurityScheme_Flow* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityScheme_Flow>(
    SecurityScheme_Flow_descriptor(), name, value);
}
enum Scheme : int {
  UNKNOWN = 0,
  HTTP = 1,
  HTTPS = 2,
  WS = 3,
  WSS = 4,
  Scheme_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Scheme_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Scheme_IsValid(int value);
constexpr Scheme Scheme_MIN = UNKNOWN;
constexpr Scheme Scheme_MAX = WSS;
constexpr int Scheme_ARRAYSIZE = Scheme_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scheme_descriptor();
template<typename T>
inline const std::string& Scheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scheme_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scheme_descriptor(), enum_t_value);
}
inline bool Scheme_Parse(
    const std::string& name, Scheme* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scheme>(
    Scheme_descriptor(), name, value);
}
// ===================================================================

class Swagger_ResponsesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Swagger_ResponsesEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Swagger_ResponsesEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Swagger_ResponsesEntry_DoNotUse();
  Swagger_ResponsesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Swagger_ResponsesEntry_DoNotUse& other);
  static const Swagger_ResponsesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Swagger_ResponsesEntry_DoNotUse*>(&_Swagger_ResponsesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Swagger.ResponsesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Swagger_ExtensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Swagger_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Swagger_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Swagger_ExtensionsEntry_DoNotUse();
  Swagger_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Swagger_ExtensionsEntry_DoNotUse& other);
  static const Swagger_ExtensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Swagger_ExtensionsEntry_DoNotUse*>(&_Swagger_ExtensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Swagger.ExtensionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Swagger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Swagger) */ {
 public:
  inline Swagger() : Swagger(nullptr) {};
  virtual ~Swagger();

  Swagger(const Swagger& from);
  Swagger(Swagger&& from) noexcept
    : Swagger() {
    *this = ::std::move(from);
  }

  inline Swagger& operator=(const Swagger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Swagger& operator=(Swagger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Swagger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Swagger* internal_default_instance() {
    return reinterpret_cast<const Swagger*>(
               &_Swagger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Swagger& a, Swagger& b) {
    a.Swap(&b);
  }
  inline void Swap(Swagger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Swagger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Swagger* New() const final {
    return CreateMaybeMessage<Swagger>(nullptr);
  }

  Swagger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Swagger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Swagger& from);
  void MergeFrom(const Swagger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Swagger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Swagger";
  }
  protected:
  explicit Swagger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSchemesFieldNumber = 5,
    kConsumesFieldNumber = 6,
    kProducesFieldNumber = 7,
    kResponsesFieldNumber = 10,
    kSecurityFieldNumber = 12,
    kExtensionsFieldNumber = 15,
    kSwaggerFieldNumber = 1,
    kHostFieldNumber = 3,
    kBasePathFieldNumber = 4,
    kInfoFieldNumber = 2,
    kSecurityDefinitionsFieldNumber = 11,
    kExternalDocsFieldNumber = 14,
  };
  // repeated .grpc.gateway.protoc_gen_openapiv2.options.Scheme schemes = 5[json_name = "schemes"];
  int schemes_size() const;
  private:
  int _internal_schemes_size() const;
  public:
  void clear_schemes();
  private:
  ::grpc::gateway::protoc_gen_openapiv2::options::Scheme _internal_schemes(int index) const;
  void _internal_add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_schemes();
  public:
  ::grpc::gateway::protoc_gen_openapiv2::options::Scheme schemes(int index) const;
  void set_schemes(int index, ::grpc::gateway::protoc_gen_openapiv2::options::Scheme value);
  void add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& schemes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_schemes();

  // repeated string consumes = 6[json_name = "consumes"];
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  const std::string& consumes(int index) const;
  std::string* mutable_consumes(int index);
  void set_consumes(int index, const std::string& value);
  void set_consumes(int index, std::string&& value);
  void set_consumes(int index, const char* value);
  void set_consumes(int index, const char* value, size_t size);
  std::string* add_consumes();
  void add_consumes(const std::string& value);
  void add_consumes(std::string&& value);
  void add_consumes(const char* value);
  void add_consumes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& consumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_consumes();
  private:
  const std::string& _internal_consumes(int index) const;
  std::string* _internal_add_consumes();
  public:

  // repeated string produces = 7[json_name = "produces"];
  int produces_size() const;
  private:
  int _internal_produces_size() const;
  public:
  void clear_produces();
  const std::string& produces(int index) const;
  std::string* mutable_produces(int index);
  void set_produces(int index, const std::string& value);
  void set_produces(int index, std::string&& value);
  void set_produces(int index, const char* value);
  void set_produces(int index, const char* value, size_t size);
  std::string* add_produces();
  void add_produces(const std::string& value);
  void add_produces(std::string&& value);
  void add_produces(const char* value);
  void add_produces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& produces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_produces();
  private:
  const std::string& _internal_produces(int index) const;
  std::string* _internal_add_produces();
  public:

  // map<string, .grpc.gateway.protoc_gen_openapiv2.options.Response> responses = 10[json_name = "responses"];
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
      _internal_responses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
      _internal_mutable_responses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
      responses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
      mutable_responses();

  // repeated .grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement security = 12[json_name = "security"];
  int security_size() const;
  private:
  int _internal_security_size() const;
  public:
  void clear_security();
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* mutable_security(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >*
      mutable_security();
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& _internal_security(int index) const;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* _internal_add_security();
  public:
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& security(int index) const;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* add_security();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >&
      security() const;

  // map<string, .google.protobuf.Value> extensions = 15[json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      _internal_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_extensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_extensions();

  // string swagger = 1[json_name = "swagger"];
  void clear_swagger();
  const std::string& swagger() const;
  void set_swagger(const std::string& value);
  void set_swagger(std::string&& value);
  void set_swagger(const char* value);
  void set_swagger(const char* value, size_t size);
  std::string* mutable_swagger();
  std::string* release_swagger();
  void set_allocated_swagger(std::string* swagger);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_swagger();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_swagger(
      std::string* swagger);
  private:
  const std::string& _internal_swagger() const;
  void _internal_set_swagger(const std::string& value);
  std::string* _internal_mutable_swagger();
  public:

  // string host = 3[json_name = "host"];
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string base_path = 4[json_name = "basePath"];
  void clear_base_path();
  const std::string& base_path() const;
  void set_base_path(const std::string& value);
  void set_base_path(std::string&& value);
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  std::string* mutable_base_path();
  std::string* release_base_path();
  void set_allocated_base_path(std::string* base_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_base_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_path(
      std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.Info info = 2[json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc::gateway::protoc_gen_openapiv2::options::Info& info() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Info* release_info();
  ::grpc::gateway::protoc_gen_openapiv2::options::Info* mutable_info();
  void set_allocated_info(::grpc::gateway::protoc_gen_openapiv2::options::Info* info);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::Info& _internal_info() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc::gateway::protoc_gen_openapiv2::options::Info* info);
  ::grpc::gateway::protoc_gen_openapiv2::options::Info* unsafe_arena_release_info();

  // .grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions security_definitions = 11[json_name = "securityDefinitions"];
  bool has_security_definitions() const;
  private:
  bool _internal_has_security_definitions() const;
  public:
  void clear_security_definitions();
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions& security_definitions() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* release_security_definitions();
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* mutable_security_definitions();
  void set_allocated_security_definitions(::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* security_definitions);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions& _internal_security_definitions() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* _internal_mutable_security_definitions();
  public:
  void unsafe_arena_set_allocated_security_definitions(
      ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* security_definitions);
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* unsafe_arena_release_security_definitions();

  // .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 14[json_name = "externalDocs"];
  bool has_external_docs() const;
  private:
  bool _internal_has_external_docs() const;
  public:
  void clear_external_docs();
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* release_external_docs();
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* mutable_external_docs();
  void set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& _internal_external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* _internal_mutable_external_docs();
  public:
  void unsafe_arena_set_allocated_external_docs(
      ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* unsafe_arena_release_external_docs();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Swagger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> schemes_;
  mutable std::atomic<int> _schemes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> consumes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> produces_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Swagger_ResponsesEntry_DoNotUse,
      std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > responses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement > security_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Swagger_ExtensionsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swagger_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
  ::grpc::gateway::protoc_gen_openapiv2::options::Info* info_;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* security_definitions_;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Operation_ResponsesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operation_ResponsesEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operation_ResponsesEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Operation_ResponsesEntry_DoNotUse();
  Operation_ResponsesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Operation_ResponsesEntry_DoNotUse& other);
  static const Operation_ResponsesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Operation_ResponsesEntry_DoNotUse*>(&_Operation_ResponsesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Operation.ResponsesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Operation_ExtensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operation_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operation_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Operation_ExtensionsEntry_DoNotUse();
  Operation_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Operation_ExtensionsEntry_DoNotUse& other);
  static const Operation_ExtensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Operation_ExtensionsEntry_DoNotUse*>(&_Operation_ExtensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Operation.ExtensionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {};
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
    kConsumesFieldNumber = 6,
    kProducesFieldNumber = 7,
    kResponsesFieldNumber = 9,
    kSchemesFieldNumber = 10,
    kSecurityFieldNumber = 12,
    kExtensionsFieldNumber = 13,
    kSummaryFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kOperationIdFieldNumber = 5,
    kExternalDocsFieldNumber = 4,
    kDeprecatedFieldNumber = 11,
  };
  // repeated string tags = 1[json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string consumes = 6[json_name = "consumes"];
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  const std::string& consumes(int index) const;
  std::string* mutable_consumes(int index);
  void set_consumes(int index, const std::string& value);
  void set_consumes(int index, std::string&& value);
  void set_consumes(int index, const char* value);
  void set_consumes(int index, const char* value, size_t size);
  std::string* add_consumes();
  void add_consumes(const std::string& value);
  void add_consumes(std::string&& value);
  void add_consumes(const char* value);
  void add_consumes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& consumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_consumes();
  private:
  const std::string& _internal_consumes(int index) const;
  std::string* _internal_add_consumes();
  public:

  // repeated string produces = 7[json_name = "produces"];
  int produces_size() const;
  private:
  int _internal_produces_size() const;
  public:
  void clear_produces();
  const std::string& produces(int index) const;
  std::string* mutable_produces(int index);
  void set_produces(int index, const std::string& value);
  void set_produces(int index, std::string&& value);
  void set_produces(int index, const char* value);
  void set_produces(int index, const char* value, size_t size);
  std::string* add_produces();
  void add_produces(const std::string& value);
  void add_produces(std::string&& value);
  void add_produces(const char* value);
  void add_produces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& produces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_produces();
  private:
  const std::string& _internal_produces(int index) const;
  std::string* _internal_add_produces();
  public:

  // map<string, .grpc.gateway.protoc_gen_openapiv2.options.Response> responses = 9[json_name = "responses"];
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
      _internal_responses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
      _internal_mutable_responses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
      responses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
      mutable_responses();

  // repeated .grpc.gateway.protoc_gen_openapiv2.options.Scheme schemes = 10[json_name = "schemes"];
  int schemes_size() const;
  private:
  int _internal_schemes_size() const;
  public:
  void clear_schemes();
  private:
  ::grpc::gateway::protoc_gen_openapiv2::options::Scheme _internal_schemes(int index) const;
  void _internal_add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_schemes();
  public:
  ::grpc::gateway::protoc_gen_openapiv2::options::Scheme schemes(int index) const;
  void set_schemes(int index, ::grpc::gateway::protoc_gen_openapiv2::options::Scheme value);
  void add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& schemes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_schemes();

  // repeated .grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement security = 12[json_name = "security"];
  int security_size() const;
  private:
  int _internal_security_size() const;
  public:
  void clear_security();
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* mutable_security(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >*
      mutable_security();
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& _internal_security(int index) const;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* _internal_add_security();
  public:
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& security(int index) const;
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* add_security();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >&
      security() const;

  // map<string, .google.protobuf.Value> extensions = 13[json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      _internal_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_extensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_extensions();

  // string summary = 2[json_name = "summary"];
  void clear_summary();
  const std::string& summary() const;
  void set_summary(const std::string& value);
  void set_summary(std::string&& value);
  void set_summary(const char* value);
  void set_summary(const char* value, size_t size);
  std::string* mutable_summary();
  std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_summary();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_summary(
      std::string* summary);
  private:
  const std::string& _internal_summary() const;
  void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // string description = 3[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string operation_id = 5[json_name = "operationId"];
  void clear_operation_id();
  const std::string& operation_id() const;
  void set_operation_id(const std::string& value);
  void set_operation_id(std::string&& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  std::string* mutable_operation_id();
  std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 4[json_name = "externalDocs"];
  bool has_external_docs() const;
  private:
  bool _internal_has_external_docs() const;
  public:
  void clear_external_docs();
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* release_external_docs();
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* mutable_external_docs();
  void set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& _internal_external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* _internal_mutable_external_docs();
  public:
  void unsafe_arena_set_allocated_external_docs(
      ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* unsafe_arena_release_external_docs();

  // bool deprecated = 11[json_name = "deprecated"];
  void clear_deprecated();
  bool deprecated() const;
  void set_deprecated(bool value);
  private:
  bool _internal_deprecated() const;
  void _internal_set_deprecated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> consumes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> produces_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Operation_ResponsesEntry_DoNotUse,
      std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > responses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> schemes_;
  mutable std::atomic<int> _schemes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement > security_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Operation_ExtensionsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs_;
  bool deprecated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Header) */ {
 public:
  inline Header() : Header(nullptr) {};
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kFormatFieldNumber = 3,
    kDefaultFieldNumber = 6,
    kPatternFieldNumber = 13,
  };
  // string description = 1[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 2[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string format = 3[json_name = "format"];
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // string default = 6[json_name = "default"];
  void clear_default_();
  const std::string& default_() const;
  void set_default_(const std::string& value);
  void set_default_(std::string&& value);
  void set_default_(const char* value);
  void set_default_(const char* value, size_t size);
  std::string* mutable_default_();
  std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_default_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_default_(
      std::string* default_);
  private:
  const std::string& _internal_default_() const;
  void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // string pattern = 13[json_name = "pattern"];
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pattern();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pattern(
      std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Response_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_HeadersEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_HeadersEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Response_HeadersEntry_DoNotUse();
  Response_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_HeadersEntry_DoNotUse& other);
  static const Response_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_HeadersEntry_DoNotUse*>(&_Response_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Response.HeadersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Response_ExamplesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ExamplesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ExamplesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Response_ExamplesEntry_DoNotUse();
  Response_ExamplesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_ExamplesEntry_DoNotUse& other);
  static const Response_ExamplesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_ExamplesEntry_DoNotUse*>(&_Response_ExamplesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Response.ExamplesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Response.ExamplesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class Response_ExtensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Response_ExtensionsEntry_DoNotUse();
  Response_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_ExtensionsEntry_DoNotUse& other);
  static const Response_ExtensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_ExtensionsEntry_DoNotUse*>(&_Response_ExtensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Response.ExtensionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kExamplesFieldNumber = 4,
    kExtensionsFieldNumber = 5,
    kDescriptionFieldNumber = 1,
    kSchemaFieldNumber = 2,
  };
  // map<string, .grpc.gateway.protoc_gen_openapiv2.options.Header> headers = 3[json_name = "headers"];
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >*
      mutable_headers();

  // map<string, string> examples = 4[json_name = "examples"];
  int examples_size() const;
  private:
  int _internal_examples_size() const;
  public:
  void clear_examples();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_examples() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_examples();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      examples() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_examples();

  // map<string, .google.protobuf.Value> extensions = 5[json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      _internal_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_extensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_extensions();

  // string description = 1[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.Schema schema = 2[json_name = "schema"];
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::grpc::gateway::protoc_gen_openapiv2::options::Schema& schema() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Schema* release_schema();
  ::grpc::gateway::protoc_gen_openapiv2::options::Schema* mutable_schema();
  void set_allocated_schema(::grpc::gateway::protoc_gen_openapiv2::options::Schema* schema);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::Schema& _internal_schema() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::grpc::gateway::protoc_gen_openapiv2::options::Schema* schema);
  ::grpc::gateway::protoc_gen_openapiv2::options::Schema* unsafe_arena_release_schema();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_HeadersEntry_DoNotUse,
      std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_ExamplesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > examples_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_ExtensionsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::grpc::gateway::protoc_gen_openapiv2::options::Schema* schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Info_ExtensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Info_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Info_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Info_ExtensionsEntry_DoNotUse();
  Info_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Info_ExtensionsEntry_DoNotUse& other);
  static const Info_ExtensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Info_ExtensionsEntry_DoNotUse*>(&_Info_ExtensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Info.ExtensionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class Info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Info) */ {
 public:
  inline Info() : Info(nullptr) {};
  virtual ~Info();

  Info(const Info& from);
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Info* New() const final {
    return CreateMaybeMessage<Info>(nullptr);
  }

  Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Info";
  }
  protected:
  explicit Info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtensionsFieldNumber = 7,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTermsOfServiceFieldNumber = 3,
    kVersionFieldNumber = 6,
    kContactFieldNumber = 4,
    kLicenseFieldNumber = 5,
  };
  // map<string, .google.protobuf.Value> extensions = 7[json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      _internal_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_extensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_extensions();

  // string title = 1[json_name = "title"];
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 2[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string terms_of_service = 3[json_name = "termsOfService"];
  void clear_terms_of_service();
  const std::string& terms_of_service() const;
  void set_terms_of_service(const std::string& value);
  void set_terms_of_service(std::string&& value);
  void set_terms_of_service(const char* value);
  void set_terms_of_service(const char* value, size_t size);
  std::string* mutable_terms_of_service();
  std::string* release_terms_of_service();
  void set_allocated_terms_of_service(std::string* terms_of_service);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_terms_of_service();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_terms_of_service(
      std::string* terms_of_service);
  private:
  const std::string& _internal_terms_of_service() const;
  void _internal_set_terms_of_service(const std::string& value);
  std::string* _internal_mutable_terms_of_service();
  public:

  // string version = 6[json_name = "version"];
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.Contact contact = 4[json_name = "contact"];
  bool has_contact() const;
  private:
  bool _internal_has_contact() const;
  public:
  void clear_contact();
  const ::grpc::gateway::protoc_gen_openapiv2::options::Contact& contact() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Contact* release_contact();
  ::grpc::gateway::protoc_gen_openapiv2::options::Contact* mutable_contact();
  void set_allocated_contact(::grpc::gateway::protoc_gen_openapiv2::options::Contact* contact);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::Contact& _internal_contact() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Contact* _internal_mutable_contact();
  public:
  void unsafe_arena_set_allocated_contact(
      ::grpc::gateway::protoc_gen_openapiv2::options::Contact* contact);
  ::grpc::gateway::protoc_gen_openapiv2::options::Contact* unsafe_arena_release_contact();

  // .grpc.gateway.protoc_gen_openapiv2.options.License license = 5[json_name = "license"];
  bool has_license() const;
  private:
  bool _internal_has_license() const;
  public:
  void clear_license();
  const ::grpc::gateway::protoc_gen_openapiv2::options::License& license() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::License* release_license();
  ::grpc::gateway::protoc_gen_openapiv2::options::License* mutable_license();
  void set_allocated_license(::grpc::gateway::protoc_gen_openapiv2::options::License* license);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::License& _internal_license() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::License* _internal_mutable_license();
  public:
  void unsafe_arena_set_allocated_license(
      ::grpc::gateway::protoc_gen_openapiv2::options::License* license);
  ::grpc::gateway::protoc_gen_openapiv2::options::License* unsafe_arena_release_license();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Info_ExtensionsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terms_of_service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::grpc::gateway::protoc_gen_openapiv2::options::Contact* contact_;
  ::grpc::gateway::protoc_gen_openapiv2::options::License* license_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Contact PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Contact) */ {
 public:
  inline Contact() : Contact(nullptr) {};
  virtual ~Contact();

  Contact(const Contact& from);
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }
  inline void Swap(Contact* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const final {
    return CreateMaybeMessage<Contact>(nullptr);
  }

  Contact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contact>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contact* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Contact";
  }
  protected:
  explicit Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 2[json_name = "url"];
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string email = 3[json_name = "email"];
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Contact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class License PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.License) */ {
 public:
  inline License() : License(nullptr) {};
  virtual ~License();

  License(const License& from);
  License(License&& from) noexcept
    : License() {
    *this = ::std::move(from);
  }

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }
  inline License& operator=(License&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const License& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
               &_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(License& a, License& b) {
    a.Swap(&b);
  }
  inline void Swap(License* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(License* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline License* New() const final {
    return CreateMaybeMessage<License>(nullptr);
  }

  License* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<License>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(License* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.License";
  }
  protected:
  explicit License(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 2[json_name = "url"];
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.License)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class ExternalDocumentation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation) */ {
 public:
  inline ExternalDocumentation() : ExternalDocumentation(nullptr) {};
  virtual ~ExternalDocumentation();

  ExternalDocumentation(const ExternalDocumentation& from);
  ExternalDocumentation(ExternalDocumentation&& from) noexcept
    : ExternalDocumentation() {
    *this = ::std::move(from);
  }

  inline ExternalDocumentation& operator=(const ExternalDocumentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalDocumentation& operator=(ExternalDocumentation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalDocumentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalDocumentation* internal_default_instance() {
    return reinterpret_cast<const ExternalDocumentation*>(
               &_ExternalDocumentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ExternalDocumentation& a, ExternalDocumentation& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalDocumentation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalDocumentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalDocumentation* New() const final {
    return CreateMaybeMessage<ExternalDocumentation>(nullptr);
  }

  ExternalDocumentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalDocumentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalDocumentation& from);
  void MergeFrom(const ExternalDocumentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalDocumentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation";
  }
  protected:
  explicit ExternalDocumentation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string description = 1[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 2[json_name = "url"];
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Schema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Schema) */ {
 public:
  inline Schema() : Schema(nullptr) {};
  virtual ~Schema();

  Schema(const Schema& from);
  Schema(Schema&& from) noexcept
    : Schema() {
    *this = ::std::move(from);
  }

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schema& operator=(Schema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Schema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schema* internal_default_instance() {
    return reinterpret_cast<const Schema*>(
               &_Schema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Schema& a, Schema& b) {
    a.Swap(&b);
  }
  inline void Swap(Schema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Schema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Schema* New() const final {
    return CreateMaybeMessage<Schema>(nullptr);
  }

  Schema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Schema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Schema";
  }
  protected:
  explicit Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscriminatorFieldNumber = 2,
    kExampleFieldNumber = 6,
    kJsonSchemaFieldNumber = 1,
    kExternalDocsFieldNumber = 5,
    kReadOnlyFieldNumber = 3,
  };
  // string discriminator = 2[json_name = "discriminator"];
  void clear_discriminator();
  const std::string& discriminator() const;
  void set_discriminator(const std::string& value);
  void set_discriminator(std::string&& value);
  void set_discriminator(const char* value);
  void set_discriminator(const char* value, size_t size);
  std::string* mutable_discriminator();
  std::string* release_discriminator();
  void set_allocated_discriminator(std::string* discriminator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_discriminator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_discriminator(
      std::string* discriminator);
  private:
  const std::string& _internal_discriminator() const;
  void _internal_set_discriminator(const std::string& value);
  std::string* _internal_mutable_discriminator();
  public:

  // string example = 6[json_name = "example"];
  void clear_example();
  const std::string& example() const;
  void set_example(const std::string& value);
  void set_example(std::string&& value);
  void set_example(const char* value);
  void set_example(const char* value, size_t size);
  std::string* mutable_example();
  std::string* release_example();
  void set_allocated_example(std::string* example);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_example();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_example(
      std::string* example);
  private:
  const std::string& _internal_example() const;
  void _internal_set_example(const std::string& value);
  std::string* _internal_mutable_example();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.JSONSchema json_schema = 1[json_name = "jsonSchema"];
  bool has_json_schema() const;
  private:
  bool _internal_has_json_schema() const;
  public:
  void clear_json_schema();
  const ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema& json_schema() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* release_json_schema();
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* mutable_json_schema();
  void set_allocated_json_schema(::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* json_schema);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema& _internal_json_schema() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* _internal_mutable_json_schema();
  public:
  void unsafe_arena_set_allocated_json_schema(
      ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* json_schema);
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* unsafe_arena_release_json_schema();

  // .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 5[json_name = "externalDocs"];
  bool has_external_docs() const;
  private:
  bool _internal_has_external_docs() const;
  public:
  void clear_external_docs();
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* release_external_docs();
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* mutable_external_docs();
  void set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& _internal_external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* _internal_mutable_external_docs();
  public:
  void unsafe_arena_set_allocated_external_docs(
      ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* unsafe_arena_release_external_docs();

  // bool read_only = 3[json_name = "readOnly"];
  void clear_read_only();
  bool read_only() const;
  void set_read_only(bool value);
  private:
  bool _internal_read_only() const;
  void _internal_set_read_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Schema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discriminator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_;
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* json_schema_;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs_;
  bool read_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class JSONSchema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema) */ {
 public:
  inline JSONSchema() : JSONSchema(nullptr) {};
  virtual ~JSONSchema();

  JSONSchema(const JSONSchema& from);
  JSONSchema(JSONSchema&& from) noexcept
    : JSONSchema() {
    *this = ::std::move(from);
  }

  inline JSONSchema& operator=(const JSONSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSONSchema& operator=(JSONSchema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JSONSchema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSONSchema* internal_default_instance() {
    return reinterpret_cast<const JSONSchema*>(
               &_JSONSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JSONSchema& a, JSONSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(JSONSchema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JSONSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JSONSchema* New() const final {
    return CreateMaybeMessage<JSONSchema>(nullptr);
  }

  JSONSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JSONSchema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JSONSchema& from);
  void MergeFrom(const JSONSchema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSONSchema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.JSONSchema";
  }
  protected:
  explicit JSONSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JSONSchema_JSONSchemaSimpleTypes JSONSchemaSimpleTypes;
  static constexpr JSONSchemaSimpleTypes UNKNOWN =
    JSONSchema_JSONSchemaSimpleTypes_UNKNOWN;
  static constexpr JSONSchemaSimpleTypes ARRAY =
    JSONSchema_JSONSchemaSimpleTypes_ARRAY;
  static constexpr JSONSchemaSimpleTypes BOOLEAN =
    JSONSchema_JSONSchemaSimpleTypes_BOOLEAN;
  static constexpr JSONSchemaSimpleTypes INTEGER =
    JSONSchema_JSONSchemaSimpleTypes_INTEGER;
  static constexpr JSONSchemaSimpleTypes NULL_ =
    JSONSchema_JSONSchemaSimpleTypes_NULL_;
  static constexpr JSONSchemaSimpleTypes NUMBER =
    JSONSchema_JSONSchemaSimpleTypes_NUMBER;
  static constexpr JSONSchemaSimpleTypes OBJECT =
    JSONSchema_JSONSchemaSimpleTypes_OBJECT;
  static constexpr JSONSchemaSimpleTypes STRING =
    JSONSchema_JSONSchemaSimpleTypes_STRING;
  static inline bool JSONSchemaSimpleTypes_IsValid(int value) {
    return JSONSchema_JSONSchemaSimpleTypes_IsValid(value);
  }
  static constexpr JSONSchemaSimpleTypes JSONSchemaSimpleTypes_MIN =
    JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_MIN;
  static constexpr JSONSchemaSimpleTypes JSONSchemaSimpleTypes_MAX =
    JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_MAX;
  static constexpr int JSONSchemaSimpleTypes_ARRAYSIZE =
    JSONSchema_JSONSchemaSimpleTypes_JSONSchemaSimpleTypes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JSONSchemaSimpleTypes_descriptor() {
    return JSONSchema_JSONSchemaSimpleTypes_descriptor();
  }
  template<typename T>
  static inline const std::string& JSONSchemaSimpleTypes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JSONSchemaSimpleTypes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JSONSchemaSimpleTypes_Name.");
    return JSONSchema_JSONSchemaSimpleTypes_Name(enum_t_value);
  }
  static inline bool JSONSchemaSimpleTypes_Parse(const std::string& name,
      JSONSchemaSimpleTypes* value) {
    return JSONSchema_JSONSchemaSimpleTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredFieldNumber = 26,
    kArrayFieldNumber = 34,
    kTypeFieldNumber = 35,
    kEnumFieldNumber = 46,
    kRefFieldNumber = 3,
    kTitleFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kDefaultFieldNumber = 7,
    kExampleFieldNumber = 9,
    kPatternFieldNumber = 17,
    kFormatFieldNumber = 36,
    kMultipleOfFieldNumber = 10,
    kMaximumFieldNumber = 11,
    kMinimumFieldNumber = 13,
    kMaxLengthFieldNumber = 15,
    kMinLengthFieldNumber = 16,
    kMaxItemsFieldNumber = 20,
    kMinItemsFieldNumber = 21,
    kMaxPropertiesFieldNumber = 24,
    kMinPropertiesFieldNumber = 25,
    kReadOnlyFieldNumber = 8,
    kExclusiveMaximumFieldNumber = 12,
    kExclusiveMinimumFieldNumber = 14,
    kUniqueItemsFieldNumber = 22,
  };
  // repeated string required = 26[json_name = "required"];
  int required_size() const;
  private:
  int _internal_required_size() const;
  public:
  void clear_required();
  const std::string& required(int index) const;
  std::string* mutable_required(int index);
  void set_required(int index, const std::string& value);
  void set_required(int index, std::string&& value);
  void set_required(int index, const char* value);
  void set_required(int index, const char* value, size_t size);
  std::string* add_required();
  void add_required(const std::string& value);
  void add_required(std::string&& value);
  void add_required(const char* value);
  void add_required(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& required() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_required();
  private:
  const std::string& _internal_required(int index) const;
  std::string* _internal_add_required();
  public:

  // repeated string array = 34[json_name = "array"];
  int array_size() const;
  private:
  int _internal_array_size() const;
  public:
  void clear_array();
  const std::string& array(int index) const;
  std::string* mutable_array(int index);
  void set_array(int index, const std::string& value);
  void set_array(int index, std::string&& value);
  void set_array(int index, const char* value);
  void set_array(int index, const char* value, size_t size);
  std::string* add_array();
  void add_array(const std::string& value);
  void add_array(std::string&& value);
  void add_array(const char* value);
  void add_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_array();
  private:
  const std::string& _internal_array(int index) const;
  std::string* _internal_add_array();
  public:

  // repeated .grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.JSONSchemaSimpleTypes type = 35[json_name = "type"];
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes _internal_type(int index) const;
  void _internal_add_type(::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes type(int index) const;
  void set_type(int index, ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes value);
  void add_type(::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // repeated string enum = 46[json_name = "enum"];
  int enum__size() const;
  private:
  int _internal_enum__size() const;
  public:
  void clear_enum_();
  const std::string& enum_(int index) const;
  std::string* mutable_enum_(int index);
  void set_enum_(int index, const std::string& value);
  void set_enum_(int index, std::string&& value);
  void set_enum_(int index, const char* value);
  void set_enum_(int index, const char* value, size_t size);
  std::string* add_enum_();
  void add_enum_(const std::string& value);
  void add_enum_(std::string&& value);
  void add_enum_(const char* value);
  void add_enum_(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enum_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enum_();
  private:
  const std::string& _internal_enum_(int index) const;
  std::string* _internal_add_enum_();
  public:

  // string ref = 3[json_name = "ref"];
  void clear_ref();
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ref(
      std::string* ref);
  private:
  const std::string& _internal_ref() const;
  void _internal_set_ref(const std::string& value);
  std::string* _internal_mutable_ref();
  public:

  // string title = 5[json_name = "title"];
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 6[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string default = 7[json_name = "default"];
  void clear_default_();
  const std::string& default_() const;
  void set_default_(const std::string& value);
  void set_default_(std::string&& value);
  void set_default_(const char* value);
  void set_default_(const char* value, size_t size);
  std::string* mutable_default_();
  std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_default_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_default_(
      std::string* default_);
  private:
  const std::string& _internal_default_() const;
  void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // string example = 9[json_name = "example"];
  void clear_example();
  const std::string& example() const;
  void set_example(const std::string& value);
  void set_example(std::string&& value);
  void set_example(const char* value);
  void set_example(const char* value, size_t size);
  std::string* mutable_example();
  std::string* release_example();
  void set_allocated_example(std::string* example);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_example();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_example(
      std::string* example);
  private:
  const std::string& _internal_example() const;
  void _internal_set_example(const std::string& value);
  std::string* _internal_mutable_example();
  public:

  // string pattern = 17[json_name = "pattern"];
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pattern();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pattern(
      std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // string format = 36[json_name = "format"];
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // double multiple_of = 10[json_name = "multipleOf"];
  void clear_multiple_of();
  double multiple_of() const;
  void set_multiple_of(double value);
  private:
  double _internal_multiple_of() const;
  void _internal_set_multiple_of(double value);
  public:

  // double maximum = 11[json_name = "maximum"];
  void clear_maximum();
  double maximum() const;
  void set_maximum(double value);
  private:
  double _internal_maximum() const;
  void _internal_set_maximum(double value);
  public:

  // double minimum = 13[json_name = "minimum"];
  void clear_minimum();
  double minimum() const;
  void set_minimum(double value);
  private:
  double _internal_minimum() const;
  void _internal_set_minimum(double value);
  public:

  // uint64 max_length = 15[json_name = "maxLength"];
  void clear_max_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_length() const;
  void set_max_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_length() const;
  void _internal_set_max_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_length = 16[json_name = "minLength"];
  void clear_min_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_length() const;
  void set_min_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_length() const;
  void _internal_set_min_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_items = 20[json_name = "maxItems"];
  void clear_max_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_items() const;
  void set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_items() const;
  void _internal_set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_items = 21[json_name = "minItems"];
  void clear_min_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_items() const;
  void set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_items() const;
  void _internal_set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_properties = 24[json_name = "maxProperties"];
  void clear_max_properties();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_properties() const;
  void set_max_properties(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_properties() const;
  void _internal_set_max_properties(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_properties = 25[json_name = "minProperties"];
  void clear_min_properties();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_properties() const;
  void set_min_properties(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_properties() const;
  void _internal_set_min_properties(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool read_only = 8[json_name = "readOnly"];
  void clear_read_only();
  bool read_only() const;
  void set_read_only(bool value);
  private:
  bool _internal_read_only() const;
  void _internal_set_read_only(bool value);
  public:

  // bool exclusive_maximum = 12[json_name = "exclusiveMaximum"];
  void clear_exclusive_maximum();
  bool exclusive_maximum() const;
  void set_exclusive_maximum(bool value);
  private:
  bool _internal_exclusive_maximum() const;
  void _internal_set_exclusive_maximum(bool value);
  public:

  // bool exclusive_minimum = 14[json_name = "exclusiveMinimum"];
  void clear_exclusive_minimum();
  bool exclusive_minimum() const;
  void set_exclusive_minimum(bool value);
  private:
  bool _internal_exclusive_minimum() const;
  void _internal_set_exclusive_minimum(bool value);
  public:

  // bool unique_items = 22[json_name = "uniqueItems"];
  void clear_unique_items();
  bool unique_items() const;
  void set_unique_items(bool value);
  private:
  bool _internal_unique_items() const;
  void _internal_set_unique_items(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> required_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> array_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enum__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  double multiple_of_;
  double maximum_;
  double minimum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_properties_;
  bool read_only_;
  bool exclusive_maximum_;
  bool exclusive_minimum_;
  bool unique_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {};
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kExternalDocsFieldNumber = 3,
  };
  // string description = 2[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 3[json_name = "externalDocs"];
  bool has_external_docs() const;
  private:
  bool _internal_has_external_docs() const;
  public:
  void clear_external_docs();
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* release_external_docs();
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* mutable_external_docs();
  void set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& _internal_external_docs() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* _internal_mutable_external_docs();
  public:
  void unsafe_arena_set_allocated_external_docs(
      ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs);
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* unsafe_arena_release_external_docs();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class SecurityDefinitions_SecurityEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecurityDefinitions_SecurityEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecurityDefinitions_SecurityEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SecurityDefinitions_SecurityEntry_DoNotUse();
  SecurityDefinitions_SecurityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SecurityDefinitions_SecurityEntry_DoNotUse& other);
  static const SecurityDefinitions_SecurityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SecurityDefinitions_SecurityEntry_DoNotUse*>(&_SecurityDefinitions_SecurityEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions.SecurityEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class SecurityDefinitions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions) */ {
 public:
  inline SecurityDefinitions() : SecurityDefinitions(nullptr) {};
  virtual ~SecurityDefinitions();

  SecurityDefinitions(const SecurityDefinitions& from);
  SecurityDefinitions(SecurityDefinitions&& from) noexcept
    : SecurityDefinitions() {
    *this = ::std::move(from);
  }

  inline SecurityDefinitions& operator=(const SecurityDefinitions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDefinitions& operator=(SecurityDefinitions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityDefinitions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityDefinitions* internal_default_instance() {
    return reinterpret_cast<const SecurityDefinitions*>(
               &_SecurityDefinitions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SecurityDefinitions& a, SecurityDefinitions& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityDefinitions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDefinitions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityDefinitions* New() const final {
    return CreateMaybeMessage<SecurityDefinitions>(nullptr);
  }

  SecurityDefinitions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityDefinitions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityDefinitions& from);
  void MergeFrom(const SecurityDefinitions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityDefinitions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions";
  }
  protected:
  explicit SecurityDefinitions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSecurityFieldNumber = 1,
  };
  // map<string, .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme> security = 1[json_name = "security"];
  int security_size() const;
  private:
  int _internal_security_size() const;
  public:
  void clear_security();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >&
      _internal_security() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >*
      _internal_mutable_security();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >&
      security() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >*
      mutable_security();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SecurityDefinitions_SecurityEntry_DoNotUse,
      std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > security_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class SecurityScheme_ExtensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecurityScheme_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecurityScheme_ExtensionsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SecurityScheme_ExtensionsEntry_DoNotUse();
  SecurityScheme_ExtensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SecurityScheme_ExtensionsEntry_DoNotUse& other);
  static const SecurityScheme_ExtensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SecurityScheme_ExtensionsEntry_DoNotUse*>(&_SecurityScheme_ExtensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.ExtensionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class SecurityScheme PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme) */ {
 public:
  inline SecurityScheme() : SecurityScheme(nullptr) {};
  virtual ~SecurityScheme();

  SecurityScheme(const SecurityScheme& from);
  SecurityScheme(SecurityScheme&& from) noexcept
    : SecurityScheme() {
    *this = ::std::move(from);
  }

  inline SecurityScheme& operator=(const SecurityScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityScheme& operator=(SecurityScheme&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityScheme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityScheme* internal_default_instance() {
    return reinterpret_cast<const SecurityScheme*>(
               &_SecurityScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SecurityScheme& a, SecurityScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityScheme* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityScheme* New() const final {
    return CreateMaybeMessage<SecurityScheme>(nullptr);
  }

  SecurityScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityScheme& from);
  void MergeFrom(const SecurityScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme";
  }
  protected:
  explicit SecurityScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef SecurityScheme_Type Type;
  static constexpr Type TYPE_INVALID =
    SecurityScheme_Type_TYPE_INVALID;
  static constexpr Type TYPE_BASIC =
    SecurityScheme_Type_TYPE_BASIC;
  static constexpr Type TYPE_API_KEY =
    SecurityScheme_Type_TYPE_API_KEY;
  static constexpr Type TYPE_OAUTH2 =
    SecurityScheme_Type_TYPE_OAUTH2;
  static inline bool Type_IsValid(int value) {
    return SecurityScheme_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SecurityScheme_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SecurityScheme_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SecurityScheme_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SecurityScheme_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SecurityScheme_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return SecurityScheme_Type_Parse(name, value);
  }

  typedef SecurityScheme_In In;
  static constexpr In IN_INVALID =
    SecurityScheme_In_IN_INVALID;
  static constexpr In IN_QUERY =
    SecurityScheme_In_IN_QUERY;
  static constexpr In IN_HEADER =
    SecurityScheme_In_IN_HEADER;
  static inline bool In_IsValid(int value) {
    return SecurityScheme_In_IsValid(value);
  }
  static constexpr In In_MIN =
    SecurityScheme_In_In_MIN;
  static constexpr In In_MAX =
    SecurityScheme_In_In_MAX;
  static constexpr int In_ARRAYSIZE =
    SecurityScheme_In_In_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  In_descriptor() {
    return SecurityScheme_In_descriptor();
  }
  template<typename T>
  static inline const std::string& In_Name(T enum_t_value) {
    static_assert(::std::is_same<T, In>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function In_Name.");
    return SecurityScheme_In_Name(enum_t_value);
  }
  static inline bool In_Parse(const std::string& name,
      In* value) {
    return SecurityScheme_In_Parse(name, value);
  }

  typedef SecurityScheme_Flow Flow;
  static constexpr Flow FLOW_INVALID =
    SecurityScheme_Flow_FLOW_INVALID;
  static constexpr Flow FLOW_IMPLICIT =
    SecurityScheme_Flow_FLOW_IMPLICIT;
  static constexpr Flow FLOW_PASSWORD =
    SecurityScheme_Flow_FLOW_PASSWORD;
  static constexpr Flow FLOW_APPLICATION =
    SecurityScheme_Flow_FLOW_APPLICATION;
  static constexpr Flow FLOW_ACCESS_CODE =
    SecurityScheme_Flow_FLOW_ACCESS_CODE;
  static inline bool Flow_IsValid(int value) {
    return SecurityScheme_Flow_IsValid(value);
  }
  static constexpr Flow Flow_MIN =
    SecurityScheme_Flow_Flow_MIN;
  static constexpr Flow Flow_MAX =
    SecurityScheme_Flow_Flow_MAX;
  static constexpr int Flow_ARRAYSIZE =
    SecurityScheme_Flow_Flow_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flow_descriptor() {
    return SecurityScheme_Flow_descriptor();
  }
  template<typename T>
  static inline const std::string& Flow_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flow>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flow_Name.");
    return SecurityScheme_Flow_Name(enum_t_value);
  }
  static inline bool Flow_Parse(const std::string& name,
      Flow* value) {
    return SecurityScheme_Flow_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionsFieldNumber = 9,
    kDescriptionFieldNumber = 2,
    kNameFieldNumber = 3,
    kAuthorizationUrlFieldNumber = 6,
    kTokenUrlFieldNumber = 7,
    kScopesFieldNumber = 8,
    kTypeFieldNumber = 1,
    kInFieldNumber = 4,
    kFlowFieldNumber = 5,
  };
  // map<string, .google.protobuf.Value> extensions = 9[json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      _internal_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_extensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      extensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_extensions();

  // string description = 2[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string name = 3[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string authorization_url = 6[json_name = "authorizationUrl"];
  void clear_authorization_url();
  const std::string& authorization_url() const;
  void set_authorization_url(const std::string& value);
  void set_authorization_url(std::string&& value);
  void set_authorization_url(const char* value);
  void set_authorization_url(const char* value, size_t size);
  std::string* mutable_authorization_url();
  std::string* release_authorization_url();
  void set_allocated_authorization_url(std::string* authorization_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_authorization_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_authorization_url(
      std::string* authorization_url);
  private:
  const std::string& _internal_authorization_url() const;
  void _internal_set_authorization_url(const std::string& value);
  std::string* _internal_mutable_authorization_url();
  public:

  // string token_url = 7[json_name = "tokenUrl"];
  void clear_token_url();
  const std::string& token_url() const;
  void set_token_url(const std::string& value);
  void set_token_url(std::string&& value);
  void set_token_url(const char* value);
  void set_token_url(const char* value, size_t size);
  std::string* mutable_token_url();
  std::string* release_token_url();
  void set_allocated_token_url(std::string* token_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token_url(
      std::string* token_url);
  private:
  const std::string& _internal_token_url() const;
  void _internal_set_token_url(const std::string& value);
  std::string* _internal_mutable_token_url();
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.Scopes scopes = 8[json_name = "scopes"];
  bool has_scopes() const;
  private:
  bool _internal_has_scopes() const;
  public:
  void clear_scopes();
  const ::grpc::gateway::protoc_gen_openapiv2::options::Scopes& scopes() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* release_scopes();
  ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* mutable_scopes();
  void set_allocated_scopes(::grpc::gateway::protoc_gen_openapiv2::options::Scopes* scopes);
  private:
  const ::grpc::gateway::protoc_gen_openapiv2::options::Scopes& _internal_scopes() const;
  ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* _internal_mutable_scopes();
  public:
  void unsafe_arena_set_allocated_scopes(
      ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* scopes);
  ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* unsafe_arena_release_scopes();

  // .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.Type type = 1[json_name = "type"];
  void clear_type();
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type type() const;
  void set_type(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type value);
  private:
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type _internal_type() const;
  void _internal_set_type(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type value);
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.In in = 4[json_name = "in"];
  void clear_in();
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In in() const;
  void set_in(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In value);
  private:
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In _internal_in() const;
  void _internal_set_in(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In value);
  public:

  // .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.Flow flow = 5[json_name = "flow"];
  void clear_flow();
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow flow() const;
  void set_flow(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow value);
  private:
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow _internal_flow() const;
  void _internal_set_flow(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SecurityScheme_ExtensionsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorization_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_url_;
  ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* scopes_;
  int type_;
  int in_;
  int flow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class SecurityRequirement_SecurityRequirementValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue) */ {
 public:
  inline SecurityRequirement_SecurityRequirementValue() : SecurityRequirement_SecurityRequirementValue(nullptr) {};
  virtual ~SecurityRequirement_SecurityRequirementValue();

  SecurityRequirement_SecurityRequirementValue(const SecurityRequirement_SecurityRequirementValue& from);
  SecurityRequirement_SecurityRequirementValue(SecurityRequirement_SecurityRequirementValue&& from) noexcept
    : SecurityRequirement_SecurityRequirementValue() {
    *this = ::std::move(from);
  }

  inline SecurityRequirement_SecurityRequirementValue& operator=(const SecurityRequirement_SecurityRequirementValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRequirement_SecurityRequirementValue& operator=(SecurityRequirement_SecurityRequirementValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityRequirement_SecurityRequirementValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityRequirement_SecurityRequirementValue* internal_default_instance() {
    return reinterpret_cast<const SecurityRequirement_SecurityRequirementValue*>(
               &_SecurityRequirement_SecurityRequirementValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SecurityRequirement_SecurityRequirementValue& a, SecurityRequirement_SecurityRequirementValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRequirement_SecurityRequirementValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRequirement_SecurityRequirementValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityRequirement_SecurityRequirementValue* New() const final {
    return CreateMaybeMessage<SecurityRequirement_SecurityRequirementValue>(nullptr);
  }

  SecurityRequirement_SecurityRequirementValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityRequirement_SecurityRequirementValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityRequirement_SecurityRequirementValue& from);
  void MergeFrom(const SecurityRequirement_SecurityRequirementValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityRequirement_SecurityRequirementValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue";
  }
  protected:
  explicit SecurityRequirement_SecurityRequirementValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeFieldNumber = 1,
  };
  // repeated string scope = 1[json_name = "scope"];
  int scope_size() const;
  private:
  int _internal_scope_size() const;
  public:
  void clear_scope();
  const std::string& scope(int index) const;
  std::string* mutable_scope(int index);
  void set_scope(int index, const std::string& value);
  void set_scope(int index, std::string&& value);
  void set_scope(int index, const char* value);
  void set_scope(int index, const char* value, size_t size);
  std::string* add_scope();
  void add_scope(const std::string& value);
  void add_scope(std::string&& value);
  void add_scope(const char* value);
  void add_scope(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scope() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scope();
  private:
  const std::string& _internal_scope(int index) const;
  std::string* _internal_add_scope();
  public:

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class SecurityRequirement_SecurityRequirementEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecurityRequirement_SecurityRequirementEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecurityRequirement_SecurityRequirementEntry_DoNotUse, 
    std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SecurityRequirement_SecurityRequirementEntry_DoNotUse();
  SecurityRequirement_SecurityRequirementEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SecurityRequirement_SecurityRequirementEntry_DoNotUse& other);
  static const SecurityRequirement_SecurityRequirementEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SecurityRequirement_SecurityRequirementEntry_DoNotUse*>(&_SecurityRequirement_SecurityRequirementEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[24];
  }

  public:
};

// -------------------------------------------------------------------

class SecurityRequirement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement) */ {
 public:
  inline SecurityRequirement() : SecurityRequirement(nullptr) {};
  virtual ~SecurityRequirement();

  SecurityRequirement(const SecurityRequirement& from);
  SecurityRequirement(SecurityRequirement&& from) noexcept
    : SecurityRequirement() {
    *this = ::std::move(from);
  }

  inline SecurityRequirement& operator=(const SecurityRequirement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRequirement& operator=(SecurityRequirement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityRequirement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityRequirement* internal_default_instance() {
    return reinterpret_cast<const SecurityRequirement*>(
               &_SecurityRequirement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SecurityRequirement& a, SecurityRequirement& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRequirement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRequirement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityRequirement* New() const final {
    return CreateMaybeMessage<SecurityRequirement>(nullptr);
  }

  SecurityRequirement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityRequirement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityRequirement& from);
  void MergeFrom(const SecurityRequirement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityRequirement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement";
  }
  protected:
  explicit SecurityRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SecurityRequirement_SecurityRequirementValue SecurityRequirementValue;

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityRequirementFieldNumber = 1,
  };
  // map<string, .grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue> security_requirement = 1[json_name = "securityRequirement"];
  int security_requirement_size() const;
  private:
  int _internal_security_requirement_size() const;
  public:
  void clear_security_requirement();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >&
      _internal_security_requirement() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >*
      _internal_mutable_security_requirement();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >&
      security_requirement() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >*
      mutable_security_requirement();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SecurityRequirement_SecurityRequirementEntry_DoNotUse,
      std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > security_requirement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// -------------------------------------------------------------------

class Scopes_ScopeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scopes_ScopeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scopes_ScopeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Scopes_ScopeEntry_DoNotUse();
  Scopes_ScopeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scopes_ScopeEntry_DoNotUse& other);
  static const Scopes_ScopeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scopes_ScopeEntry_DoNotUse*>(&_Scopes_ScopeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Scopes.ScopeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc.gateway.protoc_gen_openapiv2.options.Scopes.ScopeEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[26];
  }

  public:
};

// -------------------------------------------------------------------

class Scopes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.gateway.protoc_gen_openapiv2.options.Scopes) */ {
 public:
  inline Scopes() : Scopes(nullptr) {};
  virtual ~Scopes();

  Scopes(const Scopes& from);
  Scopes(Scopes&& from) noexcept
    : Scopes() {
    *this = ::std::move(from);
  }

  inline Scopes& operator=(const Scopes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scopes& operator=(Scopes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scopes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scopes* internal_default_instance() {
    return reinterpret_cast<const Scopes*>(
               &_Scopes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Scopes& a, Scopes& b) {
    a.Swap(&b);
  }
  inline void Swap(Scopes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scopes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scopes* New() const final {
    return CreateMaybeMessage<Scopes>(nullptr);
  }

  Scopes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scopes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scopes& from);
  void MergeFrom(const Scopes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scopes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.gateway.protoc_gen_openapiv2.options.Scopes";
  }
  protected:
  explicit Scopes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto);
    return ::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kScopeFieldNumber = 1,
  };
  // map<string, string> scope = 1[json_name = "scope"];
  int scope_size() const;
  private:
  int _internal_scope_size() const;
  public:
  void clear_scope();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_scope() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_scope();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      scope() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_scope();

  // @@protoc_insertion_point(class_scope:grpc.gateway.protoc_gen_openapiv2.options.Scopes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scopes_ScopeEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Swagger

// string swagger = 1[json_name = "swagger"];
inline void Swagger::clear_swagger() {
  swagger_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Swagger::swagger() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
  return _internal_swagger();
}
inline void Swagger::set_swagger(const std::string& value) {
  _internal_set_swagger(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
}
inline std::string* Swagger::mutable_swagger() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
  return _internal_mutable_swagger();
}
inline const std::string& Swagger::_internal_swagger() const {
  return swagger_.Get();
}
inline void Swagger::_internal_set_swagger(const std::string& value) {
  
  swagger_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Swagger::set_swagger(std::string&& value) {
  
  swagger_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
}
inline void Swagger::set_swagger(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  swagger_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
}
inline void Swagger::set_swagger(const char* value,
    size_t size) {
  
  swagger_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
}
inline std::string* Swagger::_internal_mutable_swagger() {
  
  return swagger_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Swagger::release_swagger() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
  return swagger_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Swagger::set_allocated_swagger(std::string* swagger) {
  if (swagger != nullptr) {
    
  } else {
    
  }
  swagger_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), swagger,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
}
inline std::string* Swagger::unsafe_arena_release_swagger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return swagger_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Swagger::unsafe_arena_set_allocated_swagger(
    std::string* swagger) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (swagger != nullptr) {
    
  } else {
    
  }
  swagger_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      swagger, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.swagger)
}

// .grpc.gateway.protoc_gen_openapiv2.options.Info info = 2[json_name = "info"];
inline bool Swagger::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool Swagger::has_info() const {
  return _internal_has_info();
}
inline void Swagger::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Info& Swagger::_internal_info() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::Info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::Info*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_Info_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Info& Swagger::info() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.info)
  return _internal_info();
}
inline void Swagger::unsafe_arena_set_allocated_info(
    ::grpc::gateway::protoc_gen_openapiv2::options::Info* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.info)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Info* Swagger::release_info() {
  auto temp = unsafe_arena_release_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Info* Swagger::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.info)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::Info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Info* Swagger::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Info>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Info* Swagger::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.info)
  return _internal_mutable_info();
}
inline void Swagger::set_allocated_info(::grpc::gateway::protoc_gen_openapiv2::options::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.info)
}

// string host = 3[json_name = "host"];
inline void Swagger::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Swagger::host() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
  return _internal_host();
}
inline void Swagger::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
}
inline std::string* Swagger::mutable_host() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
  return _internal_mutable_host();
}
inline const std::string& Swagger::_internal_host() const {
  return host_.Get();
}
inline void Swagger::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Swagger::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
}
inline void Swagger::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
}
inline void Swagger::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
}
inline std::string* Swagger::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Swagger::release_host() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Swagger::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
}
inline std::string* Swagger::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Swagger::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.host)
}

// string base_path = 4[json_name = "basePath"];
inline void Swagger::clear_base_path() {
  base_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Swagger::base_path() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
  return _internal_base_path();
}
inline void Swagger::set_base_path(const std::string& value) {
  _internal_set_base_path(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
}
inline std::string* Swagger::mutable_base_path() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
  return _internal_mutable_base_path();
}
inline const std::string& Swagger::_internal_base_path() const {
  return base_path_.Get();
}
inline void Swagger::_internal_set_base_path(const std::string& value) {
  
  base_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Swagger::set_base_path(std::string&& value) {
  
  base_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
}
inline void Swagger::set_base_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
}
inline void Swagger::set_base_path(const char* value,
    size_t size) {
  
  base_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
}
inline std::string* Swagger::_internal_mutable_base_path() {
  
  return base_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Swagger::release_base_path() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
  return base_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Swagger::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    
  } else {
    
  }
  base_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
}
inline std::string* Swagger::unsafe_arena_release_base_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return base_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Swagger::unsafe_arena_set_allocated_base_path(
    std::string* base_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (base_path != nullptr) {
    
  } else {
    
  }
  base_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      base_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.base_path)
}

// repeated .grpc.gateway.protoc_gen_openapiv2.options.Scheme schemes = 5[json_name = "schemes"];
inline int Swagger::_internal_schemes_size() const {
  return schemes_.size();
}
inline int Swagger::schemes_size() const {
  return _internal_schemes_size();
}
inline void Swagger::clear_schemes() {
  schemes_.Clear();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scheme Swagger::_internal_schemes(int index) const {
  return static_cast< ::grpc::gateway::protoc_gen_openapiv2::options::Scheme >(schemes_.Get(index));
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scheme Swagger::schemes(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.schemes)
  return _internal_schemes(index);
}
inline void Swagger::set_schemes(int index, ::grpc::gateway::protoc_gen_openapiv2::options::Scheme value) {
  schemes_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.schemes)
}
inline void Swagger::_internal_add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value) {
  schemes_.Add(value);
}
inline void Swagger::add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value) {
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Swagger.schemes)
  _internal_add_schemes(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Swagger::schemes() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.schemes)
  return schemes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Swagger::_internal_mutable_schemes() {
  return &schemes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Swagger::mutable_schemes() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.schemes)
  return _internal_mutable_schemes();
}

// repeated string consumes = 6[json_name = "consumes"];
inline int Swagger::_internal_consumes_size() const {
  return consumes_.size();
}
inline int Swagger::consumes_size() const {
  return _internal_consumes_size();
}
inline void Swagger::clear_consumes() {
  consumes_.Clear();
}
inline std::string* Swagger::add_consumes() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  return _internal_add_consumes();
}
inline const std::string& Swagger::_internal_consumes(int index) const {
  return consumes_.Get(index);
}
inline const std::string& Swagger::consumes(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  return _internal_consumes(index);
}
inline std::string* Swagger::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  return consumes_.Mutable(index);
}
inline void Swagger::set_consumes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  consumes_.Mutable(index)->assign(value);
}
inline void Swagger::set_consumes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  consumes_.Mutable(index)->assign(std::move(value));
}
inline void Swagger::set_consumes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  consumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
}
inline void Swagger::set_consumes(int index, const char* value, size_t size) {
  consumes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
}
inline std::string* Swagger::_internal_add_consumes() {
  return consumes_.Add();
}
inline void Swagger::add_consumes(const std::string& value) {
  consumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
}
inline void Swagger::add_consumes(std::string&& value) {
  consumes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
}
inline void Swagger::add_consumes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  consumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
}
inline void Swagger::add_consumes(const char* value, size_t size) {
  consumes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Swagger::consumes() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  return consumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Swagger::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.consumes)
  return &consumes_;
}

// repeated string produces = 7[json_name = "produces"];
inline int Swagger::_internal_produces_size() const {
  return produces_.size();
}
inline int Swagger::produces_size() const {
  return _internal_produces_size();
}
inline void Swagger::clear_produces() {
  produces_.Clear();
}
inline std::string* Swagger::add_produces() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  return _internal_add_produces();
}
inline const std::string& Swagger::_internal_produces(int index) const {
  return produces_.Get(index);
}
inline const std::string& Swagger::produces(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  return _internal_produces(index);
}
inline std::string* Swagger::mutable_produces(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  return produces_.Mutable(index);
}
inline void Swagger::set_produces(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  produces_.Mutable(index)->assign(value);
}
inline void Swagger::set_produces(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  produces_.Mutable(index)->assign(std::move(value));
}
inline void Swagger::set_produces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  produces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
}
inline void Swagger::set_produces(int index, const char* value, size_t size) {
  produces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
}
inline std::string* Swagger::_internal_add_produces() {
  return produces_.Add();
}
inline void Swagger::add_produces(const std::string& value) {
  produces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
}
inline void Swagger::add_produces(std::string&& value) {
  produces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
}
inline void Swagger::add_produces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  produces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
}
inline void Swagger::add_produces(const char* value, size_t size) {
  produces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Swagger::produces() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  return produces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Swagger::mutable_produces() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.produces)
  return &produces_;
}

// map<string, .grpc.gateway.protoc_gen_openapiv2.options.Response> responses = 10[json_name = "responses"];
inline int Swagger::_internal_responses_size() const {
  return responses_.size();
}
inline int Swagger::responses_size() const {
  return _internal_responses_size();
}
inline void Swagger::clear_responses() {
  responses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
Swagger::_internal_responses() const {
  return responses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
Swagger::responses() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Swagger.responses)
  return _internal_responses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
Swagger::_internal_mutable_responses() {
  return responses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
Swagger::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Swagger.responses)
  return _internal_mutable_responses();
}

// .grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions security_definitions = 11[json_name = "securityDefinitions"];
inline bool Swagger::_internal_has_security_definitions() const {
  return this != internal_default_instance() && security_definitions_ != nullptr;
}
inline bool Swagger::has_security_definitions() const {
  return _internal_has_security_definitions();
}
inline void Swagger::clear_security_definitions() {
  if (GetArena() == nullptr && security_definitions_ != nullptr) {
    delete security_definitions_;
  }
  security_definitions_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions& Swagger::_internal_security_definitions() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* p = security_definitions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_SecurityDefinitions_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions& Swagger::security_definitions() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security_definitions)
  return _internal_security_definitions();
}
inline void Swagger::unsafe_arena_set_allocated_security_definitions(
    ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* security_definitions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_definitions_);
  }
  security_definitions_ = security_definitions;
  if (security_definitions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security_definitions)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* Swagger::release_security_definitions() {
  auto temp = unsafe_arena_release_security_definitions();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* Swagger::unsafe_arena_release_security_definitions() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security_definitions)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* temp = security_definitions_;
  security_definitions_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* Swagger::_internal_mutable_security_definitions() {
  
  if (security_definitions_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions>(GetArena());
    security_definitions_ = p;
  }
  return security_definitions_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* Swagger::mutable_security_definitions() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security_definitions)
  return _internal_mutable_security_definitions();
}
inline void Swagger::set_allocated_security_definitions(::grpc::gateway::protoc_gen_openapiv2::options::SecurityDefinitions* security_definitions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete security_definitions_;
  }
  if (security_definitions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(security_definitions);
    if (message_arena != submessage_arena) {
      security_definitions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_definitions, submessage_arena);
    }
    
  } else {
    
  }
  security_definitions_ = security_definitions;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security_definitions)
}

// repeated .grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement security = 12[json_name = "security"];
inline int Swagger::_internal_security_size() const {
  return security_.size();
}
inline int Swagger::security_size() const {
  return _internal_security_size();
}
inline void Swagger::clear_security() {
  security_.Clear();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Swagger::mutable_security(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security)
  return security_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >*
Swagger::mutable_security() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security)
  return &security_;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& Swagger::_internal_security(int index) const {
  return security_.Get(index);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& Swagger::security(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security)
  return _internal_security(index);
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Swagger::_internal_add_security() {
  return security_.Add();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Swagger::add_security() {
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security)
  return _internal_add_security();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >&
Swagger::security() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Swagger.security)
  return security_;
}

// .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 14[json_name = "externalDocs"];
inline bool Swagger::_internal_has_external_docs() const {
  return this != internal_default_instance() && external_docs_ != nullptr;
}
inline bool Swagger::has_external_docs() const {
  return _internal_has_external_docs();
}
inline void Swagger::clear_external_docs() {
  if (GetArena() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Swagger::_internal_external_docs() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* p = external_docs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_ExternalDocumentation_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Swagger::external_docs() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Swagger.external_docs)
  return _internal_external_docs();
}
inline void Swagger::unsafe_arena_set_allocated_external_docs(
    ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_docs_);
  }
  external_docs_ = external_docs;
  if (external_docs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.external_docs)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Swagger::release_external_docs() {
  auto temp = unsafe_arena_release_external_docs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Swagger::unsafe_arena_release_external_docs() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Swagger.external_docs)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* temp = external_docs_;
  external_docs_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Swagger::_internal_mutable_external_docs() {
  
  if (external_docs_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation>(GetArena());
    external_docs_ = p;
  }
  return external_docs_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Swagger::mutable_external_docs() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Swagger.external_docs)
  return _internal_mutable_external_docs();
}
inline void Swagger::set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete external_docs_;
  }
  if (external_docs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(external_docs);
    if (message_arena != submessage_arena) {
      external_docs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_docs, submessage_arena);
    }
    
  } else {
    
  }
  external_docs_ = external_docs;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Swagger.external_docs)
}

// map<string, .google.protobuf.Value> extensions = 15[json_name = "extensions"];
inline int Swagger::_internal_extensions_size() const {
  return extensions_.size();
}
inline int Swagger::extensions_size() const {
  return _internal_extensions_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Swagger::_internal_extensions() const {
  return extensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Swagger::extensions() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Swagger.extensions)
  return _internal_extensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Swagger::_internal_mutable_extensions() {
  return extensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Swagger::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Swagger.extensions)
  return _internal_mutable_extensions();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Operation

// repeated string tags = 1[json_name = "tags"];
inline int Operation::_internal_tags_size() const {
  return tags_.size();
}
inline int Operation::tags_size() const {
  return _internal_tags_size();
}
inline void Operation::clear_tags() {
  tags_.Clear();
}
inline std::string* Operation::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  return _internal_add_tags();
}
inline const std::string& Operation::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Operation::tags(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  return _internal_tags(index);
}
inline std::string* Operation::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  return tags_.Mutable(index);
}
inline void Operation::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Operation::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Operation::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
}
inline void Operation::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
}
inline std::string* Operation::_internal_add_tags() {
  return tags_.Add();
}
inline void Operation::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
}
inline void Operation::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
}
inline void Operation::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
}
inline void Operation::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Operation::tags() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Operation::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.tags)
  return &tags_;
}

// string summary = 2[json_name = "summary"];
inline void Operation::clear_summary() {
  summary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Operation::summary() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
  return _internal_summary();
}
inline void Operation::set_summary(const std::string& value) {
  _internal_set_summary(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
}
inline std::string* Operation::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
  return _internal_mutable_summary();
}
inline const std::string& Operation::_internal_summary() const {
  return summary_.Get();
}
inline void Operation::_internal_set_summary(const std::string& value) {
  
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_summary(std::string&& value) {
  
  summary_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
}
inline void Operation::set_summary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
}
inline void Operation::set_summary(const char* value,
    size_t size) {
  
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
}
inline std::string* Operation::_internal_mutable_summary() {
  
  return summary_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_summary() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
  return summary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
}
inline std::string* Operation::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return summary_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Operation::unsafe_arena_set_allocated_summary(
    std::string* summary) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      summary, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.summary)
}

// string description = 3[json_name = "description"];
inline void Operation::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Operation::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
  return _internal_description();
}
inline void Operation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
}
inline std::string* Operation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
  return _internal_mutable_description();
}
inline const std::string& Operation::_internal_description() const {
  return description_.Get();
}
inline void Operation::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
}
inline void Operation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
}
inline void Operation::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
}
inline std::string* Operation::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
}
inline std::string* Operation::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Operation::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.description)
}

// .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 4[json_name = "externalDocs"];
inline bool Operation::_internal_has_external_docs() const {
  return this != internal_default_instance() && external_docs_ != nullptr;
}
inline bool Operation::has_external_docs() const {
  return _internal_has_external_docs();
}
inline void Operation::clear_external_docs() {
  if (GetArena() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Operation::_internal_external_docs() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* p = external_docs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_ExternalDocumentation_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Operation::external_docs() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.external_docs)
  return _internal_external_docs();
}
inline void Operation::unsafe_arena_set_allocated_external_docs(
    ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_docs_);
  }
  external_docs_ = external_docs;
  if (external_docs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.external_docs)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Operation::release_external_docs() {
  auto temp = unsafe_arena_release_external_docs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Operation::unsafe_arena_release_external_docs() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.external_docs)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* temp = external_docs_;
  external_docs_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Operation::_internal_mutable_external_docs() {
  
  if (external_docs_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation>(GetArena());
    external_docs_ = p;
  }
  return external_docs_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Operation::mutable_external_docs() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.external_docs)
  return _internal_mutable_external_docs();
}
inline void Operation::set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete external_docs_;
  }
  if (external_docs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(external_docs);
    if (message_arena != submessage_arena) {
      external_docs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_docs, submessage_arena);
    }
    
  } else {
    
  }
  external_docs_ = external_docs;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.external_docs)
}

// string operation_id = 5[json_name = "operationId"];
inline void Operation::clear_operation_id() {
  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Operation::operation_id() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
  return _internal_operation_id();
}
inline void Operation::set_operation_id(const std::string& value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
}
inline std::string* Operation::mutable_operation_id() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
  return _internal_mutable_operation_id();
}
inline const std::string& Operation::_internal_operation_id() const {
  return operation_id_.Get();
}
inline void Operation::_internal_set_operation_id(const std::string& value) {
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_operation_id(std::string&& value) {
  
  operation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
}
inline void Operation::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
}
inline void Operation::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
}
inline std::string* Operation::_internal_mutable_operation_id() {
  
  return operation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_operation_id() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
  return operation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
}
inline std::string* Operation::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Operation::unsafe_arena_set_allocated_operation_id(
    std::string* operation_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Operation.operation_id)
}

// repeated string consumes = 6[json_name = "consumes"];
inline int Operation::_internal_consumes_size() const {
  return consumes_.size();
}
inline int Operation::consumes_size() const {
  return _internal_consumes_size();
}
inline void Operation::clear_consumes() {
  consumes_.Clear();
}
inline std::string* Operation::add_consumes() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  return _internal_add_consumes();
}
inline const std::string& Operation::_internal_consumes(int index) const {
  return consumes_.Get(index);
}
inline const std::string& Operation::consumes(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  return _internal_consumes(index);
}
inline std::string* Operation::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  return consumes_.Mutable(index);
}
inline void Operation::set_consumes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  consumes_.Mutable(index)->assign(value);
}
inline void Operation::set_consumes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  consumes_.Mutable(index)->assign(std::move(value));
}
inline void Operation::set_consumes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  consumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
}
inline void Operation::set_consumes(int index, const char* value, size_t size) {
  consumes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
}
inline std::string* Operation::_internal_add_consumes() {
  return consumes_.Add();
}
inline void Operation::add_consumes(const std::string& value) {
  consumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
}
inline void Operation::add_consumes(std::string&& value) {
  consumes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
}
inline void Operation::add_consumes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  consumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
}
inline void Operation::add_consumes(const char* value, size_t size) {
  consumes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Operation::consumes() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  return consumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Operation::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.consumes)
  return &consumes_;
}

// repeated string produces = 7[json_name = "produces"];
inline int Operation::_internal_produces_size() const {
  return produces_.size();
}
inline int Operation::produces_size() const {
  return _internal_produces_size();
}
inline void Operation::clear_produces() {
  produces_.Clear();
}
inline std::string* Operation::add_produces() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  return _internal_add_produces();
}
inline const std::string& Operation::_internal_produces(int index) const {
  return produces_.Get(index);
}
inline const std::string& Operation::produces(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  return _internal_produces(index);
}
inline std::string* Operation::mutable_produces(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  return produces_.Mutable(index);
}
inline void Operation::set_produces(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  produces_.Mutable(index)->assign(value);
}
inline void Operation::set_produces(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  produces_.Mutable(index)->assign(std::move(value));
}
inline void Operation::set_produces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  produces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
}
inline void Operation::set_produces(int index, const char* value, size_t size) {
  produces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
}
inline std::string* Operation::_internal_add_produces() {
  return produces_.Add();
}
inline void Operation::add_produces(const std::string& value) {
  produces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
}
inline void Operation::add_produces(std::string&& value) {
  produces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
}
inline void Operation::add_produces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  produces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
}
inline void Operation::add_produces(const char* value, size_t size) {
  produces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Operation::produces() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  return produces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Operation::mutable_produces() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.produces)
  return &produces_;
}

// map<string, .grpc.gateway.protoc_gen_openapiv2.options.Response> responses = 9[json_name = "responses"];
inline int Operation::_internal_responses_size() const {
  return responses_.size();
}
inline int Operation::responses_size() const {
  return _internal_responses_size();
}
inline void Operation::clear_responses() {
  responses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
Operation::_internal_responses() const {
  return responses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >&
Operation::responses() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Operation.responses)
  return _internal_responses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
Operation::_internal_mutable_responses() {
  return responses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Response >*
Operation::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Operation.responses)
  return _internal_mutable_responses();
}

// repeated .grpc.gateway.protoc_gen_openapiv2.options.Scheme schemes = 10[json_name = "schemes"];
inline int Operation::_internal_schemes_size() const {
  return schemes_.size();
}
inline int Operation::schemes_size() const {
  return _internal_schemes_size();
}
inline void Operation::clear_schemes() {
  schemes_.Clear();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scheme Operation::_internal_schemes(int index) const {
  return static_cast< ::grpc::gateway::protoc_gen_openapiv2::options::Scheme >(schemes_.Get(index));
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scheme Operation::schemes(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.schemes)
  return _internal_schemes(index);
}
inline void Operation::set_schemes(int index, ::grpc::gateway::protoc_gen_openapiv2::options::Scheme value) {
  schemes_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.schemes)
}
inline void Operation::_internal_add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value) {
  schemes_.Add(value);
}
inline void Operation::add_schemes(::grpc::gateway::protoc_gen_openapiv2::options::Scheme value) {
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.schemes)
  _internal_add_schemes(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Operation::schemes() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.schemes)
  return schemes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Operation::_internal_mutable_schemes() {
  return &schemes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Operation::mutable_schemes() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.schemes)
  return _internal_mutable_schemes();
}

// bool deprecated = 11[json_name = "deprecated"];
inline void Operation::clear_deprecated() {
  deprecated_ = false;
}
inline bool Operation::_internal_deprecated() const {
  return deprecated_;
}
inline bool Operation::deprecated() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.deprecated)
  return _internal_deprecated();
}
inline void Operation::_internal_set_deprecated(bool value) {
  
  deprecated_ = value;
}
inline void Operation::set_deprecated(bool value) {
  _internal_set_deprecated(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Operation.deprecated)
}

// repeated .grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement security = 12[json_name = "security"];
inline int Operation::_internal_security_size() const {
  return security_.size();
}
inline int Operation::security_size() const {
  return _internal_security_size();
}
inline void Operation::clear_security() {
  security_.Clear();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Operation::mutable_security(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Operation.security)
  return security_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >*
Operation::mutable_security() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.security)
  return &security_;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& Operation::_internal_security(int index) const {
  return security_.Get(index);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement& Operation::security(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Operation.security)
  return _internal_security(index);
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Operation::_internal_add_security() {
  return security_.Add();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement* Operation::add_security() {
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.Operation.security)
  return _internal_add_security();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement >&
Operation::security() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.Operation.security)
  return security_;
}

// map<string, .google.protobuf.Value> extensions = 13[json_name = "extensions"];
inline int Operation::_internal_extensions_size() const {
  return extensions_.size();
}
inline int Operation::extensions_size() const {
  return _internal_extensions_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Operation::_internal_extensions() const {
  return extensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Operation::extensions() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Operation.extensions)
  return _internal_extensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Operation::_internal_mutable_extensions() {
  return extensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Operation::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Operation.extensions)
  return _internal_mutable_extensions();
}

// -------------------------------------------------------------------

// Header

// string description = 1[json_name = "description"];
inline void Header::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
  return _internal_description();
}
inline void Header::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
}
inline std::string* Header::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
  return _internal_mutable_description();
}
inline const std::string& Header::_internal_description() const {
  return description_.Get();
}
inline void Header::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
}
inline void Header::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
}
inline void Header::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
}
inline std::string* Header::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
}
inline std::string* Header::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.description)
}

// string type = 2[json_name = "type"];
inline void Header::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::type() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
  return _internal_type();
}
inline void Header::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
}
inline std::string* Header::mutable_type() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
  return _internal_mutable_type();
}
inline const std::string& Header::_internal_type() const {
  return type_.Get();
}
inline void Header::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
}
inline void Header::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
}
inline void Header::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
}
inline std::string* Header::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_type() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
}
inline std::string* Header::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.type)
}

// string format = 3[json_name = "format"];
inline void Header::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::format() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
  return _internal_format();
}
inline void Header::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
}
inline std::string* Header::mutable_format() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
  return _internal_mutable_format();
}
inline const std::string& Header::_internal_format() const {
  return format_.Get();
}
inline void Header::_internal_set_format(const std::string& value) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_format(std::string&& value) {
  
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
}
inline void Header::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
}
inline void Header::set_format(const char* value,
    size_t size) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
}
inline std::string* Header::_internal_mutable_format() {
  
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_format() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
}
inline std::string* Header::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (format != nullptr) {
    
  } else {
    
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.format)
}

// string default = 6[json_name = "default"];
inline void Header::clear_default_() {
  default__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::default_() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
  return _internal_default_();
}
inline void Header::set_default_(const std::string& value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
}
inline std::string* Header::mutable_default_() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
  return _internal_mutable_default_();
}
inline const std::string& Header::_internal_default_() const {
  return default__.Get();
}
inline void Header::_internal_set_default_(const std::string& value) {
  
  default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_default_(std::string&& value) {
  
  default__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
}
inline void Header::set_default_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
}
inline void Header::set_default_(const char* value,
    size_t size) {
  
  default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
}
inline std::string* Header::_internal_mutable_default_() {
  
  return default__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_default_() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
  return default__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
}
inline std::string* Header::unsafe_arena_release_default_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return default__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_default_(
    std::string* default_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      default_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.default)
}

// string pattern = 13[json_name = "pattern"];
inline void Header::clear_pattern() {
  pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::pattern() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
  return _internal_pattern();
}
inline void Header::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
}
inline std::string* Header::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& Header::_internal_pattern() const {
  return pattern_.Get();
}
inline void Header::_internal_set_pattern(const std::string& value) {
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_pattern(std::string&& value) {
  
  pattern_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
}
inline void Header::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
}
inline void Header::set_pattern(const char* value,
    size_t size) {
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
}
inline std::string* Header::_internal_mutable_pattern() {
  
  return pattern_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_pattern() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
  return pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
}
inline std::string* Header::unsafe_arena_release_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pattern_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_pattern(
    std::string* pattern) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pattern, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Header.pattern)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Response

// string description = 1[json_name = "description"];
inline void Response::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
  return _internal_description();
}
inline void Response::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
}
inline std::string* Response::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
  return _internal_mutable_description();
}
inline const std::string& Response::_internal_description() const {
  return description_.Get();
}
inline void Response::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
}
inline void Response::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
}
inline void Response::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
}
inline std::string* Response::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
}
inline std::string* Response::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Response.description)
}

// .grpc.gateway.protoc_gen_openapiv2.options.Schema schema = 2[json_name = "schema"];
inline bool Response::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool Response::has_schema() const {
  return _internal_has_schema();
}
inline void Response::clear_schema() {
  if (GetArena() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Schema& Response::_internal_schema() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::Schema* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::Schema*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_Schema_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Schema& Response::schema() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Response.schema)
  return _internal_schema();
}
inline void Response::unsafe_arena_set_allocated_schema(
    ::grpc::gateway::protoc_gen_openapiv2::options::Schema* schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Response.schema)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Schema* Response::release_schema() {
  auto temp = unsafe_arena_release_schema();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Schema* Response::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Response.schema)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::Schema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Schema* Response::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Schema>(GetArena());
    schema_ = p;
  }
  return schema_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Schema* Response::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Response.schema)
  return _internal_mutable_schema();
}
inline void Response::set_allocated_schema(::grpc::gateway::protoc_gen_openapiv2::options::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Response.schema)
}

// map<string, .grpc.gateway.protoc_gen_openapiv2.options.Header> headers = 3[json_name = "headers"];
inline int Response::_internal_headers_size() const {
  return headers_.size();
}
inline int Response::headers_size() const {
  return _internal_headers_size();
}
inline void Response::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >&
Response::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >&
Response::headers() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Response.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >*
Response::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::Header >*
Response::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Response.headers)
  return _internal_mutable_headers();
}

// map<string, string> examples = 4[json_name = "examples"];
inline int Response::_internal_examples_size() const {
  return examples_.size();
}
inline int Response::examples_size() const {
  return _internal_examples_size();
}
inline void Response::clear_examples() {
  examples_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Response::_internal_examples() const {
  return examples_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Response::examples() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Response.examples)
  return _internal_examples();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Response::_internal_mutable_examples() {
  return examples_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Response::mutable_examples() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Response.examples)
  return _internal_mutable_examples();
}

// map<string, .google.protobuf.Value> extensions = 5[json_name = "extensions"];
inline int Response::_internal_extensions_size() const {
  return extensions_.size();
}
inline int Response::extensions_size() const {
  return _internal_extensions_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Response::_internal_extensions() const {
  return extensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Response::extensions() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Response.extensions)
  return _internal_extensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Response::_internal_mutable_extensions() {
  return extensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Response::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Response.extensions)
  return _internal_mutable_extensions();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Info

// string title = 1[json_name = "title"];
inline void Info::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Info::title() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
  return _internal_title();
}
inline void Info::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
}
inline std::string* Info::mutable_title() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
  return _internal_mutable_title();
}
inline const std::string& Info::_internal_title() const {
  return title_.Get();
}
inline void Info::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Info::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
}
inline void Info::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
}
inline void Info::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
}
inline std::string* Info::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Info::release_title() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Info::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
}
inline std::string* Info::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Info::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.title)
}

// string description = 2[json_name = "description"];
inline void Info::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Info::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
  return _internal_description();
}
inline void Info::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
}
inline std::string* Info::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
  return _internal_mutable_description();
}
inline const std::string& Info::_internal_description() const {
  return description_.Get();
}
inline void Info::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Info::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
}
inline void Info::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
}
inline void Info::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
}
inline std::string* Info::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Info::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Info::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
}
inline std::string* Info::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Info::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.description)
}

// string terms_of_service = 3[json_name = "termsOfService"];
inline void Info::clear_terms_of_service() {
  terms_of_service_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Info::terms_of_service() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
  return _internal_terms_of_service();
}
inline void Info::set_terms_of_service(const std::string& value) {
  _internal_set_terms_of_service(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
}
inline std::string* Info::mutable_terms_of_service() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
  return _internal_mutable_terms_of_service();
}
inline const std::string& Info::_internal_terms_of_service() const {
  return terms_of_service_.Get();
}
inline void Info::_internal_set_terms_of_service(const std::string& value) {
  
  terms_of_service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Info::set_terms_of_service(std::string&& value) {
  
  terms_of_service_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
}
inline void Info::set_terms_of_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terms_of_service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
}
inline void Info::set_terms_of_service(const char* value,
    size_t size) {
  
  terms_of_service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
}
inline std::string* Info::_internal_mutable_terms_of_service() {
  
  return terms_of_service_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Info::release_terms_of_service() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
  return terms_of_service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Info::set_allocated_terms_of_service(std::string* terms_of_service) {
  if (terms_of_service != nullptr) {
    
  } else {
    
  }
  terms_of_service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terms_of_service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
}
inline std::string* Info::unsafe_arena_release_terms_of_service() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return terms_of_service_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Info::unsafe_arena_set_allocated_terms_of_service(
    std::string* terms_of_service) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (terms_of_service != nullptr) {
    
  } else {
    
  }
  terms_of_service_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      terms_of_service, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.terms_of_service)
}

// .grpc.gateway.protoc_gen_openapiv2.options.Contact contact = 4[json_name = "contact"];
inline bool Info::_internal_has_contact() const {
  return this != internal_default_instance() && contact_ != nullptr;
}
inline bool Info::has_contact() const {
  return _internal_has_contact();
}
inline void Info::clear_contact() {
  if (GetArena() == nullptr && contact_ != nullptr) {
    delete contact_;
  }
  contact_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Contact& Info::_internal_contact() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::Contact* p = contact_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::Contact*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_Contact_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Contact& Info::contact() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Info.contact)
  return _internal_contact();
}
inline void Info::unsafe_arena_set_allocated_contact(
    ::grpc::gateway::protoc_gen_openapiv2::options::Contact* contact) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_);
  }
  contact_ = contact;
  if (contact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.contact)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Contact* Info::release_contact() {
  auto temp = unsafe_arena_release_contact();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Contact* Info::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Info.contact)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::Contact* temp = contact_;
  contact_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Contact* Info::_internal_mutable_contact() {
  
  if (contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Contact>(GetArena());
    contact_ = p;
  }
  return contact_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Contact* Info::mutable_contact() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Info.contact)
  return _internal_mutable_contact();
}
inline void Info::set_allocated_contact(::grpc::gateway::protoc_gen_openapiv2::options::Contact* contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contact_;
  }
  if (contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contact);
    if (message_arena != submessage_arena) {
      contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    
  } else {
    
  }
  contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.contact)
}

// .grpc.gateway.protoc_gen_openapiv2.options.License license = 5[json_name = "license"];
inline bool Info::_internal_has_license() const {
  return this != internal_default_instance() && license_ != nullptr;
}
inline bool Info::has_license() const {
  return _internal_has_license();
}
inline void Info::clear_license() {
  if (GetArena() == nullptr && license_ != nullptr) {
    delete license_;
  }
  license_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::License& Info::_internal_license() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::License* p = license_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::License*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_License_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::License& Info::license() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Info.license)
  return _internal_license();
}
inline void Info::unsafe_arena_set_allocated_license(
    ::grpc::gateway::protoc_gen_openapiv2::options::License* license) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(license_);
  }
  license_ = license;
  if (license) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.license)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::License* Info::release_license() {
  auto temp = unsafe_arena_release_license();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::License* Info::unsafe_arena_release_license() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Info.license)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::License* temp = license_;
  license_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::License* Info::_internal_mutable_license() {
  
  if (license_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::License>(GetArena());
    license_ = p;
  }
  return license_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::License* Info::mutable_license() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Info.license)
  return _internal_mutable_license();
}
inline void Info::set_allocated_license(::grpc::gateway::protoc_gen_openapiv2::options::License* license) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete license_;
  }
  if (license) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(license);
    if (message_arena != submessage_arena) {
      license = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, license, submessage_arena);
    }
    
  } else {
    
  }
  license_ = license;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.license)
}

// string version = 6[json_name = "version"];
inline void Info::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Info::version() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
  return _internal_version();
}
inline void Info::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
}
inline std::string* Info::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
  return _internal_mutable_version();
}
inline const std::string& Info::_internal_version() const {
  return version_.Get();
}
inline void Info::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Info::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
}
inline void Info::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
}
inline void Info::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
}
inline std::string* Info::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Info::release_version() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Info::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
}
inline std::string* Info::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Info::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Info.version)
}

// map<string, .google.protobuf.Value> extensions = 7[json_name = "extensions"];
inline int Info::_internal_extensions_size() const {
  return extensions_.size();
}
inline int Info::extensions_size() const {
  return _internal_extensions_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Info::_internal_extensions() const {
  return extensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Info::extensions() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Info.extensions)
  return _internal_extensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Info::_internal_mutable_extensions() {
  return extensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Info::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Info.extensions)
  return _internal_mutable_extensions();
}

// -------------------------------------------------------------------

// Contact

// string name = 1[json_name = "name"];
inline void Contact::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Contact::name() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
  return _internal_name();
}
inline void Contact::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
}
inline std::string* Contact::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
  return _internal_mutable_name();
}
inline const std::string& Contact::_internal_name() const {
  return name_.Get();
}
inline void Contact::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
}
inline void Contact::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
}
inline void Contact::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
}
inline std::string* Contact::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_name() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
}
inline std::string* Contact::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Contact::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Contact.name)
}

// string url = 2[json_name = "url"];
inline void Contact::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Contact::url() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
  return _internal_url();
}
inline void Contact::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
}
inline std::string* Contact::mutable_url() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
  return _internal_mutable_url();
}
inline const std::string& Contact::_internal_url() const {
  return url_.Get();
}
inline void Contact::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
}
inline void Contact::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
}
inline void Contact::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
}
inline std::string* Contact::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_url() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
}
inline std::string* Contact::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Contact::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Contact.url)
}

// string email = 3[json_name = "email"];
inline void Contact::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Contact::email() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
  return _internal_email();
}
inline void Contact::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
}
inline std::string* Contact::mutable_email() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
  return _internal_mutable_email();
}
inline const std::string& Contact::_internal_email() const {
  return email_.Get();
}
inline void Contact::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
}
inline void Contact::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
}
inline void Contact::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
}
inline std::string* Contact::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_email() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
}
inline std::string* Contact::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Contact::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Contact.email)
}

// -------------------------------------------------------------------

// License

// string name = 1[json_name = "name"];
inline void License::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& License::name() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.License.name)
  return _internal_name();
}
inline void License::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.License.name)
}
inline std::string* License::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.License.name)
  return _internal_mutable_name();
}
inline const std::string& License::_internal_name() const {
  return name_.Get();
}
inline void License::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void License::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.License.name)
}
inline void License::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.License.name)
}
inline void License::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.License.name)
}
inline std::string* License::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* License::release_name() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.License.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void License::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.License.name)
}
inline std::string* License::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.License.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void License::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.License.name)
}

// string url = 2[json_name = "url"];
inline void License::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& License::url() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.License.url)
  return _internal_url();
}
inline void License::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.License.url)
}
inline std::string* License::mutable_url() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.License.url)
  return _internal_mutable_url();
}
inline const std::string& License::_internal_url() const {
  return url_.Get();
}
inline void License::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void License::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.License.url)
}
inline void License::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.License.url)
}
inline void License::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.License.url)
}
inline std::string* License::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* License::release_url() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.License.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void License::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.License.url)
}
inline std::string* License::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.License.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void License::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.License.url)
}

// -------------------------------------------------------------------

// ExternalDocumentation

// string description = 1[json_name = "description"];
inline void ExternalDocumentation::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExternalDocumentation::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
  return _internal_description();
}
inline void ExternalDocumentation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
}
inline std::string* ExternalDocumentation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
  return _internal_mutable_description();
}
inline const std::string& ExternalDocumentation::_internal_description() const {
  return description_.Get();
}
inline void ExternalDocumentation::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExternalDocumentation::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
}
inline void ExternalDocumentation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
}
inline void ExternalDocumentation::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
}
inline std::string* ExternalDocumentation::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExternalDocumentation::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExternalDocumentation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
}
inline std::string* ExternalDocumentation::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExternalDocumentation::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.description)
}

// string url = 2[json_name = "url"];
inline void ExternalDocumentation::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExternalDocumentation::url() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
  return _internal_url();
}
inline void ExternalDocumentation::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
}
inline std::string* ExternalDocumentation::mutable_url() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
  return _internal_mutable_url();
}
inline const std::string& ExternalDocumentation::_internal_url() const {
  return url_.Get();
}
inline void ExternalDocumentation::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExternalDocumentation::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
}
inline void ExternalDocumentation::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
}
inline void ExternalDocumentation::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
}
inline std::string* ExternalDocumentation::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExternalDocumentation::release_url() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExternalDocumentation::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
}
inline std::string* ExternalDocumentation::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExternalDocumentation::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation.url)
}

// -------------------------------------------------------------------

// Schema

// .grpc.gateway.protoc_gen_openapiv2.options.JSONSchema json_schema = 1[json_name = "jsonSchema"];
inline bool Schema::_internal_has_json_schema() const {
  return this != internal_default_instance() && json_schema_ != nullptr;
}
inline bool Schema::has_json_schema() const {
  return _internal_has_json_schema();
}
inline void Schema::clear_json_schema() {
  if (GetArena() == nullptr && json_schema_ != nullptr) {
    delete json_schema_;
  }
  json_schema_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema& Schema::_internal_json_schema() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* p = json_schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_JSONSchema_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema& Schema::json_schema() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Schema.json_schema)
  return _internal_json_schema();
}
inline void Schema::unsafe_arena_set_allocated_json_schema(
    ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* json_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(json_schema_);
  }
  json_schema_ = json_schema;
  if (json_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.json_schema)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* Schema::release_json_schema() {
  auto temp = unsafe_arena_release_json_schema();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* Schema::unsafe_arena_release_json_schema() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Schema.json_schema)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* temp = json_schema_;
  json_schema_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* Schema::_internal_mutable_json_schema() {
  
  if (json_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema>(GetArena());
    json_schema_ = p;
  }
  return json_schema_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* Schema::mutable_json_schema() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Schema.json_schema)
  return _internal_mutable_json_schema();
}
inline void Schema::set_allocated_json_schema(::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema* json_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete json_schema_;
  }
  if (json_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(json_schema);
    if (message_arena != submessage_arena) {
      json_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, json_schema, submessage_arena);
    }
    
  } else {
    
  }
  json_schema_ = json_schema;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.json_schema)
}

// string discriminator = 2[json_name = "discriminator"];
inline void Schema::clear_discriminator() {
  discriminator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Schema::discriminator() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
  return _internal_discriminator();
}
inline void Schema::set_discriminator(const std::string& value) {
  _internal_set_discriminator(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
}
inline std::string* Schema::mutable_discriminator() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
  return _internal_mutable_discriminator();
}
inline const std::string& Schema::_internal_discriminator() const {
  return discriminator_.Get();
}
inline void Schema::_internal_set_discriminator(const std::string& value) {
  
  discriminator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Schema::set_discriminator(std::string&& value) {
  
  discriminator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
}
inline void Schema::set_discriminator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  discriminator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
}
inline void Schema::set_discriminator(const char* value,
    size_t size) {
  
  discriminator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
}
inline std::string* Schema::_internal_mutable_discriminator() {
  
  return discriminator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Schema::release_discriminator() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
  return discriminator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_discriminator(std::string* discriminator) {
  if (discriminator != nullptr) {
    
  } else {
    
  }
  discriminator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), discriminator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
}
inline std::string* Schema::unsafe_arena_release_discriminator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return discriminator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Schema::unsafe_arena_set_allocated_discriminator(
    std::string* discriminator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (discriminator != nullptr) {
    
  } else {
    
  }
  discriminator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      discriminator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.discriminator)
}

// bool read_only = 3[json_name = "readOnly"];
inline void Schema::clear_read_only() {
  read_only_ = false;
}
inline bool Schema::_internal_read_only() const {
  return read_only_;
}
inline bool Schema::read_only() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Schema.read_only)
  return _internal_read_only();
}
inline void Schema::_internal_set_read_only(bool value) {
  
  read_only_ = value;
}
inline void Schema::set_read_only(bool value) {
  _internal_set_read_only(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Schema.read_only)
}

// .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 5[json_name = "externalDocs"];
inline bool Schema::_internal_has_external_docs() const {
  return this != internal_default_instance() && external_docs_ != nullptr;
}
inline bool Schema::has_external_docs() const {
  return _internal_has_external_docs();
}
inline void Schema::clear_external_docs() {
  if (GetArena() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Schema::_internal_external_docs() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* p = external_docs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_ExternalDocumentation_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Schema::external_docs() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Schema.external_docs)
  return _internal_external_docs();
}
inline void Schema::unsafe_arena_set_allocated_external_docs(
    ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_docs_);
  }
  external_docs_ = external_docs;
  if (external_docs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.external_docs)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Schema::release_external_docs() {
  auto temp = unsafe_arena_release_external_docs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Schema::unsafe_arena_release_external_docs() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Schema.external_docs)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* temp = external_docs_;
  external_docs_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Schema::_internal_mutable_external_docs() {
  
  if (external_docs_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation>(GetArena());
    external_docs_ = p;
  }
  return external_docs_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Schema::mutable_external_docs() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Schema.external_docs)
  return _internal_mutable_external_docs();
}
inline void Schema::set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete external_docs_;
  }
  if (external_docs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(external_docs);
    if (message_arena != submessage_arena) {
      external_docs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_docs, submessage_arena);
    }
    
  } else {
    
  }
  external_docs_ = external_docs;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.external_docs)
}

// string example = 6[json_name = "example"];
inline void Schema::clear_example() {
  example_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Schema::example() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
  return _internal_example();
}
inline void Schema::set_example(const std::string& value) {
  _internal_set_example(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
}
inline std::string* Schema::mutable_example() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
  return _internal_mutable_example();
}
inline const std::string& Schema::_internal_example() const {
  return example_.Get();
}
inline void Schema::_internal_set_example(const std::string& value) {
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Schema::set_example(std::string&& value) {
  
  example_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
}
inline void Schema::set_example(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
}
inline void Schema::set_example(const char* value,
    size_t size) {
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
}
inline std::string* Schema::_internal_mutable_example() {
  
  return example_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Schema::release_example() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
  return example_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schema::set_allocated_example(std::string* example) {
  if (example != nullptr) {
    
  } else {
    
  }
  example_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
}
inline std::string* Schema::unsafe_arena_release_example() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return example_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Schema::unsafe_arena_set_allocated_example(
    std::string* example) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (example != nullptr) {
    
  } else {
    
  }
  example_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      example, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Schema.example)
}

// -------------------------------------------------------------------

// JSONSchema

// string ref = 3[json_name = "ref"];
inline void JSONSchema::clear_ref() {
  ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::ref() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
  return _internal_ref();
}
inline void JSONSchema::set_ref(const std::string& value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
}
inline std::string* JSONSchema::mutable_ref() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
  return _internal_mutable_ref();
}
inline const std::string& JSONSchema::_internal_ref() const {
  return ref_.Get();
}
inline void JSONSchema::_internal_set_ref(const std::string& value) {
  
  ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_ref(std::string&& value) {
  
  ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
}
inline void JSONSchema::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
}
inline void JSONSchema::set_ref(const char* value,
    size_t size) {
  
  ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
}
inline std::string* JSONSchema::_internal_mutable_ref() {
  
  return ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_ref() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
  return ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
}
inline std::string* JSONSchema::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_ref(
    std::string* ref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.ref)
}

// string title = 5[json_name = "title"];
inline void JSONSchema::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::title() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
  return _internal_title();
}
inline void JSONSchema::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
}
inline std::string* JSONSchema::mutable_title() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
  return _internal_mutable_title();
}
inline const std::string& JSONSchema::_internal_title() const {
  return title_.Get();
}
inline void JSONSchema::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
}
inline void JSONSchema::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
}
inline void JSONSchema::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
}
inline std::string* JSONSchema::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_title() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
}
inline std::string* JSONSchema::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.title)
}

// string description = 6[json_name = "description"];
inline void JSONSchema::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
  return _internal_description();
}
inline void JSONSchema::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
}
inline std::string* JSONSchema::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
  return _internal_mutable_description();
}
inline const std::string& JSONSchema::_internal_description() const {
  return description_.Get();
}
inline void JSONSchema::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
}
inline void JSONSchema::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
}
inline void JSONSchema::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
}
inline std::string* JSONSchema::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
}
inline std::string* JSONSchema::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.description)
}

// string default = 7[json_name = "default"];
inline void JSONSchema::clear_default_() {
  default__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::default_() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
  return _internal_default_();
}
inline void JSONSchema::set_default_(const std::string& value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
}
inline std::string* JSONSchema::mutable_default_() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
  return _internal_mutable_default_();
}
inline const std::string& JSONSchema::_internal_default_() const {
  return default__.Get();
}
inline void JSONSchema::_internal_set_default_(const std::string& value) {
  
  default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_default_(std::string&& value) {
  
  default__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
}
inline void JSONSchema::set_default_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
}
inline void JSONSchema::set_default_(const char* value,
    size_t size) {
  
  default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
}
inline std::string* JSONSchema::_internal_mutable_default_() {
  
  return default__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_default_() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
  return default__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
}
inline std::string* JSONSchema::unsafe_arena_release_default_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return default__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_default_(
    std::string* default_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      default_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.default)
}

// bool read_only = 8[json_name = "readOnly"];
inline void JSONSchema::clear_read_only() {
  read_only_ = false;
}
inline bool JSONSchema::_internal_read_only() const {
  return read_only_;
}
inline bool JSONSchema::read_only() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.read_only)
  return _internal_read_only();
}
inline void JSONSchema::_internal_set_read_only(bool value) {
  
  read_only_ = value;
}
inline void JSONSchema::set_read_only(bool value) {
  _internal_set_read_only(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.read_only)
}

// string example = 9[json_name = "example"];
inline void JSONSchema::clear_example() {
  example_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::example() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
  return _internal_example();
}
inline void JSONSchema::set_example(const std::string& value) {
  _internal_set_example(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
}
inline std::string* JSONSchema::mutable_example() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
  return _internal_mutable_example();
}
inline const std::string& JSONSchema::_internal_example() const {
  return example_.Get();
}
inline void JSONSchema::_internal_set_example(const std::string& value) {
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_example(std::string&& value) {
  
  example_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
}
inline void JSONSchema::set_example(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
}
inline void JSONSchema::set_example(const char* value,
    size_t size) {
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
}
inline std::string* JSONSchema::_internal_mutable_example() {
  
  return example_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_example() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
  return example_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_example(std::string* example) {
  if (example != nullptr) {
    
  } else {
    
  }
  example_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
}
inline std::string* JSONSchema::unsafe_arena_release_example() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return example_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_example(
    std::string* example) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (example != nullptr) {
    
  } else {
    
  }
  example_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      example, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.example)
}

// double multiple_of = 10[json_name = "multipleOf"];
inline void JSONSchema::clear_multiple_of() {
  multiple_of_ = 0;
}
inline double JSONSchema::_internal_multiple_of() const {
  return multiple_of_;
}
inline double JSONSchema::multiple_of() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.multiple_of)
  return _internal_multiple_of();
}
inline void JSONSchema::_internal_set_multiple_of(double value) {
  
  multiple_of_ = value;
}
inline void JSONSchema::set_multiple_of(double value) {
  _internal_set_multiple_of(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.multiple_of)
}

// double maximum = 11[json_name = "maximum"];
inline void JSONSchema::clear_maximum() {
  maximum_ = 0;
}
inline double JSONSchema::_internal_maximum() const {
  return maximum_;
}
inline double JSONSchema::maximum() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.maximum)
  return _internal_maximum();
}
inline void JSONSchema::_internal_set_maximum(double value) {
  
  maximum_ = value;
}
inline void JSONSchema::set_maximum(double value) {
  _internal_set_maximum(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.maximum)
}

// bool exclusive_maximum = 12[json_name = "exclusiveMaximum"];
inline void JSONSchema::clear_exclusive_maximum() {
  exclusive_maximum_ = false;
}
inline bool JSONSchema::_internal_exclusive_maximum() const {
  return exclusive_maximum_;
}
inline bool JSONSchema::exclusive_maximum() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.exclusive_maximum)
  return _internal_exclusive_maximum();
}
inline void JSONSchema::_internal_set_exclusive_maximum(bool value) {
  
  exclusive_maximum_ = value;
}
inline void JSONSchema::set_exclusive_maximum(bool value) {
  _internal_set_exclusive_maximum(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.exclusive_maximum)
}

// double minimum = 13[json_name = "minimum"];
inline void JSONSchema::clear_minimum() {
  minimum_ = 0;
}
inline double JSONSchema::_internal_minimum() const {
  return minimum_;
}
inline double JSONSchema::minimum() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.minimum)
  return _internal_minimum();
}
inline void JSONSchema::_internal_set_minimum(double value) {
  
  minimum_ = value;
}
inline void JSONSchema::set_minimum(double value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.minimum)
}

// bool exclusive_minimum = 14[json_name = "exclusiveMinimum"];
inline void JSONSchema::clear_exclusive_minimum() {
  exclusive_minimum_ = false;
}
inline bool JSONSchema::_internal_exclusive_minimum() const {
  return exclusive_minimum_;
}
inline bool JSONSchema::exclusive_minimum() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.exclusive_minimum)
  return _internal_exclusive_minimum();
}
inline void JSONSchema::_internal_set_exclusive_minimum(bool value) {
  
  exclusive_minimum_ = value;
}
inline void JSONSchema::set_exclusive_minimum(bool value) {
  _internal_set_exclusive_minimum(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.exclusive_minimum)
}

// uint64 max_length = 15[json_name = "maxLength"];
inline void JSONSchema::clear_max_length() {
  max_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::_internal_max_length() const {
  return max_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::max_length() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.max_length)
  return _internal_max_length();
}
inline void JSONSchema::_internal_set_max_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_length_ = value;
}
inline void JSONSchema::set_max_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.max_length)
}

// uint64 min_length = 16[json_name = "minLength"];
inline void JSONSchema::clear_min_length() {
  min_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::_internal_min_length() const {
  return min_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::min_length() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.min_length)
  return _internal_min_length();
}
inline void JSONSchema::_internal_set_min_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_length_ = value;
}
inline void JSONSchema::set_min_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_length(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.min_length)
}

// string pattern = 17[json_name = "pattern"];
inline void JSONSchema::clear_pattern() {
  pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::pattern() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
  return _internal_pattern();
}
inline void JSONSchema::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
}
inline std::string* JSONSchema::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& JSONSchema::_internal_pattern() const {
  return pattern_.Get();
}
inline void JSONSchema::_internal_set_pattern(const std::string& value) {
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_pattern(std::string&& value) {
  
  pattern_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
}
inline void JSONSchema::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
}
inline void JSONSchema::set_pattern(const char* value,
    size_t size) {
  
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
}
inline std::string* JSONSchema::_internal_mutable_pattern() {
  
  return pattern_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_pattern() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
  return pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
}
inline std::string* JSONSchema::unsafe_arena_release_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pattern_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_pattern(
    std::string* pattern) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pattern, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.pattern)
}

// uint64 max_items = 20[json_name = "maxItems"];
inline void JSONSchema::clear_max_items() {
  max_items_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::_internal_max_items() const {
  return max_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::max_items() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.max_items)
  return _internal_max_items();
}
inline void JSONSchema::_internal_set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_items_ = value;
}
inline void JSONSchema::set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_items(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.max_items)
}

// uint64 min_items = 21[json_name = "minItems"];
inline void JSONSchema::clear_min_items() {
  min_items_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::_internal_min_items() const {
  return min_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::min_items() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.min_items)
  return _internal_min_items();
}
inline void JSONSchema::_internal_set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_items_ = value;
}
inline void JSONSchema::set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_items(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.min_items)
}

// bool unique_items = 22[json_name = "uniqueItems"];
inline void JSONSchema::clear_unique_items() {
  unique_items_ = false;
}
inline bool JSONSchema::_internal_unique_items() const {
  return unique_items_;
}
inline bool JSONSchema::unique_items() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.unique_items)
  return _internal_unique_items();
}
inline void JSONSchema::_internal_set_unique_items(bool value) {
  
  unique_items_ = value;
}
inline void JSONSchema::set_unique_items(bool value) {
  _internal_set_unique_items(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.unique_items)
}

// uint64 max_properties = 24[json_name = "maxProperties"];
inline void JSONSchema::clear_max_properties() {
  max_properties_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::_internal_max_properties() const {
  return max_properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::max_properties() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.max_properties)
  return _internal_max_properties();
}
inline void JSONSchema::_internal_set_max_properties(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_properties_ = value;
}
inline void JSONSchema::set_max_properties(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_properties(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.max_properties)
}

// uint64 min_properties = 25[json_name = "minProperties"];
inline void JSONSchema::clear_min_properties() {
  min_properties_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::_internal_min_properties() const {
  return min_properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JSONSchema::min_properties() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.min_properties)
  return _internal_min_properties();
}
inline void JSONSchema::_internal_set_min_properties(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_properties_ = value;
}
inline void JSONSchema::set_min_properties(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_properties(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.min_properties)
}

// repeated string required = 26[json_name = "required"];
inline int JSONSchema::_internal_required_size() const {
  return required_.size();
}
inline int JSONSchema::required_size() const {
  return _internal_required_size();
}
inline void JSONSchema::clear_required() {
  required_.Clear();
}
inline std::string* JSONSchema::add_required() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  return _internal_add_required();
}
inline const std::string& JSONSchema::_internal_required(int index) const {
  return required_.Get(index);
}
inline const std::string& JSONSchema::required(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  return _internal_required(index);
}
inline std::string* JSONSchema::mutable_required(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  return required_.Mutable(index);
}
inline void JSONSchema::set_required(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  required_.Mutable(index)->assign(value);
}
inline void JSONSchema::set_required(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  required_.Mutable(index)->assign(std::move(value));
}
inline void JSONSchema::set_required(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
}
inline void JSONSchema::set_required(int index, const char* value, size_t size) {
  required_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
}
inline std::string* JSONSchema::_internal_add_required() {
  return required_.Add();
}
inline void JSONSchema::add_required(const std::string& value) {
  required_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
}
inline void JSONSchema::add_required(std::string&& value) {
  required_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
}
inline void JSONSchema::add_required(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
}
inline void JSONSchema::add_required(const char* value, size_t size) {
  required_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JSONSchema::required() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  return required_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JSONSchema::mutable_required() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.required)
  return &required_;
}

// repeated string array = 34[json_name = "array"];
inline int JSONSchema::_internal_array_size() const {
  return array_.size();
}
inline int JSONSchema::array_size() const {
  return _internal_array_size();
}
inline void JSONSchema::clear_array() {
  array_.Clear();
}
inline std::string* JSONSchema::add_array() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  return _internal_add_array();
}
inline const std::string& JSONSchema::_internal_array(int index) const {
  return array_.Get(index);
}
inline const std::string& JSONSchema::array(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  return _internal_array(index);
}
inline std::string* JSONSchema::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  return array_.Mutable(index);
}
inline void JSONSchema::set_array(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  array_.Mutable(index)->assign(value);
}
inline void JSONSchema::set_array(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  array_.Mutable(index)->assign(std::move(value));
}
inline void JSONSchema::set_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
}
inline void JSONSchema::set_array(int index, const char* value, size_t size) {
  array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
}
inline std::string* JSONSchema::_internal_add_array() {
  return array_.Add();
}
inline void JSONSchema::add_array(const std::string& value) {
  array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
}
inline void JSONSchema::add_array(std::string&& value) {
  array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
}
inline void JSONSchema::add_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
}
inline void JSONSchema::add_array(const char* value, size_t size) {
  array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JSONSchema::array() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  return array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JSONSchema::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.array)
  return &array_;
}

// repeated .grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.JSONSchemaSimpleTypes type = 35[json_name = "type"];
inline int JSONSchema::_internal_type_size() const {
  return type_.size();
}
inline int JSONSchema::type_size() const {
  return _internal_type_size();
}
inline void JSONSchema::clear_type() {
  type_.Clear();
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes JSONSchema::_internal_type(int index) const {
  return static_cast< ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes >(type_.Get(index));
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes JSONSchema::type(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.type)
  return _internal_type(index);
}
inline void JSONSchema::set_type(int index, ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.type)
}
inline void JSONSchema::_internal_add_type(::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes value) {
  type_.Add(value);
}
inline void JSONSchema::add_type(::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes value) {
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.type)
  _internal_add_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
JSONSchema::type() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
JSONSchema::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
JSONSchema::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.type)
  return _internal_mutable_type();
}

// string format = 36[json_name = "format"];
inline void JSONSchema::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JSONSchema::format() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
  return _internal_format();
}
inline void JSONSchema::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
}
inline std::string* JSONSchema::mutable_format() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
  return _internal_mutable_format();
}
inline const std::string& JSONSchema::_internal_format() const {
  return format_.Get();
}
inline void JSONSchema::_internal_set_format(const std::string& value) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JSONSchema::set_format(std::string&& value) {
  
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
}
inline void JSONSchema::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
}
inline void JSONSchema::set_format(const char* value,
    size_t size) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
}
inline std::string* JSONSchema::_internal_mutable_format() {
  
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JSONSchema::release_format() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JSONSchema::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
}
inline std::string* JSONSchema::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JSONSchema::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (format != nullptr) {
    
  } else {
    
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.format)
}

// repeated string enum = 46[json_name = "enum"];
inline int JSONSchema::_internal_enum__size() const {
  return enum__.size();
}
inline int JSONSchema::enum__size() const {
  return _internal_enum__size();
}
inline void JSONSchema::clear_enum_() {
  enum__.Clear();
}
inline std::string* JSONSchema::add_enum_() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  return _internal_add_enum_();
}
inline const std::string& JSONSchema::_internal_enum_(int index) const {
  return enum__.Get(index);
}
inline const std::string& JSONSchema::enum_(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  return _internal_enum_(index);
}
inline std::string* JSONSchema::mutable_enum_(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  return enum__.Mutable(index);
}
inline void JSONSchema::set_enum_(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  enum__.Mutable(index)->assign(value);
}
inline void JSONSchema::set_enum_(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  enum__.Mutable(index)->assign(std::move(value));
}
inline void JSONSchema::set_enum_(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enum__.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
}
inline void JSONSchema::set_enum_(int index, const char* value, size_t size) {
  enum__.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
}
inline std::string* JSONSchema::_internal_add_enum_() {
  return enum__.Add();
}
inline void JSONSchema::add_enum_(const std::string& value) {
  enum__.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
}
inline void JSONSchema::add_enum_(std::string&& value) {
  enum__.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
}
inline void JSONSchema::add_enum_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enum__.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
}
inline void JSONSchema::add_enum_(const char* value, size_t size) {
  enum__.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JSONSchema::enum_() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  return enum__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JSONSchema::mutable_enum_() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.JSONSchema.enum)
  return &enum__;
}

// -------------------------------------------------------------------

// Tag

// string description = 2[json_name = "description"];
inline void Tag::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
  return _internal_description();
}
inline void Tag::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
}
inline std::string* Tag::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
  return _internal_mutable_description();
}
inline const std::string& Tag::_internal_description() const {
  return description_.Get();
}
inline void Tag::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
}
inline void Tag::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
}
inline void Tag::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
}
inline std::string* Tag::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
}
inline std::string* Tag::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tag::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Tag.description)
}

// .grpc.gateway.protoc_gen_openapiv2.options.ExternalDocumentation external_docs = 3[json_name = "externalDocs"];
inline bool Tag::_internal_has_external_docs() const {
  return this != internal_default_instance() && external_docs_ != nullptr;
}
inline bool Tag::has_external_docs() const {
  return _internal_has_external_docs();
}
inline void Tag::clear_external_docs() {
  if (GetArena() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Tag::_internal_external_docs() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* p = external_docs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_ExternalDocumentation_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation& Tag::external_docs() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.Tag.external_docs)
  return _internal_external_docs();
}
inline void Tag::unsafe_arena_set_allocated_external_docs(
    ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_docs_);
  }
  external_docs_ = external_docs;
  if (external_docs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Tag.external_docs)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Tag::release_external_docs() {
  auto temp = unsafe_arena_release_external_docs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Tag::unsafe_arena_release_external_docs() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.Tag.external_docs)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* temp = external_docs_;
  external_docs_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Tag::_internal_mutable_external_docs() {
  
  if (external_docs_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation>(GetArena());
    external_docs_ = p;
  }
  return external_docs_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* Tag::mutable_external_docs() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.Tag.external_docs)
  return _internal_mutable_external_docs();
}
inline void Tag::set_allocated_external_docs(::grpc::gateway::protoc_gen_openapiv2::options::ExternalDocumentation* external_docs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete external_docs_;
  }
  if (external_docs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(external_docs);
    if (message_arena != submessage_arena) {
      external_docs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_docs, submessage_arena);
    }
    
  } else {
    
  }
  external_docs_ = external_docs;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.Tag.external_docs)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SecurityDefinitions

// map<string, .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme> security = 1[json_name = "security"];
inline int SecurityDefinitions::_internal_security_size() const {
  return security_.size();
}
inline int SecurityDefinitions::security_size() const {
  return _internal_security_size();
}
inline void SecurityDefinitions::clear_security() {
  security_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >&
SecurityDefinitions::_internal_security() const {
  return security_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >&
SecurityDefinitions::security() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions.security)
  return _internal_security();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >*
SecurityDefinitions::_internal_mutable_security() {
  return security_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme >*
SecurityDefinitions::mutable_security() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.SecurityDefinitions.security)
  return _internal_mutable_security();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SecurityScheme

// .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.Type type = 1[json_name = "type"];
inline void SecurityScheme::clear_type() {
  type_ = 0;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type SecurityScheme::_internal_type() const {
  return static_cast< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type >(type_);
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type SecurityScheme::type() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.type)
  return _internal_type();
}
inline void SecurityScheme::_internal_set_type(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type value) {
  
  type_ = value;
}
inline void SecurityScheme::set_type(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.type)
}

// string description = 2[json_name = "description"];
inline void SecurityScheme::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SecurityScheme::description() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
  return _internal_description();
}
inline void SecurityScheme::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
}
inline std::string* SecurityScheme::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
  return _internal_mutable_description();
}
inline const std::string& SecurityScheme::_internal_description() const {
  return description_.Get();
}
inline void SecurityScheme::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityScheme::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
}
inline void SecurityScheme::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
}
inline void SecurityScheme::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
}
inline std::string* SecurityScheme::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityScheme::release_description() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityScheme::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
}
inline std::string* SecurityScheme::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SecurityScheme::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.description)
}

// string name = 3[json_name = "name"];
inline void SecurityScheme::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SecurityScheme::name() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
  return _internal_name();
}
inline void SecurityScheme::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
}
inline std::string* SecurityScheme::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
  return _internal_mutable_name();
}
inline const std::string& SecurityScheme::_internal_name() const {
  return name_.Get();
}
inline void SecurityScheme::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityScheme::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
}
inline void SecurityScheme::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
}
inline void SecurityScheme::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
}
inline std::string* SecurityScheme::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityScheme::release_name() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityScheme::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
}
inline std::string* SecurityScheme::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SecurityScheme::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.name)
}

// .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.In in = 4[json_name = "in"];
inline void SecurityScheme::clear_in() {
  in_ = 0;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In SecurityScheme::_internal_in() const {
  return static_cast< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In >(in_);
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In SecurityScheme::in() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.in)
  return _internal_in();
}
inline void SecurityScheme::_internal_set_in(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In value) {
  
  in_ = value;
}
inline void SecurityScheme::set_in(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.in)
}

// .grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.Flow flow = 5[json_name = "flow"];
inline void SecurityScheme::clear_flow() {
  flow_ = 0;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow SecurityScheme::_internal_flow() const {
  return static_cast< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow >(flow_);
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow SecurityScheme::flow() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.flow)
  return _internal_flow();
}
inline void SecurityScheme::_internal_set_flow(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow value) {
  
  flow_ = value;
}
inline void SecurityScheme::set_flow(::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow value) {
  _internal_set_flow(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.flow)
}

// string authorization_url = 6[json_name = "authorizationUrl"];
inline void SecurityScheme::clear_authorization_url() {
  authorization_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SecurityScheme::authorization_url() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
  return _internal_authorization_url();
}
inline void SecurityScheme::set_authorization_url(const std::string& value) {
  _internal_set_authorization_url(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
}
inline std::string* SecurityScheme::mutable_authorization_url() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
  return _internal_mutable_authorization_url();
}
inline const std::string& SecurityScheme::_internal_authorization_url() const {
  return authorization_url_.Get();
}
inline void SecurityScheme::_internal_set_authorization_url(const std::string& value) {
  
  authorization_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityScheme::set_authorization_url(std::string&& value) {
  
  authorization_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
}
inline void SecurityScheme::set_authorization_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authorization_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
}
inline void SecurityScheme::set_authorization_url(const char* value,
    size_t size) {
  
  authorization_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
}
inline std::string* SecurityScheme::_internal_mutable_authorization_url() {
  
  return authorization_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityScheme::release_authorization_url() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
  return authorization_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityScheme::set_allocated_authorization_url(std::string* authorization_url) {
  if (authorization_url != nullptr) {
    
  } else {
    
  }
  authorization_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorization_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
}
inline std::string* SecurityScheme::unsafe_arena_release_authorization_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return authorization_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SecurityScheme::unsafe_arena_set_allocated_authorization_url(
    std::string* authorization_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (authorization_url != nullptr) {
    
  } else {
    
  }
  authorization_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      authorization_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.authorization_url)
}

// string token_url = 7[json_name = "tokenUrl"];
inline void SecurityScheme::clear_token_url() {
  token_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SecurityScheme::token_url() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
  return _internal_token_url();
}
inline void SecurityScheme::set_token_url(const std::string& value) {
  _internal_set_token_url(value);
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
}
inline std::string* SecurityScheme::mutable_token_url() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
  return _internal_mutable_token_url();
}
inline const std::string& SecurityScheme::_internal_token_url() const {
  return token_url_.Get();
}
inline void SecurityScheme::_internal_set_token_url(const std::string& value) {
  
  token_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityScheme::set_token_url(std::string&& value) {
  
  token_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
}
inline void SecurityScheme::set_token_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
}
inline void SecurityScheme::set_token_url(const char* value,
    size_t size) {
  
  token_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
}
inline std::string* SecurityScheme::_internal_mutable_token_url() {
  
  return token_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityScheme::release_token_url() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
  return token_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityScheme::set_allocated_token_url(std::string* token_url) {
  if (token_url != nullptr) {
    
  } else {
    
  }
  token_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
}
inline std::string* SecurityScheme::unsafe_arena_release_token_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SecurityScheme::unsafe_arena_set_allocated_token_url(
    std::string* token_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token_url != nullptr) {
    
  } else {
    
  }
  token_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.token_url)
}

// .grpc.gateway.protoc_gen_openapiv2.options.Scopes scopes = 8[json_name = "scopes"];
inline bool SecurityScheme::_internal_has_scopes() const {
  return this != internal_default_instance() && scopes_ != nullptr;
}
inline bool SecurityScheme::has_scopes() const {
  return _internal_has_scopes();
}
inline void SecurityScheme::clear_scopes() {
  if (GetArena() == nullptr && scopes_ != nullptr) {
    delete scopes_;
  }
  scopes_ = nullptr;
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Scopes& SecurityScheme::_internal_scopes() const {
  const ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* p = scopes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::grpc::gateway::protoc_gen_openapiv2::options::Scopes*>(
      &::grpc::gateway::protoc_gen_openapiv2::options::_Scopes_default_instance_);
}
inline const ::grpc::gateway::protoc_gen_openapiv2::options::Scopes& SecurityScheme::scopes() const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.scopes)
  return _internal_scopes();
}
inline void SecurityScheme::unsafe_arena_set_allocated_scopes(
    ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* scopes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scopes_);
  }
  scopes_ = scopes;
  if (scopes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.scopes)
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* SecurityScheme::release_scopes() {
  auto temp = unsafe_arena_release_scopes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* SecurityScheme::unsafe_arena_release_scopes() {
  // @@protoc_insertion_point(field_release:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.scopes)
  
  ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* temp = scopes_;
  scopes_ = nullptr;
  return temp;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* SecurityScheme::_internal_mutable_scopes() {
  
  if (scopes_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::gateway::protoc_gen_openapiv2::options::Scopes>(GetArena());
    scopes_ = p;
  }
  return scopes_;
}
inline ::grpc::gateway::protoc_gen_openapiv2::options::Scopes* SecurityScheme::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.scopes)
  return _internal_mutable_scopes();
}
inline void SecurityScheme::set_allocated_scopes(::grpc::gateway::protoc_gen_openapiv2::options::Scopes* scopes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scopes_;
  }
  if (scopes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scopes);
    if (message_arena != submessage_arena) {
      scopes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scopes, submessage_arena);
    }
    
  } else {
    
  }
  scopes_ = scopes;
  // @@protoc_insertion_point(field_set_allocated:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.scopes)
}

// map<string, .google.protobuf.Value> extensions = 9[json_name = "extensions"];
inline int SecurityScheme::_internal_extensions_size() const {
  return extensions_.size();
}
inline int SecurityScheme::extensions_size() const {
  return _internal_extensions_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
SecurityScheme::_internal_extensions() const {
  return extensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
SecurityScheme::extensions() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.extensions)
  return _internal_extensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
SecurityScheme::_internal_mutable_extensions() {
  return extensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
SecurityScheme::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme.extensions)
  return _internal_mutable_extensions();
}

// -------------------------------------------------------------------

// SecurityRequirement_SecurityRequirementValue

// repeated string scope = 1[json_name = "scope"];
inline int SecurityRequirement_SecurityRequirementValue::_internal_scope_size() const {
  return scope_.size();
}
inline int SecurityRequirement_SecurityRequirementValue::scope_size() const {
  return _internal_scope_size();
}
inline void SecurityRequirement_SecurityRequirementValue::clear_scope() {
  scope_.Clear();
}
inline std::string* SecurityRequirement_SecurityRequirementValue::add_scope() {
  // @@protoc_insertion_point(field_add_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  return _internal_add_scope();
}
inline const std::string& SecurityRequirement_SecurityRequirementValue::_internal_scope(int index) const {
  return scope_.Get(index);
}
inline const std::string& SecurityRequirement_SecurityRequirementValue::scope(int index) const {
  // @@protoc_insertion_point(field_get:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  return _internal_scope(index);
}
inline std::string* SecurityRequirement_SecurityRequirementValue::mutable_scope(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  return scope_.Mutable(index);
}
inline void SecurityRequirement_SecurityRequirementValue::set_scope(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  scope_.Mutable(index)->assign(value);
}
inline void SecurityRequirement_SecurityRequirementValue::set_scope(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  scope_.Mutable(index)->assign(std::move(value));
}
inline void SecurityRequirement_SecurityRequirementValue::set_scope(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
}
inline void SecurityRequirement_SecurityRequirementValue::set_scope(int index, const char* value, size_t size) {
  scope_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
}
inline std::string* SecurityRequirement_SecurityRequirementValue::_internal_add_scope() {
  return scope_.Add();
}
inline void SecurityRequirement_SecurityRequirementValue::add_scope(const std::string& value) {
  scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
}
inline void SecurityRequirement_SecurityRequirementValue::add_scope(std::string&& value) {
  scope_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
}
inline void SecurityRequirement_SecurityRequirementValue::add_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
}
inline void SecurityRequirement_SecurityRequirementValue::add_scope(const char* value, size_t size) {
  scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SecurityRequirement_SecurityRequirementValue::scope() const {
  // @@protoc_insertion_point(field_list:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  return scope_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SecurityRequirement_SecurityRequirementValue::mutable_scope() {
  // @@protoc_insertion_point(field_mutable_list:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue.scope)
  return &scope_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SecurityRequirement

// map<string, .grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.SecurityRequirementValue> security_requirement = 1[json_name = "securityRequirement"];
inline int SecurityRequirement::_internal_security_requirement_size() const {
  return security_requirement_.size();
}
inline int SecurityRequirement::security_requirement_size() const {
  return _internal_security_requirement_size();
}
inline void SecurityRequirement::clear_security_requirement() {
  security_requirement_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >&
SecurityRequirement::_internal_security_requirement() const {
  return security_requirement_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >&
SecurityRequirement::security_requirement() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.security_requirement)
  return _internal_security_requirement();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >*
SecurityRequirement::_internal_mutable_security_requirement() {
  return security_requirement_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::grpc::gateway::protoc_gen_openapiv2::options::SecurityRequirement_SecurityRequirementValue >*
SecurityRequirement::mutable_security_requirement() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.SecurityRequirement.security_requirement)
  return _internal_mutable_security_requirement();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Scopes

// map<string, string> scope = 1[json_name = "scope"];
inline int Scopes::_internal_scope_size() const {
  return scope_.size();
}
inline int Scopes::scope_size() const {
  return _internal_scope_size();
}
inline void Scopes::clear_scope() {
  scope_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Scopes::_internal_scope() const {
  return scope_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Scopes::scope() const {
  // @@protoc_insertion_point(field_map:grpc.gateway.protoc_gen_openapiv2.options.Scopes.scope)
  return _internal_scope();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Scopes::_internal_mutable_scope() {
  return scope_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Scopes::mutable_scope() {
  // @@protoc_insertion_point(field_mutable_map:grpc.gateway.protoc_gen_openapiv2.options.Scopes.scope)
  return _internal_mutable_scope();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace options
}  // namespace protoc_gen_openapiv2
}  // namespace gateway
}  // namespace grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes>() {
  return ::grpc::gateway::protoc_gen_openapiv2::options::JSONSchema_JSONSchemaSimpleTypes_descriptor();
}
template <> struct is_proto_enum< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type>() {
  return ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Type_descriptor();
}
template <> struct is_proto_enum< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In>() {
  return ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_In_descriptor();
}
template <> struct is_proto_enum< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow>() {
  return ::grpc::gateway::protoc_gen_openapiv2::options::SecurityScheme_Flow_descriptor();
}
template <> struct is_proto_enum< ::grpc::gateway::protoc_gen_openapiv2::options::Scheme> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::gateway::protoc_gen_openapiv2::options::Scheme>() {
  return ::grpc::gateway::protoc_gen_openapiv2::options::Scheme_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protoc_2dgen_2dopenapiv2_2foptions_2fopenapiv2_2eproto
