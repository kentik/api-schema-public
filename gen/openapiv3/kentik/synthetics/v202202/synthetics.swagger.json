{
    "openapi": "3.0.0",
    "info": {
        "title": "Synthetics Monitoring API",
        "description": "# Overview\nThe Synthetics Monitoring API provides programmatic access to Kentik's [synthetic monitoring system](https://kb.kentik.com/v4/Ma00.htm).\n The API consists of two endpoints:\n| endpoint | purpose |\n|-----------|---------|\n| SyntheticsAdminService | CRUD operations for synthetic tests and agents |\n| SyntheticsDataService  | Retrieval of synthetic test results and network traces |\n\nBoth REST endpoint and gRPC RPCs are provided.\n### Known Limitations\nThe API currently does not support:\n* _BGP_ tests, which are supported in a [separate API](https://github.com/kentik/api-schema-public/blob/ccf9927fe3cd7918c86c7cdc1212936e836743f8/gen/openapiv3/kentik/bgp_monitoring/v202205beta1/bgp_monitoring.swagger.json)\n* _Transaction_ tests\n\n### Additional public resources\nKentik community [Python](https://github.com/kentik/community_sdk_python) and \n[Go](https://github.com/kentik/community_sdk_golang) SDKs provide language-specific support for using this \nand other Kentik APIs. These SDKs can be also used as example code for development. \nA [Terraform provider](https://registry.terraform.io/providers/kentik/kentik-synthetics) is available for \nconfiguring tests and agents for Kentik synthetic monitoring.\n# Anatomy of a synthetic test\nEach _Test_ consists of one or more _Tasks_. Tasks are executed by monitoring _Agents_ that send synthetic \ntraffic (probes) over the network. The API currently supports following tasks:\n| task name  | purpose |\n|------------|---------|\n| ping       | Test basic address, and optionally TCP port reachability |\n| traceroute (a.k.a. trace)| Discover unidirectional network path |\n| http | Perform a simple HTTP/HTTPS request |\n| page-load | Use headless Chromium to execute an HTTP/HTTPS request |\n| dns | Execute a DNS query|\n\nThe set of tasks executed on behalf of a test depends on the test _type_.\nFollowing test types are currently supported by the API:\n| API test type | Kentik Portal (UI) test type | tasks |\n|---------------|--------------|-------|\n| ip | IP Address | ping, traceroute |\n| hostname | Hostname | ping, traceroute |\n| network_grid | Network Grid | ping, traceroute |\n| agent | Agent-to-Agent | ping, traceroute |\n| network_mesh | Network Mesh | ping, traceroute |\n| flow | Autonomous Tests (5 variants) | ping, traceroute |\n| url | HTTP(S) or API | http, ping (optional), traceroute (optional) |\n| page_load | Page Load | page-load, ping (optional), traceroute (optional) |\n| dns | DNS Server Monitor | dns |\n| dns_grid | DNS Server Grid | dns |\n\n***Note:*** _ping_ and _traceroute_ tasks are always run together (not one without the other).\n\n## Test configuration, runtime state and metadata\nConfiguration, runtime state information, and metadata about a synthetic test are provided by the _Test_ object.\nRuntime state and metadata attributes:\n| attribute | access | purpose |\n|-----------|--------|---------|\n| id | RO | System-generated unique identifier of the test |\n| name | RW | User specified name for the test (need not be unique) |\n| type | RO (after creation) | Type of the test (set on creation; read-only thereafter) |\n| status | RW | Life-cycle status of the test |\n| cdate | RO | Creation timestamp |\n| edate | RO | Last-modification timestamp |\n| createdBy | RO | Identity of the user that created the test |\n| lastUpdatedBy | RO | Identity of the latest user to modify the test |\n| labels | RW | List of names of labels applied to the test |\n\nConfiguration of a synthetic test is carried in the _settings_ attribute of the _Test_ object.\nSettings consist of attributes common to all tests as well as attributes for tests of a specific type.\n\n### Common test settings\nThe following settings are used for tests of all types:\n| attribute | purpose | required |\n|-----------|---------|----------|\n| agentIds  | IDs of agents to execute tasks for the test | YES |\n| period | Test execution interval in seconds | NO (default 60s) |\n| family | IP address family. Used only for tests whose type is url or dns. Selects which type of DNS resource is queried for resolving hostname to target address | NO (default IP_FAMILY_DUAL) |\n| notificationChannels | List of notification channels for the test | NO (default empty list)\n| healthSettings | A HealthSettings object that configures health settings for this test, which includes metric thresholds that define health status (warning and critical) and trigger associated alarms. | YES |\n| ping | A TestPingSettings object that configures the ping task of the test | NO (default depends on test type) |\n| trace | A TestTraceSettings object that configures the trace task of the test | NO (default depends on test type) |\n| tasks | List of names of the tasks that will be executed for this test | YES |\n\n### Test-specific settings\nEach test type has its own configuration object that represents the settings for that type.\nThese test-specific objects are referenced by the attributes in _Test.settings_:\n| test type    | settings attribute name | configuration object name |\n|--------------|-------------------------|---------------------------|\n| ip           | ip                      | IpTest                    |\n| hostname     | hostname                | HostnameTest              |\n| network_grid | networkGrid             | IpTest                    |\n| agent        | agent                   | AgentTest                 |\n| network_mesh | networkMesh             | NetworkMeshTest           |\n| flow         | flow                    | FlowTest                  |\n| url          | url                     | UrlTest                   |\n| page_load    | pageLoad                | PageLoadTest              |\n| dns          | dns                     | DnsTest                   |\n| dns_grid     | dnsGrid                 | DnsTest                   |\n\n# Test results\nResults of synthetic tests are returned as a sequence of _TestResults_ objects. Each such object represents\nmeasurements and health evaluation for a single test at specific point in time.\nMeasurements and health evaluation are grouped by agent and by task.\n\nGranularity of timestamps in test results depends on the frequency (period) of the test and on the requested time \nrange. The minimum granularity is 1 minute (even when period < 1 minute). The longer the time range, the lower \nthe granularity.\n\n# Network traces\nSynthetic tests that include the _traceroute_ task collect the unidirectional network path from the agent to the \n target for each agent/target pair. The trace data are returned in the _GetTraceForTestResponse_ object. \nThe _paths_ attribute of this object contains the collected network path for each agent/target pair and \nthe round-trip time (RTT) to each hop. Hops in actual network traces are identified by a _nodeId_. \nThe mapping of _nodeIds_ to address, name, location, and other attributes of the hop is provided in a map that \nis stored in the _nodes_ attribute of the _GetTraceForTestResponse_ object.\n\n# Agents\nThe Kentik synthetic monitoring system recognizes 2 types of agents:\n* ***global*** (public): Managed by Kentik and available to every Kentik user. ***All information about global agents in this API is read-only.***\n* ***private***:  Deployed by each customer and available only to that customer. To be visible in this API, a private agent must first associate itself with a customer account by contacting the Kentik system (via private API). Once the agent is associated it can be authorized via the API by changing its _status_ to _AGENT_STATUS_OK_.\n***Note:*** For more information about private agent deployment, see [***Synthetic Agent Deployments***](https://kb.kentik.com/v4/Ma01.htm#Ma01-Synthetic_Agent_Deployments).\n",
        "version": "202202",
        "contact": {
            "name": "Kentik API Engineering",
            "url": "https://github.com/kentik/api-schema-public"
        }
    },
    "tags": [
        {
            "name": "SyntheticsDataService"
        },
        {
            "name": "SyntheticsAdminService"
        }
    ],
    "paths": {
        "/synthetics/v202202/agents": {
            "get": {
                "summary": "List available agents",
                "description": "Returns list of all synthetic agents available in the account.",
                "operationId": "ListAgents",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202ListAgentsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "SyntheticsAdminService"
                ]
            }
        },
        "/synthetics/v202202/agents/{agent.id}": {
            "put": {
                "summary": "Update configuration of an agent",
                "description": "Update configuration of a synthetic agent.",
                "operationId": "UpdateAgent",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202UpdateAgentResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "agent.id",
                        "description": "Unique identifier of the agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/v202202UpdateAgentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SyntheticsAdminService"
                ]
            },
            "get": {
                "summary": "Get information about an agent",
                "description": "Returns information about the requested synthetic agent.",
                "operationId": "GetAgent",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202GetAgentResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "agent.id",
                        "description": "ID of the requested agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "SyntheticsAdminService"
                ]
            },
            "delete": {
                "summary": "Delete an agent",
                "description": "Deletes the requested agent. The deleted agent is removed from configuration of all tests.",
                "operationId": "DeleteAgent",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202DeleteAgentResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "agent.id",
                        "description": "ID of the agent to be deleted",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "SyntheticsAdminService"
                ]
            }
        },
        "/synthetics/v202202/results": {
            "post": {
                "summary": "Get results for tests",
                "description": "Returns probe results for a set of tests for specified period of time.",
                "operationId": "GetResultsForTests",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202GetResultsForTestsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/v202202GetResultsForTestsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SyntheticsDataService"
                ]
            }
        },
        "/synthetics/v202202/tests": {
            "get": {
                "summary": "List all tests",
                "description": "Returns a list of all configured active and paused synthetic tests.",
                "operationId": "ListTests",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202ListTestsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "SyntheticsAdminService"
                ]
            },
            "post": {
                "summary": "Create a test",
                "description": "Create synthetic test based on configuration provided in the request.",
                "operationId": "CreateTest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202CreateTestResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/v202202CreateTestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SyntheticsAdminService"
                ]
            }
        },
        "/synthetics/v202202/tests/{id}": {
            "get": {
                "summary": "Get information about a test",
                "description": "Returns configuration and status for the requested synthetic test.",
                "operationId": "GetTest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202GetTestResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "ID of requested test",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "SyntheticsAdminService"
                ]
            },
            "delete": {
                "summary": "Delete a synthetic test.",
                "description": "Deletes the synthetics test. All accumulated results for the test cease to be accessible.",
                "operationId": "DeleteTest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202DeleteTestResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "ID of the test to be deleted",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "SyntheticsAdminService"
                ]
            },
            "put": {
                "summary": "Update configuration of a test",
                "description": "Updates configuration of a synthetic test.",
                "operationId": "UpdateTest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202UpdateTestResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique ID of the test",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/v202202UpdateTestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SyntheticsAdminService"
                ]
            }
        },
        "/synthetics/v202202/tests/{id}/status": {
            "put": {
                "summary": "Update status of a synthetic test",
                "description": "Update status of a synthetic test",
                "operationId": "SetTestStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202SetTestStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "ID of the test which status is to be modified",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/v202202SetTestStatusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SyntheticsAdminService"
                ]
            }
        },
        "/synthetics/v202202/trace": {
            "post": {
                "summary": "Get network trace data for a test",
                "description": "Get network trace data for a specific synthetic test. The test must have traceroute task configured.",
                "operationId": "GetTraceForTest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v202202GetTraceForTestResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rpcStatus"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/v202202GetTraceForTestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SyntheticsDataService"
                ]
            }
        }
    },
    "security": [
        {
            "email": [],
            "token": []
        }
    ],
    "externalDocs": {
        "description": "Kentik synthetic monitoring system",
        "url": "https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetics_Overview"
    },
    "components": {
        "securitySchemes": {
            "email": {
                "type": "apiKey",
                "name": "X-CH-Auth-Email",
                "in": "header"
            },
            "token": {
                "type": "apiKey",
                "name": "X-CH-Auth-API-Token",
                "in": "header"
            }
        },
        "schemas": {
            "AgentMetadataIpValue": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "protobufAny": {
                "type": "object",
                "properties": {
                    "typeUrl": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "format": "byte"
                    }
                }
            },
            "rpcStatus": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/protobufAny"
                        }
                    }
                }
            },
            "syntheticsv202202Location": {
                "type": "object",
                "properties": {
                    "latitude": {
                        "type": "number",
                        "format": "double",
                        "description": "Latitude in signed decimal degrees"
                    },
                    "longitude": {
                        "type": "number",
                        "format": "double",
                        "description": "Longitude in signed decimal degrees"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country of the location"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region within the country"
                    },
                    "city": {
                        "type": "string",
                        "description": "City of the location"
                    }
                }
            },
            "v202202ActivationSettings": {
                "type": "object",
                "properties": {
                    "gracePeriod": {
                        "type": "string",
                        "description": "Period of healthy status in minutes within the time window not cancelling alarm activation"
                    },
                    "timeUnit": {
                        "type": "string",
                        "description": "Time unit for specifying time window (m | h)"
                    },
                    "timeWindow": {
                        "type": "string",
                        "description": "Time window for evaluating of test for alarm activation"
                    },
                    "times": {
                        "type": "string",
                        "description": "Number of occurrences of unhealthy test status within the time window triggering alarm activation"
                    }
                }
            },
            "v202202Agent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the agent",
                        "readOnly": true
                    },
                    "siteName": {
                        "type": "string",
                        "description": "Name of the site where agent is located"
                    },
                    "status": {
                        "$ref": "#/components/schemas/v202202AgentStatus"
                    },
                    "alias": {
                        "type": "string",
                        "description": "User selected descriptive name of the agent"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of agent (global | private)",
                        "readOnly": true
                    },
                    "os": {
                        "type": "string",
                        "description": "OS version of server/VM hosting the agent",
                        "readOnly": true
                    },
                    "ip": {
                        "type": "string",
                        "description": "Public IP address of the agent (auto-detected)",
                        "readOnly": true
                    },
                    "lat": {
                        "type": "number",
                        "format": "double",
                        "description": "Latitude of agent's location (signed decimal degrees)"
                    },
                    "long": {
                        "type": "number",
                        "format": "double",
                        "description": "Longitude of agent's location (signed decimal degrees)"
                    },
                    "lastAuthed": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of the last authorization",
                        "readOnly": true
                    },
                    "family": {
                        "$ref": "#/components/schemas/v202202IPFamily"
                    },
                    "asn": {
                        "type": "integer",
                        "format": "int64",
                        "description": "ASN of the AS owning agent's public address"
                    },
                    "siteId": {
                        "type": "string",
                        "description": "ID of the site hosting the agent (if configured in Kentik)"
                    },
                    "version": {
                        "type": "string",
                        "description": "Software version of the agent",
                        "readOnly": true
                    },
                    "city": {
                        "type": "string",
                        "description": "City where the agent is located"
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographical region of agent's location"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country of agent's location"
                    },
                    "testIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of user's test running on the agent",
                        "readOnly": true
                    },
                    "localIp": {
                        "type": "string",
                        "description": "Internal IP address of the agent"
                    },
                    "cloudRegion": {
                        "type": "string",
                        "description": "Cloud region (if any) hosting the agent"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider (if any) hosting the agent"
                    },
                    "agentImpl": {
                        "$ref": "#/components/schemas/v202202ImplementType"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of names of labels associated with the agent"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/v202202AgentMetadata"
                    }
                }
            },
            "v202202AgentMetadata": {
                "type": "object",
                "properties": {
                    "privateIpv4Addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentMetadataIpValue"
                        },
                        "description": "List of private IPv4 addresses"
                    },
                    "publicIpv4Addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentMetadataIpValue"
                        },
                        "description": "List of public IPv4 addresses",
                        "readOnly": true
                    },
                    "privateIpv6Addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentMetadataIpValue"
                        },
                        "description": "List of private IPv6 addresses"
                    },
                    "publicIpv6Addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentMetadataIpValue"
                        },
                        "description": "List of public IPv6 addresses",
                        "readOnly": true
                    }
                }
            },
            "v202202AgentResults": {
                "type": "object",
                "properties": {
                    "agentId": {
                        "type": "string",
                        "description": "ID of the agent providing results"
                    },
                    "health": {
                        "type": "string",
                        "description": "Overall health status of all task for the test executed by this agent"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202TaskResults"
                        },
                        "description": "List of results for individual tasks"
                    }
                }
            },
            "v202202AgentStatus": {
                "type": "string",
                "enum": [
                    "AGENT_STATUS_UNSPECIFIED",
                    "AGENT_STATUS_OK",
                    "AGENT_STATUS_WAIT",
                    "AGENT_STATUS_DELETED"
                ],
                "default": "AGENT_STATUS_UNSPECIFIED",
                "description": "- AGENT_STATUS_UNSPECIFIED: Invalid value.\n - AGENT_STATUS_OK: Agent is ready to accept tests\n - AGENT_STATUS_WAIT: Agent is waiting for authorization\n - AGENT_STATUS_DELETED: Agent was deleted - not user settable",
                "title": "Operational status of an agent"
            },
            "v202202AgentTest": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "ID of the target agent"
                    },
                    "useLocalIp": {
                        "type": "boolean",
                        "description": "Boolean value indicating whether to use local (private) IP address of the target agent"
                    }
                }
            },
            "v202202CreateTestRequest": {
                "type": "object",
                "properties": {
                    "test": {
                        "$ref": "#/components/schemas/v202202Test"
                    }
                },
                "required": [
                    "test"
                ]
            },
            "v202202CreateTestResponse": {
                "type": "object",
                "properties": {
                    "test": {
                        "$ref": "#/components/schemas/v202202Test"
                    }
                }
            },
            "v202202DNSRecord": {
                "type": "string",
                "enum": [
                    "DNS_RECORD_UNSPECIFIED",
                    "DNS_RECORD_A",
                    "DNS_RECORD_AAAA",
                    "DNS_RECORD_CNAME",
                    "DNS_RECORD_DNAME",
                    "DNS_RECORD_NS",
                    "DNS_RECORD_MX",
                    "DNS_RECORD_PTR",
                    "DNS_RECORD_SOA"
                ],
                "default": "DNS_RECORD_UNSPECIFIED",
                "description": "- DNS_RECORD_UNSPECIFIED: Invalid value\n - DNS_RECORD_A: name to IPv4 address(es) mapping\n - DNS_RECORD_AAAA: name to IPv6 address(es) mapping\n - DNS_RECORD_CNAME: alternative resource name\n - DNS_RECORD_DNAME: alternative resource set name\n - DNS_RECORD_NS: domain to name server mapping\n - DNS_RECORD_MX: SMTP mail server record\n - DNS_RECORD_PTR: IPv4/6 address to name mapping\n - DNS_RECORD_SOA: domain meta-data",
                "title": "DNS record type"
            },
            "v202202DNSResponseData": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Received DNS status"
                    },
                    "data": {
                        "type": "string",
                        "description": "Text rendering of received DNS resolution"
                    }
                }
            },
            "v202202DNSResults": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Queried DNS record"
                    },
                    "server": {
                        "type": "string",
                        "description": "DNS server used for the query"
                    },
                    "latency": {
                        "$ref": "#/components/schemas/v202202MetricData"
                    },
                    "response": {
                        "$ref": "#/components/schemas/v202202DNSResponseData"
                    }
                }
            },
            "v202202DeleteAgentResponse": {
                "type": "object"
            },
            "v202202DeleteTestResponse": {
                "type": "object"
            },
            "v202202DnsTest": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Fully qualified DNS name to query"
                    },
                    "timeout": {
                        "type": "integer",
                        "format": "int64",
                        "description": "--- <deprecated> ---"
                    },
                    "recordType": {
                        "$ref": "#/components/schemas/v202202DNSRecord"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses of DNS servers"
                    },
                    "port": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Target DNS server port"
                    }
                }
            },
            "v202202FlowTest": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Target ASN, CDN, Country, Region of City for autonomous test (type of value depends on flow test sub-type)"
                    },
                    "targetRefreshIntervalMillis": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Period (in milliseconds) for refreshing list of targets based on available flow data"
                    },
                    "maxProviders": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of IP providers to track autonomously"
                    },
                    "maxIpTargets": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of target IP addresses to select based flow data query"
                    },
                    "type": {
                        "type": "string",
                        "description": "Autonomous test sub-type (asn | cdn | country | region | city)"
                    },
                    "inetDirection": {
                        "type": "string",
                        "description": "Selection of address from flow data (src = source address in inbound flows | dst = destination addresses in outbound flows)"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of flows to match target attribute for extraction of target addresses (src | dst)"
                    }
                }
            },
            "v202202GetAgentResponse": {
                "type": "object",
                "properties": {
                    "agent": {
                        "$ref": "#/components/schemas/v202202Agent"
                    }
                }
            },
            "v202202GetResultsForTestsRequest": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of test IDs for which to retrieve results",
                        "required": [
                            "ids"
                        ]
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of the oldest results to include in results",
                        "required": [
                            "start_time"
                        ]
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of the newest results to include in results",
                        "required": [
                            "end_time"
                        ]
                    },
                    "agentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of agent IDs from which to return results"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of targets (test dependent) for which to retrieve results"
                    },
                    "aggregate": {
                        "type": "boolean",
                        "description": "If true, retrieve result aggregated across the requested time period, else return complete time series"
                    }
                },
                "required": [
                    "ids",
                    "startTime",
                    "endTime"
                ]
            },
            "v202202GetResultsForTestsResponse": {
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202TestResults"
                        }
                    }
                }
            },
            "v202202GetTestResponse": {
                "type": "object",
                "properties": {
                    "test": {
                        "$ref": "#/components/schemas/v202202Test"
                    }
                }
            },
            "v202202GetTraceForTestRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of test for which to retrieve network path trace data"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of the oldest results to include in results",
                        "required": [
                            "start_time"
                        ]
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of the newest results to include in results",
                        "required": [
                            "end_time"
                        ]
                    },
                    "agentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of agent IDs from which to return results"
                    },
                    "targetIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of target IP addresses for which to retrieve results"
                    }
                },
                "required": [
                    "startTime",
                    "endTime"
                ]
            },
            "v202202GetTraceForTestResponse": {
                "type": "object",
                "properties": {
                    "nodes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/v202202NetNode"
                        },
                        "description": "Map of network node information keyed by node IDs"
                    },
                    "paths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202Path"
                        },
                        "description": "List of retrieved network path data"
                    }
                }
            },
            "v202202HTTPResponseData": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int64",
                        "description": "HTTP status in response"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total size of  received response body"
                    },
                    "data": {
                        "type": "string",
                        "description": "Detailed information about transaction timing, connection characteristics and response"
                    }
                }
            },
            "v202202HTTPResults": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Target probed URL"
                    },
                    "latency": {
                        "$ref": "#/components/schemas/v202202MetricData"
                    },
                    "response": {
                        "$ref": "#/components/schemas/v202202HTTPResponseData"
                    },
                    "dstIp": {
                        "type": "string",
                        "description": "IP address of probed target server"
                    }
                }
            },
            "v202202HealthSettings": {
                "type": "object",
                "properties": {
                    "latencyCritical": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for ping or DNS response latency (in microseconds) to trigger critical alarm"
                    },
                    "latencyWarning": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for ping or DNS response latency (in microseconds) to trigger warning alarm"
                    },
                    "packetLossCritical": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for ping packet loss (in %) to trigger critical alarm"
                    },
                    "packetLossWarning": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for ping packet loss (in %) to trigger warning alarm"
                    },
                    "jitterCritical": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for ping jitter (in microseconds) to trigger critical alarm"
                    },
                    "jitterWarning": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for ping jitter (in microseconds) to trigger critical alarm"
                    },
                    "httpLatencyCritical": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for HTTP response latency (in microseconds) to trigger critical alarm"
                    },
                    "httpLatencyWarning": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for HTTP response latency (in microseconds) to trigger warning alarm"
                    },
                    "httpValidCodes": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "List of HTTP status codes indicating healthy state"
                    },
                    "dnsValidCodes": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "List of DNS status codes indicating healthy state"
                    },
                    "latencyCriticalStddev": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for standard deviation (in microseconds) of ping or DNS response latency to trigger critical alarm"
                    },
                    "latencyWarningStddev": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for standard deviation (in microseconds) of ping or DNS response latency to trigger warning alarm"
                    },
                    "jitterCriticalStddev": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for standard deviation of ping jitter (in microseconds) to trigger critical alarm"
                    },
                    "jitterWarningStddev": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for standard deviation of ping jitter (in microseconds) to trigger warning alarm"
                    },
                    "httpLatencyCriticalStddev": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for standard deviation of HTTP response latency (in microseconds) to trigger critical alarm"
                    },
                    "httpLatencyWarningStddev": {
                        "type": "number",
                        "format": "float",
                        "description": "Threshold for standard deviation of HTTP response latency (in microseconds) to trigger warning alarm"
                    },
                    "unhealthySubtestThreshold": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of tasks (across all agents) that must report unhealthy status in order for alarm to be triggered"
                    },
                    "activation": {
                        "$ref": "#/components/schemas/v202202ActivationSettings"
                    },
                    "certExpiryWarning": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Threshold for remaining validity of TLS certificate (in days) to trigger warning alarm"
                    },
                    "certExpiryCritical": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Threshold for remaining validity of TLS certificate (in days) to trigger critical alarm"
                    },
                    "dnsValidIps": {
                        "type": "string",
                        "description": "Comma separated list of IP addresses expected to be received in response to DNS A or AAAA query"
                    }
                }
            },
            "v202202HostnameTest": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Fully qualified DNS name of the target host"
                    }
                }
            },
            "v202202IPFamily": {
                "type": "string",
                "enum": [
                    "IP_FAMILY_UNSPECIFIED",
                    "IP_FAMILY_V4",
                    "IP_FAMILY_V6",
                    "IP_FAMILY_DUAL"
                ],
                "default": "IP_FAMILY_UNSPECIFIED",
                "description": "- IP_FAMILY_UNSPECIFIED: Invalid value.\n - IP_FAMILY_V4: IPv4 only\n - IP_FAMILY_V6: IPv6 only\n - IP_FAMILY_DUAL: IPv4 and IPv6 supported",
                "title": "Supported IP address family"
            },
            "v202202ImplementType": {
                "type": "string",
                "enum": [
                    "IMPLEMENT_TYPE_UNSPECIFIED",
                    "IMPLEMENT_TYPE_RUST",
                    "IMPLEMENT_TYPE_NODE"
                ],
                "default": "IMPLEMENT_TYPE_UNSPECIFIED",
                "description": "Agent implementation type determines capabilities of agent.\n\n - IMPLEMENT_TYPE_RUST: ksynth agent, a.k.a network agent (implemented in Rust) capable of running all tasks except for page-load\n - IMPLEMENT_TYPE_NODE: ksynth-agent, a.k.a. app agent (implemented in NodeJS) capable of running all tasks"
            },
            "v202202IpTest": {
                "type": "object",
                "properties": {
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses of targets"
                    }
                }
            },
            "v202202ListAgentsResponse": {
                "type": "object",
                "properties": {
                    "agents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202Agent"
                        },
                        "description": "List of available agents"
                    },
                    "invalidCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of invalid entries encountered while collecting data"
                    }
                }
            },
            "v202202ListTestsResponse": {
                "type": "object",
                "properties": {
                    "tests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202Test"
                        },
                        "description": "List of configured active or paused tests"
                    },
                    "invalidCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of invalid entries encountered while collecting data"
                    }
                }
            },
            "v202202MetricData": {
                "type": "object",
                "properties": {
                    "current": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Current value of metric"
                    },
                    "rollingAvg": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Rolling average of metric"
                    },
                    "rollingStddev": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Rolling average of standard deviation of metric"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health evaluation status for the metric (healthy | warning | critical)"
                    }
                }
            },
            "v202202NetNode": {
                "type": "object",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "IP address of the node in standard textual notation"
                    },
                    "asn": {
                        "type": "integer",
                        "format": "int64",
                        "description": "AS number owning the address of the node"
                    },
                    "asName": {
                        "type": "string",
                        "description": "Name of the AS owning the address of the node"
                    },
                    "location": {
                        "$ref": "#/components/schemas/syntheticsv202202Location"
                    },
                    "dnsName": {
                        "type": "string",
                        "description": "DNS name of the node (obtained by reverse DNS resolution)"
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of the device corresponding with the node in Kentik configuration"
                    },
                    "siteId": {
                        "type": "string",
                        "description": "ID of the site containing the device corresponding with the node in Kentik configuration"
                    }
                }
            },
            "v202202NetworkMeshTest": {
                "type": "object",
                "properties": {
                    "useLocalIp": {
                        "type": "boolean",
                        "description": "Boolean value indicating whether to use local (private) IP address of the target agents"
                    }
                }
            },
            "v202202PacketLossData": {
                "type": "object",
                "properties": {
                    "current": {
                        "type": "number",
                        "format": "double",
                        "description": "Current packet loss value"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health evaluation status for the metric (healthy | warning | critical)"
                    }
                }
            },
            "v202202PageLoadTest": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "HTTP or HTTPS URL to request"
                    },
                    "timeout": {
                        "type": "integer",
                        "format": "int64",
                        "description": "HTTP transaction timeout (in milliseconds)"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of HTTP header values keyed by header names"
                    },
                    "ignoreTlsErrors": {
                        "type": "boolean",
                        "description": "Boolean indicating whether to ignore TLS certificate verification errors"
                    },
                    "cssSelectors": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of CSS selector values keyed by selector name"
                    }
                }
            },
            "v202202Path": {
                "type": "object",
                "properties": {
                    "agentId": {
                        "type": "string",
                        "description": "ID of the agent generating the path data"
                    },
                    "targetIp": {
                        "type": "string",
                        "description": "IP address of the target of the path"
                    },
                    "hopCount": {
                        "$ref": "#/components/schemas/v202202Stats"
                    },
                    "maxAsPathLength": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum length of AS path across all traces"
                    },
                    "traces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202PathTrace"
                        },
                        "description": "Data for individual traces"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp (UTC) of initiation of the path trace"
                    }
                }
            },
            "v202202PathTrace": {
                "type": "object",
                "properties": {
                    "asPath": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "AS path of the network trace"
                    },
                    "isComplete": {
                        "type": "boolean",
                        "description": "Indication whether response from target was received"
                    },
                    "hops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202TraceHop"
                        },
                        "description": "List of hops in the trace"
                    }
                }
            },
            "v202202PingResults": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Hostname or address of the probed target"
                    },
                    "packetLoss": {
                        "$ref": "#/components/schemas/v202202PacketLossData"
                    },
                    "latency": {
                        "$ref": "#/components/schemas/v202202MetricData"
                    },
                    "jitter": {
                        "$ref": "#/components/schemas/v202202MetricData"
                    },
                    "dstIp": {
                        "type": "string",
                        "description": "IP address of probed target"
                    }
                }
            },
            "v202202SetTestStatusRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the test which status is to be modified",
                        "required": [
                            "id"
                        ]
                    },
                    "status": {
                        "$ref": "#/components/schemas/v202202TestStatus"
                    }
                },
                "required": [
                    "id",
                    "status"
                ]
            },
            "v202202SetTestStatusResponse": {
                "type": "object"
            },
            "v202202Stats": {
                "type": "object",
                "properties": {
                    "average": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Average value"
                    },
                    "min": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Minimum value"
                    },
                    "max": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum value"
                    }
                }
            },
            "v202202TaskResults": {
                "type": "object",
                "properties": {
                    "ping": {
                        "$ref": "#/components/schemas/v202202PingResults"
                    },
                    "http": {
                        "$ref": "#/components/schemas/v202202HTTPResults"
                    },
                    "dns": {
                        "$ref": "#/components/schemas/v202202DNSResults"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health status of the task"
                    }
                }
            },
            "v202202Test": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID of the test",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "User selected name of the test"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the test"
                    },
                    "status": {
                        "$ref": "#/components/schemas/v202202TestStatus"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/v202202TestSettings"
                    },
                    "cdate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation timestamp (UTC)",
                        "readOnly": true
                    },
                    "edate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last modification timestamp (UTC)",
                        "readOnly": true
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/v202202UserInfo"
                    },
                    "lastUpdatedBy": {
                        "$ref": "#/components/schemas/v202202UserInfo"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of labels associated with the test"
                    }
                }
            },
            "v202202TestPingSettings": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of probe packets to send in one iteration"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Transport protocol to use (icmp | tcp)"
                    },
                    "port": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Target port for TCP probes (ignored for ICMP)"
                    },
                    "timeout": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Timeout in milliseconds for execution of the task"
                    },
                    "delay": {
                        "type": "number",
                        "format": "float",
                        "description": "Inter-probe delay in milliseconds"
                    },
                    "dscp": {
                        "type": "integer",
                        "format": "int64",
                        "description": "--- <Not implemented yet> ---"
                    }
                }
            },
            "v202202TestResults": {
                "type": "object",
                "properties": {
                    "testId": {
                        "type": "string",
                        "description": "ID of the test for which results are provided"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Results timestamp (UTC)"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health status of the test"
                    },
                    "agents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v202202AgentResults"
                        },
                        "description": "List of results from agents executing tasks on behalf of the test"
                    }
                }
            },
            "v202202TestSettings": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "$ref": "#/components/schemas/v202202HostnameTest"
                    },
                    "ip": {
                        "$ref": "#/components/schemas/v202202IpTest"
                    },
                    "agent": {
                        "$ref": "#/components/schemas/v202202AgentTest"
                    },
                    "flow": {
                        "$ref": "#/components/schemas/v202202FlowTest"
                    },
                    "dns": {
                        "$ref": "#/components/schemas/v202202DnsTest"
                    },
                    "url": {
                        "$ref": "#/components/schemas/v202202UrlTest"
                    },
                    "networkGrid": {
                        "$ref": "#/components/schemas/v202202IpTest"
                    },
                    "pageLoad": {
                        "$ref": "#/components/schemas/v202202PageLoadTest"
                    },
                    "dnsGrid": {
                        "$ref": "#/components/schemas/v202202DnsTest"
                    },
                    "networkMesh": {
                        "$ref": "#/components/schemas/v202202NetworkMeshTest"
                    },
                    "agentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of agents assigned to run tasks on behalf of the test"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of task names to run for the test"
                    },
                    "healthSettings": {
                        "$ref": "#/components/schemas/v202202HealthSettings"
                    },
                    "ping": {
                        "$ref": "#/components/schemas/v202202TestPingSettings"
                    },
                    "trace": {
                        "$ref": "#/components/schemas/v202202TestTraceSettings"
                    },
                    "period": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Test evaluation period (in seconds)"
                    },
                    "family": {
                        "$ref": "#/components/schemas/v202202IPFamily"
                    },
                    "notificationChannels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of notification channels for alarms triggered by the test"
                    }
                },
                "title": "Synthetic test configuration"
            },
            "v202202TestStatus": {
                "type": "string",
                "enum": [
                    "TEST_STATUS_UNSPECIFIED",
                    "TEST_STATUS_ACTIVE",
                    "TEST_STATUS_PAUSED",
                    "TEST_STATUS_DELETED"
                ],
                "default": "TEST_STATUS_UNSPECIFIED",
                "description": "- TEST_STATUS_UNSPECIFIED: Invalid value.\n - TEST_STATUS_ACTIVE: Test is active.\n - TEST_STATUS_PAUSED: Test is paused.\n - TEST_STATUS_DELETED: Test is deleted. Not user settable.",
                "title": "Operational status of a test"
            },
            "v202202TestTraceSettings": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of probe packets to send in one iteration"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Transport protocol to use (icmp | tcp | udp)"
                    },
                    "port": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Target port for TCP or UDP probes (ignored for ICMP)"
                    },
                    "timeout": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Timeout in milliseconds for execution of the task"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of hops to probe (i.e. maximum TTL)"
                    },
                    "delay": {
                        "type": "number",
                        "format": "float",
                        "description": "Inter-probe delay in milliseconds"
                    },
                    "dscp": {
                        "type": "integer",
                        "format": "int64",
                        "description": "--- <Not implemented yet> ---"
                    }
                }
            },
            "v202202TraceHop": {
                "type": "object",
                "properties": {
                    "latency": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Round-trip packet latency to the node (in microseconds) - 0 if no response was received"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "ID of the node for this hop in the Nodes map  - empty if no response was received"
                    }
                }
            },
            "v202202UpdateAgentRequest": {
                "type": "object",
                "properties": {
                    "agent": {
                        "$ref": "#/components/schemas/v202202Agent"
                    }
                }
            },
            "v202202UpdateAgentResponse": {
                "type": "object",
                "properties": {
                    "agent": {
                        "$ref": "#/components/schemas/v202202Agent"
                    }
                }
            },
            "v202202UpdateTestRequest": {
                "type": "object",
                "properties": {
                    "test": {
                        "$ref": "#/components/schemas/v202202Test"
                    }
                }
            },
            "v202202UpdateTestResponse": {
                "type": "object",
                "properties": {
                    "test": {
                        "$ref": "#/components/schemas/v202202Test"
                    }
                }
            },
            "v202202UrlTest": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "HTTP or HTTPS URL to request"
                    },
                    "timeout": {
                        "type": "integer",
                        "format": "int64",
                        "description": "HTTP transaction timeout (in milliseconds)"
                    },
                    "method": {
                        "type": "string",
                        "description": "HTTP method to use (GET | HEAD | PATCH | POST | PUT)"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of HTTP header values keyed by header names"
                    },
                    "body": {
                        "type": "string",
                        "description": "HTTP request body"
                    },
                    "ignoreTlsErrors": {
                        "type": "boolean",
                        "description": "Boolean indicating whether to ignore TLS certificate verification errors"
                    }
                }
            },
            "v202202UserInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID of the user",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "description": "E-mail address of the user",
                        "readOnly": true
                    },
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the user",
                        "readOnly": true
                    }
                }
            }
        }
    }
}
