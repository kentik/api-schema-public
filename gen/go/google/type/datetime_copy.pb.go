// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: google/type/datetime.proto

package datetime

import "google.golang.org/protobuf/types/known/durationpb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DateTime) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DateTime:
		x.Year = v.GetYear()
		x.Month = v.GetMonth()
		x.Day = v.GetDay()
		x.Hours = v.GetHours()
		x.Minutes = v.GetMinutes()
		x.Seconds = v.GetSeconds()
		x.Nanos = v.GetNanos()
		x.TimeOffset = v.GetTimeOffset()
	default:
		if v, ok := v.(interface{ GetYear() rune }); ok {
			x.Year = v.GetYear()
		}
		if v, ok := v.(interface{ GetMonth() rune }); ok {
			x.Month = v.GetMonth()
		}
		if v, ok := v.(interface{ GetDay() rune }); ok {
			x.Day = v.GetDay()
		}
		if v, ok := v.(interface{ GetHours() rune }); ok {
			x.Hours = v.GetHours()
		}
		if v, ok := v.(interface{ GetMinutes() rune }); ok {
			x.Minutes = v.GetMinutes()
		}
		if v, ok := v.(interface{ GetSeconds() rune }); ok {
			x.Seconds = v.GetSeconds()
		}
		if v, ok := v.(interface{ GetNanos() rune }); ok {
			x.Nanos = v.GetNanos()
		}
		if v, ok := v.(interface{ GetTimeOffset() isDateTime_TimeOffset }); ok {
			x.TimeOffset = v.GetTimeOffset()
		} else {
			func() {
				if v, ok := v.(interface{ GetUtcOffset() *durationpb.Duration }); ok {
					var defaultValue *durationpb.Duration
					if v := v.GetUtcOffset(); v != defaultValue {
						x.TimeOffset = &DateTime_UtcOffset{UtcOffset: v}
						return
					}
				}
				if v, ok := v.(interface{ GetTimeZone() *TimeZone }); ok {
					var defaultValue *TimeZone
					if v := v.GetTimeZone(); v != defaultValue {
						x.TimeOffset = &DateTime_TimeZone{TimeZone: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DateTime) Proto_ShallowClone() (c *DateTime) {
	if x != nil {
		c = new(DateTime)
		c.Year = x.Year
		c.Month = x.Month
		c.Day = x.Day
		c.Hours = x.Hours
		c.Minutes = x.Minutes
		c.Seconds = x.Seconds
		c.Nanos = x.Nanos
		c.TimeOffset = x.TimeOffset
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TimeZone) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TimeZone:
		x.Id = v.GetId()
		x.Version = v.GetVersion()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetVersion() string }); ok {
			x.Version = v.GetVersion()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TimeZone) Proto_ShallowClone() (c *TimeZone) {
	if x != nil {
		c = new(TimeZone)
		c.Id = x.Id
		c.Version = x.Version
	}
	return
}
