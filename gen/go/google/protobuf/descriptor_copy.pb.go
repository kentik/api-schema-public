// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: google/protobuf/descriptor.proto

package descriptorpb

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FileDescriptorSet) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FileDescriptorSet:
		x.File = v.GetFile()
	default:
		if v, ok := v.(interface{ GetFile() []*FileDescriptorProto }); ok {
			x.File = v.GetFile()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FileDescriptorSet) Proto_ShallowClone() (c *FileDescriptorSet) {
	if x != nil {
		c = new(FileDescriptorSet)
		c.File = x.File
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FileDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FileDescriptorProto:
		x.Name = v.GetName()
		x.Package = v.GetPackage()
		x.Dependency = v.GetDependency()
		x.PublicDependency = v.GetPublicDependency()
		x.WeakDependency = v.GetWeakDependency()
		x.MessageType = v.GetMessageType()
		x.EnumType = v.GetEnumType()
		x.Service = v.GetService()
		x.Extension = v.GetExtension()
		x.Options = v.GetOptions()
		x.SourceCodeInfo = v.GetSourceCodeInfo()
		x.Syntax = v.GetSyntax()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetPackage() *string }); ok {
			x.Package = v.GetPackage()
		}
		if v, ok := v.(interface{ GetDependency() []string }); ok {
			x.Dependency = v.GetDependency()
		}
		if v, ok := v.(interface{ GetPublicDependency() []rune }); ok {
			x.PublicDependency = v.GetPublicDependency()
		}
		if v, ok := v.(interface{ GetWeakDependency() []rune }); ok {
			x.WeakDependency = v.GetWeakDependency()
		}
		if v, ok := v.(interface{ GetMessageType() []*DescriptorProto }); ok {
			x.MessageType = v.GetMessageType()
		}
		if v, ok := v.(interface{ GetEnumType() []*EnumDescriptorProto }); ok {
			x.EnumType = v.GetEnumType()
		}
		if v, ok := v.(interface {
			GetService() []*ServiceDescriptorProto
		}); ok {
			x.Service = v.GetService()
		}
		if v, ok := v.(interface {
			GetExtension() []*FieldDescriptorProto
		}); ok {
			x.Extension = v.GetExtension()
		}
		if v, ok := v.(interface{ GetOptions() *FileOptions }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface{ GetSourceCodeInfo() *SourceCodeInfo }); ok {
			x.SourceCodeInfo = v.GetSourceCodeInfo()
		}
		if v, ok := v.(interface{ GetSyntax() *string }); ok {
			x.Syntax = v.GetSyntax()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FileDescriptorProto) Proto_ShallowClone() (c *FileDescriptorProto) {
	if x != nil {
		c = new(FileDescriptorProto)
		c.Name = x.Name
		c.Package = x.Package
		c.Dependency = x.Dependency
		c.PublicDependency = x.PublicDependency
		c.WeakDependency = x.WeakDependency
		c.MessageType = x.MessageType
		c.EnumType = x.EnumType
		c.Service = x.Service
		c.Extension = x.Extension
		c.Options = x.Options
		c.SourceCodeInfo = x.SourceCodeInfo
		c.Syntax = x.Syntax
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DescriptorProto:
		x.Name = v.GetName()
		x.Field = v.GetField()
		x.Extension = v.GetExtension()
		x.NestedType = v.GetNestedType()
		x.EnumType = v.GetEnumType()
		x.ExtensionRange = v.GetExtensionRange()
		x.OneofDecl = v.GetOneofDecl()
		x.Options = v.GetOptions()
		x.ReservedRange = v.GetReservedRange()
		x.ReservedName = v.GetReservedName()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface {
			GetField() []*FieldDescriptorProto
		}); ok {
			x.Field = v.GetField()
		}
		if v, ok := v.(interface {
			GetExtension() []*FieldDescriptorProto
		}); ok {
			x.Extension = v.GetExtension()
		}
		if v, ok := v.(interface{ GetNestedType() []*DescriptorProto }); ok {
			x.NestedType = v.GetNestedType()
		}
		if v, ok := v.(interface{ GetEnumType() []*EnumDescriptorProto }); ok {
			x.EnumType = v.GetEnumType()
		}
		if v, ok := v.(interface {
			GetExtensionRange() []*DescriptorProto_ExtensionRange
		}); ok {
			x.ExtensionRange = v.GetExtensionRange()
		}
		if v, ok := v.(interface {
			GetOneofDecl() []*OneofDescriptorProto
		}); ok {
			x.OneofDecl = v.GetOneofDecl()
		}
		if v, ok := v.(interface{ GetOptions() *MessageOptions }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface {
			GetReservedRange() []*DescriptorProto_ReservedRange
		}); ok {
			x.ReservedRange = v.GetReservedRange()
		}
		if v, ok := v.(interface{ GetReservedName() []string }); ok {
			x.ReservedName = v.GetReservedName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DescriptorProto) Proto_ShallowClone() (c *DescriptorProto) {
	if x != nil {
		c = new(DescriptorProto)
		c.Name = x.Name
		c.Field = x.Field
		c.Extension = x.Extension
		c.NestedType = x.NestedType
		c.EnumType = x.EnumType
		c.ExtensionRange = x.ExtensionRange
		c.OneofDecl = x.OneofDecl
		c.Options = x.Options
		c.ReservedRange = x.ReservedRange
		c.ReservedName = x.ReservedName
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DescriptorProto_ExtensionRange) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DescriptorProto_ExtensionRange:
		x.Start = v.GetStart()
		x.End = v.GetEnd()
		x.Options = v.GetOptions()
	default:
		if v, ok := v.(interface{ GetStart() *rune }); ok {
			x.Start = v.GetStart()
		}
		if v, ok := v.(interface{ GetEnd() *rune }); ok {
			x.End = v.GetEnd()
		}
		if v, ok := v.(interface{ GetOptions() *ExtensionRangeOptions }); ok {
			x.Options = v.GetOptions()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DescriptorProto_ExtensionRange) Proto_ShallowClone() (c *DescriptorProto_ExtensionRange) {
	if x != nil {
		c = new(DescriptorProto_ExtensionRange)
		c.Start = x.Start
		c.End = x.End
		c.Options = x.Options
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DescriptorProto_ReservedRange) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DescriptorProto_ReservedRange:
		x.Start = v.GetStart()
		x.End = v.GetEnd()
	default:
		if v, ok := v.(interface{ GetStart() *rune }); ok {
			x.Start = v.GetStart()
		}
		if v, ok := v.(interface{ GetEnd() *rune }); ok {
			x.End = v.GetEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DescriptorProto_ReservedRange) Proto_ShallowClone() (c *DescriptorProto_ReservedRange) {
	if x != nil {
		c = new(DescriptorProto_ReservedRange)
		c.Start = x.Start
		c.End = x.End
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ExtensionRangeOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ExtensionRangeOptions:
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ExtensionRangeOptions) Proto_ShallowClone() (c *ExtensionRangeOptions) {
	if x != nil {
		c = new(ExtensionRangeOptions)
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FieldDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FieldDescriptorProto:
		x.Name = v.GetName()
		x.Number = v.GetNumber()
		x.Label = v.GetLabel()
		x.Type = v.GetType()
		x.TypeName = v.GetTypeName()
		x.Extendee = v.GetExtendee()
		x.DefaultValue = v.GetDefaultValue()
		x.OneofIndex = v.GetOneofIndex()
		x.JsonName = v.GetJsonName()
		x.Options = v.GetOptions()
		x.Proto3Optional = v.GetProto3Optional()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetNumber() *rune }); ok {
			x.Number = v.GetNumber()
		}
		if v, ok := v.(interface {
			GetLabel() *FieldDescriptorProto_Label
		}); ok {
			x.Label = v.GetLabel()
		}
		if v, ok := v.(interface {
			GetType() *FieldDescriptorProto_Type
		}); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetTypeName() *string }); ok {
			x.TypeName = v.GetTypeName()
		}
		if v, ok := v.(interface{ GetExtendee() *string }); ok {
			x.Extendee = v.GetExtendee()
		}
		if v, ok := v.(interface{ GetDefaultValue() *string }); ok {
			x.DefaultValue = v.GetDefaultValue()
		}
		if v, ok := v.(interface{ GetOneofIndex() *rune }); ok {
			x.OneofIndex = v.GetOneofIndex()
		}
		if v, ok := v.(interface{ GetJsonName() *string }); ok {
			x.JsonName = v.GetJsonName()
		}
		if v, ok := v.(interface{ GetOptions() *FieldOptions }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface{ GetProto3Optional() *bool }); ok {
			x.Proto3Optional = v.GetProto3Optional()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FieldDescriptorProto) Proto_ShallowClone() (c *FieldDescriptorProto) {
	if x != nil {
		c = new(FieldDescriptorProto)
		c.Name = x.Name
		c.Number = x.Number
		c.Label = x.Label
		c.Type = x.Type
		c.TypeName = x.TypeName
		c.Extendee = x.Extendee
		c.DefaultValue = x.DefaultValue
		c.OneofIndex = x.OneofIndex
		c.JsonName = x.JsonName
		c.Options = x.Options
		c.Proto3Optional = x.Proto3Optional
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *OneofDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *OneofDescriptorProto:
		x.Name = v.GetName()
		x.Options = v.GetOptions()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetOptions() *OneofOptions }); ok {
			x.Options = v.GetOptions()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *OneofDescriptorProto) Proto_ShallowClone() (c *OneofDescriptorProto) {
	if x != nil {
		c = new(OneofDescriptorProto)
		c.Name = x.Name
		c.Options = x.Options
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EnumDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EnumDescriptorProto:
		x.Name = v.GetName()
		x.Value = v.GetValue()
		x.Options = v.GetOptions()
		x.ReservedRange = v.GetReservedRange()
		x.ReservedName = v.GetReservedName()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface {
			GetValue() []*EnumValueDescriptorProto
		}); ok {
			x.Value = v.GetValue()
		}
		if v, ok := v.(interface{ GetOptions() *EnumOptions }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface {
			GetReservedRange() []*EnumDescriptorProto_EnumReservedRange
		}); ok {
			x.ReservedRange = v.GetReservedRange()
		}
		if v, ok := v.(interface{ GetReservedName() []string }); ok {
			x.ReservedName = v.GetReservedName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EnumDescriptorProto) Proto_ShallowClone() (c *EnumDescriptorProto) {
	if x != nil {
		c = new(EnumDescriptorProto)
		c.Name = x.Name
		c.Value = x.Value
		c.Options = x.Options
		c.ReservedRange = x.ReservedRange
		c.ReservedName = x.ReservedName
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EnumDescriptorProto_EnumReservedRange) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EnumDescriptorProto_EnumReservedRange:
		x.Start = v.GetStart()
		x.End = v.GetEnd()
	default:
		if v, ok := v.(interface{ GetStart() *rune }); ok {
			x.Start = v.GetStart()
		}
		if v, ok := v.(interface{ GetEnd() *rune }); ok {
			x.End = v.GetEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EnumDescriptorProto_EnumReservedRange) Proto_ShallowClone() (c *EnumDescriptorProto_EnumReservedRange) {
	if x != nil {
		c = new(EnumDescriptorProto_EnumReservedRange)
		c.Start = x.Start
		c.End = x.End
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EnumValueDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EnumValueDescriptorProto:
		x.Name = v.GetName()
		x.Number = v.GetNumber()
		x.Options = v.GetOptions()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetNumber() *rune }); ok {
			x.Number = v.GetNumber()
		}
		if v, ok := v.(interface{ GetOptions() *EnumValueOptions }); ok {
			x.Options = v.GetOptions()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EnumValueDescriptorProto) Proto_ShallowClone() (c *EnumValueDescriptorProto) {
	if x != nil {
		c = new(EnumValueDescriptorProto)
		c.Name = x.Name
		c.Number = x.Number
		c.Options = x.Options
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ServiceDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ServiceDescriptorProto:
		x.Name = v.GetName()
		x.Method = v.GetMethod()
		x.Options = v.GetOptions()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface {
			GetMethod() []*MethodDescriptorProto
		}); ok {
			x.Method = v.GetMethod()
		}
		if v, ok := v.(interface{ GetOptions() *ServiceOptions }); ok {
			x.Options = v.GetOptions()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ServiceDescriptorProto) Proto_ShallowClone() (c *ServiceDescriptorProto) {
	if x != nil {
		c = new(ServiceDescriptorProto)
		c.Name = x.Name
		c.Method = x.Method
		c.Options = x.Options
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MethodDescriptorProto) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MethodDescriptorProto:
		x.Name = v.GetName()
		x.InputType = v.GetInputType()
		x.OutputType = v.GetOutputType()
		x.Options = v.GetOptions()
		x.ClientStreaming = v.GetClientStreaming()
		x.ServerStreaming = v.GetServerStreaming()
	default:
		if v, ok := v.(interface{ GetName() *string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetInputType() *string }); ok {
			x.InputType = v.GetInputType()
		}
		if v, ok := v.(interface{ GetOutputType() *string }); ok {
			x.OutputType = v.GetOutputType()
		}
		if v, ok := v.(interface{ GetOptions() *MethodOptions }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface{ GetClientStreaming() *bool }); ok {
			x.ClientStreaming = v.GetClientStreaming()
		}
		if v, ok := v.(interface{ GetServerStreaming() *bool }); ok {
			x.ServerStreaming = v.GetServerStreaming()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MethodDescriptorProto) Proto_ShallowClone() (c *MethodDescriptorProto) {
	if x != nil {
		c = new(MethodDescriptorProto)
		c.Name = x.Name
		c.InputType = x.InputType
		c.OutputType = x.OutputType
		c.Options = x.Options
		c.ClientStreaming = x.ClientStreaming
		c.ServerStreaming = x.ServerStreaming
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FileOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FileOptions:
		x.JavaPackage = v.GetJavaPackage()
		x.JavaOuterClassname = v.GetJavaOuterClassname()
		x.JavaMultipleFiles = v.GetJavaMultipleFiles()
		x.JavaGenerateEqualsAndHash = v.GetJavaGenerateEqualsAndHash()
		x.JavaStringCheckUtf8 = v.GetJavaStringCheckUtf8()
		x.OptimizeFor = v.GetOptimizeFor()
		x.GoPackage = v.GetGoPackage()
		x.CcGenericServices = v.GetCcGenericServices()
		x.JavaGenericServices = v.GetJavaGenericServices()
		x.PyGenericServices = v.GetPyGenericServices()
		x.PhpGenericServices = v.GetPhpGenericServices()
		x.Deprecated = v.GetDeprecated()
		x.CcEnableArenas = v.GetCcEnableArenas()
		x.ObjcClassPrefix = v.GetObjcClassPrefix()
		x.CsharpNamespace = v.GetCsharpNamespace()
		x.SwiftPrefix = v.GetSwiftPrefix()
		x.PhpClassPrefix = v.GetPhpClassPrefix()
		x.PhpNamespace = v.GetPhpNamespace()
		x.PhpMetadataNamespace = v.GetPhpMetadataNamespace()
		x.RubyPackage = v.GetRubyPackage()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetJavaPackage() *string }); ok {
			x.JavaPackage = v.GetJavaPackage()
		}
		if v, ok := v.(interface{ GetJavaOuterClassname() *string }); ok {
			x.JavaOuterClassname = v.GetJavaOuterClassname()
		}
		if v, ok := v.(interface{ GetJavaMultipleFiles() *bool }); ok {
			x.JavaMultipleFiles = v.GetJavaMultipleFiles()
		}
		if v, ok := v.(interface{ GetJavaGenerateEqualsAndHash() *bool }); ok {
			x.JavaGenerateEqualsAndHash = v.GetJavaGenerateEqualsAndHash()
		}
		if v, ok := v.(interface{ GetJavaStringCheckUtf8() *bool }); ok {
			x.JavaStringCheckUtf8 = v.GetJavaStringCheckUtf8()
		}
		if v, ok := v.(interface {
			GetOptimizeFor() *FileOptions_OptimizeMode
		}); ok {
			x.OptimizeFor = v.GetOptimizeFor()
		}
		if v, ok := v.(interface{ GetGoPackage() *string }); ok {
			x.GoPackage = v.GetGoPackage()
		}
		if v, ok := v.(interface{ GetCcGenericServices() *bool }); ok {
			x.CcGenericServices = v.GetCcGenericServices()
		}
		if v, ok := v.(interface{ GetJavaGenericServices() *bool }); ok {
			x.JavaGenericServices = v.GetJavaGenericServices()
		}
		if v, ok := v.(interface{ GetPyGenericServices() *bool }); ok {
			x.PyGenericServices = v.GetPyGenericServices()
		}
		if v, ok := v.(interface{ GetPhpGenericServices() *bool }); ok {
			x.PhpGenericServices = v.GetPhpGenericServices()
		}
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface{ GetCcEnableArenas() *bool }); ok {
			x.CcEnableArenas = v.GetCcEnableArenas()
		}
		if v, ok := v.(interface{ GetObjcClassPrefix() *string }); ok {
			x.ObjcClassPrefix = v.GetObjcClassPrefix()
		}
		if v, ok := v.(interface{ GetCsharpNamespace() *string }); ok {
			x.CsharpNamespace = v.GetCsharpNamespace()
		}
		if v, ok := v.(interface{ GetSwiftPrefix() *string }); ok {
			x.SwiftPrefix = v.GetSwiftPrefix()
		}
		if v, ok := v.(interface{ GetPhpClassPrefix() *string }); ok {
			x.PhpClassPrefix = v.GetPhpClassPrefix()
		}
		if v, ok := v.(interface{ GetPhpNamespace() *string }); ok {
			x.PhpNamespace = v.GetPhpNamespace()
		}
		if v, ok := v.(interface{ GetPhpMetadataNamespace() *string }); ok {
			x.PhpMetadataNamespace = v.GetPhpMetadataNamespace()
		}
		if v, ok := v.(interface{ GetRubyPackage() *string }); ok {
			x.RubyPackage = v.GetRubyPackage()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FileOptions) Proto_ShallowClone() (c *FileOptions) {
	if x != nil {
		c = new(FileOptions)
		c.JavaPackage = x.JavaPackage
		c.JavaOuterClassname = x.JavaOuterClassname
		c.JavaMultipleFiles = x.JavaMultipleFiles
		c.JavaGenerateEqualsAndHash = x.JavaGenerateEqualsAndHash
		c.JavaStringCheckUtf8 = x.JavaStringCheckUtf8
		c.OptimizeFor = x.OptimizeFor
		c.GoPackage = x.GoPackage
		c.CcGenericServices = x.CcGenericServices
		c.JavaGenericServices = x.JavaGenericServices
		c.PyGenericServices = x.PyGenericServices
		c.PhpGenericServices = x.PhpGenericServices
		c.Deprecated = x.Deprecated
		c.CcEnableArenas = x.CcEnableArenas
		c.ObjcClassPrefix = x.ObjcClassPrefix
		c.CsharpNamespace = x.CsharpNamespace
		c.SwiftPrefix = x.SwiftPrefix
		c.PhpClassPrefix = x.PhpClassPrefix
		c.PhpNamespace = x.PhpNamespace
		c.PhpMetadataNamespace = x.PhpMetadataNamespace
		c.RubyPackage = x.RubyPackage
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MessageOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MessageOptions:
		x.MessageSetWireFormat = v.GetMessageSetWireFormat()
		x.NoStandardDescriptorAccessor = v.GetNoStandardDescriptorAccessor()
		x.Deprecated = v.GetDeprecated()
		x.MapEntry = v.GetMapEntry()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetMessageSetWireFormat() *bool }); ok {
			x.MessageSetWireFormat = v.GetMessageSetWireFormat()
		}
		if v, ok := v.(interface{ GetNoStandardDescriptorAccessor() *bool }); ok {
			x.NoStandardDescriptorAccessor = v.GetNoStandardDescriptorAccessor()
		}
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface{ GetMapEntry() *bool }); ok {
			x.MapEntry = v.GetMapEntry()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MessageOptions) Proto_ShallowClone() (c *MessageOptions) {
	if x != nil {
		c = new(MessageOptions)
		c.MessageSetWireFormat = x.MessageSetWireFormat
		c.NoStandardDescriptorAccessor = x.NoStandardDescriptorAccessor
		c.Deprecated = x.Deprecated
		c.MapEntry = x.MapEntry
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FieldOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FieldOptions:
		x.Ctype = v.GetCtype()
		x.Packed = v.GetPacked()
		x.Jstype = v.GetJstype()
		x.Lazy = v.GetLazy()
		x.Deprecated = v.GetDeprecated()
		x.Weak = v.GetWeak()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetCtype() *FieldOptions_CType }); ok {
			x.Ctype = v.GetCtype()
		}
		if v, ok := v.(interface{ GetPacked() *bool }); ok {
			x.Packed = v.GetPacked()
		}
		if v, ok := v.(interface{ GetJstype() *FieldOptions_JSType }); ok {
			x.Jstype = v.GetJstype()
		}
		if v, ok := v.(interface{ GetLazy() *bool }); ok {
			x.Lazy = v.GetLazy()
		}
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface{ GetWeak() *bool }); ok {
			x.Weak = v.GetWeak()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FieldOptions) Proto_ShallowClone() (c *FieldOptions) {
	if x != nil {
		c = new(FieldOptions)
		c.Ctype = x.Ctype
		c.Packed = x.Packed
		c.Jstype = x.Jstype
		c.Lazy = x.Lazy
		c.Deprecated = x.Deprecated
		c.Weak = x.Weak
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *OneofOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *OneofOptions:
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *OneofOptions) Proto_ShallowClone() (c *OneofOptions) {
	if x != nil {
		c = new(OneofOptions)
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EnumOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EnumOptions:
		x.AllowAlias = v.GetAllowAlias()
		x.Deprecated = v.GetDeprecated()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetAllowAlias() *bool }); ok {
			x.AllowAlias = v.GetAllowAlias()
		}
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EnumOptions) Proto_ShallowClone() (c *EnumOptions) {
	if x != nil {
		c = new(EnumOptions)
		c.AllowAlias = x.AllowAlias
		c.Deprecated = x.Deprecated
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EnumValueOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EnumValueOptions:
		x.Deprecated = v.GetDeprecated()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EnumValueOptions) Proto_ShallowClone() (c *EnumValueOptions) {
	if x != nil {
		c = new(EnumValueOptions)
		c.Deprecated = x.Deprecated
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ServiceOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ServiceOptions:
		x.Deprecated = v.GetDeprecated()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ServiceOptions) Proto_ShallowClone() (c *ServiceOptions) {
	if x != nil {
		c = new(ServiceOptions)
		c.Deprecated = x.Deprecated
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MethodOptions) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MethodOptions:
		x.Deprecated = v.GetDeprecated()
		x.IdempotencyLevel = v.GetIdempotencyLevel()
		x.UninterpretedOption = v.GetUninterpretedOption()
	default:
		if v, ok := v.(interface{ GetDeprecated() *bool }); ok {
			x.Deprecated = v.GetDeprecated()
		}
		if v, ok := v.(interface {
			GetIdempotencyLevel() *MethodOptions_IdempotencyLevel
		}); ok {
			x.IdempotencyLevel = v.GetIdempotencyLevel()
		}
		if v, ok := v.(interface{ GetUninterpretedOption() []*UninterpretedOption }); ok {
			x.UninterpretedOption = v.GetUninterpretedOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MethodOptions) Proto_ShallowClone() (c *MethodOptions) {
	if x != nil {
		c = new(MethodOptions)
		c.Deprecated = x.Deprecated
		c.IdempotencyLevel = x.IdempotencyLevel
		c.UninterpretedOption = x.UninterpretedOption
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UninterpretedOption) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UninterpretedOption:
		x.Name = v.GetName()
		x.IdentifierValue = v.GetIdentifierValue()
		x.PositiveIntValue = v.GetPositiveIntValue()
		x.NegativeIntValue = v.GetNegativeIntValue()
		x.DoubleValue = v.GetDoubleValue()
		x.StringValue = v.GetStringValue()
		x.AggregateValue = v.GetAggregateValue()
	default:
		if v, ok := v.(interface {
			GetName() []*UninterpretedOption_NamePart
		}); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetIdentifierValue() *string }); ok {
			x.IdentifierValue = v.GetIdentifierValue()
		}
		if v, ok := v.(interface{ GetPositiveIntValue() *uint64 }); ok {
			x.PositiveIntValue = v.GetPositiveIntValue()
		}
		if v, ok := v.(interface{ GetNegativeIntValue() *int64 }); ok {
			x.NegativeIntValue = v.GetNegativeIntValue()
		}
		if v, ok := v.(interface{ GetDoubleValue() *float64 }); ok {
			x.DoubleValue = v.GetDoubleValue()
		}
		if v, ok := v.(interface{ GetStringValue() []byte }); ok {
			x.StringValue = v.GetStringValue()
		}
		if v, ok := v.(interface{ GetAggregateValue() *string }); ok {
			x.AggregateValue = v.GetAggregateValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UninterpretedOption) Proto_ShallowClone() (c *UninterpretedOption) {
	if x != nil {
		c = new(UninterpretedOption)
		c.Name = x.Name
		c.IdentifierValue = x.IdentifierValue
		c.PositiveIntValue = x.PositiveIntValue
		c.NegativeIntValue = x.NegativeIntValue
		c.DoubleValue = x.DoubleValue
		c.StringValue = x.StringValue
		c.AggregateValue = x.AggregateValue
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UninterpretedOption_NamePart) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UninterpretedOption_NamePart:
		x.NamePart = v.GetNamePart()
		x.IsExtension = v.GetIsExtension()
	default:
		if v, ok := v.(interface{ GetNamePart() *string }); ok {
			x.NamePart = v.GetNamePart()
		}
		if v, ok := v.(interface{ GetIsExtension() *bool }); ok {
			x.IsExtension = v.GetIsExtension()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UninterpretedOption_NamePart) Proto_ShallowClone() (c *UninterpretedOption_NamePart) {
	if x != nil {
		c = new(UninterpretedOption_NamePart)
		c.NamePart = x.NamePart
		c.IsExtension = x.IsExtension
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SourceCodeInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SourceCodeInfo:
		x.Location = v.GetLocation()
	default:
		if v, ok := v.(interface {
			GetLocation() []*SourceCodeInfo_Location
		}); ok {
			x.Location = v.GetLocation()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SourceCodeInfo) Proto_ShallowClone() (c *SourceCodeInfo) {
	if x != nil {
		c = new(SourceCodeInfo)
		c.Location = x.Location
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SourceCodeInfo_Location) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SourceCodeInfo_Location:
		x.Path = v.GetPath()
		x.Span = v.GetSpan()
		x.LeadingComments = v.GetLeadingComments()
		x.TrailingComments = v.GetTrailingComments()
		x.LeadingDetachedComments = v.GetLeadingDetachedComments()
	default:
		if v, ok := v.(interface{ GetPath() []rune }); ok {
			x.Path = v.GetPath()
		}
		if v, ok := v.(interface{ GetSpan() []rune }); ok {
			x.Span = v.GetSpan()
		}
		if v, ok := v.(interface{ GetLeadingComments() *string }); ok {
			x.LeadingComments = v.GetLeadingComments()
		}
		if v, ok := v.(interface{ GetTrailingComments() *string }); ok {
			x.TrailingComments = v.GetTrailingComments()
		}
		if v, ok := v.(interface{ GetLeadingDetachedComments() []string }); ok {
			x.LeadingDetachedComments = v.GetLeadingDetachedComments()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SourceCodeInfo_Location) Proto_ShallowClone() (c *SourceCodeInfo_Location) {
	if x != nil {
		c = new(SourceCodeInfo_Location)
		c.Path = x.Path
		c.Span = x.Span
		c.LeadingComments = x.LeadingComments
		c.TrailingComments = x.TrailingComments
		c.LeadingDetachedComments = x.LeadingDetachedComments
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GeneratedCodeInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GeneratedCodeInfo:
		x.Annotation = v.GetAnnotation()
	default:
		if v, ok := v.(interface {
			GetAnnotation() []*GeneratedCodeInfo_Annotation
		}); ok {
			x.Annotation = v.GetAnnotation()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GeneratedCodeInfo) Proto_ShallowClone() (c *GeneratedCodeInfo) {
	if x != nil {
		c = new(GeneratedCodeInfo)
		c.Annotation = x.Annotation
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GeneratedCodeInfo_Annotation) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GeneratedCodeInfo_Annotation:
		x.Path = v.GetPath()
		x.SourceFile = v.GetSourceFile()
		x.Begin = v.GetBegin()
		x.End = v.GetEnd()
	default:
		if v, ok := v.(interface{ GetPath() []rune }); ok {
			x.Path = v.GetPath()
		}
		if v, ok := v.(interface{ GetSourceFile() *string }); ok {
			x.SourceFile = v.GetSourceFile()
		}
		if v, ok := v.(interface{ GetBegin() *rune }); ok {
			x.Begin = v.GetBegin()
		}
		if v, ok := v.(interface{ GetEnd() *rune }); ok {
			x.End = v.GetEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GeneratedCodeInfo_Annotation) Proto_ShallowClone() (c *GeneratedCodeInfo_Annotation) {
	if x != nil {
		c = new(GeneratedCodeInfo_Annotation)
		c.Path = x.Path
		c.SourceFile = x.SourceFile
		c.Begin = x.Begin
		c.End = x.End
	}
	return
}
