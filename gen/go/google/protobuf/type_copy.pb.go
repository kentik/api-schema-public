// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: google/protobuf/type.proto

package typepb

import "google.golang.org/protobuf/types/known/anypb"
import "google.golang.org/protobuf/types/known/sourcecontextpb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Type) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Type:
		x.Name = v.GetName()
		x.Fields = v.GetFields()
		x.Oneofs = v.GetOneofs()
		x.Options = v.GetOptions()
		x.SourceContext = v.GetSourceContext()
		x.Syntax = v.GetSyntax()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetFields() []*Field }); ok {
			x.Fields = v.GetFields()
		}
		if v, ok := v.(interface{ GetOneofs() []string }); ok {
			x.Oneofs = v.GetOneofs()
		}
		if v, ok := v.(interface{ GetOptions() []*Option }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface {
			GetSourceContext() *sourcecontextpb.SourceContext
		}); ok {
			x.SourceContext = v.GetSourceContext()
		}
		if v, ok := v.(interface{ GetSyntax() Syntax }); ok {
			x.Syntax = v.GetSyntax()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Type) Proto_ShallowClone() (c *Type) {
	if x != nil {
		c = new(Type)
		c.Name = x.Name
		c.Fields = x.Fields
		c.Oneofs = x.Oneofs
		c.Options = x.Options
		c.SourceContext = x.SourceContext
		c.Syntax = x.Syntax
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Field) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Field:
		x.Kind = v.GetKind()
		x.Cardinality = v.GetCardinality()
		x.Number = v.GetNumber()
		x.Name = v.GetName()
		x.TypeUrl = v.GetTypeUrl()
		x.OneofIndex = v.GetOneofIndex()
		x.Packed = v.GetPacked()
		x.Options = v.GetOptions()
		x.JsonName = v.GetJsonName()
		x.DefaultValue = v.GetDefaultValue()
	default:
		if v, ok := v.(interface{ GetKind() Field_Kind }); ok {
			x.Kind = v.GetKind()
		}
		if v, ok := v.(interface{ GetCardinality() Field_Cardinality }); ok {
			x.Cardinality = v.GetCardinality()
		}
		if v, ok := v.(interface{ GetNumber() rune }); ok {
			x.Number = v.GetNumber()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetTypeUrl() string }); ok {
			x.TypeUrl = v.GetTypeUrl()
		}
		if v, ok := v.(interface{ GetOneofIndex() rune }); ok {
			x.OneofIndex = v.GetOneofIndex()
		}
		if v, ok := v.(interface{ GetPacked() bool }); ok {
			x.Packed = v.GetPacked()
		}
		if v, ok := v.(interface{ GetOptions() []*Option }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface{ GetJsonName() string }); ok {
			x.JsonName = v.GetJsonName()
		}
		if v, ok := v.(interface{ GetDefaultValue() string }); ok {
			x.DefaultValue = v.GetDefaultValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Field) Proto_ShallowClone() (c *Field) {
	if x != nil {
		c = new(Field)
		c.Kind = x.Kind
		c.Cardinality = x.Cardinality
		c.Number = x.Number
		c.Name = x.Name
		c.TypeUrl = x.TypeUrl
		c.OneofIndex = x.OneofIndex
		c.Packed = x.Packed
		c.Options = x.Options
		c.JsonName = x.JsonName
		c.DefaultValue = x.DefaultValue
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Enum) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Enum:
		x.Name = v.GetName()
		x.Enumvalue = v.GetEnumvalue()
		x.Options = v.GetOptions()
		x.SourceContext = v.GetSourceContext()
		x.Syntax = v.GetSyntax()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetEnumvalue() []*EnumValue }); ok {
			x.Enumvalue = v.GetEnumvalue()
		}
		if v, ok := v.(interface{ GetOptions() []*Option }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface {
			GetSourceContext() *sourcecontextpb.SourceContext
		}); ok {
			x.SourceContext = v.GetSourceContext()
		}
		if v, ok := v.(interface{ GetSyntax() Syntax }); ok {
			x.Syntax = v.GetSyntax()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Enum) Proto_ShallowClone() (c *Enum) {
	if x != nil {
		c = new(Enum)
		c.Name = x.Name
		c.Enumvalue = x.Enumvalue
		c.Options = x.Options
		c.SourceContext = x.SourceContext
		c.Syntax = x.Syntax
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EnumValue) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EnumValue:
		x.Name = v.GetName()
		x.Number = v.GetNumber()
		x.Options = v.GetOptions()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetNumber() rune }); ok {
			x.Number = v.GetNumber()
		}
		if v, ok := v.(interface{ GetOptions() []*Option }); ok {
			x.Options = v.GetOptions()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EnumValue) Proto_ShallowClone() (c *EnumValue) {
	if x != nil {
		c = new(EnumValue)
		c.Name = x.Name
		c.Number = x.Number
		c.Options = x.Options
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Option) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Option:
		x.Name = v.GetName()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetValue() *anypb.Any }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Option) Proto_ShallowClone() (c *Option) {
	if x != nil {
		c = new(Option)
		c.Name = x.Name
		c.Value = x.Value
	}
	return
}
