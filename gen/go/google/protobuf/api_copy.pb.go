// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: google/protobuf/api.proto

package apipb

import "google.golang.org/protobuf/types/known/sourcecontextpb"
import "google.golang.org/protobuf/types/known/typepb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Api) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Api:
		x.Name = v.GetName()
		x.Methods = v.GetMethods()
		x.Options = v.GetOptions()
		x.Version = v.GetVersion()
		x.SourceContext = v.GetSourceContext()
		x.Mixins = v.GetMixins()
		x.Syntax = v.GetSyntax()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetMethods() []*Method }); ok {
			x.Methods = v.GetMethods()
		}
		if v, ok := v.(interface{ GetOptions() []*typepb.Option }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface{ GetVersion() string }); ok {
			x.Version = v.GetVersion()
		}
		if v, ok := v.(interface {
			GetSourceContext() *sourcecontextpb.SourceContext
		}); ok {
			x.SourceContext = v.GetSourceContext()
		}
		if v, ok := v.(interface{ GetMixins() []*Mixin }); ok {
			x.Mixins = v.GetMixins()
		}
		if v, ok := v.(interface{ GetSyntax() typepb.Syntax }); ok {
			x.Syntax = v.GetSyntax()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Api) Proto_ShallowClone() (c *Api) {
	if x != nil {
		c = new(Api)
		c.Name = x.Name
		c.Methods = x.Methods
		c.Options = x.Options
		c.Version = x.Version
		c.SourceContext = x.SourceContext
		c.Mixins = x.Mixins
		c.Syntax = x.Syntax
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Method) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Method:
		x.Name = v.GetName()
		x.RequestTypeUrl = v.GetRequestTypeUrl()
		x.RequestStreaming = v.GetRequestStreaming()
		x.ResponseTypeUrl = v.GetResponseTypeUrl()
		x.ResponseStreaming = v.GetResponseStreaming()
		x.Options = v.GetOptions()
		x.Syntax = v.GetSyntax()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetRequestTypeUrl() string }); ok {
			x.RequestTypeUrl = v.GetRequestTypeUrl()
		}
		if v, ok := v.(interface{ GetRequestStreaming() bool }); ok {
			x.RequestStreaming = v.GetRequestStreaming()
		}
		if v, ok := v.(interface{ GetResponseTypeUrl() string }); ok {
			x.ResponseTypeUrl = v.GetResponseTypeUrl()
		}
		if v, ok := v.(interface{ GetResponseStreaming() bool }); ok {
			x.ResponseStreaming = v.GetResponseStreaming()
		}
		if v, ok := v.(interface{ GetOptions() []*typepb.Option }); ok {
			x.Options = v.GetOptions()
		}
		if v, ok := v.(interface{ GetSyntax() typepb.Syntax }); ok {
			x.Syntax = v.GetSyntax()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Method) Proto_ShallowClone() (c *Method) {
	if x != nil {
		c = new(Method)
		c.Name = x.Name
		c.RequestTypeUrl = x.RequestTypeUrl
		c.RequestStreaming = x.RequestStreaming
		c.ResponseTypeUrl = x.ResponseTypeUrl
		c.ResponseStreaming = x.ResponseStreaming
		c.Options = x.Options
		c.Syntax = x.Syntax
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Mixin) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Mixin:
		x.Name = v.GetName()
		x.Root = v.GetRoot()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetRoot() string }); ok {
			x.Root = v.GetRoot()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Mixin) Proto_ShallowClone() (c *Mixin) {
	if x != nil {
		c = new(Mixin)
		c.Name = x.Name
		c.Root = x.Root
	}
	return
}
