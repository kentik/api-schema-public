// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/pathfinder/v202505beta1/pathfinder.proto

package pathfinder

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type CloudProvider int32

const (
	// Invalid value.
	CloudProvider_CLOUD_PROVIDER_UNSPECIFIED CloudProvider = 0
	// Amazon Web Services
	CloudProvider_CLOUD_PROVIDER_AWS CloudProvider = 1
	// Microsoft Azure
	CloudProvider_CLOUD_PROVIDER_AZURE CloudProvider = 2
)

// Enum value maps for CloudProvider.
var (
	CloudProvider_name = map[int32]string{
		0: "CLOUD_PROVIDER_UNSPECIFIED",
		1: "CLOUD_PROVIDER_AWS",
		2: "CLOUD_PROVIDER_AZURE",
	}
	CloudProvider_value = map[string]int32{
		"CLOUD_PROVIDER_UNSPECIFIED": 0,
		"CLOUD_PROVIDER_AWS":         1,
		"CLOUD_PROVIDER_AZURE":       2,
	}
)

func (x CloudProvider) Enum() *CloudProvider {
	p := new(CloudProvider)
	*p = x
	return p
}

func (x CloudProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_enumTypes[0].Descriptor()
}

func (CloudProvider) Type() protoreflect.EnumType {
	return &file_kentik_pathfinder_v202505beta1_pathfinder_proto_enumTypes[0]
}

func (x CloudProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudProvider.Descriptor instead.
func (CloudProvider) EnumDescriptor() ([]byte, []int) {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type EntityType int32

const (
	// Invalid value.
	EntityType_ENTITY_TYPE_UNSPECIFIED EntityType = 0
	// Subnet
	EntityType_ENTITY_TYPE_SUBNET EntityType = 1
	// Instance
	EntityType_ENTITY_TYPE_INSTANCE EntityType = 2
	// Network Interfaces
	EntityType_ENTITY_TYPE_NETWORK_INTERFACE EntityType = 3
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "ENTITY_TYPE_SUBNET",
		2: "ENTITY_TYPE_INSTANCE",
		3: "ENTITY_TYPE_NETWORK_INTERFACE",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED":       0,
		"ENTITY_TYPE_SUBNET":            1,
		"ENTITY_TYPE_INSTANCE":          2,
		"ENTITY_TYPE_NETWORK_INTERFACE": 3,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_enumTypes[1].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_kentik_pathfinder_v202505beta1_pathfinder_proto_enumTypes[1]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescGZIP(), []int{1}
}

type PathElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *PathElement) Reset() {
	*x = PathElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathElement) ProtoMessage() {}

func (x *PathElement) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathElement.ProtoReflect.Descriptor instead.
func (*PathElement) Descriptor() ([]byte, []int) {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescGZIP(), []int{0}
}

func (x *PathElement) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PathElement) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PathElement) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// {{.Name}}
type CreatePathfinderReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudProvider CloudProvider          `protobuf:"varint,1,opt,name=cloud_provider,json=cloudProvider,proto3,enum=kentik.pathfinder.v202505beta1.CloudProvider" json:"cloud_provider,omitempty"`
	Src           string                 `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst           string                 `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	DstPort       string                 `protobuf:"bytes,4,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Protocol      string                 `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	SrcType       EntityType             `protobuf:"varint,6,opt,name=src_type,json=srcType,proto3,enum=kentik.pathfinder.v202505beta1.EntityType" json:"src_type,omitempty"`
	DstType       EntityType             `protobuf:"varint,7,opt,name=dst_type,json=dstType,proto3,enum=kentik.pathfinder.v202505beta1.EntityType" json:"dst_type,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Name          string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreatePathfinderReportRequest) Reset() {
	*x = CreatePathfinderReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePathfinderReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePathfinderReportRequest) ProtoMessage() {}

func (x *CreatePathfinderReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePathfinderReportRequest.ProtoReflect.Descriptor instead.
func (*CreatePathfinderReportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePathfinderReportRequest) GetCloudProvider() CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *CreatePathfinderReportRequest) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *CreatePathfinderReportRequest) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *CreatePathfinderReportRequest) GetDstPort() string {
	if x != nil {
		return x.DstPort
	}
	return ""
}

func (x *CreatePathfinderReportRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *CreatePathfinderReportRequest) GetSrcType() EntityType {
	if x != nil {
		return x.SrcType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *CreatePathfinderReportRequest) GetDstType() EntityType {
	if x != nil {
		return x.DstType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *CreatePathfinderReportRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreatePathfinderReportRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CreatePathfinderReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// {{.Name}}
type CreatePathfinderReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reachable         string         `protobuf:"bytes,1,opt,name=reachable,proto3" json:"reachable,omitempty"`
	ReturnReachable   string         `protobuf:"bytes,2,opt,name=return_reachable,json=returnReachable,proto3" json:"return_reachable,omitempty"`
	QueryStatus       string         `protobuf:"bytes,3,opt,name=query_status,json=queryStatus,proto3" json:"query_status,omitempty"`
	ReportUrl         string         `protobuf:"bytes,4,opt,name=report_url,json=reportUrl,proto3" json:"report_url,omitempty"`
	Paths             []*PathElement `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
	ReturnPaths       []*PathElement `protobuf:"bytes,6,rep,name=return_paths,json=returnPaths,proto3" json:"return_paths,omitempty"`
	LastMetadataFetch string         `protobuf:"bytes,7,opt,name=last_metadata_fetch,json=lastMetadataFetch,proto3" json:"last_metadata_fetch,omitempty"`
	Summary           string         `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *CreatePathfinderReportResponse) Reset() {
	*x = CreatePathfinderReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePathfinderReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePathfinderReportResponse) ProtoMessage() {}

func (x *CreatePathfinderReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePathfinderReportResponse.ProtoReflect.Descriptor instead.
func (*CreatePathfinderReportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePathfinderReportResponse) GetReachable() string {
	if x != nil {
		return x.Reachable
	}
	return ""
}

func (x *CreatePathfinderReportResponse) GetReturnReachable() string {
	if x != nil {
		return x.ReturnReachable
	}
	return ""
}

func (x *CreatePathfinderReportResponse) GetQueryStatus() string {
	if x != nil {
		return x.QueryStatus
	}
	return ""
}

func (x *CreatePathfinderReportResponse) GetReportUrl() string {
	if x != nil {
		return x.ReportUrl
	}
	return ""
}

func (x *CreatePathfinderReportResponse) GetPaths() []*PathElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CreatePathfinderReportResponse) GetReturnPaths() []*PathElement {
	if x != nil {
		return x.ReturnPaths
	}
	return nil
}

func (x *CreatePathfinderReportResponse) GetLastMetadataFetch() string {
	if x != nil {
		return x.LastMetadataFetch
	}
	return ""
}

func (x *CreatePathfinderReportResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

var File_kentik_pathfinder_v202505beta1_pathfinder_proto protoreflect.FileDescriptor

var file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4f, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0xbf, 0x06, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x25, 0x92, 0x41, 0x1f,
	0x32, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x08, 0x32, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x12, 0x25, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x12, 0x32, 0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50,
	0x6f, 0x72, 0x74, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x5e, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a,
	0x08, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x32, 0x17, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x4a, 0x92, 0x41, 0x44, 0x32, 0x42, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x48, 0x92, 0x41, 0x42, 0x32, 0x40, 0x45,
	0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54,
	0x43, 0x29, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x0d, 0x32, 0x0b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x06, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x36, 0x32,
	0x34, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92,
	0x41, 0x36, 0x32, 0x34, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x32, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x41, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x76,
	0x69, 0x65, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x70, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x34, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x54, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x62, 0x32, 0x60, 0x54, 0x68, 0x65,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x70,
	0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2a, 0x61, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x03, 0x32, 0xae, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x68,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xe3, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x92,
	0x41, 0x81, 0x01, 0x12, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x50, 0x61,
	0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x1a, 0x4a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x74, 0x68, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x2a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61,
	0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x2e, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0xea, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x90, 0xd8, 0x02, 0x03, 0x42, 0x94, 0x10, 0x5a, 0x54, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x92, 0x41, 0xba, 0x0f, 0x12, 0xec, 0x0d, 0x0a, 0x15, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x20, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x12,
	0xfd, 0x0c, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65,
	0x20, 0x2a, 0x2a, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x41, 0x50,
	0x49, 0x2a, 0x2a, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73, 0x20, 0x2a, 0x2a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2a,
	0x2a, 0x2c, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x74, 0x6f, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x20, 0x2a, 0x2a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2a, 0x2a, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6c, 0x69, 0x6b,
	0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x0a, 0x23, 0x23, 0x23, 0x20, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x27,
	0x73, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x76, 0x61, 0x72, 0x79,
	0x20, 0x62, 0x79, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x0a,
	0x2a, 0x20, 0x5b, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x20, 0x57, 0x65, 0x62, 0x20, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30,
	0x2f, 0x42, 0x64, 0x30, 0x36, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x20, 0x28, 0x41, 0x57, 0x53, 0x29,
	0x0a, 0x2a, 0x20, 0x5b, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x42, 0x64,
	0x30, 0x38, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x0a, 0x0a, 0x23, 0x23, 0x23, 0x20, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x41, 0x57, 0x53, 0x2c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x3a, 0x0a, 0x2a, 0x20, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x0a, 0x2a, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x0a, 0x2a, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x3a, 0x0a, 0x2a, 0x20, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x0a, 0x23, 0x23,
	0x23, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x0a, 0x54,
	0x6f, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73, 0x20, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x20, 0x61, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x2a, 0x2a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2a, 0x2a, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20,
	0x5b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x4e, 0x61, 0x30, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x4e, 0x61,
	0x30, 0x30, 0x2d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x29, 0x29, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28, 0x41,
	0x57, 0x53, 0x20, 0x6f, 0x72, 0x20, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x29, 0x2e, 0x0a, 0x4f, 0x6e,
	0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x2c, 0x20, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x6c, 0x79, 0x20, 0x70, 0x75, 0x6c, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x20, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x3a, 0x0a, 0x2a, 0x20, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x77, 0x6f,
	0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
	0x41, 0x57, 0x53, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x0a, 0x2a, 0x20, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x4e, 0x41, 0x43, 0x4c, 0x2f, 0x53, 0x47, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x6c, 0x79, 0x20, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x0a, 0x2a, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x23, 0x23, 0x23,
	0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x20, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x72, 0x65,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x2c, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x31, 0x35, 0x2d, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x2e, 0x22,
	0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x0c, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48,
	0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48,
	0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x44, 0x0a, 0x1f, 0x4b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x20, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x4e, 0x61, 0x30, 0x35, 0x2e, 0x68, 0x74, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescOnce sync.Once
	file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescData = file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDesc
)

func file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescGZIP() []byte {
	file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescOnce.Do(func() {
		file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescData)
	})
	return file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDescData
}

var file_kentik_pathfinder_v202505beta1_pathfinder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kentik_pathfinder_v202505beta1_pathfinder_proto_goTypes = []interface{}{
	(CloudProvider)(0),                     // 0: kentik.pathfinder.v202505beta1.CloudProvider
	(EntityType)(0),                        // 1: kentik.pathfinder.v202505beta1.EntityType
	(*PathElement)(nil),                    // 2: kentik.pathfinder.v202505beta1.PathElement
	(*CreatePathfinderReportRequest)(nil),  // 3: kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest
	(*CreatePathfinderReportResponse)(nil), // 4: kentik.pathfinder.v202505beta1.CreatePathfinderReportResponse
	(*timestamppb.Timestamp)(nil),          // 5: google.protobuf.Timestamp
}
var file_kentik_pathfinder_v202505beta1_pathfinder_proto_depIdxs = []int32{
	0, // 0: kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest.cloud_provider:type_name -> kentik.pathfinder.v202505beta1.CloudProvider
	1, // 1: kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest.src_type:type_name -> kentik.pathfinder.v202505beta1.EntityType
	1, // 2: kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest.dst_type:type_name -> kentik.pathfinder.v202505beta1.EntityType
	5, // 3: kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest.start_time:type_name -> google.protobuf.Timestamp
	5, // 4: kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest.end_time:type_name -> google.protobuf.Timestamp
	2, // 5: kentik.pathfinder.v202505beta1.CreatePathfinderReportResponse.paths:type_name -> kentik.pathfinder.v202505beta1.PathElement
	2, // 6: kentik.pathfinder.v202505beta1.CreatePathfinderReportResponse.return_paths:type_name -> kentik.pathfinder.v202505beta1.PathElement
	3, // 7: kentik.pathfinder.v202505beta1.PathfinderAdminService.CreatePathfinderReport:input_type -> kentik.pathfinder.v202505beta1.CreatePathfinderReportRequest
	4, // 8: kentik.pathfinder.v202505beta1.PathfinderAdminService.CreatePathfinderReport:output_type -> kentik.pathfinder.v202505beta1.CreatePathfinderReportResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_kentik_pathfinder_v202505beta1_pathfinder_proto_init() }
func file_kentik_pathfinder_v202505beta1_pathfinder_proto_init() {
	if File_kentik_pathfinder_v202505beta1_pathfinder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePathfinderReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePathfinderReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_pathfinder_v202505beta1_pathfinder_proto_goTypes,
		DependencyIndexes: file_kentik_pathfinder_v202505beta1_pathfinder_proto_depIdxs,
		EnumInfos:         file_kentik_pathfinder_v202505beta1_pathfinder_proto_enumTypes,
		MessageInfos:      file_kentik_pathfinder_v202505beta1_pathfinder_proto_msgTypes,
	}.Build()
	File_kentik_pathfinder_v202505beta1_pathfinder_proto = out.File
	file_kentik_pathfinder_v202505beta1_pathfinder_proto_rawDesc = nil
	file_kentik_pathfinder_v202505beta1_pathfinder_proto_goTypes = nil
	file_kentik_pathfinder_v202505beta1_pathfinder_proto_depIdxs = nil
}
