// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/event_view_model/v202204alpha1/event_view_model.proto

package event_view_model

import "google.golang.org/protobuf/types/known/structpb"
import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AlarmEvent) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AlarmEvent:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AlarmEvent) Proto_ShallowClone() (c *AlarmEvent) {
	if x != nil {
		c = new(AlarmEvent)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MitigationEvent) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MitigationEvent:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MitigationEvent) Proto_ShallowClone() (c *MitigationEvent) {
	if x != nil {
		c = new(MitigationEvent)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *InsightEvent) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *InsightEvent:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *InsightEvent) Proto_ShallowClone() (c *InsightEvent) {
	if x != nil {
		c = new(InsightEvent)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetViewModelRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetViewModelRequest:
		x.Event = v.GetEvent()
	default:
		if v, ok := v.(interface {
			GetEvent() isGetViewModelRequest_Event
		}); ok {
			x.Event = v.GetEvent()
		} else {
			func() {
				if v, ok := v.(interface{ GetAlarm() *AlarmEvent }); ok {
					var defaultValue *AlarmEvent
					if v := v.GetAlarm(); v != defaultValue {
						x.Event = &GetViewModelRequest_Alarm{Alarm: v}
						return
					}
				}
				if v, ok := v.(interface{ GetMitigation() *MitigationEvent }); ok {
					var defaultValue *MitigationEvent
					if v := v.GetMitigation(); v != defaultValue {
						x.Event = &GetViewModelRequest_Mitigation{Mitigation: v}
						return
					}
				}
				if v, ok := v.(interface{ GetInsight() *InsightEvent }); ok {
					var defaultValue *InsightEvent
					if v := v.GetInsight(); v != defaultValue {
						x.Event = &GetViewModelRequest_Insight{Insight: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetViewModelRequest) Proto_ShallowClone() (c *GetViewModelRequest) {
	if x != nil {
		c = new(GetViewModelRequest)
		c.Event = x.Event
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EventViewDetail) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EventViewDetail:
		x.Name = v.GetName()
		x.Label = v.GetLabel()
		x.Tag = v.GetTag()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetLabel() string }); ok {
			x.Label = v.GetLabel()
		}
		if v, ok := v.(interface{ GetTag() string }); ok {
			x.Tag = v.GetTag()
		}
		if v, ok := v.(interface{ GetValue() *structpb.Value }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EventViewDetail) Proto_ShallowClone() (c *EventViewDetail) {
	if x != nil {
		c = new(EventViewDetail)
		c.Name = x.Name
		c.Label = x.Label
		c.Tag = x.Tag
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *EventViewModel) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *EventViewModel:
		x.Type = v.GetType()
		x.Group = v.GetGroup()
		x.Description = v.GetDescription()
		x.IsActive = v.GetIsActive()
		x.StartTime = v.GetStartTime()
		x.EndTime = v.GetEndTime()
		x.CurrentState = v.GetCurrentState()
		x.PreviousState = v.GetPreviousState()
		x.Importance = v.GetImportance()
		x.Details = v.GetDetails()
	default:
		if v, ok := v.(interface{ GetType() EventViewType }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetGroup() string }); ok {
			x.Group = v.GetGroup()
		}
		if v, ok := v.(interface{ GetDescription() string }); ok {
			x.Description = v.GetDescription()
		}
		if v, ok := v.(interface{ GetIsActive() bool }); ok {
			x.IsActive = v.GetIsActive()
		}
		if v, ok := v.(interface{ GetStartTime() *timestamppb.Timestamp }); ok {
			x.StartTime = v.GetStartTime()
		}
		if v, ok := v.(interface{ GetEndTime() *timestamppb.Timestamp }); ok {
			x.EndTime = v.GetEndTime()
		}
		if v, ok := v.(interface{ GetCurrentState() string }); ok {
			x.CurrentState = v.GetCurrentState()
		}
		if v, ok := v.(interface{ GetPreviousState() string }); ok {
			x.PreviousState = v.GetPreviousState()
		}
		if v, ok := v.(interface{ GetImportance() EventViewImportance }); ok {
			x.Importance = v.GetImportance()
		}
		if v, ok := v.(interface{ GetDetails() []*EventViewDetail }); ok {
			x.Details = v.GetDetails()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *EventViewModel) Proto_ShallowClone() (c *EventViewModel) {
	if x != nil {
		c = new(EventViewModel)
		c.Type = x.Type
		c.Group = x.Group
		c.Description = x.Description
		c.IsActive = x.IsActive
		c.StartTime = x.StartTime
		c.EndTime = x.EndTime
		c.CurrentState = x.CurrentState
		c.PreviousState = x.PreviousState
		c.Importance = x.Importance
		c.Details = x.Details
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetViewModelResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetViewModelResponse:
		x.Model = v.GetModel()
	default:
		if v, ok := v.(interface{ GetModel() *EventViewModel }); ok {
			x.Model = v.GetModel()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetViewModelResponse) Proto_ShallowClone() (c *GetViewModelResponse) {
	if x != nil {
		c = new(GetViewModelResponse)
		c.Model = x.Model
	}
	return
}
