// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/audit/v202208beta2/audit.proto

package audit

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RequestProtocol int32

const (
	RequestProtocol_REQUEST_PROTOCOL_UNSPECIFIED RequestProtocol = 0
	RequestProtocol_REQUEST_PROTOCOL_REST        RequestProtocol = 1
	RequestProtocol_REQUEST_PROTOCOL_GRPC        RequestProtocol = 2
)

// Enum value maps for RequestProtocol.
var (
	RequestProtocol_name = map[int32]string{
		0: "REQUEST_PROTOCOL_UNSPECIFIED",
		1: "REQUEST_PROTOCOL_REST",
		2: "REQUEST_PROTOCOL_GRPC",
	}
	RequestProtocol_value = map[string]int32{
		"REQUEST_PROTOCOL_UNSPECIFIED": 0,
		"REQUEST_PROTOCOL_REST":        1,
		"REQUEST_PROTOCOL_GRPC":        2,
	}
)

func (x RequestProtocol) Enum() *RequestProtocol {
	p := new(RequestProtocol)
	*p = x
	return p
}

func (x RequestProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_audit_v202208beta2_audit_proto_enumTypes[0].Descriptor()
}

func (RequestProtocol) Type() protoreflect.EnumType {
	return &file_kentik_audit_v202208beta2_audit_proto_enumTypes[0]
}

func (x RequestProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestProtocol.Descriptor instead.
func (RequestProtocol) EnumDescriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{0}
}

// RequestEvent describes an event generated by an REST or a gRPC request
type RequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMethod string `protobuf:"bytes,1,opt,name=request_method,json=requestMethod,proto3" json:"request_method,omitempty"`
	RequestPath   string `protobuf:"bytes,2,opt,name=request_path,json=requestPath,proto3" json:"request_path,omitempty"`
	// IP address of the client that made the request. Example: 75.2.60.5
	ClientAddress    string            `protobuf:"bytes,3,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	ResponseCode     uint32            `protobuf:"varint,4,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	RequestMetadata  map[string]string `protobuf:"bytes,5,rep,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResponseMetadata map[string]string `protobuf:"bytes,6,rep,name=response_metadata,json=responseMetadata,proto3" json:"response_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestProtocol  RequestProtocol   `protobuf:"varint,7,opt,name=request_protocol,json=requestProtocol,proto3,enum=kentik.audit.v202208beta2.RequestProtocol" json:"request_protocol,omitempty"`
}

func (x *RequestEvent) Reset() {
	*x = RequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEvent) ProtoMessage() {}

func (x *RequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEvent.ProtoReflect.Descriptor instead.
func (*RequestEvent) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{0}
}

func (x *RequestEvent) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *RequestEvent) GetRequestPath() string {
	if x != nil {
		return x.RequestPath
	}
	return ""
}

func (x *RequestEvent) GetClientAddress() string {
	if x != nil {
		return x.ClientAddress
	}
	return ""
}

func (x *RequestEvent) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *RequestEvent) GetRequestMetadata() map[string]string {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *RequestEvent) GetResponseMetadata() map[string]string {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

func (x *RequestEvent) GetRequestProtocol() RequestProtocol {
	if x != nil {
		return x.RequestProtocol
	}
	return RequestProtocol_REQUEST_PROTOCOL_UNSPECIFIED
}

type AuditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the user (uid) that produced the event
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// ID of the company (cid) that produced the event
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// Name of the service that generated the event.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Unique identifier of the event. EventID and ServiceName are used to identify an event uniquely
	EventId string `protobuf:"bytes,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// When the event was produced. Required.
	Ctime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// Event payload as a JSON string
	EventPayload string `protobuf:"bytes,6,opt,name=event_payload,json=eventPayload,proto3" json:"event_payload,omitempty"`
	// Idenfier for events generated by the same root transaction. For instrumented services, this is usually the trace ID
	CorrelationId string `protobuf:"bytes,7,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// ID of the event in the database (read-only)
	Id uint64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to EventType:
	//	*AuditEvent_Request
	EventType isAuditEvent_EventType `protobuf_oneof:"event_type"`
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{1}
}

func (x *AuditEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuditEvent) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *AuditEvent) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AuditEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AuditEvent) GetCtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *AuditEvent) GetEventPayload() string {
	if x != nil {
		return x.EventPayload
	}
	return ""
}

func (x *AuditEvent) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AuditEvent) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *AuditEvent) GetEventType() isAuditEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *AuditEvent) GetRequest() *RequestEvent {
	if x, ok := x.GetEventType().(*AuditEvent_Request); ok {
		return x.Request
	}
	return nil
}

type isAuditEvent_EventType interface {
	isAuditEvent_EventType()
}

type AuditEvent_Request struct {
	Request *RequestEvent `protobuf:"bytes,20,opt,name=request,proto3,oneof"`
}

func (*AuditEvent_Request) isAuditEvent_EventType() {}

type CreateAuditEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*AuditEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CreateAuditEventsRequest) Reset() {
	*x = CreateAuditEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuditEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuditEventsRequest) ProtoMessage() {}

func (x *CreateAuditEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuditEventsRequest.ProtoReflect.Descriptor instead.
func (*CreateAuditEventsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAuditEventsRequest) GetEvents() []*AuditEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CreateAuditEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAuditEventsResponse) Reset() {
	*x = CreateAuditEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuditEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuditEventsResponse) ProtoMessage() {}

func (x *CreateAuditEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuditEventsResponse.ProtoReflect.Descriptor instead.
func (*CreateAuditEventsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{3}
}

type ListAuditEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Offset    uint64                 `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64                 `protobuf:"varint,16,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListAuditEventsRequest) Reset() {
	*x = ListAuditEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditEventsRequest) ProtoMessage() {}

func (x *ListAuditEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditEventsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditEventsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{4}
}

func (x *ListAuditEventsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListAuditEventsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListAuditEventsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAuditEventsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListAuditEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*AuditEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ListAuditEventsResponse) Reset() {
	*x = ListAuditEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditEventsResponse) ProtoMessage() {}

func (x *ListAuditEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditEventsResponse.ProtoReflect.Descriptor instead.
func (*ListAuditEventsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{5}
}

func (x *ListAuditEventsResponse) GetEvents() []*AuditEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetAuditEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ctime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ctime,proto3" json:"ctime,omitempty"`
}

func (x *GetAuditEventRequest) Reset() {
	*x = GetAuditEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditEventRequest) ProtoMessage() {}

func (x *GetAuditEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditEventRequest.ProtoReflect.Descriptor instead.
func (*GetAuditEventRequest) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{6}
}

func (x *GetAuditEventRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAuditEventRequest) GetCtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Ctime
	}
	return nil
}

type GetAuditEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *AuditEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *GetAuditEventResponse) Reset() {
	*x = GetAuditEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditEventResponse) ProtoMessage() {}

func (x *GetAuditEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_audit_v202208beta2_audit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditEventResponse.ProtoReflect.Descriptor instead.
func (*GetAuditEventResponse) Descriptor() ([]byte, []int) {
	return file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP(), []int{7}
}

func (x *GetAuditEventResponse) GetEvent() *AuditEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

var File_kentik_audit_v202208beta2_audit_proto protoreflect.FileDescriptor

var file_kentik_audit_v202208beta2_audit_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x67,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x42, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe3, 0x02, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0x92, 0x41, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x92,
	0x41, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x69, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x52, 0x50,
	0x43, 0x10, 0x02, 0x32, 0xb9, 0x06, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x91, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x92, 0x41, 0x59, 0x12, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x1a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x65, 0x20, 0x6d,
	0x6f, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0xf2, 0xd7, 0x02, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xf2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41, 0x45, 0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x1a, 0x1f, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x2a, 0x0e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0xf2, 0xd7, 0x02,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xf8, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x83, 0x01, 0x92, 0x41, 0x43, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6e,
	0x20, 0x41, 0x75, 0x64, 0x69, 0x74, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x2a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0xf2, 0xd7, 0x02, 0x0a, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12,
	0x27, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x7d, 0x1a, 0x25, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0xea, 0xd7, 0x02, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x42,
	0xd8, 0x02, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x92, 0x41, 0x8f, 0x02, 0x12, 0x51, 0x0a, 0x09, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x20, 0x41, 0x50, 0x49, 0x22, 0x37, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x32, 0x0b, 0x32, 0x30, 0x32, 0x32, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x1b, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kentik_audit_v202208beta2_audit_proto_rawDescOnce sync.Once
	file_kentik_audit_v202208beta2_audit_proto_rawDescData = file_kentik_audit_v202208beta2_audit_proto_rawDesc
)

func file_kentik_audit_v202208beta2_audit_proto_rawDescGZIP() []byte {
	file_kentik_audit_v202208beta2_audit_proto_rawDescOnce.Do(func() {
		file_kentik_audit_v202208beta2_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_audit_v202208beta2_audit_proto_rawDescData)
	})
	return file_kentik_audit_v202208beta2_audit_proto_rawDescData
}

var file_kentik_audit_v202208beta2_audit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_audit_v202208beta2_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_kentik_audit_v202208beta2_audit_proto_goTypes = []interface{}{
	(RequestProtocol)(0),              // 0: kentik.audit.v202208beta2.RequestProtocol
	(*RequestEvent)(nil),              // 1: kentik.audit.v202208beta2.RequestEvent
	(*AuditEvent)(nil),                // 2: kentik.audit.v202208beta2.AuditEvent
	(*CreateAuditEventsRequest)(nil),  // 3: kentik.audit.v202208beta2.CreateAuditEventsRequest
	(*CreateAuditEventsResponse)(nil), // 4: kentik.audit.v202208beta2.CreateAuditEventsResponse
	(*ListAuditEventsRequest)(nil),    // 5: kentik.audit.v202208beta2.ListAuditEventsRequest
	(*ListAuditEventsResponse)(nil),   // 6: kentik.audit.v202208beta2.ListAuditEventsResponse
	(*GetAuditEventRequest)(nil),      // 7: kentik.audit.v202208beta2.GetAuditEventRequest
	(*GetAuditEventResponse)(nil),     // 8: kentik.audit.v202208beta2.GetAuditEventResponse
	nil,                               // 9: kentik.audit.v202208beta2.RequestEvent.RequestMetadataEntry
	nil,                               // 10: kentik.audit.v202208beta2.RequestEvent.ResponseMetadataEntry
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
}
var file_kentik_audit_v202208beta2_audit_proto_depIdxs = []int32{
	9,  // 0: kentik.audit.v202208beta2.RequestEvent.request_metadata:type_name -> kentik.audit.v202208beta2.RequestEvent.RequestMetadataEntry
	10, // 1: kentik.audit.v202208beta2.RequestEvent.response_metadata:type_name -> kentik.audit.v202208beta2.RequestEvent.ResponseMetadataEntry
	0,  // 2: kentik.audit.v202208beta2.RequestEvent.request_protocol:type_name -> kentik.audit.v202208beta2.RequestProtocol
	11, // 3: kentik.audit.v202208beta2.AuditEvent.ctime:type_name -> google.protobuf.Timestamp
	1,  // 4: kentik.audit.v202208beta2.AuditEvent.request:type_name -> kentik.audit.v202208beta2.RequestEvent
	2,  // 5: kentik.audit.v202208beta2.CreateAuditEventsRequest.events:type_name -> kentik.audit.v202208beta2.AuditEvent
	11, // 6: kentik.audit.v202208beta2.ListAuditEventsRequest.start_time:type_name -> google.protobuf.Timestamp
	11, // 7: kentik.audit.v202208beta2.ListAuditEventsRequest.end_time:type_name -> google.protobuf.Timestamp
	2,  // 8: kentik.audit.v202208beta2.ListAuditEventsResponse.events:type_name -> kentik.audit.v202208beta2.AuditEvent
	11, // 9: kentik.audit.v202208beta2.GetAuditEventRequest.ctime:type_name -> google.protobuf.Timestamp
	2,  // 10: kentik.audit.v202208beta2.GetAuditEventResponse.event:type_name -> kentik.audit.v202208beta2.AuditEvent
	3,  // 11: kentik.audit.v202208beta2.AuditService.CreateAuditEvents:input_type -> kentik.audit.v202208beta2.CreateAuditEventsRequest
	5,  // 12: kentik.audit.v202208beta2.AuditService.ListAuditEvents:input_type -> kentik.audit.v202208beta2.ListAuditEventsRequest
	7,  // 13: kentik.audit.v202208beta2.AuditService.GetAuditEvent:input_type -> kentik.audit.v202208beta2.GetAuditEventRequest
	4,  // 14: kentik.audit.v202208beta2.AuditService.CreateAuditEvents:output_type -> kentik.audit.v202208beta2.CreateAuditEventsResponse
	6,  // 15: kentik.audit.v202208beta2.AuditService.ListAuditEvents:output_type -> kentik.audit.v202208beta2.ListAuditEventsResponse
	8,  // 16: kentik.audit.v202208beta2.AuditService.GetAuditEvent:output_type -> kentik.audit.v202208beta2.GetAuditEventResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_kentik_audit_v202208beta2_audit_proto_init() }
func file_kentik_audit_v202208beta2_audit_proto_init() {
	if File_kentik_audit_v202208beta2_audit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuditEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuditEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_audit_v202208beta2_audit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_audit_v202208beta2_audit_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AuditEvent_Request)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_audit_v202208beta2_audit_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_audit_v202208beta2_audit_proto_goTypes,
		DependencyIndexes: file_kentik_audit_v202208beta2_audit_proto_depIdxs,
		EnumInfos:         file_kentik_audit_v202208beta2_audit_proto_enumTypes,
		MessageInfos:      file_kentik_audit_v202208beta2_audit_proto_msgTypes,
	}.Build()
	File_kentik_audit_v202208beta2_audit_proto = out.File
	file_kentik_audit_v202208beta2_audit_proto_rawDesc = nil
	file_kentik_audit_v202208beta2_audit_proto_goTypes = nil
	file_kentik_audit_v202208beta2_audit_proto_depIdxs = nil
}
