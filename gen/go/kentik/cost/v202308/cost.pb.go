// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/cost/v202308/cost.proto

package cost

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_STATUS_INCOMPLETE  Status = 1
	Status_STATUS_COMPLETE    Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_INCOMPLETE",
		2: "STATUS_COMPLETE",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_INCOMPLETE":  1,
		"STATUS_COMPLETE":    2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_cost_v202308_cost_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_kentik_cost_v202308_cost_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type CostProviderSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                                  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Status                                Status  `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.cost.v202308.Status" json:"status,omitempty"`
	TotalCost                             float32 `protobuf:"fixed32,3,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	TotalCostVariation                    string  `protobuf:"bytes,4,opt,name=total_cost_variation,json=totalCostVariation,proto3" json:"total_cost_variation,omitempty"`
	TotalCostGroupAdditionalCost          float32 `protobuf:"fixed32,5,opt,name=total_cost_group_additional_cost,json=totalCostGroupAdditionalCost,proto3" json:"total_cost_group_additional_cost,omitempty"`
	TotalCostGroupAdditionalInterfaceCost float32 `protobuf:"fixed32,6,opt,name=total_cost_group_additional_interface_cost,json=totalCostGroupAdditionalInterfaceCost,proto3" json:"total_cost_group_additional_interface_cost,omitempty"`
	Currency                              string  `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CostPerMbps                           float32 `protobuf:"fixed32,8,opt,name=cost_per_mbps,json=costPerMbps,proto3" json:"cost_per_mbps,omitempty"`
	CostPerMbpsVariation                  string  `protobuf:"bytes,9,opt,name=cost_per_mbps_variation,json=costPerMbpsVariation,proto3" json:"cost_per_mbps_variation,omitempty"`
	ProviderName                          string  `protobuf:"bytes,10,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	CostGroupName                         string  `protobuf:"bytes,11,opt,name=cost_group_name,json=costGroupName,proto3" json:"cost_group_name,omitempty"`
	CostGroupConnType                     string  `protobuf:"bytes,12,opt,name=cost_group_conn_type,json=costGroupConnType,proto3" json:"cost_group_conn_type,omitempty"`
	SiteName                              string  `protobuf:"bytes,13,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	SiteMarket                            string  `protobuf:"bytes,14,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
	IngressTrafficMbps                    float32 `protobuf:"fixed32,15,opt,name=ingress_traffic_mbps,json=ingressTrafficMbps,proto3" json:"ingress_traffic_mbps,omitempty"`
	IngressTrafficVariation               string  `protobuf:"bytes,16,opt,name=ingress_traffic_variation,json=ingressTrafficVariation,proto3" json:"ingress_traffic_variation,omitempty"`
	EgressTrafficMbps                     float32 `protobuf:"fixed32,17,opt,name=egress_traffic_mbps,json=egressTrafficMbps,proto3" json:"egress_traffic_mbps,omitempty"`
	EgressTrafficVariation                string  `protobuf:"bytes,18,opt,name=egress_traffic_variation,json=egressTrafficVariation,proto3" json:"egress_traffic_variation,omitempty"`
}

func (x *CostProviderSummary) Reset() {
	*x = CostProviderSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostProviderSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostProviderSummary) ProtoMessage() {}

func (x *CostProviderSummary) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostProviderSummary.ProtoReflect.Descriptor instead.
func (*CostProviderSummary) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{0}
}

func (x *CostProviderSummary) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CostProviderSummary) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *CostProviderSummary) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *CostProviderSummary) GetTotalCostVariation() string {
	if x != nil {
		return x.TotalCostVariation
	}
	return ""
}

func (x *CostProviderSummary) GetTotalCostGroupAdditionalCost() float32 {
	if x != nil {
		return x.TotalCostGroupAdditionalCost
	}
	return 0
}

func (x *CostProviderSummary) GetTotalCostGroupAdditionalInterfaceCost() float32 {
	if x != nil {
		return x.TotalCostGroupAdditionalInterfaceCost
	}
	return 0
}

func (x *CostProviderSummary) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CostProviderSummary) GetCostPerMbps() float32 {
	if x != nil {
		return x.CostPerMbps
	}
	return 0
}

func (x *CostProviderSummary) GetCostPerMbpsVariation() string {
	if x != nil {
		return x.CostPerMbpsVariation
	}
	return ""
}

func (x *CostProviderSummary) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CostProviderSummary) GetCostGroupName() string {
	if x != nil {
		return x.CostGroupName
	}
	return ""
}

func (x *CostProviderSummary) GetCostGroupConnType() string {
	if x != nil {
		return x.CostGroupConnType
	}
	return ""
}

func (x *CostProviderSummary) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *CostProviderSummary) GetSiteMarket() string {
	if x != nil {
		return x.SiteMarket
	}
	return ""
}

func (x *CostProviderSummary) GetIngressTrafficMbps() float32 {
	if x != nil {
		return x.IngressTrafficMbps
	}
	return 0
}

func (x *CostProviderSummary) GetIngressTrafficVariation() string {
	if x != nil {
		return x.IngressTrafficVariation
	}
	return ""
}

func (x *CostProviderSummary) GetEgressTrafficMbps() float32 {
	if x != nil {
		return x.EgressTrafficMbps
	}
	return 0
}

func (x *CostProviderSummary) GetEgressTrafficVariation() string {
	if x != nil {
		return x.EgressTrafficVariation
	}
	return ""
}

// {{.Name}}
type CostProviderConcise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CostProviderConcise) Reset() {
	*x = CostProviderConcise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostProviderConcise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostProviderConcise) ProtoMessage() {}

func (x *CostProviderConcise) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostProviderConcise.ProtoReflect.Descriptor instead.
func (*CostProviderConcise) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{1}
}

func (x *CostProviderConcise) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostProviderConcise) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// {{.Name}}
type ListCostProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCostProvidersRequest) Reset() {
	*x = ListCostProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostProvidersRequest) ProtoMessage() {}

func (x *ListCostProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostProvidersRequest.ProtoReflect.Descriptor instead.
func (*ListCostProvidersRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{2}
}

// {{.Name}}
type ListCostProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers    []*CostProviderConcise `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	InvalidCount uint32                 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListCostProvidersResponse) Reset() {
	*x = ListCostProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostProvidersResponse) ProtoMessage() {}

func (x *ListCostProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostProvidersResponse.ProtoReflect.Descriptor instead.
func (*ListCostProvidersResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{3}
}

func (x *ListCostProvidersResponse) GetProviders() []*CostProviderConcise {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *ListCostProvidersResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type ListCostProviderSummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ListCostProviderSummariesRequest) Reset() {
	*x = ListCostProviderSummariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostProviderSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostProviderSummariesRequest) ProtoMessage() {}

func (x *ListCostProviderSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostProviderSummariesRequest.ProtoReflect.Descriptor instead.
func (*ListCostProviderSummariesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{4}
}

func (x *ListCostProviderSummariesRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// {{.Name}}
type ListCostProviderSummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers    []*CostProviderSummary `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	InvalidCount uint32                 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListCostProviderSummariesResponse) Reset() {
	*x = ListCostProviderSummariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostProviderSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostProviderSummariesResponse) ProtoMessage() {}

func (x *ListCostProviderSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostProviderSummariesResponse.ProtoReflect.Descriptor instead.
func (*ListCostProviderSummariesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{5}
}

func (x *ListCostProviderSummariesResponse) GetProviders() []*CostProviderSummary {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *ListCostProviderSummariesResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetCostProviderSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetCostProviderSummaryRequest) Reset() {
	*x = GetCostProviderSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostProviderSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostProviderSummaryRequest) ProtoMessage() {}

func (x *GetCostProviderSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostProviderSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetCostProviderSummaryRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{6}
}

func (x *GetCostProviderSummaryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCostProviderSummaryRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// {{.Name}}
type GetCostProviderSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers    []*CostProviderSummary `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	InvalidCount uint32                 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *GetCostProviderSummaryResponse) Reset() {
	*x = GetCostProviderSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cost_v202308_cost_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostProviderSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostProviderSummaryResponse) ProtoMessage() {}

func (x *GetCostProviderSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cost_v202308_cost_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostProviderSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetCostProviderSummaryResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cost_v202308_cost_proto_rawDescGZIP(), []int{7}
}

func (x *GetCostProviderSummaryResponse) GetProviders() []*CostProviderSummary {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *GetCostProviderSummaryResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

var File_kentik_cost_v202308_cost_proto protoreflect.FileDescriptor

var file_kentik_cost_v202308_cost_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x38, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x38, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x10, 0x0a, 0x13, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x44, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d,
	0x32, 0x2b, 0x44, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x20, 0x28, 0x59, 0x59, 0x59, 0x59, 0x2d, 0x4d, 0x4d, 0x29, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x32, 0x85, 0x01, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x20, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x32, 0x1f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x93, 0x01,
	0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41,
	0x5e, 0x32, 0x5c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x20, 0x28, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x76, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x29, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x3a,
	0x92, 0x41, 0x37, 0x32, 0x35, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x2a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x44, 0x92,
	0x41, 0x41, 0x32, 0x3f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41,
	0x3f, 0x32, 0x3d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x28, 0x49, 0x53, 0x4f,
	0x20, 0x34, 0x32, 0x31, 0x37, 0x29, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x63, 0x6f, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x65, 0x0a, 0x0d, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x6d, 0x62, 0x70, 0x73, 0x20, 0x28, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20, 0x62,
	0x69, 0x74, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x29, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x62, 0x70,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d,
	0x62, 0x70, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x61, 0x32, 0x5f, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x70,
	0x65, 0x72, 0x20, 0x6d, 0x62, 0x70, 0x73, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x20, 0x76, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x29, 0x52, 0x14, 0x63, 0x6f, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x4d, 0x62, 0x70, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x43, 0x6f, 0x73,
	0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x65, 0x0a, 0x14, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x32, 0x2f, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32,
	0x1e, 0x53, 0x69, 0x74, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0x92, 0x41, 0x22, 0x32, 0x20, 0x53, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x7a, 0x0a, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x6d, 0x62, 0x70, 0x73, 0x20, 0x28, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x62, 0x70, 0x73, 0x12, 0xa2, 0x01,
	0x0a, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x66, 0x92, 0x41, 0x63, 0x32, 0x61, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x20, 0x76, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x29, 0x52, 0x17, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x47, 0x92, 0x41, 0x44, 0x32, 0x42, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x20, 0x6d, 0x62, 0x70, 0x73, 0x20, 0x28, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x18,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65,
	0x92, 0x41, 0x62, 0x32, 0x60, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x76,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x29, 0x52, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a,
	0x13, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x63, 0x69, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x19, 0x32, 0x17, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1a,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x63, 0x69, 0x73, 0x65, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69,
	0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x68, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x44, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x28, 0x59, 0x59, 0x59, 0x59,
	0x2d, 0x4d, 0x4d, 0x29, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x32, 0x92,
	0x41, 0x2f, 0x32, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32, 0x42, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20,
	0x28, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x52, 0x50, 0x43, 0x29, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x32, 0x2b, 0x44, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x20, 0x28, 0x59, 0x59, 0x59, 0x59, 0x2d, 0x4d, 0x4d, 0x29, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32,
	0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x4c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32, 0xa7, 0x07, 0x0a, 0x0b, 0x43, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x38, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01,
	0x92, 0x41, 0x59, 0x12, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f,
	0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x1a, 0x2a, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0xf2, 0xd7, 0x02, 0x0f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x38, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0xbc, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xaf, 0x01, 0x92, 0x41, 0x77, 0x12, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x1a, 0x37, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0xf2, 0xd7, 0x02,
	0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x38, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0xa3, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x32, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x92, 0x41, 0x62, 0x12, 0x1a, 0x47, 0x65,
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x1a, 0x2c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0xf2, 0xd7,
	0x02, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x28, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0xea, 0xd7, 0x02, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x90, 0xd8,
	0x02, 0x03, 0x42, 0x9d, 0x04, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x38, 0x3b, 0x63, 0x6f, 0x73, 0x74, 0x92, 0x41, 0xd4, 0x03, 0x12, 0xed,
	0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20,
	0x43, 0x6f, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x12, 0x76, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x20, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x45,
	0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62, 0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d, 0x23,
	0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_cost_v202308_cost_proto_rawDescOnce sync.Once
	file_kentik_cost_v202308_cost_proto_rawDescData = file_kentik_cost_v202308_cost_proto_rawDesc
)

func file_kentik_cost_v202308_cost_proto_rawDescGZIP() []byte {
	file_kentik_cost_v202308_cost_proto_rawDescOnce.Do(func() {
		file_kentik_cost_v202308_cost_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_cost_v202308_cost_proto_rawDescData)
	})
	return file_kentik_cost_v202308_cost_proto_rawDescData
}

var file_kentik_cost_v202308_cost_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_cost_v202308_cost_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_kentik_cost_v202308_cost_proto_goTypes = []interface{}{
	(Status)(0),                               // 0: kentik.cost.v202308.Status
	(*CostProviderSummary)(nil),               // 1: kentik.cost.v202308.CostProviderSummary
	(*CostProviderConcise)(nil),               // 2: kentik.cost.v202308.CostProviderConcise
	(*ListCostProvidersRequest)(nil),          // 3: kentik.cost.v202308.ListCostProvidersRequest
	(*ListCostProvidersResponse)(nil),         // 4: kentik.cost.v202308.ListCostProvidersResponse
	(*ListCostProviderSummariesRequest)(nil),  // 5: kentik.cost.v202308.ListCostProviderSummariesRequest
	(*ListCostProviderSummariesResponse)(nil), // 6: kentik.cost.v202308.ListCostProviderSummariesResponse
	(*GetCostProviderSummaryRequest)(nil),     // 7: kentik.cost.v202308.GetCostProviderSummaryRequest
	(*GetCostProviderSummaryResponse)(nil),    // 8: kentik.cost.v202308.GetCostProviderSummaryResponse
}
var file_kentik_cost_v202308_cost_proto_depIdxs = []int32{
	0, // 0: kentik.cost.v202308.CostProviderSummary.status:type_name -> kentik.cost.v202308.Status
	2, // 1: kentik.cost.v202308.ListCostProvidersResponse.providers:type_name -> kentik.cost.v202308.CostProviderConcise
	1, // 2: kentik.cost.v202308.ListCostProviderSummariesResponse.providers:type_name -> kentik.cost.v202308.CostProviderSummary
	1, // 3: kentik.cost.v202308.GetCostProviderSummaryResponse.providers:type_name -> kentik.cost.v202308.CostProviderSummary
	3, // 4: kentik.cost.v202308.CostService.ListCostProviders:input_type -> kentik.cost.v202308.ListCostProvidersRequest
	5, // 5: kentik.cost.v202308.CostService.ListCostProviderSummaries:input_type -> kentik.cost.v202308.ListCostProviderSummariesRequest
	7, // 6: kentik.cost.v202308.CostService.GetCostProviderSummary:input_type -> kentik.cost.v202308.GetCostProviderSummaryRequest
	4, // 7: kentik.cost.v202308.CostService.ListCostProviders:output_type -> kentik.cost.v202308.ListCostProvidersResponse
	6, // 8: kentik.cost.v202308.CostService.ListCostProviderSummaries:output_type -> kentik.cost.v202308.ListCostProviderSummariesResponse
	8, // 9: kentik.cost.v202308.CostService.GetCostProviderSummary:output_type -> kentik.cost.v202308.GetCostProviderSummaryResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kentik_cost_v202308_cost_proto_init() }
func file_kentik_cost_v202308_cost_proto_init() {
	if File_kentik_cost_v202308_cost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_cost_v202308_cost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostProviderSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostProviderConcise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostProviderSummariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostProviderSummariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCostProviderSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cost_v202308_cost_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCostProviderSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_cost_v202308_cost_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_cost_v202308_cost_proto_goTypes,
		DependencyIndexes: file_kentik_cost_v202308_cost_proto_depIdxs,
		EnumInfos:         file_kentik_cost_v202308_cost_proto_enumTypes,
		MessageInfos:      file_kentik_cost_v202308_cost_proto_msgTypes,
	}.Build()
	File_kentik_cost_v202308_cost_proto = out.File
	file_kentik_cost_v202308_cost_proto_rawDesc = nil
	file_kentik_cost_v202308_cost_proto_goTypes = nil
	file_kentik_cost_v202308_cost_proto_depIdxs = nil
}
