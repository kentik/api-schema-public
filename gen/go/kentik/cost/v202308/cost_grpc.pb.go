// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CostServiceClient is the client API for CostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostServiceClient interface {
	ListCostProviders(ctx context.Context, in *ListCostProvidersRequest, opts ...grpc.CallOption) (*ListCostProvidersResponse, error)
	ListCostProviderSummaries(ctx context.Context, in *ListCostProviderSummariesRequest, opts ...grpc.CallOption) (*ListCostProviderSummariesResponse, error)
	GetCostProviderSummary(ctx context.Context, in *GetCostProviderSummaryRequest, opts ...grpc.CallOption) (*GetCostProviderSummaryResponse, error)
}

type costServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCostServiceClient(cc grpc.ClientConnInterface) CostServiceClient {
	return &costServiceClient{cc}
}

func (c *costServiceClient) ListCostProviders(ctx context.Context, in *ListCostProvidersRequest, opts ...grpc.CallOption) (*ListCostProvidersResponse, error) {
	out := new(ListCostProvidersResponse)
	err := c.cc.Invoke(ctx, "/kentik.cost.v202308.CostService/ListCostProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costServiceClient) ListCostProviderSummaries(ctx context.Context, in *ListCostProviderSummariesRequest, opts ...grpc.CallOption) (*ListCostProviderSummariesResponse, error) {
	out := new(ListCostProviderSummariesResponse)
	err := c.cc.Invoke(ctx, "/kentik.cost.v202308.CostService/ListCostProviderSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costServiceClient) GetCostProviderSummary(ctx context.Context, in *GetCostProviderSummaryRequest, opts ...grpc.CallOption) (*GetCostProviderSummaryResponse, error) {
	out := new(GetCostProviderSummaryResponse)
	err := c.cc.Invoke(ctx, "/kentik.cost.v202308.CostService/GetCostProviderSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostServiceServer is the server API for CostService service.
// All implementations should embed UnimplementedCostServiceServer
// for forward compatibility
type CostServiceServer interface {
	ListCostProviders(context.Context, *ListCostProvidersRequest) (*ListCostProvidersResponse, error)
	ListCostProviderSummaries(context.Context, *ListCostProviderSummariesRequest) (*ListCostProviderSummariesResponse, error)
	GetCostProviderSummary(context.Context, *GetCostProviderSummaryRequest) (*GetCostProviderSummaryResponse, error)
}

// UnimplementedCostServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCostServiceServer struct {
}

func (UnimplementedCostServiceServer) ListCostProviders(context.Context, *ListCostProvidersRequest) (*ListCostProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCostProviders not implemented")
}
func (UnimplementedCostServiceServer) ListCostProviderSummaries(context.Context, *ListCostProviderSummariesRequest) (*ListCostProviderSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCostProviderSummaries not implemented")
}
func (UnimplementedCostServiceServer) GetCostProviderSummary(context.Context, *GetCostProviderSummaryRequest) (*GetCostProviderSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostProviderSummary not implemented")
}

// UnsafeCostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostServiceServer will
// result in compilation errors.
type UnsafeCostServiceServer interface {
	mustEmbedUnimplementedCostServiceServer()
}

func RegisterCostServiceServer(s grpc.ServiceRegistrar, srv CostServiceServer) {
	s.RegisterService(&CostService_ServiceDesc, srv)
}

func _CostService_ListCostProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCostProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServiceServer).ListCostProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cost.v202308.CostService/ListCostProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServiceServer).ListCostProviders(ctx, req.(*ListCostProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostService_ListCostProviderSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCostProviderSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServiceServer).ListCostProviderSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cost.v202308.CostService/ListCostProviderSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServiceServer).ListCostProviderSummaries(ctx, req.(*ListCostProviderSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostService_GetCostProviderSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostProviderSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServiceServer).GetCostProviderSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cost.v202308.CostService/GetCostProviderSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServiceServer).GetCostProviderSummary(ctx, req.(*GetCostProviderSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CostService_ServiceDesc is the grpc.ServiceDesc for CostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cost.v202308.CostService",
	HandlerType: (*CostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCostProviders",
			Handler:    _CostService_ListCostProviders_Handler,
		},
		{
			MethodName: "ListCostProviderSummaries",
			Handler:    _CostService_ListCostProviderSummaries_Handler,
		},
		{
			MethodName: "GetCostProviderSummary",
			Handler:    _CostService_GetCostProviderSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cost/v202308/cost.proto",
}
