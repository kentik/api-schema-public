// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/ktrac/route/v202104/elem.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordType int32

const (
	RecordType_RECORD_TYPE_UNSPECIFIED RecordType = 0
	RecordType_RECORD_TYPE_UPDATE      RecordType = 1
	RecordType_RECORD_TYPE_RIB         RecordType = 2
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "RECORD_TYPE_UNSPECIFIED",
		1: "RECORD_TYPE_UPDATE",
		2: "RECORD_TYPE_RIB",
	}
	RecordType_value = map[string]int32{
		"RECORD_TYPE_UNSPECIFIED": 0,
		"RECORD_TYPE_UPDATE":      1,
		"RECORD_TYPE_RIB":         2,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[0].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[0]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type Afi int32

const (
	Afi_AFI_UNSPECIFIED Afi = 0
	Afi_AFI_IP4         Afi = 1
	Afi_AFI_IP6         Afi = 2
)

// Enum value maps for Afi.
var (
	Afi_name = map[int32]string{
		0: "AFI_UNSPECIFIED",
		1: "AFI_IP4",
		2: "AFI_IP6",
	}
	Afi_value = map[string]int32{
		"AFI_UNSPECIFIED": 0,
		"AFI_IP4":         1,
		"AFI_IP6":         2,
	}
)

func (x Afi) Enum() *Afi {
	p := new(Afi)
	*p = x
	return p
}

func (x Afi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Afi) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[1].Descriptor()
}

func (Afi) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[1]
}

func (x Afi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Afi.Descriptor instead.
func (Afi) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{1}
}

// {{.Name}}
type Safi int32

const (
	Safi_SAFI_UNSPECIFIED Safi = 0
	Safi_SAFI_UNICAST     Safi = 1
	Safi_SAFI_MPLS        Safi = 4
	Safi_SAFI_L3VPN       Safi = 128
)

// Enum value maps for Safi.
var (
	Safi_name = map[int32]string{
		0:   "SAFI_UNSPECIFIED",
		1:   "SAFI_UNICAST",
		4:   "SAFI_MPLS",
		128: "SAFI_L3VPN",
	}
	Safi_value = map[string]int32{
		"SAFI_UNSPECIFIED": 0,
		"SAFI_UNICAST":     1,
		"SAFI_MPLS":        4,
		"SAFI_L3VPN":       128,
	}
)

func (x Safi) Enum() *Safi {
	p := new(Safi)
	*p = x
	return p
}

func (x Safi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Safi) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[2].Descriptor()
}

func (Safi) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[2]
}

func (x Safi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Safi.Descriptor instead.
func (Safi) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{2}
}

// Note: values here are +10 from those in RFC 4271
type Origin int32

const (
	Origin_ORIGIN_UNSPECIFIED Origin = 0
	Origin_ORIGIN_IGP         Origin = 10
	Origin_ORIGIN_EGP         Origin = 11
	Origin_ORIGIN_INCOMPLETE  Origin = 12
)

// Enum value maps for Origin.
var (
	Origin_name = map[int32]string{
		0:  "ORIGIN_UNSPECIFIED",
		10: "ORIGIN_IGP",
		11: "ORIGIN_EGP",
		12: "ORIGIN_INCOMPLETE",
	}
	Origin_value = map[string]int32{
		"ORIGIN_UNSPECIFIED": 0,
		"ORIGIN_IGP":         10,
		"ORIGIN_EGP":         11,
		"ORIGIN_INCOMPLETE":  12,
	}
)

func (x Origin) Enum() *Origin {
	p := new(Origin)
	*p = x
	return p
}

func (x Origin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Origin) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[3].Descriptor()
}

func (Origin) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[3]
}

func (x Origin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Origin.Descriptor instead.
func (Origin) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{3}
}

type ElemType int32

const (
	ElemType_ELEM_TYPE_UNSPECIFIED  ElemType = 0
	ElemType_ELEM_TYPE_PEERSTATE    ElemType = 10
	ElemType_ELEM_TYPE_ANNOUNCEMENT ElemType = 11
	ElemType_ELEM_TYPE_WITHDRAWAL   ElemType = 12
	ElemType_ELEM_TYPE_RIB_ENTRY    ElemType = 13
	ElemType_ELEM_TYPE_SYNC         ElemType = 14
)

// Enum value maps for ElemType.
var (
	ElemType_name = map[int32]string{
		0:  "ELEM_TYPE_UNSPECIFIED",
		10: "ELEM_TYPE_PEERSTATE",
		11: "ELEM_TYPE_ANNOUNCEMENT",
		12: "ELEM_TYPE_WITHDRAWAL",
		13: "ELEM_TYPE_RIB_ENTRY",
		14: "ELEM_TYPE_SYNC",
	}
	ElemType_value = map[string]int32{
		"ELEM_TYPE_UNSPECIFIED":  0,
		"ELEM_TYPE_PEERSTATE":    10,
		"ELEM_TYPE_ANNOUNCEMENT": 11,
		"ELEM_TYPE_WITHDRAWAL":   12,
		"ELEM_TYPE_RIB_ENTRY":    13,
		"ELEM_TYPE_SYNC":         14,
	}
)

func (x ElemType) Enum() *ElemType {
	p := new(ElemType)
	*p = x
	return p
}

func (x ElemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElemType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[4].Descriptor()
}

func (ElemType) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[4]
}

func (x ElemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElemType.Descriptor instead.
func (ElemType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{4}
}

type PeerState int32

const (
	PeerState_PEER_STATE_UNSPECIFIED PeerState = 0
	PeerState_PEER_STATE_UP          PeerState = 10
	PeerState_PEER_STATE_DOWN        PeerState = 11
)

// Enum value maps for PeerState.
var (
	PeerState_name = map[int32]string{
		0:  "PEER_STATE_UNSPECIFIED",
		10: "PEER_STATE_UP",
		11: "PEER_STATE_DOWN",
	}
	PeerState_value = map[string]int32{
		"PEER_STATE_UNSPECIFIED": 0,
		"PEER_STATE_UP":          10,
		"PEER_STATE_DOWN":        11,
	}
)

func (x PeerState) Enum() *PeerState {
	p := new(PeerState)
	*p = x
	return p
}

func (x PeerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerState) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[5].Descriptor()
}

func (PeerState) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[5]
}

func (x PeerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerState.Descriptor instead.
func (PeerState) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{5}
}

type DumpPosition int32

const (
	DumpPosition_DUMP_POSITION_UNSPECIFIED DumpPosition = 0
	DumpPosition_DUMP_POSITION_START       DumpPosition = 1 // No Attributes
	DumpPosition_DUMP_POSITION_MID         DumpPosition = 2 // Attributes will contain route information
	DumpPosition_DUMP_POSITION_END         DumpPosition = 3 // No Attributes
)

// Enum value maps for DumpPosition.
var (
	DumpPosition_name = map[int32]string{
		0: "DUMP_POSITION_UNSPECIFIED",
		1: "DUMP_POSITION_START",
		2: "DUMP_POSITION_MID",
		3: "DUMP_POSITION_END",
	}
	DumpPosition_value = map[string]int32{
		"DUMP_POSITION_UNSPECIFIED": 0,
		"DUMP_POSITION_START":       1,
		"DUMP_POSITION_MID":         2,
		"DUMP_POSITION_END":         3,
	}
)

func (x DumpPosition) Enum() *DumpPosition {
	p := new(DumpPosition)
	*p = x
	return p
}

func (x DumpPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktrac_route_v202104_elem_proto_enumTypes[6].Descriptor()
}

func (DumpPosition) Type() protoreflect.EnumType {
	return &file_kentik_ktrac_route_v202104_elem_proto_enumTypes[6]
}

func (x DumpPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpPosition.Descriptor instead.
func (DumpPosition) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{6}
}

type Elem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	RecordType   RecordType             `protobuf:"varint,2,opt,name=record_type,json=recordType,proto3,enum=kentik.ktrac.route.v202104.RecordType" json:"record_type,omitempty"`
	VantagePoint *VantagePoint          `protobuf:"bytes,3,opt,name=vantage_point,json=vantagePoint,proto3" json:"vantage_point,omitempty"`
	MessageId    []byte                 `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Serial       uint64                 `protobuf:"varint,5,opt,name=serial,proto3" json:"serial,omitempty"`
	Afi          Afi                    `protobuf:"varint,6,opt,name=afi,proto3,enum=kentik.ktrac.route.v202104.Afi" json:"afi,omitempty"`
	Safi         Safi                   `protobuf:"varint,7,opt,name=safi,proto3,enum=kentik.ktrac.route.v202104.Safi" json:"safi,omitempty"`
	Type         ElemType               `protobuf:"varint,8,opt,name=type,proto3,enum=kentik.ktrac.route.v202104.ElemType" json:"type,omitempty"`
	UnicastNlris []*UnicastNlri         `protobuf:"bytes,9,rep,name=unicast_nlris,json=unicastNlris,proto3" json:"unicast_nlris,omitempty"`
	L3VpnNlris   []*L3VpnNlri           `protobuf:"bytes,10,rep,name=l3vpn_nlris,json=l3vpnNlris,proto3" json:"l3vpn_nlris,omitempty"`
	PeerState    *PeerStateElem         `protobuf:"bytes,11,opt,name=peer_state,json=peerState,proto3" json:"peer_state,omitempty"`
	Attributes   *Attributes            `protobuf:"bytes,12,opt,name=attributes,proto3" json:"attributes,omitempty"`
	RibEntry     *RibEntry              `protobuf:"bytes,13,opt,name=rib_entry,json=ribEntry,proto3" json:"rib_entry,omitempty"`
}

func (x *Elem) Reset() {
	*x = Elem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Elem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elem) ProtoMessage() {}

func (x *Elem) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Elem.ProtoReflect.Descriptor instead.
func (*Elem) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{0}
}

func (x *Elem) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Elem) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *Elem) GetVantagePoint() *VantagePoint {
	if x != nil {
		return x.VantagePoint
	}
	return nil
}

func (x *Elem) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Elem) GetSerial() uint64 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *Elem) GetAfi() Afi {
	if x != nil {
		return x.Afi
	}
	return Afi_AFI_UNSPECIFIED
}

func (x *Elem) GetSafi() Safi {
	if x != nil {
		return x.Safi
	}
	return Safi_SAFI_UNSPECIFIED
}

func (x *Elem) GetType() ElemType {
	if x != nil {
		return x.Type
	}
	return ElemType_ELEM_TYPE_UNSPECIFIED
}

func (x *Elem) GetUnicastNlris() []*UnicastNlri {
	if x != nil {
		return x.UnicastNlris
	}
	return nil
}

func (x *Elem) GetL3VpnNlris() []*L3VpnNlri {
	if x != nil {
		return x.L3VpnNlris
	}
	return nil
}

func (x *Elem) GetPeerState() *PeerStateElem {
	if x != nil {
		return x.PeerState
	}
	return nil
}

func (x *Elem) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Elem) GetRibEntry() *RibEntry {
	if x != nil {
		return x.RibEntry
	}
	return nil
}

// {{.Name}}
type VantagePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset   string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Collector string `protobuf:"bytes,2,opt,name=collector,proto3" json:"collector,omitempty"`
	PeerAsn   uint32 `protobuf:"varint,3,opt,name=peer_asn,json=peerAsn,proto3" json:"peer_asn,omitempty"`
	PeerIp    string `protobuf:"bytes,4,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
}

func (x *VantagePoint) Reset() {
	*x = VantagePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VantagePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VantagePoint) ProtoMessage() {}

func (x *VantagePoint) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VantagePoint.ProtoReflect.Descriptor instead.
func (*VantagePoint) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{1}
}

func (x *VantagePoint) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *VantagePoint) GetCollector() string {
	if x != nil {
		return x.Collector
	}
	return ""
}

func (x *VantagePoint) GetPeerAsn() uint32 {
	if x != nil {
		return x.PeerAsn
	}
	return 0
}

func (x *VantagePoint) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

type VantagePointTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VantagePoint *VantagePoint `protobuf:"bytes,1,opt,name=vantage_point,json=vantagePoint,proto3" json:"vantage_point,omitempty"`
	Afi          Afi           `protobuf:"varint,2,opt,name=afi,proto3,enum=kentik.ktrac.route.v202104.Afi" json:"afi,omitempty"`
	Safi         Safi          `protobuf:"varint,3,opt,name=safi,proto3,enum=kentik.ktrac.route.v202104.Safi" json:"safi,omitempty"`
}

func (x *VantagePointTable) Reset() {
	*x = VantagePointTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VantagePointTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VantagePointTable) ProtoMessage() {}

func (x *VantagePointTable) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VantagePointTable.ProtoReflect.Descriptor instead.
func (*VantagePointTable) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{2}
}

func (x *VantagePointTable) GetVantagePoint() *VantagePoint {
	if x != nil {
		return x.VantagePoint
	}
	return nil
}

func (x *VantagePointTable) GetAfi() Afi {
	if x != nil {
		return x.Afi
	}
	return Afi_AFI_UNSPECIFIED
}

func (x *VantagePointTable) GetSafi() Safi {
	if x != nil {
		return x.Safi
	}
	return Safi_SAFI_UNSPECIFIED
}

type UnicastNlri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: could consider binary encoding here to save a few bytes
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *UnicastNlri) Reset() {
	*x = UnicastNlri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnicastNlri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnicastNlri) ProtoMessage() {}

func (x *UnicastNlri) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnicastNlri.ProtoReflect.Descriptor instead.
func (*UnicastNlri) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{3}
}

func (x *UnicastNlri) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type L3VpnNlri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Labels []*MplsLabelStack `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Rd     string            `protobuf:"bytes,3,opt,name=rd,proto3" json:"rd,omitempty"`
}

func (x *L3VpnNlri) Reset() {
	*x = L3VpnNlri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L3VpnNlri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L3VpnNlri) ProtoMessage() {}

func (x *L3VpnNlri) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L3VpnNlri.ProtoReflect.Descriptor instead.
func (*L3VpnNlri) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{4}
}

func (x *L3VpnNlri) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *L3VpnNlri) GetLabels() []*MplsLabelStack {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *L3VpnNlri) GetRd() string {
	if x != nil {
		return x.Rd
	}
	return ""
}

type MplsLabelStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label []uint32 `protobuf:"varint,1,rep,packed,name=label,proto3" json:"label,omitempty"`
}

func (x *MplsLabelStack) Reset() {
	*x = MplsLabelStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsLabelStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsLabelStack) ProtoMessage() {}

func (x *MplsLabelStack) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsLabelStack.ProtoReflect.Descriptor instead.
func (*MplsLabelStack) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{5}
}

func (x *MplsLabelStack) GetLabel() []uint32 {
	if x != nil {
		return x.Label
	}
	return nil
}

type PeerStateElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState PeerState `protobuf:"varint,1,opt,name=new_state,json=newState,proto3,enum=kentik.ktrac.route.v202104.PeerState" json:"new_state,omitempty"`
}

func (x *PeerStateElem) Reset() {
	*x = PeerStateElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStateElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStateElem) ProtoMessage() {}

func (x *PeerStateElem) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStateElem.ProtoReflect.Descriptor instead.
func (*PeerStateElem) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{6}
}

func (x *PeerStateElem) GetNewState() PeerState {
	if x != nil {
		return x.NewState
	}
	return PeerState_PEER_STATE_UNSPECIFIED
}

type Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin              Origin   `protobuf:"varint,1,opt,name=origin,proto3,enum=kentik.ktrac.route.v202104.Origin" json:"origin,omitempty"`
	NextHop             string   `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	AsPath              []string `protobuf:"bytes,3,rep,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	Communities         []uint32 `protobuf:"varint,4,rep,packed,name=communities,proto3" json:"communities,omitempty"`
	ExtendedCommunities []string `protobuf:"bytes,5,rep,name=extended_communities,json=extendedCommunities,proto3" json:"extended_communities,omitempty"`
}

func (x *Attributes) Reset() {
	*x = Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attributes) ProtoMessage() {}

func (x *Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attributes.ProtoReflect.Descriptor instead.
func (*Attributes) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{7}
}

func (x *Attributes) GetOrigin() Origin {
	if x != nil {
		return x.Origin
	}
	return Origin_ORIGIN_UNSPECIFIED
}

func (x *Attributes) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *Attributes) GetAsPath() []string {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *Attributes) GetCommunities() []uint32 {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *Attributes) GetExtendedCommunities() []string {
	if x != nil {
		return x.ExtendedCommunities
	}
	return nil
}

type RibEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DumpTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=dump_time,json=dumpTime,proto3" json:"dump_time,omitempty"`
	DumpPosition DumpPosition           `protobuf:"varint,2,opt,name=dump_position,json=dumpPosition,proto3,enum=kentik.ktrac.route.v202104.DumpPosition" json:"dump_position,omitempty"`
	RibId        []byte                 `protobuf:"bytes,3,opt,name=rib_id,json=ribId,proto3" json:"rib_id,omitempty"`
	ElemCount    uint32                 `protobuf:"varint,4,opt,name=elem_count,json=elemCount,proto3" json:"elem_count,omitempty"` // only set in DUMP_POSITION_END
}

func (x *RibEntry) Reset() {
	*x = RibEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEntry) ProtoMessage() {}

func (x *RibEntry) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktrac_route_v202104_elem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEntry.ProtoReflect.Descriptor instead.
func (*RibEntry) Descriptor() ([]byte, []int) {
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP(), []int{8}
}

func (x *RibEntry) GetDumpTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DumpTime
	}
	return nil
}

func (x *RibEntry) GetDumpPosition() DumpPosition {
	if x != nil {
		return x.DumpPosition
	}
	return DumpPosition_DUMP_POSITION_UNSPECIFIED
}

func (x *RibEntry) GetRibId() []byte {
	if x != nil {
		return x.RibId
	}
	return nil
}

func (x *RibEntry) GetElemCount() uint32 {
	if x != nil {
		return x.ElemCount
	}
	return 0
}

var File_kentik_ktrac_route_v202104_elem_proto protoreflect.FileDescriptor

var file_kentik_ktrac_route_v202104_elem_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2f, 0x65, 0x6c, 0x65,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x34, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x06, 0x0a, 0x04, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72,
	0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x76, 0x61, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x56, 0x61, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x0a,
	0x03, 0x61, 0x66, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x41, 0x66, 0x69, 0x52, 0x03, 0x61, 0x66, 0x69,
	0x12, 0x34, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x53, 0x61, 0x66, 0x69,
	0x52, 0x04, 0x73, 0x61, 0x66, 0x69, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x34, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4c, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6c, 0x72, 0x69,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x34, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x6c, 0x72, 0x69,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x6c, 0x72, 0x69, 0x73, 0x12, 0x46,
	0x0a, 0x0b, 0x6c, 0x33, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x6c, 0x72, 0x69, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72,
	0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34,
	0x2e, 0x4c, 0x33, 0x76, 0x70, 0x6e, 0x4e, 0x6c, 0x72, 0x69, 0x52, 0x0a, 0x6c, 0x33, 0x76, 0x70,
	0x6e, 0x4e, 0x6c, 0x72, 0x69, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x34, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x69, 0x62, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x52, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xd4, 0x02, 0x0a, 0x0c,
	0x56, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73,
	0x65, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x17, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x43, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x41, 0x53, 0x4e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x20, 0x42, 0x47, 0x50, 0x20, 0x64, 0x61, 0x74, 0x61,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x63, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a,
	0x92, 0x41, 0x43, 0x32, 0x41, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x20, 0x42, 0x47,
	0x50, 0x20, 0x64, 0x61, 0x74, 0x61, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x70, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x76, 0x61, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x56, 0x61, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x61, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x66, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x34, 0x2e, 0x41, 0x66, 0x69, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x61,
	0x66, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x73, 0x61, 0x66, 0x69,
	0x22, 0x25, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x6c, 0x72, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x77, 0x0a, 0x09, 0x4c, 0x33, 0x76, 0x70, 0x6e,
	0x4e, 0x6c, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x42, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x64,
	0x22, 0x26, 0x0a, 0x0e, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x53, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd1, 0x01,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x52, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37,
	0x0a, 0x09, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64,
	0x75, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x75, 0x6d, 0x70, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x44, 0x75, 0x6d, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x75, 0x6d, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x56, 0x0a, 0x0a,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x49, 0x42, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x03, 0x41, 0x66, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x46, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x34, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x36, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x04, 0x53, 0x61,
	0x66, 0x69, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x41, 0x46,
	0x49, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x10, 0x80, 0x01, 0x2a, 0x57, 0x0a, 0x06, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x47, 0x50, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x0c, 0x2a, 0xa1, 0x01, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0b,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0e, 0x2a, 0x4f, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x50, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0b, 0x2a, 0x74, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x55, 0x4d, 0x50,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x55, 0x4d, 0x50, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x4d, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x4d, 0x50, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x42, 0x26,
	0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_ktrac_route_v202104_elem_proto_rawDescOnce sync.Once
	file_kentik_ktrac_route_v202104_elem_proto_rawDescData = file_kentik_ktrac_route_v202104_elem_proto_rawDesc
)

func file_kentik_ktrac_route_v202104_elem_proto_rawDescGZIP() []byte {
	file_kentik_ktrac_route_v202104_elem_proto_rawDescOnce.Do(func() {
		file_kentik_ktrac_route_v202104_elem_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_ktrac_route_v202104_elem_proto_rawDescData)
	})
	return file_kentik_ktrac_route_v202104_elem_proto_rawDescData
}

var file_kentik_ktrac_route_v202104_elem_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_kentik_ktrac_route_v202104_elem_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_kentik_ktrac_route_v202104_elem_proto_goTypes = []interface{}{
	(RecordType)(0),               // 0: kentik.ktrac.route.v202104.RecordType
	(Afi)(0),                      // 1: kentik.ktrac.route.v202104.Afi
	(Safi)(0),                     // 2: kentik.ktrac.route.v202104.Safi
	(Origin)(0),                   // 3: kentik.ktrac.route.v202104.Origin
	(ElemType)(0),                 // 4: kentik.ktrac.route.v202104.ElemType
	(PeerState)(0),                // 5: kentik.ktrac.route.v202104.PeerState
	(DumpPosition)(0),             // 6: kentik.ktrac.route.v202104.DumpPosition
	(*Elem)(nil),                  // 7: kentik.ktrac.route.v202104.Elem
	(*VantagePoint)(nil),          // 8: kentik.ktrac.route.v202104.VantagePoint
	(*VantagePointTable)(nil),     // 9: kentik.ktrac.route.v202104.VantagePointTable
	(*UnicastNlri)(nil),           // 10: kentik.ktrac.route.v202104.UnicastNlri
	(*L3VpnNlri)(nil),             // 11: kentik.ktrac.route.v202104.L3vpnNlri
	(*MplsLabelStack)(nil),        // 12: kentik.ktrac.route.v202104.MplsLabelStack
	(*PeerStateElem)(nil),         // 13: kentik.ktrac.route.v202104.PeerStateElem
	(*Attributes)(nil),            // 14: kentik.ktrac.route.v202104.Attributes
	(*RibEntry)(nil),              // 15: kentik.ktrac.route.v202104.RibEntry
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_kentik_ktrac_route_v202104_elem_proto_depIdxs = []int32{
	16, // 0: kentik.ktrac.route.v202104.Elem.time:type_name -> google.protobuf.Timestamp
	0,  // 1: kentik.ktrac.route.v202104.Elem.record_type:type_name -> kentik.ktrac.route.v202104.RecordType
	8,  // 2: kentik.ktrac.route.v202104.Elem.vantage_point:type_name -> kentik.ktrac.route.v202104.VantagePoint
	1,  // 3: kentik.ktrac.route.v202104.Elem.afi:type_name -> kentik.ktrac.route.v202104.Afi
	2,  // 4: kentik.ktrac.route.v202104.Elem.safi:type_name -> kentik.ktrac.route.v202104.Safi
	4,  // 5: kentik.ktrac.route.v202104.Elem.type:type_name -> kentik.ktrac.route.v202104.ElemType
	10, // 6: kentik.ktrac.route.v202104.Elem.unicast_nlris:type_name -> kentik.ktrac.route.v202104.UnicastNlri
	11, // 7: kentik.ktrac.route.v202104.Elem.l3vpn_nlris:type_name -> kentik.ktrac.route.v202104.L3vpnNlri
	13, // 8: kentik.ktrac.route.v202104.Elem.peer_state:type_name -> kentik.ktrac.route.v202104.PeerStateElem
	14, // 9: kentik.ktrac.route.v202104.Elem.attributes:type_name -> kentik.ktrac.route.v202104.Attributes
	15, // 10: kentik.ktrac.route.v202104.Elem.rib_entry:type_name -> kentik.ktrac.route.v202104.RibEntry
	8,  // 11: kentik.ktrac.route.v202104.VantagePointTable.vantage_point:type_name -> kentik.ktrac.route.v202104.VantagePoint
	1,  // 12: kentik.ktrac.route.v202104.VantagePointTable.afi:type_name -> kentik.ktrac.route.v202104.Afi
	2,  // 13: kentik.ktrac.route.v202104.VantagePointTable.safi:type_name -> kentik.ktrac.route.v202104.Safi
	12, // 14: kentik.ktrac.route.v202104.L3vpnNlri.labels:type_name -> kentik.ktrac.route.v202104.MplsLabelStack
	5,  // 15: kentik.ktrac.route.v202104.PeerStateElem.new_state:type_name -> kentik.ktrac.route.v202104.PeerState
	3,  // 16: kentik.ktrac.route.v202104.Attributes.origin:type_name -> kentik.ktrac.route.v202104.Origin
	16, // 17: kentik.ktrac.route.v202104.RibEntry.dump_time:type_name -> google.protobuf.Timestamp
	6,  // 18: kentik.ktrac.route.v202104.RibEntry.dump_position:type_name -> kentik.ktrac.route.v202104.DumpPosition
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_kentik_ktrac_route_v202104_elem_proto_init() }
func file_kentik_ktrac_route_v202104_elem_proto_init() {
	if File_kentik_ktrac_route_v202104_elem_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Elem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VantagePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VantagePointTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnicastNlri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L3VpnNlri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsLabelStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStateElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktrac_route_v202104_elem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_ktrac_route_v202104_elem_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kentik_ktrac_route_v202104_elem_proto_goTypes,
		DependencyIndexes: file_kentik_ktrac_route_v202104_elem_proto_depIdxs,
		EnumInfos:         file_kentik_ktrac_route_v202104_elem_proto_enumTypes,
		MessageInfos:      file_kentik_ktrac_route_v202104_elem_proto_msgTypes,
	}.Build()
	File_kentik_ktrac_route_v202104_elem_proto = out.File
	file_kentik_ktrac_route_v202104_elem_proto_rawDesc = nil
	file_kentik_ktrac_route_v202104_elem_proto_goTypes = nil
	file_kentik_ktrac_route_v202104_elem_proto_depIdxs = nil
}
