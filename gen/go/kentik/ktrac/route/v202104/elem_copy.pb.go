// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/ktrac/route/v202104/elem.proto

package pb

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *Elem) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Elem:
		x.Time = v.GetTime()
		x.RecordType = v.GetRecordType()
		x.VantagePoint = v.GetVantagePoint()
		x.MessageId = v.GetMessageId()
		x.Serial = v.GetSerial()
		x.Afi = v.GetAfi()
		x.Safi = v.GetSafi()
		x.Type = v.GetType()
		x.UnicastNlris = v.GetUnicastNlris()
		x.L3VpnNlris = v.GetL3VpnNlris()
		x.PeerState = v.GetPeerState()
		x.Attributes = v.GetAttributes()
		x.RibEntry = v.GetRibEntry()
	default:
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
		if v, ok := v.(interface{ GetRecordType() RecordType }); ok {
			x.RecordType = v.GetRecordType()
		}
		if v, ok := v.(interface{ GetVantagePoint() *VantagePoint }); ok {
			x.VantagePoint = v.GetVantagePoint()
		}
		if v, ok := v.(interface{ GetMessageId() []byte }); ok {
			x.MessageId = v.GetMessageId()
		}
		if v, ok := v.(interface{ GetSerial() uint64 }); ok {
			x.Serial = v.GetSerial()
		}
		if v, ok := v.(interface{ GetAfi() Afi }); ok {
			x.Afi = v.GetAfi()
		}
		if v, ok := v.(interface{ GetSafi() Safi }); ok {
			x.Safi = v.GetSafi()
		}
		if v, ok := v.(interface{ GetType() ElemType }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetUnicastNlris() []*UnicastNlri }); ok {
			x.UnicastNlris = v.GetUnicastNlris()
		}
		if v, ok := v.(interface{ GetL3VpnNlris() []*L3VpnNlri }); ok {
			x.L3VpnNlris = v.GetL3VpnNlris()
		}
		if v, ok := v.(interface{ GetPeerState() *PeerStateElem }); ok {
			x.PeerState = v.GetPeerState()
		}
		if v, ok := v.(interface{ GetAttributes() *Attributes }); ok {
			x.Attributes = v.GetAttributes()
		}
		if v, ok := v.(interface{ GetRibEntry() *RibEntry }); ok {
			x.RibEntry = v.GetRibEntry()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Elem) Proto_ShallowClone() (c *Elem) {
	if x != nil {
		c = new(Elem)
		c.Time = x.Time
		c.RecordType = x.RecordType
		c.VantagePoint = x.VantagePoint
		c.MessageId = x.MessageId
		c.Serial = x.Serial
		c.Afi = x.Afi
		c.Safi = x.Safi
		c.Type = x.Type
		c.UnicastNlris = x.UnicastNlris
		c.L3VpnNlris = x.L3VpnNlris
		c.PeerState = x.PeerState
		c.Attributes = x.Attributes
		c.RibEntry = x.RibEntry
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *VantagePoint) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *VantagePoint:
		x.Dataset = v.GetDataset()
		x.Collector = v.GetCollector()
		x.PeerAsn = v.GetPeerAsn()
		x.PeerIp = v.GetPeerIp()
	default:
		if v, ok := v.(interface{ GetDataset() string }); ok {
			x.Dataset = v.GetDataset()
		}
		if v, ok := v.(interface{ GetCollector() string }); ok {
			x.Collector = v.GetCollector()
		}
		if v, ok := v.(interface{ GetPeerAsn() uint32 }); ok {
			x.PeerAsn = v.GetPeerAsn()
		}
		if v, ok := v.(interface{ GetPeerIp() string }); ok {
			x.PeerIp = v.GetPeerIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *VantagePoint) Proto_ShallowClone() (c *VantagePoint) {
	if x != nil {
		c = new(VantagePoint)
		c.Dataset = x.Dataset
		c.Collector = x.Collector
		c.PeerAsn = x.PeerAsn
		c.PeerIp = x.PeerIp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *VantagePointTable) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *VantagePointTable:
		x.VantagePoint = v.GetVantagePoint()
		x.Afi = v.GetAfi()
		x.Safi = v.GetSafi()
	default:
		if v, ok := v.(interface{ GetVantagePoint() *VantagePoint }); ok {
			x.VantagePoint = v.GetVantagePoint()
		}
		if v, ok := v.(interface{ GetAfi() Afi }); ok {
			x.Afi = v.GetAfi()
		}
		if v, ok := v.(interface{ GetSafi() Safi }); ok {
			x.Safi = v.GetSafi()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *VantagePointTable) Proto_ShallowClone() (c *VantagePointTable) {
	if x != nil {
		c = new(VantagePointTable)
		c.VantagePoint = x.VantagePoint
		c.Afi = x.Afi
		c.Safi = x.Safi
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *UnicastNlri) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UnicastNlri:
		x.Prefix = v.GetPrefix()
	default:
		if v, ok := v.(interface{ GetPrefix() string }); ok {
			x.Prefix = v.GetPrefix()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UnicastNlri) Proto_ShallowClone() (c *UnicastNlri) {
	if x != nil {
		c = new(UnicastNlri)
		c.Prefix = x.Prefix
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *L3VpnNlri) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *L3VpnNlri:
		x.Prefix = v.GetPrefix()
		x.Labels = v.GetLabels()
		x.Rd = v.GetRd()
	default:
		if v, ok := v.(interface{ GetPrefix() string }); ok {
			x.Prefix = v.GetPrefix()
		}
		if v, ok := v.(interface{ GetLabels() []*MplsLabelStack }); ok {
			x.Labels = v.GetLabels()
		}
		if v, ok := v.(interface{ GetRd() string }); ok {
			x.Rd = v.GetRd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *L3VpnNlri) Proto_ShallowClone() (c *L3VpnNlri) {
	if x != nil {
		c = new(L3VpnNlri)
		c.Prefix = x.Prefix
		c.Labels = x.Labels
		c.Rd = x.Rd
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *MplsLabelStack) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MplsLabelStack:
		x.Label = v.GetLabel()
	default:
		if v, ok := v.(interface{ GetLabel() []uint32 }); ok {
			x.Label = v.GetLabel()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MplsLabelStack) Proto_ShallowClone() (c *MplsLabelStack) {
	if x != nil {
		c = new(MplsLabelStack)
		c.Label = x.Label
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *PeerStateElem) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PeerStateElem:
		x.NewState = v.GetNewState()
	default:
		if v, ok := v.(interface{ GetNewState() PeerState }); ok {
			x.NewState = v.GetNewState()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PeerStateElem) Proto_ShallowClone() (c *PeerStateElem) {
	if x != nil {
		c = new(PeerStateElem)
		c.NewState = x.NewState
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *Attributes) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Attributes:
		x.Origin = v.GetOrigin()
		x.NextHop = v.GetNextHop()
		x.AsPath = v.GetAsPath()
		x.Communities = v.GetCommunities()
		x.ExtendedCommunities = v.GetExtendedCommunities()
	default:
		if v, ok := v.(interface{ GetOrigin() Origin }); ok {
			x.Origin = v.GetOrigin()
		}
		if v, ok := v.(interface{ GetNextHop() string }); ok {
			x.NextHop = v.GetNextHop()
		}
		if v, ok := v.(interface{ GetAsPath() []string }); ok {
			x.AsPath = v.GetAsPath()
		}
		if v, ok := v.(interface{ GetCommunities() []uint32 }); ok {
			x.Communities = v.GetCommunities()
		}
		if v, ok := v.(interface{ GetExtendedCommunities() []string }); ok {
			x.ExtendedCommunities = v.GetExtendedCommunities()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Attributes) Proto_ShallowClone() (c *Attributes) {
	if x != nil {
		c = new(Attributes)
		c.Origin = x.Origin
		c.NextHop = x.NextHop
		c.AsPath = x.AsPath
		c.Communities = x.Communities
		c.ExtendedCommunities = x.ExtendedCommunities
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *RibEntry) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *RibEntry:
		x.DumpTime = v.GetDumpTime()
		x.DumpPosition = v.GetDumpPosition()
		x.RibId = v.GetRibId()
		x.ElemCount = v.GetElemCount()
	default:
		if v, ok := v.(interface{ GetDumpTime() *timestamppb.Timestamp }); ok {
			x.DumpTime = v.GetDumpTime()
		}
		if v, ok := v.(interface{ GetDumpPosition() DumpPosition }); ok {
			x.DumpPosition = v.GetDumpPosition()
		}
		if v, ok := v.(interface{ GetRibId() []byte }); ok {
			x.RibId = v.GetRibId()
		}
		if v, ok := v.(interface{ GetElemCount() uint32 }); ok {
			x.ElemCount = v.GetElemCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *RibEntry) Proto_ShallowClone() (c *RibEntry) {
	if x != nil {
		c = new(RibEntry)
		c.DumpTime = x.DumpTime
		c.DumpPosition = x.DumpPosition
		c.RibId = x.RibId
		c.ElemCount = x.ElemCount
	}
	return
}
