// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/kde/v202212/fdw_result.proto

package kde

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *FdwQuery) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FdwQuery:
		x.RequestId = v.GetRequestId()
		x.Query = v.GetQuery()
		x.Tn = v.GetTn()
		x.UserId = v.GetUserId()
		x.ServerId = v.GetServerId()
		x.RemoteHost = v.GetRemoteHost()
		x.Aggs = v.GetAggs()
		x.Orderby = v.GetOrderby()
		x.Groupby = v.GetGroupby()
		x.KtCid = v.GetKtCid()
		x.KtRequestId = v.GetKtRequestId()
		x.KtUid = v.GetKtUid()
		x.KtSpoofUid = v.GetKtSpoofUid()
	default:
		if v, ok := v.(interface{ GetRequestId() string }); ok {
			x.RequestId = v.GetRequestId()
		}
		if v, ok := v.(interface{ GetQuery() string }); ok {
			x.Query = v.GetQuery()
		}
		if v, ok := v.(interface{ GetTn() string }); ok {
			x.Tn = v.GetTn()
		}
		if v, ok := v.(interface{ GetUserId() uint32 }); ok {
			x.UserId = v.GetUserId()
		}
		if v, ok := v.(interface{ GetServerId() uint32 }); ok {
			x.ServerId = v.GetServerId()
		}
		if v, ok := v.(interface{ GetRemoteHost() string }); ok {
			x.RemoteHost = v.GetRemoteHost()
		}
		if v, ok := v.(interface{ GetAggs() []string }); ok {
			x.Aggs = v.GetAggs()
		}
		if v, ok := v.(interface{ GetOrderby() []string }); ok {
			x.Orderby = v.GetOrderby()
		}
		if v, ok := v.(interface{ GetGroupby() []string }); ok {
			x.Groupby = v.GetGroupby()
		}
		if v, ok := v.(interface{ GetKtCid() uint32 }); ok {
			x.KtCid = v.GetKtCid()
		}
		if v, ok := v.(interface{ GetKtRequestId() string }); ok {
			x.KtRequestId = v.GetKtRequestId()
		}
		if v, ok := v.(interface{ GetKtUid() uint32 }); ok {
			x.KtUid = v.GetKtUid()
		}
		if v, ok := v.(interface{ GetKtSpoofUid() uint32 }); ok {
			x.KtSpoofUid = v.GetKtSpoofUid()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FdwQuery) Proto_ShallowClone() (c *FdwQuery) {
	if x != nil {
		c = new(FdwQuery)
		c.RequestId = x.RequestId
		c.Query = x.Query
		c.Tn = x.Tn
		c.UserId = x.UserId
		c.ServerId = x.ServerId
		c.RemoteHost = x.RemoteHost
		c.Aggs = x.Aggs
		c.Orderby = x.Orderby
		c.Groupby = x.Groupby
		c.KtCid = x.KtCid
		c.KtRequestId = x.KtRequestId
		c.KtUid = x.KtUid
		c.KtSpoofUid = x.KtSpoofUid
	}
	return
}
