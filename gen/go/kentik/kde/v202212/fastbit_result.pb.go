// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/kde/v202212/fastbit_result.proto

package kde

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FastbitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params       *FastbitResult_InputParams    `protobuf:"bytes,1,opt,name=params,proto3,oneof" json:"params,omitempty"`
	Int32Column  []*FastbitResult_Int32Column  `protobuf:"bytes,2,rep,name=int32_column,json=int32Column,proto3" json:"int32_column,omitempty"`
	Int64Column  []*FastbitResult_Int64Column  `protobuf:"bytes,3,rep,name=int64_column,json=int64Column,proto3" json:"int64_column,omitempty"`
	Uint32Column []*FastbitResult_UInt32Column `protobuf:"bytes,4,rep,name=uint32_column,json=uint32Column,proto3" json:"uint32_column,omitempty"`
	Uint64Column []*FastbitResult_UInt64Column `protobuf:"bytes,5,rep,name=uint64_column,json=uint64Column,proto3" json:"uint64_column,omitempty"`
	StringColumn []*FastbitResult_StringColumn `protobuf:"bytes,6,rep,name=string_column,json=stringColumn,proto3" json:"string_column,omitempty"`
	BytesColumn  []*FastbitResult_BytesColumn  `protobuf:"bytes,7,rep,name=bytes_column,json=bytesColumn,proto3" json:"bytes_column,omitempty"`
	FloatColumn  []*FastbitResult_FloatColumn  `protobuf:"bytes,8,rep,name=float_column,json=floatColumn,proto3" json:"float_column,omitempty"`
	DoubleColumn []*FastbitResult_DoubleColumn `protobuf:"bytes,9,rep,name=double_column,json=doubleColumn,proto3" json:"double_column,omitempty"`
}

func (x *FastbitResult) Reset() {
	*x = FastbitResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult) ProtoMessage() {}

func (x *FastbitResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult.ProtoReflect.Descriptor instead.
func (*FastbitResult) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0}
}

func (x *FastbitResult) GetParams() *FastbitResult_InputParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FastbitResult) GetInt32Column() []*FastbitResult_Int32Column {
	if x != nil {
		return x.Int32Column
	}
	return nil
}

func (x *FastbitResult) GetInt64Column() []*FastbitResult_Int64Column {
	if x != nil {
		return x.Int64Column
	}
	return nil
}

func (x *FastbitResult) GetUint32Column() []*FastbitResult_UInt32Column {
	if x != nil {
		return x.Uint32Column
	}
	return nil
}

func (x *FastbitResult) GetUint64Column() []*FastbitResult_UInt64Column {
	if x != nil {
		return x.Uint64Column
	}
	return nil
}

func (x *FastbitResult) GetStringColumn() []*FastbitResult_StringColumn {
	if x != nil {
		return x.StringColumn
	}
	return nil
}

func (x *FastbitResult) GetBytesColumn() []*FastbitResult_BytesColumn {
	if x != nil {
		return x.BytesColumn
	}
	return nil
}

func (x *FastbitResult) GetFloatColumn() []*FastbitResult_FloatColumn {
	if x != nil {
		return x.FloatColumn
	}
	return nil
}

func (x *FastbitResult) GetDoubleColumn() []*FastbitResult_DoubleColumn {
	if x != nil {
		return x.DoubleColumn
	}
	return nil
}

type FastbitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target         *string        `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
	RequestId      *string        `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
	Result         *FastbitResult `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
	Error          *string        `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	RequestKey     *string        `protobuf:"bytes,5,opt,name=request_key,json=requestKey,proto3,oneof" json:"request_key,omitempty"`
	FromCache      *bool          `protobuf:"varint,6,opt,name=from_cache,json=fromCache,proto3,oneof" json:"from_cache,omitempty"`
	NumResp        *int32         `protobuf:"varint,7,opt,name=num_resp,json=numResp,proto3,oneof" json:"num_resp,omitempty"`
	ThisResp       *int32         `protobuf:"varint,8,opt,name=this_resp,json=thisResp,proto3,oneof" json:"this_resp,omitempty"`
	MissingMds     *bool          `protobuf:"varint,9,opt,name=missing_mds,json=missingMds,proto3,oneof" json:"missing_mds,omitempty"`
	TooLargeEntity *bool          `protobuf:"varint,10,opt,name=too_large_entity,json=tooLargeEntity,proto3,oneof" json:"too_large_entity,omitempty"`
}

func (x *FastbitResponse) Reset() {
	*x = FastbitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResponse) ProtoMessage() {}

func (x *FastbitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResponse.ProtoReflect.Descriptor instead.
func (*FastbitResponse) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{1}
}

func (x *FastbitResponse) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *FastbitResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *FastbitResponse) GetResult() *FastbitResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FastbitResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *FastbitResponse) GetRequestKey() string {
	if x != nil && x.RequestKey != nil {
		return *x.RequestKey
	}
	return ""
}

func (x *FastbitResponse) GetFromCache() bool {
	if x != nil && x.FromCache != nil {
		return *x.FromCache
	}
	return false
}

func (x *FastbitResponse) GetNumResp() int32 {
	if x != nil && x.NumResp != nil {
		return *x.NumResp
	}
	return 0
}

func (x *FastbitResponse) GetThisResp() int32 {
	if x != nil && x.ThisResp != nil {
		return *x.ThisResp
	}
	return 0
}

func (x *FastbitResponse) GetMissingMds() bool {
	if x != nil && x.MissingMds != nil {
		return *x.MissingMds
	}
	return false
}

func (x *FastbitResponse) GetTooLargeEntity() bool {
	if x != nil && x.TooLargeEntity != nil {
		return *x.TooLargeEntity
	}
	return false
}

type FastbitResult_ColumnHeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Position *int32  `protobuf:"varint,2,opt,name=position,proto3,oneof" json:"position,omitempty"`
	Format   *string `protobuf:"bytes,3,opt,name=format,proto3,oneof" json:"format,omitempty"`
	AggName  *string `protobuf:"bytes,4,opt,name=agg_name,json=aggName,proto3,oneof" json:"agg_name,omitempty"`
}

func (x *FastbitResult_ColumnHeaderInfo) Reset() {
	*x = FastbitResult_ColumnHeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_ColumnHeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_ColumnHeaderInfo) ProtoMessage() {}

func (x *FastbitResult_ColumnHeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_ColumnHeaderInfo.ProtoReflect.Descriptor instead.
func (*FastbitResult_ColumnHeaderInfo) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FastbitResult_ColumnHeaderInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FastbitResult_ColumnHeaderInfo) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *FastbitResult_ColumnHeaderInfo) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *FastbitResult_ColumnHeaderInfo) GetAggName() string {
	if x != nil && x.AggName != nil {
		return *x.AggName
	}
	return ""
}

type FastbitResult_InputParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IOrderby        *string `protobuf:"bytes,1,opt,name=i_orderby,json=iOrderby,proto3,oneof" json:"i_orderby,omitempty"`
	IOffset         *int32  `protobuf:"varint,2,opt,name=i_offset,json=iOffset,proto3,oneof" json:"i_offset,omitempty"`
	ILimit          *int32  `protobuf:"varint,3,opt,name=i_limit,json=iLimit,proto3,oneof" json:"i_limit,omitempty"`
	IStartTime      *int64  `protobuf:"varint,4,opt,name=i_start_time,json=iStartTime,proto3,oneof" json:"i_start_time,omitempty"`
	IEndTime        *int64  `protobuf:"varint,5,opt,name=i_end_time,json=iEndTime,proto3,oneof" json:"i_end_time,omitempty"`
	IDeviceName     *string `protobuf:"bytes,6,opt,name=i_device_name,json=iDeviceName,proto3,oneof" json:"i_device_name,omitempty"`
	IDeviceId       *int64  `protobuf:"varint,7,opt,name=i_device_id,json=iDeviceId,proto3,oneof" json:"i_device_id,omitempty"`
	ISqStart        *int64  `protobuf:"varint,8,opt,name=i_sq_start,json=iSqStart,proto3,oneof" json:"i_sq_start,omitempty"`
	ISqEnd          *int64  `protobuf:"varint,9,opt,name=i_sq_end,json=iSqEnd,proto3,oneof" json:"i_sq_end,omitempty"`
	IDuration       *int32  `protobuf:"varint,10,opt,name=i_duration,json=iDuration,proto3,oneof" json:"i_duration,omitempty"`
	IDeviceSiteName *string `protobuf:"bytes,11,opt,name=i_device_site_name,json=iDeviceSiteName,proto3,oneof" json:"i_device_site_name,omitempty"`
	IDeviceType     *string `protobuf:"bytes,12,opt,name=i_device_type,json=iDeviceType,proto3,oneof" json:"i_device_type,omitempty"`
	IDebugInfo      *string `protobuf:"bytes,13,opt,name=i_debug_info,json=iDebugInfo,proto3,oneof" json:"i_debug_info,omitempty"`
	// If use_member_id == true, then consult the member_id column to set
	// i_device_id, and use the member_id map to lookup i_device_name,
	// i_device_site_name, and i_device_type.
	UseMemberId *bool `protobuf:"varint,14,opt,name=use_member_id,json=useMemberId,proto3,oneof" json:"use_member_id,omitempty"`
	// Key is value from member_id Int32Column(? I think).
	MemberId map[int64]*FastbitResult_MemberId `protobuf:"bytes,15,rep,name=member_id,json=memberId,proto3" json:"member_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FastbitResult_InputParams) Reset() {
	*x = FastbitResult_InputParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_InputParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_InputParams) ProtoMessage() {}

func (x *FastbitResult_InputParams) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_InputParams.ProtoReflect.Descriptor instead.
func (*FastbitResult_InputParams) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FastbitResult_InputParams) GetIOrderby() string {
	if x != nil && x.IOrderby != nil {
		return *x.IOrderby
	}
	return ""
}

func (x *FastbitResult_InputParams) GetIOffset() int32 {
	if x != nil && x.IOffset != nil {
		return *x.IOffset
	}
	return 0
}

func (x *FastbitResult_InputParams) GetILimit() int32 {
	if x != nil && x.ILimit != nil {
		return *x.ILimit
	}
	return 0
}

func (x *FastbitResult_InputParams) GetIStartTime() int64 {
	if x != nil && x.IStartTime != nil {
		return *x.IStartTime
	}
	return 0
}

func (x *FastbitResult_InputParams) GetIEndTime() int64 {
	if x != nil && x.IEndTime != nil {
		return *x.IEndTime
	}
	return 0
}

func (x *FastbitResult_InputParams) GetIDeviceName() string {
	if x != nil && x.IDeviceName != nil {
		return *x.IDeviceName
	}
	return ""
}

func (x *FastbitResult_InputParams) GetIDeviceId() int64 {
	if x != nil && x.IDeviceId != nil {
		return *x.IDeviceId
	}
	return 0
}

func (x *FastbitResult_InputParams) GetISqStart() int64 {
	if x != nil && x.ISqStart != nil {
		return *x.ISqStart
	}
	return 0
}

func (x *FastbitResult_InputParams) GetISqEnd() int64 {
	if x != nil && x.ISqEnd != nil {
		return *x.ISqEnd
	}
	return 0
}

func (x *FastbitResult_InputParams) GetIDuration() int32 {
	if x != nil && x.IDuration != nil {
		return *x.IDuration
	}
	return 0
}

func (x *FastbitResult_InputParams) GetIDeviceSiteName() string {
	if x != nil && x.IDeviceSiteName != nil {
		return *x.IDeviceSiteName
	}
	return ""
}

func (x *FastbitResult_InputParams) GetIDeviceType() string {
	if x != nil && x.IDeviceType != nil {
		return *x.IDeviceType
	}
	return ""
}

func (x *FastbitResult_InputParams) GetIDebugInfo() string {
	if x != nil && x.IDebugInfo != nil {
		return *x.IDebugInfo
	}
	return ""
}

func (x *FastbitResult_InputParams) GetUseMemberId() bool {
	if x != nil && x.UseMemberId != nil {
		return *x.UseMemberId
	}
	return false
}

func (x *FastbitResult_InputParams) GetMemberId() map[int64]*FastbitResult_MemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

type FastbitResult_MemberId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDeviceName     *string `protobuf:"bytes,1,opt,name=i_device_name,json=iDeviceName,proto3,oneof" json:"i_device_name,omitempty"`
	IDeviceSiteName *string `protobuf:"bytes,2,opt,name=i_device_site_name,json=iDeviceSiteName,proto3,oneof" json:"i_device_site_name,omitempty"`
	IDeviceType     *string `protobuf:"bytes,3,opt,name=i_device_type,json=iDeviceType,proto3,oneof" json:"i_device_type,omitempty"`
}

func (x *FastbitResult_MemberId) Reset() {
	*x = FastbitResult_MemberId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_MemberId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_MemberId) ProtoMessage() {}

func (x *FastbitResult_MemberId) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_MemberId.ProtoReflect.Descriptor instead.
func (*FastbitResult_MemberId) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FastbitResult_MemberId) GetIDeviceName() string {
	if x != nil && x.IDeviceName != nil {
		return *x.IDeviceName
	}
	return ""
}

func (x *FastbitResult_MemberId) GetIDeviceSiteName() string {
	if x != nil && x.IDeviceSiteName != nil {
		return *x.IDeviceSiteName
	}
	return ""
}

func (x *FastbitResult_MemberId) GetIDeviceType() string {
	if x != nil && x.IDeviceType != nil {
		return *x.IDeviceType
	}
	return ""
}

type FastbitResult_Int32Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []int32                         `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_Int32Column) Reset() {
	*x = FastbitResult_Int32Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_Int32Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_Int32Column) ProtoMessage() {}

func (x *FastbitResult_Int32Column) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_Int32Column.ProtoReflect.Descriptor instead.
func (*FastbitResult_Int32Column) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 3}
}

func (x *FastbitResult_Int32Column) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_Int32Column) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_Int64Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []int64                         `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_Int64Column) Reset() {
	*x = FastbitResult_Int64Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_Int64Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_Int64Column) ProtoMessage() {}

func (x *FastbitResult_Int64Column) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_Int64Column.ProtoReflect.Descriptor instead.
func (*FastbitResult_Int64Column) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 4}
}

func (x *FastbitResult_Int64Column) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_Int64Column) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_UInt32Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []uint32                        `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_UInt32Column) Reset() {
	*x = FastbitResult_UInt32Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_UInt32Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_UInt32Column) ProtoMessage() {}

func (x *FastbitResult_UInt32Column) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_UInt32Column.ProtoReflect.Descriptor instead.
func (*FastbitResult_UInt32Column) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 5}
}

func (x *FastbitResult_UInt32Column) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_UInt32Column) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_UInt64Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []uint64                        `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_UInt64Column) Reset() {
	*x = FastbitResult_UInt64Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_UInt64Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_UInt64Column) ProtoMessage() {}

func (x *FastbitResult_UInt64Column) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_UInt64Column.ProtoReflect.Descriptor instead.
func (*FastbitResult_UInt64Column) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 6}
}

func (x *FastbitResult_UInt64Column) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_UInt64Column) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_StringColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []string                        `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_StringColumn) Reset() {
	*x = FastbitResult_StringColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_StringColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_StringColumn) ProtoMessage() {}

func (x *FastbitResult_StringColumn) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_StringColumn.ProtoReflect.Descriptor instead.
func (*FastbitResult_StringColumn) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 7}
}

func (x *FastbitResult_StringColumn) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_StringColumn) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_BytesColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values [][]byte                        `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_BytesColumn) Reset() {
	*x = FastbitResult_BytesColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_BytesColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_BytesColumn) ProtoMessage() {}

func (x *FastbitResult_BytesColumn) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_BytesColumn.ProtoReflect.Descriptor instead.
func (*FastbitResult_BytesColumn) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 8}
}

func (x *FastbitResult_BytesColumn) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_BytesColumn) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_FloatColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []float32                       `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_FloatColumn) Reset() {
	*x = FastbitResult_FloatColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_FloatColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_FloatColumn) ProtoMessage() {}

func (x *FastbitResult_FloatColumn) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_FloatColumn.ProtoReflect.Descriptor instead.
func (*FastbitResult_FloatColumn) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 9}
}

func (x *FastbitResult_FloatColumn) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_FloatColumn) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FastbitResult_DoubleColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *FastbitResult_ColumnHeaderInfo `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
	Values []float64                       `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FastbitResult_DoubleColumn) Reset() {
	*x = FastbitResult_DoubleColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastbitResult_DoubleColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastbitResult_DoubleColumn) ProtoMessage() {}

func (x *FastbitResult_DoubleColumn) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kde_v202212_fastbit_result_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastbitResult_DoubleColumn.ProtoReflect.Descriptor instead.
func (*FastbitResult_DoubleColumn) Descriptor() ([]byte, []int) {
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP(), []int{0, 10}
}

func (x *FastbitResult_DoubleColumn) GetHeader() *FastbitResult_ColumnHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FastbitResult_DoubleColumn) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_kentik_kde_v202212_fastbit_result_proto protoreflect.FileDescriptor

var file_kentik_kde_v202212_fastbit_result_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x64, 0x65, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2f, 0x66, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x22, 0x80, 0x19,
	0x0a, 0x0d, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x50, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x53, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74,
	0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32,
	0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x50,
	0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x50, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74,
	0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46,
	0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0xb7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0xb9, 0x07, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x69, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08,
	0x69, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x09, 0x69, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x5f, 0x73,
	0x71, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52,
	0x08, 0x69, 0x53, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x08,
	0x69, 0x5f, 0x73, 0x71, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08,
	0x52, 0x06, 0x69, 0x53, 0x71, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x09, 0x52, 0x09, 0x69, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x12, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x69,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0a, 0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x1a, 0x67, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74,
	0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x5f, 0x73, 0x71, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x5f, 0x73, 0x71, 0x5f, 0x65,
	0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0xc9, 0x01,
	0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0f, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x0b, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46,
	0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x1a, 0x85, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x86, 0x01, 0x0a, 0x0c, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e,
	0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x1a, 0x86, 0x01, 0x0a, 0x0c, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x82, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4f, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x1a, 0x85, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x86, 0x01, 0x0a,
	0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4f, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x9c, 0x04, 0x0a, 0x0f, 0x46, 0x61, 0x73, 0x74, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x64, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x62,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x68,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52,
	0x08, 0x74, 0x68, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0e,
	0x74, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74,
	0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x64,
	0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x3b, 0x6b, 0x64, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_kde_v202212_fastbit_result_proto_rawDescOnce sync.Once
	file_kentik_kde_v202212_fastbit_result_proto_rawDescData = file_kentik_kde_v202212_fastbit_result_proto_rawDesc
)

func file_kentik_kde_v202212_fastbit_result_proto_rawDescGZIP() []byte {
	file_kentik_kde_v202212_fastbit_result_proto_rawDescOnce.Do(func() {
		file_kentik_kde_v202212_fastbit_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_kde_v202212_fastbit_result_proto_rawDescData)
	})
	return file_kentik_kde_v202212_fastbit_result_proto_rawDescData
}

var file_kentik_kde_v202212_fastbit_result_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_kentik_kde_v202212_fastbit_result_proto_goTypes = []interface{}{
	(*FastbitResult)(nil),                  // 0: kentik.kde.v202212.FastbitResult
	(*FastbitResponse)(nil),                // 1: kentik.kde.v202212.FastbitResponse
	(*FastbitResult_ColumnHeaderInfo)(nil), // 2: kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	(*FastbitResult_InputParams)(nil),      // 3: kentik.kde.v202212.FastbitResult.InputParams
	(*FastbitResult_MemberId)(nil),         // 4: kentik.kde.v202212.FastbitResult.MemberId
	(*FastbitResult_Int32Column)(nil),      // 5: kentik.kde.v202212.FastbitResult.Int32Column
	(*FastbitResult_Int64Column)(nil),      // 6: kentik.kde.v202212.FastbitResult.Int64Column
	(*FastbitResult_UInt32Column)(nil),     // 7: kentik.kde.v202212.FastbitResult.UInt32Column
	(*FastbitResult_UInt64Column)(nil),     // 8: kentik.kde.v202212.FastbitResult.UInt64Column
	(*FastbitResult_StringColumn)(nil),     // 9: kentik.kde.v202212.FastbitResult.StringColumn
	(*FastbitResult_BytesColumn)(nil),      // 10: kentik.kde.v202212.FastbitResult.BytesColumn
	(*FastbitResult_FloatColumn)(nil),      // 11: kentik.kde.v202212.FastbitResult.FloatColumn
	(*FastbitResult_DoubleColumn)(nil),     // 12: kentik.kde.v202212.FastbitResult.DoubleColumn
	nil,                                    // 13: kentik.kde.v202212.FastbitResult.InputParams.MemberIdEntry
}
var file_kentik_kde_v202212_fastbit_result_proto_depIdxs = []int32{
	3,  // 0: kentik.kde.v202212.FastbitResult.params:type_name -> kentik.kde.v202212.FastbitResult.InputParams
	5,  // 1: kentik.kde.v202212.FastbitResult.int32_column:type_name -> kentik.kde.v202212.FastbitResult.Int32Column
	6,  // 2: kentik.kde.v202212.FastbitResult.int64_column:type_name -> kentik.kde.v202212.FastbitResult.Int64Column
	7,  // 3: kentik.kde.v202212.FastbitResult.uint32_column:type_name -> kentik.kde.v202212.FastbitResult.UInt32Column
	8,  // 4: kentik.kde.v202212.FastbitResult.uint64_column:type_name -> kentik.kde.v202212.FastbitResult.UInt64Column
	9,  // 5: kentik.kde.v202212.FastbitResult.string_column:type_name -> kentik.kde.v202212.FastbitResult.StringColumn
	10, // 6: kentik.kde.v202212.FastbitResult.bytes_column:type_name -> kentik.kde.v202212.FastbitResult.BytesColumn
	11, // 7: kentik.kde.v202212.FastbitResult.float_column:type_name -> kentik.kde.v202212.FastbitResult.FloatColumn
	12, // 8: kentik.kde.v202212.FastbitResult.double_column:type_name -> kentik.kde.v202212.FastbitResult.DoubleColumn
	0,  // 9: kentik.kde.v202212.FastbitResponse.result:type_name -> kentik.kde.v202212.FastbitResult
	13, // 10: kentik.kde.v202212.FastbitResult.InputParams.member_id:type_name -> kentik.kde.v202212.FastbitResult.InputParams.MemberIdEntry
	2,  // 11: kentik.kde.v202212.FastbitResult.Int32Column.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 12: kentik.kde.v202212.FastbitResult.Int64Column.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 13: kentik.kde.v202212.FastbitResult.UInt32Column.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 14: kentik.kde.v202212.FastbitResult.UInt64Column.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 15: kentik.kde.v202212.FastbitResult.StringColumn.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 16: kentik.kde.v202212.FastbitResult.BytesColumn.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 17: kentik.kde.v202212.FastbitResult.FloatColumn.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	2,  // 18: kentik.kde.v202212.FastbitResult.DoubleColumn.header:type_name -> kentik.kde.v202212.FastbitResult.ColumnHeaderInfo
	4,  // 19: kentik.kde.v202212.FastbitResult.InputParams.MemberIdEntry.value:type_name -> kentik.kde.v202212.FastbitResult.MemberId
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_kentik_kde_v202212_fastbit_result_proto_init() }
func file_kentik_kde_v202212_fastbit_result_proto_init() {
	if File_kentik_kde_v202212_fastbit_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_ColumnHeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_InputParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_MemberId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_Int32Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_Int64Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_UInt32Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_UInt64Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_StringColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_BytesColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_FloatColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kde_v202212_fastbit_result_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastbitResult_DoubleColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_kentik_kde_v202212_fastbit_result_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_kde_v202212_fastbit_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kentik_kde_v202212_fastbit_result_proto_goTypes,
		DependencyIndexes: file_kentik_kde_v202212_fastbit_result_proto_depIdxs,
		MessageInfos:      file_kentik_kde_v202212_fastbit_result_proto_msgTypes,
	}.Build()
	File_kentik_kde_v202212_fastbit_result_proto = out.File
	file_kentik_kde_v202212_fastbit_result_proto_rawDesc = nil
	file_kentik_kde_v202212_fastbit_result_proto_goTypes = nil
	file_kentik_kde_v202212_fastbit_result_proto_depIdxs = nil
}
