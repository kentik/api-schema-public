// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cloudgw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsGwInternalServiceClient is the client API for AwsGwInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsGwInternalServiceClient interface {
	ProxyAws(ctx context.Context, in *ProxyAwsRequest, opts ...grpc.CallOption) (*ProxyAwsResponse, error)
}

type awsGwInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsGwInternalServiceClient(cc grpc.ClientConnInterface) AwsGwInternalServiceClient {
	return &awsGwInternalServiceClient{cc}
}

func (c *awsGwInternalServiceClient) ProxyAws(ctx context.Context, in *ProxyAwsRequest, opts ...grpc.CallOption) (*ProxyAwsResponse, error) {
	out := new(ProxyAwsResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AwsGwInternalService/ProxyAws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwsGwInternalServiceServer is the server API for AwsGwInternalService service.
// All implementations should embed UnimplementedAwsGwInternalServiceServer
// for forward compatibility
type AwsGwInternalServiceServer interface {
	ProxyAws(context.Context, *ProxyAwsRequest) (*ProxyAwsResponse, error)
}

// UnimplementedAwsGwInternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAwsGwInternalServiceServer struct {
}

func (UnimplementedAwsGwInternalServiceServer) ProxyAws(context.Context, *ProxyAwsRequest) (*ProxyAwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyAws not implemented")
}

// UnsafeAwsGwInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsGwInternalServiceServer will
// result in compilation errors.
type UnsafeAwsGwInternalServiceServer interface {
	mustEmbedUnimplementedAwsGwInternalServiceServer()
}

func RegisterAwsGwInternalServiceServer(s grpc.ServiceRegistrar, srv AwsGwInternalServiceServer) {
	s.RegisterService(&AwsGwInternalService_ServiceDesc, srv)
}

func _AwsGwInternalService_ProxyAws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyAwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsGwInternalServiceServer).ProxyAws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AwsGwInternalService/ProxyAws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsGwInternalServiceServer).ProxyAws(ctx, req.(*ProxyAwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AwsGwInternalService_ServiceDesc is the grpc.ServiceDesc for AwsGwInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsGwInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cloud_gw.v202103alpha1.AwsGwInternalService",
	HandlerType: (*AwsGwInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyAws",
			Handler:    _AwsGwInternalService_ProxyAws_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cloud_gw/v202103alpha1/cloud_gw.proto",
}

// AwsGwExternalServiceClient is the client API for AwsGwExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsGwExternalServiceClient interface {
	// LoginAws is used to tell the server that there's a listener active for a
	// given region.  A proxy starts a LoginAws, then services Get/SendAws
	// requests, and ends the LoginAws via context cancellation when it shuts
	// down (or disconnects).
	LoginAws(ctx context.Context, in *LoginAwsRequest, opts ...grpc.CallOption) (*LoginAwsResponse, error)
	// The client calls GetAws to get a request from the server.  It runs the
	// request, and returns the result via SendAws, linking them together via
	// request_id.
	GetAws(ctx context.Context, in *GetAwsRequest, opts ...grpc.CallOption) (*GetAwsResponse, error)
	SendAws(ctx context.Context, in *SendAwsRequest, opts ...grpc.CallOption) (*SendAwsResponse, error)
}

type awsGwExternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsGwExternalServiceClient(cc grpc.ClientConnInterface) AwsGwExternalServiceClient {
	return &awsGwExternalServiceClient{cc}
}

func (c *awsGwExternalServiceClient) LoginAws(ctx context.Context, in *LoginAwsRequest, opts ...grpc.CallOption) (*LoginAwsResponse, error) {
	out := new(LoginAwsResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AwsGwExternalService/LoginAws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsGwExternalServiceClient) GetAws(ctx context.Context, in *GetAwsRequest, opts ...grpc.CallOption) (*GetAwsResponse, error) {
	out := new(GetAwsResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AwsGwExternalService/GetAws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsGwExternalServiceClient) SendAws(ctx context.Context, in *SendAwsRequest, opts ...grpc.CallOption) (*SendAwsResponse, error) {
	out := new(SendAwsResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AwsGwExternalService/SendAws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwsGwExternalServiceServer is the server API for AwsGwExternalService service.
// All implementations should embed UnimplementedAwsGwExternalServiceServer
// for forward compatibility
type AwsGwExternalServiceServer interface {
	// LoginAws is used to tell the server that there's a listener active for a
	// given region.  A proxy starts a LoginAws, then services Get/SendAws
	// requests, and ends the LoginAws via context cancellation when it shuts
	// down (or disconnects).
	LoginAws(context.Context, *LoginAwsRequest) (*LoginAwsResponse, error)
	// The client calls GetAws to get a request from the server.  It runs the
	// request, and returns the result via SendAws, linking them together via
	// request_id.
	GetAws(context.Context, *GetAwsRequest) (*GetAwsResponse, error)
	SendAws(context.Context, *SendAwsRequest) (*SendAwsResponse, error)
}

// UnimplementedAwsGwExternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAwsGwExternalServiceServer struct {
}

func (UnimplementedAwsGwExternalServiceServer) LoginAws(context.Context, *LoginAwsRequest) (*LoginAwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAws not implemented")
}
func (UnimplementedAwsGwExternalServiceServer) GetAws(context.Context, *GetAwsRequest) (*GetAwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAws not implemented")
}
func (UnimplementedAwsGwExternalServiceServer) SendAws(context.Context, *SendAwsRequest) (*SendAwsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAws not implemented")
}

// UnsafeAwsGwExternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsGwExternalServiceServer will
// result in compilation errors.
type UnsafeAwsGwExternalServiceServer interface {
	mustEmbedUnimplementedAwsGwExternalServiceServer()
}

func RegisterAwsGwExternalServiceServer(s grpc.ServiceRegistrar, srv AwsGwExternalServiceServer) {
	s.RegisterService(&AwsGwExternalService_ServiceDesc, srv)
}

func _AwsGwExternalService_LoginAws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsGwExternalServiceServer).LoginAws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AwsGwExternalService/LoginAws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsGwExternalServiceServer).LoginAws(ctx, req.(*LoginAwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsGwExternalService_GetAws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsGwExternalServiceServer).GetAws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AwsGwExternalService/GetAws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsGwExternalServiceServer).GetAws(ctx, req.(*GetAwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsGwExternalService_SendAws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsGwExternalServiceServer).SendAws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AwsGwExternalService/SendAws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsGwExternalServiceServer).SendAws(ctx, req.(*SendAwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AwsGwExternalService_ServiceDesc is the grpc.ServiceDesc for AwsGwExternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsGwExternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cloud_gw.v202103alpha1.AwsGwExternalService",
	HandlerType: (*AwsGwExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginAws",
			Handler:    _AwsGwExternalService_LoginAws_Handler,
		},
		{
			MethodName: "GetAws",
			Handler:    _AwsGwExternalService_GetAws_Handler,
		},
		{
			MethodName: "SendAws",
			Handler:    _AwsGwExternalService_SendAws_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cloud_gw/v202103alpha1/cloud_gw.proto",
}
