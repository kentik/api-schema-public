// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cloudgw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AWSGWInternalServiceClient is the client API for AWSGWInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AWSGWInternalServiceClient interface {
	// Called by clients of cloud-server (Blake).
	ProxyAWS(ctx context.Context, in *ProxyAWSRequest, opts ...grpc.CallOption) (*ProxyAWSResponse, error)
}

type aWSGWInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSGWInternalServiceClient(cc grpc.ClientConnInterface) AWSGWInternalServiceClient {
	return &aWSGWInternalServiceClient{cc}
}

func (c *aWSGWInternalServiceClient) ProxyAWS(ctx context.Context, in *ProxyAWSRequest, opts ...grpc.CallOption) (*ProxyAWSResponse, error) {
	out := new(ProxyAWSResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AWSGWInternalService/ProxyAWS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSGWInternalServiceServer is the server API for AWSGWInternalService service.
// All implementations should embed UnimplementedAWSGWInternalServiceServer
// for forward compatibility
type AWSGWInternalServiceServer interface {
	// Called by clients of cloud-server (Blake).
	ProxyAWS(context.Context, *ProxyAWSRequest) (*ProxyAWSResponse, error)
}

// UnimplementedAWSGWInternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAWSGWInternalServiceServer struct {
}

func (UnimplementedAWSGWInternalServiceServer) ProxyAWS(context.Context, *ProxyAWSRequest) (*ProxyAWSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyAWS not implemented")
}

// UnsafeAWSGWInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSGWInternalServiceServer will
// result in compilation errors.
type UnsafeAWSGWInternalServiceServer interface {
	mustEmbedUnimplementedAWSGWInternalServiceServer()
}

func RegisterAWSGWInternalServiceServer(s grpc.ServiceRegistrar, srv AWSGWInternalServiceServer) {
	s.RegisterService(&AWSGWInternalService_ServiceDesc, srv)
}

func _AWSGWInternalService_ProxyAWS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyAWSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSGWInternalServiceServer).ProxyAWS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AWSGWInternalService/ProxyAWS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSGWInternalServiceServer).ProxyAWS(ctx, req.(*ProxyAWSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AWSGWInternalService_ServiceDesc is the grpc.ServiceDesc for AWSGWInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWSGWInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cloud_gw.v202103alpha1.AWSGWInternalService",
	HandlerType: (*AWSGWInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyAWS",
			Handler:    _AWSGWInternalService_ProxyAWS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cloud_gw/v202103alpha1/cloud_gw.proto",
}

// AWSGWExternalServiceClient is the client API for AWSGWExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AWSGWExternalServiceClient interface {
	// The client calls GetAWS to get a request from the server.  It runs the
	// request, and returns the result via SendAWS, linking them together via
	// request_id.
	GetAWS(ctx context.Context, in *GetAWSRequest, opts ...grpc.CallOption) (*GetAWSResponse, error)
	SendAWS(ctx context.Context, in *SendAWSRequest, opts ...grpc.CallOption) (*SendAWSResponse, error)
}

type aWSGWExternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSGWExternalServiceClient(cc grpc.ClientConnInterface) AWSGWExternalServiceClient {
	return &aWSGWExternalServiceClient{cc}
}

func (c *aWSGWExternalServiceClient) GetAWS(ctx context.Context, in *GetAWSRequest, opts ...grpc.CallOption) (*GetAWSResponse, error) {
	out := new(GetAWSResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AWSGWExternalService/GetAWS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aWSGWExternalServiceClient) SendAWS(ctx context.Context, in *SendAWSRequest, opts ...grpc.CallOption) (*SendAWSResponse, error) {
	out := new(SendAWSResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_gw.v202103alpha1.AWSGWExternalService/SendAWS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSGWExternalServiceServer is the server API for AWSGWExternalService service.
// All implementations should embed UnimplementedAWSGWExternalServiceServer
// for forward compatibility
type AWSGWExternalServiceServer interface {
	// The client calls GetAWS to get a request from the server.  It runs the
	// request, and returns the result via SendAWS, linking them together via
	// request_id.
	GetAWS(context.Context, *GetAWSRequest) (*GetAWSResponse, error)
	SendAWS(context.Context, *SendAWSRequest) (*SendAWSResponse, error)
}

// UnimplementedAWSGWExternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAWSGWExternalServiceServer struct {
}

func (UnimplementedAWSGWExternalServiceServer) GetAWS(context.Context, *GetAWSRequest) (*GetAWSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAWS not implemented")
}
func (UnimplementedAWSGWExternalServiceServer) SendAWS(context.Context, *SendAWSRequest) (*SendAWSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAWS not implemented")
}

// UnsafeAWSGWExternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSGWExternalServiceServer will
// result in compilation errors.
type UnsafeAWSGWExternalServiceServer interface {
	mustEmbedUnimplementedAWSGWExternalServiceServer()
}

func RegisterAWSGWExternalServiceServer(s grpc.ServiceRegistrar, srv AWSGWExternalServiceServer) {
	s.RegisterService(&AWSGWExternalService_ServiceDesc, srv)
}

func _AWSGWExternalService_GetAWS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAWSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSGWExternalServiceServer).GetAWS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AWSGWExternalService/GetAWS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSGWExternalServiceServer).GetAWS(ctx, req.(*GetAWSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AWSGWExternalService_SendAWS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAWSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSGWExternalServiceServer).SendAWS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_gw.v202103alpha1.AWSGWExternalService/SendAWS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSGWExternalServiceServer).SendAWS(ctx, req.(*SendAWSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AWSGWExternalService_ServiceDesc is the grpc.ServiceDesc for AWSGWExternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWSGWExternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cloud_gw.v202103alpha1.AWSGWExternalService",
	HandlerType: (*AWSGWExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAWS",
			Handler:    _AWSGWExternalService_GetAWS_Handler,
		},
		{
			MethodName: "SendAWS",
			Handler:    _AWSGWExternalService_SendAWS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cloud_gw/v202103alpha1/cloud_gw.proto",
}
