// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/ktbgp/v202501/route_service.proto

package ktbgp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteService_Announce_FullMethodName = "/kentik.ktbgp.v202501.RouteService/Announce"
	RouteService_Withdraw_FullMethodName = "/kentik.ktbgp.v202501.RouteService/Withdraw"
	RouteService_List_FullMethodName     = "/kentik.ktbgp.v202501.RouteService/List"
)

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	// Announce a BGP route to a specified set of devices
	Announce(ctx context.Context, in *RouteServiceAnnounceRequest, opts ...grpc.CallOption) (*RouteServiceAnnounceResponse, error)
	// Withdraw active BGP updates from devices
	Withdraw(ctx context.Context, in *RouteServiceWithdrawRequest, opts ...grpc.CallOption) (*RouteServiceWithdrawResponse, error)
	// List active BGP updates for a specified set of devices
	List(ctx context.Context, in *RouteServiceListRequest, opts ...grpc.CallOption) (*RouteServiceListResponse, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) Announce(ctx context.Context, in *RouteServiceAnnounceRequest, opts ...grpc.CallOption) (*RouteServiceAnnounceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteServiceAnnounceResponse)
	err := c.cc.Invoke(ctx, RouteService_Announce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) Withdraw(ctx context.Context, in *RouteServiceWithdrawRequest, opts ...grpc.CallOption) (*RouteServiceWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteServiceWithdrawResponse)
	err := c.cc.Invoke(ctx, RouteService_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) List(ctx context.Context, in *RouteServiceListRequest, opts ...grpc.CallOption) (*RouteServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteServiceListResponse)
	err := c.cc.Invoke(ctx, RouteService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations should embed UnimplementedRouteServiceServer
// for forward compatibility.
type RouteServiceServer interface {
	// Announce a BGP route to a specified set of devices
	Announce(context.Context, *RouteServiceAnnounceRequest) (*RouteServiceAnnounceResponse, error)
	// Withdraw active BGP updates from devices
	Withdraw(context.Context, *RouteServiceWithdrawRequest) (*RouteServiceWithdrawResponse, error)
	// List active BGP updates for a specified set of devices
	List(context.Context, *RouteServiceListRequest) (*RouteServiceListResponse, error)
}

// UnimplementedRouteServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteServiceServer struct{}

func (UnimplementedRouteServiceServer) Announce(context.Context, *RouteServiceAnnounceRequest) (*RouteServiceAnnounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedRouteServiceServer) Withdraw(context.Context, *RouteServiceWithdrawRequest) (*RouteServiceWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedRouteServiceServer) List(context.Context, *RouteServiceListRequest) (*RouteServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRouteServiceServer) testEmbeddedByValue() {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	// If the following call pancis, it indicates UnimplementedRouteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteServiceAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_Announce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).Announce(ctx, req.(*RouteServiceAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteServiceWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).Withdraw(ctx, req.(*RouteServiceWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).List(ctx, req.(*RouteServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.ktbgp.v202501.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _RouteService_Announce_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _RouteService_Withdraw_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RouteService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/ktbgp/v202501/route_service.proto",
}
