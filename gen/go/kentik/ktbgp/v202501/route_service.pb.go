// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/ktbgp/v202501/route_service.proto

package ktbgp

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InetType int32

const (
	InetType_INET_TYPE_UNSPECIFIED InetType = 0
	InetType_INET_TYPE_IPV4        InetType = 1
	InetType_INET_TYPE_IPV6        InetType = 2
)

// Enum value maps for InetType.
var (
	InetType_name = map[int32]string{
		0: "INET_TYPE_UNSPECIFIED",
		1: "INET_TYPE_IPV4",
		2: "INET_TYPE_IPV6",
	}
	InetType_value = map[string]int32{
		"INET_TYPE_UNSPECIFIED": 0,
		"INET_TYPE_IPV4":        1,
		"INET_TYPE_IPV6":        2,
	}
)

func (x InetType) Enum() *InetType {
	p := new(InetType)
	*p = x
	return p
}

func (x InetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InetType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[0].Descriptor()
}

func (InetType) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[0]
}

func (x InetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InetType.Descriptor instead.
func (InetType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{0}
}

type ExtendedCommunityRouteType int32

const (
	ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED ExtendedCommunityRouteType = 0
	ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET      ExtendedCommunityRouteType = 1
	ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN      ExtendedCommunityRouteType = 2
)

// Enum value maps for ExtendedCommunityRouteType.
var (
	ExtendedCommunityRouteType_name = map[int32]string{
		0: "EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED",
		1: "EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET",
		2: "EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN",
	}
	ExtendedCommunityRouteType_value = map[string]int32{
		"EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED": 0,
		"EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET":      1,
		"EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN":      2,
	}
)

func (x ExtendedCommunityRouteType) Enum() *ExtendedCommunityRouteType {
	p := new(ExtendedCommunityRouteType)
	*p = x
	return p
}

func (x ExtendedCommunityRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtendedCommunityRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[1].Descriptor()
}

func (ExtendedCommunityRouteType) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[1]
}

func (x ExtendedCommunityRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtendedCommunityRouteType.Descriptor instead.
func (ExtendedCommunityRouteType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{1}
}

type Fragment int32

const (
	Fragment_FRAGMENT_UNSPECIFIED Fragment = 0
	Fragment_FRAGMENT_DF          Fragment = 1 // Don't Fragment
	Fragment_FRAGMENT_ISF         Fragment = 2 // Is a fragment other than the first
	Fragment_FRAGMENT_FF          Fragment = 3 // First Fragment
	Fragment_FRAGMENT_LF          Fragment = 4 // Last Fragment
)

// Enum value maps for Fragment.
var (
	Fragment_name = map[int32]string{
		0: "FRAGMENT_UNSPECIFIED",
		1: "FRAGMENT_DF",
		2: "FRAGMENT_ISF",
		3: "FRAGMENT_FF",
		4: "FRAGMENT_LF",
	}
	Fragment_value = map[string]int32{
		"FRAGMENT_UNSPECIFIED": 0,
		"FRAGMENT_DF":          1,
		"FRAGMENT_ISF":         2,
		"FRAGMENT_FF":          3,
		"FRAGMENT_LF":          4,
	}
)

func (x Fragment) Enum() *Fragment {
	p := new(Fragment)
	*p = x
	return p
}

func (x Fragment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fragment) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[2].Descriptor()
}

func (Fragment) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[2]
}

func (x Fragment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fragment.Descriptor instead.
func (Fragment) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{2}
}

type TCPFlag int32

const (
	TCPFlag_TCP_FLAG_UNSPECIFIED TCPFlag = 0
	TCPFlag_TCP_FLAG_FIN         TCPFlag = 1
	TCPFlag_TCP_FLAG_SYN         TCPFlag = 2
	TCPFlag_TCP_FLAG_RST         TCPFlag = 3
	TCPFlag_TCP_FLAG_PSH         TCPFlag = 4
	TCPFlag_TCP_FLAG_ACK         TCPFlag = 5
	TCPFlag_TCP_FLAG_URG         TCPFlag = 6
	TCPFlag_TCP_FLAG_ECE         TCPFlag = 7
	TCPFlag_TCP_FLAG_CWR         TCPFlag = 8
)

// Enum value maps for TCPFlag.
var (
	TCPFlag_name = map[int32]string{
		0: "TCP_FLAG_UNSPECIFIED",
		1: "TCP_FLAG_FIN",
		2: "TCP_FLAG_SYN",
		3: "TCP_FLAG_RST",
		4: "TCP_FLAG_PSH",
		5: "TCP_FLAG_ACK",
		6: "TCP_FLAG_URG",
		7: "TCP_FLAG_ECE",
		8: "TCP_FLAG_CWR",
	}
	TCPFlag_value = map[string]int32{
		"TCP_FLAG_UNSPECIFIED": 0,
		"TCP_FLAG_FIN":         1,
		"TCP_FLAG_SYN":         2,
		"TCP_FLAG_RST":         3,
		"TCP_FLAG_PSH":         4,
		"TCP_FLAG_ACK":         5,
		"TCP_FLAG_URG":         6,
		"TCP_FLAG_ECE":         7,
		"TCP_FLAG_CWR":         8,
	}
)

func (x TCPFlag) Enum() *TCPFlag {
	p := new(TCPFlag)
	*p = x
	return p
}

func (x TCPFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TCPFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[3].Descriptor()
}

func (TCPFlag) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[3]
}

func (x TCPFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TCPFlag.Descriptor instead.
func (TCPFlag) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{3}
}

type NumericOp int32

const (
	NumericOp_NUMERIC_OP_UNSPECIFIED            NumericOp = 0
	NumericOp_NUMERIC_OP_EQUALS                 NumericOp = 1
	NumericOp_NUMERIC_OP_NOT_EQUALS             NumericOp = 2
	NumericOp_NUMERIC_OP_LESS_THAN              NumericOp = 3
	NumericOp_NUMERIC_OP_GREATER_THAN           NumericOp = 4
	NumericOp_NUMERIC_OP_LESS_THAN_OR_EQUALS    NumericOp = 5
	NumericOp_NUMERIC_OP_GREATER_THAN_OR_EQUALS NumericOp = 6
)

// Enum value maps for NumericOp.
var (
	NumericOp_name = map[int32]string{
		0: "NUMERIC_OP_UNSPECIFIED",
		1: "NUMERIC_OP_EQUALS",
		2: "NUMERIC_OP_NOT_EQUALS",
		3: "NUMERIC_OP_LESS_THAN",
		4: "NUMERIC_OP_GREATER_THAN",
		5: "NUMERIC_OP_LESS_THAN_OR_EQUALS",
		6: "NUMERIC_OP_GREATER_THAN_OR_EQUALS",
	}
	NumericOp_value = map[string]int32{
		"NUMERIC_OP_UNSPECIFIED":            0,
		"NUMERIC_OP_EQUALS":                 1,
		"NUMERIC_OP_NOT_EQUALS":             2,
		"NUMERIC_OP_LESS_THAN":              3,
		"NUMERIC_OP_GREATER_THAN":           4,
		"NUMERIC_OP_LESS_THAN_OR_EQUALS":    5,
		"NUMERIC_OP_GREATER_THAN_OR_EQUALS": 6,
	}
)

func (x NumericOp) Enum() *NumericOp {
	p := new(NumericOp)
	*p = x
	return p
}

func (x NumericOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumericOp) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[4].Descriptor()
}

func (NumericOp) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[4]
}

func (x NumericOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumericOp.Descriptor instead.
func (NumericOp) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{4}
}

type BitwiseOp int32

const (
	BitwiseOp_BITWISE_OP_UNSPECIFIED BitwiseOp = 0
	BitwiseOp_BITWISE_OP_ANY         BitwiseOp = 1 // (data & value) != 0
	BitwiseOp_BITWISE_OP_NONE        BitwiseOp = 2 // (data & value) == 0
	BitwiseOp_BITWISE_OP_ALL         BitwiseOp = 3 // (data & value) == value
	BitwiseOp_BITWISE_OP_NOT_ALL     BitwiseOp = 4 // (data & value) != value
)

// Enum value maps for BitwiseOp.
var (
	BitwiseOp_name = map[int32]string{
		0: "BITWISE_OP_UNSPECIFIED",
		1: "BITWISE_OP_ANY",
		2: "BITWISE_OP_NONE",
		3: "BITWISE_OP_ALL",
		4: "BITWISE_OP_NOT_ALL",
	}
	BitwiseOp_value = map[string]int32{
		"BITWISE_OP_UNSPECIFIED": 0,
		"BITWISE_OP_ANY":         1,
		"BITWISE_OP_NONE":        2,
		"BITWISE_OP_ALL":         3,
		"BITWISE_OP_NOT_ALL":     4,
	}
)

func (x BitwiseOp) Enum() *BitwiseOp {
	p := new(BitwiseOp)
	*p = x
	return p
}

func (x BitwiseOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitwiseOp) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[5].Descriptor()
}

func (BitwiseOp) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[5]
}

func (x BitwiseOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitwiseOp.Descriptor instead.
func (BitwiseOp) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{5}
}

type AdvertStatus int32

const (
	AdvertStatus_ADVERT_STATUS_UNSPECIFIED AdvertStatus = 0
	AdvertStatus_ADVERT_STATUS_ANNOUNCED   AdvertStatus = 1
	AdvertStatus_ADVERT_STATUS_WITHDRAWN   AdvertStatus = 2
	AdvertStatus_ADVERT_STATUS_NO_SESSION  AdvertStatus = 4 // when we cannot find the chf-bgp instance
	AdvertStatus_ADVERT_STATUS_FAILED      AdvertStatus = 3 // when we failed to parse or send the update
)

// Enum value maps for AdvertStatus.
var (
	AdvertStatus_name = map[int32]string{
		0: "ADVERT_STATUS_UNSPECIFIED",
		1: "ADVERT_STATUS_ANNOUNCED",
		2: "ADVERT_STATUS_WITHDRAWN",
		4: "ADVERT_STATUS_NO_SESSION",
		3: "ADVERT_STATUS_FAILED",
	}
	AdvertStatus_value = map[string]int32{
		"ADVERT_STATUS_UNSPECIFIED": 0,
		"ADVERT_STATUS_ANNOUNCED":   1,
		"ADVERT_STATUS_WITHDRAWN":   2,
		"ADVERT_STATUS_NO_SESSION":  4,
		"ADVERT_STATUS_FAILED":      3,
	}
)

func (x AdvertStatus) Enum() *AdvertStatus {
	p := new(AdvertStatus)
	*p = x
	return p
}

func (x AdvertStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvertStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[6].Descriptor()
}

func (AdvertStatus) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[6]
}

func (x AdvertStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvertStatus.Descriptor instead.
func (AdvertStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{6}
}

type RouteServiceAnnounceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIds []uint64 `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	// Types that are assignable to Update:
	//
	//	*RouteServiceAnnounceRequest_Flowspec
	//	*RouteServiceAnnounceRequest_Rtbh
	Update isRouteServiceAnnounceRequest_Update `protobuf_oneof:"update"`
}

func (x *RouteServiceAnnounceRequest) Reset() {
	*x = RouteServiceAnnounceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteServiceAnnounceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceAnnounceRequest) ProtoMessage() {}

func (x *RouteServiceAnnounceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceAnnounceRequest.ProtoReflect.Descriptor instead.
func (*RouteServiceAnnounceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{0}
}

func (x *RouteServiceAnnounceRequest) GetDeviceIds() []uint64 {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (m *RouteServiceAnnounceRequest) GetUpdate() isRouteServiceAnnounceRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *RouteServiceAnnounceRequest) GetFlowspec() *FlowspecUpdate {
	if x, ok := x.GetUpdate().(*RouteServiceAnnounceRequest_Flowspec); ok {
		return x.Flowspec
	}
	return nil
}

func (x *RouteServiceAnnounceRequest) GetRtbh() *RTBHUpdate {
	if x, ok := x.GetUpdate().(*RouteServiceAnnounceRequest_Rtbh); ok {
		return x.Rtbh
	}
	return nil
}

type isRouteServiceAnnounceRequest_Update interface {
	isRouteServiceAnnounceRequest_Update()
}

type RouteServiceAnnounceRequest_Flowspec struct {
	Flowspec *FlowspecUpdate `protobuf:"bytes,11,opt,name=flowspec,proto3,oneof"`
}

type RouteServiceAnnounceRequest_Rtbh struct {
	Rtbh *RTBHUpdate `protobuf:"bytes,12,opt,name=rtbh,proto3,oneof"`
}

func (*RouteServiceAnnounceRequest_Flowspec) isRouteServiceAnnounceRequest_Update() {}

func (*RouteServiceAnnounceRequest_Rtbh) isRouteServiceAnnounceRequest_Update() {}

type RouteServiceAnnounceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*UpdateResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RouteServiceAnnounceResponse) Reset() {
	*x = RouteServiceAnnounceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteServiceAnnounceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceAnnounceResponse) ProtoMessage() {}

func (x *RouteServiceAnnounceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceAnnounceResponse.ProtoReflect.Descriptor instead.
func (*RouteServiceAnnounceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{1}
}

func (x *RouteServiceAnnounceResponse) GetResults() []*UpdateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type RouteServiceWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIds []uint64  `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	Withdraw  *Withdraw `protobuf:"bytes,2,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (x *RouteServiceWithdrawRequest) Reset() {
	*x = RouteServiceWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteServiceWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceWithdrawRequest) ProtoMessage() {}

func (x *RouteServiceWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceWithdrawRequest.ProtoReflect.Descriptor instead.
func (*RouteServiceWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{2}
}

func (x *RouteServiceWithdrawRequest) GetDeviceIds() []uint64 {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *RouteServiceWithdrawRequest) GetWithdraw() *Withdraw {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

type Withdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Withdraw:
	//
	//	*Withdraw_Flowspec
	//	*Withdraw_Rtbh
	Withdraw isWithdraw_Withdraw `protobuf_oneof:"withdraw"`
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{3}
}

func (m *Withdraw) GetWithdraw() isWithdraw_Withdraw {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

func (x *Withdraw) GetFlowspec() *FlowspecMatch {
	if x, ok := x.GetWithdraw().(*Withdraw_Flowspec); ok {
		return x.Flowspec
	}
	return nil
}

func (x *Withdraw) GetRtbh() *RTBHMatch {
	if x, ok := x.GetWithdraw().(*Withdraw_Rtbh); ok {
		return x.Rtbh
	}
	return nil
}

type isWithdraw_Withdraw interface {
	isWithdraw_Withdraw()
}

type Withdraw_Flowspec struct {
	Flowspec *FlowspecMatch `protobuf:"bytes,1,opt,name=flowspec,proto3,oneof"`
}

type Withdraw_Rtbh struct {
	Rtbh *RTBHMatch `protobuf:"bytes,2,opt,name=rtbh,proto3,oneof"`
}

func (*Withdraw_Flowspec) isWithdraw_Withdraw() {}

func (*Withdraw_Rtbh) isWithdraw_Withdraw() {}

type RouteServiceWithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*UpdateResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RouteServiceWithdrawResponse) Reset() {
	*x = RouteServiceWithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteServiceWithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceWithdrawResponse) ProtoMessage() {}

func (x *RouteServiceWithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceWithdrawResponse.ProtoReflect.Descriptor instead.
func (*RouteServiceWithdrawResponse) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{4}
}

func (x *RouteServiceWithdrawResponse) GetResults() []*UpdateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FlowspecAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action represents the traffic treatment actions referring
	// to Extended Community types and sub-types defined in RFC 8955:
	// https://datatracker.ietf.org/doc/html/rfc8955#name-traffic-filtering-actions
	// and other related documents
	//
	// Types that are assignable to Action:
	//
	//	*FlowspecAction_Accept
	//	*FlowspecAction_Discard
	//	*FlowspecAction_RateBytes
	//	*FlowspecAction_MarkDscp
	//	*FlowspecAction_RtRedirect
	//	*FlowspecAction_IpRedirect
	//	*FlowspecAction_ActionType
	//	*FlowspecAction_RtCopy
	//	*FlowspecAction_RegularCommunity
	//	*FlowspecAction_ExtendedCommunity
	//	*FlowspecAction_LargeCommunity
	Action isFlowspecAction_Action `protobuf_oneof:"action"`
}

func (x *FlowspecAction) Reset() {
	*x = FlowspecAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecAction) ProtoMessage() {}

func (x *FlowspecAction) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecAction.ProtoReflect.Descriptor instead.
func (*FlowspecAction) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{5}
}

func (m *FlowspecAction) GetAction() isFlowspecAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *FlowspecAction) GetAccept() *FlowspecActionAccept {
	if x, ok := x.GetAction().(*FlowspecAction_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *FlowspecAction) GetDiscard() *FlowspecActionDiscard {
	if x, ok := x.GetAction().(*FlowspecAction_Discard); ok {
		return x.Discard
	}
	return nil
}

func (x *FlowspecAction) GetRateBytes() *FlowspecActionTrafficRateBytes {
	if x, ok := x.GetAction().(*FlowspecAction_RateBytes); ok {
		return x.RateBytes
	}
	return nil
}

func (x *FlowspecAction) GetMarkDscp() *FlowspecActionMarkDSCP {
	if x, ok := x.GetAction().(*FlowspecAction_MarkDscp); ok {
		return x.MarkDscp
	}
	return nil
}

func (x *FlowspecAction) GetRtRedirect() *FlowspecActionRouteTargetRedirect {
	if x, ok := x.GetAction().(*FlowspecAction_RtRedirect); ok {
		return x.RtRedirect
	}
	return nil
}

func (x *FlowspecAction) GetIpRedirect() *FlowspecActionIPNextHopRedirect {
	if x, ok := x.GetAction().(*FlowspecAction_IpRedirect); ok {
		return x.IpRedirect
	}
	return nil
}

func (x *FlowspecAction) GetActionType() *FlowspecActionTerminalSample {
	if x, ok := x.GetAction().(*FlowspecAction_ActionType); ok {
		return x.ActionType
	}
	return nil
}

func (x *FlowspecAction) GetRtCopy() *FlowspecActionIPNextHopCopy {
	if x, ok := x.GetAction().(*FlowspecAction_RtCopy); ok {
		return x.RtCopy
	}
	return nil
}

func (x *FlowspecAction) GetRegularCommunity() *FlowspecActionRegularCommunity {
	if x, ok := x.GetAction().(*FlowspecAction_RegularCommunity); ok {
		return x.RegularCommunity
	}
	return nil
}

func (x *FlowspecAction) GetExtendedCommunity() *FlowspecActionExtendedCommunity {
	if x, ok := x.GetAction().(*FlowspecAction_ExtendedCommunity); ok {
		return x.ExtendedCommunity
	}
	return nil
}

func (x *FlowspecAction) GetLargeCommunity() *FlowspecActionLargeCommunity {
	if x, ok := x.GetAction().(*FlowspecAction_LargeCommunity); ok {
		return x.LargeCommunity
	}
	return nil
}

type isFlowspecAction_Action interface {
	isFlowspecAction_Action()
}

type FlowspecAction_Accept struct {
	Accept *FlowspecActionAccept `protobuf:"bytes,1,opt,name=accept,proto3,oneof"`
}

type FlowspecAction_Discard struct {
	Discard *FlowspecActionDiscard `protobuf:"bytes,2,opt,name=discard,proto3,oneof"`
}

type FlowspecAction_RateBytes struct {
	RateBytes *FlowspecActionTrafficRateBytes `protobuf:"bytes,3,opt,name=rate_bytes,json=rateBytes,proto3,oneof"`
}

type FlowspecAction_MarkDscp struct {
	MarkDscp *FlowspecActionMarkDSCP `protobuf:"bytes,4,opt,name=mark_dscp,json=markDscp,proto3,oneof"`
}

type FlowspecAction_RtRedirect struct {
	RtRedirect *FlowspecActionRouteTargetRedirect `protobuf:"bytes,5,opt,name=rt_redirect,json=rtRedirect,proto3,oneof"`
}

type FlowspecAction_IpRedirect struct {
	IpRedirect *FlowspecActionIPNextHopRedirect `protobuf:"bytes,6,opt,name=ip_redirect,json=ipRedirect,proto3,oneof"`
}

type FlowspecAction_ActionType struct {
	ActionType *FlowspecActionTerminalSample `protobuf:"bytes,7,opt,name=action_type,json=actionType,proto3,oneof"`
}

type FlowspecAction_RtCopy struct {
	RtCopy *FlowspecActionIPNextHopCopy `protobuf:"bytes,8,opt,name=rt_copy,json=rtCopy,proto3,oneof"`
}

type FlowspecAction_RegularCommunity struct {
	RegularCommunity *FlowspecActionRegularCommunity `protobuf:"bytes,9,opt,name=regular_community,json=regularCommunity,proto3,oneof"`
}

type FlowspecAction_ExtendedCommunity struct {
	ExtendedCommunity *FlowspecActionExtendedCommunity `protobuf:"bytes,10,opt,name=extended_community,json=extendedCommunity,proto3,oneof"`
}

type FlowspecAction_LargeCommunity struct {
	LargeCommunity *FlowspecActionLargeCommunity `protobuf:"bytes,11,opt,name=large_community,json=largeCommunity,proto3,oneof"`
}

func (*FlowspecAction_Accept) isFlowspecAction_Action() {}

func (*FlowspecAction_Discard) isFlowspecAction_Action() {}

func (*FlowspecAction_RateBytes) isFlowspecAction_Action() {}

func (*FlowspecAction_MarkDscp) isFlowspecAction_Action() {}

func (*FlowspecAction_RtRedirect) isFlowspecAction_Action() {}

func (*FlowspecAction_IpRedirect) isFlowspecAction_Action() {}

func (*FlowspecAction_ActionType) isFlowspecAction_Action() {}

func (*FlowspecAction_RtCopy) isFlowspecAction_Action() {}

func (*FlowspecAction_RegularCommunity) isFlowspecAction_Action() {}

func (*FlowspecAction_ExtendedCommunity) isFlowspecAction_Action() {}

func (*FlowspecAction_LargeCommunity) isFlowspecAction_Action() {}

type FlowspecUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match        *FlowspecMatch         `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Deprecated: Do not use.
	Inet     string   `protobuf:"bytes,3,opt,name=inet,proto3" json:"inet,omitempty"` // deprecated: use inet_type instead
	InetType InetType `protobuf:"varint,6,opt,name=inet_type,json=inetType,proto3,enum=kentik.ktbgp.v202501.InetType" json:"inet_type,omitempty"`
	Key      string   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"` // mainly used for internal purposes
	// action represents the traffic treatment actions referring
	// to Extended Community types and sub-types defined in RFC 8955:
	// https://datatracker.ietf.org/doc/html/rfc8955#name-traffic-filtering-actions
	// and other related documents
	//
	// Types that are assignable to Action:
	//
	//	*FlowspecUpdate_RateBytes
	//	*FlowspecUpdate_Discard
	//	*FlowspecUpdate_MarkDscp
	//	*FlowspecUpdate_RtRedirect
	//	*FlowspecUpdate_IpRedirect
	//	*FlowspecUpdate_Accept
	//	*FlowspecUpdate_ActionType
	//	*FlowspecUpdate_RtCopy
	//	*FlowspecUpdate_RegularCommunity
	//	*FlowspecUpdate_ExtendedCommunity
	//	*FlowspecUpdate_LargeCommunity
	Action  isFlowspecUpdate_Action `protobuf_oneof:"action"`
	Actions []*FlowspecAction       `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	// Deprecated: Do not use.
	Terminal bool `protobuf:"varint,4,opt,name=terminal,proto3" json:"terminal,omitempty"` // true if this is a terminal action
	// Deprecated: Do not use.
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"` // true to enable traffic sampling and logging
}

func (x *FlowspecUpdate) Reset() {
	*x = FlowspecUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecUpdate) ProtoMessage() {}

func (x *FlowspecUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecUpdate.ProtoReflect.Descriptor instead.
func (*FlowspecUpdate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{6}
}

func (x *FlowspecUpdate) GetMatch() *FlowspecMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FlowspecUpdate) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *FlowspecUpdate) GetInet() string {
	if x != nil {
		return x.Inet
	}
	return ""
}

func (x *FlowspecUpdate) GetInetType() InetType {
	if x != nil {
		return x.InetType
	}
	return InetType_INET_TYPE_UNSPECIFIED
}

func (x *FlowspecUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *FlowspecUpdate) GetAction() isFlowspecUpdate_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *FlowspecUpdate) GetRateBytes() *FlowspecActionTrafficRateBytes {
	if x, ok := x.GetAction().(*FlowspecUpdate_RateBytes); ok {
		return x.RateBytes
	}
	return nil
}

func (x *FlowspecUpdate) GetDiscard() *FlowspecActionDiscard {
	if x, ok := x.GetAction().(*FlowspecUpdate_Discard); ok {
		return x.Discard
	}
	return nil
}

func (x *FlowspecUpdate) GetMarkDscp() *FlowspecActionMarkDSCP {
	if x, ok := x.GetAction().(*FlowspecUpdate_MarkDscp); ok {
		return x.MarkDscp
	}
	return nil
}

func (x *FlowspecUpdate) GetRtRedirect() *FlowspecActionRouteTargetRedirect {
	if x, ok := x.GetAction().(*FlowspecUpdate_RtRedirect); ok {
		return x.RtRedirect
	}
	return nil
}

func (x *FlowspecUpdate) GetIpRedirect() *FlowspecActionIPNextHopRedirect {
	if x, ok := x.GetAction().(*FlowspecUpdate_IpRedirect); ok {
		return x.IpRedirect
	}
	return nil
}

func (x *FlowspecUpdate) GetAccept() *FlowspecActionAccept {
	if x, ok := x.GetAction().(*FlowspecUpdate_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *FlowspecUpdate) GetActionType() *FlowspecActionTerminalSample {
	if x, ok := x.GetAction().(*FlowspecUpdate_ActionType); ok {
		return x.ActionType
	}
	return nil
}

func (x *FlowspecUpdate) GetRtCopy() *FlowspecActionIPNextHopCopy {
	if x, ok := x.GetAction().(*FlowspecUpdate_RtCopy); ok {
		return x.RtCopy
	}
	return nil
}

func (x *FlowspecUpdate) GetRegularCommunity() *FlowspecActionRegularCommunity {
	if x, ok := x.GetAction().(*FlowspecUpdate_RegularCommunity); ok {
		return x.RegularCommunity
	}
	return nil
}

func (x *FlowspecUpdate) GetExtendedCommunity() *FlowspecActionExtendedCommunity {
	if x, ok := x.GetAction().(*FlowspecUpdate_ExtendedCommunity); ok {
		return x.ExtendedCommunity
	}
	return nil
}

func (x *FlowspecUpdate) GetLargeCommunity() *FlowspecActionLargeCommunity {
	if x, ok := x.GetAction().(*FlowspecUpdate_LargeCommunity); ok {
		return x.LargeCommunity
	}
	return nil
}

func (x *FlowspecUpdate) GetActions() []*FlowspecAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Deprecated: Do not use.
func (x *FlowspecUpdate) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

// Deprecated: Do not use.
func (x *FlowspecUpdate) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

type isFlowspecUpdate_Action interface {
	isFlowspecUpdate_Action()
}

type FlowspecUpdate_RateBytes struct {
	RateBytes *FlowspecActionTrafficRateBytes `protobuf:"bytes,11,opt,name=rate_bytes,json=rateBytes,proto3,oneof"`
}

type FlowspecUpdate_Discard struct {
	Discard *FlowspecActionDiscard `protobuf:"bytes,12,opt,name=discard,proto3,oneof"`
}

type FlowspecUpdate_MarkDscp struct {
	MarkDscp *FlowspecActionMarkDSCP `protobuf:"bytes,13,opt,name=mark_dscp,json=markDscp,proto3,oneof"`
}

type FlowspecUpdate_RtRedirect struct {
	RtRedirect *FlowspecActionRouteTargetRedirect `protobuf:"bytes,14,opt,name=rt_redirect,json=rtRedirect,proto3,oneof"`
}

type FlowspecUpdate_IpRedirect struct {
	IpRedirect *FlowspecActionIPNextHopRedirect `protobuf:"bytes,15,opt,name=ip_redirect,json=ipRedirect,proto3,oneof"`
}

type FlowspecUpdate_Accept struct {
	Accept *FlowspecActionAccept `protobuf:"bytes,16,opt,name=accept,proto3,oneof"`
}

type FlowspecUpdate_ActionType struct {
	ActionType *FlowspecActionTerminalSample `protobuf:"bytes,17,opt,name=action_type,json=actionType,proto3,oneof"`
}

type FlowspecUpdate_RtCopy struct {
	RtCopy *FlowspecActionIPNextHopCopy `protobuf:"bytes,18,opt,name=rt_copy,json=rtCopy,proto3,oneof"`
}

type FlowspecUpdate_RegularCommunity struct {
	RegularCommunity *FlowspecActionRegularCommunity `protobuf:"bytes,19,opt,name=regular_community,json=regularCommunity,proto3,oneof"`
}

type FlowspecUpdate_ExtendedCommunity struct {
	ExtendedCommunity *FlowspecActionExtendedCommunity `protobuf:"bytes,20,opt,name=extended_community,json=extendedCommunity,proto3,oneof"`
}

type FlowspecUpdate_LargeCommunity struct {
	LargeCommunity *FlowspecActionLargeCommunity `protobuf:"bytes,21,opt,name=large_community,json=largeCommunity,proto3,oneof"`
}

func (*FlowspecUpdate_RateBytes) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_Discard) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_MarkDscp) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_RtRedirect) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_IpRedirect) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_Accept) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_ActionType) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_RtCopy) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_RegularCommunity) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_ExtendedCommunity) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_LargeCommunity) isFlowspecUpdate_Action() {}

type FlowspecUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update []*FlowspecUpdate `protobuf:"bytes,1,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *FlowspecUpdates) Reset() {
	*x = FlowspecUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecUpdates) ProtoMessage() {}

func (x *FlowspecUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecUpdates.ProtoReflect.Descriptor instead.
func (*FlowspecUpdates) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{7}
}

func (x *FlowspecUpdates) GetUpdate() []*FlowspecUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

type RTBHUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match        *RTBHMatch             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action       *RTBHAction            `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Deprecated: Do not use.
	Inet     string   `protobuf:"bytes,4,opt,name=inet,proto3" json:"inet,omitempty"` // deprecated: use inet_type instead
	InetType InetType `protobuf:"varint,5,opt,name=inet_type,json=inetType,proto3,enum=kentik.ktbgp.v202501.InetType" json:"inet_type,omitempty"`
	Key      string   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"` // mainly used for internal purposes
}

func (x *RTBHUpdate) Reset() {
	*x = RTBHUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTBHUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHUpdate) ProtoMessage() {}

func (x *RTBHUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHUpdate.ProtoReflect.Descriptor instead.
func (*RTBHUpdate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{8}
}

func (x *RTBHUpdate) GetMatch() *RTBHMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RTBHUpdate) GetAction() *RTBHAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RTBHUpdate) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *RTBHUpdate) GetInet() string {
	if x != nil {
		return x.Inet
	}
	return ""
}

func (x *RTBHUpdate) GetInetType() InetType {
	if x != nil {
		return x.InetType
	}
	return InetType_INET_TYPE_UNSPECIFIED
}

func (x *RTBHUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RTBHUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update []*RTBHUpdate `protobuf:"bytes,1,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *RTBHUpdates) Reset() {
	*x = RTBHUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTBHUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHUpdates) ProtoMessage() {}

func (x *RTBHUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHUpdates.ProtoReflect.Descriptor instead.
func (*RTBHUpdates) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{9}
}

func (x *RTBHUpdates) GetUpdate() []*RTBHUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

// FlowspecMatch represents the traffic filtering criteria encoded
// as Flow Specification NLRI as per RFC 8955:
// https://datatracker.ietf.org/doc/html/rfc8955#name-dissemination-of-ipv4-flow-
// and other related documents.
type FlowspecMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstPrefix    string           `protobuf:"bytes,1,opt,name=dst_prefix,json=dstPrefix,proto3" json:"dst_prefix,omitempty"` // IPv4 or IPv6 CIDR prefix to match
	SrcPrefix    string           `protobuf:"bytes,2,opt,name=src_prefix,json=srcPrefix,proto3" json:"src_prefix,omitempty"` // IPv4 or IPv6 CIDR prefix to match
	IpProtocol   *NumericFormula  `protobuf:"bytes,3,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty"`
	DstPort      *NumericFormula  `protobuf:"bytes,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	SrcPort      *NumericFormula  `protobuf:"bytes,6,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	IcmpType     *NumericFormula  `protobuf:"bytes,7,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode     *NumericFormula  `protobuf:"bytes,8,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	TcpFlags     *TCPFlagsFormula `protobuf:"bytes,9,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	PacketLength *NumericFormula  `protobuf:"bytes,10,opt,name=packet_length,json=packetLength,proto3" json:"packet_length,omitempty"`
	Dscp         *NumericFormula  `protobuf:"bytes,11,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Fragments    *FragmentFormula `protobuf:"bytes,12,opt,name=fragments,proto3" json:"fragments,omitempty"`
}

func (x *FlowspecMatch) Reset() {
	*x = FlowspecMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecMatch) ProtoMessage() {}

func (x *FlowspecMatch) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecMatch.ProtoReflect.Descriptor instead.
func (*FlowspecMatch) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{10}
}

func (x *FlowspecMatch) GetDstPrefix() string {
	if x != nil {
		return x.DstPrefix
	}
	return ""
}

func (x *FlowspecMatch) GetSrcPrefix() string {
	if x != nil {
		return x.SrcPrefix
	}
	return ""
}

func (x *FlowspecMatch) GetIpProtocol() *NumericFormula {
	if x != nil {
		return x.IpProtocol
	}
	return nil
}

func (x *FlowspecMatch) GetDstPort() *NumericFormula {
	if x != nil {
		return x.DstPort
	}
	return nil
}

func (x *FlowspecMatch) GetSrcPort() *NumericFormula {
	if x != nil {
		return x.SrcPort
	}
	return nil
}

func (x *FlowspecMatch) GetIcmpType() *NumericFormula {
	if x != nil {
		return x.IcmpType
	}
	return nil
}

func (x *FlowspecMatch) GetIcmpCode() *NumericFormula {
	if x != nil {
		return x.IcmpCode
	}
	return nil
}

func (x *FlowspecMatch) GetTcpFlags() *TCPFlagsFormula {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

func (x *FlowspecMatch) GetPacketLength() *NumericFormula {
	if x != nil {
		return x.PacketLength
	}
	return nil
}

func (x *FlowspecMatch) GetDscp() *NumericFormula {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *FlowspecMatch) GetFragments() *FragmentFormula {
	if x != nil {
		return x.Fragments
	}
	return nil
}

// FlowspecActionTrafficRateBytes specifies the maximum traffic rate
// in bytes per second.
//
// Extended Community type and sub-type: 0x8006
// https://datatracker.ietf.org/doc/html/rfc8955#traffic_rate_in_bytes
type FlowspecActionTrafficRateBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bytes_per_second must be greater than 0.
	//
	// See FlowspecActionDiscard for discarding traffic.
	BytesPerSecond float32 `protobuf:"fixed32,1,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
}

func (x *FlowspecActionTrafficRateBytes) Reset() {
	*x = FlowspecActionTrafficRateBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionTrafficRateBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionTrafficRateBytes) ProtoMessage() {}

func (x *FlowspecActionTrafficRateBytes) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionTrafficRateBytes.ProtoReflect.Descriptor instead.
func (*FlowspecActionTrafficRateBytes) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{11}
}

func (x *FlowspecActionTrafficRateBytes) GetBytesPerSecond() float32 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

// FlowspecActionAccept specifies that the traffic should be accepted.
// https://datatracker.ietf.org/doc/html/rfc8955
type FlowspecActionAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowspecActionAccept) Reset() {
	*x = FlowspecActionAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionAccept) ProtoMessage() {}

func (x *FlowspecActionAccept) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionAccept.ProtoReflect.Descriptor instead.
func (*FlowspecActionAccept) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{12}
}

// FlowspecActionDiscard specifies that the traffic should be discarded.
//
// This is a special case of FlowspecActionTrafficRateBytes with 0 bytes per second.
// Extended Community type and sub-type: 0x8006
// https://datatracker.ietf.org/doc/html/rfc8955#traffic_rate_in_bytes
type FlowspecActionDiscard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowspecActionDiscard) Reset() {
	*x = FlowspecActionDiscard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionDiscard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionDiscard) ProtoMessage() {}

func (x *FlowspecActionDiscard) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionDiscard.ProtoReflect.Descriptor instead.
func (*FlowspecActionDiscard) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{13}
}

// FlowspecActionTerminalSample specifies that the traffic action extended community.
//
// terminal, sample or sample-terminal action types.
// https://datatracker.ietf.org/doc/html/rfc8955#name-traffic-action-traffic-acti
type FlowspecActionTerminalSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terminal bool `protobuf:"varint,1,opt,name=terminal,proto3" json:"terminal,omitempty"`
	Sample   bool `protobuf:"varint,2,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *FlowspecActionTerminalSample) Reset() {
	*x = FlowspecActionTerminalSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionTerminalSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionTerminalSample) ProtoMessage() {}

func (x *FlowspecActionTerminalSample) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionTerminalSample.ProtoReflect.Descriptor instead.
func (*FlowspecActionTerminalSample) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{14}
}

func (x *FlowspecActionTerminalSample) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (x *FlowspecActionTerminalSample) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

// FlowspecActionMarkDSCP instructs a system to modify the DSCP bits in the IP header.
//
// Extended Community type and sub-type: 0x8009
// https://datatracker.ietf.org/doc/html/rfc8955#traffic_marking_subtype
type FlowspecActionMarkDSCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dscp uint32 `protobuf:"varint,1,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *FlowspecActionMarkDSCP) Reset() {
	*x = FlowspecActionMarkDSCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionMarkDSCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionMarkDSCP) ProtoMessage() {}

func (x *FlowspecActionMarkDSCP) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionMarkDSCP.ProtoReflect.Descriptor instead.
func (*FlowspecActionMarkDSCP) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{15}
}

func (x *FlowspecActionMarkDSCP) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

// FlowspecActionRouteTargetRedirect allows the traffic to be redirected to a VRF
// routing instance that lists the specified route-target in its import policy.
//
// Depending on the contents of the message, this will be encoded as:
// Extended Community type and sub-type: 0x8008 (2-octet ASN)
// or
// Extended Community type and sub-type: 0x8208 (4-octet ASN)
// https://datatracker.ietf.org/doc/html/rfc8955#rt_redirect_action_subtype
type FlowspecActionRouteTargetRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If 32 bits are used for the ASN, the route target can only be 16 bits long
	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// If 32 bits are used for the route target, the asn can only be 16 bits long
	RouteTarget uint32 `protobuf:"varint,2,opt,name=route_target,json=routeTarget,proto3" json:"route_target,omitempty"`
}

func (x *FlowspecActionRouteTargetRedirect) Reset() {
	*x = FlowspecActionRouteTargetRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionRouteTargetRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionRouteTargetRedirect) ProtoMessage() {}

func (x *FlowspecActionRouteTargetRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionRouteTargetRedirect.ProtoReflect.Descriptor instead.
func (*FlowspecActionRouteTargetRedirect) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{16}
}

func (x *FlowspecActionRouteTargetRedirect) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *FlowspecActionRouteTargetRedirect) GetRouteTarget() uint32 {
	if x != nil {
		return x.RouteTarget
	}
	return 0
}

// FlowspecActionIPNextHopRedirect allows the traffic to be redirected
// to a specific Next Hop IP address.
//
// Extended Community type and sub-type: 0x0800
//
// The target next-hop address refers to the 'Network Address of Next-Hop' field
// of the associated NLRI.
// https://datatracker.ietf.org/doc/html/draft-simpson-idr-flowspec-redirect
type FlowspecActionIPNextHopRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 address to redirect to
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *FlowspecActionIPNextHopRedirect) Reset() {
	*x = FlowspecActionIPNextHopRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionIPNextHopRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionIPNextHopRedirect) ProtoMessage() {}

func (x *FlowspecActionIPNextHopRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionIPNextHopRedirect.ProtoReflect.Descriptor instead.
func (*FlowspecActionIPNextHopRedirect) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{17}
}

func (x *FlowspecActionIPNextHopRedirect) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// FlowspecActionIPNextHopCopy allows the traffic to be copied
// to a specific Next Hop IP address.
//
// Extended Community type and sub-type: 0x0800 with least-significant bit 'C' set to 1
//
// The target next-hop address refers to the 'Network Address of Next-Hop' field
// of the associated NLRI.
// https://datatracker.ietf.org/doc/html/draft-simpson-idr-flowspec-redirect
type FlowspecActionIPNextHopCopy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 address to copy to
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *FlowspecActionIPNextHopCopy) Reset() {
	*x = FlowspecActionIPNextHopCopy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionIPNextHopCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionIPNextHopCopy) ProtoMessage() {}

func (x *FlowspecActionIPNextHopCopy) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionIPNextHopCopy.ProtoReflect.Descriptor instead.
func (*FlowspecActionIPNextHopCopy) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{18}
}

func (x *FlowspecActionIPNextHopCopy) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// FlowspecActionRegularCommunity
// Extenstion of the two-octed AS numbers as four-octed entinties.
// https://datatracker.ietf.org/doc/html/rfc6793
type FlowspecActionRegularCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn1 uint32 `protobuf:"varint,1,opt,name=asn1,proto3" json:"asn1,omitempty"`
	Asn2 uint32 `protobuf:"varint,2,opt,name=asn2,proto3" json:"asn2,omitempty"`
}

func (x *FlowspecActionRegularCommunity) Reset() {
	*x = FlowspecActionRegularCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionRegularCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionRegularCommunity) ProtoMessage() {}

func (x *FlowspecActionRegularCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionRegularCommunity.ProtoReflect.Descriptor instead.
func (*FlowspecActionRegularCommunity) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{19}
}

func (x *FlowspecActionRegularCommunity) GetAsn1() uint32 {
	if x != nil {
		return x.Asn1
	}
	return 0
}

func (x *FlowspecActionRegularCommunity) GetAsn2() uint32 {
	if x != nil {
		return x.Asn2
	}
	return 0
}

// FlowspecActionExtendedCommunity
// The attribute consists of a set of "extended communities".
// All routes with the Extended Communities attribute belong to
// the communities listed in the attribute.
// https://datatracker.ietf.org/doc/html/rfc4360
type FlowspecActionExtendedCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteType ExtendedCommunityRouteType `protobuf:"varint,1,opt,name=route_type,json=routeType,proto3,enum=kentik.ktbgp.v202501.ExtendedCommunityRouteType" json:"route_type,omitempty"`
	Asn1      uint32                     `protobuf:"varint,2,opt,name=asn1,proto3" json:"asn1,omitempty"`
	Asn2      uint32                     `protobuf:"varint,3,opt,name=asn2,proto3" json:"asn2,omitempty"`
}

func (x *FlowspecActionExtendedCommunity) Reset() {
	*x = FlowspecActionExtendedCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionExtendedCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionExtendedCommunity) ProtoMessage() {}

func (x *FlowspecActionExtendedCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionExtendedCommunity.ProtoReflect.Descriptor instead.
func (*FlowspecActionExtendedCommunity) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{20}
}

func (x *FlowspecActionExtendedCommunity) GetRouteType() ExtendedCommunityRouteType {
	if x != nil {
		return x.RouteType
	}
	return ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED
}

func (x *FlowspecActionExtendedCommunity) GetAsn1() uint32 {
	if x != nil {
		return x.Asn1
	}
	return 0
}

func (x *FlowspecActionExtendedCommunity) GetAsn2() uint32 {
	if x != nil {
		return x.Asn2
	}
	return 0
}

// FlowspecActionLargeCommunity
// BGP Large Communities attribute encoded as an unordered set of one or more
// twelve-octet values, each consisting of a four-octet Global
// Administrator field and two four-octet operator-defined fields, each
// of which can be used to denote properties or actions significant to
// the operator of the AS assigning the values.
// https://datatracker.ietf.org/doc/html/rfc8092
type FlowspecActionLargeCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn   uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Data1 uint32 `protobuf:"varint,2,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2 uint32 `protobuf:"varint,3,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *FlowspecActionLargeCommunity) Reset() {
	*x = FlowspecActionLargeCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecActionLargeCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionLargeCommunity) ProtoMessage() {}

func (x *FlowspecActionLargeCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionLargeCommunity.ProtoReflect.Descriptor instead.
func (*FlowspecActionLargeCommunity) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{21}
}

func (x *FlowspecActionLargeCommunity) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *FlowspecActionLargeCommunity) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *FlowspecActionLargeCommunity) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

type RTBHMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 CIDR prefix to match
	SrcPrefix string `protobuf:"bytes,1,opt,name=src_prefix,json=srcPrefix,proto3" json:"src_prefix,omitempty"`
}

func (x *RTBHMatch) Reset() {
	*x = RTBHMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTBHMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHMatch) ProtoMessage() {}

func (x *RTBHMatch) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHMatch.ProtoReflect.Descriptor instead.
func (*RTBHMatch) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{22}
}

func (x *RTBHMatch) GetSrcPrefix() string {
	if x != nil {
		return x.SrcPrefix
	}
	return ""
}

type RTBHAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpCommunities  []uint32 `protobuf:"varint,1,rep,packed,name=bgp_communities,json=bgpCommunities,proto3" json:"bgp_communities,omitempty"`
	NextHop         string   `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	LocalPreference uint32   `protobuf:"varint,3,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
}

func (x *RTBHAction) Reset() {
	*x = RTBHAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTBHAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHAction) ProtoMessage() {}

func (x *RTBHAction) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHAction.ProtoReflect.Descriptor instead.
func (*RTBHAction) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{23}
}

func (x *RTBHAction) GetBgpCommunities() []uint32 {
	if x != nil {
		return x.BgpCommunities
	}
	return nil
}

func (x *RTBHAction) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *RTBHAction) GetLocalPreference() uint32 {
	if x != nil {
		return x.LocalPreference
	}
	return 0
}

type NumericFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Or []*NumericPredicateGroup `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
}

func (x *NumericFormula) Reset() {
	*x = NumericFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericFormula) ProtoMessage() {}

func (x *NumericFormula) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericFormula.ProtoReflect.Descriptor instead.
func (*NumericFormula) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{24}
}

func (x *NumericFormula) GetOr() []*NumericPredicateGroup {
	if x != nil {
		return x.Or
	}
	return nil
}

type NumericPredicateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And []*NumericPredicate `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
}

func (x *NumericPredicateGroup) Reset() {
	*x = NumericPredicateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericPredicateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericPredicateGroup) ProtoMessage() {}

func (x *NumericPredicateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericPredicateGroup.ProtoReflect.Descriptor instead.
func (*NumericPredicateGroup) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{25}
}

func (x *NumericPredicateGroup) GetAnd() []*NumericPredicate {
	if x != nil {
		return x.And
	}
	return nil
}

type NumericPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator NumericOp `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.ktbgp.v202501.NumericOp" json:"operator,omitempty"`
	Value    uint64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NumericPredicate) Reset() {
	*x = NumericPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericPredicate) ProtoMessage() {}

func (x *NumericPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericPredicate.ProtoReflect.Descriptor instead.
func (*NumericPredicate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{26}
}

func (x *NumericPredicate) GetOperator() NumericOp {
	if x != nil {
		return x.Operator
	}
	return NumericOp_NUMERIC_OP_UNSPECIFIED
}

func (x *NumericPredicate) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FragmentFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Or []*FragmentPredicateGroup `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
}

func (x *FragmentFormula) Reset() {
	*x = FragmentFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentFormula) ProtoMessage() {}

func (x *FragmentFormula) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentFormula.ProtoReflect.Descriptor instead.
func (*FragmentFormula) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{27}
}

func (x *FragmentFormula) GetOr() []*FragmentPredicateGroup {
	if x != nil {
		return x.Or
	}
	return nil
}

type FragmentPredicateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And []*FragmentPredicate `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
}

func (x *FragmentPredicateGroup) Reset() {
	*x = FragmentPredicateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentPredicateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentPredicateGroup) ProtoMessage() {}

func (x *FragmentPredicateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentPredicateGroup.ProtoReflect.Descriptor instead.
func (*FragmentPredicateGroup) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{28}
}

func (x *FragmentPredicateGroup) GetAnd() []*FragmentPredicate {
	if x != nil {
		return x.And
	}
	return nil
}

type FragmentPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator BitwiseOp  `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.ktbgp.v202501.BitwiseOp" json:"operator,omitempty"`
	Values   []Fragment `protobuf:"varint,2,rep,packed,name=values,proto3,enum=kentik.ktbgp.v202501.Fragment" json:"values,omitempty"`
}

func (x *FragmentPredicate) Reset() {
	*x = FragmentPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentPredicate) ProtoMessage() {}

func (x *FragmentPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentPredicate.ProtoReflect.Descriptor instead.
func (*FragmentPredicate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{29}
}

func (x *FragmentPredicate) GetOperator() BitwiseOp {
	if x != nil {
		return x.Operator
	}
	return BitwiseOp_BITWISE_OP_UNSPECIFIED
}

func (x *FragmentPredicate) GetValues() []Fragment {
	if x != nil {
		return x.Values
	}
	return nil
}

type TCPFlagsFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Or []*TCPFlagsPredicateGroup `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
}

func (x *TCPFlagsFormula) Reset() {
	*x = TCPFlagsFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPFlagsFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFlagsFormula) ProtoMessage() {}

func (x *TCPFlagsFormula) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFlagsFormula.ProtoReflect.Descriptor instead.
func (*TCPFlagsFormula) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{30}
}

func (x *TCPFlagsFormula) GetOr() []*TCPFlagsPredicateGroup {
	if x != nil {
		return x.Or
	}
	return nil
}

type TCPFlagsPredicateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And []*TCPFlagsPredicate `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
}

func (x *TCPFlagsPredicateGroup) Reset() {
	*x = TCPFlagsPredicateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPFlagsPredicateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFlagsPredicateGroup) ProtoMessage() {}

func (x *TCPFlagsPredicateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFlagsPredicateGroup.ProtoReflect.Descriptor instead.
func (*TCPFlagsPredicateGroup) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{31}
}

func (x *TCPFlagsPredicateGroup) GetAnd() []*TCPFlagsPredicate {
	if x != nil {
		return x.And
	}
	return nil
}

type TCPFlagsPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator BitwiseOp `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.ktbgp.v202501.BitwiseOp" json:"operator,omitempty"`
	Values   []TCPFlag `protobuf:"varint,2,rep,packed,name=values,proto3,enum=kentik.ktbgp.v202501.TCPFlag" json:"values,omitempty"`
}

func (x *TCPFlagsPredicate) Reset() {
	*x = TCPFlagsPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPFlagsPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFlagsPredicate) ProtoMessage() {}

func (x *TCPFlagsPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFlagsPredicate.ProtoReflect.Descriptor instead.
func (*TCPFlagsPredicate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{32}
}

func (x *TCPFlagsPredicate) GetOperator() BitwiseOp {
	if x != nil {
		return x.Operator
	}
	return BitwiseOp_BITWISE_OP_UNSPECIFIED
}

func (x *TCPFlagsPredicate) GetValues() []TCPFlag {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId uint64       `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Status   AdvertStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.ktbgp.v202501.AdvertStatus" json:"status,omitempty"`
	Message  string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateResult) Reset() {
	*x = UpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResult) ProtoMessage() {}

func (x *UpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResult.ProtoReflect.Descriptor instead.
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateResult) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *UpdateResult) GetStatus() AdvertStatus {
	if x != nil {
		return x.Status
	}
	return AdvertStatus_ADVERT_STATUS_UNSPECIFIED
}

func (x *UpdateResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RouteServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *RoutesFilter `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"` // TODO: any pagination or sorting capabilities?
}

func (x *RouteServiceListRequest) Reset() {
	*x = RouteServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceListRequest) ProtoMessage() {}

func (x *RouteServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceListRequest.ProtoReflect.Descriptor instead.
func (*RouteServiceListRequest) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{34}
}

func (x *RouteServiceListRequest) GetFilters() *RoutesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type RoutesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIds []uint64 `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (x *RoutesFilter) Reset() {
	*x = RoutesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutesFilter) ProtoMessage() {}

func (x *RoutesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutesFilter.ProtoReflect.Descriptor instead.
func (*RoutesFilter) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{35}
}

func (x *RoutesFilter) GetDeviceIds() []uint64 {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

type RouteServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*DeviceAdverts `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *RouteServiceListResponse) Reset() {
	*x = RouteServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceListResponse) ProtoMessage() {}

func (x *RouteServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceListResponse.ProtoReflect.Descriptor instead.
func (*RouteServiceListResponse) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{36}
}

func (x *RouteServiceListResponse) GetResult() []*DeviceAdverts {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeviceAdverts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId uint64            `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Flowspec []*FlowspecUpdate `protobuf:"bytes,2,rep,name=flowspec,proto3" json:"flowspec,omitempty"`
	Rtbh     []*RTBHUpdate     `protobuf:"bytes,3,rep,name=rtbh,proto3" json:"rtbh,omitempty"`
}

func (x *DeviceAdverts) Reset() {
	*x = DeviceAdverts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAdverts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAdverts) ProtoMessage() {}

func (x *DeviceAdverts) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAdverts.ProtoReflect.Descriptor instead.
func (*DeviceAdverts) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceAdverts) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceAdverts) GetFlowspec() []*FlowspecUpdate {
	if x != nil {
		return x.Flowspec
	}
	return nil
}

func (x *DeviceAdverts) GetRtbh() []*RTBHUpdate {
	if x != nil {
		return x.Rtbh
	}
	return nil
}

var File_kentik_ktbgp_v202501_route_service_proto protoreflect.FileDescriptor

var file_kentik_ktbgp_v202501_route_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x74, 0x62, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x54, 0x42, 0x48, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x74, 0x62, 0x68, 0x42, 0x08, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22,
	0x90, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x41, 0x0a, 0x08,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x35, 0x0a, 0x04, 0x72, 0x74, 0x62, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x54, 0x42, 0x48, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x74, 0x62, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x22, 0x5c, 0x0a, 0x1c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xd4, 0x07, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x53, 0x43, 0x50, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x44, 0x73, 0x63, 0x70, 0x12, 0x5a, 0x0a, 0x0b, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x70, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x00, 0x52, 0x06, 0x72, 0x74, 0x43, 0x6f, 0x70,
	0x79, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67,
	0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70,
	0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x5d,
	0x0a, 0x0f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x0a, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x3b,
	0x0a, 0x09, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x49, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x69, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x4b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x53, 0x43, 0x50, 0x48, 0x00,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x73, 0x63, 0x70, 0x12, 0x5a, 0x0a, 0x0b, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x50, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x70, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x44, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x07, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x70,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x72, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x66, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a,
	0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa5,
	0x02, 0x0a, 0x0a, 0x52, 0x54, 0x42, 0x48, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x2e, 0x52, 0x54, 0x42, 0x48, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x54, 0x42, 0x48,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x04, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x31, 0x2e, 0x49, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x47, 0x0a, 0x0b, 0x52, 0x54, 0x42, 0x48, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x54, 0x42,
	0x48, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xb0, 0x05, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x45, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x07,
	0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x31, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x22, 0x4a, 0x0a, 0x1e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70,
	0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x22,
	0x52, 0x0a, 0x1c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x53, 0x43, 0x50, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x22, 0x58, 0x0a, 0x21, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x3c, 0x0a, 0x1f, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x38, 0x0a, 0x1b, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x22, 0x48, 0x0a, 0x1e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x6e, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x73, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x6e,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x73, 0x6e, 0x32, 0x22, 0x9a, 0x01,
	0x0a, 0x1f, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x6e, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x61, 0x73, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x6e, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x73, 0x6e, 0x32, 0x22, 0x5c, 0x0a, 0x1c, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x2a, 0x0a, 0x09, 0x52, 0x54, 0x42, 0x48,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x7b, 0x0a, 0x0a, 0x52, 0x54, 0x42, 0x48, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x67, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x12, 0x3b, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x02, 0x6f, 0x72,
	0x22, 0x51, 0x0a, 0x15, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x03,
	0x61, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x0f, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x3c, 0x0a,
	0x02, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x02, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x16, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67,
	0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x03, 0x61, 0x6e, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e,
	0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x54,
	0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x3c,
	0x0a, 0x02, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x31, 0x2e, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x02, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x16,
	0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74,
	0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x57, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x18, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62,
	0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x74, 0x62, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x54, 0x42, 0x48, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x72, 0x74, 0x62, 0x68, 0x2a, 0x4d, 0x0a, 0x08, 0x49, 0x6e, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x46, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x53, 0x46, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x46,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x46, 0x10, 0x04, 0x2a, 0xb3, 0x01, 0x0a, 0x07, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x53, 0x48, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x43,
	0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x55, 0x52, 0x47, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x45, 0x43, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x43, 0x57, 0x52, 0x10, 0x08, 0x2a, 0xdb, 0x01, 0x0a, 0x09, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x55, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4f,
	0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x55,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05,
	0x12, 0x25, 0x0a, 0x21, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x5f, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x06, 0x2a, 0x7c, 0x0a, 0x09, 0x42, 0x69, 0x74, 0x77, 0x69,
	0x73, 0x65, 0x4f, 0x70, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45, 0x5f,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x41,
	0x4e, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45, 0x5f,
	0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x54,
	0x57, 0x49, 0x53, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0x9f, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xba, 0x03, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x7e, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67,
	0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x62, 0x67, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x08, 0xf8, 0xd7, 0x02, 0x01,
	0x90, 0xd8, 0x02, 0x00, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x3b, 0x6b, 0x74, 0x62, 0x67, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_ktbgp_v202501_route_service_proto_rawDescOnce sync.Once
	file_kentik_ktbgp_v202501_route_service_proto_rawDescData = file_kentik_ktbgp_v202501_route_service_proto_rawDesc
)

func file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP() []byte {
	file_kentik_ktbgp_v202501_route_service_proto_rawDescOnce.Do(func() {
		file_kentik_ktbgp_v202501_route_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_ktbgp_v202501_route_service_proto_rawDescData)
	})
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescData
}

var file_kentik_ktbgp_v202501_route_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_kentik_ktbgp_v202501_route_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_kentik_ktbgp_v202501_route_service_proto_goTypes = []interface{}{
	(InetType)(0),                             // 0: kentik.ktbgp.v202501.InetType
	(ExtendedCommunityRouteType)(0),           // 1: kentik.ktbgp.v202501.ExtendedCommunityRouteType
	(Fragment)(0),                             // 2: kentik.ktbgp.v202501.Fragment
	(TCPFlag)(0),                              // 3: kentik.ktbgp.v202501.TCPFlag
	(NumericOp)(0),                            // 4: kentik.ktbgp.v202501.NumericOp
	(BitwiseOp)(0),                            // 5: kentik.ktbgp.v202501.BitwiseOp
	(AdvertStatus)(0),                         // 6: kentik.ktbgp.v202501.AdvertStatus
	(*RouteServiceAnnounceRequest)(nil),       // 7: kentik.ktbgp.v202501.RouteServiceAnnounceRequest
	(*RouteServiceAnnounceResponse)(nil),      // 8: kentik.ktbgp.v202501.RouteServiceAnnounceResponse
	(*RouteServiceWithdrawRequest)(nil),       // 9: kentik.ktbgp.v202501.RouteServiceWithdrawRequest
	(*Withdraw)(nil),                          // 10: kentik.ktbgp.v202501.Withdraw
	(*RouteServiceWithdrawResponse)(nil),      // 11: kentik.ktbgp.v202501.RouteServiceWithdrawResponse
	(*FlowspecAction)(nil),                    // 12: kentik.ktbgp.v202501.FlowspecAction
	(*FlowspecUpdate)(nil),                    // 13: kentik.ktbgp.v202501.FlowspecUpdate
	(*FlowspecUpdates)(nil),                   // 14: kentik.ktbgp.v202501.FlowspecUpdates
	(*RTBHUpdate)(nil),                        // 15: kentik.ktbgp.v202501.RTBHUpdate
	(*RTBHUpdates)(nil),                       // 16: kentik.ktbgp.v202501.RTBHUpdates
	(*FlowspecMatch)(nil),                     // 17: kentik.ktbgp.v202501.FlowspecMatch
	(*FlowspecActionTrafficRateBytes)(nil),    // 18: kentik.ktbgp.v202501.FlowspecActionTrafficRateBytes
	(*FlowspecActionAccept)(nil),              // 19: kentik.ktbgp.v202501.FlowspecActionAccept
	(*FlowspecActionDiscard)(nil),             // 20: kentik.ktbgp.v202501.FlowspecActionDiscard
	(*FlowspecActionTerminalSample)(nil),      // 21: kentik.ktbgp.v202501.FlowspecActionTerminalSample
	(*FlowspecActionMarkDSCP)(nil),            // 22: kentik.ktbgp.v202501.FlowspecActionMarkDSCP
	(*FlowspecActionRouteTargetRedirect)(nil), // 23: kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirect
	(*FlowspecActionIPNextHopRedirect)(nil),   // 24: kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirect
	(*FlowspecActionIPNextHopCopy)(nil),       // 25: kentik.ktbgp.v202501.FlowspecActionIPNextHopCopy
	(*FlowspecActionRegularCommunity)(nil),    // 26: kentik.ktbgp.v202501.FlowspecActionRegularCommunity
	(*FlowspecActionExtendedCommunity)(nil),   // 27: kentik.ktbgp.v202501.FlowspecActionExtendedCommunity
	(*FlowspecActionLargeCommunity)(nil),      // 28: kentik.ktbgp.v202501.FlowspecActionLargeCommunity
	(*RTBHMatch)(nil),                         // 29: kentik.ktbgp.v202501.RTBHMatch
	(*RTBHAction)(nil),                        // 30: kentik.ktbgp.v202501.RTBHAction
	(*NumericFormula)(nil),                    // 31: kentik.ktbgp.v202501.NumericFormula
	(*NumericPredicateGroup)(nil),             // 32: kentik.ktbgp.v202501.NumericPredicateGroup
	(*NumericPredicate)(nil),                  // 33: kentik.ktbgp.v202501.NumericPredicate
	(*FragmentFormula)(nil),                   // 34: kentik.ktbgp.v202501.FragmentFormula
	(*FragmentPredicateGroup)(nil),            // 35: kentik.ktbgp.v202501.FragmentPredicateGroup
	(*FragmentPredicate)(nil),                 // 36: kentik.ktbgp.v202501.FragmentPredicate
	(*TCPFlagsFormula)(nil),                   // 37: kentik.ktbgp.v202501.TCPFlagsFormula
	(*TCPFlagsPredicateGroup)(nil),            // 38: kentik.ktbgp.v202501.TCPFlagsPredicateGroup
	(*TCPFlagsPredicate)(nil),                 // 39: kentik.ktbgp.v202501.TCPFlagsPredicate
	(*UpdateResult)(nil),                      // 40: kentik.ktbgp.v202501.UpdateResult
	(*RouteServiceListRequest)(nil),           // 41: kentik.ktbgp.v202501.RouteServiceListRequest
	(*RoutesFilter)(nil),                      // 42: kentik.ktbgp.v202501.RoutesFilter
	(*RouteServiceListResponse)(nil),          // 43: kentik.ktbgp.v202501.RouteServiceListResponse
	(*DeviceAdverts)(nil),                     // 44: kentik.ktbgp.v202501.DeviceAdverts
	(*timestamppb.Timestamp)(nil),             // 45: google.protobuf.Timestamp
}
var file_kentik_ktbgp_v202501_route_service_proto_depIdxs = []int32{
	13, // 0: kentik.ktbgp.v202501.RouteServiceAnnounceRequest.flowspec:type_name -> kentik.ktbgp.v202501.FlowspecUpdate
	15, // 1: kentik.ktbgp.v202501.RouteServiceAnnounceRequest.rtbh:type_name -> kentik.ktbgp.v202501.RTBHUpdate
	40, // 2: kentik.ktbgp.v202501.RouteServiceAnnounceResponse.results:type_name -> kentik.ktbgp.v202501.UpdateResult
	10, // 3: kentik.ktbgp.v202501.RouteServiceWithdrawRequest.withdraw:type_name -> kentik.ktbgp.v202501.Withdraw
	17, // 4: kentik.ktbgp.v202501.Withdraw.flowspec:type_name -> kentik.ktbgp.v202501.FlowspecMatch
	29, // 5: kentik.ktbgp.v202501.Withdraw.rtbh:type_name -> kentik.ktbgp.v202501.RTBHMatch
	40, // 6: kentik.ktbgp.v202501.RouteServiceWithdrawResponse.results:type_name -> kentik.ktbgp.v202501.UpdateResult
	19, // 7: kentik.ktbgp.v202501.FlowspecAction.accept:type_name -> kentik.ktbgp.v202501.FlowspecActionAccept
	20, // 8: kentik.ktbgp.v202501.FlowspecAction.discard:type_name -> kentik.ktbgp.v202501.FlowspecActionDiscard
	18, // 9: kentik.ktbgp.v202501.FlowspecAction.rate_bytes:type_name -> kentik.ktbgp.v202501.FlowspecActionTrafficRateBytes
	22, // 10: kentik.ktbgp.v202501.FlowspecAction.mark_dscp:type_name -> kentik.ktbgp.v202501.FlowspecActionMarkDSCP
	23, // 11: kentik.ktbgp.v202501.FlowspecAction.rt_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirect
	24, // 12: kentik.ktbgp.v202501.FlowspecAction.ip_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirect
	21, // 13: kentik.ktbgp.v202501.FlowspecAction.action_type:type_name -> kentik.ktbgp.v202501.FlowspecActionTerminalSample
	25, // 14: kentik.ktbgp.v202501.FlowspecAction.rt_copy:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopCopy
	26, // 15: kentik.ktbgp.v202501.FlowspecAction.regular_community:type_name -> kentik.ktbgp.v202501.FlowspecActionRegularCommunity
	27, // 16: kentik.ktbgp.v202501.FlowspecAction.extended_community:type_name -> kentik.ktbgp.v202501.FlowspecActionExtendedCommunity
	28, // 17: kentik.ktbgp.v202501.FlowspecAction.large_community:type_name -> kentik.ktbgp.v202501.FlowspecActionLargeCommunity
	17, // 18: kentik.ktbgp.v202501.FlowspecUpdate.match:type_name -> kentik.ktbgp.v202501.FlowspecMatch
	45, // 19: kentik.ktbgp.v202501.FlowspecUpdate.creation_time:type_name -> google.protobuf.Timestamp
	0,  // 20: kentik.ktbgp.v202501.FlowspecUpdate.inet_type:type_name -> kentik.ktbgp.v202501.InetType
	18, // 21: kentik.ktbgp.v202501.FlowspecUpdate.rate_bytes:type_name -> kentik.ktbgp.v202501.FlowspecActionTrafficRateBytes
	20, // 22: kentik.ktbgp.v202501.FlowspecUpdate.discard:type_name -> kentik.ktbgp.v202501.FlowspecActionDiscard
	22, // 23: kentik.ktbgp.v202501.FlowspecUpdate.mark_dscp:type_name -> kentik.ktbgp.v202501.FlowspecActionMarkDSCP
	23, // 24: kentik.ktbgp.v202501.FlowspecUpdate.rt_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirect
	24, // 25: kentik.ktbgp.v202501.FlowspecUpdate.ip_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirect
	19, // 26: kentik.ktbgp.v202501.FlowspecUpdate.accept:type_name -> kentik.ktbgp.v202501.FlowspecActionAccept
	21, // 27: kentik.ktbgp.v202501.FlowspecUpdate.action_type:type_name -> kentik.ktbgp.v202501.FlowspecActionTerminalSample
	25, // 28: kentik.ktbgp.v202501.FlowspecUpdate.rt_copy:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopCopy
	26, // 29: kentik.ktbgp.v202501.FlowspecUpdate.regular_community:type_name -> kentik.ktbgp.v202501.FlowspecActionRegularCommunity
	27, // 30: kentik.ktbgp.v202501.FlowspecUpdate.extended_community:type_name -> kentik.ktbgp.v202501.FlowspecActionExtendedCommunity
	28, // 31: kentik.ktbgp.v202501.FlowspecUpdate.large_community:type_name -> kentik.ktbgp.v202501.FlowspecActionLargeCommunity
	12, // 32: kentik.ktbgp.v202501.FlowspecUpdate.actions:type_name -> kentik.ktbgp.v202501.FlowspecAction
	13, // 33: kentik.ktbgp.v202501.FlowspecUpdates.update:type_name -> kentik.ktbgp.v202501.FlowspecUpdate
	29, // 34: kentik.ktbgp.v202501.RTBHUpdate.match:type_name -> kentik.ktbgp.v202501.RTBHMatch
	30, // 35: kentik.ktbgp.v202501.RTBHUpdate.action:type_name -> kentik.ktbgp.v202501.RTBHAction
	45, // 36: kentik.ktbgp.v202501.RTBHUpdate.creation_time:type_name -> google.protobuf.Timestamp
	0,  // 37: kentik.ktbgp.v202501.RTBHUpdate.inet_type:type_name -> kentik.ktbgp.v202501.InetType
	15, // 38: kentik.ktbgp.v202501.RTBHUpdates.update:type_name -> kentik.ktbgp.v202501.RTBHUpdate
	31, // 39: kentik.ktbgp.v202501.FlowspecMatch.ip_protocol:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 40: kentik.ktbgp.v202501.FlowspecMatch.dst_port:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 41: kentik.ktbgp.v202501.FlowspecMatch.src_port:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 42: kentik.ktbgp.v202501.FlowspecMatch.icmp_type:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 43: kentik.ktbgp.v202501.FlowspecMatch.icmp_code:type_name -> kentik.ktbgp.v202501.NumericFormula
	37, // 44: kentik.ktbgp.v202501.FlowspecMatch.tcp_flags:type_name -> kentik.ktbgp.v202501.TCPFlagsFormula
	31, // 45: kentik.ktbgp.v202501.FlowspecMatch.packet_length:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 46: kentik.ktbgp.v202501.FlowspecMatch.dscp:type_name -> kentik.ktbgp.v202501.NumericFormula
	34, // 47: kentik.ktbgp.v202501.FlowspecMatch.fragments:type_name -> kentik.ktbgp.v202501.FragmentFormula
	1,  // 48: kentik.ktbgp.v202501.FlowspecActionExtendedCommunity.route_type:type_name -> kentik.ktbgp.v202501.ExtendedCommunityRouteType
	32, // 49: kentik.ktbgp.v202501.NumericFormula.or:type_name -> kentik.ktbgp.v202501.NumericPredicateGroup
	33, // 50: kentik.ktbgp.v202501.NumericPredicateGroup.and:type_name -> kentik.ktbgp.v202501.NumericPredicate
	4,  // 51: kentik.ktbgp.v202501.NumericPredicate.operator:type_name -> kentik.ktbgp.v202501.NumericOp
	35, // 52: kentik.ktbgp.v202501.FragmentFormula.or:type_name -> kentik.ktbgp.v202501.FragmentPredicateGroup
	36, // 53: kentik.ktbgp.v202501.FragmentPredicateGroup.and:type_name -> kentik.ktbgp.v202501.FragmentPredicate
	5,  // 54: kentik.ktbgp.v202501.FragmentPredicate.operator:type_name -> kentik.ktbgp.v202501.BitwiseOp
	2,  // 55: kentik.ktbgp.v202501.FragmentPredicate.values:type_name -> kentik.ktbgp.v202501.Fragment
	38, // 56: kentik.ktbgp.v202501.TCPFlagsFormula.or:type_name -> kentik.ktbgp.v202501.TCPFlagsPredicateGroup
	39, // 57: kentik.ktbgp.v202501.TCPFlagsPredicateGroup.and:type_name -> kentik.ktbgp.v202501.TCPFlagsPredicate
	5,  // 58: kentik.ktbgp.v202501.TCPFlagsPredicate.operator:type_name -> kentik.ktbgp.v202501.BitwiseOp
	3,  // 59: kentik.ktbgp.v202501.TCPFlagsPredicate.values:type_name -> kentik.ktbgp.v202501.TCPFlag
	6,  // 60: kentik.ktbgp.v202501.UpdateResult.status:type_name -> kentik.ktbgp.v202501.AdvertStatus
	42, // 61: kentik.ktbgp.v202501.RouteServiceListRequest.filters:type_name -> kentik.ktbgp.v202501.RoutesFilter
	44, // 62: kentik.ktbgp.v202501.RouteServiceListResponse.result:type_name -> kentik.ktbgp.v202501.DeviceAdverts
	13, // 63: kentik.ktbgp.v202501.DeviceAdverts.flowspec:type_name -> kentik.ktbgp.v202501.FlowspecUpdate
	15, // 64: kentik.ktbgp.v202501.DeviceAdverts.rtbh:type_name -> kentik.ktbgp.v202501.RTBHUpdate
	7,  // 65: kentik.ktbgp.v202501.RouteService.Announce:input_type -> kentik.ktbgp.v202501.RouteServiceAnnounceRequest
	9,  // 66: kentik.ktbgp.v202501.RouteService.Withdraw:input_type -> kentik.ktbgp.v202501.RouteServiceWithdrawRequest
	41, // 67: kentik.ktbgp.v202501.RouteService.List:input_type -> kentik.ktbgp.v202501.RouteServiceListRequest
	8,  // 68: kentik.ktbgp.v202501.RouteService.Announce:output_type -> kentik.ktbgp.v202501.RouteServiceAnnounceResponse
	11, // 69: kentik.ktbgp.v202501.RouteService.Withdraw:output_type -> kentik.ktbgp.v202501.RouteServiceWithdrawResponse
	43, // 70: kentik.ktbgp.v202501.RouteService.List:output_type -> kentik.ktbgp.v202501.RouteServiceListResponse
	68, // [68:71] is the sub-list for method output_type
	65, // [65:68] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_kentik_ktbgp_v202501_route_service_proto_init() }
func file_kentik_ktbgp_v202501_route_service_proto_init() {
	if File_kentik_ktbgp_v202501_route_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteServiceAnnounceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteServiceAnnounceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteServiceWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteServiceWithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTBHUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTBHUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionTrafficRateBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionDiscard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionTerminalSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionMarkDSCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionRouteTargetRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionIPNextHopRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionIPNextHopCopy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionRegularCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionExtendedCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecActionLargeCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTBHMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTBHAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericPredicateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentPredicateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPFlagsFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPFlagsPredicateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPFlagsPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_ktbgp_v202501_route_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAdverts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RouteServiceAnnounceRequest_Flowspec)(nil),
		(*RouteServiceAnnounceRequest_Rtbh)(nil),
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Withdraw_Flowspec)(nil),
		(*Withdraw_Rtbh)(nil),
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FlowspecAction_Accept)(nil),
		(*FlowspecAction_Discard)(nil),
		(*FlowspecAction_RateBytes)(nil),
		(*FlowspecAction_MarkDscp)(nil),
		(*FlowspecAction_RtRedirect)(nil),
		(*FlowspecAction_IpRedirect)(nil),
		(*FlowspecAction_ActionType)(nil),
		(*FlowspecAction_RtCopy)(nil),
		(*FlowspecAction_RegularCommunity)(nil),
		(*FlowspecAction_ExtendedCommunity)(nil),
		(*FlowspecAction_LargeCommunity)(nil),
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*FlowspecUpdate_RateBytes)(nil),
		(*FlowspecUpdate_Discard)(nil),
		(*FlowspecUpdate_MarkDscp)(nil),
		(*FlowspecUpdate_RtRedirect)(nil),
		(*FlowspecUpdate_IpRedirect)(nil),
		(*FlowspecUpdate_Accept)(nil),
		(*FlowspecUpdate_ActionType)(nil),
		(*FlowspecUpdate_RtCopy)(nil),
		(*FlowspecUpdate_RegularCommunity)(nil),
		(*FlowspecUpdate_ExtendedCommunity)(nil),
		(*FlowspecUpdate_LargeCommunity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_ktbgp_v202501_route_service_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_ktbgp_v202501_route_service_proto_goTypes,
		DependencyIndexes: file_kentik_ktbgp_v202501_route_service_proto_depIdxs,
		EnumInfos:         file_kentik_ktbgp_v202501_route_service_proto_enumTypes,
		MessageInfos:      file_kentik_ktbgp_v202501_route_service_proto_msgTypes,
	}.Build()
	File_kentik_ktbgp_v202501_route_service_proto = out.File
	file_kentik_ktbgp_v202501_route_service_proto_rawDesc = nil
	file_kentik_ktbgp_v202501_route_service_proto_goTypes = nil
	file_kentik_ktbgp_v202501_route_service_proto_depIdxs = nil
}
