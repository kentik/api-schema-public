// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kentik/ktbgp/v202501/route_service.proto

package ktbgp

import (
	_ "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InetType int32

const (
	InetType_INET_TYPE_UNSPECIFIED InetType = 0
	InetType_INET_TYPE_IPV4        InetType = 1
	InetType_INET_TYPE_IPV6        InetType = 2
)

// Enum value maps for InetType.
var (
	InetType_name = map[int32]string{
		0: "INET_TYPE_UNSPECIFIED",
		1: "INET_TYPE_IPV4",
		2: "INET_TYPE_IPV6",
	}
	InetType_value = map[string]int32{
		"INET_TYPE_UNSPECIFIED": 0,
		"INET_TYPE_IPV4":        1,
		"INET_TYPE_IPV6":        2,
	}
)

func (x InetType) Enum() *InetType {
	p := new(InetType)
	*p = x
	return p
}

func (x InetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InetType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[0].Descriptor()
}

func (InetType) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[0]
}

func (x InetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InetType.Descriptor instead.
func (InetType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{0}
}

type ExtendedCommunityRouteType int32

const (
	ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED ExtendedCommunityRouteType = 0
	ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET      ExtendedCommunityRouteType = 1
	ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN      ExtendedCommunityRouteType = 2
)

// Enum value maps for ExtendedCommunityRouteType.
var (
	ExtendedCommunityRouteType_name = map[int32]string{
		0: "EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED",
		1: "EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET",
		2: "EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN",
	}
	ExtendedCommunityRouteType_value = map[string]int32{
		"EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED": 0,
		"EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET":      1,
		"EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN":      2,
	}
)

func (x ExtendedCommunityRouteType) Enum() *ExtendedCommunityRouteType {
	p := new(ExtendedCommunityRouteType)
	*p = x
	return p
}

func (x ExtendedCommunityRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtendedCommunityRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[1].Descriptor()
}

func (ExtendedCommunityRouteType) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[1]
}

func (x ExtendedCommunityRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtendedCommunityRouteType.Descriptor instead.
func (ExtendedCommunityRouteType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{1}
}

type Fragment int32

const (
	Fragment_FRAGMENT_UNSPECIFIED Fragment = 0
	Fragment_FRAGMENT_DF          Fragment = 1 // Don't Fragment
	Fragment_FRAGMENT_ISF         Fragment = 2 // Is a fragment other than the first
	Fragment_FRAGMENT_FF          Fragment = 3 // First Fragment
	Fragment_FRAGMENT_LF          Fragment = 4 // Last Fragment
)

// Enum value maps for Fragment.
var (
	Fragment_name = map[int32]string{
		0: "FRAGMENT_UNSPECIFIED",
		1: "FRAGMENT_DF",
		2: "FRAGMENT_ISF",
		3: "FRAGMENT_FF",
		4: "FRAGMENT_LF",
	}
	Fragment_value = map[string]int32{
		"FRAGMENT_UNSPECIFIED": 0,
		"FRAGMENT_DF":          1,
		"FRAGMENT_ISF":         2,
		"FRAGMENT_FF":          3,
		"FRAGMENT_LF":          4,
	}
)

func (x Fragment) Enum() *Fragment {
	p := new(Fragment)
	*p = x
	return p
}

func (x Fragment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fragment) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[2].Descriptor()
}

func (Fragment) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[2]
}

func (x Fragment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fragment.Descriptor instead.
func (Fragment) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{2}
}

type TCPFlag int32

const (
	TCPFlag_TCP_FLAG_UNSPECIFIED TCPFlag = 0
	TCPFlag_TCP_FLAG_FIN         TCPFlag = 1
	TCPFlag_TCP_FLAG_SYN         TCPFlag = 2
	TCPFlag_TCP_FLAG_RST         TCPFlag = 3
	TCPFlag_TCP_FLAG_PSH         TCPFlag = 4
	TCPFlag_TCP_FLAG_ACK         TCPFlag = 5
	TCPFlag_TCP_FLAG_URG         TCPFlag = 6
	TCPFlag_TCP_FLAG_ECE         TCPFlag = 7
	TCPFlag_TCP_FLAG_CWR         TCPFlag = 8
)

// Enum value maps for TCPFlag.
var (
	TCPFlag_name = map[int32]string{
		0: "TCP_FLAG_UNSPECIFIED",
		1: "TCP_FLAG_FIN",
		2: "TCP_FLAG_SYN",
		3: "TCP_FLAG_RST",
		4: "TCP_FLAG_PSH",
		5: "TCP_FLAG_ACK",
		6: "TCP_FLAG_URG",
		7: "TCP_FLAG_ECE",
		8: "TCP_FLAG_CWR",
	}
	TCPFlag_value = map[string]int32{
		"TCP_FLAG_UNSPECIFIED": 0,
		"TCP_FLAG_FIN":         1,
		"TCP_FLAG_SYN":         2,
		"TCP_FLAG_RST":         3,
		"TCP_FLAG_PSH":         4,
		"TCP_FLAG_ACK":         5,
		"TCP_FLAG_URG":         6,
		"TCP_FLAG_ECE":         7,
		"TCP_FLAG_CWR":         8,
	}
)

func (x TCPFlag) Enum() *TCPFlag {
	p := new(TCPFlag)
	*p = x
	return p
}

func (x TCPFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TCPFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[3].Descriptor()
}

func (TCPFlag) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[3]
}

func (x TCPFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TCPFlag.Descriptor instead.
func (TCPFlag) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{3}
}

type NumericOp int32

const (
	NumericOp_NUMERIC_OP_UNSPECIFIED            NumericOp = 0
	NumericOp_NUMERIC_OP_EQUALS                 NumericOp = 1
	NumericOp_NUMERIC_OP_NOT_EQUALS             NumericOp = 2
	NumericOp_NUMERIC_OP_LESS_THAN              NumericOp = 3
	NumericOp_NUMERIC_OP_GREATER_THAN           NumericOp = 4
	NumericOp_NUMERIC_OP_LESS_THAN_OR_EQUALS    NumericOp = 5
	NumericOp_NUMERIC_OP_GREATER_THAN_OR_EQUALS NumericOp = 6
)

// Enum value maps for NumericOp.
var (
	NumericOp_name = map[int32]string{
		0: "NUMERIC_OP_UNSPECIFIED",
		1: "NUMERIC_OP_EQUALS",
		2: "NUMERIC_OP_NOT_EQUALS",
		3: "NUMERIC_OP_LESS_THAN",
		4: "NUMERIC_OP_GREATER_THAN",
		5: "NUMERIC_OP_LESS_THAN_OR_EQUALS",
		6: "NUMERIC_OP_GREATER_THAN_OR_EQUALS",
	}
	NumericOp_value = map[string]int32{
		"NUMERIC_OP_UNSPECIFIED":            0,
		"NUMERIC_OP_EQUALS":                 1,
		"NUMERIC_OP_NOT_EQUALS":             2,
		"NUMERIC_OP_LESS_THAN":              3,
		"NUMERIC_OP_GREATER_THAN":           4,
		"NUMERIC_OP_LESS_THAN_OR_EQUALS":    5,
		"NUMERIC_OP_GREATER_THAN_OR_EQUALS": 6,
	}
)

func (x NumericOp) Enum() *NumericOp {
	p := new(NumericOp)
	*p = x
	return p
}

func (x NumericOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumericOp) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[4].Descriptor()
}

func (NumericOp) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[4]
}

func (x NumericOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumericOp.Descriptor instead.
func (NumericOp) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{4}
}

type BitwiseOp int32

const (
	BitwiseOp_BITWISE_OP_UNSPECIFIED BitwiseOp = 0
	BitwiseOp_BITWISE_OP_ANY         BitwiseOp = 1 // (data & value) != 0
	BitwiseOp_BITWISE_OP_NONE        BitwiseOp = 2 // (data & value) == 0
	BitwiseOp_BITWISE_OP_ALL         BitwiseOp = 3 // (data & value) == value
	BitwiseOp_BITWISE_OP_NOT_ALL     BitwiseOp = 4 // (data & value) != value
)

// Enum value maps for BitwiseOp.
var (
	BitwiseOp_name = map[int32]string{
		0: "BITWISE_OP_UNSPECIFIED",
		1: "BITWISE_OP_ANY",
		2: "BITWISE_OP_NONE",
		3: "BITWISE_OP_ALL",
		4: "BITWISE_OP_NOT_ALL",
	}
	BitwiseOp_value = map[string]int32{
		"BITWISE_OP_UNSPECIFIED": 0,
		"BITWISE_OP_ANY":         1,
		"BITWISE_OP_NONE":        2,
		"BITWISE_OP_ALL":         3,
		"BITWISE_OP_NOT_ALL":     4,
	}
)

func (x BitwiseOp) Enum() *BitwiseOp {
	p := new(BitwiseOp)
	*p = x
	return p
}

func (x BitwiseOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitwiseOp) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[5].Descriptor()
}

func (BitwiseOp) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[5]
}

func (x BitwiseOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitwiseOp.Descriptor instead.
func (BitwiseOp) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{5}
}

type AdvertStatus int32

const (
	AdvertStatus_ADVERT_STATUS_UNSPECIFIED AdvertStatus = 0
	AdvertStatus_ADVERT_STATUS_ANNOUNCED   AdvertStatus = 1
	AdvertStatus_ADVERT_STATUS_WITHDRAWN   AdvertStatus = 2
	AdvertStatus_ADVERT_STATUS_NO_SESSION  AdvertStatus = 4 // when we cannot find the chf-bgp instance
	AdvertStatus_ADVERT_STATUS_FAILED      AdvertStatus = 3 // when we failed to parse or send the update
)

// Enum value maps for AdvertStatus.
var (
	AdvertStatus_name = map[int32]string{
		0: "ADVERT_STATUS_UNSPECIFIED",
		1: "ADVERT_STATUS_ANNOUNCED",
		2: "ADVERT_STATUS_WITHDRAWN",
		4: "ADVERT_STATUS_NO_SESSION",
		3: "ADVERT_STATUS_FAILED",
	}
	AdvertStatus_value = map[string]int32{
		"ADVERT_STATUS_UNSPECIFIED": 0,
		"ADVERT_STATUS_ANNOUNCED":   1,
		"ADVERT_STATUS_WITHDRAWN":   2,
		"ADVERT_STATUS_NO_SESSION":  4,
		"ADVERT_STATUS_FAILED":      3,
	}
)

func (x AdvertStatus) Enum() *AdvertStatus {
	p := new(AdvertStatus)
	*p = x
	return p
}

func (x AdvertStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvertStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_ktbgp_v202501_route_service_proto_enumTypes[6].Descriptor()
}

func (AdvertStatus) Type() protoreflect.EnumType {
	return &file_kentik_ktbgp_v202501_route_service_proto_enumTypes[6]
}

func (x AdvertStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvertStatus.Descriptor instead.
func (AdvertStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{6}
}

type RouteServiceAnnounceRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	DeviceIds []uint64               `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	// Types that are valid to be assigned to Update:
	//
	//	*RouteServiceAnnounceRequest_Flowspec
	//	*RouteServiceAnnounceRequest_Rtbh
	Update        isRouteServiceAnnounceRequest_Update `protobuf_oneof:"update"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteServiceAnnounceRequest) Reset() {
	*x = RouteServiceAnnounceRequest{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteServiceAnnounceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceAnnounceRequest) ProtoMessage() {}

func (x *RouteServiceAnnounceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceAnnounceRequest.ProtoReflect.Descriptor instead.
func (*RouteServiceAnnounceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{0}
}

func (x *RouteServiceAnnounceRequest) GetDeviceIds() []uint64 {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *RouteServiceAnnounceRequest) GetUpdate() isRouteServiceAnnounceRequest_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *RouteServiceAnnounceRequest) GetFlowspec() *FlowspecUpdate {
	if x != nil {
		if x, ok := x.Update.(*RouteServiceAnnounceRequest_Flowspec); ok {
			return x.Flowspec
		}
	}
	return nil
}

func (x *RouteServiceAnnounceRequest) GetRtbh() *RTBHUpdate {
	if x != nil {
		if x, ok := x.Update.(*RouteServiceAnnounceRequest_Rtbh); ok {
			return x.Rtbh
		}
	}
	return nil
}

type isRouteServiceAnnounceRequest_Update interface {
	isRouteServiceAnnounceRequest_Update()
}

type RouteServiceAnnounceRequest_Flowspec struct {
	Flowspec *FlowspecUpdate `protobuf:"bytes,11,opt,name=flowspec,proto3,oneof"`
}

type RouteServiceAnnounceRequest_Rtbh struct {
	Rtbh *RTBHUpdate `protobuf:"bytes,12,opt,name=rtbh,proto3,oneof"`
}

func (*RouteServiceAnnounceRequest_Flowspec) isRouteServiceAnnounceRequest_Update() {}

func (*RouteServiceAnnounceRequest_Rtbh) isRouteServiceAnnounceRequest_Update() {}

type RouteServiceAnnounceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*UpdateResult        `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteServiceAnnounceResponse) Reset() {
	*x = RouteServiceAnnounceResponse{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteServiceAnnounceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceAnnounceResponse) ProtoMessage() {}

func (x *RouteServiceAnnounceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceAnnounceResponse.ProtoReflect.Descriptor instead.
func (*RouteServiceAnnounceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{1}
}

func (x *RouteServiceAnnounceResponse) GetResults() []*UpdateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type RouteServiceWithdrawRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceIds     []uint64               `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	Withdraw      *Withdraw              `protobuf:"bytes,2,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteServiceWithdrawRequest) Reset() {
	*x = RouteServiceWithdrawRequest{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteServiceWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceWithdrawRequest) ProtoMessage() {}

func (x *RouteServiceWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceWithdrawRequest.ProtoReflect.Descriptor instead.
func (*RouteServiceWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{2}
}

func (x *RouteServiceWithdrawRequest) GetDeviceIds() []uint64 {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *RouteServiceWithdrawRequest) GetWithdraw() *Withdraw {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

type Withdraw struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Withdraw:
	//
	//	*Withdraw_Flowspec
	//	*Withdraw_Rtbh
	Withdraw      isWithdraw_Withdraw `protobuf_oneof:"withdraw"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{3}
}

func (x *Withdraw) GetWithdraw() isWithdraw_Withdraw {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

func (x *Withdraw) GetFlowspec() *FlowspecMatch {
	if x != nil {
		if x, ok := x.Withdraw.(*Withdraw_Flowspec); ok {
			return x.Flowspec
		}
	}
	return nil
}

func (x *Withdraw) GetRtbh() *RTBHMatch {
	if x != nil {
		if x, ok := x.Withdraw.(*Withdraw_Rtbh); ok {
			return x.Rtbh
		}
	}
	return nil
}

type isWithdraw_Withdraw interface {
	isWithdraw_Withdraw()
}

type Withdraw_Flowspec struct {
	Flowspec *FlowspecMatch `protobuf:"bytes,1,opt,name=flowspec,proto3,oneof"`
}

type Withdraw_Rtbh struct {
	Rtbh *RTBHMatch `protobuf:"bytes,2,opt,name=rtbh,proto3,oneof"`
}

func (*Withdraw_Flowspec) isWithdraw_Withdraw() {}

func (*Withdraw_Rtbh) isWithdraw_Withdraw() {}

type RouteServiceWithdrawResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*UpdateResult        `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteServiceWithdrawResponse) Reset() {
	*x = RouteServiceWithdrawResponse{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteServiceWithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceWithdrawResponse) ProtoMessage() {}

func (x *RouteServiceWithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceWithdrawResponse.ProtoReflect.Descriptor instead.
func (*RouteServiceWithdrawResponse) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{4}
}

func (x *RouteServiceWithdrawResponse) GetResults() []*UpdateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FlowspecAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// action represents the traffic treatment actions referring
	// to Extended Community types and sub-types defined in RFC 8955:
	// https://datatracker.ietf.org/doc/html/rfc8955#name-traffic-filtering-actions
	// and other related documents
	//
	// Types that are valid to be assigned to Action:
	//
	//	*FlowspecAction_Accept
	//	*FlowspecAction_Discard
	//	*FlowspecAction_RateBytes
	//	*FlowspecAction_MarkDscp
	//	*FlowspecAction_RtRedirect
	//	*FlowspecAction_IpRedirect
	//	*FlowspecAction_ActionType
	//	*FlowspecAction_RtCopy
	//	*FlowspecAction_RegularCommunity
	//	*FlowspecAction_ExtendedCommunity
	//	*FlowspecAction_LargeCommunity
	Action        isFlowspecAction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecAction) Reset() {
	*x = FlowspecAction{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecAction) ProtoMessage() {}

func (x *FlowspecAction) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecAction.ProtoReflect.Descriptor instead.
func (*FlowspecAction) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{5}
}

func (x *FlowspecAction) GetAction() isFlowspecAction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FlowspecAction) GetAccept() *FlowspecActionAccept {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_Accept); ok {
			return x.Accept
		}
	}
	return nil
}

func (x *FlowspecAction) GetDiscard() *FlowspecActionDiscard {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_Discard); ok {
			return x.Discard
		}
	}
	return nil
}

func (x *FlowspecAction) GetRateBytes() *FlowspecActionTrafficRateBytes {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_RateBytes); ok {
			return x.RateBytes
		}
	}
	return nil
}

func (x *FlowspecAction) GetMarkDscp() *FlowspecActionMarkDSCP {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_MarkDscp); ok {
			return x.MarkDscp
		}
	}
	return nil
}

func (x *FlowspecAction) GetRtRedirect() *FlowspecActionRouteTargetRedirect {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_RtRedirect); ok {
			return x.RtRedirect
		}
	}
	return nil
}

func (x *FlowspecAction) GetIpRedirect() *FlowspecActionIPNextHopRedirect {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_IpRedirect); ok {
			return x.IpRedirect
		}
	}
	return nil
}

func (x *FlowspecAction) GetActionType() *FlowspecActionTerminalSample {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_ActionType); ok {
			return x.ActionType
		}
	}
	return nil
}

func (x *FlowspecAction) GetRtCopy() *FlowspecActionIPNextHopCopy {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_RtCopy); ok {
			return x.RtCopy
		}
	}
	return nil
}

func (x *FlowspecAction) GetRegularCommunity() *FlowspecActionRegularCommunity {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_RegularCommunity); ok {
			return x.RegularCommunity
		}
	}
	return nil
}

func (x *FlowspecAction) GetExtendedCommunity() *FlowspecActionExtendedCommunity {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_ExtendedCommunity); ok {
			return x.ExtendedCommunity
		}
	}
	return nil
}

func (x *FlowspecAction) GetLargeCommunity() *FlowspecActionLargeCommunity {
	if x != nil {
		if x, ok := x.Action.(*FlowspecAction_LargeCommunity); ok {
			return x.LargeCommunity
		}
	}
	return nil
}

type isFlowspecAction_Action interface {
	isFlowspecAction_Action()
}

type FlowspecAction_Accept struct {
	Accept *FlowspecActionAccept `protobuf:"bytes,1,opt,name=accept,proto3,oneof"`
}

type FlowspecAction_Discard struct {
	Discard *FlowspecActionDiscard `protobuf:"bytes,2,opt,name=discard,proto3,oneof"`
}

type FlowspecAction_RateBytes struct {
	RateBytes *FlowspecActionTrafficRateBytes `protobuf:"bytes,3,opt,name=rate_bytes,json=rateBytes,proto3,oneof"`
}

type FlowspecAction_MarkDscp struct {
	MarkDscp *FlowspecActionMarkDSCP `protobuf:"bytes,4,opt,name=mark_dscp,json=markDscp,proto3,oneof"`
}

type FlowspecAction_RtRedirect struct {
	RtRedirect *FlowspecActionRouteTargetRedirect `protobuf:"bytes,5,opt,name=rt_redirect,json=rtRedirect,proto3,oneof"`
}

type FlowspecAction_IpRedirect struct {
	IpRedirect *FlowspecActionIPNextHopRedirect `protobuf:"bytes,6,opt,name=ip_redirect,json=ipRedirect,proto3,oneof"`
}

type FlowspecAction_ActionType struct {
	ActionType *FlowspecActionTerminalSample `protobuf:"bytes,7,opt,name=action_type,json=actionType,proto3,oneof"`
}

type FlowspecAction_RtCopy struct {
	RtCopy *FlowspecActionIPNextHopCopy `protobuf:"bytes,8,opt,name=rt_copy,json=rtCopy,proto3,oneof"`
}

type FlowspecAction_RegularCommunity struct {
	RegularCommunity *FlowspecActionRegularCommunity `protobuf:"bytes,9,opt,name=regular_community,json=regularCommunity,proto3,oneof"`
}

type FlowspecAction_ExtendedCommunity struct {
	ExtendedCommunity *FlowspecActionExtendedCommunity `protobuf:"bytes,10,opt,name=extended_community,json=extendedCommunity,proto3,oneof"`
}

type FlowspecAction_LargeCommunity struct {
	LargeCommunity *FlowspecActionLargeCommunity `protobuf:"bytes,11,opt,name=large_community,json=largeCommunity,proto3,oneof"`
}

func (*FlowspecAction_Accept) isFlowspecAction_Action() {}

func (*FlowspecAction_Discard) isFlowspecAction_Action() {}

func (*FlowspecAction_RateBytes) isFlowspecAction_Action() {}

func (*FlowspecAction_MarkDscp) isFlowspecAction_Action() {}

func (*FlowspecAction_RtRedirect) isFlowspecAction_Action() {}

func (*FlowspecAction_IpRedirect) isFlowspecAction_Action() {}

func (*FlowspecAction_ActionType) isFlowspecAction_Action() {}

func (*FlowspecAction_RtCopy) isFlowspecAction_Action() {}

func (*FlowspecAction_RegularCommunity) isFlowspecAction_Action() {}

func (*FlowspecAction_ExtendedCommunity) isFlowspecAction_Action() {}

func (*FlowspecAction_LargeCommunity) isFlowspecAction_Action() {}

type FlowspecUpdate struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Match        *FlowspecMatch         `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
	Inet     string   `protobuf:"bytes,3,opt,name=inet,proto3" json:"inet,omitempty"` // deprecated: use inet_type instead
	InetType InetType `protobuf:"varint,6,opt,name=inet_type,json=inetType,proto3,enum=kentik.ktbgp.v202501.InetType" json:"inet_type,omitempty"`
	Key      string   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"` // mainly used for internal purposes
	// action represents the traffic treatment actions referring
	// to Extended Community types and sub-types defined in RFC 8955:
	// https://datatracker.ietf.org/doc/html/rfc8955#name-traffic-filtering-actions
	// and other related documents
	//
	// Types that are valid to be assigned to Action:
	//
	//	*FlowspecUpdate_RateBytes
	//	*FlowspecUpdate_Discard
	//	*FlowspecUpdate_MarkDscp
	//	*FlowspecUpdate_RtRedirect
	//	*FlowspecUpdate_IpRedirect
	//	*FlowspecUpdate_Accept
	//	*FlowspecUpdate_ActionType
	//	*FlowspecUpdate_RtCopy
	//	*FlowspecUpdate_RegularCommunity
	//	*FlowspecUpdate_ExtendedCommunity
	//	*FlowspecUpdate_LargeCommunity
	Action  isFlowspecUpdate_Action `protobuf_oneof:"action"`
	Actions []*FlowspecAction       `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
	Terminal bool `protobuf:"varint,4,opt,name=terminal,proto3" json:"terminal,omitempty"` // true if this is a terminal action
	// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
	Sample        bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"` // true to enable traffic sampling and logging
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecUpdate) Reset() {
	*x = FlowspecUpdate{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecUpdate) ProtoMessage() {}

func (x *FlowspecUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecUpdate.ProtoReflect.Descriptor instead.
func (*FlowspecUpdate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{6}
}

func (x *FlowspecUpdate) GetMatch() *FlowspecMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FlowspecUpdate) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
func (x *FlowspecUpdate) GetInet() string {
	if x != nil {
		return x.Inet
	}
	return ""
}

func (x *FlowspecUpdate) GetInetType() InetType {
	if x != nil {
		return x.InetType
	}
	return InetType_INET_TYPE_UNSPECIFIED
}

func (x *FlowspecUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FlowspecUpdate) GetAction() isFlowspecUpdate_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *FlowspecUpdate) GetRateBytes() *FlowspecActionTrafficRateBytes {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_RateBytes); ok {
			return x.RateBytes
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetDiscard() *FlowspecActionDiscard {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_Discard); ok {
			return x.Discard
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetMarkDscp() *FlowspecActionMarkDSCP {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_MarkDscp); ok {
			return x.MarkDscp
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetRtRedirect() *FlowspecActionRouteTargetRedirect {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_RtRedirect); ok {
			return x.RtRedirect
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetIpRedirect() *FlowspecActionIPNextHopRedirect {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_IpRedirect); ok {
			return x.IpRedirect
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetAccept() *FlowspecActionAccept {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_Accept); ok {
			return x.Accept
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetActionType() *FlowspecActionTerminalSample {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_ActionType); ok {
			return x.ActionType
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetRtCopy() *FlowspecActionIPNextHopCopy {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_RtCopy); ok {
			return x.RtCopy
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetRegularCommunity() *FlowspecActionRegularCommunity {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_RegularCommunity); ok {
			return x.RegularCommunity
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetExtendedCommunity() *FlowspecActionExtendedCommunity {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_ExtendedCommunity); ok {
			return x.ExtendedCommunity
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetLargeCommunity() *FlowspecActionLargeCommunity {
	if x != nil {
		if x, ok := x.Action.(*FlowspecUpdate_LargeCommunity); ok {
			return x.LargeCommunity
		}
	}
	return nil
}

func (x *FlowspecUpdate) GetActions() []*FlowspecAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
func (x *FlowspecUpdate) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
func (x *FlowspecUpdate) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

type isFlowspecUpdate_Action interface {
	isFlowspecUpdate_Action()
}

type FlowspecUpdate_RateBytes struct {
	RateBytes *FlowspecActionTrafficRateBytes `protobuf:"bytes,11,opt,name=rate_bytes,json=rateBytes,proto3,oneof"`
}

type FlowspecUpdate_Discard struct {
	Discard *FlowspecActionDiscard `protobuf:"bytes,12,opt,name=discard,proto3,oneof"`
}

type FlowspecUpdate_MarkDscp struct {
	MarkDscp *FlowspecActionMarkDSCP `protobuf:"bytes,13,opt,name=mark_dscp,json=markDscp,proto3,oneof"`
}

type FlowspecUpdate_RtRedirect struct {
	RtRedirect *FlowspecActionRouteTargetRedirect `protobuf:"bytes,14,opt,name=rt_redirect,json=rtRedirect,proto3,oneof"`
}

type FlowspecUpdate_IpRedirect struct {
	IpRedirect *FlowspecActionIPNextHopRedirect `protobuf:"bytes,15,opt,name=ip_redirect,json=ipRedirect,proto3,oneof"`
}

type FlowspecUpdate_Accept struct {
	Accept *FlowspecActionAccept `protobuf:"bytes,16,opt,name=accept,proto3,oneof"`
}

type FlowspecUpdate_ActionType struct {
	ActionType *FlowspecActionTerminalSample `protobuf:"bytes,17,opt,name=action_type,json=actionType,proto3,oneof"`
}

type FlowspecUpdate_RtCopy struct {
	RtCopy *FlowspecActionIPNextHopCopy `protobuf:"bytes,18,opt,name=rt_copy,json=rtCopy,proto3,oneof"`
}

type FlowspecUpdate_RegularCommunity struct {
	RegularCommunity *FlowspecActionRegularCommunity `protobuf:"bytes,19,opt,name=regular_community,json=regularCommunity,proto3,oneof"`
}

type FlowspecUpdate_ExtendedCommunity struct {
	ExtendedCommunity *FlowspecActionExtendedCommunity `protobuf:"bytes,20,opt,name=extended_community,json=extendedCommunity,proto3,oneof"`
}

type FlowspecUpdate_LargeCommunity struct {
	LargeCommunity *FlowspecActionLargeCommunity `protobuf:"bytes,21,opt,name=large_community,json=largeCommunity,proto3,oneof"`
}

func (*FlowspecUpdate_RateBytes) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_Discard) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_MarkDscp) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_RtRedirect) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_IpRedirect) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_Accept) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_ActionType) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_RtCopy) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_RegularCommunity) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_ExtendedCommunity) isFlowspecUpdate_Action() {}

func (*FlowspecUpdate_LargeCommunity) isFlowspecUpdate_Action() {}

type FlowspecUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Update        []*FlowspecUpdate      `protobuf:"bytes,1,rep,name=update,proto3" json:"update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecUpdates) Reset() {
	*x = FlowspecUpdates{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecUpdates) ProtoMessage() {}

func (x *FlowspecUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecUpdates.ProtoReflect.Descriptor instead.
func (*FlowspecUpdates) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{7}
}

func (x *FlowspecUpdates) GetUpdate() []*FlowspecUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

type RTBHUpdate struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Match        *RTBHMatch             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action       *RTBHAction            `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
	Inet          string   `protobuf:"bytes,4,opt,name=inet,proto3" json:"inet,omitempty"` // deprecated: use inet_type instead
	InetType      InetType `protobuf:"varint,5,opt,name=inet_type,json=inetType,proto3,enum=kentik.ktbgp.v202501.InetType" json:"inet_type,omitempty"`
	Key           string   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"` // mainly used for internal purposes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTBHUpdate) Reset() {
	*x = RTBHUpdate{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTBHUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHUpdate) ProtoMessage() {}

func (x *RTBHUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHUpdate.ProtoReflect.Descriptor instead.
func (*RTBHUpdate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{8}
}

func (x *RTBHUpdate) GetMatch() *RTBHMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RTBHUpdate) GetAction() *RTBHAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RTBHUpdate) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

// Deprecated: Marked as deprecated in kentik/ktbgp/v202501/route_service.proto.
func (x *RTBHUpdate) GetInet() string {
	if x != nil {
		return x.Inet
	}
	return ""
}

func (x *RTBHUpdate) GetInetType() InetType {
	if x != nil {
		return x.InetType
	}
	return InetType_INET_TYPE_UNSPECIFIED
}

func (x *RTBHUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RTBHUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Update        []*RTBHUpdate          `protobuf:"bytes,1,rep,name=update,proto3" json:"update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTBHUpdates) Reset() {
	*x = RTBHUpdates{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTBHUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHUpdates) ProtoMessage() {}

func (x *RTBHUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHUpdates.ProtoReflect.Descriptor instead.
func (*RTBHUpdates) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{9}
}

func (x *RTBHUpdates) GetUpdate() []*RTBHUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

// FlowspecMatch represents the traffic filtering criteria encoded
// as Flow Specification NLRI as per RFC 8955:
// https://datatracker.ietf.org/doc/html/rfc8955#name-dissemination-of-ipv4-flow-
// and other related documents.
type FlowspecMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstPrefix     string                 `protobuf:"bytes,1,opt,name=dst_prefix,json=dstPrefix,proto3" json:"dst_prefix,omitempty"` // IPv4 or IPv6 CIDR prefix to match
	SrcPrefix     string                 `protobuf:"bytes,2,opt,name=src_prefix,json=srcPrefix,proto3" json:"src_prefix,omitempty"` // IPv4 or IPv6 CIDR prefix to match
	IpProtocol    *NumericFormula        `protobuf:"bytes,3,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty"`
	DstPort       *NumericFormula        `protobuf:"bytes,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	SrcPort       *NumericFormula        `protobuf:"bytes,6,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	IcmpType      *NumericFormula        `protobuf:"bytes,7,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode      *NumericFormula        `protobuf:"bytes,8,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	TcpFlags      *TCPFlagsFormula       `protobuf:"bytes,9,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	PacketLength  *NumericFormula        `protobuf:"bytes,10,opt,name=packet_length,json=packetLength,proto3" json:"packet_length,omitempty"`
	Dscp          *NumericFormula        `protobuf:"bytes,11,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Fragments     *FragmentFormula       `protobuf:"bytes,12,opt,name=fragments,proto3" json:"fragments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecMatch) Reset() {
	*x = FlowspecMatch{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecMatch) ProtoMessage() {}

func (x *FlowspecMatch) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecMatch.ProtoReflect.Descriptor instead.
func (*FlowspecMatch) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{10}
}

func (x *FlowspecMatch) GetDstPrefix() string {
	if x != nil {
		return x.DstPrefix
	}
	return ""
}

func (x *FlowspecMatch) GetSrcPrefix() string {
	if x != nil {
		return x.SrcPrefix
	}
	return ""
}

func (x *FlowspecMatch) GetIpProtocol() *NumericFormula {
	if x != nil {
		return x.IpProtocol
	}
	return nil
}

func (x *FlowspecMatch) GetDstPort() *NumericFormula {
	if x != nil {
		return x.DstPort
	}
	return nil
}

func (x *FlowspecMatch) GetSrcPort() *NumericFormula {
	if x != nil {
		return x.SrcPort
	}
	return nil
}

func (x *FlowspecMatch) GetIcmpType() *NumericFormula {
	if x != nil {
		return x.IcmpType
	}
	return nil
}

func (x *FlowspecMatch) GetIcmpCode() *NumericFormula {
	if x != nil {
		return x.IcmpCode
	}
	return nil
}

func (x *FlowspecMatch) GetTcpFlags() *TCPFlagsFormula {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

func (x *FlowspecMatch) GetPacketLength() *NumericFormula {
	if x != nil {
		return x.PacketLength
	}
	return nil
}

func (x *FlowspecMatch) GetDscp() *NumericFormula {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *FlowspecMatch) GetFragments() *FragmentFormula {
	if x != nil {
		return x.Fragments
	}
	return nil
}

// FlowspecActionTrafficRateBytes specifies the maximum traffic rate
// in bytes per second.
//
// Extended Community type and sub-type: 0x8006
// https://datatracker.ietf.org/doc/html/rfc8955#traffic_rate_in_bytes
type FlowspecActionTrafficRateBytes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bytes_per_second must be greater than 0.
	//
	// See FlowspecActionDiscard for discarding traffic.
	BytesPerSecond float32 `protobuf:"fixed32,1,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlowspecActionTrafficRateBytes) Reset() {
	*x = FlowspecActionTrafficRateBytes{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionTrafficRateBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionTrafficRateBytes) ProtoMessage() {}

func (x *FlowspecActionTrafficRateBytes) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionTrafficRateBytes.ProtoReflect.Descriptor instead.
func (*FlowspecActionTrafficRateBytes) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{11}
}

func (x *FlowspecActionTrafficRateBytes) GetBytesPerSecond() float32 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

// FlowspecActionAccept specifies that the traffic should be accepted.
// https://datatracker.ietf.org/doc/html/rfc8955
type FlowspecActionAccept struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionAccept) Reset() {
	*x = FlowspecActionAccept{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionAccept) ProtoMessage() {}

func (x *FlowspecActionAccept) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionAccept.ProtoReflect.Descriptor instead.
func (*FlowspecActionAccept) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{12}
}

// FlowspecActionDiscard specifies that the traffic should be discarded.
//
// This is a special case of FlowspecActionTrafficRateBytes with 0 bytes per second.
// Extended Community type and sub-type: 0x8006
// https://datatracker.ietf.org/doc/html/rfc8955#traffic_rate_in_bytes
type FlowspecActionDiscard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionDiscard) Reset() {
	*x = FlowspecActionDiscard{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionDiscard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionDiscard) ProtoMessage() {}

func (x *FlowspecActionDiscard) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionDiscard.ProtoReflect.Descriptor instead.
func (*FlowspecActionDiscard) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{13}
}

// FlowspecActionTerminalSample specifies that the traffic action extended community.
//
// terminal, sample or sample-terminal action types.
// https://datatracker.ietf.org/doc/html/rfc8955#name-traffic-action-traffic-acti
type FlowspecActionTerminalSample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Terminal      bool                   `protobuf:"varint,1,opt,name=terminal,proto3" json:"terminal,omitempty"`
	Sample        bool                   `protobuf:"varint,2,opt,name=sample,proto3" json:"sample,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionTerminalSample) Reset() {
	*x = FlowspecActionTerminalSample{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionTerminalSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionTerminalSample) ProtoMessage() {}

func (x *FlowspecActionTerminalSample) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionTerminalSample.ProtoReflect.Descriptor instead.
func (*FlowspecActionTerminalSample) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{14}
}

func (x *FlowspecActionTerminalSample) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (x *FlowspecActionTerminalSample) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

// FlowspecActionMarkDSCP instructs a system to modify the DSCP bits in the IP header.
//
// Extended Community type and sub-type: 0x8009
// https://datatracker.ietf.org/doc/html/rfc8955#traffic_marking_subtype
type FlowspecActionMarkDSCP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dscp          uint32                 `protobuf:"varint,1,opt,name=dscp,proto3" json:"dscp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionMarkDSCP) Reset() {
	*x = FlowspecActionMarkDSCP{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionMarkDSCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionMarkDSCP) ProtoMessage() {}

func (x *FlowspecActionMarkDSCP) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionMarkDSCP.ProtoReflect.Descriptor instead.
func (*FlowspecActionMarkDSCP) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{15}
}

func (x *FlowspecActionMarkDSCP) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

// FlowspecActionRouteTargetRedirect allows the traffic to be redirected to a VRF
// routing instance that lists the specified route-target in its import policy.
//
// Depending on the contents of the message, this will be encoded as:
// Extended Community type and sub-type: 0x8008 (2-octet ASN)
// or
// Extended Community type and sub-type: 0x8208 (4-octet ASN)
// https://datatracker.ietf.org/doc/html/rfc8955#rt_redirect_action_subtype
type FlowspecActionRouteTargetRedirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If 32 bits are used for the ASN, the route target can only be 16 bits long
	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// If 32 bits are used for the route target, the asn can only be 16 bits long
	RouteTarget   uint32 `protobuf:"varint,2,opt,name=route_target,json=routeTarget,proto3" json:"route_target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionRouteTargetRedirect) Reset() {
	*x = FlowspecActionRouteTargetRedirect{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionRouteTargetRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionRouteTargetRedirect) ProtoMessage() {}

func (x *FlowspecActionRouteTargetRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionRouteTargetRedirect.ProtoReflect.Descriptor instead.
func (*FlowspecActionRouteTargetRedirect) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{16}
}

func (x *FlowspecActionRouteTargetRedirect) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *FlowspecActionRouteTargetRedirect) GetRouteTarget() uint32 {
	if x != nil {
		return x.RouteTarget
	}
	return 0
}

// FlowspecActionIPNextHopRedirect allows the traffic to be redirected
// to a specific Next Hop IP address.
//
// Extended Community type and sub-type: 0x0800
//
// The target next-hop address refers to the 'Network Address of Next-Hop' field
// of the associated NLRI.
// https://datatracker.ietf.org/doc/html/draft-simpson-idr-flowspec-redirect
type FlowspecActionIPNextHopRedirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 or IPv6 address to redirect to
	NextHop       string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionIPNextHopRedirect) Reset() {
	*x = FlowspecActionIPNextHopRedirect{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionIPNextHopRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionIPNextHopRedirect) ProtoMessage() {}

func (x *FlowspecActionIPNextHopRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionIPNextHopRedirect.ProtoReflect.Descriptor instead.
func (*FlowspecActionIPNextHopRedirect) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{17}
}

func (x *FlowspecActionIPNextHopRedirect) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// FlowspecActionIPNextHopCopy allows the traffic to be copied
// to a specific Next Hop IP address.
//
// Extended Community type and sub-type: 0x0800 with least-significant bit 'C' set to 1
//
// The target next-hop address refers to the 'Network Address of Next-Hop' field
// of the associated NLRI.
// https://datatracker.ietf.org/doc/html/draft-simpson-idr-flowspec-redirect
type FlowspecActionIPNextHopCopy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 or IPv6 address to copy to
	NextHop       string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionIPNextHopCopy) Reset() {
	*x = FlowspecActionIPNextHopCopy{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionIPNextHopCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionIPNextHopCopy) ProtoMessage() {}

func (x *FlowspecActionIPNextHopCopy) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionIPNextHopCopy.ProtoReflect.Descriptor instead.
func (*FlowspecActionIPNextHopCopy) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{18}
}

func (x *FlowspecActionIPNextHopCopy) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// FlowspecActionRegularCommunity
// Extenstion of the two-octed AS numbers as four-octed entinties.
// https://datatracker.ietf.org/doc/html/rfc6793
type FlowspecActionRegularCommunity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asn1          uint32                 `protobuf:"varint,1,opt,name=asn1,proto3" json:"asn1,omitempty"`
	Asn2          uint32                 `protobuf:"varint,2,opt,name=asn2,proto3" json:"asn2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionRegularCommunity) Reset() {
	*x = FlowspecActionRegularCommunity{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionRegularCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionRegularCommunity) ProtoMessage() {}

func (x *FlowspecActionRegularCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionRegularCommunity.ProtoReflect.Descriptor instead.
func (*FlowspecActionRegularCommunity) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{19}
}

func (x *FlowspecActionRegularCommunity) GetAsn1() uint32 {
	if x != nil {
		return x.Asn1
	}
	return 0
}

func (x *FlowspecActionRegularCommunity) GetAsn2() uint32 {
	if x != nil {
		return x.Asn2
	}
	return 0
}

// FlowspecActionExtendedCommunity
// The attribute consists of a set of "extended communities".
// All routes with the Extended Communities attribute belong to
// the communities listed in the attribute.
// https://datatracker.ietf.org/doc/html/rfc4360
type FlowspecActionExtendedCommunity struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	RouteType     ExtendedCommunityRouteType `protobuf:"varint,1,opt,name=route_type,json=routeType,proto3,enum=kentik.ktbgp.v202501.ExtendedCommunityRouteType" json:"route_type,omitempty"`
	Asn1          uint32                     `protobuf:"varint,2,opt,name=asn1,proto3" json:"asn1,omitempty"`
	Asn2          uint32                     `protobuf:"varint,3,opt,name=asn2,proto3" json:"asn2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionExtendedCommunity) Reset() {
	*x = FlowspecActionExtendedCommunity{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionExtendedCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionExtendedCommunity) ProtoMessage() {}

func (x *FlowspecActionExtendedCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionExtendedCommunity.ProtoReflect.Descriptor instead.
func (*FlowspecActionExtendedCommunity) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{20}
}

func (x *FlowspecActionExtendedCommunity) GetRouteType() ExtendedCommunityRouteType {
	if x != nil {
		return x.RouteType
	}
	return ExtendedCommunityRouteType_EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED
}

func (x *FlowspecActionExtendedCommunity) GetAsn1() uint32 {
	if x != nil {
		return x.Asn1
	}
	return 0
}

func (x *FlowspecActionExtendedCommunity) GetAsn2() uint32 {
	if x != nil {
		return x.Asn2
	}
	return 0
}

// FlowspecActionLargeCommunity
// BGP Large Communities attribute encoded as an unordered set of one or more
// twelve-octet values, each consisting of a four-octet Global
// Administrator field and two four-octet operator-defined fields, each
// of which can be used to denote properties or actions significant to
// the operator of the AS assigning the values.
// https://datatracker.ietf.org/doc/html/rfc8092
type FlowspecActionLargeCommunity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asn           uint32                 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Data1         uint32                 `protobuf:"varint,2,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2         uint32                 `protobuf:"varint,3,opt,name=data2,proto3" json:"data2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowspecActionLargeCommunity) Reset() {
	*x = FlowspecActionLargeCommunity{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowspecActionLargeCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecActionLargeCommunity) ProtoMessage() {}

func (x *FlowspecActionLargeCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecActionLargeCommunity.ProtoReflect.Descriptor instead.
func (*FlowspecActionLargeCommunity) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{21}
}

func (x *FlowspecActionLargeCommunity) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *FlowspecActionLargeCommunity) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *FlowspecActionLargeCommunity) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

type RTBHMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 or IPv6 CIDR prefix to match
	SrcPrefix     string `protobuf:"bytes,1,opt,name=src_prefix,json=srcPrefix,proto3" json:"src_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTBHMatch) Reset() {
	*x = RTBHMatch{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTBHMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHMatch) ProtoMessage() {}

func (x *RTBHMatch) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHMatch.ProtoReflect.Descriptor instead.
func (*RTBHMatch) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{22}
}

func (x *RTBHMatch) GetSrcPrefix() string {
	if x != nil {
		return x.SrcPrefix
	}
	return ""
}

type RTBHAction struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BgpCommunities  []uint32               `protobuf:"varint,1,rep,packed,name=bgp_communities,json=bgpCommunities,proto3" json:"bgp_communities,omitempty"`
	NextHop         string                 `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	LocalPreference uint32                 `protobuf:"varint,3,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RTBHAction) Reset() {
	*x = RTBHAction{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTBHAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTBHAction) ProtoMessage() {}

func (x *RTBHAction) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTBHAction.ProtoReflect.Descriptor instead.
func (*RTBHAction) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{23}
}

func (x *RTBHAction) GetBgpCommunities() []uint32 {
	if x != nil {
		return x.BgpCommunities
	}
	return nil
}

func (x *RTBHAction) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *RTBHAction) GetLocalPreference() uint32 {
	if x != nil {
		return x.LocalPreference
	}
	return 0
}

type NumericFormula struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Or            []*NumericPredicateGroup `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericFormula) Reset() {
	*x = NumericFormula{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericFormula) ProtoMessage() {}

func (x *NumericFormula) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericFormula.ProtoReflect.Descriptor instead.
func (*NumericFormula) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{24}
}

func (x *NumericFormula) GetOr() []*NumericPredicateGroup {
	if x != nil {
		return x.Or
	}
	return nil
}

type NumericPredicateGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	And           []*NumericPredicate    `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericPredicateGroup) Reset() {
	*x = NumericPredicateGroup{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericPredicateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericPredicateGroup) ProtoMessage() {}

func (x *NumericPredicateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericPredicateGroup.ProtoReflect.Descriptor instead.
func (*NumericPredicateGroup) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{25}
}

func (x *NumericPredicateGroup) GetAnd() []*NumericPredicate {
	if x != nil {
		return x.And
	}
	return nil
}

type NumericPredicate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operator      NumericOp              `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.ktbgp.v202501.NumericOp" json:"operator,omitempty"`
	Value         uint64                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericPredicate) Reset() {
	*x = NumericPredicate{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericPredicate) ProtoMessage() {}

func (x *NumericPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericPredicate.ProtoReflect.Descriptor instead.
func (*NumericPredicate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{26}
}

func (x *NumericPredicate) GetOperator() NumericOp {
	if x != nil {
		return x.Operator
	}
	return NumericOp_NUMERIC_OP_UNSPECIFIED
}

func (x *NumericPredicate) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FragmentFormula struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Or            []*FragmentPredicateGroup `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FragmentFormula) Reset() {
	*x = FragmentFormula{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FragmentFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentFormula) ProtoMessage() {}

func (x *FragmentFormula) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentFormula.ProtoReflect.Descriptor instead.
func (*FragmentFormula) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{27}
}

func (x *FragmentFormula) GetOr() []*FragmentPredicateGroup {
	if x != nil {
		return x.Or
	}
	return nil
}

type FragmentPredicateGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	And           []*FragmentPredicate   `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FragmentPredicateGroup) Reset() {
	*x = FragmentPredicateGroup{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FragmentPredicateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentPredicateGroup) ProtoMessage() {}

func (x *FragmentPredicateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentPredicateGroup.ProtoReflect.Descriptor instead.
func (*FragmentPredicateGroup) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{28}
}

func (x *FragmentPredicateGroup) GetAnd() []*FragmentPredicate {
	if x != nil {
		return x.And
	}
	return nil
}

type FragmentPredicate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operator      BitwiseOp              `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.ktbgp.v202501.BitwiseOp" json:"operator,omitempty"`
	Values        []Fragment             `protobuf:"varint,2,rep,packed,name=values,proto3,enum=kentik.ktbgp.v202501.Fragment" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FragmentPredicate) Reset() {
	*x = FragmentPredicate{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FragmentPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentPredicate) ProtoMessage() {}

func (x *FragmentPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentPredicate.ProtoReflect.Descriptor instead.
func (*FragmentPredicate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{29}
}

func (x *FragmentPredicate) GetOperator() BitwiseOp {
	if x != nil {
		return x.Operator
	}
	return BitwiseOp_BITWISE_OP_UNSPECIFIED
}

func (x *FragmentPredicate) GetValues() []Fragment {
	if x != nil {
		return x.Values
	}
	return nil
}

type TCPFlagsFormula struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Or            []*TCPFlagsPredicateGroup `protobuf:"bytes,1,rep,name=or,proto3" json:"or,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPFlagsFormula) Reset() {
	*x = TCPFlagsFormula{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPFlagsFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFlagsFormula) ProtoMessage() {}

func (x *TCPFlagsFormula) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFlagsFormula.ProtoReflect.Descriptor instead.
func (*TCPFlagsFormula) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{30}
}

func (x *TCPFlagsFormula) GetOr() []*TCPFlagsPredicateGroup {
	if x != nil {
		return x.Or
	}
	return nil
}

type TCPFlagsPredicateGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	And           []*TCPFlagsPredicate   `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPFlagsPredicateGroup) Reset() {
	*x = TCPFlagsPredicateGroup{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPFlagsPredicateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFlagsPredicateGroup) ProtoMessage() {}

func (x *TCPFlagsPredicateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFlagsPredicateGroup.ProtoReflect.Descriptor instead.
func (*TCPFlagsPredicateGroup) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{31}
}

func (x *TCPFlagsPredicateGroup) GetAnd() []*TCPFlagsPredicate {
	if x != nil {
		return x.And
	}
	return nil
}

type TCPFlagsPredicate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operator      BitwiseOp              `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.ktbgp.v202501.BitwiseOp" json:"operator,omitempty"`
	Values        []TCPFlag              `protobuf:"varint,2,rep,packed,name=values,proto3,enum=kentik.ktbgp.v202501.TCPFlag" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPFlagsPredicate) Reset() {
	*x = TCPFlagsPredicate{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPFlagsPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFlagsPredicate) ProtoMessage() {}

func (x *TCPFlagsPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFlagsPredicate.ProtoReflect.Descriptor instead.
func (*TCPFlagsPredicate) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{32}
}

func (x *TCPFlagsPredicate) GetOperator() BitwiseOp {
	if x != nil {
		return x.Operator
	}
	return BitwiseOp_BITWISE_OP_UNSPECIFIED
}

func (x *TCPFlagsPredicate) GetValues() []TCPFlag {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdateResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      uint64                 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Status        AdvertStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.ktbgp.v202501.AdvertStatus" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResult) Reset() {
	*x = UpdateResult{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResult) ProtoMessage() {}

func (x *UpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResult.ProtoReflect.Descriptor instead.
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateResult) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *UpdateResult) GetStatus() AdvertStatus {
	if x != nil {
		return x.Status
	}
	return AdvertStatus_ADVERT_STATUS_UNSPECIFIED
}

func (x *UpdateResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RouteServiceListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       *RoutesFilter          `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"` // TODO: any pagination or sorting capabilities?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteServiceListRequest) Reset() {
	*x = RouteServiceListRequest{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceListRequest) ProtoMessage() {}

func (x *RouteServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceListRequest.ProtoReflect.Descriptor instead.
func (*RouteServiceListRequest) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{34}
}

func (x *RouteServiceListRequest) GetFilters() *RoutesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type RoutesFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceIds     []uint64               `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutesFilter) Reset() {
	*x = RoutesFilter{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutesFilter) ProtoMessage() {}

func (x *RoutesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutesFilter.ProtoReflect.Descriptor instead.
func (*RoutesFilter) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{35}
}

func (x *RoutesFilter) GetDeviceIds() []uint64 {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

type RouteServiceListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        []*DeviceAdverts       `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteServiceListResponse) Reset() {
	*x = RouteServiceListResponse{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteServiceListResponse) ProtoMessage() {}

func (x *RouteServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteServiceListResponse.ProtoReflect.Descriptor instead.
func (*RouteServiceListResponse) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{36}
}

func (x *RouteServiceListResponse) GetResult() []*DeviceAdverts {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeviceAdverts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      uint64                 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Flowspec      []*FlowspecUpdate      `protobuf:"bytes,2,rep,name=flowspec,proto3" json:"flowspec,omitempty"`
	Rtbh          []*RTBHUpdate          `protobuf:"bytes,3,rep,name=rtbh,proto3" json:"rtbh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceAdverts) Reset() {
	*x = DeviceAdverts{}
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceAdverts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAdverts) ProtoMessage() {}

func (x *DeviceAdverts) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_ktbgp_v202501_route_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAdverts.ProtoReflect.Descriptor instead.
func (*DeviceAdverts) Descriptor() ([]byte, []int) {
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceAdverts) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceAdverts) GetFlowspec() []*FlowspecUpdate {
	if x != nil {
		return x.Flowspec
	}
	return nil
}

func (x *DeviceAdverts) GetRtbh() []*RTBHUpdate {
	if x != nil {
		return x.Rtbh
	}
	return nil
}

var File_kentik_ktbgp_v202501_route_service_proto protoreflect.FileDescriptor

const file_kentik_ktbgp_v202501_route_service_proto_rawDesc = "" +
	"\n" +
	"(kentik/ktbgp/v202501/route_service.proto\x12\x14kentik.ktbgp.v202501\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a%kentik/core/v202303/annotations.proto\x1a)kentik/alerting/types/v202303/types.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc2\x01\n" +
	"\x1bRouteServiceAnnounceRequest\x12\x1d\n" +
	"\n" +
	"device_ids\x18\x01 \x03(\x04R\tdeviceIds\x12B\n" +
	"\bflowspec\x18\v \x01(\v2$.kentik.ktbgp.v202501.FlowspecUpdateH\x00R\bflowspec\x126\n" +
	"\x04rtbh\x18\f \x01(\v2 .kentik.ktbgp.v202501.RTBHUpdateH\x00R\x04rtbhB\b\n" +
	"\x06update\"\\\n" +
	"\x1cRouteServiceAnnounceResponse\x12<\n" +
	"\aresults\x18\x01 \x03(\v2\".kentik.ktbgp.v202501.UpdateResultR\aresults\"x\n" +
	"\x1bRouteServiceWithdrawRequest\x12\x1d\n" +
	"\n" +
	"device_ids\x18\x01 \x03(\x04R\tdeviceIds\x12:\n" +
	"\bwithdraw\x18\x02 \x01(\v2\x1e.kentik.ktbgp.v202501.WithdrawR\bwithdraw\"\x90\x01\n" +
	"\bWithdraw\x12A\n" +
	"\bflowspec\x18\x01 \x01(\v2#.kentik.ktbgp.v202501.FlowspecMatchH\x00R\bflowspec\x125\n" +
	"\x04rtbh\x18\x02 \x01(\v2\x1f.kentik.ktbgp.v202501.RTBHMatchH\x00R\x04rtbhB\n" +
	"\n" +
	"\bwithdraw\"\\\n" +
	"\x1cRouteServiceWithdrawResponse\x12<\n" +
	"\aresults\x18\x01 \x03(\v2\".kentik.ktbgp.v202501.UpdateResultR\aresults\"\xd4\a\n" +
	"\x0eFlowspecAction\x12D\n" +
	"\x06accept\x18\x01 \x01(\v2*.kentik.ktbgp.v202501.FlowspecActionAcceptH\x00R\x06accept\x12G\n" +
	"\adiscard\x18\x02 \x01(\v2+.kentik.ktbgp.v202501.FlowspecActionDiscardH\x00R\adiscard\x12U\n" +
	"\n" +
	"rate_bytes\x18\x03 \x01(\v24.kentik.ktbgp.v202501.FlowspecActionTrafficRateBytesH\x00R\trateBytes\x12K\n" +
	"\tmark_dscp\x18\x04 \x01(\v2,.kentik.ktbgp.v202501.FlowspecActionMarkDSCPH\x00R\bmarkDscp\x12Z\n" +
	"\vrt_redirect\x18\x05 \x01(\v27.kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirectH\x00R\n" +
	"rtRedirect\x12X\n" +
	"\vip_redirect\x18\x06 \x01(\v25.kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirectH\x00R\n" +
	"ipRedirect\x12U\n" +
	"\vaction_type\x18\a \x01(\v22.kentik.ktbgp.v202501.FlowspecActionTerminalSampleH\x00R\n" +
	"actionType\x12L\n" +
	"\art_copy\x18\b \x01(\v21.kentik.ktbgp.v202501.FlowspecActionIPNextHopCopyH\x00R\x06rtCopy\x12c\n" +
	"\x11regular_community\x18\t \x01(\v24.kentik.ktbgp.v202501.FlowspecActionRegularCommunityH\x00R\x10regularCommunity\x12f\n" +
	"\x12extended_community\x18\n" +
	" \x01(\v25.kentik.ktbgp.v202501.FlowspecActionExtendedCommunityH\x00R\x11extendedCommunity\x12]\n" +
	"\x0flarge_community\x18\v \x01(\v22.kentik.ktbgp.v202501.FlowspecActionLargeCommunityH\x00R\x0elargeCommunityB\b\n" +
	"\x06action\"\xb3\n" +
	"\n" +
	"\x0eFlowspecUpdate\x129\n" +
	"\x05match\x18\x01 \x01(\v2#.kentik.ktbgp.v202501.FlowspecMatchR\x05match\x12?\n" +
	"\rcreation_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\x16\n" +
	"\x04inet\x18\x03 \x01(\tB\x02\x18\x01R\x04inet\x12;\n" +
	"\tinet_type\x18\x06 \x01(\x0e2\x1e.kentik.ktbgp.v202501.InetTypeR\binetType\x12\x10\n" +
	"\x03key\x18\a \x01(\tR\x03key\x12U\n" +
	"\n" +
	"rate_bytes\x18\v \x01(\v24.kentik.ktbgp.v202501.FlowspecActionTrafficRateBytesH\x00R\trateBytes\x12G\n" +
	"\adiscard\x18\f \x01(\v2+.kentik.ktbgp.v202501.FlowspecActionDiscardH\x00R\adiscard\x12K\n" +
	"\tmark_dscp\x18\r \x01(\v2,.kentik.ktbgp.v202501.FlowspecActionMarkDSCPH\x00R\bmarkDscp\x12Z\n" +
	"\vrt_redirect\x18\x0e \x01(\v27.kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirectH\x00R\n" +
	"rtRedirect\x12X\n" +
	"\vip_redirect\x18\x0f \x01(\v25.kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirectH\x00R\n" +
	"ipRedirect\x12D\n" +
	"\x06accept\x18\x10 \x01(\v2*.kentik.ktbgp.v202501.FlowspecActionAcceptH\x00R\x06accept\x12U\n" +
	"\vaction_type\x18\x11 \x01(\v22.kentik.ktbgp.v202501.FlowspecActionTerminalSampleH\x00R\n" +
	"actionType\x12L\n" +
	"\art_copy\x18\x12 \x01(\v21.kentik.ktbgp.v202501.FlowspecActionIPNextHopCopyH\x00R\x06rtCopy\x12c\n" +
	"\x11regular_community\x18\x13 \x01(\v24.kentik.ktbgp.v202501.FlowspecActionRegularCommunityH\x00R\x10regularCommunity\x12f\n" +
	"\x12extended_community\x18\x14 \x01(\v25.kentik.ktbgp.v202501.FlowspecActionExtendedCommunityH\x00R\x11extendedCommunity\x12]\n" +
	"\x0flarge_community\x18\x15 \x01(\v22.kentik.ktbgp.v202501.FlowspecActionLargeCommunityH\x00R\x0elargeCommunity\x12>\n" +
	"\aactions\x18\b \x03(\v2$.kentik.ktbgp.v202501.FlowspecActionR\aactions\x12\x1e\n" +
	"\bterminal\x18\x04 \x01(\bB\x02\x18\x01R\bterminal\x12\x1a\n" +
	"\x06sample\x18\x05 \x01(\bB\x02\x18\x01R\x06sampleB\b\n" +
	"\x06action\"O\n" +
	"\x0fFlowspecUpdates\x12<\n" +
	"\x06update\x18\x01 \x03(\v2$.kentik.ktbgp.v202501.FlowspecUpdateR\x06update\"\xa5\x02\n" +
	"\n" +
	"RTBHUpdate\x125\n" +
	"\x05match\x18\x01 \x01(\v2\x1f.kentik.ktbgp.v202501.RTBHMatchR\x05match\x128\n" +
	"\x06action\x18\x02 \x01(\v2 .kentik.ktbgp.v202501.RTBHActionR\x06action\x12?\n" +
	"\rcreation_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\x16\n" +
	"\x04inet\x18\x04 \x01(\tB\x02\x18\x01R\x04inet\x12;\n" +
	"\tinet_type\x18\x05 \x01(\x0e2\x1e.kentik.ktbgp.v202501.InetTypeR\binetType\x12\x10\n" +
	"\x03key\x18\x06 \x01(\tR\x03key\"G\n" +
	"\vRTBHUpdates\x128\n" +
	"\x06update\x18\x01 \x03(\v2 .kentik.ktbgp.v202501.RTBHUpdateR\x06update\"\xb0\x05\n" +
	"\rFlowspecMatch\x12\x1d\n" +
	"\n" +
	"dst_prefix\x18\x01 \x01(\tR\tdstPrefix\x12\x1d\n" +
	"\n" +
	"src_prefix\x18\x02 \x01(\tR\tsrcPrefix\x12E\n" +
	"\vip_protocol\x18\x03 \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\n" +
	"ipProtocol\x12?\n" +
	"\bdst_port\x18\x05 \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\adstPort\x12?\n" +
	"\bsrc_port\x18\x06 \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\asrcPort\x12A\n" +
	"\ticmp_type\x18\a \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\bicmpType\x12A\n" +
	"\ticmp_code\x18\b \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\bicmpCode\x12B\n" +
	"\ttcp_flags\x18\t \x01(\v2%.kentik.ktbgp.v202501.TCPFlagsFormulaR\btcpFlags\x12I\n" +
	"\rpacket_length\x18\n" +
	" \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\fpacketLength\x128\n" +
	"\x04dscp\x18\v \x01(\v2$.kentik.ktbgp.v202501.NumericFormulaR\x04dscp\x12C\n" +
	"\tfragments\x18\f \x01(\v2%.kentik.ktbgp.v202501.FragmentFormulaR\tfragmentsJ\x04\b\x04\x10\x05\"J\n" +
	"\x1eFlowspecActionTrafficRateBytes\x12(\n" +
	"\x10bytes_per_second\x18\x01 \x01(\x02R\x0ebytesPerSecond\"\x16\n" +
	"\x14FlowspecActionAccept\"\x17\n" +
	"\x15FlowspecActionDiscard\"R\n" +
	"\x1cFlowspecActionTerminalSample\x12\x1a\n" +
	"\bterminal\x18\x01 \x01(\bR\bterminal\x12\x16\n" +
	"\x06sample\x18\x02 \x01(\bR\x06sample\",\n" +
	"\x16FlowspecActionMarkDSCP\x12\x12\n" +
	"\x04dscp\x18\x01 \x01(\rR\x04dscp\"X\n" +
	"!FlowspecActionRouteTargetRedirect\x12\x10\n" +
	"\x03asn\x18\x01 \x01(\rR\x03asn\x12!\n" +
	"\froute_target\x18\x02 \x01(\rR\vrouteTarget\"<\n" +
	"\x1fFlowspecActionIPNextHopRedirect\x12\x19\n" +
	"\bnext_hop\x18\x01 \x01(\tR\anextHop\"8\n" +
	"\x1bFlowspecActionIPNextHopCopy\x12\x19\n" +
	"\bnext_hop\x18\x01 \x01(\tR\anextHop\"H\n" +
	"\x1eFlowspecActionRegularCommunity\x12\x12\n" +
	"\x04asn1\x18\x01 \x01(\rR\x04asn1\x12\x12\n" +
	"\x04asn2\x18\x02 \x01(\rR\x04asn2\"\x9a\x01\n" +
	"\x1fFlowspecActionExtendedCommunity\x12O\n" +
	"\n" +
	"route_type\x18\x01 \x01(\x0e20.kentik.ktbgp.v202501.ExtendedCommunityRouteTypeR\trouteType\x12\x12\n" +
	"\x04asn1\x18\x02 \x01(\rR\x04asn1\x12\x12\n" +
	"\x04asn2\x18\x03 \x01(\rR\x04asn2\"\\\n" +
	"\x1cFlowspecActionLargeCommunity\x12\x10\n" +
	"\x03asn\x18\x01 \x01(\rR\x03asn\x12\x14\n" +
	"\x05data1\x18\x02 \x01(\rR\x05data1\x12\x14\n" +
	"\x05data2\x18\x03 \x01(\rR\x05data2\"*\n" +
	"\tRTBHMatch\x12\x1d\n" +
	"\n" +
	"src_prefix\x18\x01 \x01(\tR\tsrcPrefix\"{\n" +
	"\n" +
	"RTBHAction\x12'\n" +
	"\x0fbgp_communities\x18\x01 \x03(\rR\x0ebgpCommunities\x12\x19\n" +
	"\bnext_hop\x18\x02 \x01(\tR\anextHop\x12)\n" +
	"\x10local_preference\x18\x03 \x01(\rR\x0flocalPreference\"M\n" +
	"\x0eNumericFormula\x12;\n" +
	"\x02or\x18\x01 \x03(\v2+.kentik.ktbgp.v202501.NumericPredicateGroupR\x02or\"Q\n" +
	"\x15NumericPredicateGroup\x128\n" +
	"\x03and\x18\x01 \x03(\v2&.kentik.ktbgp.v202501.NumericPredicateR\x03and\"e\n" +
	"\x10NumericPredicate\x12;\n" +
	"\boperator\x18\x01 \x01(\x0e2\x1f.kentik.ktbgp.v202501.NumericOpR\boperator\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value\"O\n" +
	"\x0fFragmentFormula\x12<\n" +
	"\x02or\x18\x01 \x03(\v2,.kentik.ktbgp.v202501.FragmentPredicateGroupR\x02or\"S\n" +
	"\x16FragmentPredicateGroup\x129\n" +
	"\x03and\x18\x01 \x03(\v2'.kentik.ktbgp.v202501.FragmentPredicateR\x03and\"\x88\x01\n" +
	"\x11FragmentPredicate\x12;\n" +
	"\boperator\x18\x01 \x01(\x0e2\x1f.kentik.ktbgp.v202501.BitwiseOpR\boperator\x126\n" +
	"\x06values\x18\x02 \x03(\x0e2\x1e.kentik.ktbgp.v202501.FragmentR\x06values\"O\n" +
	"\x0fTCPFlagsFormula\x12<\n" +
	"\x02or\x18\x01 \x03(\v2,.kentik.ktbgp.v202501.TCPFlagsPredicateGroupR\x02or\"S\n" +
	"\x16TCPFlagsPredicateGroup\x129\n" +
	"\x03and\x18\x01 \x03(\v2'.kentik.ktbgp.v202501.TCPFlagsPredicateR\x03and\"\x87\x01\n" +
	"\x11TCPFlagsPredicate\x12;\n" +
	"\boperator\x18\x01 \x01(\x0e2\x1f.kentik.ktbgp.v202501.BitwiseOpR\boperator\x125\n" +
	"\x06values\x18\x02 \x03(\x0e2\x1d.kentik.ktbgp.v202501.TCPFlagR\x06values\"\x81\x01\n" +
	"\fUpdateResult\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\x04R\bdeviceId\x12:\n" +
	"\x06status\x18\x02 \x01(\x0e2\".kentik.ktbgp.v202501.AdvertStatusR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"W\n" +
	"\x17RouteServiceListRequest\x12<\n" +
	"\afilters\x18\x01 \x01(\v2\".kentik.ktbgp.v202501.RoutesFilterR\afilters\"-\n" +
	"\fRoutesFilter\x12\x1d\n" +
	"\n" +
	"device_ids\x18\x01 \x03(\x04R\tdeviceIds\"W\n" +
	"\x18RouteServiceListResponse\x12;\n" +
	"\x06result\x18\x01 \x03(\v2#.kentik.ktbgp.v202501.DeviceAdvertsR\x06result\"\xa4\x01\n" +
	"\rDeviceAdverts\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\x04R\bdeviceId\x12@\n" +
	"\bflowspec\x18\x02 \x03(\v2$.kentik.ktbgp.v202501.FlowspecUpdateR\bflowspec\x124\n" +
	"\x04rtbh\x18\x03 \x03(\v2 .kentik.ktbgp.v202501.RTBHUpdateR\x04rtbh*M\n" +
	"\bInetType\x12\x19\n" +
	"\x15INET_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eINET_TYPE_IPV4\x10\x01\x12\x12\n" +
	"\x0eINET_TYPE_IPV6\x10\x02*\x9f\x01\n" +
	"\x1aExtendedCommunityRouteType\x12-\n" +
	")EXTENDED_COMMUNITY_ROUTE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$EXTENDED_COMMUNITY_ROUTE_TYPE_TARGET\x10\x01\x12(\n" +
	"$EXTENDED_COMMUNITY_ROUTE_TYPE_ORIGIN\x10\x02*i\n" +
	"\bFragment\x12\x18\n" +
	"\x14FRAGMENT_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vFRAGMENT_DF\x10\x01\x12\x10\n" +
	"\fFRAGMENT_ISF\x10\x02\x12\x0f\n" +
	"\vFRAGMENT_FF\x10\x03\x12\x0f\n" +
	"\vFRAGMENT_LF\x10\x04*\xb3\x01\n" +
	"\aTCPFlag\x12\x18\n" +
	"\x14TCP_FLAG_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fTCP_FLAG_FIN\x10\x01\x12\x10\n" +
	"\fTCP_FLAG_SYN\x10\x02\x12\x10\n" +
	"\fTCP_FLAG_RST\x10\x03\x12\x10\n" +
	"\fTCP_FLAG_PSH\x10\x04\x12\x10\n" +
	"\fTCP_FLAG_ACK\x10\x05\x12\x10\n" +
	"\fTCP_FLAG_URG\x10\x06\x12\x10\n" +
	"\fTCP_FLAG_ECE\x10\a\x12\x10\n" +
	"\fTCP_FLAG_CWR\x10\b*\xdb\x01\n" +
	"\tNumericOp\x12\x1a\n" +
	"\x16NUMERIC_OP_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11NUMERIC_OP_EQUALS\x10\x01\x12\x19\n" +
	"\x15NUMERIC_OP_NOT_EQUALS\x10\x02\x12\x18\n" +
	"\x14NUMERIC_OP_LESS_THAN\x10\x03\x12\x1b\n" +
	"\x17NUMERIC_OP_GREATER_THAN\x10\x04\x12\"\n" +
	"\x1eNUMERIC_OP_LESS_THAN_OR_EQUALS\x10\x05\x12%\n" +
	"!NUMERIC_OP_GREATER_THAN_OR_EQUALS\x10\x06*|\n" +
	"\tBitwiseOp\x12\x1a\n" +
	"\x16BITWISE_OP_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eBITWISE_OP_ANY\x10\x01\x12\x13\n" +
	"\x0fBITWISE_OP_NONE\x10\x02\x12\x12\n" +
	"\x0eBITWISE_OP_ALL\x10\x03\x12\x16\n" +
	"\x12BITWISE_OP_NOT_ALL\x10\x04*\x9f\x01\n" +
	"\fAdvertStatus\x12\x1d\n" +
	"\x19ADVERT_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17ADVERT_STATUS_ANNOUNCED\x10\x01\x12\x1b\n" +
	"\x17ADVERT_STATUS_WITHDRAWN\x10\x02\x12\x1c\n" +
	"\x18ADVERT_STATUS_NO_SESSION\x10\x04\x12\x18\n" +
	"\x14ADVERT_STATUS_FAILED\x10\x032\xba\x03\n" +
	"\fRouteService\x12\x8e\x01\n" +
	"\bAnnounce\x121.kentik.ktbgp.v202501.RouteServiceAnnounceRequest\x1a2.kentik.ktbgp.v202501.RouteServiceAnnounceResponse\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/routes/announce\x12\x8e\x01\n" +
	"\bWithdraw\x121.kentik.ktbgp.v202501.RouteServiceWithdrawRequest\x1a2.kentik.ktbgp.v202501.RouteServiceWithdrawResponse\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/routes/withdraw\x12~\n" +
	"\x04List\x12-.kentik.ktbgp.v202501.RouteServiceListRequest\x1a..kentik.ktbgp.v202501.RouteServiceListResponse\"\x17\x82\xd3\xe4\x93\x02\x11:\x01*\"\f/routes/list\x1a\b\xf8\xd7\x02\x01\x90\xd8\x02\x00BGZEgithub.com/kentik/api-schema-public/gen/go/kentik/ktbgp/v202501;ktbgpb\x06proto3"

var (
	file_kentik_ktbgp_v202501_route_service_proto_rawDescOnce sync.Once
	file_kentik_ktbgp_v202501_route_service_proto_rawDescData []byte
)

func file_kentik_ktbgp_v202501_route_service_proto_rawDescGZIP() []byte {
	file_kentik_ktbgp_v202501_route_service_proto_rawDescOnce.Do(func() {
		file_kentik_ktbgp_v202501_route_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kentik_ktbgp_v202501_route_service_proto_rawDesc), len(file_kentik_ktbgp_v202501_route_service_proto_rawDesc)))
	})
	return file_kentik_ktbgp_v202501_route_service_proto_rawDescData
}

var file_kentik_ktbgp_v202501_route_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_kentik_ktbgp_v202501_route_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_kentik_ktbgp_v202501_route_service_proto_goTypes = []any{
	(InetType)(0),                             // 0: kentik.ktbgp.v202501.InetType
	(ExtendedCommunityRouteType)(0),           // 1: kentik.ktbgp.v202501.ExtendedCommunityRouteType
	(Fragment)(0),                             // 2: kentik.ktbgp.v202501.Fragment
	(TCPFlag)(0),                              // 3: kentik.ktbgp.v202501.TCPFlag
	(NumericOp)(0),                            // 4: kentik.ktbgp.v202501.NumericOp
	(BitwiseOp)(0),                            // 5: kentik.ktbgp.v202501.BitwiseOp
	(AdvertStatus)(0),                         // 6: kentik.ktbgp.v202501.AdvertStatus
	(*RouteServiceAnnounceRequest)(nil),       // 7: kentik.ktbgp.v202501.RouteServiceAnnounceRequest
	(*RouteServiceAnnounceResponse)(nil),      // 8: kentik.ktbgp.v202501.RouteServiceAnnounceResponse
	(*RouteServiceWithdrawRequest)(nil),       // 9: kentik.ktbgp.v202501.RouteServiceWithdrawRequest
	(*Withdraw)(nil),                          // 10: kentik.ktbgp.v202501.Withdraw
	(*RouteServiceWithdrawResponse)(nil),      // 11: kentik.ktbgp.v202501.RouteServiceWithdrawResponse
	(*FlowspecAction)(nil),                    // 12: kentik.ktbgp.v202501.FlowspecAction
	(*FlowspecUpdate)(nil),                    // 13: kentik.ktbgp.v202501.FlowspecUpdate
	(*FlowspecUpdates)(nil),                   // 14: kentik.ktbgp.v202501.FlowspecUpdates
	(*RTBHUpdate)(nil),                        // 15: kentik.ktbgp.v202501.RTBHUpdate
	(*RTBHUpdates)(nil),                       // 16: kentik.ktbgp.v202501.RTBHUpdates
	(*FlowspecMatch)(nil),                     // 17: kentik.ktbgp.v202501.FlowspecMatch
	(*FlowspecActionTrafficRateBytes)(nil),    // 18: kentik.ktbgp.v202501.FlowspecActionTrafficRateBytes
	(*FlowspecActionAccept)(nil),              // 19: kentik.ktbgp.v202501.FlowspecActionAccept
	(*FlowspecActionDiscard)(nil),             // 20: kentik.ktbgp.v202501.FlowspecActionDiscard
	(*FlowspecActionTerminalSample)(nil),      // 21: kentik.ktbgp.v202501.FlowspecActionTerminalSample
	(*FlowspecActionMarkDSCP)(nil),            // 22: kentik.ktbgp.v202501.FlowspecActionMarkDSCP
	(*FlowspecActionRouteTargetRedirect)(nil), // 23: kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirect
	(*FlowspecActionIPNextHopRedirect)(nil),   // 24: kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirect
	(*FlowspecActionIPNextHopCopy)(nil),       // 25: kentik.ktbgp.v202501.FlowspecActionIPNextHopCopy
	(*FlowspecActionRegularCommunity)(nil),    // 26: kentik.ktbgp.v202501.FlowspecActionRegularCommunity
	(*FlowspecActionExtendedCommunity)(nil),   // 27: kentik.ktbgp.v202501.FlowspecActionExtendedCommunity
	(*FlowspecActionLargeCommunity)(nil),      // 28: kentik.ktbgp.v202501.FlowspecActionLargeCommunity
	(*RTBHMatch)(nil),                         // 29: kentik.ktbgp.v202501.RTBHMatch
	(*RTBHAction)(nil),                        // 30: kentik.ktbgp.v202501.RTBHAction
	(*NumericFormula)(nil),                    // 31: kentik.ktbgp.v202501.NumericFormula
	(*NumericPredicateGroup)(nil),             // 32: kentik.ktbgp.v202501.NumericPredicateGroup
	(*NumericPredicate)(nil),                  // 33: kentik.ktbgp.v202501.NumericPredicate
	(*FragmentFormula)(nil),                   // 34: kentik.ktbgp.v202501.FragmentFormula
	(*FragmentPredicateGroup)(nil),            // 35: kentik.ktbgp.v202501.FragmentPredicateGroup
	(*FragmentPredicate)(nil),                 // 36: kentik.ktbgp.v202501.FragmentPredicate
	(*TCPFlagsFormula)(nil),                   // 37: kentik.ktbgp.v202501.TCPFlagsFormula
	(*TCPFlagsPredicateGroup)(nil),            // 38: kentik.ktbgp.v202501.TCPFlagsPredicateGroup
	(*TCPFlagsPredicate)(nil),                 // 39: kentik.ktbgp.v202501.TCPFlagsPredicate
	(*UpdateResult)(nil),                      // 40: kentik.ktbgp.v202501.UpdateResult
	(*RouteServiceListRequest)(nil),           // 41: kentik.ktbgp.v202501.RouteServiceListRequest
	(*RoutesFilter)(nil),                      // 42: kentik.ktbgp.v202501.RoutesFilter
	(*RouteServiceListResponse)(nil),          // 43: kentik.ktbgp.v202501.RouteServiceListResponse
	(*DeviceAdverts)(nil),                     // 44: kentik.ktbgp.v202501.DeviceAdverts
	(*timestamppb.Timestamp)(nil),             // 45: google.protobuf.Timestamp
}
var file_kentik_ktbgp_v202501_route_service_proto_depIdxs = []int32{
	13, // 0: kentik.ktbgp.v202501.RouteServiceAnnounceRequest.flowspec:type_name -> kentik.ktbgp.v202501.FlowspecUpdate
	15, // 1: kentik.ktbgp.v202501.RouteServiceAnnounceRequest.rtbh:type_name -> kentik.ktbgp.v202501.RTBHUpdate
	40, // 2: kentik.ktbgp.v202501.RouteServiceAnnounceResponse.results:type_name -> kentik.ktbgp.v202501.UpdateResult
	10, // 3: kentik.ktbgp.v202501.RouteServiceWithdrawRequest.withdraw:type_name -> kentik.ktbgp.v202501.Withdraw
	17, // 4: kentik.ktbgp.v202501.Withdraw.flowspec:type_name -> kentik.ktbgp.v202501.FlowspecMatch
	29, // 5: kentik.ktbgp.v202501.Withdraw.rtbh:type_name -> kentik.ktbgp.v202501.RTBHMatch
	40, // 6: kentik.ktbgp.v202501.RouteServiceWithdrawResponse.results:type_name -> kentik.ktbgp.v202501.UpdateResult
	19, // 7: kentik.ktbgp.v202501.FlowspecAction.accept:type_name -> kentik.ktbgp.v202501.FlowspecActionAccept
	20, // 8: kentik.ktbgp.v202501.FlowspecAction.discard:type_name -> kentik.ktbgp.v202501.FlowspecActionDiscard
	18, // 9: kentik.ktbgp.v202501.FlowspecAction.rate_bytes:type_name -> kentik.ktbgp.v202501.FlowspecActionTrafficRateBytes
	22, // 10: kentik.ktbgp.v202501.FlowspecAction.mark_dscp:type_name -> kentik.ktbgp.v202501.FlowspecActionMarkDSCP
	23, // 11: kentik.ktbgp.v202501.FlowspecAction.rt_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirect
	24, // 12: kentik.ktbgp.v202501.FlowspecAction.ip_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirect
	21, // 13: kentik.ktbgp.v202501.FlowspecAction.action_type:type_name -> kentik.ktbgp.v202501.FlowspecActionTerminalSample
	25, // 14: kentik.ktbgp.v202501.FlowspecAction.rt_copy:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopCopy
	26, // 15: kentik.ktbgp.v202501.FlowspecAction.regular_community:type_name -> kentik.ktbgp.v202501.FlowspecActionRegularCommunity
	27, // 16: kentik.ktbgp.v202501.FlowspecAction.extended_community:type_name -> kentik.ktbgp.v202501.FlowspecActionExtendedCommunity
	28, // 17: kentik.ktbgp.v202501.FlowspecAction.large_community:type_name -> kentik.ktbgp.v202501.FlowspecActionLargeCommunity
	17, // 18: kentik.ktbgp.v202501.FlowspecUpdate.match:type_name -> kentik.ktbgp.v202501.FlowspecMatch
	45, // 19: kentik.ktbgp.v202501.FlowspecUpdate.creation_time:type_name -> google.protobuf.Timestamp
	0,  // 20: kentik.ktbgp.v202501.FlowspecUpdate.inet_type:type_name -> kentik.ktbgp.v202501.InetType
	18, // 21: kentik.ktbgp.v202501.FlowspecUpdate.rate_bytes:type_name -> kentik.ktbgp.v202501.FlowspecActionTrafficRateBytes
	20, // 22: kentik.ktbgp.v202501.FlowspecUpdate.discard:type_name -> kentik.ktbgp.v202501.FlowspecActionDiscard
	22, // 23: kentik.ktbgp.v202501.FlowspecUpdate.mark_dscp:type_name -> kentik.ktbgp.v202501.FlowspecActionMarkDSCP
	23, // 24: kentik.ktbgp.v202501.FlowspecUpdate.rt_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionRouteTargetRedirect
	24, // 25: kentik.ktbgp.v202501.FlowspecUpdate.ip_redirect:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopRedirect
	19, // 26: kentik.ktbgp.v202501.FlowspecUpdate.accept:type_name -> kentik.ktbgp.v202501.FlowspecActionAccept
	21, // 27: kentik.ktbgp.v202501.FlowspecUpdate.action_type:type_name -> kentik.ktbgp.v202501.FlowspecActionTerminalSample
	25, // 28: kentik.ktbgp.v202501.FlowspecUpdate.rt_copy:type_name -> kentik.ktbgp.v202501.FlowspecActionIPNextHopCopy
	26, // 29: kentik.ktbgp.v202501.FlowspecUpdate.regular_community:type_name -> kentik.ktbgp.v202501.FlowspecActionRegularCommunity
	27, // 30: kentik.ktbgp.v202501.FlowspecUpdate.extended_community:type_name -> kentik.ktbgp.v202501.FlowspecActionExtendedCommunity
	28, // 31: kentik.ktbgp.v202501.FlowspecUpdate.large_community:type_name -> kentik.ktbgp.v202501.FlowspecActionLargeCommunity
	12, // 32: kentik.ktbgp.v202501.FlowspecUpdate.actions:type_name -> kentik.ktbgp.v202501.FlowspecAction
	13, // 33: kentik.ktbgp.v202501.FlowspecUpdates.update:type_name -> kentik.ktbgp.v202501.FlowspecUpdate
	29, // 34: kentik.ktbgp.v202501.RTBHUpdate.match:type_name -> kentik.ktbgp.v202501.RTBHMatch
	30, // 35: kentik.ktbgp.v202501.RTBHUpdate.action:type_name -> kentik.ktbgp.v202501.RTBHAction
	45, // 36: kentik.ktbgp.v202501.RTBHUpdate.creation_time:type_name -> google.protobuf.Timestamp
	0,  // 37: kentik.ktbgp.v202501.RTBHUpdate.inet_type:type_name -> kentik.ktbgp.v202501.InetType
	15, // 38: kentik.ktbgp.v202501.RTBHUpdates.update:type_name -> kentik.ktbgp.v202501.RTBHUpdate
	31, // 39: kentik.ktbgp.v202501.FlowspecMatch.ip_protocol:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 40: kentik.ktbgp.v202501.FlowspecMatch.dst_port:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 41: kentik.ktbgp.v202501.FlowspecMatch.src_port:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 42: kentik.ktbgp.v202501.FlowspecMatch.icmp_type:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 43: kentik.ktbgp.v202501.FlowspecMatch.icmp_code:type_name -> kentik.ktbgp.v202501.NumericFormula
	37, // 44: kentik.ktbgp.v202501.FlowspecMatch.tcp_flags:type_name -> kentik.ktbgp.v202501.TCPFlagsFormula
	31, // 45: kentik.ktbgp.v202501.FlowspecMatch.packet_length:type_name -> kentik.ktbgp.v202501.NumericFormula
	31, // 46: kentik.ktbgp.v202501.FlowspecMatch.dscp:type_name -> kentik.ktbgp.v202501.NumericFormula
	34, // 47: kentik.ktbgp.v202501.FlowspecMatch.fragments:type_name -> kentik.ktbgp.v202501.FragmentFormula
	1,  // 48: kentik.ktbgp.v202501.FlowspecActionExtendedCommunity.route_type:type_name -> kentik.ktbgp.v202501.ExtendedCommunityRouteType
	32, // 49: kentik.ktbgp.v202501.NumericFormula.or:type_name -> kentik.ktbgp.v202501.NumericPredicateGroup
	33, // 50: kentik.ktbgp.v202501.NumericPredicateGroup.and:type_name -> kentik.ktbgp.v202501.NumericPredicate
	4,  // 51: kentik.ktbgp.v202501.NumericPredicate.operator:type_name -> kentik.ktbgp.v202501.NumericOp
	35, // 52: kentik.ktbgp.v202501.FragmentFormula.or:type_name -> kentik.ktbgp.v202501.FragmentPredicateGroup
	36, // 53: kentik.ktbgp.v202501.FragmentPredicateGroup.and:type_name -> kentik.ktbgp.v202501.FragmentPredicate
	5,  // 54: kentik.ktbgp.v202501.FragmentPredicate.operator:type_name -> kentik.ktbgp.v202501.BitwiseOp
	2,  // 55: kentik.ktbgp.v202501.FragmentPredicate.values:type_name -> kentik.ktbgp.v202501.Fragment
	38, // 56: kentik.ktbgp.v202501.TCPFlagsFormula.or:type_name -> kentik.ktbgp.v202501.TCPFlagsPredicateGroup
	39, // 57: kentik.ktbgp.v202501.TCPFlagsPredicateGroup.and:type_name -> kentik.ktbgp.v202501.TCPFlagsPredicate
	5,  // 58: kentik.ktbgp.v202501.TCPFlagsPredicate.operator:type_name -> kentik.ktbgp.v202501.BitwiseOp
	3,  // 59: kentik.ktbgp.v202501.TCPFlagsPredicate.values:type_name -> kentik.ktbgp.v202501.TCPFlag
	6,  // 60: kentik.ktbgp.v202501.UpdateResult.status:type_name -> kentik.ktbgp.v202501.AdvertStatus
	42, // 61: kentik.ktbgp.v202501.RouteServiceListRequest.filters:type_name -> kentik.ktbgp.v202501.RoutesFilter
	44, // 62: kentik.ktbgp.v202501.RouteServiceListResponse.result:type_name -> kentik.ktbgp.v202501.DeviceAdverts
	13, // 63: kentik.ktbgp.v202501.DeviceAdverts.flowspec:type_name -> kentik.ktbgp.v202501.FlowspecUpdate
	15, // 64: kentik.ktbgp.v202501.DeviceAdverts.rtbh:type_name -> kentik.ktbgp.v202501.RTBHUpdate
	7,  // 65: kentik.ktbgp.v202501.RouteService.Announce:input_type -> kentik.ktbgp.v202501.RouteServiceAnnounceRequest
	9,  // 66: kentik.ktbgp.v202501.RouteService.Withdraw:input_type -> kentik.ktbgp.v202501.RouteServiceWithdrawRequest
	41, // 67: kentik.ktbgp.v202501.RouteService.List:input_type -> kentik.ktbgp.v202501.RouteServiceListRequest
	8,  // 68: kentik.ktbgp.v202501.RouteService.Announce:output_type -> kentik.ktbgp.v202501.RouteServiceAnnounceResponse
	11, // 69: kentik.ktbgp.v202501.RouteService.Withdraw:output_type -> kentik.ktbgp.v202501.RouteServiceWithdrawResponse
	43, // 70: kentik.ktbgp.v202501.RouteService.List:output_type -> kentik.ktbgp.v202501.RouteServiceListResponse
	68, // [68:71] is the sub-list for method output_type
	65, // [65:68] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_kentik_ktbgp_v202501_route_service_proto_init() }
func file_kentik_ktbgp_v202501_route_service_proto_init() {
	if File_kentik_ktbgp_v202501_route_service_proto != nil {
		return
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[0].OneofWrappers = []any{
		(*RouteServiceAnnounceRequest_Flowspec)(nil),
		(*RouteServiceAnnounceRequest_Rtbh)(nil),
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[3].OneofWrappers = []any{
		(*Withdraw_Flowspec)(nil),
		(*Withdraw_Rtbh)(nil),
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[5].OneofWrappers = []any{
		(*FlowspecAction_Accept)(nil),
		(*FlowspecAction_Discard)(nil),
		(*FlowspecAction_RateBytes)(nil),
		(*FlowspecAction_MarkDscp)(nil),
		(*FlowspecAction_RtRedirect)(nil),
		(*FlowspecAction_IpRedirect)(nil),
		(*FlowspecAction_ActionType)(nil),
		(*FlowspecAction_RtCopy)(nil),
		(*FlowspecAction_RegularCommunity)(nil),
		(*FlowspecAction_ExtendedCommunity)(nil),
		(*FlowspecAction_LargeCommunity)(nil),
	}
	file_kentik_ktbgp_v202501_route_service_proto_msgTypes[6].OneofWrappers = []any{
		(*FlowspecUpdate_RateBytes)(nil),
		(*FlowspecUpdate_Discard)(nil),
		(*FlowspecUpdate_MarkDscp)(nil),
		(*FlowspecUpdate_RtRedirect)(nil),
		(*FlowspecUpdate_IpRedirect)(nil),
		(*FlowspecUpdate_Accept)(nil),
		(*FlowspecUpdate_ActionType)(nil),
		(*FlowspecUpdate_RtCopy)(nil),
		(*FlowspecUpdate_RegularCommunity)(nil),
		(*FlowspecUpdate_ExtendedCommunity)(nil),
		(*FlowspecUpdate_LargeCommunity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kentik_ktbgp_v202501_route_service_proto_rawDesc), len(file_kentik_ktbgp_v202501_route_service_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_ktbgp_v202501_route_service_proto_goTypes,
		DependencyIndexes: file_kentik_ktbgp_v202501_route_service_proto_depIdxs,
		EnumInfos:         file_kentik_ktbgp_v202501_route_service_proto_enumTypes,
		MessageInfos:      file_kentik_ktbgp_v202501_route_service_proto_msgTypes,
	}.Build()
	File_kentik_ktbgp_v202501_route_service_proto = out.File
	file_kentik_ktbgp_v202501_route_service_proto_goTypes = nil
	file_kentik_ktbgp_v202501_route_service_proto_depIdxs = nil
}
