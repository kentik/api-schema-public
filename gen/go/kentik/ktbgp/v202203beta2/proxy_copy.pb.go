// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/ktbgp/v202203beta2/proxy.proto

package ktbgp

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ControlRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ControlRequest:
		x.Proto = v.GetProto()
		x.DeviceIp = v.GetDeviceIp()
		x.DevicePort = v.GetDevicePort()
		x.ProxyIp = v.GetProxyIp()
		x.ProxyPort = v.GetProxyPort()
		x.Action = v.GetAction()
	default:
		if v, ok := v.(interface{ GetProto() string }); ok {
			x.Proto = v.GetProto()
		}
		if v, ok := v.(interface{ GetDeviceIp() string }); ok {
			x.DeviceIp = v.GetDeviceIp()
		}
		if v, ok := v.(interface{ GetDevicePort() uint32 }); ok {
			x.DevicePort = v.GetDevicePort()
		}
		if v, ok := v.(interface{ GetProxyIp() string }); ok {
			x.ProxyIp = v.GetProxyIp()
		}
		if v, ok := v.(interface{ GetProxyPort() uint32 }); ok {
			x.ProxyPort = v.GetProxyPort()
		}
		if v, ok := v.(interface{ GetAction() ControlAction }); ok {
			x.Action = v.GetAction()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ControlRequest) Proto_ShallowClone() (c *ControlRequest) {
	if x != nil {
		c = new(ControlRequest)
		c.Proto = x.Proto
		c.DeviceIp = x.DeviceIp
		c.DevicePort = x.DevicePort
		c.ProxyIp = x.ProxyIp
		c.ProxyPort = x.ProxyPort
		c.Action = x.Action
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ControlResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ControlResponse:
		x.Proto = v.GetProto()
		x.DeviceIp = v.GetDeviceIp()
		x.DevicePort = v.GetDevicePort()
		x.ProxyIp = v.GetProxyIp()
		x.ProxyPort = v.GetProxyPort()
		x.TtlSeconds = v.GetTtlSeconds()
		x.TtlCounter = v.GetTtlCounter()
		x.Action = v.GetAction()
		x.Metadata = v.GetMetadata()
		x.CompanyId = v.GetCompanyId()
		x.DeviceId = v.GetDeviceId()
		x.DeviceName = v.GetDeviceName()
		x.TcpMd5 = v.GetTcpMd5()
	default:
		if v, ok := v.(interface{ GetProto() string }); ok {
			x.Proto = v.GetProto()
		}
		if v, ok := v.(interface{ GetDeviceIp() string }); ok {
			x.DeviceIp = v.GetDeviceIp()
		}
		if v, ok := v.(interface{ GetDevicePort() uint32 }); ok {
			x.DevicePort = v.GetDevicePort()
		}
		if v, ok := v.(interface{ GetProxyIp() string }); ok {
			x.ProxyIp = v.GetProxyIp()
		}
		if v, ok := v.(interface{ GetProxyPort() uint32 }); ok {
			x.ProxyPort = v.GetProxyPort()
		}
		if v, ok := v.(interface{ GetTtlSeconds() uint32 }); ok {
			x.TtlSeconds = v.GetTtlSeconds()
		}
		if v, ok := v.(interface{ GetTtlCounter() uint32 }); ok {
			x.TtlCounter = v.GetTtlCounter()
		}
		if v, ok := v.(interface{ GetAction() ControlAction }); ok {
			x.Action = v.GetAction()
		}
		if v, ok := v.(interface{ GetMetadata() []*KeyVal }); ok {
			x.Metadata = v.GetMetadata()
		}
		if v, ok := v.(interface{ GetCompanyId() uint32 }); ok {
			x.CompanyId = v.GetCompanyId()
		}
		if v, ok := v.(interface{ GetDeviceId() uint32 }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetDeviceName() string }); ok {
			x.DeviceName = v.GetDeviceName()
		}
		if v, ok := v.(interface{ GetTcpMd5() []byte }); ok {
			x.TcpMd5 = v.GetTcpMd5()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ControlResponse) Proto_ShallowClone() (c *ControlResponse) {
	if x != nil {
		c = new(ControlResponse)
		c.Proto = x.Proto
		c.DeviceIp = x.DeviceIp
		c.DevicePort = x.DevicePort
		c.ProxyIp = x.ProxyIp
		c.ProxyPort = x.ProxyPort
		c.TtlSeconds = x.TtlSeconds
		c.TtlCounter = x.TtlCounter
		c.Action = x.Action
		c.Metadata = x.Metadata
		c.CompanyId = x.CompanyId
		c.DeviceId = x.DeviceId
		c.DeviceName = x.DeviceName
		c.TcpMd5 = x.TcpMd5
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *KeyVal) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *KeyVal:
		x.Key = v.GetKey()
		x.Val = v.GetVal()
	default:
		if v, ok := v.(interface{ GetKey() string }); ok {
			x.Key = v.GetKey()
		}
		if v, ok := v.(interface{ GetVal() []string }); ok {
			x.Val = v.GetVal()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *KeyVal) Proto_ShallowClone() (c *KeyVal) {
	if x != nil {
		c = new(KeyVal)
		c.Key = x.Key
		c.Val = x.Val
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DataRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DataRequest:
		x.Action = v.GetAction()
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetAction() DataAction }); ok {
			x.Action = v.GetAction()
		}
		if v, ok := v.(interface{ GetData() [][]byte }); ok {
			x.Data = v.GetData()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DataRequest) Proto_ShallowClone() (c *DataRequest) {
	if x != nil {
		c = new(DataRequest)
		c.Action = x.Action
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DataResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DataResponse:
		x.Action = v.GetAction()
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetAction() DataAction }); ok {
			x.Action = v.GetAction()
		}
		if v, ok := v.(interface{ GetData() [][]byte }); ok {
			x.Data = v.GetData()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DataResponse) Proto_ShallowClone() (c *DataResponse) {
	if x != nil {
		c = new(DataResponse)
		c.Action = x.Action
		c.Data = x.Data
	}
	return
}
