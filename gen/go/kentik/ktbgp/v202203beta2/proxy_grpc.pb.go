// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ktbgp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// Control is the control channel used to fetch parameters needed to establish the data channel.
	// This channel is usually used when the client connection is established, or attempted (eg.
	// TCP SYN packets with the MD5 option).
	//
	// One can think of this call as a channel for continuous replication of device configuration
	// data relevant to a particular proxy agent. The server MAY push unsolicited messages.
	//
	// This call can be handled by different machine than the Data() call below.
	//
	// Client MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-token (API key)
	// - sid: site id
	// - version: ktbgp terminator version
	// - instance: random UUID (type-4) generated at the terminator startup
	Control(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ControlClient, error)
	// Data is the data channel run to forward app protocol messages. Clients SHOULD call Control() first.
	//
	// Client MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-token (API key)
	// - sid: site id
	// - version: ktbgp terminator version
	// - instance: random UUID (type-4) generated at the terminator startup
	// - the 5-tuple: proto, device-ip, device-port, proxy-ip, proxy-port
	// - all of ControlResponse.metadata
	// - session-id: a random (version 4) UUID that uniquely identifies the established connection;
	//               each new connection MUST have different session id, even if it has an already seen 5-tuple
	// - counter-up: how many DataRequests were already sent to backend for that session
	// - counter-down: how many DataResponses were already received from backend for that session
	//
	// Server MUST set the following gRPC metadata:
	// - counter-up: how many DataRequests were already received from client for that session
	// - counter-down: how many DataResponses were already sent to client for that session
	//
	// Just after receiving the metadata, both sides MUST verify the session-id and counter values in metadata
	// vs. the local state. The side that detects a disagreement MUST send a KILL message.
	//
	// Client and server MUST respect the action field in received messages:
	// - OK (0): carry on, forward the raw bytes
	// - KILL (1): kill the session: abort the connection, its gRPC stream, and drop cached ControlResponses for connection
	// - RESTART (2): execute a graceful restart
	//
	// The side initiating the graceful RESTART procedure MUST stop sending new messages, close the
	// sending side of the gRPC stream, wait for a RESTART message from the other end, and after that close
	// its gRPC stream completely. The side receiving the graceful RESTART request MUST act accordingly.
	//
	// The client SHOULD initiate a gRPC re-connect attempt after completing the RESTART procedure. In case of
	// transient gRPC errors (without completing the RESTART procedure), client MAY try to reconnect.
	Data(ctx context.Context, opts ...grpc.CallOption) (ProxyService_DataClient, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) Control(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[0], "/kentik.ktbgp.v202203beta2.ProxyService/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceControlClient{stream}
	return x, nil
}

type ProxyService_ControlClient interface {
	Send(*ControlRequest) error
	Recv() (*ControlResponse, error)
	grpc.ClientStream
}

type proxyServiceControlClient struct {
	grpc.ClientStream
}

func (x *proxyServiceControlClient) Send(m *ControlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceControlClient) Recv() (*ControlResponse, error) {
	m := new(ControlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyServiceClient) Data(ctx context.Context, opts ...grpc.CallOption) (ProxyService_DataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[1], "/kentik.ktbgp.v202203beta2.ProxyService/Data", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceDataClient{stream}
	return x, nil
}

type ProxyService_DataClient interface {
	Send(*DataRequest) error
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type proxyServiceDataClient struct {
	grpc.ClientStream
}

func (x *proxyServiceDataClient) Send(m *DataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceDataClient) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations should embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	// Control is the control channel used to fetch parameters needed to establish the data channel.
	// This channel is usually used when the client connection is established, or attempted (eg.
	// TCP SYN packets with the MD5 option).
	//
	// One can think of this call as a channel for continuous replication of device configuration
	// data relevant to a particular proxy agent. The server MAY push unsolicited messages.
	//
	// This call can be handled by different machine than the Data() call below.
	//
	// Client MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-token (API key)
	// - sid: site id
	// - version: ktbgp terminator version
	// - instance: random UUID (type-4) generated at the terminator startup
	Control(ProxyService_ControlServer) error
	// Data is the data channel run to forward app protocol messages. Clients SHOULD call Control() first.
	//
	// Client MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-token (API key)
	// - sid: site id
	// - version: ktbgp terminator version
	// - instance: random UUID (type-4) generated at the terminator startup
	// - the 5-tuple: proto, device-ip, device-port, proxy-ip, proxy-port
	// - all of ControlResponse.metadata
	// - session-id: a random (version 4) UUID that uniquely identifies the established connection;
	//               each new connection MUST have different session id, even if it has an already seen 5-tuple
	// - counter-up: how many DataRequests were already sent to backend for that session
	// - counter-down: how many DataResponses were already received from backend for that session
	//
	// Server MUST set the following gRPC metadata:
	// - counter-up: how many DataRequests were already received from client for that session
	// - counter-down: how many DataResponses were already sent to client for that session
	//
	// Just after receiving the metadata, both sides MUST verify the session-id and counter values in metadata
	// vs. the local state. The side that detects a disagreement MUST send a KILL message.
	//
	// Client and server MUST respect the action field in received messages:
	// - OK (0): carry on, forward the raw bytes
	// - KILL (1): kill the session: abort the connection, its gRPC stream, and drop cached ControlResponses for connection
	// - RESTART (2): execute a graceful restart
	//
	// The side initiating the graceful RESTART procedure MUST stop sending new messages, close the
	// sending side of the gRPC stream, wait for a RESTART message from the other end, and after that close
	// its gRPC stream completely. The side receiving the graceful RESTART request MUST act accordingly.
	//
	// The client SHOULD initiate a gRPC re-connect attempt after completing the RESTART procedure. In case of
	// transient gRPC errors (without completing the RESTART procedure), client MAY try to reconnect.
	Data(ProxyService_DataServer) error
}

// UnimplementedProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) Control(ProxyService_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedProxyServiceServer) Data(ProxyService_DataServer) error {
	return status.Errorf(codes.Unimplemented, "method Data not implemented")
}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).Control(&proxyServiceControlServer{stream})
}

type ProxyService_ControlServer interface {
	Send(*ControlResponse) error
	Recv() (*ControlRequest, error)
	grpc.ServerStream
}

type proxyServiceControlServer struct {
	grpc.ServerStream
}

func (x *proxyServiceControlServer) Send(m *ControlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceControlServer) Recv() (*ControlRequest, error) {
	m := new(ControlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProxyService_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).Data(&proxyServiceDataServer{stream})
}

type ProxyService_DataServer interface {
	Send(*DataResponse) error
	Recv() (*DataRequest, error)
	grpc.ServerStream
}

type proxyServiceDataServer struct {
	grpc.ServerStream
}

func (x *proxyServiceDataServer) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceDataServer) Recv() (*DataRequest, error) {
	m := new(DataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.ktbgp.v202203beta2.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _ProxyService_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Data",
			Handler:       _ProxyService_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kentik/ktbgp/v202203beta2/proxy.proto",
}
