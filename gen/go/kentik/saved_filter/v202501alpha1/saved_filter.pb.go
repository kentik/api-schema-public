// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/saved_filter/v202501alpha1/saved_filter.proto

package saved_filter

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateSavedFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SavedFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CreateSavedFilterRequest) Reset() {
	*x = CreateSavedFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSavedFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSavedFilterRequest) ProtoMessage() {}

func (x *CreateSavedFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSavedFilterRequest.ProtoReflect.Descriptor instead.
func (*CreateSavedFilterRequest) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSavedFilterRequest) GetFilter() *SavedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CreateSavedFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SavedFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CreateSavedFilterResponse) Reset() {
	*x = CreateSavedFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSavedFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSavedFilterResponse) ProtoMessage() {}

func (x *CreateSavedFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSavedFilterResponse.ProtoReflect.Descriptor instead.
func (*CreateSavedFilterResponse) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSavedFilterResponse) GetFilter() *SavedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateSavedFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Filter *SavedFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *UpdateSavedFilterRequest) Reset() {
	*x = UpdateSavedFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSavedFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSavedFilterRequest) ProtoMessage() {}

func (x *UpdateSavedFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSavedFilterRequest.ProtoReflect.Descriptor instead.
func (*UpdateSavedFilterRequest) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSavedFilterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSavedFilterRequest) GetFilter() *SavedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateSavedFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SavedFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *UpdateSavedFilterResponse) Reset() {
	*x = UpdateSavedFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSavedFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSavedFilterResponse) ProtoMessage() {}

func (x *UpdateSavedFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSavedFilterResponse.ProtoReflect.Descriptor instead.
func (*UpdateSavedFilterResponse) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSavedFilterResponse) GetFilter() *SavedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListSavedFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSavedFiltersRequest) Reset() {
	*x = ListSavedFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSavedFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSavedFiltersRequest) ProtoMessage() {}

func (x *ListSavedFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSavedFiltersRequest.ProtoReflect.Descriptor instead.
func (*ListSavedFiltersRequest) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{4}
}

type ListSavedFiltersAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSavedFiltersAllRequest) Reset() {
	*x = ListSavedFiltersAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSavedFiltersAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSavedFiltersAllRequest) ProtoMessage() {}

func (x *ListSavedFiltersAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSavedFiltersAllRequest.ProtoReflect.Descriptor instead.
func (*ListSavedFiltersAllRequest) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{5}
}

type ListSavedFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*SavedFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListSavedFiltersResponse) Reset() {
	*x = ListSavedFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSavedFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSavedFiltersResponse) ProtoMessage() {}

func (x *ListSavedFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSavedFiltersResponse.ProtoReflect.Descriptor instead.
func (*ListSavedFiltersResponse) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{6}
}

func (x *ListSavedFiltersResponse) GetFilters() []*SavedFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListSavedFiltersAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*SavedFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListSavedFiltersAllResponse) Reset() {
	*x = ListSavedFiltersAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSavedFiltersAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSavedFiltersAllResponse) ProtoMessage() {}

func (x *ListSavedFiltersAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSavedFiltersAllResponse.ProtoReflect.Descriptor instead.
func (*ListSavedFiltersAllResponse) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{7}
}

func (x *ListSavedFiltersAllResponse) GetFilters() []*SavedFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type GetSavedFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSavedFilterRequest) Reset() {
	*x = GetSavedFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSavedFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSavedFilterRequest) ProtoMessage() {}

func (x *GetSavedFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSavedFilterRequest.ProtoReflect.Descriptor instead.
func (*GetSavedFilterRequest) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{8}
}

func (x *GetSavedFilterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSavedFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SavedFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetSavedFilterResponse) Reset() {
	*x = GetSavedFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSavedFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSavedFilterResponse) ProtoMessage() {}

func (x *GetSavedFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSavedFilterResponse.ProtoReflect.Descriptor instead.
func (*GetSavedFilterResponse) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{9}
}

func (x *GetSavedFilterResponse) GetFilter() *SavedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteSavedFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSavedFilterRequest) Reset() {
	*x = DeleteSavedFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSavedFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSavedFilterRequest) ProtoMessage() {}

func (x *DeleteSavedFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSavedFilterRequest.ProtoReflect.Descriptor instead.
func (*DeleteSavedFilterRequest) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSavedFilterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSavedFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSavedFilterResponse) Reset() {
	*x = DeleteSavedFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSavedFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSavedFilterResponse) ProtoMessage() {}

func (x *DeleteSavedFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSavedFilterResponse.ProtoReflect.Descriptor instead.
func (*DeleteSavedFilterResponse) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP(), []int{11}
}

var File_kentik_saved_filter_v202501alpha1_saved_filter_proto protoreflect.FileDescriptor

var file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDesc = []byte{
	0x0a, 0x34, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x72, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x64, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf0, 0x0e, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcc, 0x02, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01, 0x92,
	0x41, 0x8c, 0x01, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x2a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x1b, 0x2f,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0x9c, 0x02, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x67, 0x12, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x3f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0xad, 0x02, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6c,
	0x6c, 0x12, 0x3d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x01, 0x92, 0x41, 0x6b, 0x12, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x6c, 0x6c,
	0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x2a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6c,
	0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x2d,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x12, 0xb6, 0x02, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xae, 0x01, 0x92, 0x41, 0x82, 0x01, 0x12, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61,
	0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xd1, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x12, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x2a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x20, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x2d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xfc, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x41, 0x12, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x2d, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x30, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02,
	0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x90, 0xd8, 0x02, 0x03, 0x42, 0xa5, 0x04, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x92, 0x41, 0xc6, 0x03, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x41, 0x50, 0x49, 0x12,
	0x5e, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x22,
	0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x0d, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a,
	0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x73, 0x0a, 0x48, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x12, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30, 0x37, 0x2e, 0x68, 0x74, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescOnce sync.Once
	file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescData = file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDesc
)

func file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescGZIP() []byte {
	file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescOnce.Do(func() {
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescData)
	})
	return file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDescData
}

var file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kentik_saved_filter_v202501alpha1_saved_filter_proto_goTypes = []interface{}{
	(*CreateSavedFilterRequest)(nil),    // 0: kentik.saved_filter.v202501alpha1.CreateSavedFilterRequest
	(*CreateSavedFilterResponse)(nil),   // 1: kentik.saved_filter.v202501alpha1.CreateSavedFilterResponse
	(*UpdateSavedFilterRequest)(nil),    // 2: kentik.saved_filter.v202501alpha1.UpdateSavedFilterRequest
	(*UpdateSavedFilterResponse)(nil),   // 3: kentik.saved_filter.v202501alpha1.UpdateSavedFilterResponse
	(*ListSavedFiltersRequest)(nil),     // 4: kentik.saved_filter.v202501alpha1.ListSavedFiltersRequest
	(*ListSavedFiltersAllRequest)(nil),  // 5: kentik.saved_filter.v202501alpha1.ListSavedFiltersAllRequest
	(*ListSavedFiltersResponse)(nil),    // 6: kentik.saved_filter.v202501alpha1.ListSavedFiltersResponse
	(*ListSavedFiltersAllResponse)(nil), // 7: kentik.saved_filter.v202501alpha1.ListSavedFiltersAllResponse
	(*GetSavedFilterRequest)(nil),       // 8: kentik.saved_filter.v202501alpha1.GetSavedFilterRequest
	(*GetSavedFilterResponse)(nil),      // 9: kentik.saved_filter.v202501alpha1.GetSavedFilterResponse
	(*DeleteSavedFilterRequest)(nil),    // 10: kentik.saved_filter.v202501alpha1.DeleteSavedFilterRequest
	(*DeleteSavedFilterResponse)(nil),   // 11: kentik.saved_filter.v202501alpha1.DeleteSavedFilterResponse
	(*SavedFilter)(nil),                 // 12: kentik.saved_filter.v202501alpha1.SavedFilter
}
var file_kentik_saved_filter_v202501alpha1_saved_filter_proto_depIdxs = []int32{
	12, // 0: kentik.saved_filter.v202501alpha1.CreateSavedFilterRequest.filter:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	12, // 1: kentik.saved_filter.v202501alpha1.CreateSavedFilterResponse.filter:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	12, // 2: kentik.saved_filter.v202501alpha1.UpdateSavedFilterRequest.filter:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	12, // 3: kentik.saved_filter.v202501alpha1.UpdateSavedFilterResponse.filter:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	12, // 4: kentik.saved_filter.v202501alpha1.ListSavedFiltersResponse.filters:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	12, // 5: kentik.saved_filter.v202501alpha1.ListSavedFiltersAllResponse.filters:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	12, // 6: kentik.saved_filter.v202501alpha1.GetSavedFilterResponse.filter:type_name -> kentik.saved_filter.v202501alpha1.SavedFilter
	0,  // 7: kentik.saved_filter.v202501alpha1.SavedFilterService.CreateSavedFilter:input_type -> kentik.saved_filter.v202501alpha1.CreateSavedFilterRequest
	4,  // 8: kentik.saved_filter.v202501alpha1.SavedFilterService.ListSavedFilters:input_type -> kentik.saved_filter.v202501alpha1.ListSavedFiltersRequest
	5,  // 9: kentik.saved_filter.v202501alpha1.SavedFilterService.ListSavedFiltersAll:input_type -> kentik.saved_filter.v202501alpha1.ListSavedFiltersAllRequest
	8,  // 10: kentik.saved_filter.v202501alpha1.SavedFilterService.GetSavedFilter:input_type -> kentik.saved_filter.v202501alpha1.GetSavedFilterRequest
	2,  // 11: kentik.saved_filter.v202501alpha1.SavedFilterService.UpdateSavedFilter:input_type -> kentik.saved_filter.v202501alpha1.UpdateSavedFilterRequest
	10, // 12: kentik.saved_filter.v202501alpha1.SavedFilterService.DeleteSavedFilter:input_type -> kentik.saved_filter.v202501alpha1.DeleteSavedFilterRequest
	1,  // 13: kentik.saved_filter.v202501alpha1.SavedFilterService.CreateSavedFilter:output_type -> kentik.saved_filter.v202501alpha1.CreateSavedFilterResponse
	6,  // 14: kentik.saved_filter.v202501alpha1.SavedFilterService.ListSavedFilters:output_type -> kentik.saved_filter.v202501alpha1.ListSavedFiltersResponse
	7,  // 15: kentik.saved_filter.v202501alpha1.SavedFilterService.ListSavedFiltersAll:output_type -> kentik.saved_filter.v202501alpha1.ListSavedFiltersAllResponse
	9,  // 16: kentik.saved_filter.v202501alpha1.SavedFilterService.GetSavedFilter:output_type -> kentik.saved_filter.v202501alpha1.GetSavedFilterResponse
	3,  // 17: kentik.saved_filter.v202501alpha1.SavedFilterService.UpdateSavedFilter:output_type -> kentik.saved_filter.v202501alpha1.UpdateSavedFilterResponse
	11, // 18: kentik.saved_filter.v202501alpha1.SavedFilterService.DeleteSavedFilter:output_type -> kentik.saved_filter.v202501alpha1.DeleteSavedFilterResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_kentik_saved_filter_v202501alpha1_saved_filter_proto_init() }
func file_kentik_saved_filter_v202501alpha1_saved_filter_proto_init() {
	if File_kentik_saved_filter_v202501alpha1_saved_filter_proto != nil {
		return
	}
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSavedFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSavedFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSavedFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSavedFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSavedFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSavedFiltersAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSavedFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSavedFiltersAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSavedFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSavedFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSavedFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSavedFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_saved_filter_v202501alpha1_saved_filter_proto_goTypes,
		DependencyIndexes: file_kentik_saved_filter_v202501alpha1_saved_filter_proto_depIdxs,
		MessageInfos:      file_kentik_saved_filter_v202501alpha1_saved_filter_proto_msgTypes,
	}.Build()
	File_kentik_saved_filter_v202501alpha1_saved_filter_proto = out.File
	file_kentik_saved_filter_v202501alpha1_saved_filter_proto_rawDesc = nil
	file_kentik_saved_filter_v202501alpha1_saved_filter_proto_goTypes = nil
	file_kentik_saved_filter_v202501alpha1_saved_filter_proto_depIdxs = nil
}
