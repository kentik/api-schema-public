// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/saved_filter/v202501alpha1/saved_filter_message.proto

package saved_filter

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FilterField int32

const (
	FilterField_FILTER_FIELD_UNSPECIFIED                    FilterField = 0
	FilterField_FILTER_FIELD_DST_AS                         FilterField = 1 // default value
	FilterField_FILTER_FIELD_DST_NEXTHOP_AS                 FilterField = 2
	FilterField_FILTER_FIELD_DST_SECOND_ASN                 FilterField = 3
	FilterField_FILTER_FIELD_DST_THIRD_ASN                  FilterField = 4
	FilterField_FILTER_FIELD_DST_BGP_ASPATH                 FilterField = 5
	FilterField_FILTER_FIELD_DST_BGP_COMMUNITY              FilterField = 6
	FilterField_FILTER_FIELD_DST_ETH_MAC                    FilterField = 7
	FilterField_FILTER_FIELD_DST_FLOW_TAGS                  FilterField = 8
	FilterField_FILTER_FIELD_DST_GEO                        FilterField = 9
	FilterField_FILTER_FIELD_DST_GEO_REGION                 FilterField = 10
	FilterField_FILTER_FIELD_DST_GEO_CITY                   FilterField = 11
	FilterField_FILTER_FIELD_DST_ROUTE_LENGTH               FilterField = 12
	FilterField_FILTER_FIELD_INET_DST_ADDR                  FilterField = 13
	FilterField_FILTER_FIELD_IPV4_DST_ROUTE_PREFIX          FilterField = 14
	FilterField_FILTER_FIELD_IPV4_DST_NEXT_HOP              FilterField = 15
	FilterField_FILTER_FIELD_L4_DST_PORT                    FilterField = 16
	FilterField_FILTER_FIELD_OUTPUT_PORT                    FilterField = 17
	FilterField_FILTER_FIELD_I_OUTPUT_SNMP_ALIAS            FilterField = 18
	FilterField_FILTER_FIELD_I_OUTPUT_INTERFACE_DESCRIPTION FilterField = 19
	FilterField_FILTER_FIELD_SRC_AS                         FilterField = 20
	FilterField_FILTER_FIELD_SRC_NEXTHOP_AS                 FilterField = 21
	FilterField_FILTER_FIELD_SRC_SECOND_ASN                 FilterField = 22
	FilterField_FILTER_FIELD_SRC_THIRD_ASN                  FilterField = 23
	FilterField_FILTER_FIELD_SRC_BGP_ASPATH                 FilterField = 24
	FilterField_FILTER_FIELD_SRC_BGP_COMMUNITY              FilterField = 25
	FilterField_FILTER_FIELD_SRC_ETH_MAC                    FilterField = 26
	FilterField_FILTER_FIELD_SRC_FLOW_TAGS                  FilterField = 27
	FilterField_FILTER_FIELD_SRC_GEO                        FilterField = 28
	FilterField_FILTER_FIELD_SRC_GEO_REGION                 FilterField = 29
	FilterField_FILTER_FIELD_SRC_GEO_CITY                   FilterField = 30
	FilterField_FILTER_FIELD_SRC_ROUTE_LENGTH               FilterField = 31
	FilterField_FILTER_FIELD_INET_SRC_ADDR                  FilterField = 32
	FilterField_FILTER_FIELD_IPV4_SRC_ROUTE_PREFIX          FilterField = 33
	FilterField_FILTER_FIELD_IPV4_SRC_NEXT_HOP              FilterField = 34
	FilterField_FILTER_FIELD_L4_SRC_PORT                    FilterField = 35
	FilterField_FILTER_FIELD_INPUT_PORT                     FilterField = 36
	FilterField_FILTER_FIELD_I_INPUT_SNMP_ALIAS             FilterField = 37
	FilterField_FILTER_FIELD_I_INPUT_INTERFACE_DESCRIPTION  FilterField = 38
	FilterField_FILTER_FIELD_BOTH_PKTS                      FilterField = 39
	FilterField_FILTER_FIELD_I_DEVICE_NAME                  FilterField = 40
	FilterField_FILTER_FIELD_PROTOCOL                       FilterField = 41
	FilterField_FILTER_FIELD_TCP_FLAGS                      FilterField = 42
	FilterField_FILTER_FIELD_TCP_FLAGS_RAW                  FilterField = 43
	FilterField_FILTER_FIELD_TCP_RETRANSMIT                 FilterField = 44
	FilterField_FILTER_FIELD_TOS                            FilterField = 45
	FilterField_FILTER_FIELD_VLAN_IN                        FilterField = 46
	FilterField_FILTER_FIELD_VLAN_OUT                       FilterField = 47
)

// Enum value maps for FilterField.
var (
	FilterField_name = map[int32]string{
		0:  "FILTER_FIELD_UNSPECIFIED",
		1:  "FILTER_FIELD_DST_AS",
		2:  "FILTER_FIELD_DST_NEXTHOP_AS",
		3:  "FILTER_FIELD_DST_SECOND_ASN",
		4:  "FILTER_FIELD_DST_THIRD_ASN",
		5:  "FILTER_FIELD_DST_BGP_ASPATH",
		6:  "FILTER_FIELD_DST_BGP_COMMUNITY",
		7:  "FILTER_FIELD_DST_ETH_MAC",
		8:  "FILTER_FIELD_DST_FLOW_TAGS",
		9:  "FILTER_FIELD_DST_GEO",
		10: "FILTER_FIELD_DST_GEO_REGION",
		11: "FILTER_FIELD_DST_GEO_CITY",
		12: "FILTER_FIELD_DST_ROUTE_LENGTH",
		13: "FILTER_FIELD_INET_DST_ADDR",
		14: "FILTER_FIELD_IPV4_DST_ROUTE_PREFIX",
		15: "FILTER_FIELD_IPV4_DST_NEXT_HOP",
		16: "FILTER_FIELD_L4_DST_PORT",
		17: "FILTER_FIELD_OUTPUT_PORT",
		18: "FILTER_FIELD_I_OUTPUT_SNMP_ALIAS",
		19: "FILTER_FIELD_I_OUTPUT_INTERFACE_DESCRIPTION",
		20: "FILTER_FIELD_SRC_AS",
		21: "FILTER_FIELD_SRC_NEXTHOP_AS",
		22: "FILTER_FIELD_SRC_SECOND_ASN",
		23: "FILTER_FIELD_SRC_THIRD_ASN",
		24: "FILTER_FIELD_SRC_BGP_ASPATH",
		25: "FILTER_FIELD_SRC_BGP_COMMUNITY",
		26: "FILTER_FIELD_SRC_ETH_MAC",
		27: "FILTER_FIELD_SRC_FLOW_TAGS",
		28: "FILTER_FIELD_SRC_GEO",
		29: "FILTER_FIELD_SRC_GEO_REGION",
		30: "FILTER_FIELD_SRC_GEO_CITY",
		31: "FILTER_FIELD_SRC_ROUTE_LENGTH",
		32: "FILTER_FIELD_INET_SRC_ADDR",
		33: "FILTER_FIELD_IPV4_SRC_ROUTE_PREFIX",
		34: "FILTER_FIELD_IPV4_SRC_NEXT_HOP",
		35: "FILTER_FIELD_L4_SRC_PORT",
		36: "FILTER_FIELD_INPUT_PORT",
		37: "FILTER_FIELD_I_INPUT_SNMP_ALIAS",
		38: "FILTER_FIELD_I_INPUT_INTERFACE_DESCRIPTION",
		39: "FILTER_FIELD_BOTH_PKTS",
		40: "FILTER_FIELD_I_DEVICE_NAME",
		41: "FILTER_FIELD_PROTOCOL",
		42: "FILTER_FIELD_TCP_FLAGS",
		43: "FILTER_FIELD_TCP_FLAGS_RAW",
		44: "FILTER_FIELD_TCP_RETRANSMIT",
		45: "FILTER_FIELD_TOS",
		46: "FILTER_FIELD_VLAN_IN",
		47: "FILTER_FIELD_VLAN_OUT",
	}
	FilterField_value = map[string]int32{
		"FILTER_FIELD_UNSPECIFIED":                    0,
		"FILTER_FIELD_DST_AS":                         1,
		"FILTER_FIELD_DST_NEXTHOP_AS":                 2,
		"FILTER_FIELD_DST_SECOND_ASN":                 3,
		"FILTER_FIELD_DST_THIRD_ASN":                  4,
		"FILTER_FIELD_DST_BGP_ASPATH":                 5,
		"FILTER_FIELD_DST_BGP_COMMUNITY":              6,
		"FILTER_FIELD_DST_ETH_MAC":                    7,
		"FILTER_FIELD_DST_FLOW_TAGS":                  8,
		"FILTER_FIELD_DST_GEO":                        9,
		"FILTER_FIELD_DST_GEO_REGION":                 10,
		"FILTER_FIELD_DST_GEO_CITY":                   11,
		"FILTER_FIELD_DST_ROUTE_LENGTH":               12,
		"FILTER_FIELD_INET_DST_ADDR":                  13,
		"FILTER_FIELD_IPV4_DST_ROUTE_PREFIX":          14,
		"FILTER_FIELD_IPV4_DST_NEXT_HOP":              15,
		"FILTER_FIELD_L4_DST_PORT":                    16,
		"FILTER_FIELD_OUTPUT_PORT":                    17,
		"FILTER_FIELD_I_OUTPUT_SNMP_ALIAS":            18,
		"FILTER_FIELD_I_OUTPUT_INTERFACE_DESCRIPTION": 19,
		"FILTER_FIELD_SRC_AS":                         20,
		"FILTER_FIELD_SRC_NEXTHOP_AS":                 21,
		"FILTER_FIELD_SRC_SECOND_ASN":                 22,
		"FILTER_FIELD_SRC_THIRD_ASN":                  23,
		"FILTER_FIELD_SRC_BGP_ASPATH":                 24,
		"FILTER_FIELD_SRC_BGP_COMMUNITY":              25,
		"FILTER_FIELD_SRC_ETH_MAC":                    26,
		"FILTER_FIELD_SRC_FLOW_TAGS":                  27,
		"FILTER_FIELD_SRC_GEO":                        28,
		"FILTER_FIELD_SRC_GEO_REGION":                 29,
		"FILTER_FIELD_SRC_GEO_CITY":                   30,
		"FILTER_FIELD_SRC_ROUTE_LENGTH":               31,
		"FILTER_FIELD_INET_SRC_ADDR":                  32,
		"FILTER_FIELD_IPV4_SRC_ROUTE_PREFIX":          33,
		"FILTER_FIELD_IPV4_SRC_NEXT_HOP":              34,
		"FILTER_FIELD_L4_SRC_PORT":                    35,
		"FILTER_FIELD_INPUT_PORT":                     36,
		"FILTER_FIELD_I_INPUT_SNMP_ALIAS":             37,
		"FILTER_FIELD_I_INPUT_INTERFACE_DESCRIPTION":  38,
		"FILTER_FIELD_BOTH_PKTS":                      39,
		"FILTER_FIELD_I_DEVICE_NAME":                  40,
		"FILTER_FIELD_PROTOCOL":                       41,
		"FILTER_FIELD_TCP_FLAGS":                      42,
		"FILTER_FIELD_TCP_FLAGS_RAW":                  43,
		"FILTER_FIELD_TCP_RETRANSMIT":                 44,
		"FILTER_FIELD_TOS":                            45,
		"FILTER_FIELD_VLAN_IN":                        46,
		"FILTER_FIELD_VLAN_OUT":                       47,
	}
)

func (x FilterField) Enum() *FilterField {
	p := new(FilterField)
	*p = x
	return p
}

func (x FilterField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterField) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes[0].Descriptor()
}

func (FilterField) Type() protoreflect.EnumType {
	return &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes[0]
}

func (x FilterField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterField.Descriptor instead.
func (FilterField) EnumDescriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{0}
}

type FilterOperator int32

const (
	FilterOperator_FILTER_OPERATOR_UNSPECIFIED        FilterOperator = 0
	FilterOperator_FILTER_OPERATOR_EQUAL              FilterOperator = 1 // "=", default value
	FilterOperator_FILTER_OPERATOR_NOT_EQUAL          FilterOperator = 2 // "<>"
	FilterOperator_FILTER_OPERATOR_CONTAINS           FilterOperator = 3 // "ILIKE"
	FilterOperator_FILTER_OPERATOR_NOT_CONTAINS       FilterOperator = 4 // "NOT ILIKE"
	FilterOperator_FILTER_OPERATOR_REGEX_CONTAINS     FilterOperator = 5 // "~"
	FilterOperator_FILTER_OPERATOR_REGEX_NOT_CONTAINS FilterOperator = 6 // "!~"
	FilterOperator_FILTER_OPERATOR_GREATER_THAN       FilterOperator = 7 // ">"
	FilterOperator_FILTER_OPERATOR_LESS_THAN          FilterOperator = 8 // "<"
	FilterOperator_FILTER_OPERATOR_BITWISE_AND        FilterOperator = 9 // "&"
)

// Enum value maps for FilterOperator.
var (
	FilterOperator_name = map[int32]string{
		0: "FILTER_OPERATOR_UNSPECIFIED",
		1: "FILTER_OPERATOR_EQUAL",
		2: "FILTER_OPERATOR_NOT_EQUAL",
		3: "FILTER_OPERATOR_CONTAINS",
		4: "FILTER_OPERATOR_NOT_CONTAINS",
		5: "FILTER_OPERATOR_REGEX_CONTAINS",
		6: "FILTER_OPERATOR_REGEX_NOT_CONTAINS",
		7: "FILTER_OPERATOR_GREATER_THAN",
		8: "FILTER_OPERATOR_LESS_THAN",
		9: "FILTER_OPERATOR_BITWISE_AND",
	}
	FilterOperator_value = map[string]int32{
		"FILTER_OPERATOR_UNSPECIFIED":        0,
		"FILTER_OPERATOR_EQUAL":              1,
		"FILTER_OPERATOR_NOT_EQUAL":          2,
		"FILTER_OPERATOR_CONTAINS":           3,
		"FILTER_OPERATOR_NOT_CONTAINS":       4,
		"FILTER_OPERATOR_REGEX_CONTAINS":     5,
		"FILTER_OPERATOR_REGEX_NOT_CONTAINS": 6,
		"FILTER_OPERATOR_GREATER_THAN":       7,
		"FILTER_OPERATOR_LESS_THAN":          8,
		"FILTER_OPERATOR_BITWISE_AND":        9,
	}
)

func (x FilterOperator) Enum() *FilterOperator {
	p := new(FilterOperator)
	*p = x
	return p
}

func (x FilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes[1].Descriptor()
}

func (FilterOperator) Type() protoreflect.EnumType {
	return &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes[1]
}

func (x FilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperator.Descriptor instead.
func (FilterOperator) EnumDescriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{1}
}

type FilterLevel int32

const (
	FilterLevel_FILTER_LEVEL_UNSPECIFIED FilterLevel = 0
	FilterLevel_FILTER_LEVEL_COMPANY     FilterLevel = 1
	FilterLevel_FILTER_LEVEL_GLOBAL      FilterLevel = 2
	FilterLevel_FILTER_LEVEL_USER        FilterLevel = 3
)

// Enum value maps for FilterLevel.
var (
	FilterLevel_name = map[int32]string{
		0: "FILTER_LEVEL_UNSPECIFIED",
		1: "FILTER_LEVEL_COMPANY",
		2: "FILTER_LEVEL_GLOBAL",
		3: "FILTER_LEVEL_USER",
	}
	FilterLevel_value = map[string]int32{
		"FILTER_LEVEL_UNSPECIFIED": 0,
		"FILTER_LEVEL_COMPANY":     1,
		"FILTER_LEVEL_GLOBAL":      2,
		"FILTER_LEVEL_USER":        3,
	}
)

func (x FilterLevel) Enum() *FilterLevel {
	p := new(FilterLevel)
	*p = x
	return p
}

func (x FilterLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes[2].Descriptor()
}

func (FilterLevel) Type() protoreflect.EnumType {
	return &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes[2]
}

func (x FilterLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterLevel.Descriptor instead.
func (FilterLevel) EnumDescriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{2}
}

type SavedFilterFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterField FilterField    `protobuf:"varint,1,opt,name=filter_field,json=filterField,proto3,enum=kentik.saved_filter.v202501alpha1.FilterField" json:"filter_field,omitempty"`
	Operator    FilterOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=kentik.saved_filter.v202501alpha1.FilterOperator" json:"operator,omitempty"`
	FilterValue string         `protobuf:"bytes,3,opt,name=filter_value,json=filterValue,proto3" json:"filter_value,omitempty"`
}

func (x *SavedFilterFilter) Reset() {
	*x = SavedFilterFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedFilterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedFilterFilter) ProtoMessage() {}

func (x *SavedFilterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedFilterFilter.ProtoReflect.Descriptor instead.
func (*SavedFilterFilter) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{0}
}

func (x *SavedFilterFilter) GetFilterField() FilterField {
	if x != nil {
		return x.FilterField
	}
	return FilterField_FILTER_FIELD_UNSPECIFIED
}

func (x *SavedFilterFilter) GetOperator() FilterOperator {
	if x != nil {
		return x.Operator
	}
	return FilterOperator_FILTER_OPERATOR_UNSPECIFIED
}

func (x *SavedFilterFilter) GetFilterValue() string {
	if x != nil {
		return x.FilterValue
	}
	return ""
}

type SavedFilterFilterGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any     bool                 `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`
	Filters []*SavedFilterFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	Not     bool                 `protobuf:"varint,3,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *SavedFilterFilterGroup) Reset() {
	*x = SavedFilterFilterGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedFilterFilterGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedFilterFilterGroup) ProtoMessage() {}

func (x *SavedFilterFilterGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedFilterFilterGroup.ProtoReflect.Descriptor instead.
func (*SavedFilterFilterGroup) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{1}
}

func (x *SavedFilterFilterGroup) GetAny() bool {
	if x != nil {
		return x.Any
	}
	return false
}

func (x *SavedFilterFilterGroup) GetFilters() []*SavedFilterFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SavedFilterFilterGroup) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

type SavedFilterFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any          bool                      `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`
	FilterGroups []*SavedFilterFilterGroup `protobuf:"bytes,2,rep,name=filter_groups,json=filterGroups,proto3" json:"filter_groups,omitempty"`
}

func (x *SavedFilterFilters) Reset() {
	*x = SavedFilterFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedFilterFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedFilterFilters) ProtoMessage() {}

func (x *SavedFilterFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedFilterFilters.ProtoReflect.Descriptor instead.
func (*SavedFilterFilters) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{2}
}

func (x *SavedFilterFilters) GetAny() bool {
	if x != nil {
		return x.Any
	}
	return false
}

func (x *SavedFilterFilters) GetFilterGroups() []*SavedFilterFilterGroup {
	if x != nil {
		return x.FilterGroups
	}
	return nil
}

type SavedFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FilterName        string                 `protobuf:"bytes,2,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	FilterDescription string                 `protobuf:"bytes,3,opt,name=filter_description,json=filterDescription,proto3" json:"filter_description,omitempty"`
	Filters           *SavedFilterFilters    `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
	FilterLevel       FilterLevel            `protobuf:"varint,5,opt,name=filter_level,json=filterLevel,proto3,enum=kentik.saved_filter.v202501alpha1.FilterLevel" json:"filter_level,omitempty"`
	CreatedDate       *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdatedDate       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
}

func (x *SavedFilter) Reset() {
	*x = SavedFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedFilter) ProtoMessage() {}

func (x *SavedFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedFilter.ProtoReflect.Descriptor instead.
func (*SavedFilter) Descriptor() ([]byte, []int) {
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP(), []int{3}
}

func (x *SavedFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SavedFilter) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *SavedFilter) GetFilterDescription() string {
	if x != nil {
		return x.FilterDescription
	}
	return ""
}

func (x *SavedFilter) GetFilters() *SavedFilterFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SavedFilter) GetFilterLevel() FilterLevel {
	if x != nil {
		return x.FilterLevel
	}
	return FilterLevel_FILTER_LEVEL_UNSPECIFIED
}

func (x *SavedFilter) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *SavedFilter) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

var File_kentik_saved_filter_v202501alpha1_saved_filter_message_proto protoreflect.FileDescriptor

var file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x02, 0x0a, 0x11, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x7c, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x41, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x20, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x44, 0x53, 0x54, 0x5f, 0x41, 0x53,
	0x2e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x79,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x2e, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x16, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x73, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x5c, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x41, 0x4c, 0x4c, 0x20, 0x6f,
	0x72, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x70, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x2e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x03, 0x6e,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x4e, 0x4f, 0x54, 0x28, 0x29, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2e, 0x52, 0x03, 0x6e, 0x6f, 0x74,
	0x22, 0xc2, 0x02, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x73, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x5c, 0x57, 0x68, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x41, 0x4c,
	0x4c, 0x20, 0x6f, 0x72, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0xb6, 0x01, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x56, 0x92, 0x41, 0x50, 0x32, 0x4e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20,
	0x41, 0x4e, 0x59, 0x28, 0x41, 0x4c, 0x4c, 0x28, 0x78, 0x29, 0x2c, 0x20, 0x41, 0x4e, 0x59, 0x28,
	0x79, 0x29, 0x29, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9b, 0x07, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x32, 0x27, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x26,
	0x32, 0x24, 0x41, 0x6e, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x27, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0xad, 0x02, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0xd9, 0x01, 0x92, 0x41, 0xd5, 0x01, 0x32, 0xd2, 0x01, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
	0x6f, 0x6e, 0x6c, 0x79, 0x29, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x28,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x77, 0x69, 0x64,
	0x65, 0x29, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x28, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x29, 0x20, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x3a, 0x20, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x79, 0x65, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6f, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x30, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0x44, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x55, 0x54, 0x43, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x38, 0x92, 0x41,
	0x32, 0x32, 0x30, 0x44, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x6d, 0x6f, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x55,
	0x54, 0x43, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x2a, 0x9b, 0x0c, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x41, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54,
	0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x4e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54,
	0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10,
	0x06, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x47, 0x45, 0x4f, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x47, 0x45,
	0x4f, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x47,
	0x45, 0x4f, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x45,
	0x54, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x4e,
	0x4d, 0x50, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x12, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x41, 0x53, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50,
	0x5f, 0x41, 0x53, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x41, 0x53, 0x4e, 0x10, 0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44,
	0x5f, 0x41, 0x53, 0x4e, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41,
	0x53, 0x50, 0x41, 0x54, 0x48, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x42, 0x47, 0x50, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x47, 0x45,
	0x4f, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x43, 0x49, 0x54,
	0x59, 0x10, 0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x10, 0x1f, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x10, 0x20, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x21, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x4c, 0x34, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x23,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x24, 0x12, 0x23, 0x0a,
	0x1f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53,
	0x10, 0x25, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x49, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x26, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x27, 0x12, 0x1e,
	0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x28, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x53, 0x10, 0x2a, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x2b, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x4d, 0x49, 0x54, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x2e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10,
	0x2f, 0x2a, 0xd9, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x09, 0x2a, 0x75, 0x0a,
	0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x4e, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x03, 0x42, 0x5b, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescOnce sync.Once
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescData = file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDesc
)

func file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescGZIP() []byte {
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescOnce.Do(func() {
		file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescData)
	})
	return file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDescData
}

var file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_goTypes = []interface{}{
	(FilterField)(0),               // 0: kentik.saved_filter.v202501alpha1.FilterField
	(FilterOperator)(0),            // 1: kentik.saved_filter.v202501alpha1.FilterOperator
	(FilterLevel)(0),               // 2: kentik.saved_filter.v202501alpha1.FilterLevel
	(*SavedFilterFilter)(nil),      // 3: kentik.saved_filter.v202501alpha1.SavedFilterFilter
	(*SavedFilterFilterGroup)(nil), // 4: kentik.saved_filter.v202501alpha1.SavedFilterFilterGroup
	(*SavedFilterFilters)(nil),     // 5: kentik.saved_filter.v202501alpha1.SavedFilterFilters
	(*SavedFilter)(nil),            // 6: kentik.saved_filter.v202501alpha1.SavedFilter
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
}
var file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_depIdxs = []int32{
	0, // 0: kentik.saved_filter.v202501alpha1.SavedFilterFilter.filter_field:type_name -> kentik.saved_filter.v202501alpha1.FilterField
	1, // 1: kentik.saved_filter.v202501alpha1.SavedFilterFilter.operator:type_name -> kentik.saved_filter.v202501alpha1.FilterOperator
	3, // 2: kentik.saved_filter.v202501alpha1.SavedFilterFilterGroup.filters:type_name -> kentik.saved_filter.v202501alpha1.SavedFilterFilter
	4, // 3: kentik.saved_filter.v202501alpha1.SavedFilterFilters.filter_groups:type_name -> kentik.saved_filter.v202501alpha1.SavedFilterFilterGroup
	5, // 4: kentik.saved_filter.v202501alpha1.SavedFilter.filters:type_name -> kentik.saved_filter.v202501alpha1.SavedFilterFilters
	2, // 5: kentik.saved_filter.v202501alpha1.SavedFilter.filter_level:type_name -> kentik.saved_filter.v202501alpha1.FilterLevel
	7, // 6: kentik.saved_filter.v202501alpha1.SavedFilter.created_date:type_name -> google.protobuf.Timestamp
	7, // 7: kentik.saved_filter.v202501alpha1.SavedFilter.updated_date:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_init() }
func file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_init() {
	if File_kentik_saved_filter_v202501alpha1_saved_filter_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedFilterFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedFilterFilterGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedFilterFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_goTypes,
		DependencyIndexes: file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_depIdxs,
		EnumInfos:         file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_enumTypes,
		MessageInfos:      file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_msgTypes,
	}.Build()
	File_kentik_saved_filter_v202501alpha1_saved_filter_message_proto = out.File
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_rawDesc = nil
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_goTypes = nil
	file_kentik_saved_filter_v202501alpha1_saved_filter_message_proto_depIdxs = nil
}
