// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MigrationsClient is the client API for Migrations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrationsClient interface {
	ListMigrations(ctx context.Context, in *MigrationsRequest, opts ...grpc.CallOption) (*MigrationsResponse, error)
	RunMigrations(ctx context.Context, in *RunMigrationsRequest, opts ...grpc.CallOption) (*RunMigrationsResponse, error)
}

type migrationsClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationsClient(cc grpc.ClientConnInterface) MigrationsClient {
	return &migrationsClient{cc}
}

func (c *migrationsClient) ListMigrations(ctx context.Context, in *MigrationsRequest, opts ...grpc.CallOption) (*MigrationsResponse, error) {
	out := new(MigrationsResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Migrations/ListMigrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationsClient) RunMigrations(ctx context.Context, in *RunMigrationsRequest, opts ...grpc.CallOption) (*RunMigrationsResponse, error) {
	out := new(RunMigrationsResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Migrations/RunMigrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationsServer is the server API for Migrations service.
// All implementations should embed UnimplementedMigrationsServer
// for forward compatibility
type MigrationsServer interface {
	ListMigrations(context.Context, *MigrationsRequest) (*MigrationsResponse, error)
	RunMigrations(context.Context, *RunMigrationsRequest) (*RunMigrationsResponse, error)
}

// UnimplementedMigrationsServer should be embedded to have forward compatible implementations.
type UnimplementedMigrationsServer struct {
}

func (UnimplementedMigrationsServer) ListMigrations(context.Context, *MigrationsRequest) (*MigrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMigrations not implemented")
}
func (UnimplementedMigrationsServer) RunMigrations(context.Context, *RunMigrationsRequest) (*RunMigrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMigrations not implemented")
}

// UnsafeMigrationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationsServer will
// result in compilation errors.
type UnsafeMigrationsServer interface {
	mustEmbedUnimplementedMigrationsServer()
}

func RegisterMigrationsServer(s grpc.ServiceRegistrar, srv MigrationsServer) {
	s.RegisterService(&Migrations_ServiceDesc, srv)
}

func _Migrations_ListMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationsServer).ListMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Migrations/ListMigrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationsServer).ListMigrations(ctx, req.(*MigrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migrations_RunMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMigrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationsServer).RunMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Migrations/RunMigrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationsServer).RunMigrations(ctx, req.(*RunMigrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Migrations_ServiceDesc is the grpc.ServiceDesc for Migrations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Migrations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.api.notify.v0.Migrations",
	HandlerType: (*MigrationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMigrations",
			Handler:    _Migrations_ListMigrations_Handler,
		},
		{
			MethodName: "RunMigrations",
			Handler:    _Migrations_RunMigrations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/notify/backend/v0/migrations.proto",
}
