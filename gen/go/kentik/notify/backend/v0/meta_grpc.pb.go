// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaClient is the client API for Meta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaClient interface {
	GetDBPoolSettings(ctx context.Context, in *GetDBPoolSettingsRequest, opts ...grpc.CallOption) (*GetDBPoolSettingsResponse, error)
	SetDBPoolSettings(ctx context.Context, in *SetDBPoolSettingsRequest, opts ...grpc.CallOption) (*SetDBPoolSettingsResponse, error)
	GetDBStats(ctx context.Context, in *GetDBStatsRequest, opts ...grpc.CallOption) (*GetDBStatsResponse, error)
	GetEnv(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaEnvResponse, error)
	GetLogLevel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogLevelResponse, error)
	SetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error)
	// Deprecated: Do not use.
	// deprecated
	GetLogJSONMode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogJSONModeResponse, error)
	// Deprecated: Do not use.
	// deprecated
	SetLogJSONMode(ctx context.Context, in *LogJSONModeRequest, opts ...grpc.CallOption) (*LogJSONModeResponse, error)
}

type metaClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaClient(cc grpc.ClientConnInterface) MetaClient {
	return &metaClient{cc}
}

func (c *metaClient) GetDBPoolSettings(ctx context.Context, in *GetDBPoolSettingsRequest, opts ...grpc.CallOption) (*GetDBPoolSettingsResponse, error) {
	out := new(GetDBPoolSettingsResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/GetDBPoolSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) SetDBPoolSettings(ctx context.Context, in *SetDBPoolSettingsRequest, opts ...grpc.CallOption) (*SetDBPoolSettingsResponse, error) {
	out := new(SetDBPoolSettingsResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/SetDBPoolSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) GetDBStats(ctx context.Context, in *GetDBStatsRequest, opts ...grpc.CallOption) (*GetDBStatsResponse, error) {
	out := new(GetDBStatsResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/GetDBStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) GetEnv(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetaEnvResponse, error) {
	out := new(MetaEnvResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/GetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) GetLogLevel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogLevelResponse, error) {
	out := new(LogLevelResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/GetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClient) SetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error) {
	out := new(LogLevelResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *metaClient) GetLogJSONMode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogJSONModeResponse, error) {
	out := new(LogJSONModeResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/GetLogJSONMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *metaClient) SetLogJSONMode(ctx context.Context, in *LogJSONModeRequest, opts ...grpc.CallOption) (*LogJSONModeResponse, error) {
	out := new(LogJSONModeResponse)
	err := c.cc.Invoke(ctx, "/kentik.api.notify.v0.Meta/SetLogJSONMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServer is the server API for Meta service.
// All implementations should embed UnimplementedMetaServer
// for forward compatibility
type MetaServer interface {
	GetDBPoolSettings(context.Context, *GetDBPoolSettingsRequest) (*GetDBPoolSettingsResponse, error)
	SetDBPoolSettings(context.Context, *SetDBPoolSettingsRequest) (*SetDBPoolSettingsResponse, error)
	GetDBStats(context.Context, *GetDBStatsRequest) (*GetDBStatsResponse, error)
	GetEnv(context.Context, *emptypb.Empty) (*MetaEnvResponse, error)
	GetLogLevel(context.Context, *emptypb.Empty) (*LogLevelResponse, error)
	SetLogLevel(context.Context, *LogLevelRequest) (*LogLevelResponse, error)
	// Deprecated: Do not use.
	// deprecated
	GetLogJSONMode(context.Context, *emptypb.Empty) (*LogJSONModeResponse, error)
	// Deprecated: Do not use.
	// deprecated
	SetLogJSONMode(context.Context, *LogJSONModeRequest) (*LogJSONModeResponse, error)
}

// UnimplementedMetaServer should be embedded to have forward compatible implementations.
type UnimplementedMetaServer struct {
}

func (UnimplementedMetaServer) GetDBPoolSettings(context.Context, *GetDBPoolSettingsRequest) (*GetDBPoolSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBPoolSettings not implemented")
}
func (UnimplementedMetaServer) SetDBPoolSettings(context.Context, *SetDBPoolSettingsRequest) (*SetDBPoolSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDBPoolSettings not implemented")
}
func (UnimplementedMetaServer) GetDBStats(context.Context, *GetDBStatsRequest) (*GetDBStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBStats not implemented")
}
func (UnimplementedMetaServer) GetEnv(context.Context, *emptypb.Empty) (*MetaEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedMetaServer) GetLogLevel(context.Context, *emptypb.Empty) (*LogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLevel not implemented")
}
func (UnimplementedMetaServer) SetLogLevel(context.Context, *LogLevelRequest) (*LogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedMetaServer) GetLogJSONMode(context.Context, *emptypb.Empty) (*LogJSONModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogJSONMode not implemented")
}
func (UnimplementedMetaServer) SetLogJSONMode(context.Context, *LogJSONModeRequest) (*LogJSONModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogJSONMode not implemented")
}

// UnsafeMetaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServer will
// result in compilation errors.
type UnsafeMetaServer interface {
	mustEmbedUnimplementedMetaServer()
}

func RegisterMetaServer(s grpc.ServiceRegistrar, srv MetaServer) {
	s.RegisterService(&Meta_ServiceDesc, srv)
}

func _Meta_GetDBPoolSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBPoolSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).GetDBPoolSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/GetDBPoolSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).GetDBPoolSettings(ctx, req.(*GetDBPoolSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_SetDBPoolSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDBPoolSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).SetDBPoolSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/SetDBPoolSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).SetDBPoolSettings(ctx, req.(*SetDBPoolSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_GetDBStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).GetDBStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/GetDBStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).GetDBStats(ctx, req.(*GetDBStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).GetEnv(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_GetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).GetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/GetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).GetLogLevel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).SetLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_GetLogJSONMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).GetLogJSONMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/GetLogJSONMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).GetLogJSONMode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meta_SetLogJSONMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogJSONModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServer).SetLogJSONMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.api.notify.v0.Meta/SetLogJSONMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServer).SetLogJSONMode(ctx, req.(*LogJSONModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Meta_ServiceDesc is the grpc.ServiceDesc for Meta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.api.notify.v0.Meta",
	HandlerType: (*MetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDBPoolSettings",
			Handler:    _Meta_GetDBPoolSettings_Handler,
		},
		{
			MethodName: "SetDBPoolSettings",
			Handler:    _Meta_SetDBPoolSettings_Handler,
		},
		{
			MethodName: "GetDBStats",
			Handler:    _Meta_GetDBStats_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _Meta_GetEnv_Handler,
		},
		{
			MethodName: "GetLogLevel",
			Handler:    _Meta_GetLogLevel_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _Meta_SetLogLevel_Handler,
		},
		{
			MethodName: "GetLogJSONMode",
			Handler:    _Meta_GetLogJSONMode_Handler,
		},
		{
			MethodName: "SetLogJSONMode",
			Handler:    _Meta_SetLogJSONMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/notify/backend/v0/meta.proto",
}
