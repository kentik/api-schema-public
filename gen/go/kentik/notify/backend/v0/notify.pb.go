// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/notify/backend/v0/notify.proto

package notify

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChannelStatus int32

const (
	ChannelStatus_channelStatusNone ChannelStatus = 0
	ChannelStatus_enabled           ChannelStatus = 1
	ChannelStatus_disabled          ChannelStatus = 2
)

// Enum value maps for ChannelStatus.
var (
	ChannelStatus_name = map[int32]string{
		0: "channelStatusNone",
		1: "enabled",
		2: "disabled",
	}
	ChannelStatus_value = map[string]int32{
		"channelStatusNone": 0,
		"enabled":           1,
		"disabled":          2,
	}
)

func (x ChannelStatus) Enum() *ChannelStatus {
	p := new(ChannelStatus)
	*p = x
	return p
}

func (x ChannelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_notify_backend_v0_notify_proto_enumTypes[0].Descriptor()
}

func (ChannelStatus) Type() protoreflect.EnumType {
	return &file_kentik_notify_backend_v0_notify_proto_enumTypes[0]
}

func (x ChannelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelStatus.Descriptor instead.
func (ChannelStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{0}
}

// deprecated
type ChannelManagedStatus int32

const (
	ChannelManagedStatus_notManaged      ChannelManagedStatus = 0
	ChannelManagedStatus_alertingManaged ChannelManagedStatus = 1
)

// Enum value maps for ChannelManagedStatus.
var (
	ChannelManagedStatus_name = map[int32]string{
		0: "notManaged",
		1: "alertingManaged",
	}
	ChannelManagedStatus_value = map[string]int32{
		"notManaged":      0,
		"alertingManaged": 1,
	}
)

func (x ChannelManagedStatus) Enum() *ChannelManagedStatus {
	p := new(ChannelManagedStatus)
	*p = x
	return p
}

func (x ChannelManagedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelManagedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_notify_backend_v0_notify_proto_enumTypes[1].Descriptor()
}

func (ChannelManagedStatus) Type() protoreflect.EnumType {
	return &file_kentik_notify_backend_v0_notify_proto_enumTypes[1]
}

func (x ChannelManagedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelManagedStatus.Descriptor instead.
func (ChannelManagedStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{1}
}

type DeliveryStatus int32

const (
	DeliveryStatus_deliveryUnknown DeliveryStatus = 0
	DeliveryStatus_deliveryOK      DeliveryStatus = 1
	DeliveryStatus_deliveryPending DeliveryStatus = 2
	DeliveryStatus_deliveryBad     DeliveryStatus = 3
)

// Enum value maps for DeliveryStatus.
var (
	DeliveryStatus_name = map[int32]string{
		0: "deliveryUnknown",
		1: "deliveryOK",
		2: "deliveryPending",
		3: "deliveryBad",
	}
	DeliveryStatus_value = map[string]int32{
		"deliveryUnknown": 0,
		"deliveryOK":      1,
		"deliveryPending": 2,
		"deliveryBad":     3,
	}
)

func (x DeliveryStatus) Enum() *DeliveryStatus {
	p := new(DeliveryStatus)
	*p = x
	return p
}

func (x DeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_notify_backend_v0_notify_proto_enumTypes[2].Descriptor()
}

func (DeliveryStatus) Type() protoreflect.EnumType {
	return &file_kentik_notify_backend_v0_notify_proto_enumTypes[2]
}

func (x DeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryStatus.Descriptor instead.
func (DeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{2}
}

type ApplyAlertingManagedChannelsMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings []*ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *ApplyAlertingManagedChannelsMappingRequest) Reset() {
	*x = ApplyAlertingManagedChannelsMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAlertingManagedChannelsMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAlertingManagedChannelsMappingRequest) ProtoMessage() {}

func (x *ApplyAlertingManagedChannelsMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAlertingManagedChannelsMappingRequest.ProtoReflect.Descriptor instead.
func (*ApplyAlertingManagedChannelsMappingRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyAlertingManagedChannelsMappingRequest) GetMappings() []*ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type NotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelVersion ChannelVersion `protobuf:"varint,1,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"`
	ChannelID      int64          `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	NotificationID int64          `protobuf:"varint,3,opt,name=notificationID,proto3" json:"notificationID,omitempty"`
}

func (x *NotificationsRequest) Reset() {
	*x = NotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationsRequest) ProtoMessage() {}

func (x *NotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationsRequest.ProtoReflect.Descriptor instead.
func (*NotificationsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationsRequest) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *NotificationsRequest) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *NotificationsRequest) GetNotificationID() int64 {
	if x != nil {
		return x.NotificationID
	}
	return 0
}

type NotificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *NotificationsResponse) Reset() {
	*x = NotificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationsResponse) ProtoMessage() {}

func (x *NotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationsResponse.ProtoReflect.Descriptor instead.
func (*NotificationsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{2}
}

func (x *NotificationsResponse) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type NotificationChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// include v1 channels
	ShowV1Channels bool `protobuf:"varint,1,opt,name=showV1Channels,proto3" json:"showV1Channels,omitempty"`
	// deprecated
	//
	// Deprecated: Do not use.
	Managed ChannelManagedStatus `protobuf:"varint,2,opt,name=managed,proto3,enum=kentik.api.notify.v0.ChannelManagedStatus" json:"managed,omitempty"`
	// if no user channel is found, return an empty result
	UserChannelNotFoundReturnEmpty bool `protobuf:"varint,3,opt,name=userChannelNotFoundReturnEmpty,proto3" json:"userChannelNotFoundReturnEmpty,omitempty"`
}

func (x *NotificationChannelsRequest) Reset() {
	*x = NotificationChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannelsRequest) ProtoMessage() {}

func (x *NotificationChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannelsRequest.ProtoReflect.Descriptor instead.
func (*NotificationChannelsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{3}
}

func (x *NotificationChannelsRequest) GetShowV1Channels() bool {
	if x != nil {
		return x.ShowV1Channels
	}
	return false
}

// Deprecated: Do not use.
func (x *NotificationChannelsRequest) GetManaged() ChannelManagedStatus {
	if x != nil {
		return x.Managed
	}
	return ChannelManagedStatus_notManaged
}

func (x *NotificationChannelsRequest) GetUserChannelNotFoundReturnEmpty() bool {
	if x != nil {
		return x.UserChannelNotFoundReturnEmpty
	}
	return false
}

type NotificationChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*NotificationChannel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *NotificationChannelsResponse) Reset() {
	*x = NotificationChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannelsResponse) ProtoMessage() {}

func (x *NotificationChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannelsResponse.ProtoReflect.Descriptor instead.
func (*NotificationChannelsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{4}
}

func (x *NotificationChannelsResponse) GetChannels() []*NotificationChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type NotificationChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *NotificationChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *NotificationChannelResponse) Reset() {
	*x = NotificationChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannelResponse) ProtoMessage() {}

func (x *NotificationChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannelResponse.ProtoReflect.Descriptor instead.
func (*NotificationChannelResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{5}
}

func (x *NotificationChannelResponse) GetChannel() *NotificationChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type NotificationChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelVersion ChannelVersion         `protobuf:"varint,1,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"`
	ChannelID      int64                  `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ChannelType    string                 `protobuf:"bytes,3,opt,name=channelType,proto3" json:"channelType,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Status         ChannelStatus          `protobuf:"varint,5,opt,name=status,proto3,enum=kentik.api.notify.v0.ChannelStatus" json:"status,omitempty"`
	CreationTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	EditTime       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=editTime,proto3" json:"editTime,omitempty"`
	Config         *ChannelConfig         `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	V1Raw          string                 `protobuf:"bytes,9,opt,name=v1Raw,proto3" json:"v1Raw,omitempty"` // raw json dump of v1 info. don't use generally.
}

func (x *NotificationChannel) Reset() {
	*x = NotificationChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannel) ProtoMessage() {}

func (x *NotificationChannel) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannel.ProtoReflect.Descriptor instead.
func (*NotificationChannel) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{6}
}

func (x *NotificationChannel) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *NotificationChannel) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *NotificationChannel) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *NotificationChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationChannel) GetStatus() ChannelStatus {
	if x != nil {
		return x.Status
	}
	return ChannelStatus_channelStatusNone
}

func (x *NotificationChannel) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *NotificationChannel) GetEditTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EditTime
	}
	return nil
}

func (x *NotificationChannel) GetConfig() *ChannelConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NotificationChannel) GetV1Raw() string {
	if x != nil {
		return x.V1Raw
	}
	return ""
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectorConfig    *SelectorConfig  `protobuf:"bytes,1,opt,name=selectorConfig,proto3" json:"selectorConfig,omitempty"`
	BatchingConfig    *BatchingConfig  `protobuf:"bytes,2,opt,name=batchingConfig,proto3" json:"batchingConfig,omitempty"`
	RenderingConfig   *RenderingConfig `protobuf:"bytes,5,opt,name=renderingConfig,proto3" json:"renderingConfig,omitempty"`
	SendingConfig     *SendingConfig   `protobuf:"bytes,3,opt,name=sendingConfig,proto3" json:"sendingConfig,omitempty"`
	SyslogConfig      *SyslogConfig    `protobuf:"bytes,4,opt,name=syslogConfig,proto3" json:"syslogConfig,omitempty"`
	UserChannelUserID int64            `protobuf:"varint,6,opt,name=userChannelUserID,proto3" json:"userChannelUserID,omitempty"`
	// Deprecated: Do not use.
	Managed ChannelManagedStatus `protobuf:"varint,7,opt,name=managed,proto3,enum=kentik.api.notify.v0.ChannelManagedStatus" json:"managed,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelConfig) GetSelectorConfig() *SelectorConfig {
	if x != nil {
		return x.SelectorConfig
	}
	return nil
}

func (x *ChannelConfig) GetBatchingConfig() *BatchingConfig {
	if x != nil {
		return x.BatchingConfig
	}
	return nil
}

func (x *ChannelConfig) GetRenderingConfig() *RenderingConfig {
	if x != nil {
		return x.RenderingConfig
	}
	return nil
}

func (x *ChannelConfig) GetSendingConfig() *SendingConfig {
	if x != nil {
		return x.SendingConfig
	}
	return nil
}

func (x *ChannelConfig) GetSyslogConfig() *SyslogConfig {
	if x != nil {
		return x.SyslogConfig
	}
	return nil
}

func (x *ChannelConfig) GetUserChannelUserID() int64 {
	if x != nil {
		return x.UserChannelUserID
	}
	return 0
}

// Deprecated: Do not use.
func (x *ChannelConfig) GetManaged() ChannelManagedStatus {
	if x != nil {
		return x.Managed
	}
	return ChannelManagedStatus_notManaged
}

type SelectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conjunctions []*SelectorConjunction `protobuf:"bytes,1,rep,name=conjunctions,proto3" json:"conjunctions,omitempty"`
}

func (x *SelectorConfig) Reset() {
	*x = SelectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorConfig) ProtoMessage() {}

func (x *SelectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorConfig.ProtoReflect.Descriptor instead.
func (*SelectorConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{8}
}

func (x *SelectorConfig) GetConjunctions() []*SelectorConjunction {
	if x != nil {
		return x.Conjunctions
	}
	return nil
}

type SelectorConjunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *SelectorConjunction) Reset() {
	*x = SelectorConjunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectorConjunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorConjunction) ProtoMessage() {}

func (x *SelectorConjunction) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorConjunction.ProtoReflect.Descriptor instead.
func (*SelectorConjunction) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{9}
}

func (x *SelectorConjunction) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lhs string `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Op  string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Rhs string `protobuf:"bytes,3,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{10}
}

func (x *Selector) GetLhs() string {
	if x != nil {
		return x.Lhs
	}
	return ""
}

func (x *Selector) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *Selector) GetRhs() string {
	if x != nil {
		return x.Rhs
	}
	return ""
}

type BatchingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBatchSize  int64                `protobuf:"varint,1,opt,name=maxBatchSize,proto3" json:"maxBatchSize,omitempty"`
	BatchDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=batchDuration,proto3" json:"batchDuration,omitempty"`
	// Sends a batch at a certain time each day.
	// There is no associated timezone (and so no accounting for daylight savings).
	// The date portion of the timestamp is ignored, only the time matters.
	DailyTimesToSend []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=dailyTimesToSend,proto3" json:"dailyTimesToSend,omitempty"`
}

func (x *BatchingConfig) Reset() {
	*x = BatchingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchingConfig) ProtoMessage() {}

func (x *BatchingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchingConfig.ProtoReflect.Descriptor instead.
func (*BatchingConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{11}
}

func (x *BatchingConfig) GetMaxBatchSize() int64 {
	if x != nil {
		return x.MaxBatchSize
	}
	return 0
}

func (x *BatchingConfig) GetBatchDuration() *durationpb.Duration {
	if x != nil {
		return x.BatchDuration
	}
	return nil
}

func (x *BatchingConfig) GetDailyTimesToSend() []*timestamppb.Timestamp {
	if x != nil {
		return x.DailyTimesToSend
	}
	return nil
}

type RenderingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomTemplate string `protobuf:"bytes,1,opt,name=customTemplate,proto3" json:"customTemplate,omitempty"`
	UglifyJSON     bool   `protobuf:"varint,2,opt,name=uglifyJSON,proto3" json:"uglifyJSON,omitempty"`
	InsightsDigest bool   `protobuf:"varint,3,opt,name=insightsDigest,proto3" json:"insightsDigest,omitempty"`
}

func (x *RenderingConfig) Reset() {
	*x = RenderingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderingConfig) ProtoMessage() {}

func (x *RenderingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderingConfig.ProtoReflect.Descriptor instead.
func (*RenderingConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{12}
}

func (x *RenderingConfig) GetCustomTemplate() string {
	if x != nil {
		return x.CustomTemplate
	}
	return ""
}

func (x *RenderingConfig) GetUglifyJSON() bool {
	if x != nil {
		return x.UglifyJSON
	}
	return false
}

func (x *RenderingConfig) GetInsightsDigest() bool {
	if x != nil {
		return x.InsightsDigest
	}
	return false
}

type SendingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url              string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Username         string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Usernames        []string             `protobuf:"bytes,3,rep,name=usernames,proto3" json:"usernames,omitempty"`
	Token            string               `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Identifier       string               `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	CustomHeaders    map[string]string    `protobuf:"bytes,8,rep,name=customHeaders,proto3" json:"customHeaders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxAttempts      int64                `protobuf:"varint,6,opt,name=maxAttempts,proto3" json:"maxAttempts,omitempty"`          // default 3
	CooldownDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=cooldownDuration,proto3" json:"cooldownDuration,omitempty"` // time between attempts. default 30s
}

func (x *SendingConfig) Reset() {
	*x = SendingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendingConfig) ProtoMessage() {}

func (x *SendingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendingConfig.ProtoReflect.Descriptor instead.
func (*SendingConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{13}
}

func (x *SendingConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SendingConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SendingConfig) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *SendingConfig) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SendingConfig) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *SendingConfig) GetCustomHeaders() map[string]string {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *SendingConfig) GetMaxAttempts() int64 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *SendingConfig) GetCooldownDuration() *durationpb.Duration {
	if x != nil {
		return x.CooldownDuration
	}
	return nil
}

type SyslogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host           string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port           int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Network        string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"` // "tcp" or "udp"
	SyslogHostname string `protobuf:"bytes,4,opt,name=syslogHostname,proto3" json:"syslogHostname,omitempty"`
	Severity       int64  `protobuf:"varint,5,opt,name=severity,proto3" json:"severity,omitempty"`
	Facility       int64  `protobuf:"varint,6,opt,name=facility,proto3" json:"facility,omitempty"`
}

func (x *SyslogConfig) Reset() {
	*x = SyslogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyslogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyslogConfig) ProtoMessage() {}

func (x *SyslogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyslogConfig.ProtoReflect.Descriptor instead.
func (*SyslogConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{14}
}

func (x *SyslogConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SyslogConfig) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SyslogConfig) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *SyslogConfig) GetSyslogHostname() string {
	if x != nil {
		return x.SyslogHostname
	}
	return ""
}

func (x *SyslogConfig) GetSeverity() int64 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *SyslogConfig) GetFacility() int64 {
	if x != nil {
		return x.Facility
	}
	return 0
}

type DeliveryResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelVersion ChannelVersion `protobuf:"varint,1,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"`
	ChannelID      int64          `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	JobUUID        string         `protobuf:"bytes,3,opt,name=jobUUID,proto3" json:"jobUUID,omitempty"`
}

func (x *DeliveryResultsRequest) Reset() {
	*x = DeliveryResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryResultsRequest) ProtoMessage() {}

func (x *DeliveryResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryResultsRequest.ProtoReflect.Descriptor instead.
func (*DeliveryResultsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{15}
}

func (x *DeliveryResultsRequest) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *DeliveryResultsRequest) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *DeliveryResultsRequest) GetJobUUID() string {
	if x != nil {
		return x.JobUUID
	}
	return ""
}

type DeliveryResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DeliveryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *DeliveryResultsResponse) Reset() {
	*x = DeliveryResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryResultsResponse) ProtoMessage() {}

func (x *DeliveryResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryResultsResponse.ProtoReflect.Descriptor instead.
func (*DeliveryResultsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{16}
}

func (x *DeliveryResultsResponse) GetResults() []*DeliveryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DeliveryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyID      int64                  `protobuf:"varint,2,opt,name=companyID,proto3" json:"companyID,omitempty"`
	ChannelVersion ChannelVersion         `protobuf:"varint,3,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"`
	ChannelID      int64                  `protobuf:"varint,4,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Time           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	JobUUID        string                 `protobuf:"bytes,6,opt,name=jobUUID,proto3" json:"jobUUID,omitempty"`
	StatusCode     int32                  `protobuf:"varint,7,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	RequestBody    string                 `protobuf:"bytes,8,opt,name=requestBody,proto3" json:"requestBody,omitempty"`
	ResponseBody   string                 `protobuf:"bytes,9,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	RequestStart   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=requestStart,proto3" json:"requestStart,omitempty"`
	RequestEnd     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=requestEnd,proto3" json:"requestEnd,omitempty"`
	Error          string                 `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
	Sent           bool                   `protobuf:"varint,13,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *DeliveryResult) Reset() {
	*x = DeliveryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryResult) ProtoMessage() {}

func (x *DeliveryResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryResult.ProtoReflect.Descriptor instead.
func (*DeliveryResult) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{17}
}

func (x *DeliveryResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryResult) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *DeliveryResult) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *DeliveryResult) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *DeliveryResult) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeliveryResult) GetJobUUID() string {
	if x != nil {
		return x.JobUUID
	}
	return ""
}

func (x *DeliveryResult) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DeliveryResult) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *DeliveryResult) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *DeliveryResult) GetRequestStart() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestStart
	}
	return nil
}

func (x *DeliveryResult) GetRequestEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestEnd
	}
	return nil
}

func (x *DeliveryResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeliveryResult) GetSent() bool {
	if x != nil {
		return x.Sent
	}
	return false
}

type NotificationAndStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelVersion ChannelVersion `protobuf:"varint,1,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"` // default 2
	ChannelID      int64          `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
}

func (x *NotificationAndStatusRequest) Reset() {
	*x = NotificationAndStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationAndStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationAndStatusRequest) ProtoMessage() {}

func (x *NotificationAndStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationAndStatusRequest.ProtoReflect.Descriptor instead.
func (*NotificationAndStatusRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{18}
}

func (x *NotificationAndStatusRequest) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *NotificationAndStatusRequest) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

type NotificationAndStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification    *Notification     `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	DeliveryResults []*DeliveryResult `protobuf:"bytes,2,rep,name=deliveryResults,proto3" json:"deliveryResults,omitempty"`
	Status          DeliveryStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=kentik.api.notify.v0.DeliveryStatus" json:"status,omitempty"`
}

func (x *NotificationAndStatusResponse) Reset() {
	*x = NotificationAndStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationAndStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationAndStatusResponse) ProtoMessage() {}

func (x *NotificationAndStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationAndStatusResponse.ProtoReflect.Descriptor instead.
func (*NotificationAndStatusResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{19}
}

func (x *NotificationAndStatusResponse) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *NotificationAndStatusResponse) GetDeliveryResults() []*DeliveryResult {
	if x != nil {
		return x.DeliveryResults
	}
	return nil
}

func (x *NotificationAndStatusResponse) GetStatus() DeliveryStatus {
	if x != nil {
		return x.Status
	}
	return DeliveryStatus_deliveryUnknown
}

type NotificationPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelVersion ChannelVersion                `protobuf:"varint,1,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"`
	ChannelID      int64                         `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Options        *NotificationPayloadOptions   `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	OptionsList    []*NotificationPayloadOptions `protobuf:"bytes,4,rep,name=optionsList,proto3" json:"optionsList,omitempty"`
}

func (x *NotificationPayloadRequest) Reset() {
	*x = NotificationPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationPayloadRequest) ProtoMessage() {}

func (x *NotificationPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationPayloadRequest.ProtoReflect.Descriptor instead.
func (*NotificationPayloadRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{20}
}

func (x *NotificationPayloadRequest) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *NotificationPayloadRequest) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *NotificationPayloadRequest) GetOptions() *NotificationPayloadOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *NotificationPayloadRequest) GetOptionsList() []*NotificationPayloadOptions {
	if x != nil {
		return x.OptionsList
	}
	return nil
}

type NotificationPayloadOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType   string `protobuf:"bytes,1,opt,name=modelType,proto3" json:"modelType,omitempty"`  // alarmEvent, mitigationEvent, insightEvent, mitigationPlatformEvent, genericEvent, etc.
	LastModel   bool   `protobuf:"varint,2,opt,name=lastModel,proto3" json:"lastModel,omitempty"` // instead of using the id below, grab the most recent model.
	TestModel   bool   `protobuf:"varint,3,opt,name=testModel,proto3" json:"testModel,omitempty"` // instead of using the id below, use a testing model.
	TestModelID string `protobuf:"bytes,4,opt,name=testModelID,proto3" json:"testModelID,omitempty"`
	// IDs specified according to modelType:
	AlarmID           int64  `protobuf:"varint,5,opt,name=alarmID,proto3" json:"alarmID,omitempty"`
	AlarmHistoryID    int64  `protobuf:"varint,6,opt,name=alarmHistoryID,proto3" json:"alarmHistoryID,omitempty"`
	MitigationID      int64  `protobuf:"varint,7,opt,name=mitigationID,proto3" json:"mitigationID,omitempty"`
	MitigationEventID int64  `protobuf:"varint,8,opt,name=mitigationEventID,proto3" json:"mitigationEventID,omitempty"`
	InsightID         string `protobuf:"bytes,9,opt,name=insightID,proto3" json:"insightID,omitempty"`
}

func (x *NotificationPayloadOptions) Reset() {
	*x = NotificationPayloadOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationPayloadOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationPayloadOptions) ProtoMessage() {}

func (x *NotificationPayloadOptions) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationPayloadOptions.ProtoReflect.Descriptor instead.
func (*NotificationPayloadOptions) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{21}
}

func (x *NotificationPayloadOptions) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *NotificationPayloadOptions) GetLastModel() bool {
	if x != nil {
		return x.LastModel
	}
	return false
}

func (x *NotificationPayloadOptions) GetTestModel() bool {
	if x != nil {
		return x.TestModel
	}
	return false
}

func (x *NotificationPayloadOptions) GetTestModelID() string {
	if x != nil {
		return x.TestModelID
	}
	return ""
}

func (x *NotificationPayloadOptions) GetAlarmID() int64 {
	if x != nil {
		return x.AlarmID
	}
	return 0
}

func (x *NotificationPayloadOptions) GetAlarmHistoryID() int64 {
	if x != nil {
		return x.AlarmHistoryID
	}
	return 0
}

func (x *NotificationPayloadOptions) GetMitigationID() int64 {
	if x != nil {
		return x.MitigationID
	}
	return 0
}

func (x *NotificationPayloadOptions) GetMitigationEventID() int64 {
	if x != nil {
		return x.MitigationEventID
	}
	return 0
}

func (x *NotificationPayloadOptions) GetInsightID() string {
	if x != nil {
		return x.InsightID
	}
	return ""
}

type NotificationPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NotificationPayloadResponse) Reset() {
	*x = NotificationPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationPayloadResponse) ProtoMessage() {}

func (x *NotificationPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationPayloadResponse.ProtoReflect.Descriptor instead.
func (*NotificationPayloadResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{22}
}

func (x *NotificationPayloadResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type CreateNotificationForTestingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelVersion ChannelVersion                `protobuf:"varint,1,opt,name=channelVersion,proto3,enum=kentik.api.notify.v0.ChannelVersion" json:"channelVersion,omitempty"`
	ChannelID      int64                         `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	PayloadOptions *NotificationPayloadOptions   `protobuf:"bytes,3,opt,name=payloadOptions,proto3" json:"payloadOptions,omitempty"`
	OptionsList    []*NotificationPayloadOptions `protobuf:"bytes,4,rep,name=optionsList,proto3" json:"optionsList,omitempty"`
}

func (x *CreateNotificationForTestingRequest) Reset() {
	*x = CreateNotificationForTestingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationForTestingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationForTestingRequest) ProtoMessage() {}

func (x *CreateNotificationForTestingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationForTestingRequest.ProtoReflect.Descriptor instead.
func (*CreateNotificationForTestingRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{23}
}

func (x *CreateNotificationForTestingRequest) GetChannelVersion() ChannelVersion {
	if x != nil {
		return x.ChannelVersion
	}
	return ChannelVersion_channelVersionUnknown
}

func (x *CreateNotificationForTestingRequest) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *CreateNotificationForTestingRequest) GetPayloadOptions() *NotificationPayloadOptions {
	if x != nil {
		return x.PayloadOptions
	}
	return nil
}

func (x *CreateNotificationForTestingRequest) GetOptionsList() []*NotificationPayloadOptions {
	if x != nil {
		return x.OptionsList
	}
	return nil
}

type CreateNotificationForTestingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNotificationForTestingResponse) Reset() {
	*x = CreateNotificationForTestingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationForTestingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationForTestingResponse) ProtoMessage() {}

func (x *CreateNotificationForTestingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationForTestingResponse.ProtoReflect.Descriptor instead.
func (*CreateNotificationForTestingResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{24}
}

type SupportedChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupportedChannelsRequest) Reset() {
	*x = SupportedChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedChannelsRequest) ProtoMessage() {}

func (x *SupportedChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedChannelsRequest.ProtoReflect.Descriptor instead.
func (*SupportedChannelsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{25}
}

type SupportedChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedChannels []*SupportedChannel `protobuf:"bytes,1,rep,name=supportedChannels,proto3" json:"supportedChannels,omitempty"`
}

func (x *SupportedChannelsResponse) Reset() {
	*x = SupportedChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedChannelsResponse) ProtoMessage() {}

func (x *SupportedChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedChannelsResponse.ProtoReflect.Descriptor instead.
func (*SupportedChannelsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{26}
}

func (x *SupportedChannelsResponse) GetSupportedChannels() []*SupportedChannel {
	if x != nil {
		return x.SupportedChannels
	}
	return nil
}

type SupportedChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType        string          `protobuf:"bytes,1,opt,name=channelType,proto3" json:"channelType,omitempty"`
	ChannelDisplayName string          `protobuf:"bytes,3,opt,name=channelDisplayName,proto3" json:"channelDisplayName,omitempty"`
	RequiredFields     []*ChannelField `protobuf:"bytes,2,rep,name=requiredFields,proto3" json:"requiredFields,omitempty"`
}

func (x *SupportedChannel) Reset() {
	*x = SupportedChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedChannel) ProtoMessage() {}

func (x *SupportedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedChannel.ProtoReflect.Descriptor instead.
func (*SupportedChannel) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{27}
}

func (x *SupportedChannel) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *SupportedChannel) GetChannelDisplayName() string {
	if x != nil {
		return x.ChannelDisplayName
	}
	return ""
}

func (x *SupportedChannel) GetRequiredFields() []*ChannelField {
	if x != nil {
		return x.RequiredFields
	}
	return nil
}

type ChannelField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A path is within a NotificationChannel's ChannelConfig,
	// for example "sendingConfig.username" or "sendingConfig.identifier".
	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // for humans
}

func (x *ChannelField) Reset() {
	*x = ChannelField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelField) ProtoMessage() {}

func (x *ChannelField) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelField.ProtoReflect.Descriptor instead.
func (*ChannelField) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{28}
}

func (x *ChannelField) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ChannelField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetAccessControlConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAccessControlConfigRequest) Reset() {
	*x = GetAccessControlConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessControlConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessControlConfigRequest) ProtoMessage() {}

func (x *GetAccessControlConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessControlConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAccessControlConfigRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{29}
}

type GetAccessControlConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessControlConfig *AccessControlConfig `protobuf:"bytes,1,opt,name=accessControlConfig,proto3" json:"accessControlConfig,omitempty"`
}

func (x *GetAccessControlConfigResponse) Reset() {
	*x = GetAccessControlConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessControlConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessControlConfigResponse) ProtoMessage() {}

func (x *GetAccessControlConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessControlConfigResponse.ProtoReflect.Descriptor instead.
func (*GetAccessControlConfigResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{30}
}

func (x *GetAccessControlConfigResponse) GetAccessControlConfig() *AccessControlConfig {
	if x != nil {
		return x.AccessControlConfig
	}
	return nil
}

type SetAccessControlConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessControlConfig *AccessControlConfig `protobuf:"bytes,1,opt,name=accessControlConfig,proto3" json:"accessControlConfig,omitempty"`
}

func (x *SetAccessControlConfigRequest) Reset() {
	*x = SetAccessControlConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAccessControlConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccessControlConfigRequest) ProtoMessage() {}

func (x *SetAccessControlConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccessControlConfigRequest.ProtoReflect.Descriptor instead.
func (*SetAccessControlConfigRequest) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{31}
}

func (x *SetAccessControlConfigRequest) GetAccessControlConfig() *AccessControlConfig {
	if x != nil {
		return x.AccessControlConfig
	}
	return nil
}

type SetAccessControlConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessControlConfig *AccessControlConfig `protobuf:"bytes,1,opt,name=accessControlConfig,proto3" json:"accessControlConfig,omitempty"`
}

func (x *SetAccessControlConfigResponse) Reset() {
	*x = SetAccessControlConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAccessControlConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccessControlConfigResponse) ProtoMessage() {}

func (x *SetAccessControlConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccessControlConfigResponse.ProtoReflect.Descriptor instead.
func (*SetAccessControlConfigResponse) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{32}
}

func (x *SetAccessControlConfigResponse) GetAccessControlConfig() *AccessControlConfig {
	if x != nil {
		return x.AccessControlConfig
	}
	return nil
}

type AccessControlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allow *SelectorConfig `protobuf:"bytes,1,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (x *AccessControlConfig) Reset() {
	*x = AccessControlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControlConfig) ProtoMessage() {}

func (x *AccessControlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControlConfig.ProtoReflect.Descriptor instead.
func (*AccessControlConfig) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{33}
}

func (x *AccessControlConfig) GetAllow() *SelectorConfig {
	if x != nil {
		return x.Allow
	}
	return nil
}

type ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertPolicy    string  `protobuf:"bytes,1,opt,name=alertPolicy,proto3" json:"alertPolicy,omitempty"`
	AlertThreshold string  `protobuf:"bytes,2,opt,name=alertThreshold,proto3" json:"alertThreshold,omitempty"`
	ChannelIDs     []int64 `protobuf:"varint,3,rep,packed,name=channelIDs,proto3" json:"channelIDs,omitempty"`
	Company        string  `protobuf:"bytes,4,opt,name=company,proto3" json:"company,omitempty"` // optional, used for cross company notifications
}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) Reset() {
	*x = ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) ProtoMessage() {}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_notify_backend_v0_notify_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping.ProtoReflect.Descriptor instead.
func (*ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) Descriptor() ([]byte, []int) {
	return file_kentik_notify_backend_v0_notify_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) GetAlertPolicy() string {
	if x != nil {
		return x.AlertPolicy
	}
	return ""
}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) GetAlertThreshold() string {
	if x != nil {
		return x.AlertThreshold
	}
	return ""
}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) GetChannelIDs() []int64 {
	if x != nil {
		return x.ChannelIDs
	}
	return nil
}

func (x *ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

var File_kentik_notify_backend_v0_notify_proto protoreflect.FileDescriptor

var file_kentik_notify_backend_v0_notify_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x30, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x30, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc0, 0x02, 0x0a, 0x2a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x73, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x61, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x56, 0x31, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x68, 0x6f, 0x77, 0x56, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x65, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x62, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xbf, 0x03, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x31, 0x52, 0x61, 0x77, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x31, 0x52, 0x61, 0x77, 0x22, 0x87, 0x04, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c,
	0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x22, 0x5f, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6a,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x68, 0x73, 0x22, 0xbd, 0x01, 0x0a,
	0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x67, 0x6c, 0x69,
	0x66, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x67,
	0x6c, 0x69, 0x66, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x01,
	0x0a, 0x0c, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x9e, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x59, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x80, 0x04, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x4c, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x22,
	0x8a, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xf5, 0x01, 0x0a,
	0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12,
	0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xca, 0x02, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x1b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x19, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xb0,
	0x01, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x44, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7c, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7d, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x2a, 0x41, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x64, 0x10, 0x03, 0x32, 0x86, 0x2d, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0xd0, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x60, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22, 0x27, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x01, 0x2a, 0x12, 0xf9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8a, 0x01, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x12, 0x3f, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x2f, 0x7b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x5a, 0x32, 0x12, 0x30, 0x2f, 0x76,
	0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x12, 0xcf,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5d, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01,
	0x12, 0xd2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x25,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x30, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xd6, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0xf2, 0xd7,
	0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4b, 0x22, 0x27, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x5a,
	0x1d, 0x22, 0x18, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xc5,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xf2, 0xd7, 0x02,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x22, 0x1b, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xf2, 0xd7, 0x02, 0x0b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x12, 0x1b, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5a, 0x0e,
	0x12, 0x0c, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0xdb,
	0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x22, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x01, 0x2a, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xd2, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x27, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x7d, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x7d, 0x12, 0xdd, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61,
	0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x1a, 0x27, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x3a,
	0x01, 0x2a, 0x5a, 0x1d, 0x1a, 0x18, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0xd7, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b,
	0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x2a, 0x27, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x5a,
	0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x12, 0xcf, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x25, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0xcb, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x20,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xc4, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x20, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5a, 0x13, 0x12,
	0x11, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x12, 0xd4, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x67, 0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x22, 0x2a, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x30, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xda, 0x01, 0x0a, 0x1a, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0xf2, 0xd7, 0x02, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x55, 0x22, 0x2c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x3a,
	0x01, 0x2a, 0x5a, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xc1, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0xf2, 0xd7, 0x02,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x2a, 0x20, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x5a, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x94, 0x02, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x12, 0x3f, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x32, 0x12,
	0x30, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x92, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x92, 0x01, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7d, 0x22, 0x40, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x36,
	0x22, 0x31, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d,
	0x01, 0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x22, 0x3d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x30,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xbd,
	0x02, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01,
	0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x87, 0x01, 0x22, 0x45, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x01,
	0x2a, 0x5a, 0x3b, 0x22, 0x36, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xaa,
	0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0xf2, 0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8d, 0x01, 0x22, 0x48,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x3e, 0x22, 0x39, 0x2f,
	0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xf9, 0x01, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0xf2, 0xd7, 0x02, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x55, 0x1a, 0x2c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x1a, 0x1d, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xf2,
	0xd7, 0x02, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0xb9, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xf2, 0xd7, 0x02, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x30, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0xca, 0x41, 0x13,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x21, 0x5a,
	0x1f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_notify_backend_v0_notify_proto_rawDescOnce sync.Once
	file_kentik_notify_backend_v0_notify_proto_rawDescData = file_kentik_notify_backend_v0_notify_proto_rawDesc
)

func file_kentik_notify_backend_v0_notify_proto_rawDescGZIP() []byte {
	file_kentik_notify_backend_v0_notify_proto_rawDescOnce.Do(func() {
		file_kentik_notify_backend_v0_notify_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_notify_backend_v0_notify_proto_rawDescData)
	})
	return file_kentik_notify_backend_v0_notify_proto_rawDescData
}

var file_kentik_notify_backend_v0_notify_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kentik_notify_backend_v0_notify_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_kentik_notify_backend_v0_notify_proto_goTypes = []interface{}{
	(ChannelStatus)(0),                                 // 0: kentik.api.notify.v0.ChannelStatus
	(ChannelManagedStatus)(0),                          // 1: kentik.api.notify.v0.ChannelManagedStatus
	(DeliveryStatus)(0),                                // 2: kentik.api.notify.v0.DeliveryStatus
	(*ApplyAlertingManagedChannelsMappingRequest)(nil), // 3: kentik.api.notify.v0.ApplyAlertingManagedChannelsMappingRequest
	(*NotificationsRequest)(nil),                       // 4: kentik.api.notify.v0.NotificationsRequest
	(*NotificationsResponse)(nil),                      // 5: kentik.api.notify.v0.NotificationsResponse
	(*NotificationChannelsRequest)(nil),                // 6: kentik.api.notify.v0.NotificationChannelsRequest
	(*NotificationChannelsResponse)(nil),               // 7: kentik.api.notify.v0.NotificationChannelsResponse
	(*NotificationChannelResponse)(nil),                // 8: kentik.api.notify.v0.NotificationChannelResponse
	(*NotificationChannel)(nil),                        // 9: kentik.api.notify.v0.NotificationChannel
	(*ChannelConfig)(nil),                              // 10: kentik.api.notify.v0.ChannelConfig
	(*SelectorConfig)(nil),                             // 11: kentik.api.notify.v0.SelectorConfig
	(*SelectorConjunction)(nil),                        // 12: kentik.api.notify.v0.SelectorConjunction
	(*Selector)(nil),                                   // 13: kentik.api.notify.v0.Selector
	(*BatchingConfig)(nil),                             // 14: kentik.api.notify.v0.BatchingConfig
	(*RenderingConfig)(nil),                            // 15: kentik.api.notify.v0.RenderingConfig
	(*SendingConfig)(nil),                              // 16: kentik.api.notify.v0.SendingConfig
	(*SyslogConfig)(nil),                               // 17: kentik.api.notify.v0.SyslogConfig
	(*DeliveryResultsRequest)(nil),                     // 18: kentik.api.notify.v0.DeliveryResultsRequest
	(*DeliveryResultsResponse)(nil),                    // 19: kentik.api.notify.v0.DeliveryResultsResponse
	(*DeliveryResult)(nil),                             // 20: kentik.api.notify.v0.DeliveryResult
	(*NotificationAndStatusRequest)(nil),               // 21: kentik.api.notify.v0.NotificationAndStatusRequest
	(*NotificationAndStatusResponse)(nil),              // 22: kentik.api.notify.v0.NotificationAndStatusResponse
	(*NotificationPayloadRequest)(nil),                 // 23: kentik.api.notify.v0.NotificationPayloadRequest
	(*NotificationPayloadOptions)(nil),                 // 24: kentik.api.notify.v0.NotificationPayloadOptions
	(*NotificationPayloadResponse)(nil),                // 25: kentik.api.notify.v0.NotificationPayloadResponse
	(*CreateNotificationForTestingRequest)(nil),        // 26: kentik.api.notify.v0.CreateNotificationForTestingRequest
	(*CreateNotificationForTestingResponse)(nil),       // 27: kentik.api.notify.v0.CreateNotificationForTestingResponse
	(*SupportedChannelsRequest)(nil),                   // 28: kentik.api.notify.v0.SupportedChannelsRequest
	(*SupportedChannelsResponse)(nil),                  // 29: kentik.api.notify.v0.SupportedChannelsResponse
	(*SupportedChannel)(nil),                           // 30: kentik.api.notify.v0.SupportedChannel
	(*ChannelField)(nil),                               // 31: kentik.api.notify.v0.ChannelField
	(*GetAccessControlConfigRequest)(nil),              // 32: kentik.api.notify.v0.GetAccessControlConfigRequest
	(*GetAccessControlConfigResponse)(nil),             // 33: kentik.api.notify.v0.GetAccessControlConfigResponse
	(*SetAccessControlConfigRequest)(nil),              // 34: kentik.api.notify.v0.SetAccessControlConfigRequest
	(*SetAccessControlConfigResponse)(nil),             // 35: kentik.api.notify.v0.SetAccessControlConfigResponse
	(*AccessControlConfig)(nil),                        // 36: kentik.api.notify.v0.AccessControlConfig
	(*ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping)(nil), // 37: kentik.api.notify.v0.ApplyAlertingManagedChannelsMappingRequest.PolicyThresholdMapping
	nil,                               // 38: kentik.api.notify.v0.SendingConfig.CustomHeadersEntry
	(ChannelVersion)(0),               // 39: kentik.api.notify.v0.ChannelVersion
	(*Notification)(nil),              // 40: kentik.api.notify.v0.Notification
	(*timestamppb.Timestamp)(nil),     // 41: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 42: google.protobuf.Duration
	(*NotificationEvent)(nil),         // 43: kentik.api.notify.v0.NotificationEvent
	(*CreateUserChannelRequest)(nil),  // 44: kentik.api.notify.v0.CreateUserChannelRequest
	(*SubscribeRequest)(nil),          // 45: kentik.api.notify.v0.SubscribeRequest
	(*NotificationEventResponse)(nil), // 46: kentik.api.notify.v0.NotificationEventResponse
	(*SubscribeResponse)(nil),         // 47: kentik.api.notify.v0.SubscribeResponse
}
var file_kentik_notify_backend_v0_notify_proto_depIdxs = []int32{
	37, // 0: kentik.api.notify.v0.ApplyAlertingManagedChannelsMappingRequest.mappings:type_name -> kentik.api.notify.v0.ApplyAlertingManagedChannelsMappingRequest.PolicyThresholdMapping
	39, // 1: kentik.api.notify.v0.NotificationsRequest.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	40, // 2: kentik.api.notify.v0.NotificationsResponse.notifications:type_name -> kentik.api.notify.v0.Notification
	1,  // 3: kentik.api.notify.v0.NotificationChannelsRequest.managed:type_name -> kentik.api.notify.v0.ChannelManagedStatus
	9,  // 4: kentik.api.notify.v0.NotificationChannelsResponse.channels:type_name -> kentik.api.notify.v0.NotificationChannel
	9,  // 5: kentik.api.notify.v0.NotificationChannelResponse.channel:type_name -> kentik.api.notify.v0.NotificationChannel
	39, // 6: kentik.api.notify.v0.NotificationChannel.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	0,  // 7: kentik.api.notify.v0.NotificationChannel.status:type_name -> kentik.api.notify.v0.ChannelStatus
	41, // 8: kentik.api.notify.v0.NotificationChannel.creationTime:type_name -> google.protobuf.Timestamp
	41, // 9: kentik.api.notify.v0.NotificationChannel.editTime:type_name -> google.protobuf.Timestamp
	10, // 10: kentik.api.notify.v0.NotificationChannel.config:type_name -> kentik.api.notify.v0.ChannelConfig
	11, // 11: kentik.api.notify.v0.ChannelConfig.selectorConfig:type_name -> kentik.api.notify.v0.SelectorConfig
	14, // 12: kentik.api.notify.v0.ChannelConfig.batchingConfig:type_name -> kentik.api.notify.v0.BatchingConfig
	15, // 13: kentik.api.notify.v0.ChannelConfig.renderingConfig:type_name -> kentik.api.notify.v0.RenderingConfig
	16, // 14: kentik.api.notify.v0.ChannelConfig.sendingConfig:type_name -> kentik.api.notify.v0.SendingConfig
	17, // 15: kentik.api.notify.v0.ChannelConfig.syslogConfig:type_name -> kentik.api.notify.v0.SyslogConfig
	1,  // 16: kentik.api.notify.v0.ChannelConfig.managed:type_name -> kentik.api.notify.v0.ChannelManagedStatus
	12, // 17: kentik.api.notify.v0.SelectorConfig.conjunctions:type_name -> kentik.api.notify.v0.SelectorConjunction
	13, // 18: kentik.api.notify.v0.SelectorConjunction.selectors:type_name -> kentik.api.notify.v0.Selector
	42, // 19: kentik.api.notify.v0.BatchingConfig.batchDuration:type_name -> google.protobuf.Duration
	41, // 20: kentik.api.notify.v0.BatchingConfig.dailyTimesToSend:type_name -> google.protobuf.Timestamp
	38, // 21: kentik.api.notify.v0.SendingConfig.customHeaders:type_name -> kentik.api.notify.v0.SendingConfig.CustomHeadersEntry
	42, // 22: kentik.api.notify.v0.SendingConfig.cooldownDuration:type_name -> google.protobuf.Duration
	39, // 23: kentik.api.notify.v0.DeliveryResultsRequest.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	20, // 24: kentik.api.notify.v0.DeliveryResultsResponse.results:type_name -> kentik.api.notify.v0.DeliveryResult
	39, // 25: kentik.api.notify.v0.DeliveryResult.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	41, // 26: kentik.api.notify.v0.DeliveryResult.time:type_name -> google.protobuf.Timestamp
	41, // 27: kentik.api.notify.v0.DeliveryResult.requestStart:type_name -> google.protobuf.Timestamp
	41, // 28: kentik.api.notify.v0.DeliveryResult.requestEnd:type_name -> google.protobuf.Timestamp
	39, // 29: kentik.api.notify.v0.NotificationAndStatusRequest.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	40, // 30: kentik.api.notify.v0.NotificationAndStatusResponse.notification:type_name -> kentik.api.notify.v0.Notification
	20, // 31: kentik.api.notify.v0.NotificationAndStatusResponse.deliveryResults:type_name -> kentik.api.notify.v0.DeliveryResult
	2,  // 32: kentik.api.notify.v0.NotificationAndStatusResponse.status:type_name -> kentik.api.notify.v0.DeliveryStatus
	39, // 33: kentik.api.notify.v0.NotificationPayloadRequest.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	24, // 34: kentik.api.notify.v0.NotificationPayloadRequest.options:type_name -> kentik.api.notify.v0.NotificationPayloadOptions
	24, // 35: kentik.api.notify.v0.NotificationPayloadRequest.optionsList:type_name -> kentik.api.notify.v0.NotificationPayloadOptions
	39, // 36: kentik.api.notify.v0.CreateNotificationForTestingRequest.channelVersion:type_name -> kentik.api.notify.v0.ChannelVersion
	24, // 37: kentik.api.notify.v0.CreateNotificationForTestingRequest.payloadOptions:type_name -> kentik.api.notify.v0.NotificationPayloadOptions
	24, // 38: kentik.api.notify.v0.CreateNotificationForTestingRequest.optionsList:type_name -> kentik.api.notify.v0.NotificationPayloadOptions
	30, // 39: kentik.api.notify.v0.SupportedChannelsResponse.supportedChannels:type_name -> kentik.api.notify.v0.SupportedChannel
	31, // 40: kentik.api.notify.v0.SupportedChannel.requiredFields:type_name -> kentik.api.notify.v0.ChannelField
	36, // 41: kentik.api.notify.v0.GetAccessControlConfigResponse.accessControlConfig:type_name -> kentik.api.notify.v0.AccessControlConfig
	36, // 42: kentik.api.notify.v0.SetAccessControlConfigRequest.accessControlConfig:type_name -> kentik.api.notify.v0.AccessControlConfig
	36, // 43: kentik.api.notify.v0.SetAccessControlConfigResponse.accessControlConfig:type_name -> kentik.api.notify.v0.AccessControlConfig
	11, // 44: kentik.api.notify.v0.AccessControlConfig.allow:type_name -> kentik.api.notify.v0.SelectorConfig
	4,  // 45: kentik.api.notify.v0.Notify.SearchNotifications:input_type -> kentik.api.notify.v0.NotificationsRequest
	4,  // 46: kentik.api.notify.v0.Notify.ListNotifications:input_type -> kentik.api.notify.v0.NotificationsRequest
	4,  // 47: kentik.api.notify.v0.Notify.StreamNotifications:input_type -> kentik.api.notify.v0.NotificationsRequest
	43, // 48: kentik.api.notify.v0.Notify.CreateNotificationEvent:input_type -> kentik.api.notify.v0.NotificationEvent
	18, // 49: kentik.api.notify.v0.Notify.SearchDeliveryResults:input_type -> kentik.api.notify.v0.DeliveryResultsRequest
	9,  // 50: kentik.api.notify.v0.Notify.CreateNotificationChannel:input_type -> kentik.api.notify.v0.NotificationChannel
	6,  // 51: kentik.api.notify.v0.Notify.ListNotificationChannels:input_type -> kentik.api.notify.v0.NotificationChannelsRequest
	6,  // 52: kentik.api.notify.v0.Notify.SearchNotificationChannels:input_type -> kentik.api.notify.v0.NotificationChannelsRequest
	9,  // 53: kentik.api.notify.v0.Notify.GetNotificationChannel:input_type -> kentik.api.notify.v0.NotificationChannel
	9,  // 54: kentik.api.notify.v0.Notify.UpdateNotificationChannel:input_type -> kentik.api.notify.v0.NotificationChannel
	9,  // 55: kentik.api.notify.v0.Notify.DeleteNotificationChannel:input_type -> kentik.api.notify.v0.NotificationChannel
	28, // 56: kentik.api.notify.v0.Notify.GetSupportedChannels:input_type -> kentik.api.notify.v0.SupportedChannelsRequest
	44, // 57: kentik.api.notify.v0.Notify.CreateUserChannel:input_type -> kentik.api.notify.v0.CreateUserChannelRequest
	6,  // 58: kentik.api.notify.v0.Notify.GetUserChannel:input_type -> kentik.api.notify.v0.NotificationChannelsRequest
	45, // 59: kentik.api.notify.v0.Notify.SubscribeWithUserChannel:input_type -> kentik.api.notify.v0.SubscribeRequest
	45, // 60: kentik.api.notify.v0.Notify.UnsubscribeWithUserChannel:input_type -> kentik.api.notify.v0.SubscribeRequest
	9,  // 61: kentik.api.notify.v0.Notify.DeleteUserChannel:input_type -> kentik.api.notify.v0.NotificationChannel
	21, // 62: kentik.api.notify.v0.Notify.GetLastNotificationAndStatus:input_type -> kentik.api.notify.v0.NotificationAndStatusRequest
	23, // 63: kentik.api.notify.v0.Notify.GetNotificationPayload:input_type -> kentik.api.notify.v0.NotificationPayloadRequest
	26, // 64: kentik.api.notify.v0.Notify.CreateNotificationForTesting:input_type -> kentik.api.notify.v0.CreateNotificationForTestingRequest
	26, // 65: kentik.api.notify.v0.Notify.CreateNotificationForTestingInsight:input_type -> kentik.api.notify.v0.CreateNotificationForTestingRequest
	23, // 66: kentik.api.notify.v0.Notify.GetNotificationPayloadInsight:input_type -> kentik.api.notify.v0.NotificationPayloadRequest
	3,  // 67: kentik.api.notify.v0.Notify.ApplyAlertingMapping:input_type -> kentik.api.notify.v0.ApplyAlertingManagedChannelsMappingRequest
	32, // 68: kentik.api.notify.v0.Notify.GetAccessControlConfig:input_type -> kentik.api.notify.v0.GetAccessControlConfigRequest
	34, // 69: kentik.api.notify.v0.Notify.SetAccessControlConfig:input_type -> kentik.api.notify.v0.SetAccessControlConfigRequest
	5,  // 70: kentik.api.notify.v0.Notify.SearchNotifications:output_type -> kentik.api.notify.v0.NotificationsResponse
	5,  // 71: kentik.api.notify.v0.Notify.ListNotifications:output_type -> kentik.api.notify.v0.NotificationsResponse
	5,  // 72: kentik.api.notify.v0.Notify.StreamNotifications:output_type -> kentik.api.notify.v0.NotificationsResponse
	46, // 73: kentik.api.notify.v0.Notify.CreateNotificationEvent:output_type -> kentik.api.notify.v0.NotificationEventResponse
	19, // 74: kentik.api.notify.v0.Notify.SearchDeliveryResults:output_type -> kentik.api.notify.v0.DeliveryResultsResponse
	7,  // 75: kentik.api.notify.v0.Notify.CreateNotificationChannel:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	7,  // 76: kentik.api.notify.v0.Notify.ListNotificationChannels:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	7,  // 77: kentik.api.notify.v0.Notify.SearchNotificationChannels:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	8,  // 78: kentik.api.notify.v0.Notify.GetNotificationChannel:output_type -> kentik.api.notify.v0.NotificationChannelResponse
	7,  // 79: kentik.api.notify.v0.Notify.UpdateNotificationChannel:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	7,  // 80: kentik.api.notify.v0.Notify.DeleteNotificationChannel:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	29, // 81: kentik.api.notify.v0.Notify.GetSupportedChannels:output_type -> kentik.api.notify.v0.SupportedChannelsResponse
	8,  // 82: kentik.api.notify.v0.Notify.CreateUserChannel:output_type -> kentik.api.notify.v0.NotificationChannelResponse
	8,  // 83: kentik.api.notify.v0.Notify.GetUserChannel:output_type -> kentik.api.notify.v0.NotificationChannelResponse
	47, // 84: kentik.api.notify.v0.Notify.SubscribeWithUserChannel:output_type -> kentik.api.notify.v0.SubscribeResponse
	47, // 85: kentik.api.notify.v0.Notify.UnsubscribeWithUserChannel:output_type -> kentik.api.notify.v0.SubscribeResponse
	7,  // 86: kentik.api.notify.v0.Notify.DeleteUserChannel:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	22, // 87: kentik.api.notify.v0.Notify.GetLastNotificationAndStatus:output_type -> kentik.api.notify.v0.NotificationAndStatusResponse
	25, // 88: kentik.api.notify.v0.Notify.GetNotificationPayload:output_type -> kentik.api.notify.v0.NotificationPayloadResponse
	27, // 89: kentik.api.notify.v0.Notify.CreateNotificationForTesting:output_type -> kentik.api.notify.v0.CreateNotificationForTestingResponse
	27, // 90: kentik.api.notify.v0.Notify.CreateNotificationForTestingInsight:output_type -> kentik.api.notify.v0.CreateNotificationForTestingResponse
	25, // 91: kentik.api.notify.v0.Notify.GetNotificationPayloadInsight:output_type -> kentik.api.notify.v0.NotificationPayloadResponse
	7,  // 92: kentik.api.notify.v0.Notify.ApplyAlertingMapping:output_type -> kentik.api.notify.v0.NotificationChannelsResponse
	33, // 93: kentik.api.notify.v0.Notify.GetAccessControlConfig:output_type -> kentik.api.notify.v0.GetAccessControlConfigResponse
	35, // 94: kentik.api.notify.v0.Notify.SetAccessControlConfig:output_type -> kentik.api.notify.v0.SetAccessControlConfigResponse
	70, // [70:95] is the sub-list for method output_type
	45, // [45:70] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_kentik_notify_backend_v0_notify_proto_init() }
func file_kentik_notify_backend_v0_notify_proto_init() {
	if File_kentik_notify_backend_v0_notify_proto != nil {
		return
	}
	file_kentik_notify_backend_v0_models_channel_event_proto_init()
	file_kentik_notify_backend_v0_models_event_proto_init()
	file_kentik_notify_backend_v0_models_notification_proto_init()
	file_kentik_notify_backend_v0_subscribe_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kentik_notify_backend_v0_notify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAlertingManagedChannelsMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectorConjunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyslogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationAndStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationAndStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationPayloadOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationForTestingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationForTestingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessControlConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessControlConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAccessControlConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAccessControlConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_notify_backend_v0_notify_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAlertingManagedChannelsMappingRequest_PolicyThresholdMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_notify_backend_v0_notify_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_notify_backend_v0_notify_proto_goTypes,
		DependencyIndexes: file_kentik_notify_backend_v0_notify_proto_depIdxs,
		EnumInfos:         file_kentik_notify_backend_v0_notify_proto_enumTypes,
		MessageInfos:      file_kentik_notify_backend_v0_notify_proto_msgTypes,
	}.Build()
	File_kentik_notify_backend_v0_notify_proto = out.File
	file_kentik_notify_backend_v0_notify_proto_rawDesc = nil
	file_kentik_notify_backend_v0_notify_proto_goTypes = nil
	file_kentik_notify_backend_v0_notify_proto_depIdxs = nil
}
