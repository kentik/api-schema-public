// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/notification_channel/v202204alpha1/notification_channel.proto

package notification_channel

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NotificationChannel) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NotificationChannel:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Type = v.GetType()
		x.Status = v.GetStatus()
		x.Cdate = v.GetCdate()
		x.Edate = v.GetEdate()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetType() ChannelType }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetStatus() string }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetCdate() *timestamppb.Timestamp }); ok {
			x.Cdate = v.GetCdate()
		}
		if v, ok := v.(interface{ GetEdate() *timestamppb.Timestamp }); ok {
			x.Edate = v.GetEdate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NotificationChannel) Proto_ShallowClone() (c *NotificationChannel) {
	if x != nil {
		c = new(NotificationChannel)
		c.Id = x.Id
		c.Name = x.Name
		c.Type = x.Type
		c.Status = x.Status
		c.Cdate = x.Cdate
		c.Edate = x.Edate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListNotificationChannelsRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListNotificationChannelsRequest) Proto_ShallowClone() (c *ListNotificationChannelsRequest) {
	if x != nil {
		c = new(ListNotificationChannelsRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListNotificationChannelsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListNotificationChannelsResponse:
		x.NotificationChannels = v.GetNotificationChannels()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetNotificationChannels() []*NotificationChannel }); ok {
			x.NotificationChannels = v.GetNotificationChannels()
		}
		if v, ok := v.(interface{ GetInvalidCount() rune }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListNotificationChannelsResponse) Proto_ShallowClone() (c *ListNotificationChannelsResponse) {
	if x != nil {
		c = new(ListNotificationChannelsResponse)
		c.NotificationChannels = x.NotificationChannels
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetNotificationChannelRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetNotificationChannelRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetNotificationChannelRequest) Proto_ShallowClone() (c *GetNotificationChannelRequest) {
	if x != nil {
		c = new(GetNotificationChannelRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetNotificationChannelResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetNotificationChannelResponse:
		x.NotificationChannel = v.GetNotificationChannel()
	default:
		if v, ok := v.(interface{ GetNotificationChannel() *NotificationChannel }); ok {
			x.NotificationChannel = v.GetNotificationChannel()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetNotificationChannelResponse) Proto_ShallowClone() (c *GetNotificationChannelResponse) {
	if x != nil {
		c = new(GetNotificationChannelResponse)
		c.NotificationChannel = x.NotificationChannel
	}
	return
}
