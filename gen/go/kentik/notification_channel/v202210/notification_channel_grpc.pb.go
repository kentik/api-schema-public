// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notification_channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationChannelServiceClient is the client API for NotificationChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationChannelServiceClient interface {
	ListNotificationChannels(ctx context.Context, in *ListNotificationChannelsRequest, opts ...grpc.CallOption) (*ListNotificationChannelsResponse, error)
	GetNotificationChannel(ctx context.Context, in *GetNotificationChannelRequest, opts ...grpc.CallOption) (*GetNotificationChannelResponse, error)
	SearchNotificationChannels(ctx context.Context, in *SearchNotificationChannelsRequest, opts ...grpc.CallOption) (*SearchNotificationChannelsResponse, error)
}

type notificationChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationChannelServiceClient(cc grpc.ClientConnInterface) NotificationChannelServiceClient {
	return &notificationChannelServiceClient{cc}
}

func (c *notificationChannelServiceClient) ListNotificationChannels(ctx context.Context, in *ListNotificationChannelsRequest, opts ...grpc.CallOption) (*ListNotificationChannelsResponse, error) {
	out := new(ListNotificationChannelsResponse)
	err := c.cc.Invoke(ctx, "/kentik.notification_channel.v202210.NotificationChannelService/ListNotificationChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationChannelServiceClient) GetNotificationChannel(ctx context.Context, in *GetNotificationChannelRequest, opts ...grpc.CallOption) (*GetNotificationChannelResponse, error) {
	out := new(GetNotificationChannelResponse)
	err := c.cc.Invoke(ctx, "/kentik.notification_channel.v202210.NotificationChannelService/GetNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationChannelServiceClient) SearchNotificationChannels(ctx context.Context, in *SearchNotificationChannelsRequest, opts ...grpc.CallOption) (*SearchNotificationChannelsResponse, error) {
	out := new(SearchNotificationChannelsResponse)
	err := c.cc.Invoke(ctx, "/kentik.notification_channel.v202210.NotificationChannelService/SearchNotificationChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationChannelServiceServer is the server API for NotificationChannelService service.
// All implementations should embed UnimplementedNotificationChannelServiceServer
// for forward compatibility
type NotificationChannelServiceServer interface {
	ListNotificationChannels(context.Context, *ListNotificationChannelsRequest) (*ListNotificationChannelsResponse, error)
	GetNotificationChannel(context.Context, *GetNotificationChannelRequest) (*GetNotificationChannelResponse, error)
	SearchNotificationChannels(context.Context, *SearchNotificationChannelsRequest) (*SearchNotificationChannelsResponse, error)
}

// UnimplementedNotificationChannelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationChannelServiceServer struct {
}

func (UnimplementedNotificationChannelServiceServer) ListNotificationChannels(context.Context, *ListNotificationChannelsRequest) (*ListNotificationChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationChannels not implemented")
}
func (UnimplementedNotificationChannelServiceServer) GetNotificationChannel(context.Context, *GetNotificationChannelRequest) (*GetNotificationChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationChannel not implemented")
}
func (UnimplementedNotificationChannelServiceServer) SearchNotificationChannels(context.Context, *SearchNotificationChannelsRequest) (*SearchNotificationChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNotificationChannels not implemented")
}

// UnsafeNotificationChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationChannelServiceServer will
// result in compilation errors.
type UnsafeNotificationChannelServiceServer interface {
	mustEmbedUnimplementedNotificationChannelServiceServer()
}

func RegisterNotificationChannelServiceServer(s grpc.ServiceRegistrar, srv NotificationChannelServiceServer) {
	s.RegisterService(&NotificationChannelService_ServiceDesc, srv)
}

func _NotificationChannelService_ListNotificationChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationChannelServiceServer).ListNotificationChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.notification_channel.v202210.NotificationChannelService/ListNotificationChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationChannelServiceServer).ListNotificationChannels(ctx, req.(*ListNotificationChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationChannelService_GetNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationChannelServiceServer).GetNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.notification_channel.v202210.NotificationChannelService/GetNotificationChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationChannelServiceServer).GetNotificationChannel(ctx, req.(*GetNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationChannelService_SearchNotificationChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNotificationChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationChannelServiceServer).SearchNotificationChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.notification_channel.v202210.NotificationChannelService/SearchNotificationChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationChannelServiceServer).SearchNotificationChannels(ctx, req.(*SearchNotificationChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationChannelService_ServiceDesc is the grpc.ServiceDesc for NotificationChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.notification_channel.v202210.NotificationChannelService",
	HandlerType: (*NotificationChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotificationChannels",
			Handler:    _NotificationChannelService_ListNotificationChannels_Handler,
		},
		{
			MethodName: "GetNotificationChannel",
			Handler:    _NotificationChannelService_GetNotificationChannel_Handler,
		},
		{
			MethodName: "SearchNotificationChannels",
			Handler:    _NotificationChannelService_SearchNotificationChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/notification_channel/v202210/notification_channel.proto",
}
