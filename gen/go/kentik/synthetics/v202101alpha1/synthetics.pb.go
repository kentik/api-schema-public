// Synthetics data and admin APIs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: kentik/synthetics/v202101alpha1/synthetics.proto

package synthetics

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IPFamily int32

const (
	IPFamily_IP_FAMILY_UNSPECIFIED IPFamily = 0
	IPFamily_IP_FAMILY_v4          IPFamily = 1 // match node backend
	IPFamily_IP_FAMILY_v6          IPFamily = 2 // match node backend
	IPFamily_IP_FAMILY_DUAL        IPFamily = 3
)

// Enum value maps for IPFamily.
var (
	IPFamily_name = map[int32]string{
		0: "IP_FAMILY_UNSPECIFIED",
		1: "IP_FAMILY_v4",
		2: "IP_FAMILY_v6",
		3: "IP_FAMILY_DUAL",
	}
	IPFamily_value = map[string]int32{
		"IP_FAMILY_UNSPECIFIED": 0,
		"IP_FAMILY_v4":          1,
		"IP_FAMILY_v6":          2,
		"IP_FAMILY_DUAL":        3,
	}
)

func (x IPFamily) Enum() *IPFamily {
	p := new(IPFamily)
	*p = x
	return p
}

func (x IPFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_enumTypes[0].Descriptor()
}

func (IPFamily) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101alpha1_synthetics_proto_enumTypes[0]
}

func (x IPFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPFamily.Descriptor instead.
func (IPFamily) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{0}
}

type MonitoringRequest_TestStatus int32

const (
	MonitoringRequest_UNSPECIFIED MonitoringRequest_TestStatus = 0
	MonitoringRequest_A           MonitoringRequest_TestStatus = 1
	MonitoringRequest_P           MonitoringRequest_TestStatus = 2
)

// Enum value maps for MonitoringRequest_TestStatus.
var (
	MonitoringRequest_TestStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "A",
		2: "P",
	}
	MonitoringRequest_TestStatus_value = map[string]int32{
		"UNSPECIFIED": 0,
		"A":           1,
		"P":           2,
	}
)

func (x MonitoringRequest_TestStatus) Enum() *MonitoringRequest_TestStatus {
	p := new(MonitoringRequest_TestStatus)
	*p = x
	return p
}

func (x MonitoringRequest_TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitoringRequest_TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_enumTypes[1].Descriptor()
}

func (MonitoringRequest_TestStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101alpha1_synthetics_proto_enumTypes[1]
}

func (x MonitoringRequest_TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitoringRequest_TestStatus.Descriptor instead.
func (MonitoringRequest_TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{37, 0}
}

// models
// -------------------------------------------------------
type GetHealthForTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` // All we need is a list of ids of the tests to get heath for.
	StartTime int64    `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds  []uint64 `protobuf:"varint,5,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"` // Allow looking at only a subset of agents.
	TaskIds   []uint64 `protobuf:"varint,6,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`    // Allow looking at only a subset of tasks -- this lets you limit targets.
	Augment   bool     `protobuf:"varint,7,opt,name=augment,proto3" json:"augment,omitempty"`
}

func (x *GetHealthForTestsRequest) Reset() {
	*x = GetHealthForTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthForTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsRequest) ProtoMessage() {}

func (x *GetHealthForTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsRequest.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{0}
}

func (x *GetHealthForTestsRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetHealthForTestsRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetHealthForTestsRequest) GetAgentIds() []uint64 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetTaskIds() []uint64 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetAugment() bool {
	if x != nil {
		return x.Augment
	}
	return false
}

type GetHealthForTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Health []*TestHealth `protobuf:"bytes,2,rep,name=health,proto3" json:"health,omitempty"`
}

func (x *GetHealthForTestsResponse) Reset() {
	*x = GetHealthForTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthForTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsResponse) ProtoMessage() {}

func (x *GetHealthForTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsResponse.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{1}
}

func (x *GetHealthForTestsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetHealthForTestsResponse) GetHealth() []*TestHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

type ListAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentRequest) Reset() {
	*x = ListAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentRequest) ProtoMessage() {}

func (x *ListAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentRequest.ProtoReflect.Descriptor instead.
func (*ListAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{2}
}

type ListAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Agents              []*Agent `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	InvalidExportsCount uint32   `protobuf:"varint,3,opt,name=invalid_exports_count,json=invalidExportsCount,proto3" json:"invalid_exports_count,omitempty"`
}

func (x *ListAgentResponse) Reset() {
	*x = ListAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentResponse) ProtoMessage() {}

func (x *ListAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentResponse.ProtoReflect.Descriptor instead.
func (*ListAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{3}
}

func (x *ListAgentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListAgentResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentResponse) GetInvalidExportsCount() uint32 {
	if x != nil {
		return x.InvalidExportsCount
	}
	return 0
}

type GetAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{4}
}

func (x *GetAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Agent  *Agent  `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *GetAgentResponse) Reset() {
	*x = GetAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentResponse) ProtoMessage() {}

func (x *GetAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{5}
}

func (x *GetAgentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type PatchAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent      *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *PatchAgentRequest) Reset() {
	*x = PatchAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAgentRequest) ProtoMessage() {}

func (x *PatchAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAgentRequest.ProtoReflect.Descriptor instead.
func (*PatchAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{6}
}

func (x *PatchAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *PatchAgentRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type PatchAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Agent  *Agent  `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *PatchAgentResponse) Reset() {
	*x = PatchAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAgentResponse) ProtoMessage() {}

func (x *PatchAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAgentResponse.ProtoReflect.Descriptor instead.
func (*PatchAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{7}
}

func (x *PatchAgentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PatchAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type DeleteAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAgentRequest) Reset() {
	*x = DeleteAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentRequest) ProtoMessage() {}

func (x *DeleteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAgentRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteAgentResponse) Reset() {
	*x = DeleteAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentResponse) ProtoMessage() {}

func (x *DeleteAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAgentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//	*Status_Ok
	//	*Status_Err
	Status isStatus_Status `protobuf_oneof:"status"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{10}
}

func (m *Status) GetStatus() isStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *Status) GetOk() bool {
	if x, ok := x.GetStatus().(*Status_Ok); ok {
		return x.Ok
	}
	return false
}

func (x *Status) GetErr() *Status_Error {
	if x, ok := x.GetStatus().(*Status_Err); ok {
		return x.Err
	}
	return nil
}

type isStatus_Status interface {
	isStatus_Status()
}

type Status_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type Status_Err struct {
	Err *Status_Error `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*Status_Ok) isStatus_Status() {}

func (*Status_Err) isStatus_Status() {}

type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health string `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"`
	Time   int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{11}
}

func (x *Health) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Health) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type TestHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId        uint64        `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Tasks         []*TaskHealth `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	OverallHealth *Health       `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	HealthTs      []*Health     `protobuf:"bytes,4,rep,name=health_ts,json=healthTs,proto3" json:"health_ts,omitempty"`
}

func (x *TestHealth) Reset() {
	*x = TestHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestHealth) ProtoMessage() {}

func (x *TestHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestHealth.ProtoReflect.Descriptor instead.
func (*TestHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{12}
}

func (x *TestHealth) GetTestId() uint64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestHealth) GetTasks() []*TaskHealth {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TestHealth) GetHealthTs() []*Health {
	if x != nil {
		return x.HealthTs
	}
	return nil
}

type TaskHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents        []*AgentHealth `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	OverallHealth *Health        `protobuf:"bytes,2,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
}

func (x *TaskHealth) Reset() {
	*x = TaskHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHealth) ProtoMessage() {}

func (x *TaskHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHealth.ProtoReflect.Descriptor instead.
func (*TaskHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{13}
}

func (x *TaskHealth) GetAgents() []*AgentHealth {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *TaskHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type AgentHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent         *Agent          `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Health        []*HealthMoment `protobuf:"bytes,2,rep,name=health,proto3" json:"health,omitempty"`
	OverallHealth *Health         `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
}

func (x *AgentHealth) Reset() {
	*x = AgentHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealth) ProtoMessage() {}

func (x *AgentHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealth.ProtoReflect.Descriptor instead.
func (*AgentHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{14}
}

func (x *AgentHealth) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *AgentHealth) GetHealth() []*HealthMoment {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *AgentHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type HealthMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                      int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SrcIp                     string  `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp                     string  `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	PacketLoss                uint32  `protobuf:"varint,4,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	AvgLatency                uint32  `protobuf:"varint,5,opt,name=avg_latency,json=avgLatency,proto3" json:"avg_latency,omitempty"`
	AvgWeightedLatency        uint32  `protobuf:"varint,6,opt,name=avg_weighted_latency,json=avgWeightedLatency,proto3" json:"avg_weighted_latency,omitempty"`
	RollingAvgLatency         uint32  `protobuf:"varint,7,opt,name=rolling_avg_latency,json=rollingAvgLatency,proto3" json:"rolling_avg_latency,omitempty"`
	RollingStddevLatency      uint32  `protobuf:"varint,8,opt,name=rolling_stddev_latency,json=rollingStddevLatency,proto3" json:"rolling_stddev_latency,omitempty"`
	RollingAvgWeightedLatency uint32  `protobuf:"varint,9,opt,name=rolling_avg_weighted_latency,json=rollingAvgWeightedLatency,proto3" json:"rolling_avg_weighted_latency,omitempty"`
	LatencyHealth             string  `protobuf:"bytes,10,opt,name=latency_health,json=latencyHealth,proto3" json:"latency_health,omitempty"`
	PacketLossHealth          string  `protobuf:"bytes,11,opt,name=packet_loss_health,json=packetLossHealth,proto3" json:"packet_loss_health,omitempty"`
	OverallHealth             *Health `protobuf:"bytes,12,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	// fields return from backend grpc service
	AvgJitter        uint32 `protobuf:"varint,13,opt,name=avg_jitter,json=avgJitter,proto3" json:"avg_jitter,omitempty"`
	RollingAvgJitter uint32 `protobuf:"varint,14,opt,name=rolling_avg_jitter,json=rollingAvgJitter,proto3" json:"rolling_avg_jitter,omitempty"`
	RollingStdJitter uint32 `protobuf:"varint,15,opt,name=rolling_std_jitter,json=rollingStdJitter,proto3" json:"rolling_std_jitter,omitempty"`
	JitterHealth     string `protobuf:"bytes,16,opt,name=jitter_health,json=jitterHealth,proto3" json:"jitter_health,omitempty"`
	Data             string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`
	Size             uint32 `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`
	Status           uint32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	TaskType         string `protobuf:"bytes,20,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *HealthMoment) Reset() {
	*x = HealthMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMoment) ProtoMessage() {}

func (x *HealthMoment) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMoment.ProtoReflect.Descriptor instead.
func (*HealthMoment) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{15}
}

func (x *HealthMoment) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HealthMoment) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *HealthMoment) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *HealthMoment) GetPacketLoss() uint32 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *HealthMoment) GetAvgLatency() uint32 {
	if x != nil {
		return x.AvgLatency
	}
	return 0
}

func (x *HealthMoment) GetAvgWeightedLatency() uint32 {
	if x != nil {
		return x.AvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgLatency() uint32 {
	if x != nil {
		return x.RollingAvgLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingStddevLatency() uint32 {
	if x != nil {
		return x.RollingStddevLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgWeightedLatency() uint32 {
	if x != nil {
		return x.RollingAvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetLatencyHealth() string {
	if x != nil {
		return x.LatencyHealth
	}
	return ""
}

func (x *HealthMoment) GetPacketLossHealth() string {
	if x != nil {
		return x.PacketLossHealth
	}
	return ""
}

func (x *HealthMoment) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *HealthMoment) GetAvgJitter() uint32 {
	if x != nil {
		return x.AvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgJitter() uint32 {
	if x != nil {
		return x.RollingAvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingStdJitter() uint32 {
	if x != nil {
		return x.RollingStdJitter
	}
	return 0
}

func (x *HealthMoment) GetJitterHealth() string {
	if x != nil {
		return x.JitterHealth
	}
	return ""
}

func (x *HealthMoment) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HealthMoment) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HealthMoment) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HealthMoment) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AgentName       string   `protobuf:"bytes,2,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	AgentStatus     string   `protobuf:"bytes,3,opt,name=agent_status,json=agentStatus,proto3" json:"agent_status,omitempty"`
	AgentAlias      string   `protobuf:"bytes,5,opt,name=agent_alias,json=agentAlias,proto3" json:"agent_alias,omitempty"`
	AgentType       string   `protobuf:"bytes,6,opt,name=agent_type,json=agentType,proto3" json:"agent_type,omitempty"`
	Os              string   `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	Ip              string   `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat             float64  `protobuf:"fixed64,9,opt,name=lat,proto3" json:"lat,omitempty"`
	Long            float64  `protobuf:"fixed64,10,opt,name=long,proto3" json:"long,omitempty"`
	AgentLastAuthed string   `protobuf:"bytes,11,opt,name=agent_last_authed,json=agentLastAuthed,proto3" json:"agent_last_authed,omitempty"` // TODO: revisit request comes in as string
	Family          IPFamily `protobuf:"varint,12,opt,name=family,proto3,enum=kentik.synthetics.v202101alpha1.IPFamily" json:"family,omitempty"`
	Asn             uint32   `protobuf:"varint,13,opt,name=asn,proto3" json:"asn,omitempty"`
	AgentSiteId     uint32   `protobuf:"varint,14,opt,name=agent_site_id,json=agentSiteId,proto3" json:"agent_site_id,omitempty"`
	Version         string   `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	Challenge       string   `protobuf:"bytes,16,opt,name=challenge,proto3" json:"challenge,omitempty"`
	City            string   `protobuf:"bytes,17,opt,name=city,proto3" json:"city,omitempty"`
	Region          string   `protobuf:"bytes,18,opt,name=region,proto3" json:"region,omitempty"`
	Country         string   `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{16}
}

func (x *Agent) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Agent) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *Agent) GetAgentStatus() string {
	if x != nil {
		return x.AgentStatus
	}
	return ""
}

func (x *Agent) GetAgentAlias() string {
	if x != nil {
		return x.AgentAlias
	}
	return ""
}

func (x *Agent) GetAgentType() string {
	if x != nil {
		return x.AgentType
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Agent) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Agent) GetAgentLastAuthed() string {
	if x != nil {
		return x.AgentLastAuthed
	}
	return ""
}

func (x *Agent) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Agent) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Agent) GetAgentSiteId() uint32 {
	if x != nil {
		return x.AgentSiteId
	}
	return 0
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Agent) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *Agent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Agent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Agent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type PingTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count  uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PingTaskDefinition) Reset() {
	*x = PingTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTaskDefinition) ProtoMessage() {}

func (x *PingTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTaskDefinition.ProtoReflect.Descriptor instead.
func (*PingTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{17}
}

func (x *PingTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PingTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *PingTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *PingTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TraceTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit  uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TraceTaskDefinition) Reset() {
	*x = TraceTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTaskDefinition) ProtoMessage() {}

func (x *TraceTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTaskDefinition.ProtoReflect.Descriptor instead.
func (*TraceTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{18}
}

func (x *TraceTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TraceTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TraceTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TraceTaskDefinition) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type HTTPTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *HTTPTaskDefinition) Reset() {
	*x = HTTPTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTaskDefinition) ProtoMessage() {}

func (x *HTTPTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTaskDefinition.ProtoReflect.Descriptor instead.
func (*HTTPTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{19}
}

func (x *HTTPTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HTTPTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *HTTPTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type GetTraceForTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // This is for a single test
	StartTime int64    `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds  []uint64 `protobuf:"varint,5,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"` // Allow looking at only a subset of agents.
}

func (x *GetTraceForTestRequest) Reset() {
	*x = GetTraceForTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestRequest) ProtoMessage() {}

func (x *GetTraceForTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceForTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{20}
}

func (x *GetTraceForTestRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTraceForTestRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTraceForTestRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTraceForTestRequest) GetAgentIds() []uint64 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type GetTraceForTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Trace  *Trace  `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (x *GetTraceForTestResponse) Reset() {
	*x = GetTraceForTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestResponse) ProtoMessage() {}

func (x *GetTraceForTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceForTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{21}
}

func (x *GetTraceForTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTraceForTestResponse) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type GetTestsPerDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LookbackSeconds uint32 `protobuf:"varint,1,opt,name=lookback_seconds,json=lookbackSeconds,proto3" json:"lookback_seconds,omitempty"`
	Hydra           string `protobuf:"bytes,2,opt,name=hydra,proto3" json:"hydra,omitempty"`
}

func (x *GetTestsPerDayRequest) Reset() {
	*x = GetTestsPerDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestsPerDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestsPerDayRequest) ProtoMessage() {}

func (x *GetTestsPerDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestsPerDayRequest.ProtoReflect.Descriptor instead.
func (*GetTestsPerDayRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{22}
}

func (x *GetTestsPerDayRequest) GetLookbackSeconds() uint32 {
	if x != nil {
		return x.LookbackSeconds
	}
	return 0
}

func (x *GetTestsPerDayRequest) GetHydra() string {
	if x != nil {
		return x.Hydra
	}
	return ""
}

type GetTestsPerDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetTestsPerDayResponse) Reset() {
	*x = GetTestsPerDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestsPerDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestsPerDayResponse) ProtoMessage() {}

func (x *GetTestsPerDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestsPerDayResponse.ProtoReflect.Descriptor instead.
func (*GetTestsPerDayResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{23}
}

func (x *GetTestsPerDayResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops  []*TraceHop  `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	Links []*TraceLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{24}
}

func (x *Trace) GetHops() []*TraceHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *Trace) GetLinks() []*TraceLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type TraceHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               // an ID to use to ref this hop in links
	HopName   string  `protobuf:"bytes,2,opt,name=hop_name,json=hopName,proto3" json:"hop_name,omitempty"`       // this is either the device_name if we know it, or the IP of the hop
	HopDepth  uint32  `protobuf:"varint,3,opt,name=hop_depth,json=hopDepth,proto3" json:"hop_depth,omitempty"`   // 0 for agents, 100 for last hop regardless of intermediate hops
	Asn       uint32  `protobuf:"varint,4,opt,name=asn,proto3" json:"asn,omitempty"`                             // this is an augmentation: ip2asn
	InHealth  *Health `protobuf:"bytes,5,opt,name=in_health,json=inHealth,proto3" json:"in_health,omitempty"`    // a rollup of inbound link health
	OutHealth *Health `protobuf:"bytes,6,opt,name=out_health,json=outHealth,proto3" json:"out_health,omitempty"` // a rollup of outbound link health
}

func (x *TraceHop) Reset() {
	*x = TraceHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceHop) ProtoMessage() {}

func (x *TraceHop) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceHop.ProtoReflect.Descriptor instead.
func (*TraceHop) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{25}
}

func (x *TraceHop) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TraceHop) GetHopName() string {
	if x != nil {
		return x.HopName
	}
	return ""
}

func (x *TraceHop) GetHopDepth() uint32 {
	if x != nil {
		return x.HopDepth
	}
	return 0
}

func (x *TraceHop) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *TraceHop) GetInHealth() *Health {
	if x != nil {
		return x.InHealth
	}
	return nil
}

func (x *TraceHop) GetOutHealth() *Health {
	if x != nil {
		return x.OutHealth
	}
	return nil
}

type TraceLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcHopId      uint32          `protobuf:"varint,1,opt,name=src_hop_id,json=srcHopId,proto3" json:"src_hop_id,omitempty"`             // id of the src hop
	DstHopId      uint32          `protobuf:"varint,2,opt,name=dst_hop_id,json=dstHopId,proto3" json:"dst_hop_id,omitempty"`             // id of the dst hop
	OverallHealth *Health         `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"` // rollup of health moment health
	Health        []*HealthMoment `protobuf:"bytes,4,rep,name=health,proto3" json:"health,omitempty"`                                    // src_ip is optional if we have it from topology; dst_ip is the dst_hop ip
}

func (x *TraceLink) Reset() {
	*x = TraceLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceLink) ProtoMessage() {}

func (x *TraceLink) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceLink.ProtoReflect.Descriptor instead.
func (*TraceLink) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{26}
}

func (x *TraceLink) GetSrcHopId() uint32 {
	if x != nil {
		return x.SrcHopId
	}
	return 0
}

func (x *TraceLink) GetDstHopId() uint32 {
	if x != nil {
		return x.DstHopId
	}
	return 0
}

func (x *TraceLink) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TraceLink) GetHealth() []*HealthMoment {
	if x != nil {
		return x.Health
	}
	return nil
}

type ListTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset bool `protobuf:"varint,1,opt,name=preset,proto3" json:"preset,omitempty"`
}

func (x *ListTestRequest) Reset() {
	*x = ListTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestRequest) ProtoMessage() {}

func (x *ListTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestRequest.ProtoReflect.Descriptor instead.
func (*ListTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{27}
}

func (x *ListTestRequest) GetPreset() bool {
	if x != nil {
		return x.Preset
	}
	return false
}

type ListTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Tests             []*Test `protobuf:"bytes,2,rep,name=tests,proto3" json:"tests,omitempty"`
	InvalidTestsCount uint32  `protobuf:"varint,3,opt,name=invalid_tests_count,json=invalidTestsCount,proto3" json:"invalid_tests_count,omitempty"`
}

func (x *ListTestResponse) Reset() {
	*x = ListTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestResponse) ProtoMessage() {}

func (x *ListTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestResponse.ProtoReflect.Descriptor instead.
func (*ListTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{28}
}

func (x *ListTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListTestResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListTestResponse) GetInvalidTestsCount() uint32 {
	if x != nil {
		return x.InvalidTestsCount
	}
	return 0
}

type GetTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{29}
}

func (x *GetTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Test   *Test   `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{30}
}

func (x *GetTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Test   *Test   `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestRequest) Reset() {
	*x = CreateTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestRequest) ProtoMessage() {}

func (x *CreateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestRequest.ProtoReflect.Descriptor instead.
func (*CreateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{31}
}

func (x *CreateTestRequest) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Test   *Test   `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestResponse) Reset() {
	*x = CreateTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResponse) ProtoMessage() {}

func (x *CreateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResponse.ProtoReflect.Descriptor instead.
func (*CreateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{32}
}

func (x *CreateTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type PatchTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test       *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *PatchTestRequest) Reset() {
	*x = PatchTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTestRequest) ProtoMessage() {}

func (x *PatchTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTestRequest.ProtoReflect.Descriptor instead.
func (*PatchTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{33}
}

func (x *PatchTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *PatchTestRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type PatchTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Test   *Test   `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *PatchTestResponse) Reset() {
	*x = PatchTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTestResponse) ProtoMessage() {}

func (x *PatchTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTestResponse.ProtoReflect.Descriptor instead.
func (*PatchTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{34}
}

func (x *PatchTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PatchTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type DeleteTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTestRequest) Reset() {
	*x = DeleteTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestRequest) ProtoMessage() {}

func (x *DeleteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteTestRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteTestResponse) Reset() {
	*x = DeleteTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestResponse) ProtoMessage() {}

func (x *DeleteTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type MonitoringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestStatus MonitoringRequest_TestStatus `protobuf:"varint,2,opt,name=test_status,json=testStatus,proto3,enum=kentik.synthetics.v202101alpha1.MonitoringRequest_TestStatus" json:"test_status,omitempty"`
}

func (x *MonitoringRequest) Reset() {
	*x = MonitoringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringRequest) ProtoMessage() {}

func (x *MonitoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringRequest.ProtoReflect.Descriptor instead.
func (*MonitoringRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{37}
}

func (x *MonitoringRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MonitoringRequest) GetTestStatus() MonitoringRequest_TestStatus {
	if x != nil {
		return x.TestStatus
	}
	return MonitoringRequest_UNSPECIFIED
}

type MonitoringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Test   *Test   `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *MonitoringResponse) Reset() {
	*x = MonitoringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringResponse) ProtoMessage() {}

func (x *MonitoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringResponse.ProtoReflect.Descriptor instead.
func (*MonitoringResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{38}
}

func (x *MonitoringResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MonitoringResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestType string `protobuf:"bytes,2,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	// Types that are assignable to Definition:
	//	*Test_Hostname
	//	*Test_Ip
	//	*Test_Agent
	//	*Test_Flow
	//	*Test_Site
	//	*Test_Tag
	//	*Test_Dns
	//	*Test_Url
	Definition isTest_Definition `protobuf_oneof:"definition"`
	CompanyId  uint64            `protobuf:"varint,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"` // company_id
	UserId     uint64            `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId   uint64            `protobuf:"varint,11,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	TestStatus string            `protobuf:"bytes,12,opt,name=test_status,json=testStatus,proto3" json:"test_status,omitempty"`
	Agents     []uint32          `protobuf:"varint,13,rep,packed,name=agents,proto3" json:"agents,omitempty"`
	Period     uint32            `protobuf:"varint,14,opt,name=period,proto3" json:"period,omitempty"`
	Count      uint32            `protobuf:"varint,15,opt,name=count,proto3" json:"count,omitempty"`
	Expiry     uint32            `protobuf:"varint,16,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit      uint32            `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Tasks      []string          `protobuf:"bytes,18,rep,name=tasks,proto3" json:"tasks,omitempty"` // Task types.
	Name       string            `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	// node api requires these fields
	HealthSettings *HealthSettings `protobuf:"bytes,20,opt,name=healthSettings,proto3" json:"healthSettings,omitempty"`
	Port           uint32          `protobuf:"varint,21,opt,name=port,proto3" json:"port,omitempty"`
	Notifications  *Notification   `protobuf:"bytes,22,opt,name=notifications,proto3" json:"notifications,omitempty"`
	Activate       *Activate       `protobuf:"bytes,23,opt,name=activate,proto3" json:"activate,omitempty"`
	Protocol       string          `protobuf:"bytes,24,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Family         IPFamily        `protobuf:"varint,25,opt,name=family,proto3,enum=kentik.synthetics.v202101alpha1.IPFamily" json:"family,omitempty"`
	Ping           *Ping           `protobuf:"bytes,26,opt,name=ping,proto3" json:"ping,omitempty"`
	Trace          *TestTrace      `protobuf:"bytes,27,opt,name=trace,proto3" json:"trace,omitempty"`
	Servers        []string        `protobuf:"bytes,28,rep,name=servers,proto3" json:"servers,omitempty"`
	Type           string          `protobuf:"bytes,29,opt,name=type,proto3" json:"type,omitempty"`
	UseLocalIp     bool            `protobuf:"varint,30,opt,name=useLocalIp,proto3" json:"useLocalIp,omitempty"`
	Receiprocal    bool            `protobuf:"varint,31,opt,name=receiprocal,proto3" json:"receiprocal,omitempty"`
	RollupLevel    uint32          `protobuf:"varint,34,opt,name=rollup_level,json=rollupLevel,proto3" json:"rollup_level,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{39}
}

func (x *Test) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Test) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (m *Test) GetDefinition() isTest_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *Test) GetHostname() *HostnameTest {
	if x, ok := x.GetDefinition().(*Test_Hostname); ok {
		return x.Hostname
	}
	return nil
}

func (x *Test) GetIp() *IpTest {
	if x, ok := x.GetDefinition().(*Test_Ip); ok {
		return x.Ip
	}
	return nil
}

func (x *Test) GetAgent() *AgentTest {
	if x, ok := x.GetDefinition().(*Test_Agent); ok {
		return x.Agent
	}
	return nil
}

func (x *Test) GetFlow() *FlowTest {
	if x, ok := x.GetDefinition().(*Test_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *Test) GetSite() *SiteTest {
	if x, ok := x.GetDefinition().(*Test_Site); ok {
		return x.Site
	}
	return nil
}

func (x *Test) GetTag() *TagTest {
	if x, ok := x.GetDefinition().(*Test_Tag); ok {
		return x.Tag
	}
	return nil
}

func (x *Test) GetDns() *DnsTest {
	if x, ok := x.GetDefinition().(*Test_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *Test) GetUrl() *UrlTest {
	if x, ok := x.GetDefinition().(*Test_Url); ok {
		return x.Url
	}
	return nil
}

func (x *Test) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *Test) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Test) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *Test) GetTestStatus() string {
	if x != nil {
		return x.TestStatus
	}
	return ""
}

func (x *Test) GetAgents() []uint32 {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Test) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Test) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Test) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Test) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Test) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetHealthSettings() *HealthSettings {
	if x != nil {
		return x.HealthSettings
	}
	return nil
}

func (x *Test) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Test) GetNotifications() *Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Test) GetActivate() *Activate {
	if x != nil {
		return x.Activate
	}
	return nil
}

func (x *Test) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Test) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Test) GetPing() *Ping {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *Test) GetTrace() *TestTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Test) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Test) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Test) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

func (x *Test) GetReceiprocal() bool {
	if x != nil {
		return x.Receiprocal
	}
	return false
}

func (x *Test) GetRollupLevel() uint32 {
	if x != nil {
		return x.RollupLevel
	}
	return 0
}

type isTest_Definition interface {
	isTest_Definition()
}

type Test_Hostname struct {
	Hostname *HostnameTest `protobuf:"bytes,3,opt,name=hostname,proto3,oneof"`
}

type Test_Ip struct {
	Ip *IpTest `protobuf:"bytes,4,opt,name=ip,proto3,oneof"`
}

type Test_Agent struct {
	Agent *AgentTest `protobuf:"bytes,5,opt,name=agent,proto3,oneof"`
}

type Test_Flow struct {
	Flow *FlowTest `protobuf:"bytes,6,opt,name=flow,proto3,oneof"`
}

type Test_Site struct {
	Site *SiteTest `protobuf:"bytes,7,opt,name=site,proto3,oneof"`
}

type Test_Tag struct {
	Tag *TagTest `protobuf:"bytes,8,opt,name=tag,proto3,oneof"`
}

type Test_Dns struct {
	Dns *DnsTest `protobuf:"bytes,32,opt,name=dns,proto3,oneof"`
}

type Test_Url struct {
	Url *UrlTest `protobuf:"bytes,33,opt,name=url,proto3,oneof"`
}

func (*Test_Hostname) isTest_Definition() {}

func (*Test_Ip) isTest_Definition() {}

func (*Test_Agent) isTest_Definition() {}

func (*Test_Flow) isTest_Definition() {}

func (*Test_Site) isTest_Definition() {}

func (*Test_Tag) isTest_Definition() {}

func (*Test_Dns) isTest_Definition() {}

func (*Test_Url) isTest_Definition() {}

type TestTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period   float32 `protobuf:"fixed32,1,opt,name=period,proto3" json:"period,omitempty"`
	Count    float32 `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
	Protocol string  `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     float32 `protobuf:"fixed32,4,opt,name=port,proto3" json:"port,omitempty"`
	Expiry   float32 `protobuf:"fixed32,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit    float32 `protobuf:"fixed32,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TestTrace) Reset() {
	*x = TestTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTrace) ProtoMessage() {}

func (x *TestTrace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTrace.ProtoReflect.Descriptor instead.
func (*TestTrace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{40}
}

func (x *TestTrace) GetPeriod() float32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestTrace) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestTrace) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestTrace) GetPort() float32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestTrace) GetExpiry() float32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TestTrace) GetLimit() float32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period float32 `protobuf:"fixed32,1,opt,name=period,proto3" json:"period,omitempty"`
	Count  float32 `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
	Expiry float32 `protobuf:"fixed32,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{41}
}

func (x *Ping) GetPeriod() float32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Ping) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Ping) GetExpiry() float32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []string `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{42}
}

func (x *Notification) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

type Activate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GracePeriod string `protobuf:"bytes,1,opt,name=gracePeriod,proto3" json:"gracePeriod,omitempty"`
	TimeUnit    string `protobuf:"bytes,2,opt,name=timeUnit,proto3" json:"timeUnit,omitempty"`
	TimeWindow  string `protobuf:"bytes,3,opt,name=timeWindow,proto3" json:"timeWindow,omitempty"`
	Times       string `protobuf:"bytes,4,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *Activate) Reset() {
	*x = Activate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activate) ProtoMessage() {}

func (x *Activate) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activate.ProtoReflect.Descriptor instead.
func (*Activate) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{43}
}

func (x *Activate) GetGracePeriod() string {
	if x != nil {
		return x.GracePeriod
	}
	return ""
}

func (x *Activate) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *Activate) GetTimeWindow() string {
	if x != nil {
		return x.TimeWindow
	}
	return ""
}

func (x *Activate) GetTimes() string {
	if x != nil {
		return x.Times
	}
	return ""
}

type HealthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyCritical     float32  `protobuf:"fixed32,1,opt,name=latencyCritical,proto3" json:"latencyCritical,omitempty"`
	LatencyWarning      float32  `protobuf:"fixed32,2,opt,name=latencyWarning,proto3" json:"latencyWarning,omitempty"`
	PacketLossCritical  float32  `protobuf:"fixed32,3,opt,name=packetLossCritical,proto3" json:"packetLossCritical,omitempty"`
	PacketLossWarning   float32  `protobuf:"fixed32,4,opt,name=packetLossWarning,proto3" json:"packetLossWarning,omitempty"`
	JitterCritical      float32  `protobuf:"fixed32,5,opt,name=jitterCritical,proto3" json:"jitterCritical,omitempty"`
	JitterWarning       float32  `protobuf:"fixed32,6,opt,name=jitterWarning,proto3" json:"jitterWarning,omitempty"`
	HttpLatencyCritical float32  `protobuf:"fixed32,7,opt,name=httpLatencyCritical,proto3" json:"httpLatencyCritical,omitempty"`
	HttpLatencyWarning  float32  `protobuf:"fixed32,8,opt,name=httpLatencyWarning,proto3" json:"httpLatencyWarning,omitempty"`
	HttpValidCodes      []uint32 `protobuf:"varint,9,rep,packed,name=httpValidCodes,proto3" json:"httpValidCodes,omitempty"`
	DnsValidCodes       []uint32 `protobuf:"varint,10,rep,packed,name=dnsValidCodes,proto3" json:"dnsValidCodes,omitempty"`
}

func (x *HealthSettings) Reset() {
	*x = HealthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthSettings) ProtoMessage() {}

func (x *HealthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthSettings.ProtoReflect.Descriptor instead.
func (*HealthSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{44}
}

func (x *HealthSettings) GetLatencyCritical() float32 {
	if x != nil {
		return x.LatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarning() float32 {
	if x != nil {
		return x.LatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetPacketLossCritical() float32 {
	if x != nil {
		return x.PacketLossCritical
	}
	return 0
}

func (x *HealthSettings) GetPacketLossWarning() float32 {
	if x != nil {
		return x.PacketLossWarning
	}
	return 0
}

func (x *HealthSettings) GetJitterCritical() float32 {
	if x != nil {
		return x.JitterCritical
	}
	return 0
}

func (x *HealthSettings) GetJitterWarning() float32 {
	if x != nil {
		return x.JitterWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCritical() float32 {
	if x != nil {
		return x.HttpLatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarning() float32 {
	if x != nil {
		return x.HttpLatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpValidCodes() []uint32 {
	if x != nil {
		return x.HttpValidCodes
	}
	return nil
}

func (x *HealthSettings) GetDnsValidCodes() []uint32 {
	if x != nil {
		return x.DnsValidCodes
	}
	return nil
}

type HostnameTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *HostnameTest) Reset() {
	*x = HostnameTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnameTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameTest) ProtoMessage() {}

func (x *HostnameTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameTest.ProtoReflect.Descriptor instead.
func (*HostnameTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{45}
}

func (x *HostnameTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type IpTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *IpTest) Reset() {
	*x = IpTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTest) ProtoMessage() {}

func (x *IpTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTest.ProtoReflect.Descriptor instead.
func (*IpTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{46}
}

func (x *IpTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type AgentTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *AgentTest) Reset() {
	*x = AgentTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTest) ProtoMessage() {}

func (x *AgentTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTest.ProtoReflect.Descriptor instead.
func (*AgentTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{47}
}

func (x *AgentTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type FlowTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                      string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetRefreshIntervalMillis uint32 `protobuf:"varint,2,opt,name=target_refresh_interval_millis,json=targetRefreshIntervalMillis,proto3" json:"target_refresh_interval_millis,omitempty"` // How often to generate tasks.
	MaxTasks                    uint32 `protobuf:"varint,3,opt,name=max_tasks,json=maxTasks,proto3" json:"max_tasks,omitempty"`                                                              // Used for top N.
	Type                        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                                                                       // What type of flow to look at -- asn, cdn, country, ...
}

func (x *FlowTest) Reset() {
	*x = FlowTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTest) ProtoMessage() {}

func (x *FlowTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTest.ProtoReflect.Descriptor instead.
func (*FlowTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{48}
}

func (x *FlowTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FlowTest) GetTargetRefreshIntervalMillis() uint32 {
	if x != nil {
		return x.TargetRefreshIntervalMillis
	}
	return 0
}

func (x *FlowTest) GetMaxTasks() uint32 {
	if x != nil {
		return x.MaxTasks
	}
	return 0
}

func (x *FlowTest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SiteTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *SiteTest) Reset() {
	*x = SiteTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteTest) ProtoMessage() {}

func (x *SiteTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteTest.ProtoReflect.Descriptor instead.
func (*SiteTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{49}
}

func (x *SiteTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TagTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TagTest) Reset() {
	*x = TagTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTest) ProtoMessage() {}

func (x *TagTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagTest.ProtoReflect.Descriptor instead.
func (*TagTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{50}
}

func (x *TagTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type DnsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *DnsTest) Reset() {
	*x = DnsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTest) ProtoMessage() {}

func (x *DnsTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTest.ProtoReflect.Descriptor instead.
func (*DnsTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{51}
}

func (x *DnsTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type UrlTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UrlTest) Reset() {
	*x = UrlTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlTest) ProtoMessage() {}

func (x *UrlTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlTest.ProtoReflect.Descriptor instead.
func (*UrlTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{52}
}

func (x *UrlTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type Status_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Retry  uint32 `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *Status_Error) Reset() {
	*x = Status_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Error) ProtoMessage() {}

func (x *Status_Error) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Error.ProtoReflect.Descriptor instead.
func (*Status_Error) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Status_Error) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Status_Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Status_Error) GetRetry() uint32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

var File_kentik_synthetics_v202101alpha1_synthetics_proto protoreflect.FileDescriptor

var file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x43, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a,
	0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01,
	0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb0, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x41,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x1a, 0x47, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x3c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x8d, 0x06, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49,
	0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x67,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76,
	0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x76, 0x67, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x76, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f,
	0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76,
	0x67, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x64, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x22, 0x72, 0x0a, 0x12, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5c, 0x0a, 0x12, 0x48, 0x54, 0x54,
	0x50, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0x98, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x79, 0x64, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68,
	0x79, 0x64, 0x72, 0x61, 0x22, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x68, 0x6f, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48,
	0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x08, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x08, 0x69,
	0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22,
	0xde, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a,
	0x0a, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x64,
	0x73, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x73, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0x29, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x20,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74,
	0x22, 0x8f, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01,
	0x50, 0x10, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0xd5, 0x0b, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x41, 0x0a,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x39, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x01, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x2a, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x7e, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0xbe, 0x03, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x6f, 0x73, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x68,
	0x74, 0x74, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x20, 0x0a, 0x06, 0x49,
	0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x23, 0x0a,
	0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a,
	0x08, 0x53, 0x69, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x21, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x21, 0x0a, 0x07, 0x44, 0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x21, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2a, 0x5d, 0x0a, 0x08, 0x49, 0x50,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d,
	0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x76,
	0x34, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x76, 0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x32, 0x9e, 0x05, 0x0a, 0x15, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xc3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xc6, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xf2, 0xd7, 0x02, 0x0f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x3a, 0x01, 0x2a, 0x1a, 0x2a,
	0xca, 0x41, 0x19, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0a,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x32, 0x84, 0x0e, 0x0a, 0x16, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xf2, 0xd7, 0x02, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb7, 0x01,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x46, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc7, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x50, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x32, 0x2b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0xc1, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xf2, 0xd7,
	0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25,
	0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbb, 0x01, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbf, 0x01, 0x0a, 0x09, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4b, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x32, 0x29, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0xbd, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc0, 0x01, 0x0a,
	0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x1a,
	0x30, 0xca, 0x41, 0x19, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02,
	0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x32, 0x48, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x2b,
	0xca, 0x41, 0x19, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x42, 0xa2, 0x03, 0x5a, 0x4e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x92, 0x41,
	0xce, 0x02, 0x12, 0x5c, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x22,
	0x37, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x32, 0x06, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x5c, 0x0a, 0x30, 0x0a, 0x13, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x0a, 0x28, 0x0a, 0x0f, 0x58,
	0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15,
	0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x02, 0x62, 0x32, 0x0a, 0x17, 0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d,
	0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00,
	0x0a, 0x17, 0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50,
	0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41,
	0x50, 0x49, 0x73, 0x12, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescOnce sync.Once
	file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescData = file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDesc
)

func file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescGZIP() []byte {
	file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescOnce.Do(func() {
		file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescData)
	})
	return file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDescData
}

var file_kentik_synthetics_v202101alpha1_synthetics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_kentik_synthetics_v202101alpha1_synthetics_proto_goTypes = []interface{}{
	(IPFamily)(0),                     // 0: kentik.synthetics.v202101alpha1.IPFamily
	(MonitoringRequest_TestStatus)(0), // 1: kentik.synthetics.v202101alpha1.MonitoringRequest.TestStatus
	(*GetHealthForTestsRequest)(nil),  // 2: kentik.synthetics.v202101alpha1.GetHealthForTestsRequest
	(*GetHealthForTestsResponse)(nil), // 3: kentik.synthetics.v202101alpha1.GetHealthForTestsResponse
	(*ListAgentRequest)(nil),          // 4: kentik.synthetics.v202101alpha1.ListAgentRequest
	(*ListAgentResponse)(nil),         // 5: kentik.synthetics.v202101alpha1.ListAgentResponse
	(*GetAgentRequest)(nil),           // 6: kentik.synthetics.v202101alpha1.GetAgentRequest
	(*GetAgentResponse)(nil),          // 7: kentik.synthetics.v202101alpha1.GetAgentResponse
	(*PatchAgentRequest)(nil),         // 8: kentik.synthetics.v202101alpha1.PatchAgentRequest
	(*PatchAgentResponse)(nil),        // 9: kentik.synthetics.v202101alpha1.PatchAgentResponse
	(*DeleteAgentRequest)(nil),        // 10: kentik.synthetics.v202101alpha1.DeleteAgentRequest
	(*DeleteAgentResponse)(nil),       // 11: kentik.synthetics.v202101alpha1.DeleteAgentResponse
	(*Status)(nil),                    // 12: kentik.synthetics.v202101alpha1.Status
	(*Health)(nil),                    // 13: kentik.synthetics.v202101alpha1.Health
	(*TestHealth)(nil),                // 14: kentik.synthetics.v202101alpha1.TestHealth
	(*TaskHealth)(nil),                // 15: kentik.synthetics.v202101alpha1.TaskHealth
	(*AgentHealth)(nil),               // 16: kentik.synthetics.v202101alpha1.AgentHealth
	(*HealthMoment)(nil),              // 17: kentik.synthetics.v202101alpha1.HealthMoment
	(*Agent)(nil),                     // 18: kentik.synthetics.v202101alpha1.Agent
	(*PingTaskDefinition)(nil),        // 19: kentik.synthetics.v202101alpha1.PingTaskDefinition
	(*TraceTaskDefinition)(nil),       // 20: kentik.synthetics.v202101alpha1.TraceTaskDefinition
	(*HTTPTaskDefinition)(nil),        // 21: kentik.synthetics.v202101alpha1.HTTPTaskDefinition
	(*GetTraceForTestRequest)(nil),    // 22: kentik.synthetics.v202101alpha1.GetTraceForTestRequest
	(*GetTraceForTestResponse)(nil),   // 23: kentik.synthetics.v202101alpha1.GetTraceForTestResponse
	(*GetTestsPerDayRequest)(nil),     // 24: kentik.synthetics.v202101alpha1.GetTestsPerDayRequest
	(*GetTestsPerDayResponse)(nil),    // 25: kentik.synthetics.v202101alpha1.GetTestsPerDayResponse
	(*Trace)(nil),                     // 26: kentik.synthetics.v202101alpha1.Trace
	(*TraceHop)(nil),                  // 27: kentik.synthetics.v202101alpha1.TraceHop
	(*TraceLink)(nil),                 // 28: kentik.synthetics.v202101alpha1.TraceLink
	(*ListTestRequest)(nil),           // 29: kentik.synthetics.v202101alpha1.ListTestRequest
	(*ListTestResponse)(nil),          // 30: kentik.synthetics.v202101alpha1.ListTestResponse
	(*GetTestRequest)(nil),            // 31: kentik.synthetics.v202101alpha1.GetTestRequest
	(*GetTestResponse)(nil),           // 32: kentik.synthetics.v202101alpha1.GetTestResponse
	(*CreateTestRequest)(nil),         // 33: kentik.synthetics.v202101alpha1.CreateTestRequest
	(*CreateTestResponse)(nil),        // 34: kentik.synthetics.v202101alpha1.CreateTestResponse
	(*PatchTestRequest)(nil),          // 35: kentik.synthetics.v202101alpha1.PatchTestRequest
	(*PatchTestResponse)(nil),         // 36: kentik.synthetics.v202101alpha1.PatchTestResponse
	(*DeleteTestRequest)(nil),         // 37: kentik.synthetics.v202101alpha1.DeleteTestRequest
	(*DeleteTestResponse)(nil),        // 38: kentik.synthetics.v202101alpha1.DeleteTestResponse
	(*MonitoringRequest)(nil),         // 39: kentik.synthetics.v202101alpha1.MonitoringRequest
	(*MonitoringResponse)(nil),        // 40: kentik.synthetics.v202101alpha1.MonitoringResponse
	(*Test)(nil),                      // 41: kentik.synthetics.v202101alpha1.Test
	(*TestTrace)(nil),                 // 42: kentik.synthetics.v202101alpha1.TestTrace
	(*Ping)(nil),                      // 43: kentik.synthetics.v202101alpha1.Ping
	(*Notification)(nil),              // 44: kentik.synthetics.v202101alpha1.Notification
	(*Activate)(nil),                  // 45: kentik.synthetics.v202101alpha1.Activate
	(*HealthSettings)(nil),            // 46: kentik.synthetics.v202101alpha1.HealthSettings
	(*HostnameTest)(nil),              // 47: kentik.synthetics.v202101alpha1.HostnameTest
	(*IpTest)(nil),                    // 48: kentik.synthetics.v202101alpha1.IpTest
	(*AgentTest)(nil),                 // 49: kentik.synthetics.v202101alpha1.AgentTest
	(*FlowTest)(nil),                  // 50: kentik.synthetics.v202101alpha1.FlowTest
	(*SiteTest)(nil),                  // 51: kentik.synthetics.v202101alpha1.SiteTest
	(*TagTest)(nil),                   // 52: kentik.synthetics.v202101alpha1.TagTest
	(*DnsTest)(nil),                   // 53: kentik.synthetics.v202101alpha1.DnsTest
	(*UrlTest)(nil),                   // 54: kentik.synthetics.v202101alpha1.UrlTest
	(*Status_Error)(nil),              // 55: kentik.synthetics.v202101alpha1.Status.Error
	(*fieldmaskpb.FieldMask)(nil),     // 56: google.protobuf.FieldMask
}
var file_kentik_synthetics_v202101alpha1_synthetics_proto_depIdxs = []int32{
	12, // 0: kentik.synthetics.v202101alpha1.GetHealthForTestsResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	14, // 1: kentik.synthetics.v202101alpha1.GetHealthForTestsResponse.health:type_name -> kentik.synthetics.v202101alpha1.TestHealth
	12, // 2: kentik.synthetics.v202101alpha1.ListAgentResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	18, // 3: kentik.synthetics.v202101alpha1.ListAgentResponse.agents:type_name -> kentik.synthetics.v202101alpha1.Agent
	12, // 4: kentik.synthetics.v202101alpha1.GetAgentResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	18, // 5: kentik.synthetics.v202101alpha1.GetAgentResponse.agent:type_name -> kentik.synthetics.v202101alpha1.Agent
	18, // 6: kentik.synthetics.v202101alpha1.PatchAgentRequest.agent:type_name -> kentik.synthetics.v202101alpha1.Agent
	56, // 7: kentik.synthetics.v202101alpha1.PatchAgentRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 8: kentik.synthetics.v202101alpha1.PatchAgentResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	18, // 9: kentik.synthetics.v202101alpha1.PatchAgentResponse.agent:type_name -> kentik.synthetics.v202101alpha1.Agent
	12, // 10: kentik.synthetics.v202101alpha1.DeleteAgentResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	55, // 11: kentik.synthetics.v202101alpha1.Status.err:type_name -> kentik.synthetics.v202101alpha1.Status.Error
	15, // 12: kentik.synthetics.v202101alpha1.TestHealth.tasks:type_name -> kentik.synthetics.v202101alpha1.TaskHealth
	13, // 13: kentik.synthetics.v202101alpha1.TestHealth.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	13, // 14: kentik.synthetics.v202101alpha1.TestHealth.health_ts:type_name -> kentik.synthetics.v202101alpha1.Health
	16, // 15: kentik.synthetics.v202101alpha1.TaskHealth.agents:type_name -> kentik.synthetics.v202101alpha1.AgentHealth
	13, // 16: kentik.synthetics.v202101alpha1.TaskHealth.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	18, // 17: kentik.synthetics.v202101alpha1.AgentHealth.agent:type_name -> kentik.synthetics.v202101alpha1.Agent
	17, // 18: kentik.synthetics.v202101alpha1.AgentHealth.health:type_name -> kentik.synthetics.v202101alpha1.HealthMoment
	13, // 19: kentik.synthetics.v202101alpha1.AgentHealth.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	13, // 20: kentik.synthetics.v202101alpha1.HealthMoment.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	0,  // 21: kentik.synthetics.v202101alpha1.Agent.family:type_name -> kentik.synthetics.v202101alpha1.IPFamily
	12, // 22: kentik.synthetics.v202101alpha1.GetTraceForTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	26, // 23: kentik.synthetics.v202101alpha1.GetTraceForTestResponse.trace:type_name -> kentik.synthetics.v202101alpha1.Trace
	12, // 24: kentik.synthetics.v202101alpha1.GetTestsPerDayResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	27, // 25: kentik.synthetics.v202101alpha1.Trace.hops:type_name -> kentik.synthetics.v202101alpha1.TraceHop
	28, // 26: kentik.synthetics.v202101alpha1.Trace.links:type_name -> kentik.synthetics.v202101alpha1.TraceLink
	13, // 27: kentik.synthetics.v202101alpha1.TraceHop.in_health:type_name -> kentik.synthetics.v202101alpha1.Health
	13, // 28: kentik.synthetics.v202101alpha1.TraceHop.out_health:type_name -> kentik.synthetics.v202101alpha1.Health
	13, // 29: kentik.synthetics.v202101alpha1.TraceLink.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	17, // 30: kentik.synthetics.v202101alpha1.TraceLink.health:type_name -> kentik.synthetics.v202101alpha1.HealthMoment
	12, // 31: kentik.synthetics.v202101alpha1.ListTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	41, // 32: kentik.synthetics.v202101alpha1.ListTestResponse.tests:type_name -> kentik.synthetics.v202101alpha1.Test
	12, // 33: kentik.synthetics.v202101alpha1.GetTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	41, // 34: kentik.synthetics.v202101alpha1.GetTestResponse.test:type_name -> kentik.synthetics.v202101alpha1.Test
	12, // 35: kentik.synthetics.v202101alpha1.CreateTestRequest.status:type_name -> kentik.synthetics.v202101alpha1.Status
	41, // 36: kentik.synthetics.v202101alpha1.CreateTestRequest.test:type_name -> kentik.synthetics.v202101alpha1.Test
	12, // 37: kentik.synthetics.v202101alpha1.CreateTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	41, // 38: kentik.synthetics.v202101alpha1.CreateTestResponse.test:type_name -> kentik.synthetics.v202101alpha1.Test
	41, // 39: kentik.synthetics.v202101alpha1.PatchTestRequest.test:type_name -> kentik.synthetics.v202101alpha1.Test
	56, // 40: kentik.synthetics.v202101alpha1.PatchTestRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 41: kentik.synthetics.v202101alpha1.PatchTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	41, // 42: kentik.synthetics.v202101alpha1.PatchTestResponse.test:type_name -> kentik.synthetics.v202101alpha1.Test
	12, // 43: kentik.synthetics.v202101alpha1.DeleteTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	1,  // 44: kentik.synthetics.v202101alpha1.MonitoringRequest.test_status:type_name -> kentik.synthetics.v202101alpha1.MonitoringRequest.TestStatus
	12, // 45: kentik.synthetics.v202101alpha1.MonitoringResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	41, // 46: kentik.synthetics.v202101alpha1.MonitoringResponse.test:type_name -> kentik.synthetics.v202101alpha1.Test
	47, // 47: kentik.synthetics.v202101alpha1.Test.hostname:type_name -> kentik.synthetics.v202101alpha1.HostnameTest
	48, // 48: kentik.synthetics.v202101alpha1.Test.ip:type_name -> kentik.synthetics.v202101alpha1.IpTest
	49, // 49: kentik.synthetics.v202101alpha1.Test.agent:type_name -> kentik.synthetics.v202101alpha1.AgentTest
	50, // 50: kentik.synthetics.v202101alpha1.Test.flow:type_name -> kentik.synthetics.v202101alpha1.FlowTest
	51, // 51: kentik.synthetics.v202101alpha1.Test.site:type_name -> kentik.synthetics.v202101alpha1.SiteTest
	52, // 52: kentik.synthetics.v202101alpha1.Test.tag:type_name -> kentik.synthetics.v202101alpha1.TagTest
	53, // 53: kentik.synthetics.v202101alpha1.Test.dns:type_name -> kentik.synthetics.v202101alpha1.DnsTest
	54, // 54: kentik.synthetics.v202101alpha1.Test.url:type_name -> kentik.synthetics.v202101alpha1.UrlTest
	46, // 55: kentik.synthetics.v202101alpha1.Test.healthSettings:type_name -> kentik.synthetics.v202101alpha1.HealthSettings
	44, // 56: kentik.synthetics.v202101alpha1.Test.notifications:type_name -> kentik.synthetics.v202101alpha1.Notification
	45, // 57: kentik.synthetics.v202101alpha1.Test.activate:type_name -> kentik.synthetics.v202101alpha1.Activate
	0,  // 58: kentik.synthetics.v202101alpha1.Test.family:type_name -> kentik.synthetics.v202101alpha1.IPFamily
	43, // 59: kentik.synthetics.v202101alpha1.Test.ping:type_name -> kentik.synthetics.v202101alpha1.Ping
	42, // 60: kentik.synthetics.v202101alpha1.Test.trace:type_name -> kentik.synthetics.v202101alpha1.TestTrace
	2,  // 61: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetHealthForTests:input_type -> kentik.synthetics.v202101alpha1.GetHealthForTestsRequest
	22, // 62: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetTraceForTest:input_type -> kentik.synthetics.v202101alpha1.GetTraceForTestRequest
	24, // 63: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetTestsPerDay:input_type -> kentik.synthetics.v202101alpha1.GetTestsPerDayRequest
	4,  // 64: kentik.synthetics.v202101alpha1.SyntheticsAdminService.ListAgent:input_type -> kentik.synthetics.v202101alpha1.ListAgentRequest
	6,  // 65: kentik.synthetics.v202101alpha1.SyntheticsAdminService.GetAgent:input_type -> kentik.synthetics.v202101alpha1.GetAgentRequest
	8,  // 66: kentik.synthetics.v202101alpha1.SyntheticsAdminService.PatchAgent:input_type -> kentik.synthetics.v202101alpha1.PatchAgentRequest
	10, // 67: kentik.synthetics.v202101alpha1.SyntheticsAdminService.DeleteAgent:input_type -> kentik.synthetics.v202101alpha1.DeleteAgentRequest
	29, // 68: kentik.synthetics.v202101alpha1.SyntheticsAdminService.ListTest:input_type -> kentik.synthetics.v202101alpha1.ListTestRequest
	33, // 69: kentik.synthetics.v202101alpha1.SyntheticsAdminService.CreateTest:input_type -> kentik.synthetics.v202101alpha1.CreateTestRequest
	35, // 70: kentik.synthetics.v202101alpha1.SyntheticsAdminService.PatchTest:input_type -> kentik.synthetics.v202101alpha1.PatchTestRequest
	37, // 71: kentik.synthetics.v202101alpha1.SyntheticsAdminService.DeleteTest:input_type -> kentik.synthetics.v202101alpha1.DeleteTestRequest
	39, // 72: kentik.synthetics.v202101alpha1.SyntheticsAdminService.Monitoring:input_type -> kentik.synthetics.v202101alpha1.MonitoringRequest
	3,  // 73: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetHealthForTests:output_type -> kentik.synthetics.v202101alpha1.GetHealthForTestsResponse
	23, // 74: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetTraceForTest:output_type -> kentik.synthetics.v202101alpha1.GetTraceForTestResponse
	25, // 75: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetTestsPerDay:output_type -> kentik.synthetics.v202101alpha1.GetTestsPerDayResponse
	5,  // 76: kentik.synthetics.v202101alpha1.SyntheticsAdminService.ListAgent:output_type -> kentik.synthetics.v202101alpha1.ListAgentResponse
	7,  // 77: kentik.synthetics.v202101alpha1.SyntheticsAdminService.GetAgent:output_type -> kentik.synthetics.v202101alpha1.GetAgentResponse
	9,  // 78: kentik.synthetics.v202101alpha1.SyntheticsAdminService.PatchAgent:output_type -> kentik.synthetics.v202101alpha1.PatchAgentResponse
	11, // 79: kentik.synthetics.v202101alpha1.SyntheticsAdminService.DeleteAgent:output_type -> kentik.synthetics.v202101alpha1.DeleteAgentResponse
	30, // 80: kentik.synthetics.v202101alpha1.SyntheticsAdminService.ListTest:output_type -> kentik.synthetics.v202101alpha1.ListTestResponse
	34, // 81: kentik.synthetics.v202101alpha1.SyntheticsAdminService.CreateTest:output_type -> kentik.synthetics.v202101alpha1.CreateTestResponse
	36, // 82: kentik.synthetics.v202101alpha1.SyntheticsAdminService.PatchTest:output_type -> kentik.synthetics.v202101alpha1.PatchTestResponse
	38, // 83: kentik.synthetics.v202101alpha1.SyntheticsAdminService.DeleteTest:output_type -> kentik.synthetics.v202101alpha1.DeleteTestResponse
	40, // 84: kentik.synthetics.v202101alpha1.SyntheticsAdminService.Monitoring:output_type -> kentik.synthetics.v202101alpha1.MonitoringResponse
	73, // [73:85] is the sub-list for method output_type
	61, // [61:73] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_kentik_synthetics_v202101alpha1_synthetics_proto_init() }
func file_kentik_synthetics_v202101alpha1_synthetics_proto_init() {
	if File_kentik_synthetics_v202101alpha1_synthetics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthForTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthForTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestsPerDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestsPerDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnameTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Status_Ok)(nil),
		(*Status_Err)(nil),
	}
	file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*Test_Hostname)(nil),
		(*Test_Ip)(nil),
		(*Test_Agent)(nil),
		(*Test_Flow)(nil),
		(*Test_Site)(nil),
		(*Test_Tag)(nil),
		(*Test_Dns)(nil),
		(*Test_Url)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_kentik_synthetics_v202101alpha1_synthetics_proto_goTypes,
		DependencyIndexes: file_kentik_synthetics_v202101alpha1_synthetics_proto_depIdxs,
		EnumInfos:         file_kentik_synthetics_v202101alpha1_synthetics_proto_enumTypes,
		MessageInfos:      file_kentik_synthetics_v202101alpha1_synthetics_proto_msgTypes,
	}.Build()
	File_kentik_synthetics_v202101alpha1_synthetics_proto = out.File
	file_kentik_synthetics_v202101alpha1_synthetics_proto_rawDesc = nil
	file_kentik_synthetics_v202101alpha1_synthetics_proto_goTypes = nil
	file_kentik_synthetics_v202101alpha1_synthetics_proto_depIdxs = nil
}
