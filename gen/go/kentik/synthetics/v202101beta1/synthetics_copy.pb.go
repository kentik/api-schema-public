// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/synthetics/v202101beta1/synthetics.proto

package synthetics

import "google.golang.org/protobuf/types/known/fieldmaskpb"
import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Health) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Health:
		x.Health = v.GetHealth()
		x.Time = v.GetTime()
	default:
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Health) Proto_ShallowClone() (c *Health) {
	if x != nil {
		c = new(Health)
		c.Health = x.Health
		c.Time = x.Time
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentTaskConfig) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentTaskConfig:
		x.Id = v.GetId()
		x.Targets = v.GetTargets()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetTargets() []string }); ok {
			x.Targets = v.GetTargets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentTaskConfig) Proto_ShallowClone() (c *AgentTaskConfig) {
	if x != nil {
		c = new(AgentTaskConfig)
		c.Id = x.Id
		c.Targets = x.Targets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestHealth) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestHealth:
		x.TestId = v.GetTestId()
		x.Tasks = v.GetTasks()
		x.OverallHealth = v.GetOverallHealth()
		x.HealthTs = v.GetHealthTs()
		x.AgentTaskConfig = v.GetAgentTaskConfig()
		x.Mesh = v.GetMesh()
	default:
		if v, ok := v.(interface{ GetTestId() string }); ok {
			x.TestId = v.GetTestId()
		}
		if v, ok := v.(interface{ GetTasks() []*TaskHealth }); ok {
			x.Tasks = v.GetTasks()
		}
		if v, ok := v.(interface{ GetOverallHealth() *Health }); ok {
			x.OverallHealth = v.GetOverallHealth()
		}
		if v, ok := v.(interface{ GetHealthTs() []*Health }); ok {
			x.HealthTs = v.GetHealthTs()
		}
		if v, ok := v.(interface{ GetAgentTaskConfig() []*AgentTaskConfig }); ok {
			x.AgentTaskConfig = v.GetAgentTaskConfig()
		}
		if v, ok := v.(interface{ GetMesh() []*MeshResponse }); ok {
			x.Mesh = v.GetMesh()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestHealth) Proto_ShallowClone() (c *TestHealth) {
	if x != nil {
		c = new(TestHealth)
		c.TestId = x.TestId
		c.Tasks = x.Tasks
		c.OverallHealth = x.OverallHealth
		c.HealthTs = x.HealthTs
		c.AgentTaskConfig = x.AgentTaskConfig
		c.Mesh = x.Mesh
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TaskHealth) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TaskHealth:
		x.Task = v.GetTask()
		x.Agents = v.GetAgents()
		x.OverallHealth = v.GetOverallHealth()
		x.TargetAgent = v.GetTargetAgent()
	default:
		if v, ok := v.(interface{ GetTask() *Task }); ok {
			x.Task = v.GetTask()
		}
		if v, ok := v.(interface{ GetAgents() []*AgentHealth }); ok {
			x.Agents = v.GetAgents()
		}
		if v, ok := v.(interface{ GetOverallHealth() *Health }); ok {
			x.OverallHealth = v.GetOverallHealth()
		}
		if v, ok := v.(interface{ GetTargetAgent() *Agent }); ok {
			x.TargetAgent = v.GetTargetAgent()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TaskHealth) Proto_ShallowClone() (c *TaskHealth) {
	if x != nil {
		c = new(TaskHealth)
		c.Task = x.Task
		c.Agents = x.Agents
		c.OverallHealth = x.OverallHealth
		c.TargetAgent = x.TargetAgent
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentHealth) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentHealth:
		x.Agent = v.GetAgent()
		x.Health = v.GetHealth()
		x.OverallHealth = v.GetOverallHealth()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
		if v, ok := v.(interface{ GetHealth() []*HealthMoment }); ok {
			x.Health = v.GetHealth()
		}
		if v, ok := v.(interface{ GetOverallHealth() *Health }); ok {
			x.OverallHealth = v.GetOverallHealth()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentHealth) Proto_ShallowClone() (c *AgentHealth) {
	if x != nil {
		c = new(AgentHealth)
		c.Agent = x.Agent
		c.Health = x.Health
		c.OverallHealth = x.OverallHealth
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HealthMoment) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HealthMoment:
		x.Time = v.GetTime()
		x.SrcIp = v.GetSrcIp()
		x.DstIp = v.GetDstIp()
		x.PacketLoss = v.GetPacketLoss()
		x.AvgLatency = v.GetAvgLatency()
		x.AvgWeightedLatency = v.GetAvgWeightedLatency()
		x.RollingAvgLatency = v.GetRollingAvgLatency()
		x.RollingStddevLatency = v.GetRollingStddevLatency()
		x.RollingAvgWeightedLatency = v.GetRollingAvgWeightedLatency()
		x.LatencyHealth = v.GetLatencyHealth()
		x.PacketLossHealth = v.GetPacketLossHealth()
		x.OverallHealth = v.GetOverallHealth()
		x.AvgJitter = v.GetAvgJitter()
		x.RollingAvgJitter = v.GetRollingAvgJitter()
		x.RollingStdJitter = v.GetRollingStdJitter()
		x.JitterHealth = v.GetJitterHealth()
		x.Data = v.GetData()
		x.Size = v.GetSize()
		x.Status = v.GetStatus()
		x.TaskType = v.GetTaskType()
		x.OtherHealths = v.GetOtherHealths()
	default:
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
		if v, ok := v.(interface{ GetSrcIp() string }); ok {
			x.SrcIp = v.GetSrcIp()
		}
		if v, ok := v.(interface{ GetDstIp() string }); ok {
			x.DstIp = v.GetDstIp()
		}
		if v, ok := v.(interface{ GetPacketLoss() float64 }); ok {
			x.PacketLoss = v.GetPacketLoss()
		}
		if v, ok := v.(interface{ GetAvgLatency() uint32 }); ok {
			x.AvgLatency = v.GetAvgLatency()
		}
		if v, ok := v.(interface{ GetAvgWeightedLatency() uint32 }); ok {
			x.AvgWeightedLatency = v.GetAvgWeightedLatency()
		}
		if v, ok := v.(interface{ GetRollingAvgLatency() uint32 }); ok {
			x.RollingAvgLatency = v.GetRollingAvgLatency()
		}
		if v, ok := v.(interface{ GetRollingStddevLatency() uint32 }); ok {
			x.RollingStddevLatency = v.GetRollingStddevLatency()
		}
		if v, ok := v.(interface{ GetRollingAvgWeightedLatency() uint32 }); ok {
			x.RollingAvgWeightedLatency = v.GetRollingAvgWeightedLatency()
		}
		if v, ok := v.(interface{ GetLatencyHealth() string }); ok {
			x.LatencyHealth = v.GetLatencyHealth()
		}
		if v, ok := v.(interface{ GetPacketLossHealth() string }); ok {
			x.PacketLossHealth = v.GetPacketLossHealth()
		}
		if v, ok := v.(interface{ GetOverallHealth() *Health }); ok {
			x.OverallHealth = v.GetOverallHealth()
		}
		if v, ok := v.(interface{ GetAvgJitter() uint32 }); ok {
			x.AvgJitter = v.GetAvgJitter()
		}
		if v, ok := v.(interface{ GetRollingAvgJitter() uint32 }); ok {
			x.RollingAvgJitter = v.GetRollingAvgJitter()
		}
		if v, ok := v.(interface{ GetRollingStdJitter() uint32 }); ok {
			x.RollingStdJitter = v.GetRollingStdJitter()
		}
		if v, ok := v.(interface{ GetJitterHealth() string }); ok {
			x.JitterHealth = v.GetJitterHealth()
		}
		if v, ok := v.(interface{ GetData() string }); ok {
			x.Data = v.GetData()
		}
		if v, ok := v.(interface{ GetSize() uint32 }); ok {
			x.Size = v.GetSize()
		}
		if v, ok := v.(interface{ GetStatus() uint32 }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetTaskType() string }); ok {
			x.TaskType = v.GetTaskType()
		}
		if v, ok := v.(interface{ GetOtherHealths() map[string]string }); ok {
			x.OtherHealths = v.GetOtherHealths()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HealthMoment) Proto_ShallowClone() (c *HealthMoment) {
	if x != nil {
		c = new(HealthMoment)
		c.Time = x.Time
		c.SrcIp = x.SrcIp
		c.DstIp = x.DstIp
		c.PacketLoss = x.PacketLoss
		c.AvgLatency = x.AvgLatency
		c.AvgWeightedLatency = x.AvgWeightedLatency
		c.RollingAvgLatency = x.RollingAvgLatency
		c.RollingStddevLatency = x.RollingStddevLatency
		c.RollingAvgWeightedLatency = x.RollingAvgWeightedLatency
		c.LatencyHealth = x.LatencyHealth
		c.PacketLossHealth = x.PacketLossHealth
		c.OverallHealth = x.OverallHealth
		c.AvgJitter = x.AvgJitter
		c.RollingAvgJitter = x.RollingAvgJitter
		c.RollingStdJitter = x.RollingStdJitter
		c.JitterHealth = x.JitterHealth
		c.Data = x.Data
		c.Size = x.Size
		c.Status = x.Status
		c.TaskType = x.TaskType
		c.OtherHealths = x.OtherHealths
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Agent) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Agent:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Status = v.GetStatus()
		x.Alias = v.GetAlias()
		x.Type = v.GetType()
		x.Os = v.GetOs()
		x.Ip = v.GetIp()
		x.Lat = v.GetLat()
		x.Long = v.GetLong()
		x.LastAuthed = v.GetLastAuthed()
		x.Family = v.GetFamily()
		x.Asn = v.GetAsn()
		x.SiteId = v.GetSiteId()
		x.Version = v.GetVersion()
		x.Challenge = v.GetChallenge()
		x.City = v.GetCity()
		x.Region = v.GetRegion()
		x.Country = v.GetCountry()
		x.TestIds = v.GetTestIds()
		x.LocalIp = v.GetLocalIp()
		x.CloudVpc = v.GetCloudVpc()
		x.AgentImpl = v.GetAgentImpl()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetStatus() AgentStatus }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetAlias() string }); ok {
			x.Alias = v.GetAlias()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetOs() string }); ok {
			x.Os = v.GetOs()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetLat() float64 }); ok {
			x.Lat = v.GetLat()
		}
		if v, ok := v.(interface{ GetLong() float64 }); ok {
			x.Long = v.GetLong()
		}
		if v, ok := v.(interface{ GetLastAuthed() *timestamppb.Timestamp }); ok {
			x.LastAuthed = v.GetLastAuthed()
		}
		if v, ok := v.(interface{ GetFamily() IPFamily }); ok {
			x.Family = v.GetFamily()
		}
		if v, ok := v.(interface{ GetAsn() uint32 }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetSiteId() string }); ok {
			x.SiteId = v.GetSiteId()
		}
		if v, ok := v.(interface{ GetVersion() string }); ok {
			x.Version = v.GetVersion()
		}
		if v, ok := v.(interface{ GetChallenge() string }); ok {
			x.Challenge = v.GetChallenge()
		}
		if v, ok := v.(interface{ GetCity() string }); ok {
			x.City = v.GetCity()
		}
		if v, ok := v.(interface{ GetRegion() string }); ok {
			x.Region = v.GetRegion()
		}
		if v, ok := v.(interface{ GetCountry() string }); ok {
			x.Country = v.GetCountry()
		}
		if v, ok := v.(interface{ GetTestIds() []string }); ok {
			x.TestIds = v.GetTestIds()
		}
		if v, ok := v.(interface{ GetLocalIp() string }); ok {
			x.LocalIp = v.GetLocalIp()
		}
		if v, ok := v.(interface{ GetCloudVpc() string }); ok {
			x.CloudVpc = v.GetCloudVpc()
		}
		if v, ok := v.(interface{ GetAgentImpl() ImplementType }); ok {
			x.AgentImpl = v.GetAgentImpl()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Agent) Proto_ShallowClone() (c *Agent) {
	if x != nil {
		c = new(Agent)
		c.Id = x.Id
		c.Name = x.Name
		c.Status = x.Status
		c.Alias = x.Alias
		c.Type = x.Type
		c.Os = x.Os
		c.Ip = x.Ip
		c.Lat = x.Lat
		c.Long = x.Long
		c.LastAuthed = x.LastAuthed
		c.Family = x.Family
		c.Asn = x.Asn
		c.SiteId = x.SiteId
		c.Version = x.Version
		c.Challenge = x.Challenge
		c.City = x.City
		c.Region = x.Region
		c.Country = x.Country
		c.TestIds = x.TestIds
		c.LocalIp = x.LocalIp
		c.CloudVpc = x.CloudVpc
		c.AgentImpl = x.AgentImpl
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PingTaskDefinition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PingTaskDefinition:
		x.Target = v.GetTarget()
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
		x.Count = v.GetCount()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetCount() uint32 }); ok {
			x.Count = v.GetCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PingTaskDefinition) Proto_ShallowClone() (c *PingTaskDefinition) {
	if x != nil {
		c = new(PingTaskDefinition)
		c.Target = x.Target
		c.Period = x.Period
		c.Expiry = x.Expiry
		c.Count = x.Count
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TraceTaskDefinition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TraceTaskDefinition:
		x.Target = v.GetTarget()
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
		x.Limit = v.GetLimit()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetLimit() uint32 }); ok {
			x.Limit = v.GetLimit()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TraceTaskDefinition) Proto_ShallowClone() (c *TraceTaskDefinition) {
	if x != nil {
		c = new(TraceTaskDefinition)
		c.Target = x.Target
		c.Period = x.Period
		c.Expiry = x.Expiry
		c.Limit = x.Limit
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HTTPTaskDefinition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HTTPTaskDefinition:
		x.Target = v.GetTarget()
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HTTPTaskDefinition) Proto_ShallowClone() (c *HTTPTaskDefinition) {
	if x != nil {
		c = new(HTTPTaskDefinition)
		c.Target = x.Target
		c.Period = x.Period
		c.Expiry = x.Expiry
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Task) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Task:
		x.Id = v.GetId()
		x.TestId = v.GetTestId()
		x.DeviceId = v.GetDeviceId()
		x.State = v.GetState()
		x.Status = v.GetStatus()
		x.Family = v.GetFamily()
		x.Definition = v.GetDefinition()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetTestId() string }); ok {
			x.TestId = v.GetTestId()
		}
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetState() TaskState }); ok {
			x.State = v.GetState()
		}
		if v, ok := v.(interface{ GetStatus() string }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetFamily() IPFamily }); ok {
			x.Family = v.GetFamily()
		}
		if v, ok := v.(interface{ GetDefinition() isTask_Definition }); ok {
			x.Definition = v.GetDefinition()
		} else {
			func() {
				if v, ok := v.(interface{ GetPing() *PingTaskDefinition }); ok {
					var defaultValue *PingTaskDefinition
					if v := v.GetPing(); v != defaultValue {
						x.Definition = &Task_Ping{Ping: v}
						return
					}
				}
				if v, ok := v.(interface{ GetTraceroute() *TraceTaskDefinition }); ok {
					var defaultValue *TraceTaskDefinition
					if v := v.GetTraceroute(); v != defaultValue {
						x.Definition = &Task_Traceroute{Traceroute: v}
						return
					}
				}
				if v, ok := v.(interface{ GetHttp() *HTTPTaskDefinition }); ok {
					var defaultValue *HTTPTaskDefinition
					if v := v.GetHttp(); v != defaultValue {
						x.Definition = &Task_Http{Http: v}
						return
					}
				}
				if v, ok := v.(interface{ GetKnock() *KnockTaskDefinition }); ok {
					var defaultValue *KnockTaskDefinition
					if v := v.GetKnock(); v != defaultValue {
						x.Definition = &Task_Knock{Knock: v}
						return
					}
				}
				if v, ok := v.(interface{ GetDns() *DNSTaskDefinition }); ok {
					var defaultValue *DNSTaskDefinition
					if v := v.GetDns(); v != defaultValue {
						x.Definition = &Task_Dns{Dns: v}
						return
					}
				}
				if v, ok := v.(interface{ GetShake() *ShakeTaskDefinition }); ok {
					var defaultValue *ShakeTaskDefinition
					if v := v.GetShake(); v != defaultValue {
						x.Definition = &Task_Shake{Shake: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Task) Proto_ShallowClone() (c *Task) {
	if x != nil {
		c = new(Task)
		c.Id = x.Id
		c.TestId = x.TestId
		c.DeviceId = x.DeviceId
		c.State = x.State
		c.Status = x.Status
		c.Family = x.Family
		c.Definition = x.Definition
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *KnockTaskDefinition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *KnockTaskDefinition:
		x.Target = v.GetTarget()
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
		x.Count = v.GetCount()
		x.Port = v.GetPort()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetCount() uint32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *KnockTaskDefinition) Proto_ShallowClone() (c *KnockTaskDefinition) {
	if x != nil {
		c = new(KnockTaskDefinition)
		c.Target = x.Target
		c.Period = x.Period
		c.Expiry = x.Expiry
		c.Count = x.Count
		c.Port = x.Port
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DNSTaskDefinition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DNSTaskDefinition:
		x.Target = v.GetTarget()
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
		x.Count = v.GetCount()
		x.Port = v.GetPort()
		x.Type = v.GetType()
		x.Resolver = v.GetResolver()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetCount() uint32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetResolver() string }); ok {
			x.Resolver = v.GetResolver()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DNSTaskDefinition) Proto_ShallowClone() (c *DNSTaskDefinition) {
	if x != nil {
		c = new(DNSTaskDefinition)
		c.Target = x.Target
		c.Period = x.Period
		c.Expiry = x.Expiry
		c.Count = x.Count
		c.Port = x.Port
		c.Type = x.Type
		c.Resolver = x.Resolver
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ShakeTaskDefinition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ShakeTaskDefinition:
		x.Target = v.GetTarget()
		x.Port = v.GetPort()
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ShakeTaskDefinition) Proto_ShallowClone() (c *ShakeTaskDefinition) {
	if x != nil {
		c = new(ShakeTaskDefinition)
		c.Target = x.Target
		c.Port = x.Port
		c.Period = x.Period
		c.Expiry = x.Expiry
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UserInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UserInfo:
		x.Id = v.GetId()
		x.Email = v.GetEmail()
		x.FullName = v.GetFullName()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetEmail() string }); ok {
			x.Email = v.GetEmail()
		}
		if v, ok := v.(interface{ GetFullName() string }); ok {
			x.FullName = v.GetFullName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UserInfo) Proto_ShallowClone() (c *UserInfo) {
	if x != nil {
		c = new(UserInfo)
		c.Id = x.Id
		c.Email = x.Email
		c.FullName = x.FullName
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Test) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Test:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Type = v.GetType()
		x.DeviceId = v.GetDeviceId()
		x.Status = v.GetStatus()
		x.Settings = v.GetSettings()
		x.ExpiresOn = v.GetExpiresOn()
		x.Cdate = v.GetCdate()
		x.Edate = v.GetEdate()
		x.CreatedBy = v.GetCreatedBy()
		x.LastUpdatedBy = v.GetLastUpdatedBy()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetStatus() TestStatus }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetSettings() *TestSettings }); ok {
			x.Settings = v.GetSettings()
		}
		if v, ok := v.(interface{ GetExpiresOn() *timestamppb.Timestamp }); ok {
			x.ExpiresOn = v.GetExpiresOn()
		}
		if v, ok := v.(interface{ GetCdate() *timestamppb.Timestamp }); ok {
			x.Cdate = v.GetCdate()
		}
		if v, ok := v.(interface{ GetEdate() *timestamppb.Timestamp }); ok {
			x.Edate = v.GetEdate()
		}
		if v, ok := v.(interface{ GetCreatedBy() *UserInfo }); ok {
			x.CreatedBy = v.GetCreatedBy()
		}
		if v, ok := v.(interface{ GetLastUpdatedBy() *UserInfo }); ok {
			x.LastUpdatedBy = v.GetLastUpdatedBy()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Test) Proto_ShallowClone() (c *Test) {
	if x != nil {
		c = new(Test)
		c.Id = x.Id
		c.Name = x.Name
		c.Type = x.Type
		c.DeviceId = x.DeviceId
		c.Status = x.Status
		c.Settings = x.Settings
		c.ExpiresOn = x.ExpiresOn
		c.Cdate = x.Cdate
		c.Edate = x.Edate
		c.CreatedBy = x.CreatedBy
		c.LastUpdatedBy = x.LastUpdatedBy
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HTTPConfig) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HTTPConfig:
		x.Period = v.GetPeriod()
		x.Expiry = v.GetExpiry()
		x.Method = v.GetMethod()
		x.Headers = v.GetHeaders()
		x.Body = v.GetBody()
		x.IgnoreTlsErrors = v.GetIgnoreTlsErrors()
		x.CssSelectors = v.GetCssSelectors()
	default:
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetMethod() string }); ok {
			x.Method = v.GetMethod()
		}
		if v, ok := v.(interface{ GetHeaders() map[string]string }); ok {
			x.Headers = v.GetHeaders()
		}
		if v, ok := v.(interface{ GetBody() string }); ok {
			x.Body = v.GetBody()
		}
		if v, ok := v.(interface{ GetIgnoreTlsErrors() bool }); ok {
			x.IgnoreTlsErrors = v.GetIgnoreTlsErrors()
		}
		if v, ok := v.(interface{ GetCssSelectors() map[string]string }); ok {
			x.CssSelectors = v.GetCssSelectors()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HTTPConfig) Proto_ShallowClone() (c *HTTPConfig) {
	if x != nil {
		c = new(HTTPConfig)
		c.Period = x.Period
		c.Expiry = x.Expiry
		c.Method = x.Method
		c.Headers = x.Headers
		c.Body = x.Body
		c.IgnoreTlsErrors = x.IgnoreTlsErrors
		c.CssSelectors = x.CssSelectors
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestSettings:
		x.Definition = v.GetDefinition()
		x.AgentIds = v.GetAgentIds()
		x.Period = v.GetPeriod()
		x.Count = v.GetCount()
		x.Expiry = v.GetExpiry()
		x.Limit = v.GetLimit()
		x.Tasks = v.GetTasks()
		x.HealthSettings = v.GetHealthSettings()
		x.MonitoringSettings = v.GetMonitoringSettings()
		x.Ping = v.GetPing()
		x.Trace = v.GetTrace()
		x.Port = v.GetPort()
		x.Protocol = v.GetProtocol()
		x.Family = v.GetFamily()
		x.Servers = v.GetServers()
		x.UseLocalIp = v.GetUseLocalIp()
		x.Reciprocal = v.GetReciprocal()
		x.RollupLevel = v.GetRollupLevel()
		x.Http = v.GetHttp()
	default:
		if v, ok := v.(interface {
			GetDefinition() isTestSettings_Definition
		}); ok {
			x.Definition = v.GetDefinition()
		} else {
			func() {
				if v, ok := v.(interface{ GetHostname() *HostnameTest }); ok {
					var defaultValue *HostnameTest
					if v := v.GetHostname(); v != defaultValue {
						x.Definition = &TestSettings_Hostname{Hostname: v}
						return
					}
				}
				if v, ok := v.(interface{ GetIp() *IpTest }); ok {
					var defaultValue *IpTest
					if v := v.GetIp(); v != defaultValue {
						x.Definition = &TestSettings_Ip{Ip: v}
						return
					}
				}
				if v, ok := v.(interface{ GetAgent() *AgentTest }); ok {
					var defaultValue *AgentTest
					if v := v.GetAgent(); v != defaultValue {
						x.Definition = &TestSettings_Agent{Agent: v}
						return
					}
				}
				if v, ok := v.(interface{ GetFlow() *FlowTest }); ok {
					var defaultValue *FlowTest
					if v := v.GetFlow(); v != defaultValue {
						x.Definition = &TestSettings_Flow{Flow: v}
						return
					}
				}
				if v, ok := v.(interface{ GetSite() *SiteTest }); ok {
					var defaultValue *SiteTest
					if v := v.GetSite(); v != defaultValue {
						x.Definition = &TestSettings_Site{Site: v}
						return
					}
				}
				if v, ok := v.(interface{ GetTag() *TagTest }); ok {
					var defaultValue *TagTest
					if v := v.GetTag(); v != defaultValue {
						x.Definition = &TestSettings_Tag{Tag: v}
						return
					}
				}
				if v, ok := v.(interface{ GetDns() *DnsTest }); ok {
					var defaultValue *DnsTest
					if v := v.GetDns(); v != defaultValue {
						x.Definition = &TestSettings_Dns{Dns: v}
						return
					}
				}
				if v, ok := v.(interface{ GetUrl() *UrlTest }); ok {
					var defaultValue *UrlTest
					if v := v.GetUrl(); v != defaultValue {
						x.Definition = &TestSettings_Url{Url: v}
						return
					}
				}
				if v, ok := v.(interface{ GetNetworkGrid() *GridTest }); ok {
					var defaultValue *GridTest
					if v := v.GetNetworkGrid(); v != defaultValue {
						x.Definition = &TestSettings_NetworkGrid{NetworkGrid: v}
						return
					}
				}
				if v, ok := v.(interface{ GetPageLoad() *UrlTest }); ok {
					var defaultValue *UrlTest
					if v := v.GetPageLoad(); v != defaultValue {
						x.Definition = &TestSettings_PageLoad{PageLoad: v}
						return
					}
				}
				if v, ok := v.(interface{ GetDnsGrid() *DnsGridTest }); ok {
					var defaultValue *DnsGridTest
					if v := v.GetDnsGrid(); v != defaultValue {
						x.Definition = &TestSettings_DnsGrid{DnsGrid: v}
						return
					}
				}
				if v, ok := v.(interface{ GetApplicationMesh() *ApplicationMeshTest }); ok {
					var defaultValue *ApplicationMeshTest
					if v := v.GetApplicationMesh(); v != defaultValue {
						x.Definition = &TestSettings_ApplicationMesh{ApplicationMesh: v}
						return
					}
				}
			}()
		}
		if v, ok := v.(interface{ GetAgentIds() []string }); ok {
			x.AgentIds = v.GetAgentIds()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetCount() uint32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetExpiry() uint32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetLimit() uint32 }); ok {
			x.Limit = v.GetLimit()
		}
		if v, ok := v.(interface{ GetTasks() []string }); ok {
			x.Tasks = v.GetTasks()
		}
		if v, ok := v.(interface{ GetHealthSettings() *HealthSettings }); ok {
			x.HealthSettings = v.GetHealthSettings()
		}
		if v, ok := v.(interface {
			GetMonitoringSettings() *TestMonitoringSettings
		}); ok {
			x.MonitoringSettings = v.GetMonitoringSettings()
		}
		if v, ok := v.(interface{ GetPing() *TestPingSettings }); ok {
			x.Ping = v.GetPing()
		}
		if v, ok := v.(interface{ GetTrace() *TestTraceSettings }); ok {
			x.Trace = v.GetTrace()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
		if v, ok := v.(interface{ GetProtocol() string }); ok {
			x.Protocol = v.GetProtocol()
		}
		if v, ok := v.(interface{ GetFamily() IPFamily }); ok {
			x.Family = v.GetFamily()
		}
		if v, ok := v.(interface{ GetServers() []string }); ok {
			x.Servers = v.GetServers()
		}
		if v, ok := v.(interface{ GetUseLocalIp() bool }); ok {
			x.UseLocalIp = v.GetUseLocalIp()
		}
		if v, ok := v.(interface{ GetReciprocal() bool }); ok {
			x.Reciprocal = v.GetReciprocal()
		}
		if v, ok := v.(interface{ GetRollupLevel() uint32 }); ok {
			x.RollupLevel = v.GetRollupLevel()
		}
		if v, ok := v.(interface{ GetHttp() *HTTPConfig }); ok {
			x.Http = v.GetHttp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestSettings) Proto_ShallowClone() (c *TestSettings) {
	if x != nil {
		c = new(TestSettings)
		c.Definition = x.Definition
		c.AgentIds = x.AgentIds
		c.Period = x.Period
		c.Count = x.Count
		c.Expiry = x.Expiry
		c.Limit = x.Limit
		c.Tasks = x.Tasks
		c.HealthSettings = x.HealthSettings
		c.MonitoringSettings = x.MonitoringSettings
		c.Ping = x.Ping
		c.Trace = x.Trace
		c.Port = x.Port
		c.Protocol = x.Protocol
		c.Family = x.Family
		c.Servers = x.Servers
		c.UseLocalIp = x.UseLocalIp
		c.Reciprocal = x.Reciprocal
		c.RollupLevel = x.RollupLevel
		c.Http = x.Http
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestTraceSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestTraceSettings:
		x.Period = v.GetPeriod()
		x.Count = v.GetCount()
		x.Protocol = v.GetProtocol()
		x.Port = v.GetPort()
		x.Expiry = v.GetExpiry()
		x.Limit = v.GetLimit()
		x.Delay = v.GetDelay()
	default:
		if v, ok := v.(interface{ GetPeriod() float32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetCount() float32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetProtocol() string }); ok {
			x.Protocol = v.GetProtocol()
		}
		if v, ok := v.(interface{ GetPort() float32 }); ok {
			x.Port = v.GetPort()
		}
		if v, ok := v.(interface{ GetExpiry() float32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetLimit() float32 }); ok {
			x.Limit = v.GetLimit()
		}
		if v, ok := v.(interface{ GetDelay() float32 }); ok {
			x.Delay = v.GetDelay()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestTraceSettings) Proto_ShallowClone() (c *TestTraceSettings) {
	if x != nil {
		c = new(TestTraceSettings)
		c.Period = x.Period
		c.Count = x.Count
		c.Protocol = x.Protocol
		c.Port = x.Port
		c.Expiry = x.Expiry
		c.Limit = x.Limit
		c.Delay = x.Delay
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestPingSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestPingSettings:
		x.Period = v.GetPeriod()
		x.Count = v.GetCount()
		x.Expiry = v.GetExpiry()
		x.Delay = v.GetDelay()
	default:
		if v, ok := v.(interface{ GetPeriod() float32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetCount() float32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetExpiry() float32 }); ok {
			x.Expiry = v.GetExpiry()
		}
		if v, ok := v.(interface{ GetDelay() float32 }); ok {
			x.Delay = v.GetDelay()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestPingSettings) Proto_ShallowClone() (c *TestPingSettings) {
	if x != nil {
		c = new(TestPingSettings)
		c.Period = x.Period
		c.Count = x.Count
		c.Expiry = x.Expiry
		c.Delay = x.Delay
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestMonitoringSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestMonitoringSettings:
		x.ActivationGracePeriod = v.GetActivationGracePeriod()
		x.ActivationTimeUnit = v.GetActivationTimeUnit()
		x.ActivationTimeWindow = v.GetActivationTimeWindow()
		x.ActivationTimes = v.GetActivationTimes()
		x.NotificationChannels = v.GetNotificationChannels()
	default:
		if v, ok := v.(interface{ GetActivationGracePeriod() string }); ok {
			x.ActivationGracePeriod = v.GetActivationGracePeriod()
		}
		if v, ok := v.(interface{ GetActivationTimeUnit() string }); ok {
			x.ActivationTimeUnit = v.GetActivationTimeUnit()
		}
		if v, ok := v.(interface{ GetActivationTimeWindow() string }); ok {
			x.ActivationTimeWindow = v.GetActivationTimeWindow()
		}
		if v, ok := v.(interface{ GetActivationTimes() string }); ok {
			x.ActivationTimes = v.GetActivationTimes()
		}
		if v, ok := v.(interface{ GetNotificationChannels() []string }); ok {
			x.NotificationChannels = v.GetNotificationChannels()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestMonitoringSettings) Proto_ShallowClone() (c *TestMonitoringSettings) {
	if x != nil {
		c = new(TestMonitoringSettings)
		c.ActivationGracePeriod = x.ActivationGracePeriod
		c.ActivationTimeUnit = x.ActivationTimeUnit
		c.ActivationTimeWindow = x.ActivationTimeWindow
		c.ActivationTimes = x.ActivationTimes
		c.NotificationChannels = x.NotificationChannels
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HealthSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HealthSettings:
		x.LatencyCritical = v.GetLatencyCritical()
		x.LatencyWarning = v.GetLatencyWarning()
		x.PacketLossCritical = v.GetPacketLossCritical()
		x.PacketLossWarning = v.GetPacketLossWarning()
		x.JitterCritical = v.GetJitterCritical()
		x.JitterWarning = v.GetJitterWarning()
		x.HttpLatencyCritical = v.GetHttpLatencyCritical()
		x.HttpLatencyWarning = v.GetHttpLatencyWarning()
		x.HttpValidCodes = v.GetHttpValidCodes()
		x.DnsValidCodes = v.GetDnsValidCodes()
		x.LatencyCriticalStddev = v.GetLatencyCriticalStddev()
		x.LatencyWarningStddev = v.GetLatencyWarningStddev()
		x.JitterCriticalStddev = v.GetJitterCriticalStddev()
		x.JitterWarningStddev = v.GetJitterWarningStddev()
		x.HttpLatencyCriticalStddev = v.GetHttpLatencyCriticalStddev()
		x.HttpLatencyWarningStddev = v.GetHttpLatencyWarningStddev()
	default:
		if v, ok := v.(interface{ GetLatencyCritical() float32 }); ok {
			x.LatencyCritical = v.GetLatencyCritical()
		}
		if v, ok := v.(interface{ GetLatencyWarning() float32 }); ok {
			x.LatencyWarning = v.GetLatencyWarning()
		}
		if v, ok := v.(interface{ GetPacketLossCritical() float32 }); ok {
			x.PacketLossCritical = v.GetPacketLossCritical()
		}
		if v, ok := v.(interface{ GetPacketLossWarning() float32 }); ok {
			x.PacketLossWarning = v.GetPacketLossWarning()
		}
		if v, ok := v.(interface{ GetJitterCritical() float32 }); ok {
			x.JitterCritical = v.GetJitterCritical()
		}
		if v, ok := v.(interface{ GetJitterWarning() float32 }); ok {
			x.JitterWarning = v.GetJitterWarning()
		}
		if v, ok := v.(interface{ GetHttpLatencyCritical() float32 }); ok {
			x.HttpLatencyCritical = v.GetHttpLatencyCritical()
		}
		if v, ok := v.(interface{ GetHttpLatencyWarning() float32 }); ok {
			x.HttpLatencyWarning = v.GetHttpLatencyWarning()
		}
		if v, ok := v.(interface{ GetHttpValidCodes() []uint32 }); ok {
			x.HttpValidCodes = v.GetHttpValidCodes()
		}
		if v, ok := v.(interface{ GetDnsValidCodes() []uint32 }); ok {
			x.DnsValidCodes = v.GetDnsValidCodes()
		}
		if v, ok := v.(interface{ GetLatencyCriticalStddev() float32 }); ok {
			x.LatencyCriticalStddev = v.GetLatencyCriticalStddev()
		}
		if v, ok := v.(interface{ GetLatencyWarningStddev() float32 }); ok {
			x.LatencyWarningStddev = v.GetLatencyWarningStddev()
		}
		if v, ok := v.(interface{ GetJitterCriticalStddev() float32 }); ok {
			x.JitterCriticalStddev = v.GetJitterCriticalStddev()
		}
		if v, ok := v.(interface{ GetJitterWarningStddev() float32 }); ok {
			x.JitterWarningStddev = v.GetJitterWarningStddev()
		}
		if v, ok := v.(interface{ GetHttpLatencyCriticalStddev() float32 }); ok {
			x.HttpLatencyCriticalStddev = v.GetHttpLatencyCriticalStddev()
		}
		if v, ok := v.(interface{ GetHttpLatencyWarningStddev() float32 }); ok {
			x.HttpLatencyWarningStddev = v.GetHttpLatencyWarningStddev()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HealthSettings) Proto_ShallowClone() (c *HealthSettings) {
	if x != nil {
		c = new(HealthSettings)
		c.LatencyCritical = x.LatencyCritical
		c.LatencyWarning = x.LatencyWarning
		c.PacketLossCritical = x.PacketLossCritical
		c.PacketLossWarning = x.PacketLossWarning
		c.JitterCritical = x.JitterCritical
		c.JitterWarning = x.JitterWarning
		c.HttpLatencyCritical = x.HttpLatencyCritical
		c.HttpLatencyWarning = x.HttpLatencyWarning
		c.HttpValidCodes = x.HttpValidCodes
		c.DnsValidCodes = x.DnsValidCodes
		c.LatencyCriticalStddev = x.LatencyCriticalStddev
		c.LatencyWarningStddev = x.LatencyWarningStddev
		c.JitterCriticalStddev = x.JitterCriticalStddev
		c.JitterWarningStddev = x.JitterWarningStddev
		c.HttpLatencyCriticalStddev = x.HttpLatencyCriticalStddev
		c.HttpLatencyWarningStddev = x.HttpLatencyWarningStddev
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HostnameTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HostnameTest:
		x.Target = v.GetTarget()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HostnameTest) Proto_ShallowClone() (c *HostnameTest) {
	if x != nil {
		c = new(HostnameTest)
		c.Target = x.Target
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *IpTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *IpTest:
		x.Targets = v.GetTargets()
	default:
		if v, ok := v.(interface{ GetTargets() []string }); ok {
			x.Targets = v.GetTargets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *IpTest) Proto_ShallowClone() (c *IpTest) {
	if x != nil {
		c = new(IpTest)
		c.Targets = x.Targets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentTest:
		x.Target = v.GetTarget()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentTest) Proto_ShallowClone() (c *AgentTest) {
	if x != nil {
		c = new(AgentTest)
		c.Target = x.Target
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FlowTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FlowTest:
		x.Target = v.GetTarget()
		x.TargetRefreshIntervalMillis = v.GetTargetRefreshIntervalMillis()
		x.MaxTasks = v.GetMaxTasks()
		x.Type = v.GetType()
		x.InetDirection = v.GetInetDirection()
		x.Direction = v.GetDirection()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTargetRefreshIntervalMillis() uint32 }); ok {
			x.TargetRefreshIntervalMillis = v.GetTargetRefreshIntervalMillis()
		}
		if v, ok := v.(interface{ GetMaxTasks() uint32 }); ok {
			x.MaxTasks = v.GetMaxTasks()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetInetDirection() string }); ok {
			x.InetDirection = v.GetInetDirection()
		}
		if v, ok := v.(interface{ GetDirection() string }); ok {
			x.Direction = v.GetDirection()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FlowTest) Proto_ShallowClone() (c *FlowTest) {
	if x != nil {
		c = new(FlowTest)
		c.Target = x.Target
		c.TargetRefreshIntervalMillis = x.TargetRefreshIntervalMillis
		c.MaxTasks = x.MaxTasks
		c.Type = x.Type
		c.InetDirection = x.InetDirection
		c.Direction = x.Direction
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SiteTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SiteTest:
		x.Target = v.GetTarget()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SiteTest) Proto_ShallowClone() (c *SiteTest) {
	if x != nil {
		c = new(SiteTest)
		c.Target = x.Target
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TagTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TagTest:
		x.Target = v.GetTarget()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TagTest) Proto_ShallowClone() (c *TagTest) {
	if x != nil {
		c = new(TagTest)
		c.Target = x.Target
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DnsTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DnsTest:
		x.Target = v.GetTarget()
		x.Type = v.GetType()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetType() DNSRecord }); ok {
			x.Type = v.GetType()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DnsTest) Proto_ShallowClone() (c *DnsTest) {
	if x != nil {
		c = new(DnsTest)
		c.Target = x.Target
		c.Type = x.Type
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UrlTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UrlTest:
		x.Target = v.GetTarget()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UrlTest) Proto_ShallowClone() (c *UrlTest) {
	if x != nil {
		c = new(UrlTest)
		c.Target = x.Target
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GridTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GridTest:
		x.Targets = v.GetTargets()
	default:
		if v, ok := v.(interface{ GetTargets() []string }); ok {
			x.Targets = v.GetTargets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GridTest) Proto_ShallowClone() (c *GridTest) {
	if x != nil {
		c = new(GridTest)
		c.Targets = x.Targets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DnsGridTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DnsGridTest:
		x.Targets = v.GetTargets()
		x.Type = v.GetType()
	default:
		if v, ok := v.(interface{ GetTargets() []string }); ok {
			x.Targets = v.GetTargets()
		}
		if v, ok := v.(interface{ GetType() DNSRecord }); ok {
			x.Type = v.GetType()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DnsGridTest) Proto_ShallowClone() (c *DnsGridTest) {
	if x != nil {
		c = new(DnsGridTest)
		c.Targets = x.Targets
		c.Type = x.Type
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ApplicationMeshTest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ApplicationMeshTest) Proto_ShallowClone() (c *ApplicationMeshTest) {
	if x != nil {
		c = new(ApplicationMeshTest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MeshResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MeshResponse:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.LocalIp = v.GetLocalIp()
		x.Ip = v.GetIp()
		x.Alias = v.GetAlias()
		x.Columns = v.GetColumns()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetLocalIp() string }); ok {
			x.LocalIp = v.GetLocalIp()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetAlias() string }); ok {
			x.Alias = v.GetAlias()
		}
		if v, ok := v.(interface{ GetColumns() []*MeshColumn }); ok {
			x.Columns = v.GetColumns()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MeshResponse) Proto_ShallowClone() (c *MeshResponse) {
	if x != nil {
		c = new(MeshResponse)
		c.Id = x.Id
		c.Name = x.Name
		c.LocalIp = x.LocalIp
		c.Ip = x.Ip
		c.Alias = x.Alias
		c.Columns = x.Columns
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MeshColumn) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MeshColumn:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Alias = v.GetAlias()
		x.Target = v.GetTarget()
		x.Metrics = v.GetMetrics()
		x.Health = v.GetHealth()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetAlias() string }); ok {
			x.Alias = v.GetAlias()
		}
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetMetrics() *MeshMetrics }); ok {
			x.Metrics = v.GetMetrics()
		}
		if v, ok := v.(interface{ GetHealth() []*MeshMetrics }); ok {
			x.Health = v.GetHealth()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MeshColumn) Proto_ShallowClone() (c *MeshColumn) {
	if x != nil {
		c = new(MeshColumn)
		c.Id = x.Id
		c.Name = x.Name
		c.Alias = x.Alias
		c.Target = x.Target
		c.Metrics = x.Metrics
		c.Health = x.Health
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MeshMetric) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MeshMetric:
		x.Name = v.GetName()
		x.Health = v.GetHealth()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
		if v, ok := v.(interface{ GetValue() int64 }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MeshMetric) Proto_ShallowClone() (c *MeshMetric) {
	if x != nil {
		c = new(MeshMetric)
		c.Name = x.Name
		c.Health = x.Health
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MeshMetrics) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MeshMetrics:
		x.Time = v.GetTime()
		x.Latency = v.GetLatency()
		x.PacketLoss = v.GetPacketLoss()
		x.Jitter = v.GetJitter()
	default:
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
		if v, ok := v.(interface{ GetLatency() *MeshMetric }); ok {
			x.Latency = v.GetLatency()
		}
		if v, ok := v.(interface{ GetPacketLoss() *MeshMetric }); ok {
			x.PacketLoss = v.GetPacketLoss()
		}
		if v, ok := v.(interface{ GetJitter() *MeshMetric }); ok {
			x.Jitter = v.GetJitter()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MeshMetrics) Proto_ShallowClone() (c *MeshMetrics) {
	if x != nil {
		c = new(MeshMetrics)
		c.Time = x.Time
		c.Latency = x.Latency
		c.PacketLoss = x.PacketLoss
		c.Jitter = x.Jitter
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ASN) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ASN:
		x.Id = v.GetId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetId() uint32 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ASN) Proto_ShallowClone() (c *ASN) {
	if x != nil {
		c = new(ASN)
		c.Id = x.Id
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Country) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Country:
		x.Code = v.GetCode()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetCode() string }); ok {
			x.Code = v.GetCode()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Country) Proto_ShallowClone() (c *Country) {
	if x != nil {
		c = new(Country)
		c.Code = x.Code
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Region) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Region:
		x.Id = v.GetId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetId() int64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Region) Proto_ShallowClone() (c *Region) {
	if x != nil {
		c = new(Region)
		c.Id = x.Id
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *City) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *City:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Latitude = v.GetLatitude()
		x.Longitude = v.GetLongitude()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetLatitude() float64 }); ok {
			x.Latitude = v.GetLatitude()
		}
		if v, ok := v.(interface{ GetLongitude() float64 }); ok {
			x.Longitude = v.GetLongitude()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *City) Proto_ShallowClone() (c *City) {
	if x != nil {
		c = new(City)
		c.Id = x.Id
		c.Name = x.Name
		c.Latitude = x.Latitude
		c.Longitude = x.Longitude
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Geo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Geo:
		x.Country = v.GetCountry()
		x.Region = v.GetRegion()
		x.City = v.GetCity()
	default:
		if v, ok := v.(interface{ GetCountry() *Country }); ok {
			x.Country = v.GetCountry()
		}
		if v, ok := v.(interface{ GetRegion() *Region }); ok {
			x.Region = v.GetRegion()
		}
		if v, ok := v.(interface{ GetCity() *City }); ok {
			x.City = v.GetCity()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Geo) Proto_ShallowClone() (c *Geo) {
	if x != nil {
		c = new(Geo)
		c.Country = x.Country
		c.Region = x.Region
		c.City = x.City
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DNS) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DNS:
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DNS) Proto_ShallowClone() (c *DNS) {
	if x != nil {
		c = new(DNS)
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *IPInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *IPInfo:
		x.Ip = v.GetIp()
		x.Asn = v.GetAsn()
		x.Geo = v.GetGeo()
		x.Dns = v.GetDns()
		x.DeviceId = v.GetDeviceId()
		x.SiteId = v.GetSiteId()
		x.Egress = v.GetEgress()
	default:
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetAsn() *ASN }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetGeo() *Geo }); ok {
			x.Geo = v.GetGeo()
		}
		if v, ok := v.(interface{ GetDns() *DNS }); ok {
			x.Dns = v.GetDns()
		}
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetSiteId() string }); ok {
			x.SiteId = v.GetSiteId()
		}
		if v, ok := v.(interface{ GetEgress() string }); ok {
			x.Egress = v.GetEgress()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *IPInfo) Proto_ShallowClone() (c *IPInfo) {
	if x != nil {
		c = new(IPInfo)
		c.Ip = x.Ip
		c.Asn = x.Asn
		c.Geo = x.Geo
		c.Dns = x.Dns
		c.DeviceId = x.DeviceId
		c.SiteId = x.SiteId
		c.Egress = x.Egress
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *IDByIP) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *IDByIP:
		x.Id = v.GetId()
		x.Ip = v.GetIp()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *IDByIP) Proto_ShallowClone() (c *IDByIP) {
	if x != nil {
		c = new(IDByIP)
		c.Id = x.Id
		c.Ip = x.Ip
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TracerouteLookup) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TracerouteLookup:
		x.AgentIdByIp = v.GetAgentIdByIp()
		x.Agents = v.GetAgents()
		x.Asns = v.GetAsns()
		x.DeviceIdByIp = v.GetDeviceIdByIp()
		x.SiteIdByIp = v.GetSiteIdByIp()
		x.Ips = v.GetIps()
	default:
		if v, ok := v.(interface{ GetAgentIdByIp() []*IDByIP }); ok {
			x.AgentIdByIp = v.GetAgentIdByIp()
		}
		if v, ok := v.(interface{ GetAgents() []*Agent }); ok {
			x.Agents = v.GetAgents()
		}
		if v, ok := v.(interface{ GetAsns() []*ASN }); ok {
			x.Asns = v.GetAsns()
		}
		if v, ok := v.(interface{ GetDeviceIdByIp() []*IDByIP }); ok {
			x.DeviceIdByIp = v.GetDeviceIdByIp()
		}
		if v, ok := v.(interface{ GetSiteIdByIp() []*IDByIP }); ok {
			x.SiteIdByIp = v.GetSiteIdByIp()
		}
		if v, ok := v.(interface{ GetIps() []*IPInfo }); ok {
			x.Ips = v.GetIps()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TracerouteLookup) Proto_ShallowClone() (c *TracerouteLookup) {
	if x != nil {
		c = new(TracerouteLookup)
		c.AgentIdByIp = x.AgentIdByIp
		c.Agents = x.Agents
		c.Asns = x.Asns
		c.DeviceIdByIp = x.DeviceIdByIp
		c.SiteIdByIp = x.SiteIdByIp
		c.Ips = x.Ips
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TraceHop) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TraceHop:
		x.Ttl = v.GetTtl()
		x.Ip = v.GetIp()
		x.Timeout = v.GetTimeout()
		x.Latency = v.GetLatency()
		x.MinExpectedLatency = v.GetMinExpectedLatency()
		x.Asn = v.GetAsn()
		x.Site = v.GetSite()
		x.Region = v.GetRegion()
		x.Target = v.GetTarget()
		x.TraceEnd = v.GetTraceEnd()
	default:
		if v, ok := v.(interface{ GetTtl() rune }); ok {
			x.Ttl = v.GetTtl()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetTimeout() bool }); ok {
			x.Timeout = v.GetTimeout()
		}
		if v, ok := v.(interface{ GetLatency() rune }); ok {
			x.Latency = v.GetLatency()
		}
		if v, ok := v.(interface{ GetMinExpectedLatency() rune }); ok {
			x.MinExpectedLatency = v.GetMinExpectedLatency()
		}
		if v, ok := v.(interface{ GetAsn() rune }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetSite() rune }); ok {
			x.Site = v.GetSite()
		}
		if v, ok := v.(interface{ GetRegion() rune }); ok {
			x.Region = v.GetRegion()
		}
		if v, ok := v.(interface{ GetTarget() bool }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTraceEnd() bool }); ok {
			x.TraceEnd = v.GetTraceEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TraceHop) Proto_ShallowClone() (c *TraceHop) {
	if x != nil {
		c = new(TraceHop)
		c.Ttl = x.Ttl
		c.Ip = x.Ip
		c.Timeout = x.Timeout
		c.Latency = x.Latency
		c.MinExpectedLatency = x.MinExpectedLatency
		c.Asn = x.Asn
		c.Site = x.Site
		c.Region = x.Region
		c.Target = x.Target
		c.TraceEnd = x.TraceEnd
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TraceProbe) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TraceProbe:
		x.AsPath = v.GetAsPath()
		x.Completed = v.GetCompleted()
		x.HopCount = v.GetHopCount()
		x.RegionPath = v.GetRegionPath()
		x.SitePath = v.GetSitePath()
		x.Hops = v.GetHops()
	default:
		if v, ok := v.(interface{ GetAsPath() []rune }); ok {
			x.AsPath = v.GetAsPath()
		}
		if v, ok := v.(interface{ GetCompleted() bool }); ok {
			x.Completed = v.GetCompleted()
		}
		if v, ok := v.(interface{ GetHopCount() rune }); ok {
			x.HopCount = v.GetHopCount()
		}
		if v, ok := v.(interface{ GetRegionPath() []string }); ok {
			x.RegionPath = v.GetRegionPath()
		}
		if v, ok := v.(interface{ GetSitePath() []rune }); ok {
			x.SitePath = v.GetSitePath()
		}
		if v, ok := v.(interface{ GetHops() []*TraceHop }); ok {
			x.Hops = v.GetHops()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TraceProbe) Proto_ShallowClone() (c *TraceProbe) {
	if x != nil {
		c = new(TraceProbe)
		c.AsPath = x.AsPath
		c.Completed = x.Completed
		c.HopCount = x.HopCount
		c.RegionPath = x.RegionPath
		c.SitePath = x.SitePath
		c.Hops = x.Hops
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Trace) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Trace:
		x.AgentId = v.GetAgentId()
		x.AgentIp = v.GetAgentIp()
		x.TargetIp = v.GetTargetIp()
		x.HopCount = v.GetHopCount()
		x.Probes = v.GetProbes()
	default:
		if v, ok := v.(interface{ GetAgentId() string }); ok {
			x.AgentId = v.GetAgentId()
		}
		if v, ok := v.(interface{ GetAgentIp() string }); ok {
			x.AgentIp = v.GetAgentIp()
		}
		if v, ok := v.(interface{ GetTargetIp() string }); ok {
			x.TargetIp = v.GetTargetIp()
		}
		if v, ok := v.(interface{ GetHopCount() rune }); ok {
			x.HopCount = v.GetHopCount()
		}
		if v, ok := v.(interface{ GetProbes() []*TraceProbe }); ok {
			x.Probes = v.GetProbes()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Trace) Proto_ShallowClone() (c *Trace) {
	if x != nil {
		c = new(Trace)
		c.AgentId = x.AgentId
		c.AgentIp = x.AgentIp
		c.TargetIp = x.TargetIp
		c.HopCount = x.HopCount
		c.Probes = x.Probes
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Stats) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Stats:
		x.Average = v.GetAverage()
		x.Max = v.GetMax()
		x.Total = v.GetTotal()
	default:
		if v, ok := v.(interface{ GetAverage() rune }); ok {
			x.Average = v.GetAverage()
		}
		if v, ok := v.(interface{ GetMax() rune }); ok {
			x.Max = v.GetMax()
		}
		if v, ok := v.(interface{ GetTotal() rune }); ok {
			x.Total = v.GetTotal()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Stats) Proto_ShallowClone() (c *Stats) {
	if x != nil {
		c = new(Stats)
		c.Average = x.Average
		c.Max = x.Max
		c.Total = x.Total
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TracerouteResult) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TracerouteResult:
		x.Time = v.GetTime()
		x.Traces = v.GetTraces()
		x.HopCount = v.GetHopCount()
		x.Count = v.GetCount()
		x.Distance = v.GetDistance()
	default:
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
		if v, ok := v.(interface{ GetTraces() []*Trace }); ok {
			x.Traces = v.GetTraces()
		}
		if v, ok := v.(interface{ GetHopCount() rune }); ok {
			x.HopCount = v.GetHopCount()
		}
		if v, ok := v.(interface{ GetCount() *Stats }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetDistance() *Stats }); ok {
			x.Distance = v.GetDistance()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TracerouteResult) Proto_ShallowClone() (c *TracerouteResult) {
	if x != nil {
		c = new(TracerouteResult)
		c.Time = x.Time
		c.Traces = x.Traces
		c.HopCount = x.HopCount
		c.Count = x.Count
		c.Distance = x.Distance
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TracerouteInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TracerouteInfo:
		x.IsTraceRoutesTruncated = v.GetIsTraceRoutesTruncated()
		x.MaxAsnPathCount = v.GetMaxAsnPathCount()
		x.MaxSitePathCount = v.GetMaxSitePathCount()
		x.MaxRegionPathCount = v.GetMaxRegionPathCount()
	default:
		if v, ok := v.(interface{ GetIsTraceRoutesTruncated() bool }); ok {
			x.IsTraceRoutesTruncated = v.GetIsTraceRoutesTruncated()
		}
		if v, ok := v.(interface{ GetMaxAsnPathCount() rune }); ok {
			x.MaxAsnPathCount = v.GetMaxAsnPathCount()
		}
		if v, ok := v.(interface{ GetMaxSitePathCount() rune }); ok {
			x.MaxSitePathCount = v.GetMaxSitePathCount()
		}
		if v, ok := v.(interface{ GetMaxRegionPathCount() rune }); ok {
			x.MaxRegionPathCount = v.GetMaxRegionPathCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TracerouteInfo) Proto_ShallowClone() (c *TracerouteInfo) {
	if x != nil {
		c = new(TracerouteInfo)
		c.IsTraceRoutesTruncated = x.IsTraceRoutesTruncated
		c.MaxAsnPathCount = x.MaxAsnPathCount
		c.MaxSitePathCount = x.MaxSitePathCount
		c.MaxRegionPathCount = x.MaxRegionPathCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetHealthForTestsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetHealthForTestsRequest:
		x.Ids = v.GetIds()
		x.StartTime = v.GetStartTime()
		x.EndTime = v.GetEndTime()
		x.AgentIds = v.GetAgentIds()
		x.TaskIds = v.GetTaskIds()
		x.Augment = v.GetAugment()
	default:
		if v, ok := v.(interface{ GetIds() []string }); ok {
			x.Ids = v.GetIds()
		}
		if v, ok := v.(interface{ GetStartTime() *timestamppb.Timestamp }); ok {
			x.StartTime = v.GetStartTime()
		}
		if v, ok := v.(interface{ GetEndTime() *timestamppb.Timestamp }); ok {
			x.EndTime = v.GetEndTime()
		}
		if v, ok := v.(interface{ GetAgentIds() []string }); ok {
			x.AgentIds = v.GetAgentIds()
		}
		if v, ok := v.(interface{ GetTaskIds() []string }); ok {
			x.TaskIds = v.GetTaskIds()
		}
		if v, ok := v.(interface{ GetAugment() bool }); ok {
			x.Augment = v.GetAugment()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetHealthForTestsRequest) Proto_ShallowClone() (c *GetHealthForTestsRequest) {
	if x != nil {
		c = new(GetHealthForTestsRequest)
		c.Ids = x.Ids
		c.StartTime = x.StartTime
		c.EndTime = x.EndTime
		c.AgentIds = x.AgentIds
		c.TaskIds = x.TaskIds
		c.Augment = x.Augment
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetHealthForTestsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetHealthForTestsResponse:
		x.Health = v.GetHealth()
	default:
		if v, ok := v.(interface{ GetHealth() []*TestHealth }); ok {
			x.Health = v.GetHealth()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetHealthForTestsResponse) Proto_ShallowClone() (c *GetHealthForTestsResponse) {
	if x != nil {
		c = new(GetHealthForTestsResponse)
		c.Health = x.Health
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTraceForTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTraceForTestRequest:
		x.Id = v.GetId()
		x.StartTime = v.GetStartTime()
		x.EndTime = v.GetEndTime()
		x.AgentIds = v.GetAgentIds()
		x.TargetIps = v.GetTargetIps()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetStartTime() *timestamppb.Timestamp }); ok {
			x.StartTime = v.GetStartTime()
		}
		if v, ok := v.(interface{ GetEndTime() *timestamppb.Timestamp }); ok {
			x.EndTime = v.GetEndTime()
		}
		if v, ok := v.(interface{ GetAgentIds() []string }); ok {
			x.AgentIds = v.GetAgentIds()
		}
		if v, ok := v.(interface{ GetTargetIps() []string }); ok {
			x.TargetIps = v.GetTargetIps()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTraceForTestRequest) Proto_ShallowClone() (c *GetTraceForTestRequest) {
	if x != nil {
		c = new(GetTraceForTestRequest)
		c.Id = x.Id
		c.StartTime = x.StartTime
		c.EndTime = x.EndTime
		c.AgentIds = x.AgentIds
		c.TargetIps = x.TargetIps
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTraceForTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTraceForTestResponse:
		x.Lookups = v.GetLookups()
		x.TraceRoutes = v.GetTraceRoutes()
		x.TraceRoutesInfo = v.GetTraceRoutesInfo()
	default:
		if v, ok := v.(interface{ GetLookups() *TracerouteLookup }); ok {
			x.Lookups = v.GetLookups()
		}
		if v, ok := v.(interface{ GetTraceRoutes() []*TracerouteResult }); ok {
			x.TraceRoutes = v.GetTraceRoutes()
		}
		if v, ok := v.(interface{ GetTraceRoutesInfo() *TracerouteInfo }); ok {
			x.TraceRoutesInfo = v.GetTraceRoutesInfo()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTraceForTestResponse) Proto_ShallowClone() (c *GetTraceForTestResponse) {
	if x != nil {
		c = new(GetTraceForTestResponse)
		c.Lookups = x.Lookups
		c.TraceRoutes = x.TraceRoutes
		c.TraceRoutesInfo = x.TraceRoutesInfo
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListAgentsRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListAgentsRequest) Proto_ShallowClone() (c *ListAgentsRequest) {
	if x != nil {
		c = new(ListAgentsRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListAgentsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListAgentsResponse:
		x.Agents = v.GetAgents()
		x.InvalidAgentsCount = v.GetInvalidAgentsCount()
	default:
		if v, ok := v.(interface{ GetAgents() []*Agent }); ok {
			x.Agents = v.GetAgents()
		}
		if v, ok := v.(interface{ GetInvalidAgentsCount() uint32 }); ok {
			x.InvalidAgentsCount = v.GetInvalidAgentsCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListAgentsResponse) Proto_ShallowClone() (c *ListAgentsResponse) {
	if x != nil {
		c = new(ListAgentsResponse)
		c.Agents = x.Agents
		c.InvalidAgentsCount = x.InvalidAgentsCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetAgentRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetAgentRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetAgentRequest) Proto_ShallowClone() (c *GetAgentRequest) {
	if x != nil {
		c = new(GetAgentRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetAgentResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetAgentResponse:
		x.Agent = v.GetAgent()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetAgentResponse) Proto_ShallowClone() (c *GetAgentResponse) {
	if x != nil {
		c = new(GetAgentResponse)
		c.Agent = x.Agent
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchAgentRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchAgentRequest:
		x.Agent = v.GetAgent()
		x.Mask = v.GetMask()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
		if v, ok := v.(interface{ GetMask() *fieldmaskpb.FieldMask }); ok {
			x.Mask = v.GetMask()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchAgentRequest) Proto_ShallowClone() (c *PatchAgentRequest) {
	if x != nil {
		c = new(PatchAgentRequest)
		c.Agent = x.Agent
		c.Mask = x.Mask
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchAgentResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchAgentResponse:
		x.Agent = v.GetAgent()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchAgentResponse) Proto_ShallowClone() (c *PatchAgentResponse) {
	if x != nil {
		c = new(PatchAgentResponse)
		c.Agent = x.Agent
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteAgentRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteAgentRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteAgentRequest) Proto_ShallowClone() (c *DeleteAgentRequest) {
	if x != nil {
		c = new(DeleteAgentRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteAgentResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteAgentResponse) Proto_ShallowClone() (c *DeleteAgentResponse) {
	if x != nil {
		c = new(DeleteAgentResponse)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListTestsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListTestsRequest:
		x.Preset = v.GetPreset()
	default:
		if v, ok := v.(interface{ GetPreset() bool }); ok {
			x.Preset = v.GetPreset()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListTestsRequest) Proto_ShallowClone() (c *ListTestsRequest) {
	if x != nil {
		c = new(ListTestsRequest)
		c.Preset = x.Preset
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListTestsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListTestsResponse:
		x.Tests = v.GetTests()
		x.InvalidTestsCount = v.GetInvalidTestsCount()
	default:
		if v, ok := v.(interface{ GetTests() []*Test }); ok {
			x.Tests = v.GetTests()
		}
		if v, ok := v.(interface{ GetInvalidTestsCount() uint32 }); ok {
			x.InvalidTestsCount = v.GetInvalidTestsCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListTestsResponse) Proto_ShallowClone() (c *ListTestsResponse) {
	if x != nil {
		c = new(ListTestsResponse)
		c.Tests = x.Tests
		c.InvalidTestsCount = x.InvalidTestsCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateTestRequest:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateTestRequest) Proto_ShallowClone() (c *CreateTestRequest) {
	if x != nil {
		c = new(CreateTestRequest)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateTestResponse:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateTestResponse) Proto_ShallowClone() (c *CreateTestResponse) {
	if x != nil {
		c = new(CreateTestResponse)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTestRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTestRequest) Proto_ShallowClone() (c *GetTestRequest) {
	if x != nil {
		c = new(GetTestRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTestResponse:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTestResponse) Proto_ShallowClone() (c *GetTestResponse) {
	if x != nil {
		c = new(GetTestResponse)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SetTestStatusRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SetTestStatusRequest:
		x.Id = v.GetId()
		x.Status = v.GetStatus()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetStatus() TestStatus }); ok {
			x.Status = v.GetStatus()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SetTestStatusRequest) Proto_ShallowClone() (c *SetTestStatusRequest) {
	if x != nil {
		c = new(SetTestStatusRequest)
		c.Id = x.Id
		c.Status = x.Status
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SetTestStatusResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SetTestStatusResponse) Proto_ShallowClone() (c *SetTestStatusResponse) {
	if x != nil {
		c = new(SetTestStatusResponse)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchTestRequest:
		x.Test = v.GetTest()
		x.Mask = v.GetMask()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
		if v, ok := v.(interface{ GetMask() *fieldmaskpb.FieldMask }); ok {
			x.Mask = v.GetMask()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchTestRequest) Proto_ShallowClone() (c *PatchTestRequest) {
	if x != nil {
		c = new(PatchTestRequest)
		c.Test = x.Test
		c.Mask = x.Mask
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchTestResponse:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchTestResponse) Proto_ShallowClone() (c *PatchTestResponse) {
	if x != nil {
		c = new(PatchTestResponse)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteTestRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteTestRequest) Proto_ShallowClone() (c *DeleteTestRequest) {
	if x != nil {
		c = new(DeleteTestRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteTestResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteTestResponse) Proto_ShallowClone() (c *DeleteTestResponse) {
	if x != nil {
		c = new(DeleteTestResponse)
	}
	return
}
