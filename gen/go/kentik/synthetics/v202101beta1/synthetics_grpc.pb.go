// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package synthetics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyntheticsDataServiceClient is the client API for SyntheticsDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyntheticsDataServiceClient interface {
	// Get health data for a set of tests
	GetHealthForTests(ctx context.Context, in *GetHealthForTestsRequest, opts ...grpc.CallOption) (*GetHealthForTestsResponse, error)
	GetTraceForTest(ctx context.Context, in *GetTraceForTestRequest, opts ...grpc.CallOption) (*GetTraceForTestResponse, error)
}

type syntheticsDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyntheticsDataServiceClient(cc grpc.ClientConnInterface) SyntheticsDataServiceClient {
	return &syntheticsDataServiceClient{cc}
}

func (c *syntheticsDataServiceClient) GetHealthForTests(ctx context.Context, in *GetHealthForTestsRequest, opts ...grpc.CallOption) (*GetHealthForTestsResponse, error) {
	out := new(GetHealthForTestsResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsDataService/GetHealthForTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsDataServiceClient) GetTraceForTest(ctx context.Context, in *GetTraceForTestRequest, opts ...grpc.CallOption) (*GetTraceForTestResponse, error) {
	out := new(GetTraceForTestResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsDataService/GetTraceForTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyntheticsDataServiceServer is the server API for SyntheticsDataService service.
// All implementations should embed UnimplementedSyntheticsDataServiceServer
// for forward compatibility
type SyntheticsDataServiceServer interface {
	// Get health data for a set of tests
	GetHealthForTests(context.Context, *GetHealthForTestsRequest) (*GetHealthForTestsResponse, error)
	GetTraceForTest(context.Context, *GetTraceForTestRequest) (*GetTraceForTestResponse, error)
}

// UnimplementedSyntheticsDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSyntheticsDataServiceServer struct {
}

func (UnimplementedSyntheticsDataServiceServer) GetHealthForTests(context.Context, *GetHealthForTestsRequest) (*GetHealthForTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthForTests not implemented")
}
func (UnimplementedSyntheticsDataServiceServer) GetTraceForTest(context.Context, *GetTraceForTestRequest) (*GetTraceForTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraceForTest not implemented")
}

// UnsafeSyntheticsDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyntheticsDataServiceServer will
// result in compilation errors.
type UnsafeSyntheticsDataServiceServer interface {
	mustEmbedUnimplementedSyntheticsDataServiceServer()
}

func RegisterSyntheticsDataServiceServer(s grpc.ServiceRegistrar, srv SyntheticsDataServiceServer) {
	s.RegisterService(&SyntheticsDataService_ServiceDesc, srv)
}

func _SyntheticsDataService_GetHealthForTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthForTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsDataServiceServer).GetHealthForTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsDataService/GetHealthForTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsDataServiceServer).GetHealthForTests(ctx, req.(*GetHealthForTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsDataService_GetTraceForTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceForTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsDataServiceServer).GetTraceForTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsDataService/GetTraceForTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsDataServiceServer).GetTraceForTest(ctx, req.(*GetTraceForTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyntheticsDataService_ServiceDesc is the grpc.ServiceDesc for SyntheticsDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyntheticsDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.synthetics.v202101beta1.SyntheticsDataService",
	HandlerType: (*SyntheticsDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealthForTests",
			Handler:    _SyntheticsDataService_GetHealthForTests_Handler,
		},
		{
			MethodName: "GetTraceForTest",
			Handler:    _SyntheticsDataService_GetTraceForTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/synthetics/v202101beta1/synthetics.proto",
}

// SyntheticsAdminServiceClient is the client API for SyntheticsAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyntheticsAdminServiceClient interface {
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	PatchAgent(ctx context.Context, in *PatchAgentRequest, opts ...grpc.CallOption) (*PatchAgentResponse, error)
	DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error)
	ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error)
	CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error)
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error)
	SetTestStatus(ctx context.Context, in *SetTestStatusRequest, opts ...grpc.CallOption) (*SetTestStatusResponse, error)
	PatchTest(ctx context.Context, in *PatchTestRequest, opts ...grpc.CallOption) (*PatchTestResponse, error)
	DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*DeleteTestResponse, error)
}

type syntheticsAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyntheticsAdminServiceClient(cc grpc.ClientConnInterface) SyntheticsAdminServiceClient {
	return &syntheticsAdminServiceClient{cc}
}

func (c *syntheticsAdminServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) PatchAgent(ctx context.Context, in *PatchAgentRequest, opts ...grpc.CallOption) (*PatchAgentResponse, error) {
	out := new(PatchAgentResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/PatchAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error) {
	out := new(DeleteAgentResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error) {
	out := new(ListTestsResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/ListTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error) {
	out := new(CreateTestResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/CreateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error) {
	out := new(GetTestResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/GetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) SetTestStatus(ctx context.Context, in *SetTestStatusRequest, opts ...grpc.CallOption) (*SetTestStatusResponse, error) {
	out := new(SetTestStatusResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/SetTestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) PatchTest(ctx context.Context, in *PatchTestRequest, opts ...grpc.CallOption) (*PatchTestResponse, error) {
	out := new(PatchTestResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/PatchTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*DeleteTestResponse, error) {
	out := new(DeleteTestResponse)
	err := c.cc.Invoke(ctx, "/kentik.synthetics.v202101beta1.SyntheticsAdminService/DeleteTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyntheticsAdminServiceServer is the server API for SyntheticsAdminService service.
// All implementations should embed UnimplementedSyntheticsAdminServiceServer
// for forward compatibility
type SyntheticsAdminServiceServer interface {
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	PatchAgent(context.Context, *PatchAgentRequest) (*PatchAgentResponse, error)
	DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error)
	ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error)
	CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error)
	GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error)
	SetTestStatus(context.Context, *SetTestStatusRequest) (*SetTestStatusResponse, error)
	PatchTest(context.Context, *PatchTestRequest) (*PatchTestResponse, error)
	DeleteTest(context.Context, *DeleteTestRequest) (*DeleteTestResponse, error)
}

// UnimplementedSyntheticsAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSyntheticsAdminServiceServer struct {
}

func (UnimplementedSyntheticsAdminServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) PatchAgent(context.Context, *PatchAgentRequest) (*PatchAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAgent not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) SetTestStatus(context.Context, *SetTestStatusRequest) (*SetTestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTestStatus not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) PatchTest(context.Context, *PatchTestRequest) (*PatchTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) DeleteTest(context.Context, *DeleteTestRequest) (*DeleteTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTest not implemented")
}

// UnsafeSyntheticsAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyntheticsAdminServiceServer will
// result in compilation errors.
type UnsafeSyntheticsAdminServiceServer interface {
	mustEmbedUnimplementedSyntheticsAdminServiceServer()
}

func RegisterSyntheticsAdminServiceServer(s grpc.ServiceRegistrar, srv SyntheticsAdminServiceServer) {
	s.RegisterService(&SyntheticsAdminService_ServiceDesc, srv)
}

func _SyntheticsAdminService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_PatchAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).PatchAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/PatchAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).PatchAgent(ctx, req.(*PatchAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).DeleteAgent(ctx, req.(*DeleteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/ListTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).ListTests(ctx, req.(*ListTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/CreateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).CreateTest(ctx, req.(*CreateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_SetTestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).SetTestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/SetTestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).SetTestStatus(ctx, req.(*SetTestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_PatchTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).PatchTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/PatchTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).PatchTest(ctx, req.(*PatchTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.synthetics.v202101beta1.SyntheticsAdminService/DeleteTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).DeleteTest(ctx, req.(*DeleteTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyntheticsAdminService_ServiceDesc is the grpc.ServiceDesc for SyntheticsAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyntheticsAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.synthetics.v202101beta1.SyntheticsAdminService",
	HandlerType: (*SyntheticsAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _SyntheticsAdminService_ListAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _SyntheticsAdminService_GetAgent_Handler,
		},
		{
			MethodName: "PatchAgent",
			Handler:    _SyntheticsAdminService_PatchAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _SyntheticsAdminService_DeleteAgent_Handler,
		},
		{
			MethodName: "ListTests",
			Handler:    _SyntheticsAdminService_ListTests_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _SyntheticsAdminService_CreateTest_Handler,
		},
		{
			MethodName: "GetTest",
			Handler:    _SyntheticsAdminService_GetTest_Handler,
		},
		{
			MethodName: "SetTestStatus",
			Handler:    _SyntheticsAdminService_SetTestStatus_Handler,
		},
		{
			MethodName: "PatchTest",
			Handler:    _SyntheticsAdminService_PatchTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _SyntheticsAdminService_DeleteTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/synthetics/v202101beta1/synthetics.proto",
}
