// Synthetics data and admin APIs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: kentik/synthetics/v202101beta1/synthetics.proto

package synthetics

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IPFamily int32

const (
	IPFamily_IP_FAMILY_UNSPECIFIED IPFamily = 0 // Invalid value.
	IPFamily_IP_FAMILY_V4          IPFamily = 1
	IPFamily_IP_FAMILY_V6          IPFamily = 2
	IPFamily_IP_FAMILY_DUAL        IPFamily = 3
)

// Enum value maps for IPFamily.
var (
	IPFamily_name = map[int32]string{
		0: "IP_FAMILY_UNSPECIFIED",
		1: "IP_FAMILY_V4",
		2: "IP_FAMILY_V6",
		3: "IP_FAMILY_DUAL",
	}
	IPFamily_value = map[string]int32{
		"IP_FAMILY_UNSPECIFIED": 0,
		"IP_FAMILY_V4":          1,
		"IP_FAMILY_V6":          2,
		"IP_FAMILY_DUAL":        3,
	}
)

func (x IPFamily) Enum() *IPFamily {
	p := new(IPFamily)
	*p = x
	return p
}

func (x IPFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[0].Descriptor()
}

func (IPFamily) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[0]
}

func (x IPFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPFamily.Descriptor instead.
func (IPFamily) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{0}
}

type TestStatus int32

const (
	TestStatus_TEST_STATUS_UNSPECIFIED TestStatus = 0 // Invalid value.
	TestStatus_TEST_STATUS_ACTIVE      TestStatus = 1 // Test is active.
	TestStatus_TEST_STATUS_PAUSED      TestStatus = 2 // Test is paused.
	TestStatus_TEST_STATUS_DELETED     TestStatus = 3 // Test is deleted. Not settable via SetTestStatus.
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "TEST_STATUS_ACTIVE",
		2: "TEST_STATUS_PAUSED",
		3: "TEST_STATUS_DELETED",
	}
	TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"TEST_STATUS_ACTIVE":      1,
		"TEST_STATUS_PAUSED":      2,
		"TEST_STATUS_DELETED":     3,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[1].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[1]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{1}
}

type AgentStatus int32

const (
	AgentStatus_AGENT_STATUS_UNSPECIFIED AgentStatus = 0 // Invalid value.
	AgentStatus_AGENT_STATUS_OK          AgentStatus = 1
	AgentStatus_AGENT_STATUS_WAIT        AgentStatus = 2
	AgentStatus_AGENT_STATUS_DELETED     AgentStatus = 3
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0: "AGENT_STATUS_UNSPECIFIED",
		1: "AGENT_STATUS_OK",
		2: "AGENT_STATUS_WAIT",
		3: "AGENT_STATUS_DELETED",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNSPECIFIED": 0,
		"AGENT_STATUS_OK":          1,
		"AGENT_STATUS_WAIT":        2,
		"AGENT_STATUS_DELETED":     3,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[2].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[2]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{2}
}

type TaskState int32

const (
	TaskState_TASK_STATE_UNSPECIFIED TaskState = 0 // Invalid value.
	TaskState_TASK_STATE_CREATED     TaskState = 1
	TaskState_TASK_STATE_UPDATED     TaskState = 2
	TaskState_TASK_STATE_DELETED     TaskState = 3
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TASK_STATE_UNSPECIFIED",
		1: "TASK_STATE_CREATED",
		2: "TASK_STATE_UPDATED",
		3: "TASK_STATE_DELETED",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED": 0,
		"TASK_STATE_CREATED":     1,
		"TASK_STATE_UPDATED":     2,
		"TASK_STATE_DELETED":     3,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[3].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[3]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{3}
}

type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health string                 `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"`
	Time   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{0}
}

func (x *Health) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Health) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TestHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId        string        `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Tasks         []*TaskHealth `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	OverallHealth *Health       `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	HealthTs      []*Health     `protobuf:"bytes,4,rep,name=health_ts,json=healthTs,proto3" json:"health_ts,omitempty"`
}

func (x *TestHealth) Reset() {
	*x = TestHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestHealth) ProtoMessage() {}

func (x *TestHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestHealth.ProtoReflect.Descriptor instead.
func (*TestHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{1}
}

func (x *TestHealth) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestHealth) GetTasks() []*TaskHealth {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TestHealth) GetHealthTs() []*Health {
	if x != nil {
		return x.HealthTs
	}
	return nil
}

type TaskHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task          *Task          `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Agents        []*AgentHealth `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	OverallHealth *Health        `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
}

func (x *TaskHealth) Reset() {
	*x = TaskHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHealth) ProtoMessage() {}

func (x *TaskHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHealth.ProtoReflect.Descriptor instead.
func (*TaskHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{2}
}

func (x *TaskHealth) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskHealth) GetAgents() []*AgentHealth {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *TaskHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type AgentHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent         *Agent          `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Health        []*HealthMoment `protobuf:"bytes,2,rep,name=health,proto3" json:"health,omitempty"`
	OverallHealth *Health         `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
}

func (x *AgentHealth) Reset() {
	*x = AgentHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealth) ProtoMessage() {}

func (x *AgentHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealth.ProtoReflect.Descriptor instead.
func (*AgentHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{3}
}

func (x *AgentHealth) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *AgentHealth) GetHealth() []*HealthMoment {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *AgentHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type HealthMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	SrcIp                     string                 `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp                     string                 `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	PacketLoss                uint32                 `protobuf:"varint,4,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	AvgLatency                uint32                 `protobuf:"varint,5,opt,name=avg_latency,json=avgLatency,proto3" json:"avg_latency,omitempty"`
	AvgWeightedLatency        uint32                 `protobuf:"varint,6,opt,name=avg_weighted_latency,json=avgWeightedLatency,proto3" json:"avg_weighted_latency,omitempty"`
	RollingAvgLatency         uint32                 `protobuf:"varint,7,opt,name=rolling_avg_latency,json=rollingAvgLatency,proto3" json:"rolling_avg_latency,omitempty"`
	RollingStddevLatency      uint32                 `protobuf:"varint,8,opt,name=rolling_stddev_latency,json=rollingStddevLatency,proto3" json:"rolling_stddev_latency,omitempty"`
	RollingAvgWeightedLatency uint32                 `protobuf:"varint,9,opt,name=rolling_avg_weighted_latency,json=rollingAvgWeightedLatency,proto3" json:"rolling_avg_weighted_latency,omitempty"`
	LatencyHealth             string                 `protobuf:"bytes,10,opt,name=latency_health,json=latencyHealth,proto3" json:"latency_health,omitempty"`
	PacketLossHealth          string                 `protobuf:"bytes,11,opt,name=packet_loss_health,json=packetLossHealth,proto3" json:"packet_loss_health,omitempty"`
	OverallHealth             *Health                `protobuf:"bytes,12,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	// fields returned from backend grpc service
	AvgJitter        uint32 `protobuf:"varint,13,opt,name=avg_jitter,json=avgJitter,proto3" json:"avg_jitter,omitempty"`
	RollingAvgJitter uint32 `protobuf:"varint,14,opt,name=rolling_avg_jitter,json=rollingAvgJitter,proto3" json:"rolling_avg_jitter,omitempty"`
	RollingStdJitter uint32 `protobuf:"varint,15,opt,name=rolling_std_jitter,json=rollingStdJitter,proto3" json:"rolling_std_jitter,omitempty"`
	JitterHealth     string `protobuf:"bytes,16,opt,name=jitter_health,json=jitterHealth,proto3" json:"jitter_health,omitempty"`
	Data             string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`
	Size             uint32 `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`
	Status           uint32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	TaskType         string `protobuf:"bytes,20,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *HealthMoment) Reset() {
	*x = HealthMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMoment) ProtoMessage() {}

func (x *HealthMoment) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMoment.ProtoReflect.Descriptor instead.
func (*HealthMoment) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{4}
}

func (x *HealthMoment) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HealthMoment) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *HealthMoment) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *HealthMoment) GetPacketLoss() uint32 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *HealthMoment) GetAvgLatency() uint32 {
	if x != nil {
		return x.AvgLatency
	}
	return 0
}

func (x *HealthMoment) GetAvgWeightedLatency() uint32 {
	if x != nil {
		return x.AvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgLatency() uint32 {
	if x != nil {
		return x.RollingAvgLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingStddevLatency() uint32 {
	if x != nil {
		return x.RollingStddevLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgWeightedLatency() uint32 {
	if x != nil {
		return x.RollingAvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetLatencyHealth() string {
	if x != nil {
		return x.LatencyHealth
	}
	return ""
}

func (x *HealthMoment) GetPacketLossHealth() string {
	if x != nil {
		return x.PacketLossHealth
	}
	return ""
}

func (x *HealthMoment) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *HealthMoment) GetAvgJitter() uint32 {
	if x != nil {
		return x.AvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgJitter() uint32 {
	if x != nil {
		return x.RollingAvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingStdJitter() uint32 {
	if x != nil {
		return x.RollingStdJitter
	}
	return 0
}

func (x *HealthMoment) GetJitterHealth() string {
	if x != nil {
		return x.JitterHealth
	}
	return ""
}

func (x *HealthMoment) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HealthMoment) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HealthMoment) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HealthMoment) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status     AgentStatus            `protobuf:"varint,3,opt,name=status,proto3,enum=kentik.synthetics.v202101beta1.AgentStatus" json:"status,omitempty"`
	Alias      string                 `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Type       string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Os         string                 `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	Ip         string                 `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat        float64                `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`
	Long       float64                `protobuf:"fixed64,9,opt,name=long,proto3" json:"long,omitempty"`
	LastAuthed *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_authed,json=lastAuthed,proto3" json:"last_authed,omitempty"`
	Family     IPFamily               `protobuf:"varint,11,opt,name=family,proto3,enum=kentik.synthetics.v202101beta1.IPFamily" json:"family,omitempty"`
	Asn        uint32                 `protobuf:"varint,12,opt,name=asn,proto3" json:"asn,omitempty"`
	SiteId     string                 `protobuf:"bytes,13,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	Version    string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	Challenge  string                 `protobuf:"bytes,15,opt,name=challenge,proto3" json:"challenge,omitempty"`
	City       string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	Region     string                 `protobuf:"bytes,17,opt,name=region,proto3" json:"region,omitempty"`
	Country    string                 `protobuf:"bytes,18,opt,name=country,proto3" json:"country,omitempty"`
	TestIds    []string               `protobuf:"bytes,19,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	LocalIp    string                 `protobuf:"bytes,20,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{5}
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Agent) GetStatus() AgentStatus {
	if x != nil {
		return x.Status
	}
	return AgentStatus_AGENT_STATUS_UNSPECIFIED
}

func (x *Agent) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Agent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Agent) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Agent) GetLastAuthed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAuthed
	}
	return nil
}

func (x *Agent) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Agent) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Agent) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Agent) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *Agent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Agent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Agent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Agent) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

func (x *Agent) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

type PingTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count  uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PingTaskDefinition) Reset() {
	*x = PingTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTaskDefinition) ProtoMessage() {}

func (x *PingTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTaskDefinition.ProtoReflect.Descriptor instead.
func (*PingTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{6}
}

func (x *PingTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PingTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *PingTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *PingTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TraceTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit  uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TraceTaskDefinition) Reset() {
	*x = TraceTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTaskDefinition) ProtoMessage() {}

func (x *TraceTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTaskDefinition.ProtoReflect.Descriptor instead.
func (*TraceTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{7}
}

func (x *TraceTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TraceTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TraceTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TraceTaskDefinition) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type HTTPTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *HTTPTaskDefinition) Reset() {
	*x = HTTPTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTaskDefinition) ProtoMessage() {}

func (x *HTTPTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTaskDefinition.ProtoReflect.Descriptor instead.
func (*HTTPTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{8}
}

func (x *HTTPTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HTTPTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *HTTPTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestId   string    `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	DeviceId string    `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	State    TaskState `protobuf:"varint,4,opt,name=state,proto3,enum=kentik.synthetics.v202101beta1.TaskState" json:"state,omitempty"`
	Status   string    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Family   IPFamily  `protobuf:"varint,6,opt,name=family,proto3,enum=kentik.synthetics.v202101beta1.IPFamily" json:"family,omitempty"`
	// Types that are assignable to Definition:
	//	*Task_Ping
	//	*Task_Traceroute
	//	*Task_Http
	//	*Task_Knock
	//	*Task_Dns
	//	*Task_Shake
	Definition isTask_Definition `protobuf_oneof:"definition"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{9}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *Task) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Task) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (m *Task) GetDefinition() isTask_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *Task) GetPing() *PingTaskDefinition {
	if x, ok := x.GetDefinition().(*Task_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Task) GetTraceroute() *TraceTaskDefinition {
	if x, ok := x.GetDefinition().(*Task_Traceroute); ok {
		return x.Traceroute
	}
	return nil
}

func (x *Task) GetHttp() *HTTPTaskDefinition {
	if x, ok := x.GetDefinition().(*Task_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Task) GetKnock() *KnockTaskDefinition {
	if x, ok := x.GetDefinition().(*Task_Knock); ok {
		return x.Knock
	}
	return nil
}

func (x *Task) GetDns() *DNSTaskDefinition {
	if x, ok := x.GetDefinition().(*Task_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *Task) GetShake() *ShakeTaskDefinition {
	if x, ok := x.GetDefinition().(*Task_Shake); ok {
		return x.Shake
	}
	return nil
}

type isTask_Definition interface {
	isTask_Definition()
}

type Task_Ping struct {
	Ping *PingTaskDefinition `protobuf:"bytes,9,opt,name=ping,proto3,oneof"`
}

type Task_Traceroute struct {
	Traceroute *TraceTaskDefinition `protobuf:"bytes,10,opt,name=traceroute,proto3,oneof"`
}

type Task_Http struct {
	Http *HTTPTaskDefinition `protobuf:"bytes,11,opt,name=http,proto3,oneof"`
}

type Task_Knock struct {
	Knock *KnockTaskDefinition `protobuf:"bytes,12,opt,name=knock,proto3,oneof"`
}

type Task_Dns struct {
	Dns *DNSTaskDefinition `protobuf:"bytes,13,opt,name=dns,proto3,oneof"`
}

type Task_Shake struct {
	Shake *ShakeTaskDefinition `protobuf:"bytes,14,opt,name=shake,proto3,oneof"`
}

func (*Task_Ping) isTask_Definition() {}

func (*Task_Traceroute) isTask_Definition() {}

func (*Task_Http) isTask_Definition() {}

func (*Task_Knock) isTask_Definition() {}

func (*Task_Dns) isTask_Definition() {}

func (*Task_Shake) isTask_Definition() {}

type KnockTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count  uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Port   uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *KnockTaskDefinition) Reset() {
	*x = KnockTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnockTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnockTaskDefinition) ProtoMessage() {}

func (x *KnockTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnockTaskDefinition.ProtoReflect.Descriptor instead.
func (*KnockTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{10}
}

func (x *KnockTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *KnockTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *KnockTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *KnockTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *KnockTaskDefinition) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DNSTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period   uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry   uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count    uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Port     uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Type     string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Resolver string `protobuf:"bytes,7,opt,name=resolver,proto3" json:"resolver,omitempty"`
}

func (x *DNSTaskDefinition) Reset() {
	*x = DNSTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSTaskDefinition) ProtoMessage() {}

func (x *DNSTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSTaskDefinition.ProtoReflect.Descriptor instead.
func (*DNSTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{11}
}

func (x *DNSTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DNSTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *DNSTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *DNSTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DNSTaskDefinition) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DNSTaskDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNSTaskDefinition) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

type ShakeTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Period uint32 `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *ShakeTaskDefinition) Reset() {
	*x = ShakeTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShakeTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShakeTaskDefinition) ProtoMessage() {}

func (x *ShakeTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShakeTaskDefinition.ProtoReflect.Descriptor instead.
func (*ShakeTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{12}
}

func (x *ShakeTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ShakeTaskDefinition) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ShakeTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ShakeTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{13}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	DeviceId      string                 `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Status        TestStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=kentik.synthetics.v202101beta1.TestStatus" json:"status,omitempty"`
	Settings      *TestSettings          `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	ExpiresOn     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=edate,proto3" json:"edate,omitempty"`
	CreatedBy     *UserInfo              `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedBy *UserInfo              `protobuf:"bytes,11,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{14}
}

func (x *Test) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Test) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Test) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *Test) GetSettings() *TestSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Test) GetExpiresOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresOn
	}
	return nil
}

func (x *Test) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Test) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Test) GetCreatedBy() *UserInfo {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Test) GetLastUpdatedBy() *UserInfo {
	if x != nil {
		return x.LastUpdatedBy
	}
	return nil
}

type TestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Definition:
	//	*TestSettings_Hostname
	//	*TestSettings_Ip
	//	*TestSettings_Agent
	//	*TestSettings_Flow
	//	*TestSettings_Site
	//	*TestSettings_Tag
	//	*TestSettings_Dns
	//	*TestSettings_Url
	Definition         isTestSettings_Definition `protobuf_oneof:"definition"`
	AgentIds           []string                  `protobuf:"bytes,14,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Period             uint32                    `protobuf:"varint,15,opt,name=period,proto3" json:"period,omitempty"`
	Count              uint32                    `protobuf:"varint,16,opt,name=count,proto3" json:"count,omitempty"`
	Expiry             uint32                    `protobuf:"varint,17,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit              uint32                    `protobuf:"varint,18,opt,name=limit,proto3" json:"limit,omitempty"`
	Tasks              []string                  `protobuf:"bytes,19,rep,name=tasks,proto3" json:"tasks,omitempty"` // Task types.
	HealthSettings     *HealthSettings           `protobuf:"bytes,22,opt,name=health_settings,json=healthSettings,proto3" json:"health_settings,omitempty"`
	MonitoringSettings *TestMonitoringSettings   `protobuf:"bytes,24,opt,name=monitoring_settings,json=monitoringSettings,proto3" json:"monitoring_settings,omitempty"`
	Ping               *TestPingSettings         `protobuf:"bytes,28,opt,name=ping,proto3" json:"ping,omitempty"`
	Trace              *TestTraceSettings        `protobuf:"bytes,29,opt,name=trace,proto3" json:"trace,omitempty"`
	Port               uint32                    `protobuf:"varint,23,opt,name=port,proto3" json:"port,omitempty"`
	Protocol           string                    `protobuf:"bytes,26,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Family             IPFamily                  `protobuf:"varint,27,opt,name=family,proto3,enum=kentik.synthetics.v202101beta1.IPFamily" json:"family,omitempty"`
	Servers            []string                  `protobuf:"bytes,30,rep,name=servers,proto3" json:"servers,omitempty"`
	TargetType         string                    `protobuf:"bytes,20,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	TargetValue        string                    `protobuf:"bytes,21,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	UseLocalIp         bool                      `protobuf:"varint,31,opt,name=use_local_ip,json=useLocalIp,proto3" json:"use_local_ip,omitempty"`
	Reciprocal         bool                      `protobuf:"varint,32,opt,name=reciprocal,proto3" json:"reciprocal,omitempty"`
	RollupLevel        uint32                    `protobuf:"varint,33,opt,name=rollup_level,json=rollupLevel,proto3" json:"rollup_level,omitempty"`
}

func (x *TestSettings) Reset() {
	*x = TestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSettings) ProtoMessage() {}

func (x *TestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSettings.ProtoReflect.Descriptor instead.
func (*TestSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{15}
}

func (m *TestSettings) GetDefinition() isTestSettings_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *TestSettings) GetHostname() *HostnameTest {
	if x, ok := x.GetDefinition().(*TestSettings_Hostname); ok {
		return x.Hostname
	}
	return nil
}

func (x *TestSettings) GetIp() *IpTest {
	if x, ok := x.GetDefinition().(*TestSettings_Ip); ok {
		return x.Ip
	}
	return nil
}

func (x *TestSettings) GetAgent() *AgentTest {
	if x, ok := x.GetDefinition().(*TestSettings_Agent); ok {
		return x.Agent
	}
	return nil
}

func (x *TestSettings) GetFlow() *FlowTest {
	if x, ok := x.GetDefinition().(*TestSettings_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *TestSettings) GetSite() *SiteTest {
	if x, ok := x.GetDefinition().(*TestSettings_Site); ok {
		return x.Site
	}
	return nil
}

func (x *TestSettings) GetTag() *TagTest {
	if x, ok := x.GetDefinition().(*TestSettings_Tag); ok {
		return x.Tag
	}
	return nil
}

func (x *TestSettings) GetDns() *DnsTest {
	if x, ok := x.GetDefinition().(*TestSettings_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *TestSettings) GetUrl() *UrlTest {
	if x, ok := x.GetDefinition().(*TestSettings_Url); ok {
		return x.Url
	}
	return nil
}

func (x *TestSettings) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TestSettings) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestSettings) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestSettings) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TestSettings) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TestSettings) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestSettings) GetHealthSettings() *HealthSettings {
	if x != nil {
		return x.HealthSettings
	}
	return nil
}

func (x *TestSettings) GetMonitoringSettings() *TestMonitoringSettings {
	if x != nil {
		return x.MonitoringSettings
	}
	return nil
}

func (x *TestSettings) GetPing() *TestPingSettings {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *TestSettings) GetTrace() *TestTraceSettings {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TestSettings) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestSettings) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *TestSettings) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *TestSettings) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *TestSettings) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *TestSettings) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

func (x *TestSettings) GetReciprocal() bool {
	if x != nil {
		return x.Reciprocal
	}
	return false
}

func (x *TestSettings) GetRollupLevel() uint32 {
	if x != nil {
		return x.RollupLevel
	}
	return 0
}

type isTestSettings_Definition interface {
	isTestSettings_Definition()
}

type TestSettings_Hostname struct {
	Hostname *HostnameTest `protobuf:"bytes,4,opt,name=hostname,proto3,oneof"`
}

type TestSettings_Ip struct {
	Ip *IpTest `protobuf:"bytes,5,opt,name=ip,proto3,oneof"`
}

type TestSettings_Agent struct {
	Agent *AgentTest `protobuf:"bytes,6,opt,name=agent,proto3,oneof"`
}

type TestSettings_Flow struct {
	Flow *FlowTest `protobuf:"bytes,7,opt,name=flow,proto3,oneof"`
}

type TestSettings_Site struct {
	Site *SiteTest `protobuf:"bytes,8,opt,name=site,proto3,oneof"`
}

type TestSettings_Tag struct {
	Tag *TagTest `protobuf:"bytes,9,opt,name=tag,proto3,oneof"`
}

type TestSettings_Dns struct {
	Dns *DnsTest `protobuf:"bytes,10,opt,name=dns,proto3,oneof"`
}

type TestSettings_Url struct {
	Url *UrlTest `protobuf:"bytes,11,opt,name=url,proto3,oneof"`
}

func (*TestSettings_Hostname) isTestSettings_Definition() {}

func (*TestSettings_Ip) isTestSettings_Definition() {}

func (*TestSettings_Agent) isTestSettings_Definition() {}

func (*TestSettings_Flow) isTestSettings_Definition() {}

func (*TestSettings_Site) isTestSettings_Definition() {}

func (*TestSettings_Tag) isTestSettings_Definition() {}

func (*TestSettings_Dns) isTestSettings_Definition() {}

func (*TestSettings_Url) isTestSettings_Definition() {}

type TestTraceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period   float32 `protobuf:"fixed32,1,opt,name=period,proto3" json:"period,omitempty"`
	Count    float32 `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
	Protocol string  `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     float32 `protobuf:"fixed32,4,opt,name=port,proto3" json:"port,omitempty"`
	Expiry   float32 `protobuf:"fixed32,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit    float32 `protobuf:"fixed32,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TestTraceSettings) Reset() {
	*x = TestTraceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTraceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTraceSettings) ProtoMessage() {}

func (x *TestTraceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTraceSettings.ProtoReflect.Descriptor instead.
func (*TestTraceSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{16}
}

func (x *TestTraceSettings) GetPeriod() float32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestTraceSettings) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestTraceSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestTraceSettings) GetPort() float32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestTraceSettings) GetExpiry() float32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TestTraceSettings) GetLimit() float32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TestPingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period float32 `protobuf:"fixed32,1,opt,name=period,proto3" json:"period,omitempty"`
	Count  float32 `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
	Expiry float32 `protobuf:"fixed32,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *TestPingSettings) Reset() {
	*x = TestPingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPingSettings) ProtoMessage() {}

func (x *TestPingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPingSettings.ProtoReflect.Descriptor instead.
func (*TestPingSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{17}
}

func (x *TestPingSettings) GetPeriod() float32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestPingSettings) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestPingSettings) GetExpiry() float32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type TestMonitoringSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationGracePeriod string   `protobuf:"bytes,1,opt,name=activation_grace_period,json=activationGracePeriod,proto3" json:"activation_grace_period,omitempty"`
	ActivationTimeUnit    string   `protobuf:"bytes,2,opt,name=activation_time_unit,json=activationTimeUnit,proto3" json:"activation_time_unit,omitempty"`
	ActivationTimeWindow  string   `protobuf:"bytes,3,opt,name=activation_time_window,json=activationTimeWindow,proto3" json:"activation_time_window,omitempty"`
	ActivationTimes       string   `protobuf:"bytes,4,opt,name=activation_times,json=activationTimes,proto3" json:"activation_times,omitempty"`
	NotificationChannels  []string `protobuf:"bytes,5,rep,name=notification_channels,json=notificationChannels,proto3" json:"notification_channels,omitempty"`
}

func (x *TestMonitoringSettings) Reset() {
	*x = TestMonitoringSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMonitoringSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMonitoringSettings) ProtoMessage() {}

func (x *TestMonitoringSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMonitoringSettings.ProtoReflect.Descriptor instead.
func (*TestMonitoringSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{18}
}

func (x *TestMonitoringSettings) GetActivationGracePeriod() string {
	if x != nil {
		return x.ActivationGracePeriod
	}
	return ""
}

func (x *TestMonitoringSettings) GetActivationTimeUnit() string {
	if x != nil {
		return x.ActivationTimeUnit
	}
	return ""
}

func (x *TestMonitoringSettings) GetActivationTimeWindow() string {
	if x != nil {
		return x.ActivationTimeWindow
	}
	return ""
}

func (x *TestMonitoringSettings) GetActivationTimes() string {
	if x != nil {
		return x.ActivationTimes
	}
	return ""
}

func (x *TestMonitoringSettings) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

type HealthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyCritical     float32  `protobuf:"fixed32,1,opt,name=latency_critical,json=latencyCritical,proto3" json:"latency_critical,omitempty"`
	LatencyWarning      float32  `protobuf:"fixed32,2,opt,name=latency_warning,json=latencyWarning,proto3" json:"latency_warning,omitempty"`
	PacketLossCritical  float32  `protobuf:"fixed32,3,opt,name=packet_loss_critical,json=packetLossCritical,proto3" json:"packet_loss_critical,omitempty"`
	PacketLossWarning   float32  `protobuf:"fixed32,4,opt,name=packet_loss_warning,json=packetLossWarning,proto3" json:"packet_loss_warning,omitempty"`
	JitterCritical      float32  `protobuf:"fixed32,5,opt,name=jitter_critical,json=jitterCritical,proto3" json:"jitter_critical,omitempty"`
	JitterWarning       float32  `protobuf:"fixed32,6,opt,name=jitter_warning,json=jitterWarning,proto3" json:"jitter_warning,omitempty"`
	HttpLatencyCritical float32  `protobuf:"fixed32,7,opt,name=http_latency_critical,json=httpLatencyCritical,proto3" json:"http_latency_critical,omitempty"`
	HttpLatencyWarning  float32  `protobuf:"fixed32,8,opt,name=http_latency_warning,json=httpLatencyWarning,proto3" json:"http_latency_warning,omitempty"`
	HttpValidCodes      []uint32 `protobuf:"varint,9,rep,packed,name=http_valid_codes,json=httpValidCodes,proto3" json:"http_valid_codes,omitempty"`
	DnsValidCodes       []uint32 `protobuf:"varint,10,rep,packed,name=dns_valid_codes,json=dnsValidCodes,proto3" json:"dns_valid_codes,omitempty"`
}

func (x *HealthSettings) Reset() {
	*x = HealthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthSettings) ProtoMessage() {}

func (x *HealthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthSettings.ProtoReflect.Descriptor instead.
func (*HealthSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{19}
}

func (x *HealthSettings) GetLatencyCritical() float32 {
	if x != nil {
		return x.LatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarning() float32 {
	if x != nil {
		return x.LatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetPacketLossCritical() float32 {
	if x != nil {
		return x.PacketLossCritical
	}
	return 0
}

func (x *HealthSettings) GetPacketLossWarning() float32 {
	if x != nil {
		return x.PacketLossWarning
	}
	return 0
}

func (x *HealthSettings) GetJitterCritical() float32 {
	if x != nil {
		return x.JitterCritical
	}
	return 0
}

func (x *HealthSettings) GetJitterWarning() float32 {
	if x != nil {
		return x.JitterWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCritical() float32 {
	if x != nil {
		return x.HttpLatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarning() float32 {
	if x != nil {
		return x.HttpLatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpValidCodes() []uint32 {
	if x != nil {
		return x.HttpValidCodes
	}
	return nil
}

func (x *HealthSettings) GetDnsValidCodes() []uint32 {
	if x != nil {
		return x.DnsValidCodes
	}
	return nil
}

type HostnameTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *HostnameTest) Reset() {
	*x = HostnameTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnameTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameTest) ProtoMessage() {}

func (x *HostnameTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameTest.ProtoReflect.Descriptor instead.
func (*HostnameTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{20}
}

func (x *HostnameTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type IpTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []string `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *IpTest) Reset() {
	*x = IpTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTest) ProtoMessage() {}

func (x *IpTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTest.ProtoReflect.Descriptor instead.
func (*IpTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{21}
}

func (x *IpTest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type AgentTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *AgentTest) Reset() {
	*x = AgentTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTest) ProtoMessage() {}

func (x *AgentTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTest.ProtoReflect.Descriptor instead.
func (*AgentTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{22}
}

func (x *AgentTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type FlowTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                      string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetRefreshIntervalMillis uint32 `protobuf:"varint,2,opt,name=target_refresh_interval_millis,json=targetRefreshIntervalMillis,proto3" json:"target_refresh_interval_millis,omitempty"` // How often to generate tasks.
	MaxTasks                    uint32 `protobuf:"varint,3,opt,name=max_tasks,json=maxTasks,proto3" json:"max_tasks,omitempty"`                                                              // Used for top N.
	Type                        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                                                                       // What type of flow to look at -- asn, cdn, country, ...
}

func (x *FlowTest) Reset() {
	*x = FlowTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTest) ProtoMessage() {}

func (x *FlowTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTest.ProtoReflect.Descriptor instead.
func (*FlowTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{23}
}

func (x *FlowTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FlowTest) GetTargetRefreshIntervalMillis() uint32 {
	if x != nil {
		return x.TargetRefreshIntervalMillis
	}
	return 0
}

func (x *FlowTest) GetMaxTasks() uint32 {
	if x != nil {
		return x.MaxTasks
	}
	return 0
}

func (x *FlowTest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SiteTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *SiteTest) Reset() {
	*x = SiteTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteTest) ProtoMessage() {}

func (x *SiteTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteTest.ProtoReflect.Descriptor instead.
func (*SiteTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{24}
}

func (x *SiteTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TagTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TagTest) Reset() {
	*x = TagTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTest) ProtoMessage() {}

func (x *TagTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagTest.ProtoReflect.Descriptor instead.
func (*TagTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{25}
}

func (x *TagTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type DnsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *DnsTest) Reset() {
	*x = DnsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTest) ProtoMessage() {}

func (x *DnsTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTest.ProtoReflect.Descriptor instead.
func (*DnsTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{26}
}

func (x *DnsTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type UrlTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UrlTest) Reset() {
	*x = UrlTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlTest) ProtoMessage() {}

func (x *UrlTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlTest.ProtoReflect.Descriptor instead.
func (*UrlTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{27}
}

func (x *UrlTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type MeshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AgentId      string        `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentLocalIp string        `protobuf:"bytes,3,opt,name=agent_local_ip,json=agentLocalIp,proto3" json:"agent_local_ip,omitempty"`
	AgentIp      string        `protobuf:"bytes,4,opt,name=agent_ip,json=agentIp,proto3" json:"agent_ip,omitempty"`
	Columns      []*MeshColumn `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *MeshResponse) Reset() {
	*x = MeshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshResponse) ProtoMessage() {}

func (x *MeshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshResponse.ProtoReflect.Descriptor instead.
func (*MeshResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{28}
}

func (x *MeshResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MeshResponse) GetAgentLocalIp() string {
	if x != nil {
		return x.AgentLocalIp
	}
	return ""
}

func (x *MeshResponse) GetAgentIp() string {
	if x != nil {
		return x.AgentIp
	}
	return ""
}

func (x *MeshResponse) GetColumns() []*MeshColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type MeshColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AgentId string       `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Metrics *MeshMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MeshColumn) Reset() {
	*x = MeshColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshColumn) ProtoMessage() {}

func (x *MeshColumn) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshColumn.ProtoReflect.Descriptor instead.
func (*MeshColumn) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{29}
}

func (x *MeshColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshColumn) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MeshColumn) GetMetrics() *MeshMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MeshMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health string `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	Value  int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MeshMetric) Reset() {
	*x = MeshMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshMetric) ProtoMessage() {}

func (x *MeshMetric) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshMetric.ProtoReflect.Descriptor instead.
func (*MeshMetric) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{30}
}

func (x *MeshMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshMetric) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *MeshMetric) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MeshMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Latency    *MeshMetric            `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
	PacketLoss *MeshMetric            `protobuf:"bytes,3,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	Jitter     *MeshMetric            `protobuf:"bytes,4,opt,name=jitter,proto3" json:"jitter,omitempty"`
}

func (x *MeshMetrics) Reset() {
	*x = MeshMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshMetrics) ProtoMessage() {}

func (x *MeshMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshMetrics.ProtoReflect.Descriptor instead.
func (*MeshMetrics) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{31}
}

func (x *MeshMetrics) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MeshMetrics) GetLatency() *MeshMetric {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *MeshMetrics) GetPacketLoss() *MeshMetric {
	if x != nil {
		return x.PacketLoss
	}
	return nil
}

func (x *MeshMetrics) GetJitter() *MeshMetric {
	if x != nil {
		return x.Jitter
	}
	return nil
}

type ASN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ASN) Reset() {
	*x = ASN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASN) ProtoMessage() {}

func (x *ASN) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASN.ProtoReflect.Descriptor instead.
func (*ASN) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{32}
}

func (x *ASN) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ASN) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{33}
}

func (x *Country) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{34}
}

func (x *Region) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Lat  float64 `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`
	Long float64 `protobuf:"fixed64,9,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{35}
}

func (x *City) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *City) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *City) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *City) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

type Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country *Country `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Region  *Region  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	City    *City    `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *Geo) Reset() {
	*x = Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{36}
}

func (x *Geo) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Geo) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Geo) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

type IPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip  string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Asn *ASN   `protobuf:"bytes,2,opt,name=asn,proto3" json:"asn,omitempty"`
	Geo *Geo   `protobuf:"bytes,3,opt,name=geo,proto3" json:"geo,omitempty"`
}

func (x *IPInfo) Reset() {
	*x = IPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPInfo) ProtoMessage() {}

func (x *IPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPInfo.ProtoReflect.Descriptor instead.
func (*IPInfo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{37}
}

func (x *IPInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPInfo) GetAsn() *ASN {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *IPInfo) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

type TraceHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent     bool     `protobuf:"varint,1,opt,name=agent,proto3" json:"agent,omitempty"`
	AgentId   string   `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Ttl       int32    `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Ip        string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Latencies []uint64 `protobuf:"varint,5,rep,packed,name=latencies,proto3" json:"latencies,omitempty"`
	Timeout   bool     `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TraceHop) Reset() {
	*x = TraceHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceHop) ProtoMessage() {}

func (x *TraceHop) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceHop.ProtoReflect.Descriptor instead.
func (*TraceHop) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{38}
}

func (x *TraceHop) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *TraceHop) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TraceHop) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *TraceHop) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TraceHop) GetLatencies() []uint64 {
	if x != nil {
		return x.Latencies
	}
	return nil
}

func (x *TraceHop) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops   []*TraceHop `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	Target string      `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Ips    []string    `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{39}
}

func (x *Trace) GetHops() []*TraceHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *Trace) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Trace) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type TracerouteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Traces []*Trace               `protobuf:"bytes,2,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *TracerouteResult) Reset() {
	*x = TracerouteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteResult) ProtoMessage() {}

func (x *TracerouteResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteResult.ProtoReflect.Descriptor instead.
func (*TracerouteResult) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{40}
}

func (x *TracerouteResult) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TracerouteResult) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

type GetHealthForTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of ids of the tests to get health for.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// Start of the time interval for this query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of the time interval for this query.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optionally, only look at a subset of agents
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// Optionally only look at a subset of tasks -- this lets you limit targets.
	TaskIds []string `protobuf:"bytes,5,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
}

func (x *GetHealthForTestsRequest) Reset() {
	*x = GetHealthForTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthForTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsRequest) ProtoMessage() {}

func (x *GetHealthForTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsRequest.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{41}
}

func (x *GetHealthForTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type GetHealthForTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health []*TestHealth `protobuf:"bytes,1,rep,name=health,proto3" json:"health,omitempty"`
}

func (x *GetHealthForTestsResponse) Reset() {
	*x = GetHealthForTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthForTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsResponse) ProtoMessage() {}

func (x *GetHealthForTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsResponse.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{42}
}

func (x *GetHealthForTestsResponse) GetHealth() []*TestHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

type GetTraceForTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Start of the time interval for this query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of the time interval for this query.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optionally, limit the query to these agent ids
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// Optionally, limit the query to these destination IP addresses
	TargetIps []string `protobuf:"bytes,5,rep,name=target_ips,json=targetIps,proto3" json:"target_ips,omitempty"`
}

func (x *GetTraceForTestRequest) Reset() {
	*x = GetTraceForTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestRequest) ProtoMessage() {}

func (x *GetTraceForTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceForTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{43}
}

func (x *GetTraceForTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTraceForTestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetTraceForTestRequest) GetTargetIps() []string {
	if x != nil {
		return x.TargetIps
	}
	return nil
}

type GetTraceForTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpInfo  []*IPInfo           `protobuf:"bytes,1,rep,name=ip_info,json=ipInfo,proto3" json:"ip_info,omitempty"`
	Results []*TracerouteResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetTraceForTestResponse) Reset() {
	*x = GetTraceForTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestResponse) ProtoMessage() {}

func (x *GetTraceForTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceForTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{44}
}

func (x *GetTraceForTestResponse) GetIpInfo() []*IPInfo {
	if x != nil {
		return x.IpInfo
	}
	return nil
}

func (x *GetTraceForTestResponse) GetResults() []*TracerouteResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{45}
}

type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents             []*Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	InvalidAgentsCount uint32   `protobuf:"varint,2,opt,name=invalid_agents_count,json=invalidAgentsCount,proto3" json:"invalid_agents_count,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{46}
}

func (x *ListAgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentsResponse) GetInvalidAgentsCount() uint32 {
	if x != nil {
		return x.InvalidAgentsCount
	}
	return 0
}

type CreateAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAgentRequest) Reset() {
	*x = CreateAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentRequest) ProtoMessage() {}

func (x *CreateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentRequest.ProtoReflect.Descriptor instead.
func (*CreateAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{47}
}

type CreateAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAgentResponse) Reset() {
	*x = CreateAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentResponse) ProtoMessage() {}

func (x *CreateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentResponse.ProtoReflect.Descriptor instead.
func (*CreateAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{48}
}

type GetAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{49}
}

func (x *GetAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *GetAgentResponse) Reset() {
	*x = GetAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentResponse) ProtoMessage() {}

func (x *GetAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{50}
}

func (x *GetAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type PatchAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Mask  *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *PatchAgentRequest) Reset() {
	*x = PatchAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAgentRequest) ProtoMessage() {}

func (x *PatchAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAgentRequest.ProtoReflect.Descriptor instead.
func (*PatchAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{51}
}

func (x *PatchAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *PatchAgentRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type PatchAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *PatchAgentResponse) Reset() {
	*x = PatchAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAgentResponse) ProtoMessage() {}

func (x *PatchAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAgentResponse.ProtoReflect.Descriptor instead.
func (*PatchAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{52}
}

func (x *PatchAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type DeleteAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAgentRequest) Reset() {
	*x = DeleteAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentRequest) ProtoMessage() {}

func (x *DeleteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAgentResponse) Reset() {
	*x = DeleteAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentResponse) ProtoMessage() {}

func (x *DeleteAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{54}
}

type ListTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset bool `protobuf:"varint,1,opt,name=preset,proto3" json:"preset,omitempty"`
}

func (x *ListTestsRequest) Reset() {
	*x = ListTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsRequest) ProtoMessage() {}

func (x *ListTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsRequest.ProtoReflect.Descriptor instead.
func (*ListTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{55}
}

func (x *ListTestsRequest) GetPreset() bool {
	if x != nil {
		return x.Preset
	}
	return false
}

type ListTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests             []*Test `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	InvalidTestsCount uint32  `protobuf:"varint,2,opt,name=invalid_tests_count,json=invalidTestsCount,proto3" json:"invalid_tests_count,omitempty"`
}

func (x *ListTestsResponse) Reset() {
	*x = ListTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsResponse) ProtoMessage() {}

func (x *ListTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsResponse.ProtoReflect.Descriptor instead.
func (*ListTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{56}
}

func (x *ListTestsResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListTestsResponse) GetInvalidTestsCount() uint32 {
	if x != nil {
		return x.InvalidTestsCount
	}
	return 0
}

type CreateTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestRequest) Reset() {
	*x = CreateTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestRequest) ProtoMessage() {}

func (x *CreateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestRequest.ProtoReflect.Descriptor instead.
func (*CreateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{57}
}

func (x *CreateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestResponse) Reset() {
	*x = CreateTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResponse) ProtoMessage() {}

func (x *CreateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResponse.ProtoReflect.Descriptor instead.
func (*CreateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{58}
}

func (x *CreateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type GetTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{59}
}

func (x *GetTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{60}
}

func (x *GetTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type SetTestStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status TestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.synthetics.v202101beta1.TestStatus" json:"status,omitempty"`
}

func (x *SetTestStatusRequest) Reset() {
	*x = SetTestStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusRequest) ProtoMessage() {}

func (x *SetTestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTestStatusRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{61}
}

func (x *SetTestStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetTestStatusRequest) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

type SetTestStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTestStatusResponse) Reset() {
	*x = SetTestStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusResponse) ProtoMessage() {}

func (x *SetTestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTestStatusResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{62}
}

type PatchTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	Mask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *PatchTestRequest) Reset() {
	*x = PatchTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTestRequest) ProtoMessage() {}

func (x *PatchTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTestRequest.ProtoReflect.Descriptor instead.
func (*PatchTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{63}
}

func (x *PatchTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *PatchTestRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type PatchTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *PatchTestResponse) Reset() {
	*x = PatchTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTestResponse) ProtoMessage() {}

func (x *PatchTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTestResponse.ProtoReflect.Descriptor instead.
func (*PatchTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{64}
}

func (x *PatchTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type DeleteTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTestRequest) Reset() {
	*x = DeleteTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestRequest) ProtoMessage() {}

func (x *DeleteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestResponse) Reset() {
	*x = DeleteTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestResponse) ProtoMessage() {}

func (x *DeleteTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{66}
}

var File_kentik_synthetics_v202101beta1_synthetics_proto protoreflect.FileDescriptor

var file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x50, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xdf, 0x01,
	0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x3b, 0x0a,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x4d, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22,
	0xa8, 0x06, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x61, 0x76, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x64, 0x64, 0x65, 0x76, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4d,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x76, 0x67, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x76, 0x67, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x64, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x05, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x3b, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x22, 0x72, 0x0a, 0x12, 0x50,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x73, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x5c, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x22, 0xc1, 0x05, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x04,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x4b, 0x0a, 0x05, 0x6b, 0x6e, 0x6f, 0x63, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x6e, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6b,
	0x6e, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x4b, 0x6e, 0x6f, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0xb5, 0x01, 0x0a, 0x11, 0x44, 0x4e, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x4d, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x04, 0x0a, 0x04, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x50,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0xb1, 0x0a, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x4a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x57, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x50, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x22, 0x98, 0x02, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x0e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0c,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x22, 0x0a, 0x06, 0x49, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x98, 0x01,
	0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x21, 0x0a, 0x07,
	0x54, 0x61, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x21, 0x0a, 0x07, 0x44, 0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x21, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x0a, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x03, 0x41, 0x53, 0x4e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x03, 0x47,
	0x65, 0x6f, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22,
	0x86, 0x01, 0x0a, 0x06, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x73,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x53, 0x4e, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x12, 0x35, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x48, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x6f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x68, 0x6f, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x6f,
	0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x5f,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22,
	0xd6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x14,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x22, 0x51, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0x7f,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x4d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x4e,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x20,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7c, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x22, 0x4d, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22,
	0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x5d, 0x0a, 0x08, 0x49, 0x50,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d,
	0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x56,
	0x34, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x56, 0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x71, 0x0a,
	0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x6f, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x32, 0xe9, 0x03, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x22, 0x25, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x1a, 0x2a, 0xca, 0x41, 0x19, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea,
	0xd7, 0x02, 0x0a, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x32, 0xee, 0x10,
	0x0a, 0x16, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xbc, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xf2, 0xd7, 0x02, 0x16, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xb4, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x12, 0x24, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xf2, 0xd7,
	0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x32, 0x2a,
	0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb1,
	0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xf2, 0xd7, 0x02, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xcd, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4f, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x1a, 0x2a, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xbc, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32, 0x28, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x12,
	0xba, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x30, 0xca, 0x41,
	0x19, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x10, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x42, 0xa6,
	0x03, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x92, 0x41, 0xd3, 0x02, 0x12, 0x61, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50,
	0x49, 0x22, 0x37, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x32, 0x0b, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x5c,
	0x0a, 0x30, 0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50,
	0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x02, 0x0a, 0x28, 0x0a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d,
	0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x62, 0x32, 0x0a, 0x17,
	0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x17, 0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d,
	0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00,
	0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x1b, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescOnce sync.Once
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData = file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc
)

func file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP() []byte {
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescOnce.Do(func() {
		file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData)
	})
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData
}

var file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_kentik_synthetics_v202101beta1_synthetics_proto_goTypes = []interface{}{
	(IPFamily)(0),                     // 0: kentik.synthetics.v202101beta1.IPFamily
	(TestStatus)(0),                   // 1: kentik.synthetics.v202101beta1.TestStatus
	(AgentStatus)(0),                  // 2: kentik.synthetics.v202101beta1.AgentStatus
	(TaskState)(0),                    // 3: kentik.synthetics.v202101beta1.TaskState
	(*Health)(nil),                    // 4: kentik.synthetics.v202101beta1.Health
	(*TestHealth)(nil),                // 5: kentik.synthetics.v202101beta1.TestHealth
	(*TaskHealth)(nil),                // 6: kentik.synthetics.v202101beta1.TaskHealth
	(*AgentHealth)(nil),               // 7: kentik.synthetics.v202101beta1.AgentHealth
	(*HealthMoment)(nil),              // 8: kentik.synthetics.v202101beta1.HealthMoment
	(*Agent)(nil),                     // 9: kentik.synthetics.v202101beta1.Agent
	(*PingTaskDefinition)(nil),        // 10: kentik.synthetics.v202101beta1.PingTaskDefinition
	(*TraceTaskDefinition)(nil),       // 11: kentik.synthetics.v202101beta1.TraceTaskDefinition
	(*HTTPTaskDefinition)(nil),        // 12: kentik.synthetics.v202101beta1.HTTPTaskDefinition
	(*Task)(nil),                      // 13: kentik.synthetics.v202101beta1.Task
	(*KnockTaskDefinition)(nil),       // 14: kentik.synthetics.v202101beta1.KnockTaskDefinition
	(*DNSTaskDefinition)(nil),         // 15: kentik.synthetics.v202101beta1.DNSTaskDefinition
	(*ShakeTaskDefinition)(nil),       // 16: kentik.synthetics.v202101beta1.ShakeTaskDefinition
	(*UserInfo)(nil),                  // 17: kentik.synthetics.v202101beta1.UserInfo
	(*Test)(nil),                      // 18: kentik.synthetics.v202101beta1.Test
	(*TestSettings)(nil),              // 19: kentik.synthetics.v202101beta1.TestSettings
	(*TestTraceSettings)(nil),         // 20: kentik.synthetics.v202101beta1.TestTraceSettings
	(*TestPingSettings)(nil),          // 21: kentik.synthetics.v202101beta1.TestPingSettings
	(*TestMonitoringSettings)(nil),    // 22: kentik.synthetics.v202101beta1.TestMonitoringSettings
	(*HealthSettings)(nil),            // 23: kentik.synthetics.v202101beta1.HealthSettings
	(*HostnameTest)(nil),              // 24: kentik.synthetics.v202101beta1.HostnameTest
	(*IpTest)(nil),                    // 25: kentik.synthetics.v202101beta1.IpTest
	(*AgentTest)(nil),                 // 26: kentik.synthetics.v202101beta1.AgentTest
	(*FlowTest)(nil),                  // 27: kentik.synthetics.v202101beta1.FlowTest
	(*SiteTest)(nil),                  // 28: kentik.synthetics.v202101beta1.SiteTest
	(*TagTest)(nil),                   // 29: kentik.synthetics.v202101beta1.TagTest
	(*DnsTest)(nil),                   // 30: kentik.synthetics.v202101beta1.DnsTest
	(*UrlTest)(nil),                   // 31: kentik.synthetics.v202101beta1.UrlTest
	(*MeshResponse)(nil),              // 32: kentik.synthetics.v202101beta1.MeshResponse
	(*MeshColumn)(nil),                // 33: kentik.synthetics.v202101beta1.MeshColumn
	(*MeshMetric)(nil),                // 34: kentik.synthetics.v202101beta1.MeshMetric
	(*MeshMetrics)(nil),               // 35: kentik.synthetics.v202101beta1.MeshMetrics
	(*ASN)(nil),                       // 36: kentik.synthetics.v202101beta1.ASN
	(*Country)(nil),                   // 37: kentik.synthetics.v202101beta1.Country
	(*Region)(nil),                    // 38: kentik.synthetics.v202101beta1.Region
	(*City)(nil),                      // 39: kentik.synthetics.v202101beta1.City
	(*Geo)(nil),                       // 40: kentik.synthetics.v202101beta1.Geo
	(*IPInfo)(nil),                    // 41: kentik.synthetics.v202101beta1.IPInfo
	(*TraceHop)(nil),                  // 42: kentik.synthetics.v202101beta1.TraceHop
	(*Trace)(nil),                     // 43: kentik.synthetics.v202101beta1.Trace
	(*TracerouteResult)(nil),          // 44: kentik.synthetics.v202101beta1.TracerouteResult
	(*GetHealthForTestsRequest)(nil),  // 45: kentik.synthetics.v202101beta1.GetHealthForTestsRequest
	(*GetHealthForTestsResponse)(nil), // 46: kentik.synthetics.v202101beta1.GetHealthForTestsResponse
	(*GetTraceForTestRequest)(nil),    // 47: kentik.synthetics.v202101beta1.GetTraceForTestRequest
	(*GetTraceForTestResponse)(nil),   // 48: kentik.synthetics.v202101beta1.GetTraceForTestResponse
	(*ListAgentsRequest)(nil),         // 49: kentik.synthetics.v202101beta1.ListAgentsRequest
	(*ListAgentsResponse)(nil),        // 50: kentik.synthetics.v202101beta1.ListAgentsResponse
	(*CreateAgentRequest)(nil),        // 51: kentik.synthetics.v202101beta1.CreateAgentRequest
	(*CreateAgentResponse)(nil),       // 52: kentik.synthetics.v202101beta1.CreateAgentResponse
	(*GetAgentRequest)(nil),           // 53: kentik.synthetics.v202101beta1.GetAgentRequest
	(*GetAgentResponse)(nil),          // 54: kentik.synthetics.v202101beta1.GetAgentResponse
	(*PatchAgentRequest)(nil),         // 55: kentik.synthetics.v202101beta1.PatchAgentRequest
	(*PatchAgentResponse)(nil),        // 56: kentik.synthetics.v202101beta1.PatchAgentResponse
	(*DeleteAgentRequest)(nil),        // 57: kentik.synthetics.v202101beta1.DeleteAgentRequest
	(*DeleteAgentResponse)(nil),       // 58: kentik.synthetics.v202101beta1.DeleteAgentResponse
	(*ListTestsRequest)(nil),          // 59: kentik.synthetics.v202101beta1.ListTestsRequest
	(*ListTestsResponse)(nil),         // 60: kentik.synthetics.v202101beta1.ListTestsResponse
	(*CreateTestRequest)(nil),         // 61: kentik.synthetics.v202101beta1.CreateTestRequest
	(*CreateTestResponse)(nil),        // 62: kentik.synthetics.v202101beta1.CreateTestResponse
	(*GetTestRequest)(nil),            // 63: kentik.synthetics.v202101beta1.GetTestRequest
	(*GetTestResponse)(nil),           // 64: kentik.synthetics.v202101beta1.GetTestResponse
	(*SetTestStatusRequest)(nil),      // 65: kentik.synthetics.v202101beta1.SetTestStatusRequest
	(*SetTestStatusResponse)(nil),     // 66: kentik.synthetics.v202101beta1.SetTestStatusResponse
	(*PatchTestRequest)(nil),          // 67: kentik.synthetics.v202101beta1.PatchTestRequest
	(*PatchTestResponse)(nil),         // 68: kentik.synthetics.v202101beta1.PatchTestResponse
	(*DeleteTestRequest)(nil),         // 69: kentik.synthetics.v202101beta1.DeleteTestRequest
	(*DeleteTestResponse)(nil),        // 70: kentik.synthetics.v202101beta1.DeleteTestResponse
	(*timestamppb.Timestamp)(nil),     // 71: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),     // 72: google.protobuf.FieldMask
}
var file_kentik_synthetics_v202101beta1_synthetics_proto_depIdxs = []int32{
	71, // 0: kentik.synthetics.v202101beta1.Health.time:type_name -> google.protobuf.Timestamp
	6,  // 1: kentik.synthetics.v202101beta1.TestHealth.tasks:type_name -> kentik.synthetics.v202101beta1.TaskHealth
	4,  // 2: kentik.synthetics.v202101beta1.TestHealth.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	4,  // 3: kentik.synthetics.v202101beta1.TestHealth.health_ts:type_name -> kentik.synthetics.v202101beta1.Health
	13, // 4: kentik.synthetics.v202101beta1.TaskHealth.task:type_name -> kentik.synthetics.v202101beta1.Task
	7,  // 5: kentik.synthetics.v202101beta1.TaskHealth.agents:type_name -> kentik.synthetics.v202101beta1.AgentHealth
	4,  // 6: kentik.synthetics.v202101beta1.TaskHealth.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	9,  // 7: kentik.synthetics.v202101beta1.AgentHealth.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	8,  // 8: kentik.synthetics.v202101beta1.AgentHealth.health:type_name -> kentik.synthetics.v202101beta1.HealthMoment
	4,  // 9: kentik.synthetics.v202101beta1.AgentHealth.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	71, // 10: kentik.synthetics.v202101beta1.HealthMoment.time:type_name -> google.protobuf.Timestamp
	4,  // 11: kentik.synthetics.v202101beta1.HealthMoment.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	2,  // 12: kentik.synthetics.v202101beta1.Agent.status:type_name -> kentik.synthetics.v202101beta1.AgentStatus
	71, // 13: kentik.synthetics.v202101beta1.Agent.last_authed:type_name -> google.protobuf.Timestamp
	0,  // 14: kentik.synthetics.v202101beta1.Agent.family:type_name -> kentik.synthetics.v202101beta1.IPFamily
	3,  // 15: kentik.synthetics.v202101beta1.Task.state:type_name -> kentik.synthetics.v202101beta1.TaskState
	0,  // 16: kentik.synthetics.v202101beta1.Task.family:type_name -> kentik.synthetics.v202101beta1.IPFamily
	10, // 17: kentik.synthetics.v202101beta1.Task.ping:type_name -> kentik.synthetics.v202101beta1.PingTaskDefinition
	11, // 18: kentik.synthetics.v202101beta1.Task.traceroute:type_name -> kentik.synthetics.v202101beta1.TraceTaskDefinition
	12, // 19: kentik.synthetics.v202101beta1.Task.http:type_name -> kentik.synthetics.v202101beta1.HTTPTaskDefinition
	14, // 20: kentik.synthetics.v202101beta1.Task.knock:type_name -> kentik.synthetics.v202101beta1.KnockTaskDefinition
	15, // 21: kentik.synthetics.v202101beta1.Task.dns:type_name -> kentik.synthetics.v202101beta1.DNSTaskDefinition
	16, // 22: kentik.synthetics.v202101beta1.Task.shake:type_name -> kentik.synthetics.v202101beta1.ShakeTaskDefinition
	1,  // 23: kentik.synthetics.v202101beta1.Test.status:type_name -> kentik.synthetics.v202101beta1.TestStatus
	19, // 24: kentik.synthetics.v202101beta1.Test.settings:type_name -> kentik.synthetics.v202101beta1.TestSettings
	71, // 25: kentik.synthetics.v202101beta1.Test.expires_on:type_name -> google.protobuf.Timestamp
	71, // 26: kentik.synthetics.v202101beta1.Test.cdate:type_name -> google.protobuf.Timestamp
	71, // 27: kentik.synthetics.v202101beta1.Test.edate:type_name -> google.protobuf.Timestamp
	17, // 28: kentik.synthetics.v202101beta1.Test.created_by:type_name -> kentik.synthetics.v202101beta1.UserInfo
	17, // 29: kentik.synthetics.v202101beta1.Test.last_updated_by:type_name -> kentik.synthetics.v202101beta1.UserInfo
	24, // 30: kentik.synthetics.v202101beta1.TestSettings.hostname:type_name -> kentik.synthetics.v202101beta1.HostnameTest
	25, // 31: kentik.synthetics.v202101beta1.TestSettings.ip:type_name -> kentik.synthetics.v202101beta1.IpTest
	26, // 32: kentik.synthetics.v202101beta1.TestSettings.agent:type_name -> kentik.synthetics.v202101beta1.AgentTest
	27, // 33: kentik.synthetics.v202101beta1.TestSettings.flow:type_name -> kentik.synthetics.v202101beta1.FlowTest
	28, // 34: kentik.synthetics.v202101beta1.TestSettings.site:type_name -> kentik.synthetics.v202101beta1.SiteTest
	29, // 35: kentik.synthetics.v202101beta1.TestSettings.tag:type_name -> kentik.synthetics.v202101beta1.TagTest
	30, // 36: kentik.synthetics.v202101beta1.TestSettings.dns:type_name -> kentik.synthetics.v202101beta1.DnsTest
	31, // 37: kentik.synthetics.v202101beta1.TestSettings.url:type_name -> kentik.synthetics.v202101beta1.UrlTest
	23, // 38: kentik.synthetics.v202101beta1.TestSettings.health_settings:type_name -> kentik.synthetics.v202101beta1.HealthSettings
	22, // 39: kentik.synthetics.v202101beta1.TestSettings.monitoring_settings:type_name -> kentik.synthetics.v202101beta1.TestMonitoringSettings
	21, // 40: kentik.synthetics.v202101beta1.TestSettings.ping:type_name -> kentik.synthetics.v202101beta1.TestPingSettings
	20, // 41: kentik.synthetics.v202101beta1.TestSettings.trace:type_name -> kentik.synthetics.v202101beta1.TestTraceSettings
	0,  // 42: kentik.synthetics.v202101beta1.TestSettings.family:type_name -> kentik.synthetics.v202101beta1.IPFamily
	33, // 43: kentik.synthetics.v202101beta1.MeshResponse.columns:type_name -> kentik.synthetics.v202101beta1.MeshColumn
	35, // 44: kentik.synthetics.v202101beta1.MeshColumn.metrics:type_name -> kentik.synthetics.v202101beta1.MeshMetrics
	71, // 45: kentik.synthetics.v202101beta1.MeshMetrics.time:type_name -> google.protobuf.Timestamp
	34, // 46: kentik.synthetics.v202101beta1.MeshMetrics.latency:type_name -> kentik.synthetics.v202101beta1.MeshMetric
	34, // 47: kentik.synthetics.v202101beta1.MeshMetrics.packet_loss:type_name -> kentik.synthetics.v202101beta1.MeshMetric
	34, // 48: kentik.synthetics.v202101beta1.MeshMetrics.jitter:type_name -> kentik.synthetics.v202101beta1.MeshMetric
	37, // 49: kentik.synthetics.v202101beta1.Geo.country:type_name -> kentik.synthetics.v202101beta1.Country
	38, // 50: kentik.synthetics.v202101beta1.Geo.region:type_name -> kentik.synthetics.v202101beta1.Region
	39, // 51: kentik.synthetics.v202101beta1.Geo.city:type_name -> kentik.synthetics.v202101beta1.City
	36, // 52: kentik.synthetics.v202101beta1.IPInfo.asn:type_name -> kentik.synthetics.v202101beta1.ASN
	40, // 53: kentik.synthetics.v202101beta1.IPInfo.geo:type_name -> kentik.synthetics.v202101beta1.Geo
	42, // 54: kentik.synthetics.v202101beta1.Trace.hops:type_name -> kentik.synthetics.v202101beta1.TraceHop
	71, // 55: kentik.synthetics.v202101beta1.TracerouteResult.time:type_name -> google.protobuf.Timestamp
	43, // 56: kentik.synthetics.v202101beta1.TracerouteResult.traces:type_name -> kentik.synthetics.v202101beta1.Trace
	71, // 57: kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time:type_name -> google.protobuf.Timestamp
	71, // 58: kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time:type_name -> google.protobuf.Timestamp
	5,  // 59: kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health:type_name -> kentik.synthetics.v202101beta1.TestHealth
	71, // 60: kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time:type_name -> google.protobuf.Timestamp
	71, // 61: kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time:type_name -> google.protobuf.Timestamp
	41, // 62: kentik.synthetics.v202101beta1.GetTraceForTestResponse.ip_info:type_name -> kentik.synthetics.v202101beta1.IPInfo
	44, // 63: kentik.synthetics.v202101beta1.GetTraceForTestResponse.results:type_name -> kentik.synthetics.v202101beta1.TracerouteResult
	9,  // 64: kentik.synthetics.v202101beta1.ListAgentsResponse.agents:type_name -> kentik.synthetics.v202101beta1.Agent
	9,  // 65: kentik.synthetics.v202101beta1.GetAgentResponse.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	9,  // 66: kentik.synthetics.v202101beta1.PatchAgentRequest.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	72, // 67: kentik.synthetics.v202101beta1.PatchAgentRequest.mask:type_name -> google.protobuf.FieldMask
	9,  // 68: kentik.synthetics.v202101beta1.PatchAgentResponse.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	18, // 69: kentik.synthetics.v202101beta1.ListTestsResponse.tests:type_name -> kentik.synthetics.v202101beta1.Test
	18, // 70: kentik.synthetics.v202101beta1.CreateTestRequest.test:type_name -> kentik.synthetics.v202101beta1.Test
	18, // 71: kentik.synthetics.v202101beta1.CreateTestResponse.test:type_name -> kentik.synthetics.v202101beta1.Test
	18, // 72: kentik.synthetics.v202101beta1.GetTestResponse.test:type_name -> kentik.synthetics.v202101beta1.Test
	1,  // 73: kentik.synthetics.v202101beta1.SetTestStatusRequest.status:type_name -> kentik.synthetics.v202101beta1.TestStatus
	18, // 74: kentik.synthetics.v202101beta1.PatchTestRequest.test:type_name -> kentik.synthetics.v202101beta1.Test
	72, // 75: kentik.synthetics.v202101beta1.PatchTestRequest.mask:type_name -> google.protobuf.FieldMask
	18, // 76: kentik.synthetics.v202101beta1.PatchTestResponse.test:type_name -> kentik.synthetics.v202101beta1.Test
	45, // 77: kentik.synthetics.v202101beta1.SyntheticsDataService.GetHealthForTests:input_type -> kentik.synthetics.v202101beta1.GetHealthForTestsRequest
	47, // 78: kentik.synthetics.v202101beta1.SyntheticsDataService.GetTraceForTest:input_type -> kentik.synthetics.v202101beta1.GetTraceForTestRequest
	49, // 79: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListAgents:input_type -> kentik.synthetics.v202101beta1.ListAgentsRequest
	51, // 80: kentik.synthetics.v202101beta1.SyntheticsAdminService.CreateAgent:input_type -> kentik.synthetics.v202101beta1.CreateAgentRequest
	53, // 81: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetAgent:input_type -> kentik.synthetics.v202101beta1.GetAgentRequest
	55, // 82: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchAgent:input_type -> kentik.synthetics.v202101beta1.PatchAgentRequest
	57, // 83: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteAgent:input_type -> kentik.synthetics.v202101beta1.DeleteAgentRequest
	59, // 84: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListTests:input_type -> kentik.synthetics.v202101beta1.ListTestsRequest
	61, // 85: kentik.synthetics.v202101beta1.SyntheticsAdminService.CreateTest:input_type -> kentik.synthetics.v202101beta1.CreateTestRequest
	63, // 86: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetTest:input_type -> kentik.synthetics.v202101beta1.GetTestRequest
	65, // 87: kentik.synthetics.v202101beta1.SyntheticsAdminService.SetTestStatus:input_type -> kentik.synthetics.v202101beta1.SetTestStatusRequest
	67, // 88: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchTest:input_type -> kentik.synthetics.v202101beta1.PatchTestRequest
	69, // 89: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteTest:input_type -> kentik.synthetics.v202101beta1.DeleteTestRequest
	46, // 90: kentik.synthetics.v202101beta1.SyntheticsDataService.GetHealthForTests:output_type -> kentik.synthetics.v202101beta1.GetHealthForTestsResponse
	48, // 91: kentik.synthetics.v202101beta1.SyntheticsDataService.GetTraceForTest:output_type -> kentik.synthetics.v202101beta1.GetTraceForTestResponse
	50, // 92: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListAgents:output_type -> kentik.synthetics.v202101beta1.ListAgentsResponse
	52, // 93: kentik.synthetics.v202101beta1.SyntheticsAdminService.CreateAgent:output_type -> kentik.synthetics.v202101beta1.CreateAgentResponse
	54, // 94: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetAgent:output_type -> kentik.synthetics.v202101beta1.GetAgentResponse
	56, // 95: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchAgent:output_type -> kentik.synthetics.v202101beta1.PatchAgentResponse
	58, // 96: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteAgent:output_type -> kentik.synthetics.v202101beta1.DeleteAgentResponse
	60, // 97: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListTests:output_type -> kentik.synthetics.v202101beta1.ListTestsResponse
	62, // 98: kentik.synthetics.v202101beta1.SyntheticsAdminService.CreateTest:output_type -> kentik.synthetics.v202101beta1.CreateTestResponse
	64, // 99: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetTest:output_type -> kentik.synthetics.v202101beta1.GetTestResponse
	66, // 100: kentik.synthetics.v202101beta1.SyntheticsAdminService.SetTestStatus:output_type -> kentik.synthetics.v202101beta1.SetTestStatusResponse
	68, // 101: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchTest:output_type -> kentik.synthetics.v202101beta1.PatchTestResponse
	70, // 102: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteTest:output_type -> kentik.synthetics.v202101beta1.DeleteTestResponse
	90, // [90:103] is the sub-list for method output_type
	77, // [77:90] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_kentik_synthetics_v202101beta1_synthetics_proto_init() }
func file_kentik_synthetics_v202101beta1_synthetics_proto_init() {
	if File_kentik_synthetics_v202101beta1_synthetics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnockTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShakeTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTraceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMonitoringSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnameTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthForTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthForTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTestStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTestStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Task_Ping)(nil),
		(*Task_Traceroute)(nil),
		(*Task_Http)(nil),
		(*Task_Knock)(nil),
		(*Task_Dns)(nil),
		(*Task_Shake)(nil),
	}
	file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TestSettings_Hostname)(nil),
		(*TestSettings_Ip)(nil),
		(*TestSettings_Agent)(nil),
		(*TestSettings_Flow)(nil),
		(*TestSettings_Site)(nil),
		(*TestSettings_Tag)(nil),
		(*TestSettings_Dns)(nil),
		(*TestSettings_Url)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kentik_synthetics_v202101beta1_synthetics_proto_goTypes,
		DependencyIndexes: file_kentik_synthetics_v202101beta1_synthetics_proto_depIdxs,
		EnumInfos:         file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes,
		MessageInfos:      file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes,
	}.Build()
	File_kentik_synthetics_v202101beta1_synthetics_proto = out.File
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc = nil
	file_kentik_synthetics_v202101beta1_synthetics_proto_goTypes = nil
	file_kentik_synthetics_v202101beta1_synthetics_proto_depIdxs = nil
}
