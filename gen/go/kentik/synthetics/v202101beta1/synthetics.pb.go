// Synthetics data and admin APIs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kentik/synthetics/v202101beta1/synthetics.proto

package synthetics

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Agent impl type determines global vs private agent to use for specific test types.
type ImplementType int32

const (
	ImplementType_IMPLEMENT_TYPE_UNSPECIFIED ImplementType = 0
	// setup IP test against a NODE global agent will fail.
	ImplementType_IMPLEMENT_TYPE_RUST ImplementType = 1
	// setup a page load test against a RUST global agent will fail.
	ImplementType_IMPLEMENT_TYPE_NODE ImplementType = 2
)

// Enum value maps for ImplementType.
var (
	ImplementType_name = map[int32]string{
		0: "IMPLEMENT_TYPE_UNSPECIFIED",
		1: "IMPLEMENT_TYPE_RUST",
		2: "IMPLEMENT_TYPE_NODE",
	}
	ImplementType_value = map[string]int32{
		"IMPLEMENT_TYPE_UNSPECIFIED": 0,
		"IMPLEMENT_TYPE_RUST":        1,
		"IMPLEMENT_TYPE_NODE":        2,
	}
)

func (x ImplementType) Enum() *ImplementType {
	p := new(ImplementType)
	*p = x
	return p
}

func (x ImplementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplementType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[0].Descriptor()
}

func (ImplementType) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[0]
}

func (x ImplementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplementType.Descriptor instead.
func (ImplementType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{0}
}

type IPFamily int32

const (
	IPFamily_IP_FAMILY_UNSPECIFIED IPFamily = 0 // Invalid value.
	IPFamily_IP_FAMILY_V4          IPFamily = 1
	IPFamily_IP_FAMILY_V6          IPFamily = 2
	IPFamily_IP_FAMILY_DUAL        IPFamily = 3
)

// Enum value maps for IPFamily.
var (
	IPFamily_name = map[int32]string{
		0: "IP_FAMILY_UNSPECIFIED",
		1: "IP_FAMILY_V4",
		2: "IP_FAMILY_V6",
		3: "IP_FAMILY_DUAL",
	}
	IPFamily_value = map[string]int32{
		"IP_FAMILY_UNSPECIFIED": 0,
		"IP_FAMILY_V4":          1,
		"IP_FAMILY_V6":          2,
		"IP_FAMILY_DUAL":        3,
	}
)

func (x IPFamily) Enum() *IPFamily {
	p := new(IPFamily)
	*p = x
	return p
}

func (x IPFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[1].Descriptor()
}

func (IPFamily) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[1]
}

func (x IPFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPFamily.Descriptor instead.
func (IPFamily) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{1}
}

type TestStatus int32

const (
	TestStatus_TEST_STATUS_UNSPECIFIED TestStatus = 0 // Invalid value.
	TestStatus_TEST_STATUS_ACTIVE      TestStatus = 1 // Test is active.
	TestStatus_TEST_STATUS_PAUSED      TestStatus = 2 // Test is paused.
	TestStatus_TEST_STATUS_DELETED     TestStatus = 3 // Test is deleted. Not settable via SetTestStatus.
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "TEST_STATUS_ACTIVE",
		2: "TEST_STATUS_PAUSED",
		3: "TEST_STATUS_DELETED",
	}
	TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"TEST_STATUS_ACTIVE":      1,
		"TEST_STATUS_PAUSED":      2,
		"TEST_STATUS_DELETED":     3,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[2].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[2]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{2}
}

type AgentStatus int32

const (
	AgentStatus_AGENT_STATUS_UNSPECIFIED AgentStatus = 0 // Invalid value.
	AgentStatus_AGENT_STATUS_OK          AgentStatus = 1
	AgentStatus_AGENT_STATUS_WAIT        AgentStatus = 2
	AgentStatus_AGENT_STATUS_DELETED     AgentStatus = 3
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0: "AGENT_STATUS_UNSPECIFIED",
		1: "AGENT_STATUS_OK",
		2: "AGENT_STATUS_WAIT",
		3: "AGENT_STATUS_DELETED",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNSPECIFIED": 0,
		"AGENT_STATUS_OK":          1,
		"AGENT_STATUS_WAIT":        2,
		"AGENT_STATUS_DELETED":     3,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[3].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[3]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{3}
}

type TaskState int32

const (
	TaskState_TASK_STATE_UNSPECIFIED TaskState = 0 // Invalid value.
	TaskState_TASK_STATE_CREATED     TaskState = 1
	TaskState_TASK_STATE_UPDATED     TaskState = 2
	TaskState_TASK_STATE_DELETED     TaskState = 3
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TASK_STATE_UNSPECIFIED",
		1: "TASK_STATE_CREATED",
		2: "TASK_STATE_UPDATED",
		3: "TASK_STATE_DELETED",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED": 0,
		"TASK_STATE_CREATED":     1,
		"TASK_STATE_UPDATED":     2,
		"TASK_STATE_DELETED":     3,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[4].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[4]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{4}
}

type DNSRecord int32

const (
	DNSRecord_DNS_RECORD_UNSPECIFIED DNSRecord = 0
	DNSRecord_DNS_RECORD_A           DNSRecord = 1
	DNSRecord_DNS_RECORD_AAAA        DNSRecord = 2
	DNSRecord_DNS_RECORD_CNAME       DNSRecord = 3
	DNSRecord_DNS_RECORD_DNAME       DNSRecord = 4
	DNSRecord_DNS_RECORD_NS          DNSRecord = 5
	DNSRecord_DNS_RECORD_MX          DNSRecord = 6
	DNSRecord_DNS_RECORD_PTR         DNSRecord = 7
	DNSRecord_DNS_RECORD_SOA         DNSRecord = 8
)

// Enum value maps for DNSRecord.
var (
	DNSRecord_name = map[int32]string{
		0: "DNS_RECORD_UNSPECIFIED",
		1: "DNS_RECORD_A",
		2: "DNS_RECORD_AAAA",
		3: "DNS_RECORD_CNAME",
		4: "DNS_RECORD_DNAME",
		5: "DNS_RECORD_NS",
		6: "DNS_RECORD_MX",
		7: "DNS_RECORD_PTR",
		8: "DNS_RECORD_SOA",
	}
	DNSRecord_value = map[string]int32{
		"DNS_RECORD_UNSPECIFIED": 0,
		"DNS_RECORD_A":           1,
		"DNS_RECORD_AAAA":        2,
		"DNS_RECORD_CNAME":       3,
		"DNS_RECORD_DNAME":       4,
		"DNS_RECORD_NS":          5,
		"DNS_RECORD_MX":          6,
		"DNS_RECORD_PTR":         7,
		"DNS_RECORD_SOA":         8,
	}
)

func (x DNSRecord) Enum() *DNSRecord {
	p := new(DNSRecord)
	*p = x
	return p
}

func (x DNSRecord) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSRecord) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[5].Descriptor()
}

func (DNSRecord) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes[5]
}

func (x DNSRecord) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSRecord.Descriptor instead.
func (DNSRecord) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{5}
}

type Health struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Health        string                 `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Health) Reset() {
	*x = Health{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{0}
}

func (x *Health) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Health) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AgentTaskConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Targets       []string               `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentTaskConfig) Reset() {
	*x = AgentTaskConfig{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentTaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTaskConfig) ProtoMessage() {}

func (x *AgentTaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTaskConfig.ProtoReflect.Descriptor instead.
func (*AgentTaskConfig) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{1}
}

func (x *AgentTaskConfig) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AgentTaskConfig) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type TestHealth struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TestId          string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Tasks           []*TaskHealth          `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	OverallHealth   *Health                `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	HealthTs        []*Health              `protobuf:"bytes,4,rep,name=health_ts,json=healthTs,proto3" json:"health_ts,omitempty"`
	AgentTaskConfig []*AgentTaskConfig     `protobuf:"bytes,5,rep,name=agent_task_config,json=agentTaskConfig,proto3" json:"agent_task_config,omitempty"`
	Mesh            []*MeshResponse        `protobuf:"bytes,6,rep,name=mesh,proto3" json:"mesh,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestHealth) Reset() {
	*x = TestHealth{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestHealth) ProtoMessage() {}

func (x *TestHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestHealth.ProtoReflect.Descriptor instead.
func (*TestHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{2}
}

func (x *TestHealth) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestHealth) GetTasks() []*TaskHealth {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TestHealth) GetHealthTs() []*Health {
	if x != nil {
		return x.HealthTs
	}
	return nil
}

func (x *TestHealth) GetAgentTaskConfig() []*AgentTaskConfig {
	if x != nil {
		return x.AgentTaskConfig
	}
	return nil
}

func (x *TestHealth) GetMesh() []*MeshResponse {
	if x != nil {
		return x.Mesh
	}
	return nil
}

type TaskHealth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Agents        []*AgentHealth         `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	OverallHealth *Health                `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	TargetAgent   *Agent                 `protobuf:"bytes,4,opt,name=target_agent,json=targetAgent,proto3" json:"target_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskHealth) Reset() {
	*x = TaskHealth{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHealth) ProtoMessage() {}

func (x *TaskHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHealth.ProtoReflect.Descriptor instead.
func (*TaskHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{3}
}

func (x *TaskHealth) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskHealth) GetAgents() []*AgentHealth {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *TaskHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TaskHealth) GetTargetAgent() *Agent {
	if x != nil {
		return x.TargetAgent
	}
	return nil
}

type AgentHealth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Health        []*HealthMoment        `protobuf:"bytes,2,rep,name=health,proto3" json:"health,omitempty"`
	OverallHealth *Health                `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentHealth) Reset() {
	*x = AgentHealth{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealth) ProtoMessage() {}

func (x *AgentHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealth.ProtoReflect.Descriptor instead.
func (*AgentHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{4}
}

func (x *AgentHealth) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *AgentHealth) GetHealth() []*HealthMoment {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *AgentHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type HealthMoment struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Time                      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	SrcIp                     string                 `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp                     string                 `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	PacketLoss                float64                `protobuf:"fixed64,4,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	AvgLatency                uint32                 `protobuf:"varint,5,opt,name=avg_latency,json=avgLatency,proto3" json:"avg_latency,omitempty"`
	AvgWeightedLatency        uint32                 `protobuf:"varint,6,opt,name=avg_weighted_latency,json=avgWeightedLatency,proto3" json:"avg_weighted_latency,omitempty"`
	RollingAvgLatency         uint32                 `protobuf:"varint,7,opt,name=rolling_avg_latency,json=rollingAvgLatency,proto3" json:"rolling_avg_latency,omitempty"`
	RollingStddevLatency      uint32                 `protobuf:"varint,8,opt,name=rolling_stddev_latency,json=rollingStddevLatency,proto3" json:"rolling_stddev_latency,omitempty"`
	RollingAvgWeightedLatency uint32                 `protobuf:"varint,9,opt,name=rolling_avg_weighted_latency,json=rollingAvgWeightedLatency,proto3" json:"rolling_avg_weighted_latency,omitempty"`
	LatencyHealth             string                 `protobuf:"bytes,10,opt,name=latency_health,json=latencyHealth,proto3" json:"latency_health,omitempty"`
	PacketLossHealth          string                 `protobuf:"bytes,11,opt,name=packet_loss_health,json=packetLossHealth,proto3" json:"packet_loss_health,omitempty"`
	OverallHealth             *Health                `protobuf:"bytes,12,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	// fields returned from backend grpc service
	AvgJitter        uint32            `protobuf:"varint,13,opt,name=avg_jitter,json=avgJitter,proto3" json:"avg_jitter,omitempty"`
	RollingAvgJitter uint32            `protobuf:"varint,14,opt,name=rolling_avg_jitter,json=rollingAvgJitter,proto3" json:"rolling_avg_jitter,omitempty"`
	RollingStdJitter uint32            `protobuf:"varint,15,opt,name=rolling_std_jitter,json=rollingStdJitter,proto3" json:"rolling_std_jitter,omitempty"`
	JitterHealth     string            `protobuf:"bytes,16,opt,name=jitter_health,json=jitterHealth,proto3" json:"jitter_health,omitempty"`
	Data             string            `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`
	Size             uint32            `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`
	Status           uint32            `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	TaskType         string            `protobuf:"bytes,20,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	OtherHealths     map[string]string `protobuf:"bytes,21,rep,name=other_healths,json=otherHealths,proto3" json:"other_healths,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HealthMoment) Reset() {
	*x = HealthMoment{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMoment) ProtoMessage() {}

func (x *HealthMoment) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMoment.ProtoReflect.Descriptor instead.
func (*HealthMoment) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{5}
}

func (x *HealthMoment) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HealthMoment) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *HealthMoment) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *HealthMoment) GetPacketLoss() float64 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *HealthMoment) GetAvgLatency() uint32 {
	if x != nil {
		return x.AvgLatency
	}
	return 0
}

func (x *HealthMoment) GetAvgWeightedLatency() uint32 {
	if x != nil {
		return x.AvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgLatency() uint32 {
	if x != nil {
		return x.RollingAvgLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingStddevLatency() uint32 {
	if x != nil {
		return x.RollingStddevLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgWeightedLatency() uint32 {
	if x != nil {
		return x.RollingAvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetLatencyHealth() string {
	if x != nil {
		return x.LatencyHealth
	}
	return ""
}

func (x *HealthMoment) GetPacketLossHealth() string {
	if x != nil {
		return x.PacketLossHealth
	}
	return ""
}

func (x *HealthMoment) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *HealthMoment) GetAvgJitter() uint32 {
	if x != nil {
		return x.AvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgJitter() uint32 {
	if x != nil {
		return x.RollingAvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingStdJitter() uint32 {
	if x != nil {
		return x.RollingStdJitter
	}
	return 0
}

func (x *HealthMoment) GetJitterHealth() string {
	if x != nil {
		return x.JitterHealth
	}
	return ""
}

func (x *HealthMoment) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HealthMoment) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HealthMoment) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HealthMoment) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *HealthMoment) GetOtherHealths() map[string]string {
	if x != nil {
		return x.OtherHealths
	}
	return nil
}

type Agent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of this agent.
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // revert site_name to name to prevent breaking existing users
	Status        AgentStatus            `protobuf:"varint,3,opt,name=status,proto3,enum=kentik.synthetics.v202101beta1.AgentStatus" json:"status,omitempty"`
	Alias         string                 `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Os            string                 `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	Ip            string                 `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat           float64                `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`
	Long          float64                `protobuf:"fixed64,9,opt,name=long,proto3" json:"long,omitempty"`
	LastAuthed    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_authed,json=lastAuthed,proto3" json:"last_authed,omitempty"`
	Family        IPFamily               `protobuf:"varint,11,opt,name=family,proto3,enum=kentik.synthetics.v202101beta1.IPFamily" json:"family,omitempty"`
	Asn           uint32                 `protobuf:"varint,12,opt,name=asn,proto3" json:"asn,omitempty"`
	SiteId        string                 `protobuf:"bytes,13,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	Version       string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	Challenge     string                 `protobuf:"bytes,15,opt,name=challenge,proto3" json:"challenge,omitempty"`
	City          string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	Region        string                 `protobuf:"bytes,17,opt,name=region,proto3" json:"region,omitempty"`
	Country       string                 `protobuf:"bytes,18,opt,name=country,proto3" json:"country,omitempty"`
	TestIds       []string               `protobuf:"bytes,19,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	LocalIp       string                 `protobuf:"bytes,20,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	CloudVpc      string                 `protobuf:"bytes,21,opt,name=cloud_vpc,json=cloudVpc,proto3" json:"cloud_vpc,omitempty"`
	AgentImpl     ImplementType          `protobuf:"varint,22,opt,name=agent_impl,json=agentImpl,proto3,enum=kentik.synthetics.v202101beta1.ImplementType" json:"agent_impl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{6}
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Agent) GetStatus() AgentStatus {
	if x != nil {
		return x.Status
	}
	return AgentStatus_AGENT_STATUS_UNSPECIFIED
}

func (x *Agent) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Agent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Agent) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Agent) GetLastAuthed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAuthed
	}
	return nil
}

func (x *Agent) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Agent) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Agent) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Agent) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *Agent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Agent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Agent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Agent) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

func (x *Agent) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *Agent) GetCloudVpc() string {
	if x != nil {
		return x.CloudVpc
	}
	return ""
}

func (x *Agent) GetAgentImpl() ImplementType {
	if x != nil {
		return x.AgentImpl
	}
	return ImplementType_IMPLEMENT_TYPE_UNSPECIFIED
}

type PingTaskDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period        uint32                 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry        uint32                 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count         uint32                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingTaskDefinition) Reset() {
	*x = PingTaskDefinition{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTaskDefinition) ProtoMessage() {}

func (x *PingTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTaskDefinition.ProtoReflect.Descriptor instead.
func (*PingTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{7}
}

func (x *PingTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PingTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *PingTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *PingTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TraceTaskDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period        uint32                 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry        uint32                 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit         uint32                 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceTaskDefinition) Reset() {
	*x = TraceTaskDefinition{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTaskDefinition) ProtoMessage() {}

func (x *TraceTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTaskDefinition.ProtoReflect.Descriptor instead.
func (*TraceTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{8}
}

func (x *TraceTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TraceTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TraceTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TraceTaskDefinition) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type HTTPTaskDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period        uint32                 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry        uint32                 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPTaskDefinition) Reset() {
	*x = HTTPTaskDefinition{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTaskDefinition) ProtoMessage() {}

func (x *HTTPTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTaskDefinition.ProtoReflect.Descriptor instead.
func (*HTTPTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{9}
}

func (x *HTTPTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HTTPTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *HTTPTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type Task struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestId   string                 `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	DeviceId string                 `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	State    TaskState              `protobuf:"varint,4,opt,name=state,proto3,enum=kentik.synthetics.v202101beta1.TaskState" json:"state,omitempty"`
	Status   string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Family   IPFamily               `protobuf:"varint,6,opt,name=family,proto3,enum=kentik.synthetics.v202101beta1.IPFamily" json:"family,omitempty"`
	// Types that are valid to be assigned to Definition:
	//
	//	*Task_Ping
	//	*Task_Traceroute
	//	*Task_Http
	//	*Task_Knock
	//	*Task_Dns
	//	*Task_Shake
	Definition    isTask_Definition `protobuf_oneof:"definition"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{10}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *Task) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Task) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Task) GetDefinition() isTask_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Task) GetPing() *PingTaskDefinition {
	if x != nil {
		if x, ok := x.Definition.(*Task_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *Task) GetTraceroute() *TraceTaskDefinition {
	if x != nil {
		if x, ok := x.Definition.(*Task_Traceroute); ok {
			return x.Traceroute
		}
	}
	return nil
}

func (x *Task) GetHttp() *HTTPTaskDefinition {
	if x != nil {
		if x, ok := x.Definition.(*Task_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *Task) GetKnock() *KnockTaskDefinition {
	if x != nil {
		if x, ok := x.Definition.(*Task_Knock); ok {
			return x.Knock
		}
	}
	return nil
}

func (x *Task) GetDns() *DNSTaskDefinition {
	if x != nil {
		if x, ok := x.Definition.(*Task_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

func (x *Task) GetShake() *ShakeTaskDefinition {
	if x != nil {
		if x, ok := x.Definition.(*Task_Shake); ok {
			return x.Shake
		}
	}
	return nil
}

type isTask_Definition interface {
	isTask_Definition()
}

type Task_Ping struct {
	Ping *PingTaskDefinition `protobuf:"bytes,9,opt,name=ping,proto3,oneof"`
}

type Task_Traceroute struct {
	Traceroute *TraceTaskDefinition `protobuf:"bytes,10,opt,name=traceroute,proto3,oneof"`
}

type Task_Http struct {
	Http *HTTPTaskDefinition `protobuf:"bytes,11,opt,name=http,proto3,oneof"`
}

type Task_Knock struct {
	Knock *KnockTaskDefinition `protobuf:"bytes,12,opt,name=knock,proto3,oneof"`
}

type Task_Dns struct {
	Dns *DNSTaskDefinition `protobuf:"bytes,13,opt,name=dns,proto3,oneof"`
}

type Task_Shake struct {
	Shake *ShakeTaskDefinition `protobuf:"bytes,14,opt,name=shake,proto3,oneof"`
}

func (*Task_Ping) isTask_Definition() {}

func (*Task_Traceroute) isTask_Definition() {}

func (*Task_Http) isTask_Definition() {}

func (*Task_Knock) isTask_Definition() {}

func (*Task_Dns) isTask_Definition() {}

func (*Task_Shake) isTask_Definition() {}

type KnockTaskDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period        uint32                 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry        uint32                 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count         uint32                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Port          uint32                 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnockTaskDefinition) Reset() {
	*x = KnockTaskDefinition{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnockTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnockTaskDefinition) ProtoMessage() {}

func (x *KnockTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnockTaskDefinition.ProtoReflect.Descriptor instead.
func (*KnockTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{11}
}

func (x *KnockTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *KnockTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *KnockTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *KnockTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *KnockTaskDefinition) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DNSTaskDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period        uint32                 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry        uint32                 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count         uint32                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Port          uint32                 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Type          string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Resolver      string                 `protobuf:"bytes,7,opt,name=resolver,proto3" json:"resolver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSTaskDefinition) Reset() {
	*x = DNSTaskDefinition{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSTaskDefinition) ProtoMessage() {}

func (x *DNSTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSTaskDefinition.ProtoReflect.Descriptor instead.
func (*DNSTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{12}
}

func (x *DNSTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DNSTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *DNSTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *DNSTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DNSTaskDefinition) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DNSTaskDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNSTaskDefinition) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

type ShakeTaskDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Period        uint32                 `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	Expiry        uint32                 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShakeTaskDefinition) Reset() {
	*x = ShakeTaskDefinition{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShakeTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShakeTaskDefinition) ProtoMessage() {}

func (x *ShakeTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShakeTaskDefinition.ProtoReflect.Descriptor instead.
func (*ShakeTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{13}
}

func (x *ShakeTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ShakeTaskDefinition) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ShakeTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ShakeTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName      string                 `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{14}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type Test struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	DeviceId      string                 `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Status        TestStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=kentik.synthetics.v202101beta1.TestStatus" json:"status,omitempty"`
	Settings      *TestSettings          `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	ExpiresOn     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=edate,proto3" json:"edate,omitempty"`
	CreatedBy     *UserInfo              `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedBy *UserInfo              `protobuf:"bytes,11,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Test) Reset() {
	*x = Test{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{15}
}

func (x *Test) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Test) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Test) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *Test) GetSettings() *TestSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Test) GetExpiresOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresOn
	}
	return nil
}

func (x *Test) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Test) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Test) GetCreatedBy() *UserInfo {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Test) GetLastUpdatedBy() *UserInfo {
	if x != nil {
		return x.LastUpdatedBy
	}
	return nil
}

type HTTPConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Period          uint32                 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Expiry          uint32                 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Method          string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Headers         map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body            string                 `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	IgnoreTlsErrors bool                   `protobuf:"varint,6,opt,name=ignore_tls_errors,json=ignoreTlsErrors,proto3" json:"ignore_tls_errors,omitempty"`
	CssSelectors    map[string]string      `protobuf:"bytes,7,rep,name=css_selectors,json=cssSelectors,proto3" json:"css_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HTTPConfig) Reset() {
	*x = HTTPConfig{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConfig) ProtoMessage() {}

func (x *HTTPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConfig.ProtoReflect.Descriptor instead.
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{16}
}

func (x *HTTPConfig) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *HTTPConfig) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *HTTPConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPConfig) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HTTPConfig) GetIgnoreTlsErrors() bool {
	if x != nil {
		return x.IgnoreTlsErrors
	}
	return false
}

func (x *HTTPConfig) GetCssSelectors() map[string]string {
	if x != nil {
		return x.CssSelectors
	}
	return nil
}

type TestSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Definition:
	//
	//	*TestSettings_Hostname
	//	*TestSettings_Ip
	//	*TestSettings_Agent
	//	*TestSettings_Flow
	//	*TestSettings_Site
	//	*TestSettings_Tag
	//	*TestSettings_Dns
	//	*TestSettings_Url
	//	*TestSettings_NetworkGrid
	//	*TestSettings_PageLoad
	//	*TestSettings_DnsGrid
	//	*TestSettings_ApplicationMesh
	Definition         isTestSettings_Definition `protobuf_oneof:"definition"`
	AgentIds           []string                  `protobuf:"bytes,14,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Period             uint32                    `protobuf:"varint,15,opt,name=period,proto3" json:"period,omitempty"`
	Count              uint32                    `protobuf:"varint,16,opt,name=count,proto3" json:"count,omitempty"`
	Expiry             uint32                    `protobuf:"varint,17,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit              uint32                    `protobuf:"varint,18,opt,name=limit,proto3" json:"limit,omitempty"`
	Tasks              []string                  `protobuf:"bytes,19,rep,name=tasks,proto3" json:"tasks,omitempty"` // Task types.
	HealthSettings     *HealthSettings           `protobuf:"bytes,22,opt,name=health_settings,json=healthSettings,proto3" json:"health_settings,omitempty"`
	MonitoringSettings *TestMonitoringSettings   `protobuf:"bytes,24,opt,name=monitoring_settings,json=monitoringSettings,proto3" json:"monitoring_settings,omitempty"`
	Ping               *TestPingSettings         `protobuf:"bytes,28,opt,name=ping,proto3" json:"ping,omitempty"`
	Trace              *TestTraceSettings        `protobuf:"bytes,29,opt,name=trace,proto3" json:"trace,omitempty"`
	Port               uint32                    `protobuf:"varint,23,opt,name=port,proto3" json:"port,omitempty"`
	Protocol           string                    `protobuf:"bytes,26,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Family             IPFamily                  `protobuf:"varint,27,opt,name=family,proto3,enum=kentik.synthetics.v202101beta1.IPFamily" json:"family,omitempty"`
	Servers            []string                  `protobuf:"bytes,30,rep,name=servers,proto3" json:"servers,omitempty"`
	UseLocalIp         bool                      `protobuf:"varint,31,opt,name=use_local_ip,json=useLocalIp,proto3" json:"use_local_ip,omitempty"`
	Reciprocal         bool                      `protobuf:"varint,32,opt,name=reciprocal,proto3" json:"reciprocal,omitempty"`
	RollupLevel        uint32                    `protobuf:"varint,33,opt,name=rollup_level,json=rollupLevel,proto3" json:"rollup_level,omitempty"`
	Http               *HTTPConfig               `protobuf:"bytes,34,opt,name=http,proto3" json:"http,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TestSettings) Reset() {
	*x = TestSettings{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSettings) ProtoMessage() {}

func (x *TestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSettings.ProtoReflect.Descriptor instead.
func (*TestSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{17}
}

func (x *TestSettings) GetDefinition() isTestSettings_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *TestSettings) GetHostname() *HostnameTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Hostname); ok {
			return x.Hostname
		}
	}
	return nil
}

func (x *TestSettings) GetIp() *IpTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Ip); ok {
			return x.Ip
		}
	}
	return nil
}

func (x *TestSettings) GetAgent() *AgentTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Agent); ok {
			return x.Agent
		}
	}
	return nil
}

func (x *TestSettings) GetFlow() *FlowTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Flow); ok {
			return x.Flow
		}
	}
	return nil
}

func (x *TestSettings) GetSite() *SiteTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Site); ok {
			return x.Site
		}
	}
	return nil
}

func (x *TestSettings) GetTag() *TagTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Tag); ok {
			return x.Tag
		}
	}
	return nil
}

func (x *TestSettings) GetDns() *DnsTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

func (x *TestSettings) GetUrl() *UrlTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Url); ok {
			return x.Url
		}
	}
	return nil
}

func (x *TestSettings) GetNetworkGrid() *GridTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_NetworkGrid); ok {
			return x.NetworkGrid
		}
	}
	return nil
}

func (x *TestSettings) GetPageLoad() *UrlTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_PageLoad); ok {
			return x.PageLoad
		}
	}
	return nil
}

func (x *TestSettings) GetDnsGrid() *DnsGridTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_DnsGrid); ok {
			return x.DnsGrid
		}
	}
	return nil
}

func (x *TestSettings) GetApplicationMesh() *ApplicationMeshTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_ApplicationMesh); ok {
			return x.ApplicationMesh
		}
	}
	return nil
}

func (x *TestSettings) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TestSettings) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestSettings) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestSettings) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TestSettings) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TestSettings) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestSettings) GetHealthSettings() *HealthSettings {
	if x != nil {
		return x.HealthSettings
	}
	return nil
}

func (x *TestSettings) GetMonitoringSettings() *TestMonitoringSettings {
	if x != nil {
		return x.MonitoringSettings
	}
	return nil
}

func (x *TestSettings) GetPing() *TestPingSettings {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *TestSettings) GetTrace() *TestTraceSettings {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TestSettings) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestSettings) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *TestSettings) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *TestSettings) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

func (x *TestSettings) GetReciprocal() bool {
	if x != nil {
		return x.Reciprocal
	}
	return false
}

func (x *TestSettings) GetRollupLevel() uint32 {
	if x != nil {
		return x.RollupLevel
	}
	return 0
}

func (x *TestSettings) GetHttp() *HTTPConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

type isTestSettings_Definition interface {
	isTestSettings_Definition()
}

type TestSettings_Hostname struct {
	Hostname *HostnameTest `protobuf:"bytes,4,opt,name=hostname,proto3,oneof"`
}

type TestSettings_Ip struct {
	Ip *IpTest `protobuf:"bytes,5,opt,name=ip,proto3,oneof"`
}

type TestSettings_Agent struct {
	Agent *AgentTest `protobuf:"bytes,6,opt,name=agent,proto3,oneof"`
}

type TestSettings_Flow struct {
	Flow *FlowTest `protobuf:"bytes,7,opt,name=flow,proto3,oneof"`
}

type TestSettings_Site struct {
	Site *SiteTest `protobuf:"bytes,8,opt,name=site,proto3,oneof"`
}

type TestSettings_Tag struct {
	Tag *TagTest `protobuf:"bytes,9,opt,name=tag,proto3,oneof"`
}

type TestSettings_Dns struct {
	Dns *DnsTest `protobuf:"bytes,10,opt,name=dns,proto3,oneof"`
}

type TestSettings_Url struct {
	Url *UrlTest `protobuf:"bytes,11,opt,name=url,proto3,oneof"`
}

type TestSettings_NetworkGrid struct {
	NetworkGrid *GridTest `protobuf:"bytes,35,opt,name=network_grid,json=networkGrid,proto3,oneof"`
}

type TestSettings_PageLoad struct {
	PageLoad *UrlTest `protobuf:"bytes,36,opt,name=page_load,json=pageLoad,proto3,oneof"`
}

type TestSettings_DnsGrid struct {
	DnsGrid *DnsGridTest `protobuf:"bytes,37,opt,name=dns_grid,json=dnsGrid,proto3,oneof"`
}

type TestSettings_ApplicationMesh struct {
	ApplicationMesh *ApplicationMeshTest `protobuf:"bytes,38,opt,name=application_mesh,json=applicationMesh,proto3,oneof"`
}

func (*TestSettings_Hostname) isTestSettings_Definition() {}

func (*TestSettings_Ip) isTestSettings_Definition() {}

func (*TestSettings_Agent) isTestSettings_Definition() {}

func (*TestSettings_Flow) isTestSettings_Definition() {}

func (*TestSettings_Site) isTestSettings_Definition() {}

func (*TestSettings_Tag) isTestSettings_Definition() {}

func (*TestSettings_Dns) isTestSettings_Definition() {}

func (*TestSettings_Url) isTestSettings_Definition() {}

func (*TestSettings_NetworkGrid) isTestSettings_Definition() {}

func (*TestSettings_PageLoad) isTestSettings_Definition() {}

func (*TestSettings_DnsGrid) isTestSettings_Definition() {}

func (*TestSettings_ApplicationMesh) isTestSettings_Definition() {}

type TestTraceSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        float32                `protobuf:"fixed32,1,opt,name=period,proto3" json:"period,omitempty"`
	Count         float32                `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
	Protocol      string                 `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port          float32                `protobuf:"fixed32,4,opt,name=port,proto3" json:"port,omitempty"`
	Expiry        float32                `protobuf:"fixed32,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit         float32                `protobuf:"fixed32,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Delay         float32                `protobuf:"fixed32,7,opt,name=delay,proto3" json:"delay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestTraceSettings) Reset() {
	*x = TestTraceSettings{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTraceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTraceSettings) ProtoMessage() {}

func (x *TestTraceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTraceSettings.ProtoReflect.Descriptor instead.
func (*TestTraceSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{18}
}

func (x *TestTraceSettings) GetPeriod() float32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestTraceSettings) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestTraceSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestTraceSettings) GetPort() float32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestTraceSettings) GetExpiry() float32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TestTraceSettings) GetLimit() float32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TestTraceSettings) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type TestPingSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        float32                `protobuf:"fixed32,1,opt,name=period,proto3" json:"period,omitempty"`
	Count         float32                `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
	Expiry        float32                `protobuf:"fixed32,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Delay         float32                `protobuf:"fixed32,4,opt,name=delay,proto3" json:"delay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestPingSettings) Reset() {
	*x = TestPingSettings{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPingSettings) ProtoMessage() {}

func (x *TestPingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPingSettings.ProtoReflect.Descriptor instead.
func (*TestPingSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{19}
}

func (x *TestPingSettings) GetPeriod() float32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestPingSettings) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestPingSettings) GetExpiry() float32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TestPingSettings) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type TestMonitoringSettings struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ActivationGracePeriod string                 `protobuf:"bytes,1,opt,name=activation_grace_period,json=activationGracePeriod,proto3" json:"activation_grace_period,omitempty"`
	ActivationTimeUnit    string                 `protobuf:"bytes,2,opt,name=activation_time_unit,json=activationTimeUnit,proto3" json:"activation_time_unit,omitempty"`
	ActivationTimeWindow  string                 `protobuf:"bytes,3,opt,name=activation_time_window,json=activationTimeWindow,proto3" json:"activation_time_window,omitempty"`
	ActivationTimes       string                 `protobuf:"bytes,4,opt,name=activation_times,json=activationTimes,proto3" json:"activation_times,omitempty"`
	NotificationChannels  []string               `protobuf:"bytes,5,rep,name=notification_channels,json=notificationChannels,proto3" json:"notification_channels,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TestMonitoringSettings) Reset() {
	*x = TestMonitoringSettings{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMonitoringSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMonitoringSettings) ProtoMessage() {}

func (x *TestMonitoringSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMonitoringSettings.ProtoReflect.Descriptor instead.
func (*TestMonitoringSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{20}
}

func (x *TestMonitoringSettings) GetActivationGracePeriod() string {
	if x != nil {
		return x.ActivationGracePeriod
	}
	return ""
}

func (x *TestMonitoringSettings) GetActivationTimeUnit() string {
	if x != nil {
		return x.ActivationTimeUnit
	}
	return ""
}

func (x *TestMonitoringSettings) GetActivationTimeWindow() string {
	if x != nil {
		return x.ActivationTimeWindow
	}
	return ""
}

func (x *TestMonitoringSettings) GetActivationTimes() string {
	if x != nil {
		return x.ActivationTimes
	}
	return ""
}

func (x *TestMonitoringSettings) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

type HealthSettings struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	LatencyCritical           float32                `protobuf:"fixed32,1,opt,name=latency_critical,json=latencyCritical,proto3" json:"latency_critical,omitempty"`
	LatencyWarning            float32                `protobuf:"fixed32,2,opt,name=latency_warning,json=latencyWarning,proto3" json:"latency_warning,omitempty"`
	PacketLossCritical        float32                `protobuf:"fixed32,3,opt,name=packet_loss_critical,json=packetLossCritical,proto3" json:"packet_loss_critical,omitempty"`
	PacketLossWarning         float32                `protobuf:"fixed32,4,opt,name=packet_loss_warning,json=packetLossWarning,proto3" json:"packet_loss_warning,omitempty"`
	JitterCritical            float32                `protobuf:"fixed32,5,opt,name=jitter_critical,json=jitterCritical,proto3" json:"jitter_critical,omitempty"`
	JitterWarning             float32                `protobuf:"fixed32,6,opt,name=jitter_warning,json=jitterWarning,proto3" json:"jitter_warning,omitempty"`
	HttpLatencyCritical       float32                `protobuf:"fixed32,7,opt,name=http_latency_critical,json=httpLatencyCritical,proto3" json:"http_latency_critical,omitempty"`
	HttpLatencyWarning        float32                `protobuf:"fixed32,8,opt,name=http_latency_warning,json=httpLatencyWarning,proto3" json:"http_latency_warning,omitempty"`
	HttpValidCodes            []uint32               `protobuf:"varint,9,rep,packed,name=http_valid_codes,json=httpValidCodes,proto3" json:"http_valid_codes,omitempty"`
	DnsValidCodes             []uint32               `protobuf:"varint,10,rep,packed,name=dns_valid_codes,json=dnsValidCodes,proto3" json:"dns_valid_codes,omitempty"`
	LatencyCriticalStddev     float32                `protobuf:"fixed32,11,opt,name=latency_critical_stddev,json=latencyCriticalStddev,proto3" json:"latency_critical_stddev,omitempty"`
	LatencyWarningStddev      float32                `protobuf:"fixed32,12,opt,name=latency_warning_stddev,json=latencyWarningStddev,proto3" json:"latency_warning_stddev,omitempty"`
	JitterCriticalStddev      float32                `protobuf:"fixed32,13,opt,name=jitter_critical_stddev,json=jitterCriticalStddev,proto3" json:"jitter_critical_stddev,omitempty"`
	JitterWarningStddev       float32                `protobuf:"fixed32,14,opt,name=jitter_warning_stddev,json=jitterWarningStddev,proto3" json:"jitter_warning_stddev,omitempty"`
	HttpLatencyCriticalStddev float32                `protobuf:"fixed32,15,opt,name=http_latency_critical_stddev,json=httpLatencyCriticalStddev,proto3" json:"http_latency_critical_stddev,omitempty"`
	HttpLatencyWarningStddev  float32                `protobuf:"fixed32,16,opt,name=http_latency_warning_stddev,json=httpLatencyWarningStddev,proto3" json:"http_latency_warning_stddev,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *HealthSettings) Reset() {
	*x = HealthSettings{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthSettings) ProtoMessage() {}

func (x *HealthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthSettings.ProtoReflect.Descriptor instead.
func (*HealthSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{21}
}

func (x *HealthSettings) GetLatencyCritical() float32 {
	if x != nil {
		return x.LatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarning() float32 {
	if x != nil {
		return x.LatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetPacketLossCritical() float32 {
	if x != nil {
		return x.PacketLossCritical
	}
	return 0
}

func (x *HealthSettings) GetPacketLossWarning() float32 {
	if x != nil {
		return x.PacketLossWarning
	}
	return 0
}

func (x *HealthSettings) GetJitterCritical() float32 {
	if x != nil {
		return x.JitterCritical
	}
	return 0
}

func (x *HealthSettings) GetJitterWarning() float32 {
	if x != nil {
		return x.JitterWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCritical() float32 {
	if x != nil {
		return x.HttpLatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarning() float32 {
	if x != nil {
		return x.HttpLatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpValidCodes() []uint32 {
	if x != nil {
		return x.HttpValidCodes
	}
	return nil
}

func (x *HealthSettings) GetDnsValidCodes() []uint32 {
	if x != nil {
		return x.DnsValidCodes
	}
	return nil
}

func (x *HealthSettings) GetLatencyCriticalStddev() float32 {
	if x != nil {
		return x.LatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarningStddev() float32 {
	if x != nil {
		return x.LatencyWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetJitterCriticalStddev() float32 {
	if x != nil {
		return x.JitterCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetJitterWarningStddev() float32 {
	if x != nil {
		return x.JitterWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCriticalStddev() float32 {
	if x != nil {
		return x.HttpLatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarningStddev() float32 {
	if x != nil {
		return x.HttpLatencyWarningStddev
	}
	return 0
}

type HostnameTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostnameTest) Reset() {
	*x = HostnameTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostnameTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameTest) ProtoMessage() {}

func (x *HostnameTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameTest.ProtoReflect.Descriptor instead.
func (*HostnameTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{22}
}

func (x *HostnameTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type IpTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Targets       []string               `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpTest) Reset() {
	*x = IpTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTest) ProtoMessage() {}

func (x *IpTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTest.ProtoReflect.Descriptor instead.
func (*IpTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{23}
}

func (x *IpTest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type AgentTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentTest) Reset() {
	*x = AgentTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTest) ProtoMessage() {}

func (x *AgentTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTest.ProtoReflect.Descriptor instead.
func (*AgentTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{24}
}

func (x *AgentTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type FlowTest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Target                      string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetRefreshIntervalMillis uint32                 `protobuf:"varint,2,opt,name=target_refresh_interval_millis,json=targetRefreshIntervalMillis,proto3" json:"target_refresh_interval_millis,omitempty"` // How often to generate tasks.
	MaxTasks                    uint32                 `protobuf:"varint,3,opt,name=max_tasks,json=maxTasks,proto3" json:"max_tasks,omitempty"`                                                              // Used for top N.
	Type                        string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                                                                       // What type of flow to look at -- asn, cdn, country, ...
	InetDirection               string                 `protobuf:"bytes,5,opt,name=inet_direction,json=inetDirection,proto3" json:"inet_direction,omitempty"`
	Direction                   string                 `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *FlowTest) Reset() {
	*x = FlowTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTest) ProtoMessage() {}

func (x *FlowTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTest.ProtoReflect.Descriptor instead.
func (*FlowTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{25}
}

func (x *FlowTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FlowTest) GetTargetRefreshIntervalMillis() uint32 {
	if x != nil {
		return x.TargetRefreshIntervalMillis
	}
	return 0
}

func (x *FlowTest) GetMaxTasks() uint32 {
	if x != nil {
		return x.MaxTasks
	}
	return 0
}

func (x *FlowTest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FlowTest) GetInetDirection() string {
	if x != nil {
		return x.InetDirection
	}
	return ""
}

func (x *FlowTest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type SiteTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiteTest) Reset() {
	*x = SiteTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiteTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteTest) ProtoMessage() {}

func (x *SiteTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteTest.ProtoReflect.Descriptor instead.
func (*SiteTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{26}
}

func (x *SiteTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TagTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagTest) Reset() {
	*x = TagTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTest) ProtoMessage() {}

func (x *TagTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagTest.ProtoReflect.Descriptor instead.
func (*TagTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{27}
}

func (x *TagTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type DnsTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Type          DNSRecord              `protobuf:"varint,2,opt,name=type,proto3,enum=kentik.synthetics.v202101beta1.DNSRecord" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsTest) Reset() {
	*x = DnsTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTest) ProtoMessage() {}

func (x *DnsTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTest.ProtoReflect.Descriptor instead.
func (*DnsTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{28}
}

func (x *DnsTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DnsTest) GetType() DNSRecord {
	if x != nil {
		return x.Type
	}
	return DNSRecord_DNS_RECORD_UNSPECIFIED
}

type UrlTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UrlTest) Reset() {
	*x = UrlTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UrlTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlTest) ProtoMessage() {}

func (x *UrlTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlTest.ProtoReflect.Descriptor instead.
func (*UrlTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{29}
}

func (x *UrlTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type GridTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Targets       []string               `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GridTest) Reset() {
	*x = GridTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridTest) ProtoMessage() {}

func (x *GridTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridTest.ProtoReflect.Descriptor instead.
func (*GridTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{30}
}

func (x *GridTest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type DnsGridTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Targets       []string               `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	Type          DNSRecord              `protobuf:"varint,2,opt,name=type,proto3,enum=kentik.synthetics.v202101beta1.DNSRecord" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsGridTest) Reset() {
	*x = DnsGridTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsGridTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsGridTest) ProtoMessage() {}

func (x *DnsGridTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsGridTest.ProtoReflect.Descriptor instead.
func (*DnsGridTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{31}
}

func (x *DnsGridTest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *DnsGridTest) GetType() DNSRecord {
	if x != nil {
		return x.Type
	}
	return DNSRecord_DNS_RECORD_UNSPECIFIED
}

type ApplicationMeshTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationMeshTest) Reset() {
	*x = ApplicationMeshTest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationMeshTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationMeshTest) ProtoMessage() {}

func (x *ApplicationMeshTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationMeshTest.ProtoReflect.Descriptor instead.
func (*ApplicationMeshTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{32}
}

type MeshResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LocalIp       string                 `protobuf:"bytes,3,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	Ip            string                 `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Alias         string                 `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	Columns       []*MeshColumn          `protobuf:"bytes,6,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshResponse) Reset() {
	*x = MeshResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshResponse) ProtoMessage() {}

func (x *MeshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshResponse.ProtoReflect.Descriptor instead.
func (*MeshResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{33}
}

func (x *MeshResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeshResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshResponse) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *MeshResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MeshResponse) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *MeshResponse) GetColumns() []*MeshColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type MeshColumn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Alias         string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Target        string                 `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Metrics       *MeshMetrics           `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Health        []*MeshMetrics         `protobuf:"bytes,6,rep,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshColumn) Reset() {
	*x = MeshColumn{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshColumn) ProtoMessage() {}

func (x *MeshColumn) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshColumn.ProtoReflect.Descriptor instead.
func (*MeshColumn) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{34}
}

func (x *MeshColumn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeshColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshColumn) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *MeshColumn) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *MeshColumn) GetMetrics() *MeshMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *MeshColumn) GetHealth() []*MeshMetrics {
	if x != nil {
		return x.Health
	}
	return nil
}

type MeshMetric struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health        string                 `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	Value         int64                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshMetric) Reset() {
	*x = MeshMetric{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshMetric) ProtoMessage() {}

func (x *MeshMetric) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshMetric.ProtoReflect.Descriptor instead.
func (*MeshMetric) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{35}
}

func (x *MeshMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshMetric) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *MeshMetric) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MeshMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Latency       *MeshMetric            `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
	PacketLoss    *MeshMetric            `protobuf:"bytes,3,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	Jitter        *MeshMetric            `protobuf:"bytes,4,opt,name=jitter,proto3" json:"jitter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshMetrics) Reset() {
	*x = MeshMetrics{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshMetrics) ProtoMessage() {}

func (x *MeshMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshMetrics.ProtoReflect.Descriptor instead.
func (*MeshMetrics) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{36}
}

func (x *MeshMetrics) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MeshMetrics) GetLatency() *MeshMetric {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *MeshMetrics) GetPacketLoss() *MeshMetric {
	if x != nil {
		return x.PacketLoss
	}
	return nil
}

func (x *MeshMetrics) GetJitter() *MeshMetric {
	if x != nil {
		return x.Jitter
	}
	return nil
}

type ASN struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ASN) Reset() {
	*x = ASN{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ASN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASN) ProtoMessage() {}

func (x *ASN) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASN.ProtoReflect.Descriptor instead.
func (*ASN) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{37}
}

func (x *ASN) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ASN) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Country) Reset() {
	*x = Country{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{38}
}

func (x *Country) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Region struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Region) Reset() {
	*x = Region{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{39}
}

func (x *Region) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type City struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Latitude      float64                `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *City) Reset() {
	*x = City{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{40}
}

func (x *City) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *City) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *City) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *City) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Geo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Country       *Country               `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Region        *Region                `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	City          *City                  `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Geo) Reset() {
	*x = Geo{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{41}
}

func (x *Geo) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Geo) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Geo) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

type DNS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNS) Reset() {
	*x = DNS{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS) ProtoMessage() {}

func (x *DNS) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS.ProtoReflect.Descriptor instead.
func (*DNS) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{42}
}

func (x *DNS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IPInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Asn           *ASN                   `protobuf:"bytes,2,opt,name=asn,proto3" json:"asn,omitempty"`
	Geo           *Geo                   `protobuf:"bytes,3,opt,name=geo,proto3" json:"geo,omitempty"`
	Dns           *DNS                   `protobuf:"bytes,4,opt,name=dns,proto3" json:"dns,omitempty"`
	DeviceId      string                 `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SiteId        string                 `protobuf:"bytes,6,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	Egress        string                 `protobuf:"bytes,7,opt,name=egress,proto3" json:"egress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPInfo) Reset() {
	*x = IPInfo{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPInfo) ProtoMessage() {}

func (x *IPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPInfo.ProtoReflect.Descriptor instead.
func (*IPInfo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{43}
}

func (x *IPInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPInfo) GetAsn() *ASN {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *IPInfo) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *IPInfo) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *IPInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *IPInfo) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *IPInfo) GetEgress() string {
	if x != nil {
		return x.Egress
	}
	return ""
}

// ID type for the specified IP address
type IDByIP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID value of type
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IP address associate with IP
	Ip            string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDByIP) Reset() {
	*x = IDByIP{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDByIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDByIP) ProtoMessage() {}

func (x *IDByIP) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDByIP.ProtoReflect.Descriptor instead.
func (*IDByIP) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{44}
}

func (x *IDByIP) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDByIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Traceroute lookup info
type TracerouteLookup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Agent ID by IP
	AgentIdByIp []*IDByIP `protobuf:"bytes,1,rep,name=agent_id_by_ip,json=agentIdByIp,proto3" json:"agent_id_by_ip,omitempty"`
	// Agents info
	Agents []*Agent `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	// ASN
	Asns []*ASN `protobuf:"bytes,3,rep,name=asns,proto3" json:"asns,omitempty"`
	// Device ID by IP
	DeviceIdByIp []*IDByIP `protobuf:"bytes,4,rep,name=device_id_by_ip,json=deviceIdByIp,proto3" json:"device_id_by_ip,omitempty"`
	// Site ID by IP
	SiteIdByIp []*IDByIP `protobuf:"bytes,5,rep,name=site_id_by_ip,json=siteIdByIp,proto3" json:"site_id_by_ip,omitempty"`
	// IP Info
	Ips           []*IPInfo `protobuf:"bytes,6,rep,name=ips,proto3" json:"ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerouteLookup) Reset() {
	*x = TracerouteLookup{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracerouteLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteLookup) ProtoMessage() {}

func (x *TracerouteLookup) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteLookup.ProtoReflect.Descriptor instead.
func (*TracerouteLookup) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{45}
}

func (x *TracerouteLookup) GetAgentIdByIp() []*IDByIP {
	if x != nil {
		return x.AgentIdByIp
	}
	return nil
}

func (x *TracerouteLookup) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *TracerouteLookup) GetAsns() []*ASN {
	if x != nil {
		return x.Asns
	}
	return nil
}

func (x *TracerouteLookup) GetDeviceIdByIp() []*IDByIP {
	if x != nil {
		return x.DeviceIdByIp
	}
	return nil
}

func (x *TracerouteLookup) GetSiteIdByIp() []*IDByIP {
	if x != nil {
		return x.SiteIdByIp
	}
	return nil
}

func (x *TracerouteLookup) GetIps() []*IPInfo {
	if x != nil {
		return x.Ips
	}
	return nil
}

type TraceHop struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Ttl                int32                  `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Ip                 string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Timeout            bool                   `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Latency            int32                  `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`
	MinExpectedLatency int32                  `protobuf:"varint,5,opt,name=min_expected_latency,json=minExpectedLatency,proto3" json:"min_expected_latency,omitempty"`
	Asn                int32                  `protobuf:"varint,6,opt,name=asn,proto3" json:"asn,omitempty"`
	Site               int32                  `protobuf:"varint,7,opt,name=site,proto3" json:"site,omitempty"`
	Region             int32                  `protobuf:"varint,8,opt,name=region,proto3" json:"region,omitempty"`
	Target             bool                   `protobuf:"varint,9,opt,name=target,proto3" json:"target,omitempty"`
	TraceEnd           bool                   `protobuf:"varint,10,opt,name=trace_end,json=traceEnd,proto3" json:"trace_end,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TraceHop) Reset() {
	*x = TraceHop{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceHop) ProtoMessage() {}

func (x *TraceHop) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceHop.ProtoReflect.Descriptor instead.
func (*TraceHop) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{46}
}

func (x *TraceHop) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *TraceHop) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TraceHop) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

func (x *TraceHop) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *TraceHop) GetMinExpectedLatency() int32 {
	if x != nil {
		return x.MinExpectedLatency
	}
	return 0
}

func (x *TraceHop) GetAsn() int32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *TraceHop) GetSite() int32 {
	if x != nil {
		return x.Site
	}
	return 0
}

func (x *TraceHop) GetRegion() int32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *TraceHop) GetTarget() bool {
	if x != nil {
		return x.Target
	}
	return false
}

func (x *TraceHop) GetTraceEnd() bool {
	if x != nil {
		return x.TraceEnd
	}
	return false
}

// Probing detail
type TraceProbe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AS path
	AsPath []int32 `protobuf:"varint,1,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	// Completed probe
	Completed bool `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	// Hop count
	HopCount int32 `protobuf:"varint,3,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	// Region path trace
	RegionPath []string `protobuf:"bytes,4,rep,name=region_path,json=regionPath,proto3" json:"region_path,omitempty"`
	// Site path trace
	SitePath      []int32     `protobuf:"varint,5,rep,packed,name=site_path,json=sitePath,proto3" json:"site_path,omitempty"`
	Hops          []*TraceHop `protobuf:"bytes,6,rep,name=hops,proto3" json:"hops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceProbe) Reset() {
	*x = TraceProbe{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceProbe) ProtoMessage() {}

func (x *TraceProbe) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceProbe.ProtoReflect.Descriptor instead.
func (*TraceProbe) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{47}
}

func (x *TraceProbe) GetAsPath() []int32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *TraceProbe) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *TraceProbe) GetHopCount() int32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *TraceProbe) GetRegionPath() []string {
	if x != nil {
		return x.RegionPath
	}
	return nil
}

func (x *TraceProbe) GetSitePath() []int32 {
	if x != nil {
		return x.SitePath
	}
	return nil
}

func (x *TraceProbe) GetHops() []*TraceHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

// Trace detail
type Trace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of agent for the trace
	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// IP of agent for the trace
	AgentIp string `protobuf:"bytes,2,opt,name=agent_ip,json=agentIp,proto3" json:"agent_ip,omitempty"`
	// Remote target IP
	TargetIp string `protobuf:"bytes,3,opt,name=target_ip,json=targetIp,proto3" json:"target_ip,omitempty"`
	// Number of hops for the trace
	HopCount int32 `protobuf:"varint,4,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	// Probing info
	Probes        []*TraceProbe `protobuf:"bytes,5,rep,name=probes,proto3" json:"probes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trace) Reset() {
	*x = Trace{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{48}
}

func (x *Trace) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Trace) GetAgentIp() string {
	if x != nil {
		return x.AgentIp
	}
	return ""
}

func (x *Trace) GetTargetIp() string {
	if x != nil {
		return x.TargetIp
	}
	return ""
}

func (x *Trace) GetHopCount() int32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *Trace) GetProbes() []*TraceProbe {
	if x != nil {
		return x.Probes
	}
	return nil
}

// Statistics for traceroute count
type Stats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Average statistic
	Average int32 `protobuf:"varint,1,opt,name=average,proto3" json:"average,omitempty"`
	// Maximum statistic
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// Total statistic
	Total         int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stats) Reset() {
	*x = Stats{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{49}
}

func (x *Stats) GetAverage() int32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *Stats) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Stats) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TracerouteResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Traces        []*Trace               `protobuf:"bytes,2,rep,name=traces,proto3" json:"traces,omitempty"`
	HopCount      int32                  `protobuf:"varint,3,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Count         *Stats                 `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	Distance      *Stats                 `protobuf:"bytes,5,opt,name=distance,proto3" json:"distance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerouteResult) Reset() {
	*x = TracerouteResult{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracerouteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteResult) ProtoMessage() {}

func (x *TracerouteResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteResult.ProtoReflect.Descriptor instead.
func (*TracerouteResult) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{50}
}

func (x *TracerouteResult) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TracerouteResult) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *TracerouteResult) GetHopCount() int32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *TracerouteResult) GetCount() *Stats {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *TracerouteResult) GetDistance() *Stats {
	if x != nil {
		return x.Distance
	}
	return nil
}

// Traceroute info
type TracerouteInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicate trace route is trunciated
	IsTraceRoutesTruncated bool `protobuf:"varint,1,opt,name=is_trace_routes_truncated,json=isTraceRoutesTruncated,proto3" json:"is_trace_routes_truncated,omitempty"`
	// Maximum number of asn path
	MaxAsnPathCount int32 `protobuf:"varint,2,opt,name=max_asn_path_count,json=maxAsnPathCount,proto3" json:"max_asn_path_count,omitempty"`
	// Maximum number of site path
	MaxSitePathCount int32 `protobuf:"varint,3,opt,name=max_site_path_count,json=maxSitePathCount,proto3" json:"max_site_path_count,omitempty"`
	// Maximum number of region path
	MaxRegionPathCount int32 `protobuf:"varint,4,opt,name=max_region_path_count,json=maxRegionPathCount,proto3" json:"max_region_path_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TracerouteInfo) Reset() {
	*x = TracerouteInfo{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracerouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteInfo) ProtoMessage() {}

func (x *TracerouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteInfo.ProtoReflect.Descriptor instead.
func (*TracerouteInfo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{51}
}

func (x *TracerouteInfo) GetIsTraceRoutesTruncated() bool {
	if x != nil {
		return x.IsTraceRoutesTruncated
	}
	return false
}

func (x *TracerouteInfo) GetMaxAsnPathCount() int32 {
	if x != nil {
		return x.MaxAsnPathCount
	}
	return 0
}

func (x *TracerouteInfo) GetMaxSitePathCount() int32 {
	if x != nil {
		return x.MaxSitePathCount
	}
	return 0
}

func (x *TracerouteInfo) GetMaxRegionPathCount() int32 {
	if x != nil {
		return x.MaxRegionPathCount
	}
	return 0
}

type GetHealthForTestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ids of the tests to get health for.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// Start of the time interval for this query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of the time interval for this query.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optionally, only look at a subset of agents
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// Optionally only look at a subset of tasks -- this lets you limit targets.
	TaskIds       []string `protobuf:"bytes,5,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	Augment       bool     `protobuf:"varint,6,opt,name=augment,proto3" json:"augment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHealthForTestsRequest) Reset() {
	*x = GetHealthForTestsRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthForTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsRequest) ProtoMessage() {}

func (x *GetHealthForTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsRequest.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{52}
}

func (x *GetHealthForTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetAugment() bool {
	if x != nil {
		return x.Augment
	}
	return false
}

type GetHealthForTestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Health        []*TestHealth          `protobuf:"bytes,1,rep,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHealthForTestsResponse) Reset() {
	*x = GetHealthForTestsResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthForTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsResponse) ProtoMessage() {}

func (x *GetHealthForTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsResponse.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{53}
}

func (x *GetHealthForTestsResponse) GetHealth() []*TestHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

type GetTraceForTestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Start of the time interval for this query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of the time interval for this query.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optionally, limit the query to these agent ids
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// Optionally, limit the query to these destination IP addresses
	TargetIps     []string `protobuf:"bytes,5,rep,name=target_ips,json=targetIps,proto3" json:"target_ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceForTestRequest) Reset() {
	*x = GetTraceForTestRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceForTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestRequest) ProtoMessage() {}

func (x *GetTraceForTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceForTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{54}
}

func (x *GetTraceForTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTraceForTestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetTraceForTestRequest) GetTargetIps() []string {
	if x != nil {
		return x.TargetIps
	}
	return nil
}

type GetTraceForTestResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Lookups         *TracerouteLookup      `protobuf:"bytes,1,opt,name=lookups,proto3" json:"lookups,omitempty"`
	TraceRoutes     []*TracerouteResult    `protobuf:"bytes,2,rep,name=trace_routes,json=traceRoutes,proto3" json:"trace_routes,omitempty"`
	TraceRoutesInfo *TracerouteInfo        `protobuf:"bytes,3,opt,name=trace_routes_info,json=traceRoutesInfo,proto3" json:"trace_routes_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTraceForTestResponse) Reset() {
	*x = GetTraceForTestResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceForTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestResponse) ProtoMessage() {}

func (x *GetTraceForTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceForTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{55}
}

func (x *GetTraceForTestResponse) GetLookups() *TracerouteLookup {
	if x != nil {
		return x.Lookups
	}
	return nil
}

func (x *GetTraceForTestResponse) GetTraceRoutes() []*TracerouteResult {
	if x != nil {
		return x.TraceRoutes
	}
	return nil
}

func (x *GetTraceForTestResponse) GetTraceRoutesInfo() *TracerouteInfo {
	if x != nil {
		return x.TraceRoutesInfo
	}
	return nil
}

type ListAgentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{56}
}

type ListAgentsResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Agents             []*Agent               `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	InvalidAgentsCount uint32                 `protobuf:"varint,2,opt,name=invalid_agents_count,json=invalidAgentsCount,proto3" json:"invalid_agents_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{57}
}

func (x *ListAgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentsResponse) GetInvalidAgentsCount() uint32 {
	if x != nil {
		return x.InvalidAgentsCount
	}
	return 0
}

type GetAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{58}
}

func (x *GetAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentResponse) Reset() {
	*x = GetAgentResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentResponse) ProtoMessage() {}

func (x *GetAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{59}
}

func (x *GetAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type PatchAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Agent *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	// CSV values of fields follow the path of Agent object with dot notation (ie. "agent.alias,export.type")
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchAgentRequest) Reset() {
	*x = PatchAgentRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAgentRequest) ProtoMessage() {}

func (x *PatchAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAgentRequest.ProtoReflect.Descriptor instead.
func (*PatchAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{60}
}

func (x *PatchAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *PatchAgentRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type PatchAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchAgentResponse) Reset() {
	*x = PatchAgentResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAgentResponse) ProtoMessage() {}

func (x *PatchAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAgentResponse.ProtoReflect.Descriptor instead.
func (*PatchAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{61}
}

func (x *PatchAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type DeleteAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAgentRequest) Reset() {
	*x = DeleteAgentRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentRequest) ProtoMessage() {}

func (x *DeleteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{62}
}

func (x *DeleteAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAgentResponse) Reset() {
	*x = DeleteAgentResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentResponse) ProtoMessage() {}

func (x *DeleteAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{63}
}

type ListTestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preset        bool                   `protobuf:"varint,1,opt,name=preset,proto3" json:"preset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestsRequest) Reset() {
	*x = ListTestsRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsRequest) ProtoMessage() {}

func (x *ListTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsRequest.ProtoReflect.Descriptor instead.
func (*ListTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{64}
}

func (x *ListTestsRequest) GetPreset() bool {
	if x != nil {
		return x.Preset
	}
	return false
}

type ListTestsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Tests             []*Test                `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	InvalidTestsCount uint32                 `protobuf:"varint,2,opt,name=invalid_tests_count,json=invalidTestsCount,proto3" json:"invalid_tests_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListTestsResponse) Reset() {
	*x = ListTestsResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsResponse) ProtoMessage() {}

func (x *ListTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsResponse.ProtoReflect.Descriptor instead.
func (*ListTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{65}
}

func (x *ListTestsResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListTestsResponse) GetInvalidTestsCount() uint32 {
	if x != nil {
		return x.InvalidTestsCount
	}
	return 0
}

type CreateTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTestRequest) Reset() {
	*x = CreateTestRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestRequest) ProtoMessage() {}

func (x *CreateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestRequest.ProtoReflect.Descriptor instead.
func (*CreateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{66}
}

func (x *CreateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTestResponse) Reset() {
	*x = CreateTestResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResponse) ProtoMessage() {}

func (x *CreateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResponse.ProtoReflect.Descriptor instead.
func (*CreateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{67}
}

func (x *CreateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type GetTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{68}
}

func (x *GetTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{69}
}

func (x *GetTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type SetTestStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        TestStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.synthetics.v202101beta1.TestStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTestStatusRequest) Reset() {
	*x = SetTestStatusRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusRequest) ProtoMessage() {}

func (x *SetTestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTestStatusRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{70}
}

func (x *SetTestStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetTestStatusRequest) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

type SetTestStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTestStatusResponse) Reset() {
	*x = SetTestStatusResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusResponse) ProtoMessage() {}

func (x *SetTestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTestStatusResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{71}
}

type PatchTestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Test  *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	// CSV values of fields follow the path of Test object with dot notation (ie. "test.name,test.settings")
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchTestRequest) Reset() {
	*x = PatchTestRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTestRequest) ProtoMessage() {}

func (x *PatchTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTestRequest.ProtoReflect.Descriptor instead.
func (*PatchTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{72}
}

func (x *PatchTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *PatchTestRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type PatchTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchTestResponse) Reset() {
	*x = PatchTestResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTestResponse) ProtoMessage() {}

func (x *PatchTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTestResponse.ProtoReflect.Descriptor instead.
func (*PatchTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{73}
}

func (x *PatchTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type DeleteTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestRequest) Reset() {
	*x = DeleteTestRequest{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestRequest) ProtoMessage() {}

func (x *DeleteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestResponse) Reset() {
	*x = DeleteTestResponse{}
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestResponse) ProtoMessage() {}

func (x *DeleteTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP(), []int{75}
}

var File_kentik_synthetics_v202101beta1_synthetics_proto protoreflect.FileDescriptor

const file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc = "" +
	"\n" +
	"/kentik/synthetics/v202101beta1/synthetics.proto\x12\x1ekentik.synthetics.v202101beta1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a%kentik/core/v202303/annotations.proto\"P\n" +
	"\x06Health\x12\x16\n" +
	"\x06health\x18\x01 \x01(\tR\x06health\x12.\n" +
	"\x04time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\";\n" +
	"\x0fAgentTaskConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x18\n" +
	"\atargets\x18\x02 \x03(\tR\atargets\"\x9a\x03\n" +
	"\n" +
	"TestHealth\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12@\n" +
	"\x05tasks\x18\x02 \x03(\v2*.kentik.synthetics.v202101beta1.TaskHealthR\x05tasks\x12M\n" +
	"\x0eoverall_health\x18\x03 \x01(\v2&.kentik.synthetics.v202101beta1.HealthR\roverallHealth\x12C\n" +
	"\thealth_ts\x18\x04 \x03(\v2&.kentik.synthetics.v202101beta1.HealthR\bhealthTs\x12[\n" +
	"\x11agent_task_config\x18\x05 \x03(\v2/.kentik.synthetics.v202101beta1.AgentTaskConfigR\x0fagentTaskConfig\x12@\n" +
	"\x04mesh\x18\x06 \x03(\v2,.kentik.synthetics.v202101beta1.MeshResponseR\x04mesh\"\xa4\x02\n" +
	"\n" +
	"TaskHealth\x128\n" +
	"\x04task\x18\x01 \x01(\v2$.kentik.synthetics.v202101beta1.TaskR\x04task\x12C\n" +
	"\x06agents\x18\x02 \x03(\v2+.kentik.synthetics.v202101beta1.AgentHealthR\x06agents\x12M\n" +
	"\x0eoverall_health\x18\x03 \x01(\v2&.kentik.synthetics.v202101beta1.HealthR\roverallHealth\x12H\n" +
	"\ftarget_agent\x18\x04 \x01(\v2%.kentik.synthetics.v202101beta1.AgentR\vtargetAgent\"\xdf\x01\n" +
	"\vAgentHealth\x12;\n" +
	"\x05agent\x18\x01 \x01(\v2%.kentik.synthetics.v202101beta1.AgentR\x05agent\x12D\n" +
	"\x06health\x18\x02 \x03(\v2,.kentik.synthetics.v202101beta1.HealthMomentR\x06health\x12M\n" +
	"\x0eoverall_health\x18\x03 \x01(\v2&.kentik.synthetics.v202101beta1.HealthR\roverallHealth\"\xce\a\n" +
	"\fHealthMoment\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x15\n" +
	"\x06src_ip\x18\x02 \x01(\tR\x05srcIp\x12\x15\n" +
	"\x06dst_ip\x18\x03 \x01(\tR\x05dstIp\x12\x1f\n" +
	"\vpacket_loss\x18\x04 \x01(\x01R\n" +
	"packetLoss\x12\x1f\n" +
	"\vavg_latency\x18\x05 \x01(\rR\n" +
	"avgLatency\x120\n" +
	"\x14avg_weighted_latency\x18\x06 \x01(\rR\x12avgWeightedLatency\x12.\n" +
	"\x13rolling_avg_latency\x18\a \x01(\rR\x11rollingAvgLatency\x124\n" +
	"\x16rolling_stddev_latency\x18\b \x01(\rR\x14rollingStddevLatency\x12?\n" +
	"\x1crolling_avg_weighted_latency\x18\t \x01(\rR\x19rollingAvgWeightedLatency\x12%\n" +
	"\x0elatency_health\x18\n" +
	" \x01(\tR\rlatencyHealth\x12,\n" +
	"\x12packet_loss_health\x18\v \x01(\tR\x10packetLossHealth\x12M\n" +
	"\x0eoverall_health\x18\f \x01(\v2&.kentik.synthetics.v202101beta1.HealthR\roverallHealth\x12\x1d\n" +
	"\n" +
	"avg_jitter\x18\r \x01(\rR\tavgJitter\x12,\n" +
	"\x12rolling_avg_jitter\x18\x0e \x01(\rR\x10rollingAvgJitter\x12,\n" +
	"\x12rolling_std_jitter\x18\x0f \x01(\rR\x10rollingStdJitter\x12#\n" +
	"\rjitter_health\x18\x10 \x01(\tR\fjitterHealth\x12\x12\n" +
	"\x04data\x18\x11 \x01(\tR\x04data\x12\x12\n" +
	"\x04size\x18\x12 \x01(\rR\x04size\x12\x16\n" +
	"\x06status\x18\x13 \x01(\rR\x06status\x12\x1b\n" +
	"\ttask_type\x18\x14 \x01(\tR\btaskType\x12c\n" +
	"\rother_healths\x18\x15 \x03(\v2>.kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntryR\fotherHealths\x1a?\n" +
	"\x11OtherHealthsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa9\x05\n" +
	"\x05Agent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12C\n" +
	"\x06status\x18\x03 \x01(\x0e2+.kentik.synthetics.v202101beta1.AgentStatusR\x06status\x12\x14\n" +
	"\x05alias\x18\x04 \x01(\tR\x05alias\x12\x12\n" +
	"\x04type\x18\x05 \x01(\tR\x04type\x12\x0e\n" +
	"\x02os\x18\x06 \x01(\tR\x02os\x12\x0e\n" +
	"\x02ip\x18\a \x01(\tR\x02ip\x12\x10\n" +
	"\x03lat\x18\b \x01(\x01R\x03lat\x12\x12\n" +
	"\x04long\x18\t \x01(\x01R\x04long\x12;\n" +
	"\vlast_authed\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastAuthed\x12@\n" +
	"\x06family\x18\v \x01(\x0e2(.kentik.synthetics.v202101beta1.IPFamilyR\x06family\x12\x10\n" +
	"\x03asn\x18\f \x01(\rR\x03asn\x12\x17\n" +
	"\asite_id\x18\r \x01(\tR\x06siteId\x12\x18\n" +
	"\aversion\x18\x0e \x01(\tR\aversion\x12\x1c\n" +
	"\tchallenge\x18\x0f \x01(\tR\tchallenge\x12\x12\n" +
	"\x04city\x18\x10 \x01(\tR\x04city\x12\x16\n" +
	"\x06region\x18\x11 \x01(\tR\x06region\x12\x18\n" +
	"\acountry\x18\x12 \x01(\tR\acountry\x12\x19\n" +
	"\btest_ids\x18\x13 \x03(\tR\atestIds\x12\x19\n" +
	"\blocal_ip\x18\x14 \x01(\tR\alocalIp\x12\x1b\n" +
	"\tcloud_vpc\x18\x15 \x01(\tR\bcloudVpc\x12L\n" +
	"\n" +
	"agent_impl\x18\x16 \x01(\x0e2-.kentik.synthetics.v202101beta1.ImplementTypeR\tagentImpl\"r\n" +
	"\x12PingTaskDefinition\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x16\n" +
	"\x06period\x18\x02 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\rR\x06expiry\x12\x14\n" +
	"\x05count\x18\x04 \x01(\rR\x05count\"s\n" +
	"\x13TraceTaskDefinition\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x16\n" +
	"\x06period\x18\x02 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\rR\x06expiry\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\rR\x05limit\"\\\n" +
	"\x12HTTPTaskDefinition\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x16\n" +
	"\x06period\x18\x02 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\rR\x06expiry\"\xc1\x05\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\atest_id\x18\x02 \x01(\tR\x06testId\x12\x1b\n" +
	"\tdevice_id\x18\x03 \x01(\tR\bdeviceId\x12?\n" +
	"\x05state\x18\x04 \x01(\x0e2).kentik.synthetics.v202101beta1.TaskStateR\x05state\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12@\n" +
	"\x06family\x18\x06 \x01(\x0e2(.kentik.synthetics.v202101beta1.IPFamilyR\x06family\x12H\n" +
	"\x04ping\x18\t \x01(\v22.kentik.synthetics.v202101beta1.PingTaskDefinitionH\x00R\x04ping\x12U\n" +
	"\n" +
	"traceroute\x18\n" +
	" \x01(\v23.kentik.synthetics.v202101beta1.TraceTaskDefinitionH\x00R\n" +
	"traceroute\x12H\n" +
	"\x04http\x18\v \x01(\v22.kentik.synthetics.v202101beta1.HTTPTaskDefinitionH\x00R\x04http\x12K\n" +
	"\x05knock\x18\f \x01(\v23.kentik.synthetics.v202101beta1.KnockTaskDefinitionH\x00R\x05knock\x12E\n" +
	"\x03dns\x18\r \x01(\v21.kentik.synthetics.v202101beta1.DNSTaskDefinitionH\x00R\x03dns\x12K\n" +
	"\x05shake\x18\x0e \x01(\v23.kentik.synthetics.v202101beta1.ShakeTaskDefinitionH\x00R\x05shakeB\f\n" +
	"\n" +
	"definition\"\x87\x01\n" +
	"\x13KnockTaskDefinition\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x16\n" +
	"\x06period\x18\x02 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\rR\x06expiry\x12\x14\n" +
	"\x05count\x18\x04 \x01(\rR\x05count\x12\x12\n" +
	"\x04port\x18\x05 \x01(\rR\x04port\"\xb5\x01\n" +
	"\x11DNSTaskDefinition\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x16\n" +
	"\x06period\x18\x02 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\rR\x06expiry\x12\x14\n" +
	"\x05count\x18\x04 \x01(\rR\x05count\x12\x12\n" +
	"\x04port\x18\x05 \x01(\rR\x04port\x12\x12\n" +
	"\x04type\x18\x06 \x01(\tR\x04type\x12\x1a\n" +
	"\bresolver\x18\a \x01(\tR\bresolver\"q\n" +
	"\x13ShakeTaskDefinition\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12\x16\n" +
	"\x06period\x18\x03 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x04 \x01(\rR\x06expiry\"M\n" +
	"\bUserInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12\x1b\n" +
	"\tfull_name\x18\x03 \x01(\tR\bfullName\"\xa3\x04\n" +
	"\x04Test\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1b\n" +
	"\tdevice_id\x18\x04 \x01(\tR\bdeviceId\x12B\n" +
	"\x06status\x18\x05 \x01(\x0e2*.kentik.synthetics.v202101beta1.TestStatusR\x06status\x12H\n" +
	"\bsettings\x18\x06 \x01(\v2,.kentik.synthetics.v202101beta1.TestSettingsR\bsettings\x129\n" +
	"\n" +
	"expires_on\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\texpiresOn\x120\n" +
	"\x05cdate\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x05cdate\x120\n" +
	"\x05edate\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\x05edate\x12G\n" +
	"\n" +
	"created_by\x18\n" +
	" \x01(\v2(.kentik.synthetics.v202101beta1.UserInfoR\tcreatedBy\x12P\n" +
	"\x0flast_updated_by\x18\v \x01(\v2(.kentik.synthetics.v202101beta1.UserInfoR\rlastUpdatedBy\"\xc7\x03\n" +
	"\n" +
	"HTTPConfig\x12\x16\n" +
	"\x06period\x18\x01 \x01(\rR\x06period\x12\x16\n" +
	"\x06expiry\x18\x02 \x01(\rR\x06expiry\x12\x16\n" +
	"\x06method\x18\x03 \x01(\tR\x06method\x12Q\n" +
	"\aheaders\x18\x04 \x03(\v27.kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x05 \x01(\tR\x04body\x12*\n" +
	"\x11ignore_tls_errors\x18\x06 \x01(\bR\x0fignoreTlsErrors\x12a\n" +
	"\rcss_selectors\x18\a \x03(\v2<.kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntryR\fcssSelectors\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11CssSelectorsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf0\f\n" +
	"\fTestSettings\x12J\n" +
	"\bhostname\x18\x04 \x01(\v2,.kentik.synthetics.v202101beta1.HostnameTestH\x00R\bhostname\x128\n" +
	"\x02ip\x18\x05 \x01(\v2&.kentik.synthetics.v202101beta1.IpTestH\x00R\x02ip\x12A\n" +
	"\x05agent\x18\x06 \x01(\v2).kentik.synthetics.v202101beta1.AgentTestH\x00R\x05agent\x12>\n" +
	"\x04flow\x18\a \x01(\v2(.kentik.synthetics.v202101beta1.FlowTestH\x00R\x04flow\x12>\n" +
	"\x04site\x18\b \x01(\v2(.kentik.synthetics.v202101beta1.SiteTestH\x00R\x04site\x12;\n" +
	"\x03tag\x18\t \x01(\v2'.kentik.synthetics.v202101beta1.TagTestH\x00R\x03tag\x12;\n" +
	"\x03dns\x18\n" +
	" \x01(\v2'.kentik.synthetics.v202101beta1.DnsTestH\x00R\x03dns\x12;\n" +
	"\x03url\x18\v \x01(\v2'.kentik.synthetics.v202101beta1.UrlTestH\x00R\x03url\x12M\n" +
	"\fnetwork_grid\x18# \x01(\v2(.kentik.synthetics.v202101beta1.GridTestH\x00R\vnetworkGrid\x12F\n" +
	"\tpage_load\x18$ \x01(\v2'.kentik.synthetics.v202101beta1.UrlTestH\x00R\bpageLoad\x12H\n" +
	"\bdns_grid\x18% \x01(\v2+.kentik.synthetics.v202101beta1.DnsGridTestH\x00R\adnsGrid\x12`\n" +
	"\x10application_mesh\x18& \x01(\v23.kentik.synthetics.v202101beta1.ApplicationMeshTestH\x00R\x0fapplicationMesh\x12\x1b\n" +
	"\tagent_ids\x18\x0e \x03(\tR\bagentIds\x12\x16\n" +
	"\x06period\x18\x0f \x01(\rR\x06period\x12\x14\n" +
	"\x05count\x18\x10 \x01(\rR\x05count\x12\x16\n" +
	"\x06expiry\x18\x11 \x01(\rR\x06expiry\x12\x14\n" +
	"\x05limit\x18\x12 \x01(\rR\x05limit\x12\x14\n" +
	"\x05tasks\x18\x13 \x03(\tR\x05tasks\x12W\n" +
	"\x0fhealth_settings\x18\x16 \x01(\v2..kentik.synthetics.v202101beta1.HealthSettingsR\x0ehealthSettings\x12g\n" +
	"\x13monitoring_settings\x18\x18 \x01(\v26.kentik.synthetics.v202101beta1.TestMonitoringSettingsR\x12monitoringSettings\x12D\n" +
	"\x04ping\x18\x1c \x01(\v20.kentik.synthetics.v202101beta1.TestPingSettingsR\x04ping\x12G\n" +
	"\x05trace\x18\x1d \x01(\v21.kentik.synthetics.v202101beta1.TestTraceSettingsR\x05trace\x12\x12\n" +
	"\x04port\x18\x17 \x01(\rR\x04port\x12\x1a\n" +
	"\bprotocol\x18\x1a \x01(\tR\bprotocol\x12@\n" +
	"\x06family\x18\x1b \x01(\x0e2(.kentik.synthetics.v202101beta1.IPFamilyR\x06family\x12\x18\n" +
	"\aservers\x18\x1e \x03(\tR\aservers\x12 \n" +
	"\fuse_local_ip\x18\x1f \x01(\bR\n" +
	"useLocalIp\x12\x1e\n" +
	"\n" +
	"reciprocal\x18  \x01(\bR\n" +
	"reciprocal\x12!\n" +
	"\frollup_level\x18! \x01(\rR\vrollupLevel\x12>\n" +
	"\x04http\x18\" \x01(\v2*.kentik.synthetics.v202101beta1.HTTPConfigR\x04httpB\f\n" +
	"\n" +
	"definition\"\xb5\x01\n" +
	"\x11TestTraceSettings\x12\x16\n" +
	"\x06period\x18\x01 \x01(\x02R\x06period\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x02R\x05count\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\tR\bprotocol\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x02R\x04port\x12\x16\n" +
	"\x06expiry\x18\x05 \x01(\x02R\x06expiry\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x02R\x05limit\x12\x14\n" +
	"\x05delay\x18\a \x01(\x02R\x05delay\"n\n" +
	"\x10TestPingSettings\x12\x16\n" +
	"\x06period\x18\x01 \x01(\x02R\x06period\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x02R\x05count\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\x02R\x06expiry\x12\x14\n" +
	"\x05delay\x18\x04 \x01(\x02R\x05delay\"\x98\x02\n" +
	"\x16TestMonitoringSettings\x126\n" +
	"\x17activation_grace_period\x18\x01 \x01(\tR\x15activationGracePeriod\x120\n" +
	"\x14activation_time_unit\x18\x02 \x01(\tR\x12activationTimeUnit\x124\n" +
	"\x16activation_time_window\x18\x03 \x01(\tR\x14activationTimeWindow\x12)\n" +
	"\x10activation_times\x18\x04 \x01(\tR\x0factivationTimes\x123\n" +
	"\x15notification_channels\x18\x05 \x03(\tR\x14notificationChannels\"\xa6\x06\n" +
	"\x0eHealthSettings\x12)\n" +
	"\x10latency_critical\x18\x01 \x01(\x02R\x0flatencyCritical\x12'\n" +
	"\x0flatency_warning\x18\x02 \x01(\x02R\x0elatencyWarning\x120\n" +
	"\x14packet_loss_critical\x18\x03 \x01(\x02R\x12packetLossCritical\x12.\n" +
	"\x13packet_loss_warning\x18\x04 \x01(\x02R\x11packetLossWarning\x12'\n" +
	"\x0fjitter_critical\x18\x05 \x01(\x02R\x0ejitterCritical\x12%\n" +
	"\x0ejitter_warning\x18\x06 \x01(\x02R\rjitterWarning\x122\n" +
	"\x15http_latency_critical\x18\a \x01(\x02R\x13httpLatencyCritical\x120\n" +
	"\x14http_latency_warning\x18\b \x01(\x02R\x12httpLatencyWarning\x12(\n" +
	"\x10http_valid_codes\x18\t \x03(\rR\x0ehttpValidCodes\x12&\n" +
	"\x0fdns_valid_codes\x18\n" +
	" \x03(\rR\rdnsValidCodes\x126\n" +
	"\x17latency_critical_stddev\x18\v \x01(\x02R\x15latencyCriticalStddev\x124\n" +
	"\x16latency_warning_stddev\x18\f \x01(\x02R\x14latencyWarningStddev\x124\n" +
	"\x16jitter_critical_stddev\x18\r \x01(\x02R\x14jitterCriticalStddev\x122\n" +
	"\x15jitter_warning_stddev\x18\x0e \x01(\x02R\x13jitterWarningStddev\x12?\n" +
	"\x1chttp_latency_critical_stddev\x18\x0f \x01(\x02R\x19httpLatencyCriticalStddev\x12=\n" +
	"\x1bhttp_latency_warning_stddev\x18\x10 \x01(\x02R\x18httpLatencyWarningStddev\"&\n" +
	"\fHostnameTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\"\"\n" +
	"\x06IpTest\x12\x18\n" +
	"\atargets\x18\x01 \x03(\tR\atargets\"#\n" +
	"\tAgentTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\"\xdd\x01\n" +
	"\bFlowTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12C\n" +
	"\x1etarget_refresh_interval_millis\x18\x02 \x01(\rR\x1btargetRefreshIntervalMillis\x12\x1b\n" +
	"\tmax_tasks\x18\x03 \x01(\rR\bmaxTasks\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12%\n" +
	"\x0einet_direction\x18\x05 \x01(\tR\rinetDirection\x12\x1c\n" +
	"\tdirection\x18\x06 \x01(\tR\tdirection\"\"\n" +
	"\bSiteTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\"!\n" +
	"\aTagTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\"`\n" +
	"\aDnsTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12=\n" +
	"\x04type\x18\x02 \x01(\x0e2).kentik.synthetics.v202101beta1.DNSRecordR\x04type\"!\n" +
	"\aUrlTest\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\"$\n" +
	"\bGridTest\x12\x18\n" +
	"\atargets\x18\x01 \x03(\tR\atargets\"f\n" +
	"\vDnsGridTest\x12\x18\n" +
	"\atargets\x18\x01 \x03(\tR\atargets\x12=\n" +
	"\x04type\x18\x02 \x01(\x0e2).kentik.synthetics.v202101beta1.DNSRecordR\x04type\"\x15\n" +
	"\x13ApplicationMeshTest\"\xb9\x01\n" +
	"\fMeshResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\blocal_ip\x18\x03 \x01(\tR\alocalIp\x12\x0e\n" +
	"\x02ip\x18\x04 \x01(\tR\x02ip\x12\x14\n" +
	"\x05alias\x18\x05 \x01(\tR\x05alias\x12D\n" +
	"\acolumns\x18\x06 \x03(\v2*.kentik.synthetics.v202101beta1.MeshColumnR\acolumns\"\xea\x01\n" +
	"\n" +
	"MeshColumn\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05alias\x18\x03 \x01(\tR\x05alias\x12\x16\n" +
	"\x06target\x18\x04 \x01(\tR\x06target\x12E\n" +
	"\ametrics\x18\x05 \x01(\v2+.kentik.synthetics.v202101beta1.MeshMetricsR\ametrics\x12C\n" +
	"\x06health\x18\x06 \x03(\v2+.kentik.synthetics.v202101beta1.MeshMetricsR\x06health\"N\n" +
	"\n" +
	"MeshMetric\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06health\x18\x02 \x01(\tR\x06health\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x03R\x05value\"\x94\x02\n" +
	"\vMeshMetrics\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12D\n" +
	"\alatency\x18\x02 \x01(\v2*.kentik.synthetics.v202101beta1.MeshMetricR\alatency\x12K\n" +
	"\vpacket_loss\x18\x03 \x01(\v2*.kentik.synthetics.v202101beta1.MeshMetricR\n" +
	"packetLoss\x12B\n" +
	"\x06jitter\x18\x04 \x01(\v2*.kentik.synthetics.v202101beta1.MeshMetricR\x06jitter\")\n" +
	"\x03ASN\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"1\n" +
	"\aCountry\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\",\n" +
	"\x06Region\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"d\n" +
	"\x04City\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\blatitude\x18\b \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\t \x01(\x01R\tlongitude\"\xc2\x01\n" +
	"\x03Geo\x12A\n" +
	"\acountry\x18\x01 \x01(\v2'.kentik.synthetics.v202101beta1.CountryR\acountry\x12>\n" +
	"\x06region\x18\x02 \x01(\v2&.kentik.synthetics.v202101beta1.RegionR\x06region\x128\n" +
	"\x04city\x18\x03 \x01(\v2$.kentik.synthetics.v202101beta1.CityR\x04city\"\x19\n" +
	"\x03DNS\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x8b\x02\n" +
	"\x06IPInfo\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x125\n" +
	"\x03asn\x18\x02 \x01(\v2#.kentik.synthetics.v202101beta1.ASNR\x03asn\x125\n" +
	"\x03geo\x18\x03 \x01(\v2#.kentik.synthetics.v202101beta1.GeoR\x03geo\x125\n" +
	"\x03dns\x18\x04 \x01(\v2#.kentik.synthetics.v202101beta1.DNSR\x03dns\x12\x1b\n" +
	"\tdevice_id\x18\x05 \x01(\tR\bdeviceId\x12\x17\n" +
	"\asite_id\x18\x06 \x01(\tR\x06siteId\x12\x16\n" +
	"\x06egress\x18\a \x01(\tR\x06egress\"(\n" +
	"\x06IDByIP\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x0e\n" +
	"\x02ip\x18\x02 \x01(\tR\x02ip\"\xab\x03\n" +
	"\x10TracerouteLookup\x12K\n" +
	"\x0eagent_id_by_ip\x18\x01 \x03(\v2&.kentik.synthetics.v202101beta1.IDByIPR\vagentIdByIp\x12=\n" +
	"\x06agents\x18\x02 \x03(\v2%.kentik.synthetics.v202101beta1.AgentR\x06agents\x127\n" +
	"\x04asns\x18\x03 \x03(\v2#.kentik.synthetics.v202101beta1.ASNR\x04asns\x12M\n" +
	"\x0fdevice_id_by_ip\x18\x04 \x03(\v2&.kentik.synthetics.v202101beta1.IDByIPR\fdeviceIdByIp\x12I\n" +
	"\rsite_id_by_ip\x18\x05 \x03(\v2&.kentik.synthetics.v202101beta1.IDByIPR\n" +
	"siteIdByIp\x128\n" +
	"\x03ips\x18\x06 \x03(\v2&.kentik.synthetics.v202101beta1.IPInfoR\x03ips\"\x85\x02\n" +
	"\bTraceHop\x12\x10\n" +
	"\x03ttl\x18\x01 \x01(\x05R\x03ttl\x12\x0e\n" +
	"\x02ip\x18\x02 \x01(\tR\x02ip\x12\x18\n" +
	"\atimeout\x18\x03 \x01(\bR\atimeout\x12\x18\n" +
	"\alatency\x18\x04 \x01(\x05R\alatency\x120\n" +
	"\x14min_expected_latency\x18\x05 \x01(\x05R\x12minExpectedLatency\x12\x10\n" +
	"\x03asn\x18\x06 \x01(\x05R\x03asn\x12\x12\n" +
	"\x04site\x18\a \x01(\x05R\x04site\x12\x16\n" +
	"\x06region\x18\b \x01(\x05R\x06region\x12\x16\n" +
	"\x06target\x18\t \x01(\bR\x06target\x12\x1b\n" +
	"\ttrace_end\x18\n" +
	" \x01(\bR\btraceEnd\"\xdc\x01\n" +
	"\n" +
	"TraceProbe\x12\x17\n" +
	"\aas_path\x18\x01 \x03(\x05R\x06asPath\x12\x1c\n" +
	"\tcompleted\x18\x02 \x01(\bR\tcompleted\x12\x1b\n" +
	"\thop_count\x18\x03 \x01(\x05R\bhopCount\x12\x1f\n" +
	"\vregion_path\x18\x04 \x03(\tR\n" +
	"regionPath\x12\x1b\n" +
	"\tsite_path\x18\x05 \x03(\x05R\bsitePath\x12<\n" +
	"\x04hops\x18\x06 \x03(\v2(.kentik.synthetics.v202101beta1.TraceHopR\x04hops\"\xbb\x01\n" +
	"\x05Trace\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\tR\aagentId\x12\x19\n" +
	"\bagent_ip\x18\x02 \x01(\tR\aagentIp\x12\x1b\n" +
	"\ttarget_ip\x18\x03 \x01(\tR\btargetIp\x12\x1b\n" +
	"\thop_count\x18\x04 \x01(\x05R\bhopCount\x12B\n" +
	"\x06probes\x18\x05 \x03(\v2*.kentik.synthetics.v202101beta1.TraceProbeR\x06probes\"I\n" +
	"\x05Stats\x12\x18\n" +
	"\aaverage\x18\x01 \x01(\x05R\aaverage\x12\x10\n" +
	"\x03max\x18\x02 \x01(\x05R\x03max\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x05R\x05total\"\x9e\x02\n" +
	"\x10TracerouteResult\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12=\n" +
	"\x06traces\x18\x02 \x03(\v2%.kentik.synthetics.v202101beta1.TraceR\x06traces\x12\x1b\n" +
	"\thop_count\x18\x03 \x01(\x05R\bhopCount\x12;\n" +
	"\x05count\x18\x04 \x01(\v2%.kentik.synthetics.v202101beta1.StatsR\x05count\x12A\n" +
	"\bdistance\x18\x05 \x01(\v2%.kentik.synthetics.v202101beta1.StatsR\bdistance\"\xda\x01\n" +
	"\x0eTracerouteInfo\x129\n" +
	"\x19is_trace_routes_truncated\x18\x01 \x01(\bR\x16isTraceRoutesTruncated\x12+\n" +
	"\x12max_asn_path_count\x18\x02 \x01(\x05R\x0fmaxAsnPathCount\x12-\n" +
	"\x13max_site_path_count\x18\x03 \x01(\x05R\x10maxSitePathCount\x121\n" +
	"\x15max_region_path_count\x18\x04 \x01(\x05R\x12maxRegionPathCount\"\xf0\x01\n" +
	"\x18GetHealthForTestsRequest\x12\x10\n" +
	"\x03ids\x18\x01 \x03(\tR\x03ids\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tagent_ids\x18\x04 \x03(\tR\bagentIds\x12\x19\n" +
	"\btask_ids\x18\x05 \x03(\tR\ataskIds\x12\x18\n" +
	"\aaugment\x18\x06 \x01(\bR\aaugment\"_\n" +
	"\x19GetHealthForTestsResponse\x12B\n" +
	"\x06health\x18\x01 \x03(\v2*.kentik.synthetics.v202101beta1.TestHealthR\x06health\"\xd6\x01\n" +
	"\x16GetTraceForTestRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tagent_ids\x18\x04 \x03(\tR\bagentIds\x12\x1d\n" +
	"\n" +
	"target_ips\x18\x05 \x03(\tR\ttargetIps\"\x96\x02\n" +
	"\x17GetTraceForTestResponse\x12J\n" +
	"\alookups\x18\x01 \x01(\v20.kentik.synthetics.v202101beta1.TracerouteLookupR\alookups\x12S\n" +
	"\ftrace_routes\x18\x02 \x03(\v20.kentik.synthetics.v202101beta1.TracerouteResultR\vtraceRoutes\x12Z\n" +
	"\x11trace_routes_info\x18\x03 \x01(\v2..kentik.synthetics.v202101beta1.TracerouteInfoR\x0ftraceRoutesInfo\"\x13\n" +
	"\x11ListAgentsRequest\"\x85\x01\n" +
	"\x12ListAgentsResponse\x12=\n" +
	"\x06agents\x18\x01 \x03(\v2%.kentik.synthetics.v202101beta1.AgentR\x06agents\x120\n" +
	"\x14invalid_agents_count\x18\x02 \x01(\rR\x12invalidAgentsCount\"!\n" +
	"\x0fGetAgentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"O\n" +
	"\x10GetAgentResponse\x12;\n" +
	"\x05agent\x18\x01 \x01(\v2%.kentik.synthetics.v202101beta1.AgentR\x05agent\"\x80\x01\n" +
	"\x11PatchAgentRequest\x12;\n" +
	"\x05agent\x18\x01 \x01(\v2%.kentik.synthetics.v202101beta1.AgentR\x05agent\x12.\n" +
	"\x04mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\x04mask\"Q\n" +
	"\x12PatchAgentResponse\x12;\n" +
	"\x05agent\x18\x01 \x01(\v2%.kentik.synthetics.v202101beta1.AgentR\x05agent\"$\n" +
	"\x12DeleteAgentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x15\n" +
	"\x13DeleteAgentResponse\"*\n" +
	"\x10ListTestsRequest\x12\x16\n" +
	"\x06preset\x18\x01 \x01(\bR\x06preset\"\x7f\n" +
	"\x11ListTestsResponse\x12:\n" +
	"\x05tests\x18\x01 \x03(\v2$.kentik.synthetics.v202101beta1.TestR\x05tests\x12.\n" +
	"\x13invalid_tests_count\x18\x02 \x01(\rR\x11invalidTestsCount\"M\n" +
	"\x11CreateTestRequest\x128\n" +
	"\x04test\x18\x01 \x01(\v2$.kentik.synthetics.v202101beta1.TestR\x04test\"N\n" +
	"\x12CreateTestResponse\x128\n" +
	"\x04test\x18\x01 \x01(\v2$.kentik.synthetics.v202101beta1.TestR\x04test\" \n" +
	"\x0eGetTestRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"K\n" +
	"\x0fGetTestResponse\x128\n" +
	"\x04test\x18\x01 \x01(\v2$.kentik.synthetics.v202101beta1.TestR\x04test\"j\n" +
	"\x14SetTestStatusRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12B\n" +
	"\x06status\x18\x02 \x01(\x0e2*.kentik.synthetics.v202101beta1.TestStatusR\x06status\"\x17\n" +
	"\x15SetTestStatusResponse\"|\n" +
	"\x10PatchTestRequest\x128\n" +
	"\x04test\x18\x01 \x01(\v2$.kentik.synthetics.v202101beta1.TestR\x04test\x12.\n" +
	"\x04mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\x04mask\"M\n" +
	"\x11PatchTestResponse\x128\n" +
	"\x04test\x18\x01 \x01(\v2$.kentik.synthetics.v202101beta1.TestR\x04test\"#\n" +
	"\x11DeleteTestRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x14\n" +
	"\x12DeleteTestResponse*a\n" +
	"\rImplementType\x12\x1e\n" +
	"\x1aIMPLEMENT_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13IMPLEMENT_TYPE_RUST\x10\x01\x12\x17\n" +
	"\x13IMPLEMENT_TYPE_NODE\x10\x02*]\n" +
	"\bIPFamily\x12\x19\n" +
	"\x15IP_FAMILY_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fIP_FAMILY_V4\x10\x01\x12\x10\n" +
	"\fIP_FAMILY_V6\x10\x02\x12\x12\n" +
	"\x0eIP_FAMILY_DUAL\x10\x03*r\n" +
	"\n" +
	"TestStatus\x12\x1b\n" +
	"\x17TEST_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12TEST_STATUS_ACTIVE\x10\x01\x12\x16\n" +
	"\x12TEST_STATUS_PAUSED\x10\x02\x12\x17\n" +
	"\x13TEST_STATUS_DELETED\x10\x03*q\n" +
	"\vAgentStatus\x12\x1c\n" +
	"\x18AGENT_STATUS_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fAGENT_STATUS_OK\x10\x01\x12\x15\n" +
	"\x11AGENT_STATUS_WAIT\x10\x02\x12\x18\n" +
	"\x14AGENT_STATUS_DELETED\x10\x03*o\n" +
	"\tTaskState\x12\x1a\n" +
	"\x16TASK_STATE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12TASK_STATE_CREATED\x10\x01\x12\x16\n" +
	"\x12TASK_STATE_UPDATED\x10\x02\x12\x16\n" +
	"\x12TASK_STATE_DELETED\x10\x03*\xc8\x01\n" +
	"\tDNSRecord\x12\x1a\n" +
	"\x16DNS_RECORD_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fDNS_RECORD_A\x10\x01\x12\x13\n" +
	"\x0fDNS_RECORD_AAAA\x10\x02\x12\x14\n" +
	"\x10DNS_RECORD_CNAME\x10\x03\x12\x14\n" +
	"\x10DNS_RECORD_DNAME\x10\x04\x12\x11\n" +
	"\rDNS_RECORD_NS\x10\x05\x12\x11\n" +
	"\rDNS_RECORD_MX\x10\x06\x12\x12\n" +
	"\x0eDNS_RECORD_PTR\x10\a\x12\x12\n" +
	"\x0eDNS_RECORD_SOA\x10\b2\xd8\x05\n" +
	"\x15SyntheticsDataService\x12\xdc\x02\n" +
	"\x11GetHealthForTests\x128.kentik.synthetics.v202101beta1.GetHealthForTestsRequest\x1a9.kentik.synthetics.v202101beta1.GetHealthForTestsResponse\"\xd1\x01\x92A\x8a\x01\x12&Get health status for synthetics test.\x1aMGet synthetics health test for login user. Also returns mesh data on request.*\x11GetHealthForTests\xf2\xd7\x02\x0fsynthetics:read\x82\xd3\xe4\x93\x02*:\x01*\"%/synthetics/v202101beta1/health/tests\x12\xaf\x02\n" +
	"\x0fGetTraceForTest\x126.kentik.synthetics.v202101beta1.GetTraceForTestRequest\x1a7.kentik.synthetics.v202101beta1.GetTraceForTestResponse\"\xaa\x01\x92AX\x12\x15Get trace route data.\x1a.Get trace route data for the specific test id.*\x0fGetTraceForTest\xf2\xd7\x02\x0fsynthetics:read\x82\xd3\xe4\x93\x026:\x01*\"1/synthetics/v202101beta1/tests/{id}/results/trace\x1a.\xcaA\x19synthetics.api.kentik.com\xea\xd7\x02\n" +
	"synthetics\x90\xd8\x02\x032\xed\x16\n" +
	"\x16SyntheticsAdminService\x12\xed\x01\n" +
	"\n" +
	"ListAgents\x121.kentik.synthetics.v202101beta1.ListAgentsRequest\x1a2.kentik.synthetics.v202101beta1.ListAgentsResponse\"x\x92A5\x12\fList Agents.\x1a\x19Returns a list of agents.*\n" +
	"AgentsList\xf2\xd7\x02\x15admin.synthetics:read\x82\xd3\xe4\x93\x02!\x12\x1f/synthetics/v202101beta1/agents\x12\x9b\x02\n" +
	"\bGetAgent\x12/.kentik.synthetics.v202101beta1.GetAgentRequest\x1a0.kentik.synthetics.v202101beta1.GetAgentResponse\"\xab\x01\x92Ac\x12\x1fGet information about an agent.\x1a6Returns information about the agent specified with id.*\bAgentGet\xf2\xd7\x02\x15admin.synthetics:read\x82\xd3\xe4\x93\x02&\x12$/synthetics/v202101beta1/agents/{id}\x12\xba\x02\n" +
	"\n" +
	"PatchAgent\x121.kentik.synthetics.v202101beta1.PatchAgentRequest\x1a2.kentik.synthetics.v202101beta1.PatchAgentResponse\"\xc4\x01\x92Ar\x12\x0fPatch an agent.\x1aSPartially Updates the attributes of agent specified with id and update_mask fields.*\n" +
	"AgentPatch\xf2\xd7\x02\x16admin.synthetics:write\x82\xd3\xe4\x93\x02/:\x01*2*/synthetics/v202101beta1/agents/{agent.id}\x12\x87\x02\n" +
	"\vDeleteAgent\x122.kentik.synthetics.v202101beta1.DeleteAgentRequest\x1a3.kentik.synthetics.v202101beta1.DeleteAgentResponse\"\x8e\x01\x92AE\x12\x10Delete an agent.\x1a$Deletes the agent specified with id.*\vAgentDelete\xf2\xd7\x02\x16admin.synthetics:write\x82\xd3\xe4\x93\x02&*$/synthetics/v202101beta1/agents/{id}\x12\xfd\x01\n" +
	"\tListTests\x120.kentik.synthetics.v202101beta1.ListTestsRequest\x1a1.kentik.synthetics.v202101beta1.ListTestsResponse\"\x8a\x01\x92AH\x12\x16List Synthetics Tests.\x1a#Returns a list of syntehtics tests.*\tTestsList\xf2\xd7\x02\x15admin.synthetics:read\x82\xd3\xe4\x93\x02 \x12\x1e/synthetics/v202101beta1/tests\x12\x9d\x02\n" +
	"\n" +
	"CreateTest\x121.kentik.synthetics.v202101beta1.CreateTestRequest\x1a2.kentik.synthetics.v202101beta1.CreateTestResponse\"\xa7\x01\x92Aa\x12\x17Create Synthetics Test.\x1a:Create synthetics test from request. Returns created test.*\n" +
	"TestCreate\xf2\xd7\x02\x16admin.synthetics:write\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/synthetics/v202101beta1/tests\x12\xa8\x02\n" +
	"\aGetTest\x12..kentik.synthetics.v202101beta1.GetTestRequest\x1a/.kentik.synthetics.v202101beta1.GetTestResponse\"\xbb\x01\x92At\x12&Get information about Synthetics Test.\x1aAReturns information about synthetics test specified with test ID.*\aTestGet\xf2\xd7\x02\x15admin.synthetics:read\x82\xd3\xe4\x93\x02%\x12#/synthetics/v202101beta1/tests/{id}\x12\x98\x02\n" +
	"\rSetTestStatus\x124.kentik.synthetics.v202101beta1.SetTestStatusRequest\x1a5.kentik.synthetics.v202101beta1.SetTestStatusResponse\"\x99\x01\x92AG\x12\x15Update a test status.\x1a\x1cUpdate the status of a test.*\x10TestStatusUpdate\xf2\xd7\x02\x16admin.synthetics:write\x82\xd3\xe4\x93\x02/:\x01*\x1a*/synthetics/v202101beta1/tests/{id}/status\x12\xc8\x02\n" +
	"\tPatchTest\x120.kentik.synthetics.v202101beta1.PatchTestRequest\x1a1.kentik.synthetics.v202101beta1.PatchTestResponse\"\xd5\x01\x92A\x84\x01\x12\x18Patch a Synthetics Test.\x1a]Partially Updates the attributes of synthetics test specified with id and update_mask fields.*\tTestPatch\xf2\xd7\x02\x16admin.synthetics:write\x82\xd3\xe4\x93\x02-:\x01*2(/synthetics/v202101beta1/tests/{test.id}\x12\x96\x02\n" +
	"\n" +
	"DeleteTest\x121.kentik.synthetics.v202101beta1.DeleteTestRequest\x1a2.kentik.synthetics.v202101beta1.DeleteTestResponse\"\xa0\x01\x92AX\x12\x1aDelete an Synthetics Test.\x1a.Deletes the synthetics test specified with id.*\n" +
	"TestDelete\xf2\xd7\x02\x16admin.synthetics:write\x82\xd3\xe4\x93\x02%*#/synthetics/v202101beta1/tests/{id}\x1a4\xcaA\x19synthetics.api.kentik.com\xea\xd7\x02\x10admin.synthetics\x90\xd8\x02\x03B\xf2\x03\x92A\x98\x03\x12\xae\x01\n" +
	"\x19Synthetics Monitoring API\x12K--- This API has been deprecated and will be removed in the near future ---\"7\n" +
	"\x16Kentik API Engineering\x12\x1dhttps://github.com/kentik/api2\v202101beta1*\x01\x022\x10application/json:\x10application/jsonZD\n" +
	"\x1e\n" +
	"\x05email\x12\x15\b\x02\x1a\x0fX-CH-Auth-Email \x02\n" +
	"\"\n" +
	"\x05token\x12\x19\b\x02\x1a\x13X-CH-Auth-API-Token \x02b\x16\n" +
	"\t\n" +
	"\x05email\x12\x00\n" +
	"\t\n" +
	"\x05token\x12\x00r`\n" +
	"\"Kentik synthetic monitoring system\x12:https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetics_OverviewZTgithub.com/kentik/api-schema-public/gen/go/kentik/synthetics/v202101beta1;syntheticsb\x06proto3"

var (
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescOnce sync.Once
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData []byte
)

func file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescGZIP() []byte {
	file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescOnce.Do(func() {
		file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc), len(file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc)))
	})
	return file_kentik_synthetics_v202101beta1_synthetics_proto_rawDescData
}

var file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_kentik_synthetics_v202101beta1_synthetics_proto_goTypes = []any{
	(ImplementType)(0),                // 0: kentik.synthetics.v202101beta1.ImplementType
	(IPFamily)(0),                     // 1: kentik.synthetics.v202101beta1.IPFamily
	(TestStatus)(0),                   // 2: kentik.synthetics.v202101beta1.TestStatus
	(AgentStatus)(0),                  // 3: kentik.synthetics.v202101beta1.AgentStatus
	(TaskState)(0),                    // 4: kentik.synthetics.v202101beta1.TaskState
	(DNSRecord)(0),                    // 5: kentik.synthetics.v202101beta1.DNSRecord
	(*Health)(nil),                    // 6: kentik.synthetics.v202101beta1.Health
	(*AgentTaskConfig)(nil),           // 7: kentik.synthetics.v202101beta1.AgentTaskConfig
	(*TestHealth)(nil),                // 8: kentik.synthetics.v202101beta1.TestHealth
	(*TaskHealth)(nil),                // 9: kentik.synthetics.v202101beta1.TaskHealth
	(*AgentHealth)(nil),               // 10: kentik.synthetics.v202101beta1.AgentHealth
	(*HealthMoment)(nil),              // 11: kentik.synthetics.v202101beta1.HealthMoment
	(*Agent)(nil),                     // 12: kentik.synthetics.v202101beta1.Agent
	(*PingTaskDefinition)(nil),        // 13: kentik.synthetics.v202101beta1.PingTaskDefinition
	(*TraceTaskDefinition)(nil),       // 14: kentik.synthetics.v202101beta1.TraceTaskDefinition
	(*HTTPTaskDefinition)(nil),        // 15: kentik.synthetics.v202101beta1.HTTPTaskDefinition
	(*Task)(nil),                      // 16: kentik.synthetics.v202101beta1.Task
	(*KnockTaskDefinition)(nil),       // 17: kentik.synthetics.v202101beta1.KnockTaskDefinition
	(*DNSTaskDefinition)(nil),         // 18: kentik.synthetics.v202101beta1.DNSTaskDefinition
	(*ShakeTaskDefinition)(nil),       // 19: kentik.synthetics.v202101beta1.ShakeTaskDefinition
	(*UserInfo)(nil),                  // 20: kentik.synthetics.v202101beta1.UserInfo
	(*Test)(nil),                      // 21: kentik.synthetics.v202101beta1.Test
	(*HTTPConfig)(nil),                // 22: kentik.synthetics.v202101beta1.HTTPConfig
	(*TestSettings)(nil),              // 23: kentik.synthetics.v202101beta1.TestSettings
	(*TestTraceSettings)(nil),         // 24: kentik.synthetics.v202101beta1.TestTraceSettings
	(*TestPingSettings)(nil),          // 25: kentik.synthetics.v202101beta1.TestPingSettings
	(*TestMonitoringSettings)(nil),    // 26: kentik.synthetics.v202101beta1.TestMonitoringSettings
	(*HealthSettings)(nil),            // 27: kentik.synthetics.v202101beta1.HealthSettings
	(*HostnameTest)(nil),              // 28: kentik.synthetics.v202101beta1.HostnameTest
	(*IpTest)(nil),                    // 29: kentik.synthetics.v202101beta1.IpTest
	(*AgentTest)(nil),                 // 30: kentik.synthetics.v202101beta1.AgentTest
	(*FlowTest)(nil),                  // 31: kentik.synthetics.v202101beta1.FlowTest
	(*SiteTest)(nil),                  // 32: kentik.synthetics.v202101beta1.SiteTest
	(*TagTest)(nil),                   // 33: kentik.synthetics.v202101beta1.TagTest
	(*DnsTest)(nil),                   // 34: kentik.synthetics.v202101beta1.DnsTest
	(*UrlTest)(nil),                   // 35: kentik.synthetics.v202101beta1.UrlTest
	(*GridTest)(nil),                  // 36: kentik.synthetics.v202101beta1.GridTest
	(*DnsGridTest)(nil),               // 37: kentik.synthetics.v202101beta1.DnsGridTest
	(*ApplicationMeshTest)(nil),       // 38: kentik.synthetics.v202101beta1.ApplicationMeshTest
	(*MeshResponse)(nil),              // 39: kentik.synthetics.v202101beta1.MeshResponse
	(*MeshColumn)(nil),                // 40: kentik.synthetics.v202101beta1.MeshColumn
	(*MeshMetric)(nil),                // 41: kentik.synthetics.v202101beta1.MeshMetric
	(*MeshMetrics)(nil),               // 42: kentik.synthetics.v202101beta1.MeshMetrics
	(*ASN)(nil),                       // 43: kentik.synthetics.v202101beta1.ASN
	(*Country)(nil),                   // 44: kentik.synthetics.v202101beta1.Country
	(*Region)(nil),                    // 45: kentik.synthetics.v202101beta1.Region
	(*City)(nil),                      // 46: kentik.synthetics.v202101beta1.City
	(*Geo)(nil),                       // 47: kentik.synthetics.v202101beta1.Geo
	(*DNS)(nil),                       // 48: kentik.synthetics.v202101beta1.DNS
	(*IPInfo)(nil),                    // 49: kentik.synthetics.v202101beta1.IPInfo
	(*IDByIP)(nil),                    // 50: kentik.synthetics.v202101beta1.IDByIP
	(*TracerouteLookup)(nil),          // 51: kentik.synthetics.v202101beta1.TracerouteLookup
	(*TraceHop)(nil),                  // 52: kentik.synthetics.v202101beta1.TraceHop
	(*TraceProbe)(nil),                // 53: kentik.synthetics.v202101beta1.TraceProbe
	(*Trace)(nil),                     // 54: kentik.synthetics.v202101beta1.Trace
	(*Stats)(nil),                     // 55: kentik.synthetics.v202101beta1.Stats
	(*TracerouteResult)(nil),          // 56: kentik.synthetics.v202101beta1.TracerouteResult
	(*TracerouteInfo)(nil),            // 57: kentik.synthetics.v202101beta1.TracerouteInfo
	(*GetHealthForTestsRequest)(nil),  // 58: kentik.synthetics.v202101beta1.GetHealthForTestsRequest
	(*GetHealthForTestsResponse)(nil), // 59: kentik.synthetics.v202101beta1.GetHealthForTestsResponse
	(*GetTraceForTestRequest)(nil),    // 60: kentik.synthetics.v202101beta1.GetTraceForTestRequest
	(*GetTraceForTestResponse)(nil),   // 61: kentik.synthetics.v202101beta1.GetTraceForTestResponse
	(*ListAgentsRequest)(nil),         // 62: kentik.synthetics.v202101beta1.ListAgentsRequest
	(*ListAgentsResponse)(nil),        // 63: kentik.synthetics.v202101beta1.ListAgentsResponse
	(*GetAgentRequest)(nil),           // 64: kentik.synthetics.v202101beta1.GetAgentRequest
	(*GetAgentResponse)(nil),          // 65: kentik.synthetics.v202101beta1.GetAgentResponse
	(*PatchAgentRequest)(nil),         // 66: kentik.synthetics.v202101beta1.PatchAgentRequest
	(*PatchAgentResponse)(nil),        // 67: kentik.synthetics.v202101beta1.PatchAgentResponse
	(*DeleteAgentRequest)(nil),        // 68: kentik.synthetics.v202101beta1.DeleteAgentRequest
	(*DeleteAgentResponse)(nil),       // 69: kentik.synthetics.v202101beta1.DeleteAgentResponse
	(*ListTestsRequest)(nil),          // 70: kentik.synthetics.v202101beta1.ListTestsRequest
	(*ListTestsResponse)(nil),         // 71: kentik.synthetics.v202101beta1.ListTestsResponse
	(*CreateTestRequest)(nil),         // 72: kentik.synthetics.v202101beta1.CreateTestRequest
	(*CreateTestResponse)(nil),        // 73: kentik.synthetics.v202101beta1.CreateTestResponse
	(*GetTestRequest)(nil),            // 74: kentik.synthetics.v202101beta1.GetTestRequest
	(*GetTestResponse)(nil),           // 75: kentik.synthetics.v202101beta1.GetTestResponse
	(*SetTestStatusRequest)(nil),      // 76: kentik.synthetics.v202101beta1.SetTestStatusRequest
	(*SetTestStatusResponse)(nil),     // 77: kentik.synthetics.v202101beta1.SetTestStatusResponse
	(*PatchTestRequest)(nil),          // 78: kentik.synthetics.v202101beta1.PatchTestRequest
	(*PatchTestResponse)(nil),         // 79: kentik.synthetics.v202101beta1.PatchTestResponse
	(*DeleteTestRequest)(nil),         // 80: kentik.synthetics.v202101beta1.DeleteTestRequest
	(*DeleteTestResponse)(nil),        // 81: kentik.synthetics.v202101beta1.DeleteTestResponse
	nil,                               // 82: kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry
	nil,                               // 83: kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry
	nil,                               // 84: kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry
	(*timestamppb.Timestamp)(nil),     // 85: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),     // 86: google.protobuf.FieldMask
}
var file_kentik_synthetics_v202101beta1_synthetics_proto_depIdxs = []int32{
	85,  // 0: kentik.synthetics.v202101beta1.Health.time:type_name -> google.protobuf.Timestamp
	9,   // 1: kentik.synthetics.v202101beta1.TestHealth.tasks:type_name -> kentik.synthetics.v202101beta1.TaskHealth
	6,   // 2: kentik.synthetics.v202101beta1.TestHealth.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	6,   // 3: kentik.synthetics.v202101beta1.TestHealth.health_ts:type_name -> kentik.synthetics.v202101beta1.Health
	7,   // 4: kentik.synthetics.v202101beta1.TestHealth.agent_task_config:type_name -> kentik.synthetics.v202101beta1.AgentTaskConfig
	39,  // 5: kentik.synthetics.v202101beta1.TestHealth.mesh:type_name -> kentik.synthetics.v202101beta1.MeshResponse
	16,  // 6: kentik.synthetics.v202101beta1.TaskHealth.task:type_name -> kentik.synthetics.v202101beta1.Task
	10,  // 7: kentik.synthetics.v202101beta1.TaskHealth.agents:type_name -> kentik.synthetics.v202101beta1.AgentHealth
	6,   // 8: kentik.synthetics.v202101beta1.TaskHealth.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	12,  // 9: kentik.synthetics.v202101beta1.TaskHealth.target_agent:type_name -> kentik.synthetics.v202101beta1.Agent
	12,  // 10: kentik.synthetics.v202101beta1.AgentHealth.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	11,  // 11: kentik.synthetics.v202101beta1.AgentHealth.health:type_name -> kentik.synthetics.v202101beta1.HealthMoment
	6,   // 12: kentik.synthetics.v202101beta1.AgentHealth.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	85,  // 13: kentik.synthetics.v202101beta1.HealthMoment.time:type_name -> google.protobuf.Timestamp
	6,   // 14: kentik.synthetics.v202101beta1.HealthMoment.overall_health:type_name -> kentik.synthetics.v202101beta1.Health
	82,  // 15: kentik.synthetics.v202101beta1.HealthMoment.other_healths:type_name -> kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry
	3,   // 16: kentik.synthetics.v202101beta1.Agent.status:type_name -> kentik.synthetics.v202101beta1.AgentStatus
	85,  // 17: kentik.synthetics.v202101beta1.Agent.last_authed:type_name -> google.protobuf.Timestamp
	1,   // 18: kentik.synthetics.v202101beta1.Agent.family:type_name -> kentik.synthetics.v202101beta1.IPFamily
	0,   // 19: kentik.synthetics.v202101beta1.Agent.agent_impl:type_name -> kentik.synthetics.v202101beta1.ImplementType
	4,   // 20: kentik.synthetics.v202101beta1.Task.state:type_name -> kentik.synthetics.v202101beta1.TaskState
	1,   // 21: kentik.synthetics.v202101beta1.Task.family:type_name -> kentik.synthetics.v202101beta1.IPFamily
	13,  // 22: kentik.synthetics.v202101beta1.Task.ping:type_name -> kentik.synthetics.v202101beta1.PingTaskDefinition
	14,  // 23: kentik.synthetics.v202101beta1.Task.traceroute:type_name -> kentik.synthetics.v202101beta1.TraceTaskDefinition
	15,  // 24: kentik.synthetics.v202101beta1.Task.http:type_name -> kentik.synthetics.v202101beta1.HTTPTaskDefinition
	17,  // 25: kentik.synthetics.v202101beta1.Task.knock:type_name -> kentik.synthetics.v202101beta1.KnockTaskDefinition
	18,  // 26: kentik.synthetics.v202101beta1.Task.dns:type_name -> kentik.synthetics.v202101beta1.DNSTaskDefinition
	19,  // 27: kentik.synthetics.v202101beta1.Task.shake:type_name -> kentik.synthetics.v202101beta1.ShakeTaskDefinition
	2,   // 28: kentik.synthetics.v202101beta1.Test.status:type_name -> kentik.synthetics.v202101beta1.TestStatus
	23,  // 29: kentik.synthetics.v202101beta1.Test.settings:type_name -> kentik.synthetics.v202101beta1.TestSettings
	85,  // 30: kentik.synthetics.v202101beta1.Test.expires_on:type_name -> google.protobuf.Timestamp
	85,  // 31: kentik.synthetics.v202101beta1.Test.cdate:type_name -> google.protobuf.Timestamp
	85,  // 32: kentik.synthetics.v202101beta1.Test.edate:type_name -> google.protobuf.Timestamp
	20,  // 33: kentik.synthetics.v202101beta1.Test.created_by:type_name -> kentik.synthetics.v202101beta1.UserInfo
	20,  // 34: kentik.synthetics.v202101beta1.Test.last_updated_by:type_name -> kentik.synthetics.v202101beta1.UserInfo
	83,  // 35: kentik.synthetics.v202101beta1.HTTPConfig.headers:type_name -> kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry
	84,  // 36: kentik.synthetics.v202101beta1.HTTPConfig.css_selectors:type_name -> kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry
	28,  // 37: kentik.synthetics.v202101beta1.TestSettings.hostname:type_name -> kentik.synthetics.v202101beta1.HostnameTest
	29,  // 38: kentik.synthetics.v202101beta1.TestSettings.ip:type_name -> kentik.synthetics.v202101beta1.IpTest
	30,  // 39: kentik.synthetics.v202101beta1.TestSettings.agent:type_name -> kentik.synthetics.v202101beta1.AgentTest
	31,  // 40: kentik.synthetics.v202101beta1.TestSettings.flow:type_name -> kentik.synthetics.v202101beta1.FlowTest
	32,  // 41: kentik.synthetics.v202101beta1.TestSettings.site:type_name -> kentik.synthetics.v202101beta1.SiteTest
	33,  // 42: kentik.synthetics.v202101beta1.TestSettings.tag:type_name -> kentik.synthetics.v202101beta1.TagTest
	34,  // 43: kentik.synthetics.v202101beta1.TestSettings.dns:type_name -> kentik.synthetics.v202101beta1.DnsTest
	35,  // 44: kentik.synthetics.v202101beta1.TestSettings.url:type_name -> kentik.synthetics.v202101beta1.UrlTest
	36,  // 45: kentik.synthetics.v202101beta1.TestSettings.network_grid:type_name -> kentik.synthetics.v202101beta1.GridTest
	35,  // 46: kentik.synthetics.v202101beta1.TestSettings.page_load:type_name -> kentik.synthetics.v202101beta1.UrlTest
	37,  // 47: kentik.synthetics.v202101beta1.TestSettings.dns_grid:type_name -> kentik.synthetics.v202101beta1.DnsGridTest
	38,  // 48: kentik.synthetics.v202101beta1.TestSettings.application_mesh:type_name -> kentik.synthetics.v202101beta1.ApplicationMeshTest
	27,  // 49: kentik.synthetics.v202101beta1.TestSettings.health_settings:type_name -> kentik.synthetics.v202101beta1.HealthSettings
	26,  // 50: kentik.synthetics.v202101beta1.TestSettings.monitoring_settings:type_name -> kentik.synthetics.v202101beta1.TestMonitoringSettings
	25,  // 51: kentik.synthetics.v202101beta1.TestSettings.ping:type_name -> kentik.synthetics.v202101beta1.TestPingSettings
	24,  // 52: kentik.synthetics.v202101beta1.TestSettings.trace:type_name -> kentik.synthetics.v202101beta1.TestTraceSettings
	1,   // 53: kentik.synthetics.v202101beta1.TestSettings.family:type_name -> kentik.synthetics.v202101beta1.IPFamily
	22,  // 54: kentik.synthetics.v202101beta1.TestSettings.http:type_name -> kentik.synthetics.v202101beta1.HTTPConfig
	5,   // 55: kentik.synthetics.v202101beta1.DnsTest.type:type_name -> kentik.synthetics.v202101beta1.DNSRecord
	5,   // 56: kentik.synthetics.v202101beta1.DnsGridTest.type:type_name -> kentik.synthetics.v202101beta1.DNSRecord
	40,  // 57: kentik.synthetics.v202101beta1.MeshResponse.columns:type_name -> kentik.synthetics.v202101beta1.MeshColumn
	42,  // 58: kentik.synthetics.v202101beta1.MeshColumn.metrics:type_name -> kentik.synthetics.v202101beta1.MeshMetrics
	42,  // 59: kentik.synthetics.v202101beta1.MeshColumn.health:type_name -> kentik.synthetics.v202101beta1.MeshMetrics
	85,  // 60: kentik.synthetics.v202101beta1.MeshMetrics.time:type_name -> google.protobuf.Timestamp
	41,  // 61: kentik.synthetics.v202101beta1.MeshMetrics.latency:type_name -> kentik.synthetics.v202101beta1.MeshMetric
	41,  // 62: kentik.synthetics.v202101beta1.MeshMetrics.packet_loss:type_name -> kentik.synthetics.v202101beta1.MeshMetric
	41,  // 63: kentik.synthetics.v202101beta1.MeshMetrics.jitter:type_name -> kentik.synthetics.v202101beta1.MeshMetric
	44,  // 64: kentik.synthetics.v202101beta1.Geo.country:type_name -> kentik.synthetics.v202101beta1.Country
	45,  // 65: kentik.synthetics.v202101beta1.Geo.region:type_name -> kentik.synthetics.v202101beta1.Region
	46,  // 66: kentik.synthetics.v202101beta1.Geo.city:type_name -> kentik.synthetics.v202101beta1.City
	43,  // 67: kentik.synthetics.v202101beta1.IPInfo.asn:type_name -> kentik.synthetics.v202101beta1.ASN
	47,  // 68: kentik.synthetics.v202101beta1.IPInfo.geo:type_name -> kentik.synthetics.v202101beta1.Geo
	48,  // 69: kentik.synthetics.v202101beta1.IPInfo.dns:type_name -> kentik.synthetics.v202101beta1.DNS
	50,  // 70: kentik.synthetics.v202101beta1.TracerouteLookup.agent_id_by_ip:type_name -> kentik.synthetics.v202101beta1.IDByIP
	12,  // 71: kentik.synthetics.v202101beta1.TracerouteLookup.agents:type_name -> kentik.synthetics.v202101beta1.Agent
	43,  // 72: kentik.synthetics.v202101beta1.TracerouteLookup.asns:type_name -> kentik.synthetics.v202101beta1.ASN
	50,  // 73: kentik.synthetics.v202101beta1.TracerouteLookup.device_id_by_ip:type_name -> kentik.synthetics.v202101beta1.IDByIP
	50,  // 74: kentik.synthetics.v202101beta1.TracerouteLookup.site_id_by_ip:type_name -> kentik.synthetics.v202101beta1.IDByIP
	49,  // 75: kentik.synthetics.v202101beta1.TracerouteLookup.ips:type_name -> kentik.synthetics.v202101beta1.IPInfo
	52,  // 76: kentik.synthetics.v202101beta1.TraceProbe.hops:type_name -> kentik.synthetics.v202101beta1.TraceHop
	53,  // 77: kentik.synthetics.v202101beta1.Trace.probes:type_name -> kentik.synthetics.v202101beta1.TraceProbe
	85,  // 78: kentik.synthetics.v202101beta1.TracerouteResult.time:type_name -> google.protobuf.Timestamp
	54,  // 79: kentik.synthetics.v202101beta1.TracerouteResult.traces:type_name -> kentik.synthetics.v202101beta1.Trace
	55,  // 80: kentik.synthetics.v202101beta1.TracerouteResult.count:type_name -> kentik.synthetics.v202101beta1.Stats
	55,  // 81: kentik.synthetics.v202101beta1.TracerouteResult.distance:type_name -> kentik.synthetics.v202101beta1.Stats
	85,  // 82: kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time:type_name -> google.protobuf.Timestamp
	85,  // 83: kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time:type_name -> google.protobuf.Timestamp
	8,   // 84: kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health:type_name -> kentik.synthetics.v202101beta1.TestHealth
	85,  // 85: kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time:type_name -> google.protobuf.Timestamp
	85,  // 86: kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time:type_name -> google.protobuf.Timestamp
	51,  // 87: kentik.synthetics.v202101beta1.GetTraceForTestResponse.lookups:type_name -> kentik.synthetics.v202101beta1.TracerouteLookup
	56,  // 88: kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes:type_name -> kentik.synthetics.v202101beta1.TracerouteResult
	57,  // 89: kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes_info:type_name -> kentik.synthetics.v202101beta1.TracerouteInfo
	12,  // 90: kentik.synthetics.v202101beta1.ListAgentsResponse.agents:type_name -> kentik.synthetics.v202101beta1.Agent
	12,  // 91: kentik.synthetics.v202101beta1.GetAgentResponse.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	12,  // 92: kentik.synthetics.v202101beta1.PatchAgentRequest.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	86,  // 93: kentik.synthetics.v202101beta1.PatchAgentRequest.mask:type_name -> google.protobuf.FieldMask
	12,  // 94: kentik.synthetics.v202101beta1.PatchAgentResponse.agent:type_name -> kentik.synthetics.v202101beta1.Agent
	21,  // 95: kentik.synthetics.v202101beta1.ListTestsResponse.tests:type_name -> kentik.synthetics.v202101beta1.Test
	21,  // 96: kentik.synthetics.v202101beta1.CreateTestRequest.test:type_name -> kentik.synthetics.v202101beta1.Test
	21,  // 97: kentik.synthetics.v202101beta1.CreateTestResponse.test:type_name -> kentik.synthetics.v202101beta1.Test
	21,  // 98: kentik.synthetics.v202101beta1.GetTestResponse.test:type_name -> kentik.synthetics.v202101beta1.Test
	2,   // 99: kentik.synthetics.v202101beta1.SetTestStatusRequest.status:type_name -> kentik.synthetics.v202101beta1.TestStatus
	21,  // 100: kentik.synthetics.v202101beta1.PatchTestRequest.test:type_name -> kentik.synthetics.v202101beta1.Test
	86,  // 101: kentik.synthetics.v202101beta1.PatchTestRequest.mask:type_name -> google.protobuf.FieldMask
	21,  // 102: kentik.synthetics.v202101beta1.PatchTestResponse.test:type_name -> kentik.synthetics.v202101beta1.Test
	58,  // 103: kentik.synthetics.v202101beta1.SyntheticsDataService.GetHealthForTests:input_type -> kentik.synthetics.v202101beta1.GetHealthForTestsRequest
	60,  // 104: kentik.synthetics.v202101beta1.SyntheticsDataService.GetTraceForTest:input_type -> kentik.synthetics.v202101beta1.GetTraceForTestRequest
	62,  // 105: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListAgents:input_type -> kentik.synthetics.v202101beta1.ListAgentsRequest
	64,  // 106: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetAgent:input_type -> kentik.synthetics.v202101beta1.GetAgentRequest
	66,  // 107: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchAgent:input_type -> kentik.synthetics.v202101beta1.PatchAgentRequest
	68,  // 108: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteAgent:input_type -> kentik.synthetics.v202101beta1.DeleteAgentRequest
	70,  // 109: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListTests:input_type -> kentik.synthetics.v202101beta1.ListTestsRequest
	72,  // 110: kentik.synthetics.v202101beta1.SyntheticsAdminService.CreateTest:input_type -> kentik.synthetics.v202101beta1.CreateTestRequest
	74,  // 111: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetTest:input_type -> kentik.synthetics.v202101beta1.GetTestRequest
	76,  // 112: kentik.synthetics.v202101beta1.SyntheticsAdminService.SetTestStatus:input_type -> kentik.synthetics.v202101beta1.SetTestStatusRequest
	78,  // 113: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchTest:input_type -> kentik.synthetics.v202101beta1.PatchTestRequest
	80,  // 114: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteTest:input_type -> kentik.synthetics.v202101beta1.DeleteTestRequest
	59,  // 115: kentik.synthetics.v202101beta1.SyntheticsDataService.GetHealthForTests:output_type -> kentik.synthetics.v202101beta1.GetHealthForTestsResponse
	61,  // 116: kentik.synthetics.v202101beta1.SyntheticsDataService.GetTraceForTest:output_type -> kentik.synthetics.v202101beta1.GetTraceForTestResponse
	63,  // 117: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListAgents:output_type -> kentik.synthetics.v202101beta1.ListAgentsResponse
	65,  // 118: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetAgent:output_type -> kentik.synthetics.v202101beta1.GetAgentResponse
	67,  // 119: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchAgent:output_type -> kentik.synthetics.v202101beta1.PatchAgentResponse
	69,  // 120: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteAgent:output_type -> kentik.synthetics.v202101beta1.DeleteAgentResponse
	71,  // 121: kentik.synthetics.v202101beta1.SyntheticsAdminService.ListTests:output_type -> kentik.synthetics.v202101beta1.ListTestsResponse
	73,  // 122: kentik.synthetics.v202101beta1.SyntheticsAdminService.CreateTest:output_type -> kentik.synthetics.v202101beta1.CreateTestResponse
	75,  // 123: kentik.synthetics.v202101beta1.SyntheticsAdminService.GetTest:output_type -> kentik.synthetics.v202101beta1.GetTestResponse
	77,  // 124: kentik.synthetics.v202101beta1.SyntheticsAdminService.SetTestStatus:output_type -> kentik.synthetics.v202101beta1.SetTestStatusResponse
	79,  // 125: kentik.synthetics.v202101beta1.SyntheticsAdminService.PatchTest:output_type -> kentik.synthetics.v202101beta1.PatchTestResponse
	81,  // 126: kentik.synthetics.v202101beta1.SyntheticsAdminService.DeleteTest:output_type -> kentik.synthetics.v202101beta1.DeleteTestResponse
	115, // [115:127] is the sub-list for method output_type
	103, // [103:115] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_kentik_synthetics_v202101beta1_synthetics_proto_init() }
func file_kentik_synthetics_v202101beta1_synthetics_proto_init() {
	if File_kentik_synthetics_v202101beta1_synthetics_proto != nil {
		return
	}
	file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[10].OneofWrappers = []any{
		(*Task_Ping)(nil),
		(*Task_Traceroute)(nil),
		(*Task_Http)(nil),
		(*Task_Knock)(nil),
		(*Task_Dns)(nil),
		(*Task_Shake)(nil),
	}
	file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes[17].OneofWrappers = []any{
		(*TestSettings_Hostname)(nil),
		(*TestSettings_Ip)(nil),
		(*TestSettings_Agent)(nil),
		(*TestSettings_Flow)(nil),
		(*TestSettings_Site)(nil),
		(*TestSettings_Tag)(nil),
		(*TestSettings_Dns)(nil),
		(*TestSettings_Url)(nil),
		(*TestSettings_NetworkGrid)(nil),
		(*TestSettings_PageLoad)(nil),
		(*TestSettings_DnsGrid)(nil),
		(*TestSettings_ApplicationMesh)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc), len(file_kentik_synthetics_v202101beta1_synthetics_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kentik_synthetics_v202101beta1_synthetics_proto_goTypes,
		DependencyIndexes: file_kentik_synthetics_v202101beta1_synthetics_proto_depIdxs,
		EnumInfos:         file_kentik_synthetics_v202101beta1_synthetics_proto_enumTypes,
		MessageInfos:      file_kentik_synthetics_v202101beta1_synthetics_proto_msgTypes,
	}.Build()
	File_kentik_synthetics_v202101beta1_synthetics_proto = out.File
	file_kentik_synthetics_v202101beta1_synthetics_proto_goTypes = nil
	file_kentik_synthetics_v202101beta1_synthetics_proto_depIdxs = nil
}
