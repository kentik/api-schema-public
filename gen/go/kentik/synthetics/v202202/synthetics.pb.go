// Synthetics data and admin APIs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kentik/synthetics/v202202/synthetics.proto

package synthetics

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v202303 "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// {{.Name}}
type ImplementType int32

const (
	ImplementType_IMPLEMENT_TYPE_UNSPECIFIED ImplementType = 0
	// ksynth, a.k.a network agent (implemented in Rust) capable of running all tasks except for page-load and transaction
	ImplementType_IMPLEMENT_TYPE_RUST ImplementType = 1
	// ksynth-agent, a.k.a. app agent (implemented in NodeJS) with Chromium enabled capable of running all tasks
	ImplementType_IMPLEMENT_TYPE_NODE ImplementType = 2
	// ksynth-agent, a.k.a. app agent with Chromium disabled, capable of running all tasks except for page-load and transaction
	ImplementType_IMPLEMENT_TYPE_NETWORK ImplementType = 3
)

// Enum value maps for ImplementType.
var (
	ImplementType_name = map[int32]string{
		0: "IMPLEMENT_TYPE_UNSPECIFIED",
		1: "IMPLEMENT_TYPE_RUST",
		2: "IMPLEMENT_TYPE_NODE",
		3: "IMPLEMENT_TYPE_NETWORK",
	}
	ImplementType_value = map[string]int32{
		"IMPLEMENT_TYPE_UNSPECIFIED": 0,
		"IMPLEMENT_TYPE_RUST":        1,
		"IMPLEMENT_TYPE_NODE":        2,
		"IMPLEMENT_TYPE_NETWORK":     3,
	}
)

func (x ImplementType) Enum() *ImplementType {
	p := new(ImplementType)
	*p = x
	return p
}

func (x ImplementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplementType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[0].Descriptor()
}

func (ImplementType) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[0]
}

func (x ImplementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplementType.Descriptor instead.
func (ImplementType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type IPFamily int32

const (
	// Invalid value.
	IPFamily_IP_FAMILY_UNSPECIFIED IPFamily = 0
	// IPv4 only
	IPFamily_IP_FAMILY_V4 IPFamily = 1
	// IPv6 only
	IPFamily_IP_FAMILY_V6 IPFamily = 2
	// IPv4 and IPv6 supported
	IPFamily_IP_FAMILY_DUAL IPFamily = 3
)

// Enum value maps for IPFamily.
var (
	IPFamily_name = map[int32]string{
		0: "IP_FAMILY_UNSPECIFIED",
		1: "IP_FAMILY_V4",
		2: "IP_FAMILY_V6",
		3: "IP_FAMILY_DUAL",
	}
	IPFamily_value = map[string]int32{
		"IP_FAMILY_UNSPECIFIED": 0,
		"IP_FAMILY_V4":          1,
		"IP_FAMILY_V6":          2,
		"IP_FAMILY_DUAL":        3,
	}
)

func (x IPFamily) Enum() *IPFamily {
	p := new(IPFamily)
	*p = x
	return p
}

func (x IPFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[1].Descriptor()
}

func (IPFamily) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[1]
}

func (x IPFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPFamily.Descriptor instead.
func (IPFamily) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{1}
}

// {{.Name}}
type TestStatus int32

const (
	// Invalid value.
	TestStatus_TEST_STATUS_UNSPECIFIED TestStatus = 0
	// Test is active.
	TestStatus_TEST_STATUS_ACTIVE TestStatus = 1
	// Test is paused.
	TestStatus_TEST_STATUS_PAUSED TestStatus = 2
	// Test is deleted. Not user settable.
	TestStatus_TEST_STATUS_DELETED TestStatus = 3
	// Test is preview
	TestStatus_TEST_STATUS_PREVIEW TestStatus = 4
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "TEST_STATUS_ACTIVE",
		2: "TEST_STATUS_PAUSED",
		3: "TEST_STATUS_DELETED",
		4: "TEST_STATUS_PREVIEW",
	}
	TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"TEST_STATUS_ACTIVE":      1,
		"TEST_STATUS_PAUSED":      2,
		"TEST_STATUS_DELETED":     3,
		"TEST_STATUS_PREVIEW":     4,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[2].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[2]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{2}
}

// {{.Name}}
type AgentStatus int32

const (
	// Invalid value.
	AgentStatus_AGENT_STATUS_UNSPECIFIED AgentStatus = 0
	// Agent is ready to accept tests
	AgentStatus_AGENT_STATUS_OK AgentStatus = 1
	// Agent is waiting for authorization
	AgentStatus_AGENT_STATUS_WAIT AgentStatus = 2
	// Agent was deleted - not user settable
	AgentStatus_AGENT_STATUS_DELETED AgentStatus = 3
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0: "AGENT_STATUS_UNSPECIFIED",
		1: "AGENT_STATUS_OK",
		2: "AGENT_STATUS_WAIT",
		3: "AGENT_STATUS_DELETED",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNSPECIFIED": 0,
		"AGENT_STATUS_OK":          1,
		"AGENT_STATUS_WAIT":        2,
		"AGENT_STATUS_DELETED":     3,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[3].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[3]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{3}
}

// {{.Name}}
type DNSRecord int32

const (
	// Invalid value
	DNSRecord_DNS_RECORD_UNSPECIFIED DNSRecord = 0
	// name to IPv4 address(es) mapping
	DNSRecord_DNS_RECORD_A DNSRecord = 1
	// name to IPv6 address(es) mapping
	DNSRecord_DNS_RECORD_AAAA DNSRecord = 2
	// alternative resource name
	DNSRecord_DNS_RECORD_CNAME DNSRecord = 3
	// alternative resource set name
	DNSRecord_DNS_RECORD_DNAME DNSRecord = 4
	// domain to name server mapping
	DNSRecord_DNS_RECORD_NS DNSRecord = 5
	// SMTP mail server record
	DNSRecord_DNS_RECORD_MX DNSRecord = 6
	// IPv4/6 address to name mapping
	DNSRecord_DNS_RECORD_PTR DNSRecord = 7
	// domain meta-data
	DNSRecord_DNS_RECORD_SOA DNSRecord = 8
)

// Enum value maps for DNSRecord.
var (
	DNSRecord_name = map[int32]string{
		0: "DNS_RECORD_UNSPECIFIED",
		1: "DNS_RECORD_A",
		2: "DNS_RECORD_AAAA",
		3: "DNS_RECORD_CNAME",
		4: "DNS_RECORD_DNAME",
		5: "DNS_RECORD_NS",
		6: "DNS_RECORD_MX",
		7: "DNS_RECORD_PTR",
		8: "DNS_RECORD_SOA",
	}
	DNSRecord_value = map[string]int32{
		"DNS_RECORD_UNSPECIFIED": 0,
		"DNS_RECORD_A":           1,
		"DNS_RECORD_AAAA":        2,
		"DNS_RECORD_CNAME":       3,
		"DNS_RECORD_DNAME":       4,
		"DNS_RECORD_NS":          5,
		"DNS_RECORD_MX":          6,
		"DNS_RECORD_PTR":         7,
		"DNS_RECORD_SOA":         8,
	}
)

func (x DNSRecord) Enum() *DNSRecord {
	p := new(DNSRecord)
	*p = x
	return p
}

func (x DNSRecord) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSRecord) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[4].Descriptor()
}

func (DNSRecord) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[4]
}

func (x DNSRecord) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSRecord.Descriptor instead.
func (DNSRecord) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{4}
}

// {{.Name}}
type Agent struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteName string                 `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Status   AgentStatus            `protobuf:"varint,3,opt,name=status,proto3,enum=kentik.synthetics.v202202.AgentStatus" json:"status,omitempty"`
	Alias    string                 `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Type     string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Os       string                 `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
	Ip         string                 `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat        float64                `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`
	Long       float64                `protobuf:"fixed64,9,opt,name=long,proto3" json:"long,omitempty"`
	LastAuthed *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_authed,json=lastAuthed,proto3" json:"last_authed,omitempty"`
	Family     IPFamily               `protobuf:"varint,11,opt,name=family,proto3,enum=kentik.synthetics.v202202.IPFamily" json:"family,omitempty"`
	Asn        uint32                 `protobuf:"varint,12,opt,name=asn,proto3" json:"asn,omitempty"`
	SiteId     string                 `protobuf:"bytes,13,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	Version    string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	City       string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	Region     string                 `protobuf:"bytes,17,opt,name=region,proto3" json:"region,omitempty"`
	Country    string                 `protobuf:"bytes,18,opt,name=country,proto3" json:"country,omitempty"`
	TestIds    []string               `protobuf:"bytes,19,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
	LocalIp       string         `protobuf:"bytes,20,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	CloudRegion   string         `protobuf:"bytes,22,opt,name=cloud_region,json=cloudRegion,proto3" json:"cloud_region,omitempty"`
	CloudProvider string         `protobuf:"bytes,23,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	AgentImpl     ImplementType  `protobuf:"varint,24,opt,name=agent_impl,json=agentImpl,proto3,enum=kentik.synthetics.v202202.ImplementType" json:"agent_impl,omitempty"`
	Labels        []string       `protobuf:"bytes,25,rep,name=labels,proto3" json:"labels,omitempty"`
	Metadata      *AgentMetadata `protobuf:"bytes,26,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{0}
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Agent) GetStatus() AgentStatus {
	if x != nil {
		return x.Status
	}
	return AgentStatus_AGENT_STATUS_UNSPECIFIED
}

func (x *Agent) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Agent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Agent) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Agent) GetLastAuthed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAuthed
	}
	return nil
}

func (x *Agent) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Agent) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Agent) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Agent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Agent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Agent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Agent) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
func (x *Agent) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *Agent) GetCloudRegion() string {
	if x != nil {
		return x.CloudRegion
	}
	return ""
}

func (x *Agent) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Agent) GetAgentImpl() ImplementType {
	if x != nil {
		return x.AgentImpl
	}
	return ImplementType_IMPLEMENT_TYPE_UNSPECIFIED
}

func (x *Agent) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Agent) GetMetadata() *AgentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// {{.Name}}
type AgentMetadata struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	PrivateIpv4Addresses []*AgentMetadata_IpValue `protobuf:"bytes,1,rep,name=private_ipv4_addresses,json=privateIpv4Addresses,proto3" json:"private_ipv4_addresses,omitempty"`
	PublicIpv4Addresses  []*AgentMetadata_IpValue `protobuf:"bytes,2,rep,name=public_ipv4_addresses,json=publicIpv4Addresses,proto3" json:"public_ipv4_addresses,omitempty"`
	PrivateIpv6Addresses []*AgentMetadata_IpValue `protobuf:"bytes,3,rep,name=private_ipv6_addresses,json=privateIpv6Addresses,proto3" json:"private_ipv6_addresses,omitempty"`
	PublicIpv6Addresses  []*AgentMetadata_IpValue `protobuf:"bytes,4,rep,name=public_ipv6_addresses,json=publicIpv6Addresses,proto3" json:"public_ipv6_addresses,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AgentMetadata) Reset() {
	*x = AgentMetadata{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadata) ProtoMessage() {}

func (x *AgentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadata.ProtoReflect.Descriptor instead.
func (*AgentMetadata) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{1}
}

func (x *AgentMetadata) GetPrivateIpv4Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PrivateIpv4Addresses
	}
	return nil
}

func (x *AgentMetadata) GetPublicIpv4Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PublicIpv4Addresses
	}
	return nil
}

func (x *AgentMetadata) GetPrivateIpv6Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PrivateIpv6Addresses
	}
	return nil
}

func (x *AgentMetadata) GetPublicIpv6Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PublicIpv6Addresses
	}
	return nil
}

// {{.Name}}
type Test struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status        TestStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=kentik.synthetics.v202202.TestStatus" json:"status,omitempty"`
	Settings      *TestSettings          `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=edate,proto3" json:"edate,omitempty"`
	CreatedBy     *v202303.UserInfo      `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedBy *v202303.UserInfo      `protobuf:"bytes,10,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	Labels        []string               `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Test) Reset() {
	*x = Test{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{2}
}

func (x *Test) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Test) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *Test) GetSettings() *TestSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Test) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Test) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Test) GetCreatedBy() *v202303.UserInfo {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Test) GetLastUpdatedBy() *v202303.UserInfo {
	if x != nil {
		return x.LastUpdatedBy
	}
	return nil
}

func (x *Test) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// {{.Name}}
type TestSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Definition:
	//
	//	*TestSettings_Hostname
	//	*TestSettings_Ip
	//	*TestSettings_Agent
	//	*TestSettings_Flow
	//	*TestSettings_Dns
	//	*TestSettings_Url
	//	*TestSettings_NetworkGrid
	//	*TestSettings_PageLoad
	//	*TestSettings_DnsGrid
	//	*TestSettings_NetworkMesh
	Definition           isTestSettings_Definition `protobuf_oneof:"definition"`
	AgentIds             []string                  `protobuf:"bytes,10,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Tasks                []string                  `protobuf:"bytes,11,rep,name=tasks,proto3" json:"tasks,omitempty"`
	HealthSettings       *HealthSettings           `protobuf:"bytes,12,opt,name=health_settings,json=healthSettings,proto3" json:"health_settings,omitempty"`
	Ping                 *TestPingSettings         `protobuf:"bytes,13,opt,name=ping,proto3" json:"ping,omitempty"`
	Trace                *TestTraceSettings        `protobuf:"bytes,14,opt,name=trace,proto3" json:"trace,omitempty"`
	Period               uint32                    `protobuf:"varint,15,opt,name=period,proto3" json:"period,omitempty"`
	Family               IPFamily                  `protobuf:"varint,16,opt,name=family,proto3,enum=kentik.synthetics.v202202.IPFamily" json:"family,omitempty"`
	NotificationChannels []string                  `protobuf:"bytes,17,rep,name=notification_channels,json=notificationChannels,proto3" json:"notification_channels,omitempty"`
	Notes                string                    `protobuf:"bytes,19,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TestSettings) Reset() {
	*x = TestSettings{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSettings) ProtoMessage() {}

func (x *TestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSettings.ProtoReflect.Descriptor instead.
func (*TestSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{3}
}

func (x *TestSettings) GetDefinition() isTestSettings_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *TestSettings) GetHostname() *HostnameTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Hostname); ok {
			return x.Hostname
		}
	}
	return nil
}

func (x *TestSettings) GetIp() *IpTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Ip); ok {
			return x.Ip
		}
	}
	return nil
}

func (x *TestSettings) GetAgent() *AgentTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Agent); ok {
			return x.Agent
		}
	}
	return nil
}

func (x *TestSettings) GetFlow() *FlowTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Flow); ok {
			return x.Flow
		}
	}
	return nil
}

func (x *TestSettings) GetDns() *DnsTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

func (x *TestSettings) GetUrl() *UrlTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_Url); ok {
			return x.Url
		}
	}
	return nil
}

func (x *TestSettings) GetNetworkGrid() *IpTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_NetworkGrid); ok {
			return x.NetworkGrid
		}
	}
	return nil
}

func (x *TestSettings) GetPageLoad() *PageLoadTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_PageLoad); ok {
			return x.PageLoad
		}
	}
	return nil
}

func (x *TestSettings) GetDnsGrid() *DnsTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_DnsGrid); ok {
			return x.DnsGrid
		}
	}
	return nil
}

func (x *TestSettings) GetNetworkMesh() *NetworkMeshTest {
	if x != nil {
		if x, ok := x.Definition.(*TestSettings_NetworkMesh); ok {
			return x.NetworkMesh
		}
	}
	return nil
}

func (x *TestSettings) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TestSettings) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestSettings) GetHealthSettings() *HealthSettings {
	if x != nil {
		return x.HealthSettings
	}
	return nil
}

func (x *TestSettings) GetPing() *TestPingSettings {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *TestSettings) GetTrace() *TestTraceSettings {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TestSettings) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestSettings) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *TestSettings) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

func (x *TestSettings) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type isTestSettings_Definition interface {
	isTestSettings_Definition()
}

type TestSettings_Hostname struct {
	Hostname *HostnameTest `protobuf:"bytes,1,opt,name=hostname,proto3,oneof"`
}

type TestSettings_Ip struct {
	Ip *IpTest `protobuf:"bytes,2,opt,name=ip,proto3,oneof"`
}

type TestSettings_Agent struct {
	Agent *AgentTest `protobuf:"bytes,3,opt,name=agent,proto3,oneof"`
}

type TestSettings_Flow struct {
	Flow *FlowTest `protobuf:"bytes,4,opt,name=flow,proto3,oneof"`
}

type TestSettings_Dns struct {
	Dns *DnsTest `protobuf:"bytes,5,opt,name=dns,proto3,oneof"`
}

type TestSettings_Url struct {
	Url *UrlTest `protobuf:"bytes,6,opt,name=url,proto3,oneof"`
}

type TestSettings_NetworkGrid struct {
	NetworkGrid *IpTest `protobuf:"bytes,7,opt,name=network_grid,json=networkGrid,proto3,oneof"`
}

type TestSettings_PageLoad struct {
	PageLoad *PageLoadTest `protobuf:"bytes,8,opt,name=page_load,json=pageLoad,proto3,oneof"`
}

type TestSettings_DnsGrid struct {
	DnsGrid *DnsTest `protobuf:"bytes,9,opt,name=dns_grid,json=dnsGrid,proto3,oneof"`
}

type TestSettings_NetworkMesh struct {
	NetworkMesh *NetworkMeshTest `protobuf:"bytes,18,opt,name=network_mesh,json=networkMesh,proto3,oneof"`
}

func (*TestSettings_Hostname) isTestSettings_Definition() {}

func (*TestSettings_Ip) isTestSettings_Definition() {}

func (*TestSettings_Agent) isTestSettings_Definition() {}

func (*TestSettings_Flow) isTestSettings_Definition() {}

func (*TestSettings_Dns) isTestSettings_Definition() {}

func (*TestSettings_Url) isTestSettings_Definition() {}

func (*TestSettings_NetworkGrid) isTestSettings_Definition() {}

func (*TestSettings_PageLoad) isTestSettings_Definition() {}

func (*TestSettings_DnsGrid) isTestSettings_Definition() {}

func (*TestSettings_NetworkMesh) isTestSettings_Definition() {}

// {{.Name}}
type TestPingSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         uint32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Protocol      string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Timeout       uint32                 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Delay         float32                `protobuf:"fixed32,5,opt,name=delay,proto3" json:"delay,omitempty"`
	Dscp          uint32                 `protobuf:"varint,6,opt,name=dscp,proto3" json:"dscp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestPingSettings) Reset() {
	*x = TestPingSettings{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPingSettings) ProtoMessage() {}

func (x *TestPingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPingSettings.ProtoReflect.Descriptor instead.
func (*TestPingSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{4}
}

func (x *TestPingSettings) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestPingSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestPingSettings) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestPingSettings) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TestPingSettings) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TestPingSettings) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

// {{.Name}}
type TestTraceSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         uint32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Protocol      string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Timeout       uint32                 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Limit         uint32                 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Delay         float32                `protobuf:"fixed32,6,opt,name=delay,proto3" json:"delay,omitempty"`
	Dscp          uint32                 `protobuf:"varint,7,opt,name=dscp,proto3" json:"dscp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestTraceSettings) Reset() {
	*x = TestTraceSettings{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTraceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTraceSettings) ProtoMessage() {}

func (x *TestTraceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTraceSettings.ProtoReflect.Descriptor instead.
func (*TestTraceSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{5}
}

func (x *TestTraceSettings) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestTraceSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestTraceSettings) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestTraceSettings) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TestTraceSettings) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TestTraceSettings) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TestTraceSettings) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

// {{.Name}}
type ActivationSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GracePeriod   string                 `protobuf:"bytes,1,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	TimeUnit      string                 `protobuf:"bytes,2,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	TimeWindow    string                 `protobuf:"bytes,3,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
	Times         string                 `protobuf:"bytes,4,opt,name=times,proto3" json:"times,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivationSettings) Reset() {
	*x = ActivationSettings{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationSettings) ProtoMessage() {}

func (x *ActivationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationSettings.ProtoReflect.Descriptor instead.
func (*ActivationSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{6}
}

func (x *ActivationSettings) GetGracePeriod() string {
	if x != nil {
		return x.GracePeriod
	}
	return ""
}

func (x *ActivationSettings) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *ActivationSettings) GetTimeWindow() string {
	if x != nil {
		return x.TimeWindow
	}
	return ""
}

func (x *ActivationSettings) GetTimes() string {
	if x != nil {
		return x.Times
	}
	return ""
}

// {{.Name}}
type HealthSettings struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	LatencyCritical           float32                `protobuf:"fixed32,1,opt,name=latency_critical,json=latencyCritical,proto3" json:"latency_critical,omitempty"`
	LatencyWarning            float32                `protobuf:"fixed32,2,opt,name=latency_warning,json=latencyWarning,proto3" json:"latency_warning,omitempty"`
	PacketLossCritical        float32                `protobuf:"fixed32,3,opt,name=packet_loss_critical,json=packetLossCritical,proto3" json:"packet_loss_critical,omitempty"`
	PacketLossWarning         float32                `protobuf:"fixed32,4,opt,name=packet_loss_warning,json=packetLossWarning,proto3" json:"packet_loss_warning,omitempty"`
	JitterCritical            float32                `protobuf:"fixed32,5,opt,name=jitter_critical,json=jitterCritical,proto3" json:"jitter_critical,omitempty"`
	JitterWarning             float32                `protobuf:"fixed32,6,opt,name=jitter_warning,json=jitterWarning,proto3" json:"jitter_warning,omitempty"`
	HttpLatencyCritical       float32                `protobuf:"fixed32,7,opt,name=http_latency_critical,json=httpLatencyCritical,proto3" json:"http_latency_critical,omitempty"`
	HttpLatencyWarning        float32                `protobuf:"fixed32,8,opt,name=http_latency_warning,json=httpLatencyWarning,proto3" json:"http_latency_warning,omitempty"`
	HttpValidCodes            []uint32               `protobuf:"varint,9,rep,packed,name=http_valid_codes,json=httpValidCodes,proto3" json:"http_valid_codes,omitempty"`
	DnsValidCodes             []uint32               `protobuf:"varint,10,rep,packed,name=dns_valid_codes,json=dnsValidCodes,proto3" json:"dns_valid_codes,omitempty"`
	LatencyCriticalStddev     float32                `protobuf:"fixed32,11,opt,name=latency_critical_stddev,json=latencyCriticalStddev,proto3" json:"latency_critical_stddev,omitempty"`
	LatencyWarningStddev      float32                `protobuf:"fixed32,12,opt,name=latency_warning_stddev,json=latencyWarningStddev,proto3" json:"latency_warning_stddev,omitempty"`
	JitterCriticalStddev      float32                `protobuf:"fixed32,13,opt,name=jitter_critical_stddev,json=jitterCriticalStddev,proto3" json:"jitter_critical_stddev,omitempty"`
	JitterWarningStddev       float32                `protobuf:"fixed32,14,opt,name=jitter_warning_stddev,json=jitterWarningStddev,proto3" json:"jitter_warning_stddev,omitempty"`
	HttpLatencyCriticalStddev float32                `protobuf:"fixed32,15,opt,name=http_latency_critical_stddev,json=httpLatencyCriticalStddev,proto3" json:"http_latency_critical_stddev,omitempty"`
	HttpLatencyWarningStddev  float32                `protobuf:"fixed32,16,opt,name=http_latency_warning_stddev,json=httpLatencyWarningStddev,proto3" json:"http_latency_warning_stddev,omitempty"`
	// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
	UnhealthySubtestThreshold uint32              `protobuf:"varint,17,opt,name=unhealthy_subtest_threshold,json=unhealthySubtestThreshold,proto3" json:"unhealthy_subtest_threshold,omitempty"`
	Activation                *ActivationSettings `protobuf:"bytes,18,opt,name=activation,proto3" json:"activation,omitempty"`
	CertExpiryWarning         uint32              `protobuf:"varint,19,opt,name=cert_expiry_warning,json=certExpiryWarning,proto3" json:"cert_expiry_warning,omitempty"`
	CertExpiryCritical        uint32              `protobuf:"varint,20,opt,name=cert_expiry_critical,json=certExpiryCritical,proto3" json:"cert_expiry_critical,omitempty"`
	DnsValidIps               string              `protobuf:"bytes,21,opt,name=dns_valid_ips,json=dnsValidIps,proto3" json:"dns_valid_ips,omitempty"`
	DnsLatencyCritical        float32             `protobuf:"fixed32,22,opt,name=dns_latency_critical,json=dnsLatencyCritical,proto3" json:"dns_latency_critical,omitempty"`
	DnsLatencyWarning         float32             `protobuf:"fixed32,23,opt,name=dns_latency_warning,json=dnsLatencyWarning,proto3" json:"dns_latency_warning,omitempty"`
	DnsLatencyCriticalStddev  float32             `protobuf:"fixed32,24,opt,name=dns_latency_critical_stddev,json=dnsLatencyCriticalStddev,proto3" json:"dns_latency_critical_stddev,omitempty"`
	DnsLatencyWarningStddev   float32             `protobuf:"fixed32,25,opt,name=dns_latency_warning_stddev,json=dnsLatencyWarningStddev,proto3" json:"dns_latency_warning_stddev,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *HealthSettings) Reset() {
	*x = HealthSettings{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthSettings) ProtoMessage() {}

func (x *HealthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthSettings.ProtoReflect.Descriptor instead.
func (*HealthSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{7}
}

func (x *HealthSettings) GetLatencyCritical() float32 {
	if x != nil {
		return x.LatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarning() float32 {
	if x != nil {
		return x.LatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetPacketLossCritical() float32 {
	if x != nil {
		return x.PacketLossCritical
	}
	return 0
}

func (x *HealthSettings) GetPacketLossWarning() float32 {
	if x != nil {
		return x.PacketLossWarning
	}
	return 0
}

func (x *HealthSettings) GetJitterCritical() float32 {
	if x != nil {
		return x.JitterCritical
	}
	return 0
}

func (x *HealthSettings) GetJitterWarning() float32 {
	if x != nil {
		return x.JitterWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCritical() float32 {
	if x != nil {
		return x.HttpLatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarning() float32 {
	if x != nil {
		return x.HttpLatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpValidCodes() []uint32 {
	if x != nil {
		return x.HttpValidCodes
	}
	return nil
}

func (x *HealthSettings) GetDnsValidCodes() []uint32 {
	if x != nil {
		return x.DnsValidCodes
	}
	return nil
}

func (x *HealthSettings) GetLatencyCriticalStddev() float32 {
	if x != nil {
		return x.LatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarningStddev() float32 {
	if x != nil {
		return x.LatencyWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetJitterCriticalStddev() float32 {
	if x != nil {
		return x.JitterCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetJitterWarningStddev() float32 {
	if x != nil {
		return x.JitterWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCriticalStddev() float32 {
	if x != nil {
		return x.HttpLatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarningStddev() float32 {
	if x != nil {
		return x.HttpLatencyWarningStddev
	}
	return 0
}

// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
func (x *HealthSettings) GetUnhealthySubtestThreshold() uint32 {
	if x != nil {
		return x.UnhealthySubtestThreshold
	}
	return 0
}

func (x *HealthSettings) GetActivation() *ActivationSettings {
	if x != nil {
		return x.Activation
	}
	return nil
}

func (x *HealthSettings) GetCertExpiryWarning() uint32 {
	if x != nil {
		return x.CertExpiryWarning
	}
	return 0
}

func (x *HealthSettings) GetCertExpiryCritical() uint32 {
	if x != nil {
		return x.CertExpiryCritical
	}
	return 0
}

func (x *HealthSettings) GetDnsValidIps() string {
	if x != nil {
		return x.DnsValidIps
	}
	return ""
}

func (x *HealthSettings) GetDnsLatencyCritical() float32 {
	if x != nil {
		return x.DnsLatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetDnsLatencyWarning() float32 {
	if x != nil {
		return x.DnsLatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetDnsLatencyCriticalStddev() float32 {
	if x != nil {
		return x.DnsLatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetDnsLatencyWarningStddev() float32 {
	if x != nil {
		return x.DnsLatencyWarningStddev
	}
	return 0
}

// {{.Name}}
type HostnameTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostnameTest) Reset() {
	*x = HostnameTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostnameTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameTest) ProtoMessage() {}

func (x *HostnameTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameTest.ProtoReflect.Descriptor instead.
func (*HostnameTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{8}
}

func (x *HostnameTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// {{.Name}}
type IpTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Targets       []string               `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpTest) Reset() {
	*x = IpTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTest) ProtoMessage() {}

func (x *IpTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTest.ProtoReflect.Descriptor instead.
func (*IpTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{9}
}

func (x *IpTest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

// {{.Name}}
type AgentTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	UseLocalIp    bool                   `protobuf:"varint,2,opt,name=use_local_ip,json=useLocalIp,proto3" json:"use_local_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentTest) Reset() {
	*x = AgentTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTest) ProtoMessage() {}

func (x *AgentTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTest.ProtoReflect.Descriptor instead.
func (*AgentTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{10}
}

func (x *AgentTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AgentTest) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

// {{.Name}}
type FlowTest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Target                      string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetRefreshIntervalMillis uint32                 `protobuf:"varint,2,opt,name=target_refresh_interval_millis,json=targetRefreshIntervalMillis,proto3" json:"target_refresh_interval_millis,omitempty"`
	MaxProviders                uint32                 `protobuf:"varint,3,opt,name=max_providers,json=maxProviders,proto3" json:"max_providers,omitempty"`
	MaxIpTargets                uint32                 `protobuf:"varint,4,opt,name=max_ip_targets,json=maxIpTargets,proto3" json:"max_ip_targets,omitempty"`
	Type                        string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	InetDirection               string                 `protobuf:"bytes,6,opt,name=inet_direction,json=inetDirection,proto3" json:"inet_direction,omitempty"`
	Direction                   string                 `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *FlowTest) Reset() {
	*x = FlowTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTest) ProtoMessage() {}

func (x *FlowTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTest.ProtoReflect.Descriptor instead.
func (*FlowTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{11}
}

func (x *FlowTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FlowTest) GetTargetRefreshIntervalMillis() uint32 {
	if x != nil {
		return x.TargetRefreshIntervalMillis
	}
	return 0
}

func (x *FlowTest) GetMaxProviders() uint32 {
	if x != nil {
		return x.MaxProviders
	}
	return 0
}

func (x *FlowTest) GetMaxIpTargets() uint32 {
	if x != nil {
		return x.MaxIpTargets
	}
	return 0
}

func (x *FlowTest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FlowTest) GetInetDirection() string {
	if x != nil {
		return x.InetDirection
	}
	return ""
}

func (x *FlowTest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

// {{.Name}}
type DnsTest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Target string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
	Timeout       uint32    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	RecordType    DNSRecord `protobuf:"varint,3,opt,name=record_type,json=recordType,proto3,enum=kentik.synthetics.v202202.DNSRecord" json:"record_type,omitempty"`
	Servers       []string  `protobuf:"bytes,4,rep,name=servers,proto3" json:"servers,omitempty"`
	Port          uint32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsTest) Reset() {
	*x = DnsTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTest) ProtoMessage() {}

func (x *DnsTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTest.ProtoReflect.Descriptor instead.
func (*DnsTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{12}
}

func (x *DnsTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Deprecated: Marked as deprecated in kentik/synthetics/v202202/synthetics.proto.
func (x *DnsTest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *DnsTest) GetRecordType() DNSRecord {
	if x != nil {
		return x.RecordType
	}
	return DNSRecord_DNS_RECORD_UNSPECIFIED
}

func (x *DnsTest) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *DnsTest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// {{.Name}}
type UrlTest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Target          string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Timeout         uint32                 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Method          string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Headers         map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body            string                 `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	IgnoreTlsErrors bool                   `protobuf:"varint,6,opt,name=ignore_tls_errors,json=ignoreTlsErrors,proto3" json:"ignore_tls_errors,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UrlTest) Reset() {
	*x = UrlTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UrlTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlTest) ProtoMessage() {}

func (x *UrlTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlTest.ProtoReflect.Descriptor instead.
func (*UrlTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{13}
}

func (x *UrlTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *UrlTest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UrlTest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *UrlTest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *UrlTest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *UrlTest) GetIgnoreTlsErrors() bool {
	if x != nil {
		return x.IgnoreTlsErrors
	}
	return false
}

// {{.Name}}
type PageLoadTest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Target          string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Timeout         uint32                 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Headers         map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IgnoreTlsErrors bool                   `protobuf:"varint,4,opt,name=ignore_tls_errors,json=ignoreTlsErrors,proto3" json:"ignore_tls_errors,omitempty"`
	CssSelectors    map[string]string      `protobuf:"bytes,5,rep,name=css_selectors,json=cssSelectors,proto3" json:"css_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PageLoadTest) Reset() {
	*x = PageLoadTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageLoadTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLoadTest) ProtoMessage() {}

func (x *PageLoadTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLoadTest.ProtoReflect.Descriptor instead.
func (*PageLoadTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{14}
}

func (x *PageLoadTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PageLoadTest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PageLoadTest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PageLoadTest) GetIgnoreTlsErrors() bool {
	if x != nil {
		return x.IgnoreTlsErrors
	}
	return false
}

func (x *PageLoadTest) GetCssSelectors() map[string]string {
	if x != nil {
		return x.CssSelectors
	}
	return nil
}

// {{.Name}}
type NetworkMeshTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UseLocalIp    bool                   `protobuf:"varint,1,opt,name=use_local_ip,json=useLocalIp,proto3" json:"use_local_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkMeshTest) Reset() {
	*x = NetworkMeshTest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkMeshTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMeshTest) ProtoMessage() {}

func (x *NetworkMeshTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMeshTest.ProtoReflect.Descriptor instead.
func (*NetworkMeshTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkMeshTest) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

// {{.Name}}
type MetricData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       uint32                 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	RollingAvg    uint32                 `protobuf:"varint,2,opt,name=rolling_avg,json=rollingAvg,proto3" json:"rolling_avg,omitempty"`
	RollingStddev uint32                 `protobuf:"varint,3,opt,name=rolling_stddev,json=rollingStddev,proto3" json:"rolling_stddev,omitempty"`
	Health        string                 `protobuf:"bytes,4,opt,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricData) Reset() {
	*x = MetricData{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData) ProtoMessage() {}

func (x *MetricData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData.ProtoReflect.Descriptor instead.
func (*MetricData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{16}
}

func (x *MetricData) GetCurrent() uint32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *MetricData) GetRollingAvg() uint32 {
	if x != nil {
		return x.RollingAvg
	}
	return 0
}

func (x *MetricData) GetRollingStddev() uint32 {
	if x != nil {
		return x.RollingStddev
	}
	return 0
}

func (x *MetricData) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

// {{.Name}}
type PacketLossData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       float64                `protobuf:"fixed64,1,opt,name=current,proto3" json:"current,omitempty"`
	Health        string                 `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketLossData) Reset() {
	*x = PacketLossData{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketLossData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketLossData) ProtoMessage() {}

func (x *PacketLossData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketLossData.ProtoReflect.Descriptor instead.
func (*PacketLossData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{17}
}

func (x *PacketLossData) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PacketLossData) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

// {{.Name}}
type PingResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	PacketLoss    *PacketLossData        `protobuf:"bytes,2,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	Latency       *MetricData            `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Jitter        *MetricData            `protobuf:"bytes,4,opt,name=jitter,proto3" json:"jitter,omitempty"`
	DstIp         string                 `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResults) Reset() {
	*x = PingResults{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResults) ProtoMessage() {}

func (x *PingResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResults.ProtoReflect.Descriptor instead.
func (*PingResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{18}
}

func (x *PingResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PingResults) GetPacketLoss() *PacketLossData {
	if x != nil {
		return x.PacketLoss
	}
	return nil
}

func (x *PingResults) GetLatency() *MetricData {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *PingResults) GetJitter() *MetricData {
	if x != nil {
		return x.Jitter
	}
	return nil
}

func (x *PingResults) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

// {{.Name}}
type HTTPResponseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        uint32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Size          uint32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResponseData) Reset() {
	*x = HTTPResponseData{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseData) ProtoMessage() {}

func (x *HTTPResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseData.ProtoReflect.Descriptor instead.
func (*HTTPResponseData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{19}
}

func (x *HTTPResponseData) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HTTPResponseData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HTTPResponseData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// {{.Name}}
type HTTPResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Latency       *MetricData            `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
	Response      *HTTPResponseData      `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	DstIp         string                 `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResults) Reset() {
	*x = HTTPResults{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResults) ProtoMessage() {}

func (x *HTTPResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResults.ProtoReflect.Descriptor instead.
func (*HTTPResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{20}
}

func (x *HTTPResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HTTPResults) GetLatency() *MetricData {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *HTTPResults) GetResponse() *HTTPResponseData {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HTTPResults) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

// {{.Name}}
type DNSResponseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        uint32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data          string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSResponseData) Reset() {
	*x = DNSResponseData{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResponseData) ProtoMessage() {}

func (x *DNSResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResponseData.ProtoReflect.Descriptor instead.
func (*DNSResponseData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{21}
}

func (x *DNSResponseData) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DNSResponseData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// {{.Name}}
type DNSResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Server        string                 `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Latency       *MetricData            `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Response      *DNSResponseData       `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSResults) Reset() {
	*x = DNSResults{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResults) ProtoMessage() {}

func (x *DNSResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResults.ProtoReflect.Descriptor instead.
func (*DNSResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{22}
}

func (x *DNSResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DNSResults) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *DNSResults) GetLatency() *MetricData {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *DNSResults) GetResponse() *DNSResponseData {
	if x != nil {
		return x.Response
	}
	return nil
}

// {{.Name}}
type TaskResults struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TaskType:
	//
	//	*TaskResults_Ping
	//	*TaskResults_Http
	//	*TaskResults_Dns
	TaskType      isTaskResults_TaskType `protobuf_oneof:"task_type"`
	Health        string                 `protobuf:"bytes,4,opt,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResults) Reset() {
	*x = TaskResults{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResults) ProtoMessage() {}

func (x *TaskResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResults.ProtoReflect.Descriptor instead.
func (*TaskResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{23}
}

func (x *TaskResults) GetTaskType() isTaskResults_TaskType {
	if x != nil {
		return x.TaskType
	}
	return nil
}

func (x *TaskResults) GetPing() *PingResults {
	if x != nil {
		if x, ok := x.TaskType.(*TaskResults_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *TaskResults) GetHttp() *HTTPResults {
	if x != nil {
		if x, ok := x.TaskType.(*TaskResults_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *TaskResults) GetDns() *DNSResults {
	if x != nil {
		if x, ok := x.TaskType.(*TaskResults_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

func (x *TaskResults) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

type isTaskResults_TaskType interface {
	isTaskResults_TaskType()
}

type TaskResults_Ping struct {
	Ping *PingResults `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type TaskResults_Http struct {
	Http *HTTPResults `protobuf:"bytes,2,opt,name=http,proto3,oneof"`
}

type TaskResults_Dns struct {
	Dns *DNSResults `protobuf:"bytes,3,opt,name=dns,proto3,oneof"`
}

func (*TaskResults_Ping) isTaskResults_TaskType() {}

func (*TaskResults_Http) isTaskResults_TaskType() {}

func (*TaskResults_Dns) isTaskResults_TaskType() {}

// {{.Name}}
type AgentResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Health        string                 `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	Tasks         []*TaskResults         `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentResults) Reset() {
	*x = AgentResults{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResults) ProtoMessage() {}

func (x *AgentResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResults.ProtoReflect.Descriptor instead.
func (*AgentResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{24}
}

func (x *AgentResults) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentResults) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *AgentResults) GetTasks() []*TaskResults {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// {{.Name}}
type TestResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestId        string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Health        string                 `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	Agents        []*AgentResults        `protobuf:"bytes,4,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResults) Reset() {
	*x = TestResults{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults) ProtoMessage() {}

func (x *TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults.ProtoReflect.Descriptor instead.
func (*TestResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{25}
}

func (x *TestResults) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestResults) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TestResults) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *TestResults) GetAgents() []*AgentResults {
	if x != nil {
		return x.Agents
	}
	return nil
}

// {{.Name}}
type Stats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Average       int32                  `protobuf:"varint,1,opt,name=average,proto3" json:"average,omitempty"`
	Min           int32                  `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Max           int32                  `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stats) Reset() {
	*x = Stats{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{26}
}

func (x *Stats) GetAverage() int32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *Stats) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Stats) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// {{.Name}}
type Location struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Country       string                 `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Region        string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	City          string                 `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{27}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

// {{.Name}}
type NetNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Asn           uint32                 `protobuf:"varint,3,opt,name=asn,proto3" json:"asn,omitempty"`
	AsName        string                 `protobuf:"bytes,4,opt,name=as_name,json=asName,proto3" json:"as_name,omitempty"`
	Location      *Location              `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	DnsName       string                 `protobuf:"bytes,6,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	DeviceId      string                 `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SiteId        string                 `protobuf:"bytes,8,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetNode) Reset() {
	*x = NetNode{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetNode) ProtoMessage() {}

func (x *NetNode) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetNode.ProtoReflect.Descriptor instead.
func (*NetNode) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{28}
}

func (x *NetNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetNode) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *NetNode) GetAsName() string {
	if x != nil {
		return x.AsName
	}
	return ""
}

func (x *NetNode) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetNode) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *NetNode) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *NetNode) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

// {{.Name}}
type TraceHop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latency       int32                  `protobuf:"varint,3,opt,name=latency,proto3" json:"latency,omitempty"`
	NodeId        string                 `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceHop) Reset() {
	*x = TraceHop{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceHop) ProtoMessage() {}

func (x *TraceHop) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceHop.ProtoReflect.Descriptor instead.
func (*TraceHop) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{29}
}

func (x *TraceHop) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *TraceHop) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// {{.Name}}
type PathTrace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsPath        []int32                `protobuf:"varint,1,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	IsComplete    bool                   `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	Hops          []*TraceHop            `protobuf:"bytes,6,rep,name=hops,proto3" json:"hops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathTrace) Reset() {
	*x = PathTrace{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTrace) ProtoMessage() {}

func (x *PathTrace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTrace.ProtoReflect.Descriptor instead.
func (*PathTrace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{30}
}

func (x *PathTrace) GetAsPath() []int32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *PathTrace) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *PathTrace) GetHops() []*TraceHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

// {{.Name}}
type Path struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AgentId         string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	TargetIp        string                 `protobuf:"bytes,3,opt,name=target_ip,json=targetIp,proto3" json:"target_ip,omitempty"`
	HopCount        *Stats                 `protobuf:"bytes,4,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	MaxAsPathLength int32                  `protobuf:"varint,7,opt,name=max_as_path_length,json=maxAsPathLength,proto3" json:"max_as_path_length,omitempty"`
	Traces          []*PathTrace           `protobuf:"bytes,8,rep,name=traces,proto3" json:"traces,omitempty"`
	Time            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{31}
}

func (x *Path) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Path) GetTargetIp() string {
	if x != nil {
		return x.TargetIp
	}
	return ""
}

func (x *Path) GetHopCount() *Stats {
	if x != nil {
		return x.HopCount
	}
	return nil
}

func (x *Path) GetMaxAsPathLength() int32 {
	if x != nil {
		return x.MaxAsPathLength
	}
	return 0
}

func (x *Path) GetTraces() []*PathTrace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *Path) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// {{.Name}}
type GetResultsForTestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds      []string               `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Targets       []string               `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	Aggregate     bool                   `protobuf:"varint,6,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultsForTestsRequest) Reset() {
	*x = GetResultsForTestsRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultsForTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultsForTestsRequest) ProtoMessage() {}

func (x *GetResultsForTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultsForTestsRequest.ProtoReflect.Descriptor instead.
func (*GetResultsForTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{32}
}

func (x *GetResultsForTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetAggregate() bool {
	if x != nil {
		return x.Aggregate
	}
	return false
}

// {{.Name}}
type GetResultsForTestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*TestResults         `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultsForTestsResponse) Reset() {
	*x = GetResultsForTestsResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultsForTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultsForTestsResponse) ProtoMessage() {}

func (x *GetResultsForTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultsForTestsResponse.ProtoReflect.Descriptor instead.
func (*GetResultsForTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{33}
}

func (x *GetResultsForTestsResponse) GetResults() []*TestResults {
	if x != nil {
		return x.Results
	}
	return nil
}

// {{.Name}}
type GetTraceForTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds      []string               `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	TargetIps     []string               `protobuf:"bytes,5,rep,name=target_ips,json=targetIps,proto3" json:"target_ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceForTestRequest) Reset() {
	*x = GetTraceForTestRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceForTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestRequest) ProtoMessage() {}

func (x *GetTraceForTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceForTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{34}
}

func (x *GetTraceForTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTraceForTestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetTraceForTestRequest) GetTargetIps() []string {
	if x != nil {
		return x.TargetIps
	}
	return nil
}

// {{.Name}}
type GetTraceForTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         map[string]*NetNode    `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Paths         []*Path                `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceForTestResponse) Reset() {
	*x = GetTraceForTestResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceForTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestResponse) ProtoMessage() {}

func (x *GetTraceForTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceForTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{35}
}

func (x *GetTraceForTestResponse) GetNodes() map[string]*NetNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetTraceForTestResponse) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

// {{.Name}}
type ListAgentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{36}
}

// {{.Name}}
type ListAgentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agents        []*Agent               `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	InvalidCount  uint32                 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{37}
}

func (x *ListAgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{38}
}

func (x *GetAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentResponse) Reset() {
	*x = GetAgentResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentResponse) ProtoMessage() {}

func (x *GetAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{39}
}

func (x *GetAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// {{.Name}}
type UpdateAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAgentRequest) Reset() {
	*x = UpdateAgentRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentRequest) ProtoMessage() {}

func (x *UpdateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// {{.Name}}
type UpdateAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *Agent                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAgentResponse) Reset() {
	*x = UpdateAgentResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentResponse) ProtoMessage() {}

func (x *UpdateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentResponse.ProtoReflect.Descriptor instead.
func (*UpdateAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// {{.Name}}
type DeleteAgentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAgentRequest) Reset() {
	*x = DeleteAgentRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentRequest) ProtoMessage() {}

func (x *DeleteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAgentResponse) Reset() {
	*x = DeleteAgentResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentResponse) ProtoMessage() {}

func (x *DeleteAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{43}
}

// {{.Name}}
type ListTestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestsRequest) Reset() {
	*x = ListTestsRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsRequest) ProtoMessage() {}

func (x *ListTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsRequest.ProtoReflect.Descriptor instead.
func (*ListTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{44}
}

// {{.Name}}
type ListTestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tests         []*Test                `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	InvalidCount  uint32                 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestsResponse) Reset() {
	*x = ListTestsResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsResponse) ProtoMessage() {}

func (x *ListTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsResponse.ProtoReflect.Descriptor instead.
func (*ListTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{45}
}

func (x *ListTestsResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListTestsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type CreateTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTestRequest) Reset() {
	*x = CreateTestRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestRequest) ProtoMessage() {}

func (x *CreateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestRequest.ProtoReflect.Descriptor instead.
func (*CreateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{46}
}

func (x *CreateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

// {{.Name}}
type CreateTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTestResponse) Reset() {
	*x = CreateTestResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResponse) ProtoMessage() {}

func (x *CreateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResponse.ProtoReflect.Descriptor instead.
func (*CreateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{47}
}

func (x *CreateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

// {{.Name}}
type GetTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{48}
}

func (x *GetTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{49}
}

func (x *GetTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

// {{.Name}}
type UpdateTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTestRequest) Reset() {
	*x = UpdateTestRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestRequest) ProtoMessage() {}

func (x *UpdateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

// {{.Name}}
type UpdateTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Test          *Test                  `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTestResponse) Reset() {
	*x = UpdateTestResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestResponse) ProtoMessage() {}

func (x *UpdateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

// {{.Name}}
type DeleteTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestRequest) Reset() {
	*x = DeleteTestRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestRequest) ProtoMessage() {}

func (x *DeleteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestResponse) Reset() {
	*x = DeleteTestResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestResponse) ProtoMessage() {}

func (x *DeleteTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{53}
}

// {{.Name}}
type SetTestStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        TestStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.synthetics.v202202.TestStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTestStatusRequest) Reset() {
	*x = SetTestStatusRequest{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusRequest) ProtoMessage() {}

func (x *SetTestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTestStatusRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{54}
}

func (x *SetTestStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetTestStatusRequest) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

// {{.Name}}
type SetTestStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTestStatusResponse) Reset() {
	*x = SetTestStatusResponse{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusResponse) ProtoMessage() {}

func (x *SetTestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTestStatusResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{55}
}

type AgentMetadata_IpValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentMetadata_IpValue) Reset() {
	*x = AgentMetadata_IpValue{}
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMetadata_IpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadata_IpValue) ProtoMessage() {}

func (x *AgentMetadata_IpValue) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadata_IpValue.ProtoReflect.Descriptor instead.
func (*AgentMetadata_IpValue) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AgentMetadata_IpValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_kentik_synthetics_v202202_synthetics_proto protoreflect.FileDescriptor

const file_kentik_synthetics_v202202_synthetics_proto_rawDesc = "" +
	"\n" +
	"*kentik/synthetics/v202202/synthetics.proto\x12\x19kentik.synthetics.v202202\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a%kentik/core/v202303/annotations.proto\x1a#kentik/core/v202303/user_info.proto\"\xef\x0e\n" +
	"\x05Agent\x126\n" +
	"\x02id\x18\x01 \x01(\tB&\x92A 2\x1eUnique identifier of the agent\xe0A\x03R\x02id\x12I\n" +
	"\tsite_name\x18\x02 \x01(\tB,\x92A)2'Name of the site where agent is locatedR\bsiteName\x12W\n" +
	"\x06status\x18\x03 \x01(\x0e2&.kentik.synthetics.v202202.AgentStatusB\x17\x92A\x142\x12Operational statusR\x06status\x12F\n" +
	"\x05alias\x18\x04 \x01(\tB0\x92A-2+User selected descriptive name of the agentR\x05alias\x12<\n" +
	"\x04type\x18\x05 \x01(\tB(\x92A\"2 Type of agent (global | private)\xe0A\x03R\x04type\x12A\n" +
	"\x02os\x18\x06 \x01(\tB1\x92A+2)OS version of server/VM hosting the agent\xe0A\x03R\x02os\x12H\n" +
	"\x02ip\x18\a \x01(\tB8\x92A02.Public IP address of the agent (auto-detected)\xe0A\x03\x18\x01R\x02ip\x12L\n" +
	"\x03lat\x18\b \x01(\x01B:\x92A725Latitude of agent's location (signed decimal degrees)R\x03lat\x12O\n" +
	"\x04long\x18\t \x01(\x01B;\x92A826Longitude of agent's location (signed decimal degrees)R\x04long\x12h\n" +
	"\vlast_authed\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampB+\x92A%2#Timestamp of the last authorization\xe0A\x03R\n" +
	"lastAuthed\x12j\n" +
	"\x06family\x18\v \x01(\x0e2#.kentik.synthetics.v202202.IPFamilyB-\x92A*2(IP address family supported by the agentR\x06family\x12B\n" +
	"\x03asn\x18\f \x01(\rB0\x92A-2+ASN of the AS owning agent's public addressR\x03asn\x12X\n" +
	"\asite_id\x18\r \x01(\tB?\x92A<2:ID of the site hosting the agent (if configured in Kentik)R\x06siteId\x12?\n" +
	"\aversion\x18\x0e \x01(\tB%\x92A\x1f2\x1dSoftware version of the agent\xe0A\x03R\aversion\x128\n" +
	"\x04city\x18\x10 \x01(\tB$\x92A!2\x1fCity where the agent is locatedR\x04city\x12D\n" +
	"\x06region\x18\x11 \x01(\tB,\x92A)2'Geographical region of agent's locationR\x06region\x12:\n" +
	"\acountry\x18\x12 \x01(\tB \x92A\x1d2\x1bCountry of agent's locationR\acountry\x12J\n" +
	"\btest_ids\x18\x13 \x03(\tB/\x92A)2'IDs of user's test running on the agent\xe0A\x03R\atestIds\x12B\n" +
	"\blocal_ip\x18\x14 \x01(\tB'\x92A\"2 Internal IP address of the agent\x18\x01R\alocalIp\x12O\n" +
	"\fcloud_region\x18\x16 \x01(\tB,\x92A)2'Cloud region (if any) hosting the agentR\vcloudRegion\x12U\n" +
	"\x0ecloud_provider\x18\x17 \x01(\tB.\x92A+2)Cloud provider (if any) hosting the agentR\rcloudProvider\x12L\n" +
	"\n" +
	"agent_impl\x18\x18 \x01(\x0e2(.kentik.synthetics.v202202.ImplementTypeB\x03\xe0A\x03R\tagentImpl\x12N\n" +
	"\x06labels\x18\x19 \x03(\tB6\x92A321List of names of labels associated with the agentR\x06labels\x12\x90\x01\n" +
	"\bmetadata\x18\x1a \x01(\v2(.kentik.synthetics.v202202.AgentMetadataBJ\x92AG2EAdditional information about agent's configuration and run-time stateR\bmetadata\"\xe8\x04\n" +
	"\rAgentMetadata\x12\x8b\x01\n" +
	"\x16private_ipv4_addresses\x18\x01 \x03(\v20.kentik.synthetics.v202202.AgentMetadata.IpValueB#\x92A 2\x1eList of private IPv4 addressesR\x14privateIpv4Addresses\x12\x8b\x01\n" +
	"\x15public_ipv4_addresses\x18\x02 \x03(\v20.kentik.synthetics.v202202.AgentMetadata.IpValueB%\x92A\x1f2\x1dList of public IPv4 addresses\xe0A\x03R\x13publicIpv4Addresses\x12\x8b\x01\n" +
	"\x16private_ipv6_addresses\x18\x03 \x03(\v20.kentik.synthetics.v202202.AgentMetadata.IpValueB#\x92A 2\x1eList of private IPv6 addressesR\x14privateIpv6Addresses\x12\x8b\x01\n" +
	"\x15public_ipv6_addresses\x18\x04 \x03(\v20.kentik.synthetics.v202202.AgentMetadata.IpValueB%\x92A\x1f2\x1dList of public IPv6 addresses\xe0A\x03R\x13publicIpv6Addresses\x1a\x1f\n" +
	"\aIpValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\xb1\x06\n" +
	"\x04Test\x12-\n" +
	"\x02id\x18\x01 \x01(\tB\x1d\x92A\x172\x15Unique ID of the test\xe0A\x03R\x02id\x127\n" +
	"\x04name\x18\x02 \x01(\tB#\x92A 2\x1eUser selected name of the testR\x04name\x12)\n" +
	"\x04type\x18\x03 \x01(\tB\x15\x92A\x122\x10Type of the testR\x04type\x12b\n" +
	"\x06status\x18\x05 \x01(\x0e2%.kentik.synthetics.v202202.TestStatusB#\x92A 2\x1eOperational status of the testR\x06status\x12\\\n" +
	"\bsettings\x18\x06 \x01(\v2'.kentik.synthetics.v202202.TestSettingsB\x17\x92A\x142\x12Test configurationR\bsettings\x12R\n" +
	"\x05cdate\x18\a \x01(\v2\x1a.google.protobuf.TimestampB \x92A\x1a2\x18Creation timestamp (UTC)\xe0A\x03R\x05cdate\x12[\n" +
	"\x05edate\x18\b \x01(\v2\x1a.google.protobuf.TimestampB)\x92A#2!Last modification timestamp (UTC)\xe0A\x03R\x05edate\x12^\n" +
	"\n" +
	"created_by\x18\t \x01(\v2\x1d.kentik.core.v202303.UserInfoB \x92A\x1a2\x18Identity of test creator\xe0A\x03R\tcreatedBy\x12~\n" +
	"\x0flast_updated_by\x18\n" +
	" \x01(\v2\x1d.kentik.core.v202303.UserInfoB7\x92A12/Identity of use that has modified the test last\xe0A\x03R\rlastUpdatedBy\x12C\n" +
	"\x06labels\x18\v \x03(\tB+\x92A(2&Set of labels associated with the testR\x06labels\"\xd4\f\n" +
	"\fTestSettings\x12E\n" +
	"\bhostname\x18\x01 \x01(\v2'.kentik.synthetics.v202202.HostnameTestH\x00R\bhostname\x123\n" +
	"\x02ip\x18\x02 \x01(\v2!.kentik.synthetics.v202202.IpTestH\x00R\x02ip\x12<\n" +
	"\x05agent\x18\x03 \x01(\v2$.kentik.synthetics.v202202.AgentTestH\x00R\x05agent\x129\n" +
	"\x04flow\x18\x04 \x01(\v2#.kentik.synthetics.v202202.FlowTestH\x00R\x04flow\x126\n" +
	"\x03dns\x18\x05 \x01(\v2\".kentik.synthetics.v202202.DnsTestH\x00R\x03dns\x126\n" +
	"\x03url\x18\x06 \x01(\v2\".kentik.synthetics.v202202.UrlTestH\x00R\x03url\x12F\n" +
	"\fnetwork_grid\x18\a \x01(\v2!.kentik.synthetics.v202202.IpTestH\x00R\vnetworkGrid\x12F\n" +
	"\tpage_load\x18\b \x01(\v2'.kentik.synthetics.v202202.PageLoadTestH\x00R\bpageLoad\x12?\n" +
	"\bdns_grid\x18\t \x01(\v2\".kentik.synthetics.v202202.DnsTestH\x00R\adnsGrid\x12O\n" +
	"\fnetwork_mesh\x18\x12 \x01(\v2*.kentik.synthetics.v202202.NetworkMeshTestH\x00R\vnetworkMesh\x12[\n" +
	"\tagent_ids\x18\n" +
	" \x03(\tB>\x92A;29IDs of agents assigned to run tasks on behalf of the testR\bagentIds\x12A\n" +
	"\x05tasks\x18\v \x03(\tB+\x92A(2&List of task names to run for the testR\x05tasks\x12\xa9\x01\n" +
	"\x0fhealth_settings\x18\f \x01(\v2).kentik.synthetics.v202202.HealthSettingsBU\x92AR2PHealth evaluation thresholds, acceptable responses and alarm activation settingsR\x0ehealthSettings\x12i\n" +
	"\x04ping\x18\r \x01(\v2+.kentik.synthetics.v202202.TestPingSettingsB(\x92A%2#Ping tasks configuration parametersR\x04ping\x12q\n" +
	"\x05trace\x18\x0e \x01(\v2,.kentik.synthetics.v202202.TestTraceSettingsB-\x92A*2(Traceroute task configuration parametersR\x05trace\x12@\n" +
	"\x06period\x18\x0f \x01(\rB(\x92A%2#Test evaluation period (in seconds)R\x06period\x12\x81\x01\n" +
	"\x06family\x18\x10 \x01(\x0e2#.kentik.synthetics.v202202.IPFamilyBD\x92AA2?IP address family to select from available DNS name resolutionsR\x06family\x12\x7f\n" +
	"\x15notification_channels\x18\x11 \x03(\tBJ\x92AG2EList of IDs of notification channels for alarms triggered by the testR\x14notificationChannels\x12>\n" +
	"\x05notes\x18\x13 \x01(\tB(\x92A%2#Add a note or comment for this testR\x05notesB\f\n" +
	"\n" +
	"definition\"\xcc\x03\n" +
	"\x10TestPingSettings\x12K\n" +
	"\x05count\x18\x01 \x01(\rB5\x92A220Number of probe packets to send in one iterationR\x05count\x12G\n" +
	"\bprotocol\x18\x02 \x01(\tB+\x92A(2&Transport protocol to use (icmp | tcp)R\bprotocol\x12F\n" +
	"\x04port\x18\x03 \x01(\rB2\x92A/2-Target port for TCP probes (ignored for ICMP)R\x04port\x12P\n" +
	"\atimeout\x18\x04 \x01(\rB6\x92A321Timeout in milliseconds for execution of the taskR\atimeout\x12<\n" +
	"\x05delay\x18\x05 \x01(\x02B&\x92A#2!Inter-probe delay in millisecondsR\x05delay\x12J\n" +
	"\x04dscp\x18\x06 \x01(\rB6\x92A321DSCP code to be set in IP header of probe packetsR\x04dscp\"\xa9\x04\n" +
	"\x11TestTraceSettings\x12K\n" +
	"\x05count\x18\x01 \x01(\rB5\x92A220Number of probe packets to send in one iterationR\x05count\x12M\n" +
	"\bprotocol\x18\x02 \x01(\tB1\x92A.2,Transport protocol to use (icmp | tcp | udp)R\bprotocol\x12M\n" +
	"\x04port\x18\x03 \x01(\rB9\x92A624Target port for TCP or UDP probes (ignored for ICMP)R\x04port\x12P\n" +
	"\atimeout\x18\x04 \x01(\rB6\x92A321Timeout in milliseconds for execution of the taskR\atimeout\x12M\n" +
	"\x05limit\x18\x05 \x01(\rB7\x92A422Maximum number of hops to probe (i.e. maximum TTL)R\x05limit\x12<\n" +
	"\x05delay\x18\x06 \x01(\x02B&\x92A#2!Inter-probe delay in millisecondsR\x05delay\x12J\n" +
	"\x04dscp\x18\a \x01(\rB6\x92A321DSCP code to be set in IP header of probe packetsR\x04dscp\"\xc6\x03\n" +
	"\x12ActivationSettings\x12\x82\x01\n" +
	"\fgrace_period\x18\x01 \x01(\tB_\x92A\\2ZPeriod of healthy status in minutes within the time window not cancelling alarm activationR\vgracePeriod\x12N\n" +
	"\ttime_unit\x18\x02 \x01(\tB1\x92A.2,Time unit for specifying time window (m | h)R\btimeUnit\x12]\n" +
	"\vtime_window\x18\x03 \x01(\tB<\x92A927Time window for evaluating of test for alarm activationR\n" +
	"timeWindow\x12|\n" +
	"\x05times\x18\x04 \x01(\tBf\x92Ac2aNumber of occurrences of unhealthy test status within the time window triggering alarm activationR\x05times\"\xb4\x1b\n" +
	"\x0eHealthSettings\x12\x7f\n" +
	"\x10latency_critical\x18\x01 \x01(\x02BT\x92AQ2OThreshold for ping response latency (in microseconds) to trigger critical alarmR\x0flatencyCritical\x12|\n" +
	"\x0flatency_warning\x18\x02 \x01(\x02BS\x92AP2NThreshold for ping response latency (in microseconds) to trigger warning alarmR\x0elatencyWarning\x12v\n" +
	"\x14packet_loss_critical\x18\x03 \x01(\x02BD\x92AA2?Threshold for ping packet loss (in %) to trigger critical alarmR\x12packetLossCritical\x12s\n" +
	"\x13packet_loss_warning\x18\x04 \x01(\x02BC\x92A@2>Threshold for ping packet loss (in %) to trigger warning alarmR\x11packetLossWarning\x12s\n" +
	"\x0fjitter_critical\x18\x05 \x01(\x02BJ\x92AG2EThreshold for ping jitter (in microseconds) to trigger critical alarmR\x0ejitterCritical\x12q\n" +
	"\x0ejitter_warning\x18\x06 \x01(\x02BJ\x92AG2EThreshold for ping jitter (in microseconds) to trigger critical alarmR\rjitterWarning\x12\x88\x01\n" +
	"\x15http_latency_critical\x18\a \x01(\x02BT\x92AQ2OThreshold for HTTP response latency (in microseconds) to trigger critical alarmR\x13httpLatencyCritical\x12\x85\x01\n" +
	"\x14http_latency_warning\x18\b \x01(\x02BS\x92AP2NThreshold for HTTP response latency (in microseconds) to trigger warning alarmR\x12httpLatencyWarning\x12a\n" +
	"\x10http_valid_codes\x18\t \x03(\rB7\x92A422List of HTTP status codes indicating healthy stateR\x0ehttpValidCodes\x12^\n" +
	"\x0fdns_valid_codes\x18\n" +
	" \x03(\rB6\x92A321List of DNS status codes indicating healthy stateR\rdnsValidCodes\x12\xa2\x01\n" +
	"\x17latency_critical_stddev\x18\v \x01(\x02Bj\x92Ag2eThreshold for standard deviation (in microseconds) of ping response latency to trigger critical alarmR\x15latencyCriticalStddev\x12\x9f\x01\n" +
	"\x16latency_warning_stddev\x18\f \x01(\x02Bi\x92Af2dThreshold for standard deviation (in microseconds) of ping response latency to trigger warning alarmR\x14latencyWarningStddev\x12\x96\x01\n" +
	"\x16jitter_critical_stddev\x18\r \x01(\x02B`\x92A]2[Threshold for standard deviation of ping jitter (in microseconds) to trigger critical alarmR\x14jitterCriticalStddev\x12\x93\x01\n" +
	"\x15jitter_warning_stddev\x18\x0e \x01(\x02B_\x92A\\2ZThreshold for standard deviation of ping jitter (in microseconds) to trigger warning alarmR\x13jitterWarningStddev\x12\xab\x01\n" +
	"\x1chttp_latency_critical_stddev\x18\x0f \x01(\x02Bj\x92Ag2eThreshold for standard deviation of HTTP response latency (in microseconds) to trigger critical alarmR\x19httpLatencyCriticalStddev\x12\xa8\x01\n" +
	"\x1bhttp_latency_warning_stddev\x18\x10 \x01(\x02Bi\x92Af2dThreshold for standard deviation of HTTP response latency (in microseconds) to trigger warning alarmR\x18httpLatencyWarningStddev\x12\xaf\x01\n" +
	"\x1bunhealthy_subtest_threshold\x18\x11 \x01(\rBo\x92Aj2hNumber of tasks (across all agents) that must report unhealthy status in order for alarm to be triggered\x18\x01R\x19unhealthySubtestThreshold\x12m\n" +
	"\n" +
	"activation\x18\x12 \x01(\v2-.kentik.synthetics.v202202.ActivationSettingsB\x1e\x92A\x1b2\x19Alarm activation settingsR\n" +
	"activation\x12\x8b\x01\n" +
	"\x13cert_expiry_warning\x18\x13 \x01(\rB[\x92AX2VThreshold for remaining validity of TLS certificate (in days) to trigger warning alarmR\x11certExpiryWarning\x12\x8e\x01\n" +
	"\x14cert_expiry_critical\x18\x14 \x01(\rB\\\x92AY2WThreshold for remaining validity of TLS certificate (in days) to trigger critical alarmR\x12certExpiryCritical\x12\x88\x01\n" +
	"\rdns_valid_ips\x18\x15 \x01(\tBd\x92Aa2_Comma separated list of IP addresses expected to be received in response to DNS A or AAAA queryR\vdnsValidIps\x12\x85\x01\n" +
	"\x14dns_latency_critical\x18\x16 \x01(\x02BS\x92AP2NThreshold for DNS response latency (in microseconds) to trigger critical alarmR\x12dnsLatencyCritical\x12\x82\x01\n" +
	"\x13dns_latency_warning\x18\x17 \x01(\x02BR\x92AO2MThreshold for DNS response latency (in microseconds) to trigger warning alarmR\x11dnsLatencyWarning\x12\xa8\x01\n" +
	"\x1bdns_latency_critical_stddev\x18\x18 \x01(\x02Bi\x92Af2dThreshold for standard deviation (in microseconds) of DNS response latency to trigger critical alarmR\x18dnsLatencyCriticalStddev\x12\xa5\x01\n" +
	"\x1adns_latency_warning_stddev\x18\x19 \x01(\x02Bh\x92Ae2cThreshold for standard deviation (in microseconds) of DNS response latency to trigger warning alarmR\x17dnsLatencyWarningStddev\"X\n" +
	"\fHostnameTest\x12H\n" +
	"\x06target\x18\x01 \x01(\tB0\x92A-2+Fully qualified DNS name of the target hostR\x06target\"H\n" +
	"\x06IpTest\x12>\n" +
	"\atargets\x18\x01 \x03(\tB$\x92A!2\x1fList of IP addresses of targetsR\atargets\"\xbf\x01\n" +
	"\tAgentTest\x123\n" +
	"\x06target\x18\x01 \x01(\tB\x1b\x92A\x182\x16ID of the target agentR\x06target\x12}\n" +
	"\fuse_local_ip\x18\x02 \x01(\bB[\x92AX2VBoolean value indicating whether to use local (private) IP address of the target agentR\n" +
	"useLocalIp\"\x8b\a\n" +
	"\bFlowTest\x12\x87\x01\n" +
	"\x06target\x18\x01 \x01(\tBo\x92Al2jTarget ASN, CDN, Country, Region of City for autonomous test (type of value depends on flow test sub-type)R\x06target\x12\x9e\x01\n" +
	"\x1etarget_refresh_interval_millis\x18\x02 \x01(\rBY\x92AV2TPeriod (in milliseconds) for refreshing list of targets based on available flow dataR\x1btargetRefreshIntervalMillis\x12^\n" +
	"\rmax_providers\x18\x03 \x01(\rB9\x92A624Maximum number of IP providers to track autonomouslyR\fmaxProviders\x12p\n" +
	"\x0emax_ip_targets\x18\x04 \x01(\rBJ\x92AG2EMaximum number of target IP addresses to select based flow data queryR\fmaxIpTargets\x12W\n" +
	"\x04type\x18\x05 \x01(\tBC\x92A@2>Autonomous test sub-type (asn | cdn | country | region | city)R\x04type\x12\xa8\x01\n" +
	"\x0einet_direction\x18\x06 \x01(\tB\x80\x01\x92A}2{Selection of address from flow data (src = source address in inbound flows | dst = destination addresses in outbound flows)R\rinetDirection\x12~\n" +
	"\tdirection\x18\a \x01(\tB`\x92A]2[Direction of flows to match target attribute for extraction of target addresses (src | dst)R\tdirection\"\xef\x02\n" +
	"\aDnsTest\x12>\n" +
	"\x06target\x18\x01 \x01(\tB&\x92A#2!Fully qualified DNS name to queryR\x06target\x12F\n" +
	"\atimeout\x18\x02 \x01(\rB,\x92A'2%--- Deprecated: value is ignored. ---\x18\x01R\atimeout\x12g\n" +
	"\vrecord_type\x18\x03 \x01(\x0e2$.kentik.synthetics.v202202.DNSRecordB \x92A\x1d2\x1bType of DNS record to queryR\n" +
	"recordType\x12B\n" +
	"\aservers\x18\x04 \x03(\tB(\x92A%2#List of IP addresses of DNS serversR\aservers\x12/\n" +
	"\x04port\x18\x05 \x01(\rB\x1b\x92A\x182\x16Target DNS server portR\x04port\"\xc6\x04\n" +
	"\aUrlTest\x129\n" +
	"\x06target\x18\x01 \x01(\tB!\x92A\x1e2\x1cHTTP or HTTPS URL to requestR\x06target\x12I\n" +
	"\atimeout\x18\x02 \x01(\rB/\x92A,2*HTTP transaction timeout (in milliseconds)R\atimeout\x12Q\n" +
	"\x06method\x18\x03 \x01(\tB9\x92A624HTTP method to use (GET | HEAD | PATCH | POST | PUT)R\x06method\x12\x7f\n" +
	"\aheaders\x18\x04 \x03(\v2/.kentik.synthetics.v202202.UrlTest.HeadersEntryB4\x92A12/Map of HTTP header values keyed by header namesR\aheaders\x12*\n" +
	"\x04body\x18\x05 \x01(\tB\x16\x92A\x132\x11HTTP request bodyR\x04body\x12y\n" +
	"\x11ignore_tls_errors\x18\x06 \x01(\bBM\x92AJ2HBoolean indicating whether to ignore TLS certificate verification errorsR\x0fignoreTlsErrors\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xac\x05\n" +
	"\fPageLoadTest\x129\n" +
	"\x06target\x18\x01 \x01(\tB!\x92A\x1e2\x1cHTTP or HTTPS URL to requestR\x06target\x12I\n" +
	"\atimeout\x18\x02 \x01(\rB/\x92A,2*HTTP transaction timeout (in milliseconds)R\atimeout\x12\x84\x01\n" +
	"\aheaders\x18\x03 \x03(\v24.kentik.synthetics.v202202.PageLoadTest.HeadersEntryB4\x92A12/Map of HTTP header values keyed by header namesR\aheaders\x12y\n" +
	"\x11ignore_tls_errors\x18\x04 \x01(\bBM\x92AJ2HBoolean indicating whether to ignore TLS certificate verification errorsR\x0fignoreTlsErrors\x12\x96\x01\n" +
	"\rcss_selectors\x18\x05 \x03(\v29.kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntryB6\x92A321Map of CSS selector values keyed by selector nameR\fcssSelectors\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11CssSelectorsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x91\x01\n" +
	"\x0fNetworkMeshTest\x12~\n" +
	"\fuse_local_ip\x18\x01 \x01(\bB\\\x92AY2WBoolean value indicating whether to use local (private) IP address of the target agentsR\n" +
	"useLocalIp\"\xc7\x02\n" +
	"\n" +
	"MetricData\x126\n" +
	"\acurrent\x18\x01 \x01(\rB\x1c\x92A\x192\x17Current value of metricR\acurrent\x12?\n" +
	"\vrolling_avg\x18\x02 \x01(\rB\x1e\x92A\x1b2\x19Rolling average of metricR\n" +
	"rollingAvg\x12[\n" +
	"\x0erolling_stddev\x18\x03 \x01(\rB4\x92A12/Rolling average of standard deviation of metricR\rrollingStddev\x12c\n" +
	"\x06health\x18\x04 \x01(\tBK\x92AH2FHealth evaluation status for the metric (healthy | warning | critical)R\x06health\"\xaf\x01\n" +
	"\x0ePacketLossData\x128\n" +
	"\acurrent\x18\x01 \x01(\x01B\x1e\x92A\x1b2\x19Current packet loss valueR\acurrent\x12c\n" +
	"\x06health\x18\x02 \x01(\tBK\x92AH2FHealth evaluation status for the metric (healthy | warning | critical)R\x06health\"\xd6\x03\n" +
	"\vPingResults\x12E\n" +
	"\x06target\x18\x01 \x01(\tB-\x92A*2(Hostname or address of the probed targetR\x06target\x12n\n" +
	"\vpacket_loss\x18\x02 \x01(\v2).kentik.synthetics.v202202.PacketLossDataB\"\x92A\x1f2\x1dPacket loss metric and healthR\n" +
	"packetLoss\x12f\n" +
	"\alatency\x18\x03 \x01(\v2%.kentik.synthetics.v202202.MetricDataB%\x92A\"2 Packet latency metric and healthR\alatency\x12o\n" +
	"\x06jitter\x18\x04 \x01(\v2%.kentik.synthetics.v202202.MetricDataB0\x92A-2+Latency jitter (variance) metric and healthR\x06jitter\x127\n" +
	"\x06dst_ip\x18\x05 \x01(\tB \x92A\x1d2\x1bIP address of probed targetR\x05dstIp\"\xf9\x01\n" +
	"\x10HTTPResponseData\x124\n" +
	"\x06status\x18\x01 \x01(\rB\x1c\x92A\x192\x17HTTP status in responseR\x06status\x12>\n" +
	"\x04size\x18\x02 \x01(\rB*\x92A'2%Total size of  received response bodyR\x04size\x12o\n" +
	"\x04data\x18\x03 \x01(\tB[\x92AX2VDetailed information about transaction timing, connection characteristics and responseR\x04data\"\xe4\x02\n" +
	"\vHTTPResults\x12.\n" +
	"\x06target\x18\x01 \x01(\tB\x16\x92A\x132\x11Target probed URLR\x06target\x12m\n" +
	"\alatency\x18\x02 \x01(\v2%.kentik.synthetics.v202202.MetricDataB,\x92A)2'HTTP response latency metric and healthR\alatency\x12v\n" +
	"\bresponse\x18\x04 \x01(\v2+.kentik.synthetics.v202202.HTTPResponseDataB-\x92A*2(Information about received HTTP responseR\bresponse\x12>\n" +
	"\x06dst_ip\x18\x05 \x01(\tB'\x92A$2\"IP address of probed target serverR\x05dstIp\"\x87\x01\n" +
	"\x0fDNSResponseData\x120\n" +
	"\x06status\x18\x01 \x01(\rB\x18\x92A\x152\x13Received DNS statusR\x06status\x12B\n" +
	"\x04data\x18\x02 \x01(\tB.\x92A+2)Text rendering of received DNS resolutionR\x04data\"\xdd\x02\n" +
	"\n" +
	"DNSResults\x12/\n" +
	"\x06target\x18\x01 \x01(\tB\x17\x92A\x142\x12Queried DNS recordR\x06target\x12:\n" +
	"\x06server\x18\x02 \x01(\tB\"\x92A\x1f2\x1dDNS server used for the queryR\x06server\x12l\n" +
	"\alatency\x18\x03 \x01(\v2%.kentik.synthetics.v202202.MetricDataB+\x92A(2&DNS response latency metric and healthR\alatency\x12t\n" +
	"\bresponse\x18\x05 \x01(\v2*.kentik.synthetics.v202202.DNSResponseDataB,\x92A)2'Information about received DNS responseR\bresponse\"\x83\x03\n" +
	"\vTaskResults\x12e\n" +
	"\x04ping\x18\x01 \x01(\v2&.kentik.synthetics.v202202.PingResultsB'\x92A$2\"Entry containing ping task resultsH\x00R\x04ping\x12e\n" +
	"\x04http\x18\x02 \x01(\v2&.kentik.synthetics.v202202.HTTPResultsB'\x92A$2\"Entry containing HTTP task resultsH\x00R\x04http\x12a\n" +
	"\x03dns\x18\x03 \x01(\v2%.kentik.synthetics.v202202.DNSResultsB&\x92A#2!Entry containing DNS task resultsH\x00R\x03dns\x126\n" +
	"\x06health\x18\x04 \x01(\tB\x1e\x92A\x1b2\x19Health status of the taskR\x06healthB\v\n" +
	"\ttask_type\"\x9e\x02\n" +
	"\fAgentResults\x12A\n" +
	"\bagent_id\x18\x01 \x01(\tB&\x92A#2!ID of the agent providing resultsR\aagentId\x12b\n" +
	"\x06health\x18\x02 \x01(\tBJ\x92AG2EOverall health status of all task for the test executed by this agentR\x06health\x12g\n" +
	"\x05tasks\x18\x03 \x03(\v2&.kentik.synthetics.v202202.TaskResultsB)\x92A&2$List of results for individual tasksR\x05tasks\"\xea\x02\n" +
	"\vTestResults\x12K\n" +
	"\atest_id\x18\x01 \x01(\tB2\x92A/2-ID of the test for which results are providedR\x06testId\x12L\n" +
	"\x04time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x1c\x92A\x192\x17Results timestamp (UTC)R\x04time\x126\n" +
	"\x06health\x18\x03 \x01(\tB\x1e\x92A\x1b2\x19Health status of the testR\x06health\x12\x87\x01\n" +
	"\x06agents\x18\x04 \x03(\v2'.kentik.synthetics.v202202.AgentResultsBF\x92AC2AList of results from agents executing tasks on behalf of the testR\x06agents\"\x81\x01\n" +
	"\x05Stats\x12,\n" +
	"\aaverage\x18\x01 \x01(\x05B\x12\x92A\x0f2\rAverage valueR\aaverage\x12$\n" +
	"\x03min\x18\x02 \x01(\x05B\x12\x92A\x0f2\rMinimum valueR\x03min\x12$\n" +
	"\x03max\x18\x03 \x01(\x05B\x12\x92A\x0f2\rMaximum valueR\x03max\"\xc1\x02\n" +
	"\bLocation\x12C\n" +
	"\blatitude\x18\b \x01(\x01B'\x92A$2\"Latitude in signed decimal degreesR\blatitude\x12F\n" +
	"\tlongitude\x18\t \x01(\x01B(\x92A%2#Longitude in signed decimal degreesR\tlongitude\x126\n" +
	"\acountry\x18\x01 \x01(\tB\x1c\x92A\x192\x17Country of the locationR\acountry\x12A\n" +
	"\x06region\x18\x02 \x01(\tB)\x92A&2$Geographic region within the countryR\x06region\x12-\n" +
	"\x04city\x18\x03 \x01(\tB\x19\x92A\x162\x14City of the locationR\x04city\"\x86\x05\n" +
	"\aNetNode\x12H\n" +
	"\x02ip\x18\x02 \x01(\tB8\x92A523IP address of the node in standard textual notationR\x02ip\x12?\n" +
	"\x03asn\x18\x03 \x01(\rB-\x92A*2(AS number owning the address of the nodeR\x03asn\x12K\n" +
	"\aas_name\x18\x04 \x01(\tB2\x92A/2-Name of the AS owning the address of the nodeR\x06asName\x12h\n" +
	"\blocation\x18\x05 \x01(\v2#.kentik.synthetics.v202202.LocationB'\x92A$2\"Location of IP address of the nodeR\blocation\x12Y\n" +
	"\bdns_name\x18\x06 \x01(\tB>\x92A;29DNS name of the node (obtained by reverse DNS resolution)R\adnsName\x12f\n" +
	"\tdevice_id\x18\a \x01(\tBI\x92AF2DID of the device corresponding with the node in Kentik configurationR\bdeviceId\x12v\n" +
	"\asite_id\x18\b \x01(\tB]\x92AZ2XID of the site containing the device corresponding with the node in Kentik configurationR\x06siteId\"\xf3\x01\n" +
	"\bTraceHop\x12v\n" +
	"\alatency\x18\x03 \x01(\x05B\\\x92AY2WRound-trip packet latency to the node (in microseconds) - 0 if no response was receivedR\alatency\x12o\n" +
	"\anode_id\x18\x05 \x01(\tBV\x92AS2QID of the node for this hop in the Nodes map  - empty if no response was receivedR\x06nodeId\"\xfc\x01\n" +
	"\tPathTrace\x12:\n" +
	"\aas_path\x18\x01 \x03(\x05B!\x92A\x1e2\x1cAS path of the network traceR\x06asPath\x12Z\n" +
	"\vis_complete\x18\x02 \x01(\bB9\x92A624Indication whether response from target was receivedR\n" +
	"isComplete\x12W\n" +
	"\x04hops\x18\x06 \x03(\v2#.kentik.synthetics.v202202.TraceHopB\x1e\x92A\x1b2\x19List of hops in the traceR\x04hops\"\xa8\x04\n" +
	"\x04Path\x12H\n" +
	"\bagent_id\x18\x01 \x01(\tB-\x92A*2(ID of the agent generating the path dataR\aagentId\x12F\n" +
	"\ttarget_ip\x18\x03 \x01(\tB)\x92A&2$IP address of the target of the pathR\btargetIp\x12j\n" +
	"\thop_count\x18\x04 \x01(\v2 .kentik.synthetics.v202202.StatsB+\x92A(2&Hop count statistics across all tracesR\bhopCount\x12]\n" +
	"\x12max_as_path_length\x18\a \x01(\x05B0\x92A-2+Maximum length of AS path across all tracesR\x0fmaxAsPathLength\x12]\n" +
	"\x06traces\x18\b \x03(\v2$.kentik.synthetics.v202202.PathTraceB\x1f\x92A\x1c2\x1aData for individual tracesR\x06traces\x12d\n" +
	"\x04time\x18\t \x01(\v2\x1a.google.protobuf.TimestampB4\x92A12/Timestamp (UTC) of initiation of the path traceR\x04time\"\x92\x05\n" +
	"\x19GetResultsForTestsRequest\x12H\n" +
	"\x03ids\x18\x01 \x03(\tB6\x92A02.List of test IDs for which to retrieve results\xe0A\x02R\x03ids\x12x\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB=\x92A725Timestamp of the oldest results to include in results\xe0A\x02R\tstartTime\x12t\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB=\x92A725Timestamp of the newest results to include in results\xe0A\x02R\aendTime\x12P\n" +
	"\tagent_ids\x18\x04 \x03(\tB3\x92A02.List of agent IDs from which to return resultsR\bagentIds\x12]\n" +
	"\atargets\x18\x05 \x03(\tBC\x92A@2>List of targets (test dependent) for which to retrieve resultsR\atargets\x12\x89\x01\n" +
	"\taggregate\x18\x06 \x01(\bBk\x92Ah2fIf true, retrieve result aggregated across the requested time period, else return complete time seriesR\taggregate\"^\n" +
	"\x1aGetResultsForTestsResponse\x12@\n" +
	"\aresults\x18\x01 \x03(\v2&.kentik.synthetics.v202202.TestResultsR\aresults\"\x88\x04\n" +
	"\x16GetTraceForTestRequest\x12M\n" +
	"\x02id\x18\x01 \x01(\tB=\x92A:28ID of test for which to retrieve network path trace dataR\x02id\x12x\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB=\x92A725Timestamp of the oldest results to include in results\xe0A\x02R\tstartTime\x12t\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB=\x92A725Timestamp of the newest results to include in results\xe0A\x02R\aendTime\x12P\n" +
	"\tagent_ids\x18\x04 \x03(\tB3\x92A02.List of agent IDs from which to return resultsR\bagentIds\x12]\n" +
	"\n" +
	"target_ips\x18\x05 \x03(\tB>\x92A;29List of target IP addresses for which to retrieve resultsR\ttargetIps\"\xe6\x02\n" +
	"\x17GetTraceForTestResponse\x12\x8b\x01\n" +
	"\x05nodes\x18\x01 \x03(\v2=.kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntryB6\x92A321Map of network node information keyed by node IDsR\x05nodes\x12_\n" +
	"\x05paths\x18\x02 \x03(\v2\x1f.kentik.synthetics.v202202.PathB(\x92A%2#List of retrieved network path dataR\x05paths\x1a\\\n" +
	"\n" +
	"NodesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x128\n" +
	"\x05value\x18\x02 \x01(\v2\".kentik.synthetics.v202202.NetNodeR\x05value:\x028\x01\"\x13\n" +
	"\x11ListAgentsRequest\"\xd4\x01\n" +
	"\x12ListAgentsResponse\x12W\n" +
	"\x06agents\x18\x01 \x03(\v2 .kentik.synthetics.v202202.AgentB\x1d\x92A\x1a2\x18List of available agentsR\x06agents\x12e\n" +
	"\rinvalid_count\x18\x02 \x01(\rB@\x92A=2;Number of invalid entries encountered while collecting dataR\finvalidCount\"D\n" +
	"\x0fGetAgentRequest\x121\n" +
	"\x02id\x18\x01 \x01(\tB!\x92A\x1b2\x19ID of the requested agent\xe0A\x02R\x02id\"t\n" +
	"\x10GetAgentResponse\x12`\n" +
	"\x05agent\x18\x01 \x01(\v2 .kentik.synthetics.v202202.AgentB(\x92A%2#Agent configuration and status dataR\x05agent\"k\n" +
	"\x12UpdateAgentRequest\x12U\n" +
	"\x05agent\x18\x01 \x01(\v2 .kentik.synthetics.v202202.AgentB\x1d\x92A\x1a2\x18Agent configuration dataR\x05agent\"w\n" +
	"\x13UpdateAgentResponse\x12`\n" +
	"\x05agent\x18\x01 \x01(\v2 .kentik.synthetics.v202202.AgentB(\x92A%2#Agent configuration and status dataR\x05agent\"K\n" +
	"\x12DeleteAgentRequest\x125\n" +
	"\x02id\x18\x01 \x01(\tB%\x92A\x1f2\x1dID of the agent to be deleted\xe0A\x02R\x02id\"\x15\n" +
	"\x13DeleteAgentResponse\"\x12\n" +
	"\x10ListTestsRequest\"\xe1\x01\n" +
	"\x11ListTestsResponse\x12e\n" +
	"\x05tests\x18\x01 \x03(\v2\x1f.kentik.synthetics.v202202.TestB.\x92A+2)List of configured active or paused testsR\x05tests\x12e\n" +
	"\rinvalid_count\x18\x02 \x01(\rB@\x92A=2;Number of invalid entries encountered while collecting dataR\finvalidCount\"i\n" +
	"\x11CreateTestRequest\x12T\n" +
	"\x04test\x18\x01 \x01(\v2\x1f.kentik.synthetics.v202202.TestB\x1f\x92A\x192\x17Test configuration data\xe0A\x02R\x04test\"r\n" +
	"\x12CreateTestResponse\x12\\\n" +
	"\x04test\x18\x01 \x01(\v2\x1f.kentik.synthetics.v202202.TestB'\x92A$2\"Test configuration and status dataR\x04test\">\n" +
	"\x0eGetTestRequest\x12,\n" +
	"\x02id\x18\x01 \x01(\tB\x1c\x92A\x162\x14ID of requested test\xe0A\x02R\x02id\"o\n" +
	"\x0fGetTestResponse\x12\\\n" +
	"\x04test\x18\x01 \x01(\v2\x1f.kentik.synthetics.v202202.TestB'\x92A$2\"Test configuration and status dataR\x04test\"f\n" +
	"\x11UpdateTestRequest\x12Q\n" +
	"\x04test\x18\x01 \x01(\v2\x1f.kentik.synthetics.v202202.TestB\x1c\x92A\x192\x17Test configuration dataR\x04test\"r\n" +
	"\x12UpdateTestResponse\x12\\\n" +
	"\x04test\x18\x01 \x01(\v2\x1f.kentik.synthetics.v202202.TestB'\x92A$2\"Test configuration and status dataR\x04test\"I\n" +
	"\x11DeleteTestRequest\x124\n" +
	"\x02id\x18\x01 \x01(\tB$\x92A\x1e2\x1cID of the test to be deleted\xe0A\x02R\x02id\"\x14\n" +
	"\x12DeleteTestResponse\"\xb8\x01\n" +
	"\x14SetTestStatusRequest\x12E\n" +
	"\x02id\x18\x01 \x01(\tB5\x92A/2-ID of the test which status is to be modified\xe0A\x02R\x02id\x12Y\n" +
	"\x06status\x18\x02 \x01(\x0e2%.kentik.synthetics.v202202.TestStatusB\x1a\x92A\x142\x12Target test status\xe0A\x02R\x06status\"\x17\n" +
	"\x15SetTestStatusResponse*}\n" +
	"\rImplementType\x12\x1e\n" +
	"\x1aIMPLEMENT_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13IMPLEMENT_TYPE_RUST\x10\x01\x12\x17\n" +
	"\x13IMPLEMENT_TYPE_NODE\x10\x02\x12\x1a\n" +
	"\x16IMPLEMENT_TYPE_NETWORK\x10\x03*]\n" +
	"\bIPFamily\x12\x19\n" +
	"\x15IP_FAMILY_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fIP_FAMILY_V4\x10\x01\x12\x10\n" +
	"\fIP_FAMILY_V6\x10\x02\x12\x12\n" +
	"\x0eIP_FAMILY_DUAL\x10\x03*\x8b\x01\n" +
	"\n" +
	"TestStatus\x12\x1b\n" +
	"\x17TEST_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12TEST_STATUS_ACTIVE\x10\x01\x12\x16\n" +
	"\x12TEST_STATUS_PAUSED\x10\x02\x12\x17\n" +
	"\x13TEST_STATUS_DELETED\x10\x03\x12\x17\n" +
	"\x13TEST_STATUS_PREVIEW\x10\x04*q\n" +
	"\vAgentStatus\x12\x1c\n" +
	"\x18AGENT_STATUS_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fAGENT_STATUS_OK\x10\x01\x12\x15\n" +
	"\x11AGENT_STATUS_WAIT\x10\x02\x12\x18\n" +
	"\x14AGENT_STATUS_DELETED\x10\x03*\xc8\x01\n" +
	"\tDNSRecord\x12\x1a\n" +
	"\x16DNS_RECORD_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fDNS_RECORD_A\x10\x01\x12\x13\n" +
	"\x0fDNS_RECORD_AAAA\x10\x02\x12\x14\n" +
	"\x10DNS_RECORD_CNAME\x10\x03\x12\x14\n" +
	"\x10DNS_RECORD_DNAME\x10\x04\x12\x11\n" +
	"\rDNS_RECORD_NS\x10\x05\x12\x11\n" +
	"\rDNS_RECORD_MX\x10\x06\x12\x12\n" +
	"\x0eDNS_RECORD_PTR\x10\a\x12\x12\n" +
	"\x0eDNS_RECORD_SOA\x10\b2\xca\x05\n" +
	"\x15SyntheticsDataService\x12\xb3\x02\n" +
	"\x12GetResultsForTests\x124.kentik.synthetics.v202202.GetResultsForTestsRequest\x1a5.kentik.synthetics.v202202.GetResultsForTestsResponse\"\xaf\x01\x92As\x12\x15Get results for tests\x1aFReturns probe results for a set of tests for specified period of time.*\x12GetResultsForTests\xf2\xd7\x02\x0fsynthetics:read\x82\xd3\xe4\x93\x02 :\x01*\"\x1b/synthetics/v202202/results\x12\xd0\x02\n" +
	"\x0fGetTraceForTest\x121.kentik.synthetics.v202202.GetTraceForTestRequest\x1a2.kentik.synthetics.v202202.GetTraceForTestResponse\"\xd5\x01\x92A\x9a\x01\x12!Get network trace data for a test\x1adGet network trace data for a specific synthetic test. The test must have traceroute task configured.*\x0fGetTraceForTest\xf2\xd7\x02\x0fsynthetics:read\x82\xd3\xe4\x93\x02\x1e:\x01*\"\x19/synthetics/v202202/trace\x1a(\xcaA\x13grpc.api.kentik.com\xea\xd7\x02\n" +
	"synthetics\x90\xd8\x02\x032\xca\x18\n" +
	"\x16SyntheticsAdminService\x12\xa7\x02\n" +
	"\n" +
	"ListAgents\x12,.kentik.synthetics.v202202.ListAgentsRequest\x1a-.kentik.synthetics.v202202.ListAgentsResponse\"\xbb\x01\x92Ac\x12\x15List available agents\x1a>Returns list of all synthetic agents available in the account.*\n" +
	"ListAgents\xf2\xd7\x02\x15admin.synthetics:read\x92\xd8\x02\x16synthetics.agent::read\x82\xd3\xe4\x93\x02\x1c\x12\x1a/synthetics/v202202/agents\x12\xa7\x02\n" +
	"\bGetAgent\x12*.kentik.synthetics.v202202.GetAgentRequest\x1a+.kentik.synthetics.v202202.GetAgentResponse\"\xc1\x01\x92Ad\x12\x1eGet information about an agent\x1a8Returns information about the requested synthetic agent.*\bGetAgent\xf2\xd7\x02\x15admin.synthetics:read\x92\xd8\x02\x16synthetics.agent::read\x82\xd3\xe4\x93\x02!\x12\x1f/synthetics/v202202/agents/{id}\x12\xb3\x02\n" +
	"\vUpdateAgent\x12-.kentik.synthetics.v202202.UpdateAgentRequest\x1a..kentik.synthetics.v202202.UpdateAgentResponse\"\xc4\x01\x92A[\x12 Update configuration of an agent\x1a*Update configuration of a synthetic agent.*\vUpdateAgent\xf2\xd7\x02\x16admin.synthetics:write\x92\xd8\x02\x18synthetics.agent::update\x82\xd3\xe4\x93\x02*:\x01*\x1a%/synthetics/v202202/agents/{agent.id}\x12\xc9\x02\n" +
	"\vDeleteAgent\x12-.kentik.synthetics.v202202.DeleteAgentRequest\x1a..kentik.synthetics.v202202.DeleteAgentResponse\"\xda\x01\x92Az\x12\x0fDelete an agent\x1aZDeletes the requested agent. The deleted agent is removed from configuration of all tests.*\vDeleteAgent\xf2\xd7\x02\x16admin.synthetics:write\x92\xd8\x02\x18synthetics.agent::delete\x82\xd3\xe4\x93\x02!*\x1f/synthetics/v202202/agents/{id}\x12\x9f\x02\n" +
	"\tListTests\x12+.kentik.synthetics.v202202.ListTestsRequest\x1a,.kentik.synthetics.v202202.ListTestsResponse\"\xb6\x01\x92A`\x12\x0eList all tests\x1aCReturns a list of all configured active and paused synthetic tests.*\tListTests\xf2\xd7\x02\x15admin.synthetics:read\x92\xd8\x02\x15synthetics.test::read\x82\xd3\xe4\x93\x02\x1b\x12\x19/synthetics/v202202/tests\x12\xaa\x02\n" +
	"\n" +
	"CreateTest\x12,.kentik.synthetics.v202202.CreateTestRequest\x1a-.kentik.synthetics.v202202.CreateTestResponse\"\xbe\x01\x92Ab\x12\rCreate a test\x1aECreate synthetic test based on configuration provided in the request.*\n" +
	"CreateTest\xf2\xd7\x02\x16admin.synthetics:write\x92\xd8\x02\x17synthetics.test::create\x82\xd3\xe4\x93\x02\x1e:\x01*\"\x19/synthetics/v202202/tests\x12\xa9\x02\n" +
	"\aGetTest\x12).kentik.synthetics.v202202.GetTestRequest\x1a*.kentik.synthetics.v202202.GetTestResponse\"\xc6\x01\x92Ak\x12\x1cGet information about a test\x1aBReturns configuration and status for the requested synthetic test.*\aGetTest\xf2\xd7\x02\x15admin.synthetics:read\x92\xd8\x02\x15synthetics.test::read\x82\xd3\xe4\x93\x02 \x12\x1e/synthetics/v202202/tests/{id}\x12\xaa\x02\n" +
	"\n" +
	"UpdateTest\x12,.kentik.synthetics.v202202.UpdateTestRequest\x1a-.kentik.synthetics.v202202.UpdateTestResponse\"\xbe\x01\x92AX\x12\x1eUpdate configuration of a test\x1a*Updates configuration of a synthetic test.*\n" +
	"UpdateTest\xf2\xd7\x02\x16admin.synthetics:write\x92\xd8\x02\x17synthetics.test::update\x82\xd3\xe4\x93\x02(:\x01*\x1a#/synthetics/v202202/tests/{test.id}\x12\xcc\x02\n" +
	"\n" +
	"DeleteTest\x12,.kentik.synthetics.v202202.DeleteTestRequest\x1a-.kentik.synthetics.v202202.DeleteTestResponse\"\xe0\x01\x92A\x81\x01\x12\x18Delete a synthetic test.\x1aYDeletes the synthetics test. All accumulated results for the test cease to be accessible.*\n" +
	"DeleteTest\xf2\xd7\x02\x16admin.synthetics:write\x92\xd8\x02\x17synthetics.test::delete\x82\xd3\xe4\x93\x02 *\x1e/synthetics/v202202/tests/{id}\x12\xb2\x02\n" +
	"\rSetTestStatus\x12/.kentik.synthetics.v202202.SetTestStatusRequest\x1a0.kentik.synthetics.v202202.SetTestStatusResponse\"\xbd\x01\x92AU\x12!Update status of a synthetic test\x1a!Update status of a synthetic test*\rSetTestStatus\xf2\xd7\x02\x16admin.synthetics:write\x92\xd8\x02\x17synthetics.test::update\x82\xd3\xe4\x93\x02*:\x01*\x1a%/synthetics/v202202/tests/{id}/status\x1a.\xcaA\x13grpc.api.kentik.com\xea\xd7\x02\x10admin.synthetics\x90\xd8\x02\x03B\xc3?\x92A\xee>\x12\x84=\n" +
	"\x19Synthetics Monitoring API\x12\x96<# Overview\n" +
	"The Synthetics Monitoring API provides programmatic access to Kentik's [synthetic monitoring system](https://kb.kentik.com/v4/Ma00.htm). The API consists of two endpoints:\n" +
	"| Endpoint | Purpose |\n" +
	"|-----------|---------|\n" +
	"| SyntheticsAdminService | CRUD operations for synthetic tests and agents |\n" +
	"| SyntheticsDataService  | Retrieval of synthetic test results and network traces |\n" +
	"\n" +
	"Both REST endpoint and gRPC RPCs are provided.\n" +
	"### Known Limitations\n" +
	"The API currently does not support the following [Synthetic Test Types](https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetic_Test_Types):\n" +
	"* BGP Monitor tests, which are supported in a [separate API](https://github.com/kentik/api-schema-public/blob/master/proto/kentik/bgp_monitoring/v202205beta1/bgp_monitoring.proto)\n" +
	"* Transaction tests.\n" +
	"\n" +
	"### Additional Public Resources\n" +
	"Kentik community [Python](https://github.com/kentik/community_sdk_python) and [Go](https://github.com/kentik/community_sdk_golang) SDKs provide language-specific support for using this and other Kentik APIs. These SDKs can be also used as example code for development. \n" +
	" A [Terraform provider](https://registry.terraform.io/providers/kentik/kentik-synthetics) is available for configuring tests and agents for Kentik synthetic monitoring.\n" +
	"# Anatomy of a Synthetic Test\n" +
	"Each `Test` consists of one or more tasks. Tasks are executed by monitoring `Agents` that send synthetic traffic (probes) over the network. The API currently supports following tasks:\n" +
	"| Task name  | Purpose |\n" +
	"|------------|---------|\n" +
	"| ping       | Test basic address, and optionally TCP port reachability |\n" +
	"| traceroute (a.k.a. trace)| Discover unidirectional network path |\n" +
	"| http | Perform a simple HTTP/HTTPS request |\n" +
	"| page-load | Use headless Chromium to execute an HTTP/HTTPS request |\n" +
	"| dns | Execute a DNS query|\n" +
	"\n" +
	"The set of tasks executed on behalf of a given test depends on the `type` of that test. The following test types are currently supported by the API:\n" +
	"| API type | Portal (UI) equivalent | Tasks |\n" +
	"|---------------|--------------|-------|\n" +
	"| ip | IP Address | ping, traceroute |\n" +
	"| hostname | Hostname | ping, traceroute |\n" +
	"| network_grid | Network Grid | ping, traceroute |\n" +
	"| agent | Agent-to-Agent | ping, traceroute |\n" +
	"| network_mesh | Network Mesh | ping, traceroute |\n" +
	"| flow | Autonomous Tests (5 variants) | ping, traceroute |\n" +
	"| url | HTTP(S) or API | http, ping (optional), traceroute (optional) |\n" +
	"| page_load | Page Load | page-load, ping (optional), traceroute (optional) |\n" +
	"| dns | DNS Server Monitor | dns |\n" +
	"| dns_grid | DNS Server Grid | dns |\n" +
	"\n" +
	"***Note:*** `ping` and `traceroute` tasks are always run together (never one without the other).\n" +
	"\n" +
	"# Test Attributes and Settings\n" +
	"The attributes of the test object enable configuration of test settings, access to test metadata, and access to runtime state information.\n" +
	"### State and Metadata Attributes\n" +
	" The following table lists the metadata and state attributes:\n" +
	"| Attribute | Access | Purpose |\n" +
	"|-----------|--------|---------|\n" +
	"| id | RO | System-generated unique identifier of the test |\n" +
	"| name | RW | User specified name for the test (need not be unique) |\n" +
	"| type | RO (after creation) | Type of the test (set on creation; read-only thereafter) |\n" +
	"| status | RW | Life-cycle status of the test |\n" +
	"| cdate | RO | Creation timestamp |\n" +
	"| edate | RO | Last-modification timestamp |\n" +
	"| created_by | RO | Identity of the user that created the test |\n" +
	"| last_updated_by | RO | Identity of the latest user to modify the test |\n" +
	"| labels | RW | List of names of labels applied to the test |\n" +
	"\n" +
	"Test configuration is performed via the test's `settings` attribute. Some settings are common to all tests while others are specific to tests of a given type.\n" +
	"### Common Test Settings\n" +
	"The following settings are used for tests of all types:\n" +
	"| Attribute | Purpose | Required |\n" +
	"|-----------|---------|----------|\n" +
	"| agentIds  | IDs of agents to execute tasks for the test | YES |\n" +
	"| period | Test execution interval in seconds | NO (default 60s) |\n" +
	"| family | IP address family. Used only for tests whose type is url or dns. Selects which type of DNS resource is queried for resolving hostname to target address | NO (default IP_FAMILY_DUAL) |\n" +
	"| notificationChannels | List of notification channels for the test | NO (default empty list) |\n" +
	"| healthSettings | A HealthSettings object that configures health settings for this test, which includes metric thresholds that define health status (warning and critical) and trigger associated alarms. | YES |\n" +
	"| ping | A TestPingSettings object that configures the ping task of the test | NO (default depends on test type) |\n" +
	"| trace | A TestTraceSettings object that configures the trace task of the test | NO (default depends on test type) |\n" +
	"| tasks | List of names of the tasks that will be executed for this test | YES |\n" +
	"\n" +
	"### Type-specific Settings\n" +
	"Each test type has its own configuration object that represents the settings for that type. These type-specific objects are referenced by the attributes in `Test.settings`:\n" +
	"| Test type    | Settings attribute | Configuration object |\n" +
	"|--------------|-------------------------|---------------------------|\n" +
	"| ip           | ip                      | IpTest                    |\n" +
	"| hostname     | hostname                | HostnameTest              |\n" +
	"| network_grid | networkGrid             | IpTest                    |\n" +
	"| agent        | agent                   | AgentTest                 |\n" +
	"| network_mesh | networkMesh             | NetworkMeshTest           |\n" +
	"| flow         | flow                    | FlowTest                  |\n" +
	"| url          | url                     | UrlTest                   |\n" +
	"| page_load    | pageLoad                | PageLoadTest              |\n" +
	"| dns          | dns                     | DnsTest                   |\n" +
	"| dns_grid     | dnsGrid                 | DnsTest                   |\n" +
	"\n" +
	"# Test Results\n" +
	"Results of synthetic tests are returned as a sequence of `TestResults` objects. Each such object represents measurements and health evaluation for a single test at specific point in time. Measurements and health evaluation are grouped by agent and by task.\n" +
	"Granularity of timestamps in test results depends on the frequency (period) of the test and on the requested time range. The minimum granularity is 1 minute (even when period < 1 minute). The longer the time range, the lower the granularity.\n" +
	"# Network Traces\n" +
	"Synthetic tests that include the `traceroute` task collect the unidirectional network path from the agent to the target for each agent/target pair. The trace data are returned in the `GetTraceForTestResponse` object. The `paths` attribute of this object contains the collected network path for each agent/target pair and the round-trip time (RTT) to each hop.\n" +
	"Hops in actual network traces are identified by a `nodeId`. The mapping of node IDs to address, name, location, and other attributes of the hop is provided in a map that is stored in the `nodes` attribute of the `GetTraceForTestResponse` object.\n" +
	"# Agents\n" +
	"The Kentik synthetic monitoring system recognizes 2 types of agents:\n" +
	"* **Global** (public): Managed by Kentik and available to every Kentik user. All information about global agents in this API is read-only.\n" +
	"* **Private**: Deployed by each customer and available only to that customer.\n" +
	"To be visible in this API, a private agent must first associate itself with a customer account by contacting the Kentik system (via private API). Once the agent is associated it can be authorized via the API by changing its `status` to `AGENT_STATUS_OK`. For more information about private agent deployment, see [**Synthetic Agent Deployments**](https://kb.kentik.com/v4/Ma01.htm#Ma01-Synthetic_Agent_Deployments).\n" +
	"\"E\n" +
	"\x16Kentik API Engineering\x12+https://github.com/kentik/api-schema-public2\av202202*\x01\x022\x10application/json:\x10application/jsonZD\n" +
	"\x1e\n" +
	"\x05email\x12\x15\b\x02\x1a\x0fX-CH-Auth-Email \x02\n" +
	"\"\n" +
	"\x05token\x12\x19\b\x02\x1a\x13X-CH-Auth-API-Token \x02b\x16\n" +
	"\t\n" +
	"\x05email\x12\x00\n" +
	"\t\n" +
	"\x05token\x12\x00r`\n" +
	"\"Kentik synthetic monitoring system\x12:https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetics_OverviewZOgithub.com/kentik/api-schema-public/gen/go/kentik/synthetics/v202202;syntheticsb\x06proto3"

var (
	file_kentik_synthetics_v202202_synthetics_proto_rawDescOnce sync.Once
	file_kentik_synthetics_v202202_synthetics_proto_rawDescData []byte
)

func file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP() []byte {
	file_kentik_synthetics_v202202_synthetics_proto_rawDescOnce.Do(func() {
		file_kentik_synthetics_v202202_synthetics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kentik_synthetics_v202202_synthetics_proto_rawDesc), len(file_kentik_synthetics_v202202_synthetics_proto_rawDesc)))
	})
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescData
}

var file_kentik_synthetics_v202202_synthetics_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kentik_synthetics_v202202_synthetics_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_kentik_synthetics_v202202_synthetics_proto_goTypes = []any{
	(ImplementType)(0),                 // 0: kentik.synthetics.v202202.ImplementType
	(IPFamily)(0),                      // 1: kentik.synthetics.v202202.IPFamily
	(TestStatus)(0),                    // 2: kentik.synthetics.v202202.TestStatus
	(AgentStatus)(0),                   // 3: kentik.synthetics.v202202.AgentStatus
	(DNSRecord)(0),                     // 4: kentik.synthetics.v202202.DNSRecord
	(*Agent)(nil),                      // 5: kentik.synthetics.v202202.Agent
	(*AgentMetadata)(nil),              // 6: kentik.synthetics.v202202.AgentMetadata
	(*Test)(nil),                       // 7: kentik.synthetics.v202202.Test
	(*TestSettings)(nil),               // 8: kentik.synthetics.v202202.TestSettings
	(*TestPingSettings)(nil),           // 9: kentik.synthetics.v202202.TestPingSettings
	(*TestTraceSettings)(nil),          // 10: kentik.synthetics.v202202.TestTraceSettings
	(*ActivationSettings)(nil),         // 11: kentik.synthetics.v202202.ActivationSettings
	(*HealthSettings)(nil),             // 12: kentik.synthetics.v202202.HealthSettings
	(*HostnameTest)(nil),               // 13: kentik.synthetics.v202202.HostnameTest
	(*IpTest)(nil),                     // 14: kentik.synthetics.v202202.IpTest
	(*AgentTest)(nil),                  // 15: kentik.synthetics.v202202.AgentTest
	(*FlowTest)(nil),                   // 16: kentik.synthetics.v202202.FlowTest
	(*DnsTest)(nil),                    // 17: kentik.synthetics.v202202.DnsTest
	(*UrlTest)(nil),                    // 18: kentik.synthetics.v202202.UrlTest
	(*PageLoadTest)(nil),               // 19: kentik.synthetics.v202202.PageLoadTest
	(*NetworkMeshTest)(nil),            // 20: kentik.synthetics.v202202.NetworkMeshTest
	(*MetricData)(nil),                 // 21: kentik.synthetics.v202202.MetricData
	(*PacketLossData)(nil),             // 22: kentik.synthetics.v202202.PacketLossData
	(*PingResults)(nil),                // 23: kentik.synthetics.v202202.PingResults
	(*HTTPResponseData)(nil),           // 24: kentik.synthetics.v202202.HTTPResponseData
	(*HTTPResults)(nil),                // 25: kentik.synthetics.v202202.HTTPResults
	(*DNSResponseData)(nil),            // 26: kentik.synthetics.v202202.DNSResponseData
	(*DNSResults)(nil),                 // 27: kentik.synthetics.v202202.DNSResults
	(*TaskResults)(nil),                // 28: kentik.synthetics.v202202.TaskResults
	(*AgentResults)(nil),               // 29: kentik.synthetics.v202202.AgentResults
	(*TestResults)(nil),                // 30: kentik.synthetics.v202202.TestResults
	(*Stats)(nil),                      // 31: kentik.synthetics.v202202.Stats
	(*Location)(nil),                   // 32: kentik.synthetics.v202202.Location
	(*NetNode)(nil),                    // 33: kentik.synthetics.v202202.NetNode
	(*TraceHop)(nil),                   // 34: kentik.synthetics.v202202.TraceHop
	(*PathTrace)(nil),                  // 35: kentik.synthetics.v202202.PathTrace
	(*Path)(nil),                       // 36: kentik.synthetics.v202202.Path
	(*GetResultsForTestsRequest)(nil),  // 37: kentik.synthetics.v202202.GetResultsForTestsRequest
	(*GetResultsForTestsResponse)(nil), // 38: kentik.synthetics.v202202.GetResultsForTestsResponse
	(*GetTraceForTestRequest)(nil),     // 39: kentik.synthetics.v202202.GetTraceForTestRequest
	(*GetTraceForTestResponse)(nil),    // 40: kentik.synthetics.v202202.GetTraceForTestResponse
	(*ListAgentsRequest)(nil),          // 41: kentik.synthetics.v202202.ListAgentsRequest
	(*ListAgentsResponse)(nil),         // 42: kentik.synthetics.v202202.ListAgentsResponse
	(*GetAgentRequest)(nil),            // 43: kentik.synthetics.v202202.GetAgentRequest
	(*GetAgentResponse)(nil),           // 44: kentik.synthetics.v202202.GetAgentResponse
	(*UpdateAgentRequest)(nil),         // 45: kentik.synthetics.v202202.UpdateAgentRequest
	(*UpdateAgentResponse)(nil),        // 46: kentik.synthetics.v202202.UpdateAgentResponse
	(*DeleteAgentRequest)(nil),         // 47: kentik.synthetics.v202202.DeleteAgentRequest
	(*DeleteAgentResponse)(nil),        // 48: kentik.synthetics.v202202.DeleteAgentResponse
	(*ListTestsRequest)(nil),           // 49: kentik.synthetics.v202202.ListTestsRequest
	(*ListTestsResponse)(nil),          // 50: kentik.synthetics.v202202.ListTestsResponse
	(*CreateTestRequest)(nil),          // 51: kentik.synthetics.v202202.CreateTestRequest
	(*CreateTestResponse)(nil),         // 52: kentik.synthetics.v202202.CreateTestResponse
	(*GetTestRequest)(nil),             // 53: kentik.synthetics.v202202.GetTestRequest
	(*GetTestResponse)(nil),            // 54: kentik.synthetics.v202202.GetTestResponse
	(*UpdateTestRequest)(nil),          // 55: kentik.synthetics.v202202.UpdateTestRequest
	(*UpdateTestResponse)(nil),         // 56: kentik.synthetics.v202202.UpdateTestResponse
	(*DeleteTestRequest)(nil),          // 57: kentik.synthetics.v202202.DeleteTestRequest
	(*DeleteTestResponse)(nil),         // 58: kentik.synthetics.v202202.DeleteTestResponse
	(*SetTestStatusRequest)(nil),       // 59: kentik.synthetics.v202202.SetTestStatusRequest
	(*SetTestStatusResponse)(nil),      // 60: kentik.synthetics.v202202.SetTestStatusResponse
	(*AgentMetadata_IpValue)(nil),      // 61: kentik.synthetics.v202202.AgentMetadata.IpValue
	nil,                                // 62: kentik.synthetics.v202202.UrlTest.HeadersEntry
	nil,                                // 63: kentik.synthetics.v202202.PageLoadTest.HeadersEntry
	nil,                                // 64: kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntry
	nil,                                // 65: kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry
	(*timestamppb.Timestamp)(nil),      // 66: google.protobuf.Timestamp
	(*v202303.UserInfo)(nil),           // 67: kentik.core.v202303.UserInfo
}
var file_kentik_synthetics_v202202_synthetics_proto_depIdxs = []int32{
	3,  // 0: kentik.synthetics.v202202.Agent.status:type_name -> kentik.synthetics.v202202.AgentStatus
	66, // 1: kentik.synthetics.v202202.Agent.last_authed:type_name -> google.protobuf.Timestamp
	1,  // 2: kentik.synthetics.v202202.Agent.family:type_name -> kentik.synthetics.v202202.IPFamily
	0,  // 3: kentik.synthetics.v202202.Agent.agent_impl:type_name -> kentik.synthetics.v202202.ImplementType
	6,  // 4: kentik.synthetics.v202202.Agent.metadata:type_name -> kentik.synthetics.v202202.AgentMetadata
	61, // 5: kentik.synthetics.v202202.AgentMetadata.private_ipv4_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	61, // 6: kentik.synthetics.v202202.AgentMetadata.public_ipv4_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	61, // 7: kentik.synthetics.v202202.AgentMetadata.private_ipv6_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	61, // 8: kentik.synthetics.v202202.AgentMetadata.public_ipv6_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	2,  // 9: kentik.synthetics.v202202.Test.status:type_name -> kentik.synthetics.v202202.TestStatus
	8,  // 10: kentik.synthetics.v202202.Test.settings:type_name -> kentik.synthetics.v202202.TestSettings
	66, // 11: kentik.synthetics.v202202.Test.cdate:type_name -> google.protobuf.Timestamp
	66, // 12: kentik.synthetics.v202202.Test.edate:type_name -> google.protobuf.Timestamp
	67, // 13: kentik.synthetics.v202202.Test.created_by:type_name -> kentik.core.v202303.UserInfo
	67, // 14: kentik.synthetics.v202202.Test.last_updated_by:type_name -> kentik.core.v202303.UserInfo
	13, // 15: kentik.synthetics.v202202.TestSettings.hostname:type_name -> kentik.synthetics.v202202.HostnameTest
	14, // 16: kentik.synthetics.v202202.TestSettings.ip:type_name -> kentik.synthetics.v202202.IpTest
	15, // 17: kentik.synthetics.v202202.TestSettings.agent:type_name -> kentik.synthetics.v202202.AgentTest
	16, // 18: kentik.synthetics.v202202.TestSettings.flow:type_name -> kentik.synthetics.v202202.FlowTest
	17, // 19: kentik.synthetics.v202202.TestSettings.dns:type_name -> kentik.synthetics.v202202.DnsTest
	18, // 20: kentik.synthetics.v202202.TestSettings.url:type_name -> kentik.synthetics.v202202.UrlTest
	14, // 21: kentik.synthetics.v202202.TestSettings.network_grid:type_name -> kentik.synthetics.v202202.IpTest
	19, // 22: kentik.synthetics.v202202.TestSettings.page_load:type_name -> kentik.synthetics.v202202.PageLoadTest
	17, // 23: kentik.synthetics.v202202.TestSettings.dns_grid:type_name -> kentik.synthetics.v202202.DnsTest
	20, // 24: kentik.synthetics.v202202.TestSettings.network_mesh:type_name -> kentik.synthetics.v202202.NetworkMeshTest
	12, // 25: kentik.synthetics.v202202.TestSettings.health_settings:type_name -> kentik.synthetics.v202202.HealthSettings
	9,  // 26: kentik.synthetics.v202202.TestSettings.ping:type_name -> kentik.synthetics.v202202.TestPingSettings
	10, // 27: kentik.synthetics.v202202.TestSettings.trace:type_name -> kentik.synthetics.v202202.TestTraceSettings
	1,  // 28: kentik.synthetics.v202202.TestSettings.family:type_name -> kentik.synthetics.v202202.IPFamily
	11, // 29: kentik.synthetics.v202202.HealthSettings.activation:type_name -> kentik.synthetics.v202202.ActivationSettings
	4,  // 30: kentik.synthetics.v202202.DnsTest.record_type:type_name -> kentik.synthetics.v202202.DNSRecord
	62, // 31: kentik.synthetics.v202202.UrlTest.headers:type_name -> kentik.synthetics.v202202.UrlTest.HeadersEntry
	63, // 32: kentik.synthetics.v202202.PageLoadTest.headers:type_name -> kentik.synthetics.v202202.PageLoadTest.HeadersEntry
	64, // 33: kentik.synthetics.v202202.PageLoadTest.css_selectors:type_name -> kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntry
	22, // 34: kentik.synthetics.v202202.PingResults.packet_loss:type_name -> kentik.synthetics.v202202.PacketLossData
	21, // 35: kentik.synthetics.v202202.PingResults.latency:type_name -> kentik.synthetics.v202202.MetricData
	21, // 36: kentik.synthetics.v202202.PingResults.jitter:type_name -> kentik.synthetics.v202202.MetricData
	21, // 37: kentik.synthetics.v202202.HTTPResults.latency:type_name -> kentik.synthetics.v202202.MetricData
	24, // 38: kentik.synthetics.v202202.HTTPResults.response:type_name -> kentik.synthetics.v202202.HTTPResponseData
	21, // 39: kentik.synthetics.v202202.DNSResults.latency:type_name -> kentik.synthetics.v202202.MetricData
	26, // 40: kentik.synthetics.v202202.DNSResults.response:type_name -> kentik.synthetics.v202202.DNSResponseData
	23, // 41: kentik.synthetics.v202202.TaskResults.ping:type_name -> kentik.synthetics.v202202.PingResults
	25, // 42: kentik.synthetics.v202202.TaskResults.http:type_name -> kentik.synthetics.v202202.HTTPResults
	27, // 43: kentik.synthetics.v202202.TaskResults.dns:type_name -> kentik.synthetics.v202202.DNSResults
	28, // 44: kentik.synthetics.v202202.AgentResults.tasks:type_name -> kentik.synthetics.v202202.TaskResults
	66, // 45: kentik.synthetics.v202202.TestResults.time:type_name -> google.protobuf.Timestamp
	29, // 46: kentik.synthetics.v202202.TestResults.agents:type_name -> kentik.synthetics.v202202.AgentResults
	32, // 47: kentik.synthetics.v202202.NetNode.location:type_name -> kentik.synthetics.v202202.Location
	34, // 48: kentik.synthetics.v202202.PathTrace.hops:type_name -> kentik.synthetics.v202202.TraceHop
	31, // 49: kentik.synthetics.v202202.Path.hop_count:type_name -> kentik.synthetics.v202202.Stats
	35, // 50: kentik.synthetics.v202202.Path.traces:type_name -> kentik.synthetics.v202202.PathTrace
	66, // 51: kentik.synthetics.v202202.Path.time:type_name -> google.protobuf.Timestamp
	66, // 52: kentik.synthetics.v202202.GetResultsForTestsRequest.start_time:type_name -> google.protobuf.Timestamp
	66, // 53: kentik.synthetics.v202202.GetResultsForTestsRequest.end_time:type_name -> google.protobuf.Timestamp
	30, // 54: kentik.synthetics.v202202.GetResultsForTestsResponse.results:type_name -> kentik.synthetics.v202202.TestResults
	66, // 55: kentik.synthetics.v202202.GetTraceForTestRequest.start_time:type_name -> google.protobuf.Timestamp
	66, // 56: kentik.synthetics.v202202.GetTraceForTestRequest.end_time:type_name -> google.protobuf.Timestamp
	65, // 57: kentik.synthetics.v202202.GetTraceForTestResponse.nodes:type_name -> kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry
	36, // 58: kentik.synthetics.v202202.GetTraceForTestResponse.paths:type_name -> kentik.synthetics.v202202.Path
	5,  // 59: kentik.synthetics.v202202.ListAgentsResponse.agents:type_name -> kentik.synthetics.v202202.Agent
	5,  // 60: kentik.synthetics.v202202.GetAgentResponse.agent:type_name -> kentik.synthetics.v202202.Agent
	5,  // 61: kentik.synthetics.v202202.UpdateAgentRequest.agent:type_name -> kentik.synthetics.v202202.Agent
	5,  // 62: kentik.synthetics.v202202.UpdateAgentResponse.agent:type_name -> kentik.synthetics.v202202.Agent
	7,  // 63: kentik.synthetics.v202202.ListTestsResponse.tests:type_name -> kentik.synthetics.v202202.Test
	7,  // 64: kentik.synthetics.v202202.CreateTestRequest.test:type_name -> kentik.synthetics.v202202.Test
	7,  // 65: kentik.synthetics.v202202.CreateTestResponse.test:type_name -> kentik.synthetics.v202202.Test
	7,  // 66: kentik.synthetics.v202202.GetTestResponse.test:type_name -> kentik.synthetics.v202202.Test
	7,  // 67: kentik.synthetics.v202202.UpdateTestRequest.test:type_name -> kentik.synthetics.v202202.Test
	7,  // 68: kentik.synthetics.v202202.UpdateTestResponse.test:type_name -> kentik.synthetics.v202202.Test
	2,  // 69: kentik.synthetics.v202202.SetTestStatusRequest.status:type_name -> kentik.synthetics.v202202.TestStatus
	33, // 70: kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry.value:type_name -> kentik.synthetics.v202202.NetNode
	37, // 71: kentik.synthetics.v202202.SyntheticsDataService.GetResultsForTests:input_type -> kentik.synthetics.v202202.GetResultsForTestsRequest
	39, // 72: kentik.synthetics.v202202.SyntheticsDataService.GetTraceForTest:input_type -> kentik.synthetics.v202202.GetTraceForTestRequest
	41, // 73: kentik.synthetics.v202202.SyntheticsAdminService.ListAgents:input_type -> kentik.synthetics.v202202.ListAgentsRequest
	43, // 74: kentik.synthetics.v202202.SyntheticsAdminService.GetAgent:input_type -> kentik.synthetics.v202202.GetAgentRequest
	45, // 75: kentik.synthetics.v202202.SyntheticsAdminService.UpdateAgent:input_type -> kentik.synthetics.v202202.UpdateAgentRequest
	47, // 76: kentik.synthetics.v202202.SyntheticsAdminService.DeleteAgent:input_type -> kentik.synthetics.v202202.DeleteAgentRequest
	49, // 77: kentik.synthetics.v202202.SyntheticsAdminService.ListTests:input_type -> kentik.synthetics.v202202.ListTestsRequest
	51, // 78: kentik.synthetics.v202202.SyntheticsAdminService.CreateTest:input_type -> kentik.synthetics.v202202.CreateTestRequest
	53, // 79: kentik.synthetics.v202202.SyntheticsAdminService.GetTest:input_type -> kentik.synthetics.v202202.GetTestRequest
	55, // 80: kentik.synthetics.v202202.SyntheticsAdminService.UpdateTest:input_type -> kentik.synthetics.v202202.UpdateTestRequest
	57, // 81: kentik.synthetics.v202202.SyntheticsAdminService.DeleteTest:input_type -> kentik.synthetics.v202202.DeleteTestRequest
	59, // 82: kentik.synthetics.v202202.SyntheticsAdminService.SetTestStatus:input_type -> kentik.synthetics.v202202.SetTestStatusRequest
	38, // 83: kentik.synthetics.v202202.SyntheticsDataService.GetResultsForTests:output_type -> kentik.synthetics.v202202.GetResultsForTestsResponse
	40, // 84: kentik.synthetics.v202202.SyntheticsDataService.GetTraceForTest:output_type -> kentik.synthetics.v202202.GetTraceForTestResponse
	42, // 85: kentik.synthetics.v202202.SyntheticsAdminService.ListAgents:output_type -> kentik.synthetics.v202202.ListAgentsResponse
	44, // 86: kentik.synthetics.v202202.SyntheticsAdminService.GetAgent:output_type -> kentik.synthetics.v202202.GetAgentResponse
	46, // 87: kentik.synthetics.v202202.SyntheticsAdminService.UpdateAgent:output_type -> kentik.synthetics.v202202.UpdateAgentResponse
	48, // 88: kentik.synthetics.v202202.SyntheticsAdminService.DeleteAgent:output_type -> kentik.synthetics.v202202.DeleteAgentResponse
	50, // 89: kentik.synthetics.v202202.SyntheticsAdminService.ListTests:output_type -> kentik.synthetics.v202202.ListTestsResponse
	52, // 90: kentik.synthetics.v202202.SyntheticsAdminService.CreateTest:output_type -> kentik.synthetics.v202202.CreateTestResponse
	54, // 91: kentik.synthetics.v202202.SyntheticsAdminService.GetTest:output_type -> kentik.synthetics.v202202.GetTestResponse
	56, // 92: kentik.synthetics.v202202.SyntheticsAdminService.UpdateTest:output_type -> kentik.synthetics.v202202.UpdateTestResponse
	58, // 93: kentik.synthetics.v202202.SyntheticsAdminService.DeleteTest:output_type -> kentik.synthetics.v202202.DeleteTestResponse
	60, // 94: kentik.synthetics.v202202.SyntheticsAdminService.SetTestStatus:output_type -> kentik.synthetics.v202202.SetTestStatusResponse
	83, // [83:95] is the sub-list for method output_type
	71, // [71:83] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_kentik_synthetics_v202202_synthetics_proto_init() }
func file_kentik_synthetics_v202202_synthetics_proto_init() {
	if File_kentik_synthetics_v202202_synthetics_proto != nil {
		return
	}
	file_kentik_synthetics_v202202_synthetics_proto_msgTypes[3].OneofWrappers = []any{
		(*TestSettings_Hostname)(nil),
		(*TestSettings_Ip)(nil),
		(*TestSettings_Agent)(nil),
		(*TestSettings_Flow)(nil),
		(*TestSettings_Dns)(nil),
		(*TestSettings_Url)(nil),
		(*TestSettings_NetworkGrid)(nil),
		(*TestSettings_PageLoad)(nil),
		(*TestSettings_DnsGrid)(nil),
		(*TestSettings_NetworkMesh)(nil),
	}
	file_kentik_synthetics_v202202_synthetics_proto_msgTypes[23].OneofWrappers = []any{
		(*TaskResults_Ping)(nil),
		(*TaskResults_Http)(nil),
		(*TaskResults_Dns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kentik_synthetics_v202202_synthetics_proto_rawDesc), len(file_kentik_synthetics_v202202_synthetics_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kentik_synthetics_v202202_synthetics_proto_goTypes,
		DependencyIndexes: file_kentik_synthetics_v202202_synthetics_proto_depIdxs,
		EnumInfos:         file_kentik_synthetics_v202202_synthetics_proto_enumTypes,
		MessageInfos:      file_kentik_synthetics_v202202_synthetics_proto_msgTypes,
	}.Build()
	File_kentik_synthetics_v202202_synthetics_proto = out.File
	file_kentik_synthetics_v202202_synthetics_proto_goTypes = nil
	file_kentik_synthetics_v202202_synthetics_proto_depIdxs = nil
}
