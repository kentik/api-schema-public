// Synthetics data and admin APIs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/synthetics/v202202/synthetics.proto

package synthetics

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Agent implementation type determines capabilities of agent.
type ImplementType int32

const (
	ImplementType_IMPLEMENT_TYPE_UNSPECIFIED ImplementType = 0
	// ksynth agent, a.k.a network agent (implemented in Rust) capable of running all tasks except for page-load
	ImplementType_IMPLEMENT_TYPE_RUST ImplementType = 1
	// ksynth-agent, a.k.a. app agent (implemented in NodeJS) capable of running all tasks
	ImplementType_IMPLEMENT_TYPE_NODE ImplementType = 2
)

// Enum value maps for ImplementType.
var (
	ImplementType_name = map[int32]string{
		0: "IMPLEMENT_TYPE_UNSPECIFIED",
		1: "IMPLEMENT_TYPE_RUST",
		2: "IMPLEMENT_TYPE_NODE",
	}
	ImplementType_value = map[string]int32{
		"IMPLEMENT_TYPE_UNSPECIFIED": 0,
		"IMPLEMENT_TYPE_RUST":        1,
		"IMPLEMENT_TYPE_NODE":        2,
	}
)

func (x ImplementType) Enum() *ImplementType {
	p := new(ImplementType)
	*p = x
	return p
}

func (x ImplementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplementType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[0].Descriptor()
}

func (ImplementType) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[0]
}

func (x ImplementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplementType.Descriptor instead.
func (ImplementType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{0}
}

// Supported IP address family
type IPFamily int32

const (
	// Invalid value.
	IPFamily_IP_FAMILY_UNSPECIFIED IPFamily = 0
	// IPv4 only
	IPFamily_IP_FAMILY_V4 IPFamily = 1
	// IPv6 only
	IPFamily_IP_FAMILY_V6 IPFamily = 2
	// IPv4 and IPv6 supported
	IPFamily_IP_FAMILY_DUAL IPFamily = 3
)

// Enum value maps for IPFamily.
var (
	IPFamily_name = map[int32]string{
		0: "IP_FAMILY_UNSPECIFIED",
		1: "IP_FAMILY_V4",
		2: "IP_FAMILY_V6",
		3: "IP_FAMILY_DUAL",
	}
	IPFamily_value = map[string]int32{
		"IP_FAMILY_UNSPECIFIED": 0,
		"IP_FAMILY_V4":          1,
		"IP_FAMILY_V6":          2,
		"IP_FAMILY_DUAL":        3,
	}
)

func (x IPFamily) Enum() *IPFamily {
	p := new(IPFamily)
	*p = x
	return p
}

func (x IPFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[1].Descriptor()
}

func (IPFamily) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[1]
}

func (x IPFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPFamily.Descriptor instead.
func (IPFamily) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{1}
}

// Operational status of a test
type TestStatus int32

const (
	// Invalid value.
	TestStatus_TEST_STATUS_UNSPECIFIED TestStatus = 0
	// Test is active.
	TestStatus_TEST_STATUS_ACTIVE TestStatus = 1
	// Test is paused.
	TestStatus_TEST_STATUS_PAUSED TestStatus = 2
	// Test is deleted. Not user settable.
	TestStatus_TEST_STATUS_DELETED TestStatus = 3
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "TEST_STATUS_ACTIVE",
		2: "TEST_STATUS_PAUSED",
		3: "TEST_STATUS_DELETED",
	}
	TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"TEST_STATUS_ACTIVE":      1,
		"TEST_STATUS_PAUSED":      2,
		"TEST_STATUS_DELETED":     3,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[2].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[2]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{2}
}

// Operational status of an agent
type AgentStatus int32

const (
	// Invalid value.
	AgentStatus_AGENT_STATUS_UNSPECIFIED AgentStatus = 0
	// Agent is ready to accept tests
	AgentStatus_AGENT_STATUS_OK AgentStatus = 1
	// Agent is waiting for authorization
	AgentStatus_AGENT_STATUS_WAIT AgentStatus = 2
	// Agent was deleted - not user settable
	AgentStatus_AGENT_STATUS_DELETED AgentStatus = 3
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0: "AGENT_STATUS_UNSPECIFIED",
		1: "AGENT_STATUS_OK",
		2: "AGENT_STATUS_WAIT",
		3: "AGENT_STATUS_DELETED",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNSPECIFIED": 0,
		"AGENT_STATUS_OK":          1,
		"AGENT_STATUS_WAIT":        2,
		"AGENT_STATUS_DELETED":     3,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[3].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[3]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{3}
}

// DNS record type
type DNSRecord int32

const (
	// Invalid value
	DNSRecord_DNS_RECORD_UNSPECIFIED DNSRecord = 0
	// name to IPv4 address(es) mapping
	DNSRecord_DNS_RECORD_A DNSRecord = 1
	// name to IPv6 address(es) mapping
	DNSRecord_DNS_RECORD_AAAA DNSRecord = 2
	// alternative resource name
	DNSRecord_DNS_RECORD_CNAME DNSRecord = 3
	// alternative resource set name
	DNSRecord_DNS_RECORD_DNAME DNSRecord = 4
	// domain to name server mapping
	DNSRecord_DNS_RECORD_NS DNSRecord = 5
	// SMTP mail server record
	DNSRecord_DNS_RECORD_MX DNSRecord = 6
	// IPv4/6 address to name mapping
	DNSRecord_DNS_RECORD_PTR DNSRecord = 7
	// domain meta-data
	DNSRecord_DNS_RECORD_SOA DNSRecord = 8
)

// Enum value maps for DNSRecord.
var (
	DNSRecord_name = map[int32]string{
		0: "DNS_RECORD_UNSPECIFIED",
		1: "DNS_RECORD_A",
		2: "DNS_RECORD_AAAA",
		3: "DNS_RECORD_CNAME",
		4: "DNS_RECORD_DNAME",
		5: "DNS_RECORD_NS",
		6: "DNS_RECORD_MX",
		7: "DNS_RECORD_PTR",
		8: "DNS_RECORD_SOA",
	}
	DNSRecord_value = map[string]int32{
		"DNS_RECORD_UNSPECIFIED": 0,
		"DNS_RECORD_A":           1,
		"DNS_RECORD_AAAA":        2,
		"DNS_RECORD_CNAME":       3,
		"DNS_RECORD_DNAME":       4,
		"DNS_RECORD_NS":          5,
		"DNS_RECORD_MX":          6,
		"DNS_RECORD_PTR":         7,
		"DNS_RECORD_SOA":         8,
	}
)

func (x DNSRecord) Enum() *DNSRecord {
	p := new(DNSRecord)
	*p = x
	return p
}

func (x DNSRecord) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSRecord) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202202_synthetics_proto_enumTypes[4].Descriptor()
}

func (DNSRecord) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202202_synthetics_proto_enumTypes[4]
}

func (x DNSRecord) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSRecord.Descriptor instead.
func (DNSRecord) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{4}
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteName string      `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Status   AgentStatus `protobuf:"varint,3,opt,name=status,proto3,enum=kentik.synthetics.v202202.AgentStatus" json:"status,omitempty"`
	Alias    string      `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Type     string      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Os       string      `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	// Deprecated: Do not use.
	Ip         string                 `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat        float64                `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`
	Long       float64                `protobuf:"fixed64,9,opt,name=long,proto3" json:"long,omitempty"`
	LastAuthed *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_authed,json=lastAuthed,proto3" json:"last_authed,omitempty"`
	Family     IPFamily               `protobuf:"varint,11,opt,name=family,proto3,enum=kentik.synthetics.v202202.IPFamily" json:"family,omitempty"`
	Asn        uint32                 `protobuf:"varint,12,opt,name=asn,proto3" json:"asn,omitempty"`
	SiteId     string                 `protobuf:"bytes,13,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	Version    string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	City       string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	Region     string                 `protobuf:"bytes,17,opt,name=region,proto3" json:"region,omitempty"`
	Country    string                 `protobuf:"bytes,18,opt,name=country,proto3" json:"country,omitempty"`
	TestIds    []string               `protobuf:"bytes,19,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	// Deprecated: Do not use.
	LocalIp       string         `protobuf:"bytes,20,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	CloudRegion   string         `protobuf:"bytes,22,opt,name=cloud_region,json=cloudRegion,proto3" json:"cloud_region,omitempty"`
	CloudProvider string         `protobuf:"bytes,23,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	AgentImpl     ImplementType  `protobuf:"varint,24,opt,name=agent_impl,json=agentImpl,proto3,enum=kentik.synthetics.v202202.ImplementType" json:"agent_impl,omitempty"`
	Labels        []string       `protobuf:"bytes,25,rep,name=labels,proto3" json:"labels,omitempty"`
	Metadata      *AgentMetadata `protobuf:"bytes,26,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{0}
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Agent) GetStatus() AgentStatus {
	if x != nil {
		return x.Status
	}
	return AgentStatus_AGENT_STATUS_UNSPECIFIED
}

func (x *Agent) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Agent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

// Deprecated: Do not use.
func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Agent) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Agent) GetLastAuthed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAuthed
	}
	return nil
}

func (x *Agent) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *Agent) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Agent) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Agent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Agent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Agent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Agent) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

// Deprecated: Do not use.
func (x *Agent) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *Agent) GetCloudRegion() string {
	if x != nil {
		return x.CloudRegion
	}
	return ""
}

func (x *Agent) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Agent) GetAgentImpl() ImplementType {
	if x != nil {
		return x.AgentImpl
	}
	return ImplementType_IMPLEMENT_TYPE_UNSPECIFIED
}

func (x *Agent) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Agent) GetMetadata() *AgentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AgentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateIpv4Addresses []*AgentMetadata_IpValue `protobuf:"bytes,1,rep,name=private_ipv4_addresses,json=privateIpv4Addresses,proto3" json:"private_ipv4_addresses,omitempty"`
	PublicIpv4Addresses  []*AgentMetadata_IpValue `protobuf:"bytes,2,rep,name=public_ipv4_addresses,json=publicIpv4Addresses,proto3" json:"public_ipv4_addresses,omitempty"`
	PrivateIpv6Addresses []*AgentMetadata_IpValue `protobuf:"bytes,3,rep,name=private_ipv6_addresses,json=privateIpv6Addresses,proto3" json:"private_ipv6_addresses,omitempty"`
	PublicIpv6Addresses  []*AgentMetadata_IpValue `protobuf:"bytes,4,rep,name=public_ipv6_addresses,json=publicIpv6Addresses,proto3" json:"public_ipv6_addresses,omitempty"`
}

func (x *AgentMetadata) Reset() {
	*x = AgentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadata) ProtoMessage() {}

func (x *AgentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadata.ProtoReflect.Descriptor instead.
func (*AgentMetadata) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{1}
}

func (x *AgentMetadata) GetPrivateIpv4Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PrivateIpv4Addresses
	}
	return nil
}

func (x *AgentMetadata) GetPublicIpv4Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PublicIpv4Addresses
	}
	return nil
}

func (x *AgentMetadata) GetPrivateIpv6Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PrivateIpv6Addresses
	}
	return nil
}

func (x *AgentMetadata) GetPublicIpv6Addresses() []*AgentMetadata_IpValue {
	if x != nil {
		return x.PublicIpv6Addresses
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status        TestStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=kentik.synthetics.v202202.TestStatus" json:"status,omitempty"`
	Settings      *TestSettings          `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=edate,proto3" json:"edate,omitempty"`
	CreatedBy     *UserInfo              `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedBy *UserInfo              `protobuf:"bytes,10,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	Labels        []string               `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{3}
}

func (x *Test) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Test) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *Test) GetSettings() *TestSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Test) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Test) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Test) GetCreatedBy() *UserInfo {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Test) GetLastUpdatedBy() *UserInfo {
	if x != nil {
		return x.LastUpdatedBy
	}
	return nil
}

func (x *Test) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Synthetic test configuration
type TestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Definition:
	//	*TestSettings_Hostname
	//	*TestSettings_Ip
	//	*TestSettings_Agent
	//	*TestSettings_Flow
	//	*TestSettings_Dns
	//	*TestSettings_Url
	//	*TestSettings_NetworkGrid
	//	*TestSettings_PageLoad
	//	*TestSettings_DnsGrid
	//	*TestSettings_NetworkMesh
	Definition           isTestSettings_Definition `protobuf_oneof:"definition"`
	AgentIds             []string                  `protobuf:"bytes,10,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Tasks                []string                  `protobuf:"bytes,11,rep,name=tasks,proto3" json:"tasks,omitempty"`
	HealthSettings       *HealthSettings           `protobuf:"bytes,12,opt,name=health_settings,json=healthSettings,proto3" json:"health_settings,omitempty"`
	Ping                 *TestPingSettings         `protobuf:"bytes,13,opt,name=ping,proto3" json:"ping,omitempty"`
	Trace                *TestTraceSettings        `protobuf:"bytes,14,opt,name=trace,proto3" json:"trace,omitempty"`
	Period               uint32                    `protobuf:"varint,15,opt,name=period,proto3" json:"period,omitempty"`
	Family               IPFamily                  `protobuf:"varint,16,opt,name=family,proto3,enum=kentik.synthetics.v202202.IPFamily" json:"family,omitempty"`
	NotificationChannels []string                  `protobuf:"bytes,17,rep,name=notification_channels,json=notificationChannels,proto3" json:"notification_channels,omitempty"`
}

func (x *TestSettings) Reset() {
	*x = TestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSettings) ProtoMessage() {}

func (x *TestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSettings.ProtoReflect.Descriptor instead.
func (*TestSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{4}
}

func (m *TestSettings) GetDefinition() isTestSettings_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *TestSettings) GetHostname() *HostnameTest {
	if x, ok := x.GetDefinition().(*TestSettings_Hostname); ok {
		return x.Hostname
	}
	return nil
}

func (x *TestSettings) GetIp() *IpTest {
	if x, ok := x.GetDefinition().(*TestSettings_Ip); ok {
		return x.Ip
	}
	return nil
}

func (x *TestSettings) GetAgent() *AgentTest {
	if x, ok := x.GetDefinition().(*TestSettings_Agent); ok {
		return x.Agent
	}
	return nil
}

func (x *TestSettings) GetFlow() *FlowTest {
	if x, ok := x.GetDefinition().(*TestSettings_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *TestSettings) GetDns() *DnsTest {
	if x, ok := x.GetDefinition().(*TestSettings_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *TestSettings) GetUrl() *UrlTest {
	if x, ok := x.GetDefinition().(*TestSettings_Url); ok {
		return x.Url
	}
	return nil
}

func (x *TestSettings) GetNetworkGrid() *IpTest {
	if x, ok := x.GetDefinition().(*TestSettings_NetworkGrid); ok {
		return x.NetworkGrid
	}
	return nil
}

func (x *TestSettings) GetPageLoad() *PageLoadTest {
	if x, ok := x.GetDefinition().(*TestSettings_PageLoad); ok {
		return x.PageLoad
	}
	return nil
}

func (x *TestSettings) GetDnsGrid() *DnsTest {
	if x, ok := x.GetDefinition().(*TestSettings_DnsGrid); ok {
		return x.DnsGrid
	}
	return nil
}

func (x *TestSettings) GetNetworkMesh() *NetworkMeshTest {
	if x, ok := x.GetDefinition().(*TestSettings_NetworkMesh); ok {
		return x.NetworkMesh
	}
	return nil
}

func (x *TestSettings) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TestSettings) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestSettings) GetHealthSettings() *HealthSettings {
	if x != nil {
		return x.HealthSettings
	}
	return nil
}

func (x *TestSettings) GetPing() *TestPingSettings {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *TestSettings) GetTrace() *TestTraceSettings {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TestSettings) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TestSettings) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_IP_FAMILY_UNSPECIFIED
}

func (x *TestSettings) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

type isTestSettings_Definition interface {
	isTestSettings_Definition()
}

type TestSettings_Hostname struct {
	Hostname *HostnameTest `protobuf:"bytes,1,opt,name=hostname,proto3,oneof"`
}

type TestSettings_Ip struct {
	Ip *IpTest `protobuf:"bytes,2,opt,name=ip,proto3,oneof"`
}

type TestSettings_Agent struct {
	Agent *AgentTest `protobuf:"bytes,3,opt,name=agent,proto3,oneof"`
}

type TestSettings_Flow struct {
	Flow *FlowTest `protobuf:"bytes,4,opt,name=flow,proto3,oneof"`
}

type TestSettings_Dns struct {
	Dns *DnsTest `protobuf:"bytes,5,opt,name=dns,proto3,oneof"`
}

type TestSettings_Url struct {
	Url *UrlTest `protobuf:"bytes,6,opt,name=url,proto3,oneof"`
}

type TestSettings_NetworkGrid struct {
	NetworkGrid *IpTest `protobuf:"bytes,7,opt,name=network_grid,json=networkGrid,proto3,oneof"`
}

type TestSettings_PageLoad struct {
	PageLoad *PageLoadTest `protobuf:"bytes,8,opt,name=page_load,json=pageLoad,proto3,oneof"`
}

type TestSettings_DnsGrid struct {
	DnsGrid *DnsTest `protobuf:"bytes,9,opt,name=dns_grid,json=dnsGrid,proto3,oneof"`
}

type TestSettings_NetworkMesh struct {
	NetworkMesh *NetworkMeshTest `protobuf:"bytes,18,opt,name=network_mesh,json=networkMesh,proto3,oneof"`
}

func (*TestSettings_Hostname) isTestSettings_Definition() {}

func (*TestSettings_Ip) isTestSettings_Definition() {}

func (*TestSettings_Agent) isTestSettings_Definition() {}

func (*TestSettings_Flow) isTestSettings_Definition() {}

func (*TestSettings_Dns) isTestSettings_Definition() {}

func (*TestSettings_Url) isTestSettings_Definition() {}

func (*TestSettings_NetworkGrid) isTestSettings_Definition() {}

func (*TestSettings_PageLoad) isTestSettings_Definition() {}

func (*TestSettings_DnsGrid) isTestSettings_Definition() {}

func (*TestSettings_NetworkMesh) isTestSettings_Definition() {}

type TestPingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Protocol string  `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     uint32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Timeout  uint32  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Delay    float32 `protobuf:"fixed32,5,opt,name=delay,proto3" json:"delay,omitempty"`
	Dscp     uint32  `protobuf:"varint,6,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *TestPingSettings) Reset() {
	*x = TestPingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPingSettings) ProtoMessage() {}

func (x *TestPingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPingSettings.ProtoReflect.Descriptor instead.
func (*TestPingSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{5}
}

func (x *TestPingSettings) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestPingSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestPingSettings) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestPingSettings) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TestPingSettings) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TestPingSettings) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

type TestTraceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Protocol string  `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     uint32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Timeout  uint32  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Limit    uint32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Delay    float32 `protobuf:"fixed32,6,opt,name=delay,proto3" json:"delay,omitempty"`
	Dscp     uint32  `protobuf:"varint,7,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *TestTraceSettings) Reset() {
	*x = TestTraceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTraceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTraceSettings) ProtoMessage() {}

func (x *TestTraceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTraceSettings.ProtoReflect.Descriptor instead.
func (*TestTraceSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{6}
}

func (x *TestTraceSettings) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestTraceSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestTraceSettings) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestTraceSettings) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TestTraceSettings) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TestTraceSettings) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TestTraceSettings) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

type ActivationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GracePeriod string `protobuf:"bytes,1,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	TimeUnit    string `protobuf:"bytes,2,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	TimeWindow  string `protobuf:"bytes,3,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
	Times       string `protobuf:"bytes,4,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *ActivationSettings) Reset() {
	*x = ActivationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationSettings) ProtoMessage() {}

func (x *ActivationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationSettings.ProtoReflect.Descriptor instead.
func (*ActivationSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{7}
}

func (x *ActivationSettings) GetGracePeriod() string {
	if x != nil {
		return x.GracePeriod
	}
	return ""
}

func (x *ActivationSettings) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *ActivationSettings) GetTimeWindow() string {
	if x != nil {
		return x.TimeWindow
	}
	return ""
}

func (x *ActivationSettings) GetTimes() string {
	if x != nil {
		return x.Times
	}
	return ""
}

type HealthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyCritical           float32             `protobuf:"fixed32,1,opt,name=latency_critical,json=latencyCritical,proto3" json:"latency_critical,omitempty"`
	LatencyWarning            float32             `protobuf:"fixed32,2,opt,name=latency_warning,json=latencyWarning,proto3" json:"latency_warning,omitempty"`
	PacketLossCritical        float32             `protobuf:"fixed32,3,opt,name=packet_loss_critical,json=packetLossCritical,proto3" json:"packet_loss_critical,omitempty"`
	PacketLossWarning         float32             `protobuf:"fixed32,4,opt,name=packet_loss_warning,json=packetLossWarning,proto3" json:"packet_loss_warning,omitempty"`
	JitterCritical            float32             `protobuf:"fixed32,5,opt,name=jitter_critical,json=jitterCritical,proto3" json:"jitter_critical,omitempty"`
	JitterWarning             float32             `protobuf:"fixed32,6,opt,name=jitter_warning,json=jitterWarning,proto3" json:"jitter_warning,omitempty"`
	HttpLatencyCritical       float32             `protobuf:"fixed32,7,opt,name=http_latency_critical,json=httpLatencyCritical,proto3" json:"http_latency_critical,omitempty"`
	HttpLatencyWarning        float32             `protobuf:"fixed32,8,opt,name=http_latency_warning,json=httpLatencyWarning,proto3" json:"http_latency_warning,omitempty"`
	HttpValidCodes            []uint32            `protobuf:"varint,9,rep,packed,name=http_valid_codes,json=httpValidCodes,proto3" json:"http_valid_codes,omitempty"`
	DnsValidCodes             []uint32            `protobuf:"varint,10,rep,packed,name=dns_valid_codes,json=dnsValidCodes,proto3" json:"dns_valid_codes,omitempty"`
	LatencyCriticalStddev     float32             `protobuf:"fixed32,11,opt,name=latency_critical_stddev,json=latencyCriticalStddev,proto3" json:"latency_critical_stddev,omitempty"`
	LatencyWarningStddev      float32             `protobuf:"fixed32,12,opt,name=latency_warning_stddev,json=latencyWarningStddev,proto3" json:"latency_warning_stddev,omitempty"`
	JitterCriticalStddev      float32             `protobuf:"fixed32,13,opt,name=jitter_critical_stddev,json=jitterCriticalStddev,proto3" json:"jitter_critical_stddev,omitempty"`
	JitterWarningStddev       float32             `protobuf:"fixed32,14,opt,name=jitter_warning_stddev,json=jitterWarningStddev,proto3" json:"jitter_warning_stddev,omitempty"`
	HttpLatencyCriticalStddev float32             `protobuf:"fixed32,15,opt,name=http_latency_critical_stddev,json=httpLatencyCriticalStddev,proto3" json:"http_latency_critical_stddev,omitempty"`
	HttpLatencyWarningStddev  float32             `protobuf:"fixed32,16,opt,name=http_latency_warning_stddev,json=httpLatencyWarningStddev,proto3" json:"http_latency_warning_stddev,omitempty"`
	UnhealthySubtestThreshold uint32              `protobuf:"varint,17,opt,name=unhealthy_subtest_threshold,json=unhealthySubtestThreshold,proto3" json:"unhealthy_subtest_threshold,omitempty"`
	Activation                *ActivationSettings `protobuf:"bytes,18,opt,name=activation,proto3" json:"activation,omitempty"`
	CertExpiryWarning         uint32              `protobuf:"varint,19,opt,name=cert_expiry_warning,json=certExpiryWarning,proto3" json:"cert_expiry_warning,omitempty"`
	CertExpiryCritical        uint32              `protobuf:"varint,20,opt,name=cert_expiry_critical,json=certExpiryCritical,proto3" json:"cert_expiry_critical,omitempty"`
	DnsValidIps               string              `protobuf:"bytes,21,opt,name=dns_valid_ips,json=dnsValidIps,proto3" json:"dns_valid_ips,omitempty"`
}

func (x *HealthSettings) Reset() {
	*x = HealthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthSettings) ProtoMessage() {}

func (x *HealthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthSettings.ProtoReflect.Descriptor instead.
func (*HealthSettings) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{8}
}

func (x *HealthSettings) GetLatencyCritical() float32 {
	if x != nil {
		return x.LatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarning() float32 {
	if x != nil {
		return x.LatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetPacketLossCritical() float32 {
	if x != nil {
		return x.PacketLossCritical
	}
	return 0
}

func (x *HealthSettings) GetPacketLossWarning() float32 {
	if x != nil {
		return x.PacketLossWarning
	}
	return 0
}

func (x *HealthSettings) GetJitterCritical() float32 {
	if x != nil {
		return x.JitterCritical
	}
	return 0
}

func (x *HealthSettings) GetJitterWarning() float32 {
	if x != nil {
		return x.JitterWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCritical() float32 {
	if x != nil {
		return x.HttpLatencyCritical
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarning() float32 {
	if x != nil {
		return x.HttpLatencyWarning
	}
	return 0
}

func (x *HealthSettings) GetHttpValidCodes() []uint32 {
	if x != nil {
		return x.HttpValidCodes
	}
	return nil
}

func (x *HealthSettings) GetDnsValidCodes() []uint32 {
	if x != nil {
		return x.DnsValidCodes
	}
	return nil
}

func (x *HealthSettings) GetLatencyCriticalStddev() float32 {
	if x != nil {
		return x.LatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetLatencyWarningStddev() float32 {
	if x != nil {
		return x.LatencyWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetJitterCriticalStddev() float32 {
	if x != nil {
		return x.JitterCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetJitterWarningStddev() float32 {
	if x != nil {
		return x.JitterWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyCriticalStddev() float32 {
	if x != nil {
		return x.HttpLatencyCriticalStddev
	}
	return 0
}

func (x *HealthSettings) GetHttpLatencyWarningStddev() float32 {
	if x != nil {
		return x.HttpLatencyWarningStddev
	}
	return 0
}

func (x *HealthSettings) GetUnhealthySubtestThreshold() uint32 {
	if x != nil {
		return x.UnhealthySubtestThreshold
	}
	return 0
}

func (x *HealthSettings) GetActivation() *ActivationSettings {
	if x != nil {
		return x.Activation
	}
	return nil
}

func (x *HealthSettings) GetCertExpiryWarning() uint32 {
	if x != nil {
		return x.CertExpiryWarning
	}
	return 0
}

func (x *HealthSettings) GetCertExpiryCritical() uint32 {
	if x != nil {
		return x.CertExpiryCritical
	}
	return 0
}

func (x *HealthSettings) GetDnsValidIps() string {
	if x != nil {
		return x.DnsValidIps
	}
	return ""
}

type HostnameTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *HostnameTest) Reset() {
	*x = HostnameTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnameTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameTest) ProtoMessage() {}

func (x *HostnameTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameTest.ProtoReflect.Descriptor instead.
func (*HostnameTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{9}
}

func (x *HostnameTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type IpTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []string `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *IpTest) Reset() {
	*x = IpTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTest) ProtoMessage() {}

func (x *IpTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTest.ProtoReflect.Descriptor instead.
func (*IpTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{10}
}

func (x *IpTest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type AgentTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target     string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	UseLocalIp bool   `protobuf:"varint,2,opt,name=use_local_ip,json=useLocalIp,proto3" json:"use_local_ip,omitempty"`
}

func (x *AgentTest) Reset() {
	*x = AgentTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentTest) ProtoMessage() {}

func (x *AgentTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentTest.ProtoReflect.Descriptor instead.
func (*AgentTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{11}
}

func (x *AgentTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AgentTest) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

type FlowTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                      string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetRefreshIntervalMillis uint32 `protobuf:"varint,2,opt,name=target_refresh_interval_millis,json=targetRefreshIntervalMillis,proto3" json:"target_refresh_interval_millis,omitempty"`
	MaxProviders                uint32 `protobuf:"varint,3,opt,name=max_providers,json=maxProviders,proto3" json:"max_providers,omitempty"`
	MaxIpTargets                uint32 `protobuf:"varint,4,opt,name=max_ip_targets,json=maxIpTargets,proto3" json:"max_ip_targets,omitempty"`
	Type                        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	InetDirection               string `protobuf:"bytes,6,opt,name=inet_direction,json=inetDirection,proto3" json:"inet_direction,omitempty"`
	Direction                   string `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *FlowTest) Reset() {
	*x = FlowTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTest) ProtoMessage() {}

func (x *FlowTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTest.ProtoReflect.Descriptor instead.
func (*FlowTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{12}
}

func (x *FlowTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FlowTest) GetTargetRefreshIntervalMillis() uint32 {
	if x != nil {
		return x.TargetRefreshIntervalMillis
	}
	return 0
}

func (x *FlowTest) GetMaxProviders() uint32 {
	if x != nil {
		return x.MaxProviders
	}
	return 0
}

func (x *FlowTest) GetMaxIpTargets() uint32 {
	if x != nil {
		return x.MaxIpTargets
	}
	return 0
}

func (x *FlowTest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FlowTest) GetInetDirection() string {
	if x != nil {
		return x.InetDirection
	}
	return ""
}

func (x *FlowTest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type DnsTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target     string    `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Timeout    uint32    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	RecordType DNSRecord `protobuf:"varint,3,opt,name=record_type,json=recordType,proto3,enum=kentik.synthetics.v202202.DNSRecord" json:"record_type,omitempty"`
	Servers    []string  `protobuf:"bytes,4,rep,name=servers,proto3" json:"servers,omitempty"`
	Port       uint32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DnsTest) Reset() {
	*x = DnsTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTest) ProtoMessage() {}

func (x *DnsTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTest.ProtoReflect.Descriptor instead.
func (*DnsTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{13}
}

func (x *DnsTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DnsTest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *DnsTest) GetRecordType() DNSRecord {
	if x != nil {
		return x.RecordType
	}
	return DNSRecord_DNS_RECORD_UNSPECIFIED
}

func (x *DnsTest) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *DnsTest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type UrlTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target          string            `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Timeout         uint32            `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Method          string            `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Headers         map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body            string            `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	IgnoreTlsErrors bool              `protobuf:"varint,6,opt,name=ignore_tls_errors,json=ignoreTlsErrors,proto3" json:"ignore_tls_errors,omitempty"`
}

func (x *UrlTest) Reset() {
	*x = UrlTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlTest) ProtoMessage() {}

func (x *UrlTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlTest.ProtoReflect.Descriptor instead.
func (*UrlTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{14}
}

func (x *UrlTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *UrlTest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UrlTest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *UrlTest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *UrlTest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *UrlTest) GetIgnoreTlsErrors() bool {
	if x != nil {
		return x.IgnoreTlsErrors
	}
	return false
}

type PageLoadTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target          string            `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Timeout         uint32            `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Headers         map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IgnoreTlsErrors bool              `protobuf:"varint,4,opt,name=ignore_tls_errors,json=ignoreTlsErrors,proto3" json:"ignore_tls_errors,omitempty"`
	CssSelectors    map[string]string `protobuf:"bytes,5,rep,name=css_selectors,json=cssSelectors,proto3" json:"css_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PageLoadTest) Reset() {
	*x = PageLoadTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageLoadTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLoadTest) ProtoMessage() {}

func (x *PageLoadTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLoadTest.ProtoReflect.Descriptor instead.
func (*PageLoadTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{15}
}

func (x *PageLoadTest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PageLoadTest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PageLoadTest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PageLoadTest) GetIgnoreTlsErrors() bool {
	if x != nil {
		return x.IgnoreTlsErrors
	}
	return false
}

func (x *PageLoadTest) GetCssSelectors() map[string]string {
	if x != nil {
		return x.CssSelectors
	}
	return nil
}

type NetworkMeshTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseLocalIp bool `protobuf:"varint,1,opt,name=use_local_ip,json=useLocalIp,proto3" json:"use_local_ip,omitempty"`
}

func (x *NetworkMeshTest) Reset() {
	*x = NetworkMeshTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMeshTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMeshTest) ProtoMessage() {}

func (x *NetworkMeshTest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMeshTest.ProtoReflect.Descriptor instead.
func (*NetworkMeshTest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{16}
}

func (x *NetworkMeshTest) GetUseLocalIp() bool {
	if x != nil {
		return x.UseLocalIp
	}
	return false
}

type MetricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current       uint32 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	RollingAvg    uint32 `protobuf:"varint,2,opt,name=rolling_avg,json=rollingAvg,proto3" json:"rolling_avg,omitempty"`
	RollingStddev uint32 `protobuf:"varint,3,opt,name=rolling_stddev,json=rollingStddev,proto3" json:"rolling_stddev,omitempty"`
	Health        string `protobuf:"bytes,4,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *MetricData) Reset() {
	*x = MetricData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData) ProtoMessage() {}

func (x *MetricData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData.ProtoReflect.Descriptor instead.
func (*MetricData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{17}
}

func (x *MetricData) GetCurrent() uint32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *MetricData) GetRollingAvg() uint32 {
	if x != nil {
		return x.RollingAvg
	}
	return 0
}

func (x *MetricData) GetRollingStddev() uint32 {
	if x != nil {
		return x.RollingStddev
	}
	return 0
}

func (x *MetricData) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

type PacketLossData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current float64 `protobuf:"fixed64,1,opt,name=current,proto3" json:"current,omitempty"`
	Health  string  `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *PacketLossData) Reset() {
	*x = PacketLossData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketLossData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketLossData) ProtoMessage() {}

func (x *PacketLossData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketLossData.ProtoReflect.Descriptor instead.
func (*PacketLossData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{18}
}

func (x *PacketLossData) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PacketLossData) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

type PingResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target     string          `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	PacketLoss *PacketLossData `protobuf:"bytes,2,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	Latency    *MetricData     `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Jitter     *MetricData     `protobuf:"bytes,4,opt,name=jitter,proto3" json:"jitter,omitempty"`
	DstIp      string          `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
}

func (x *PingResults) Reset() {
	*x = PingResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResults) ProtoMessage() {}

func (x *PingResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResults.ProtoReflect.Descriptor instead.
func (*PingResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{19}
}

func (x *PingResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PingResults) GetPacketLoss() *PacketLossData {
	if x != nil {
		return x.PacketLoss
	}
	return nil
}

func (x *PingResults) GetLatency() *MetricData {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *PingResults) GetJitter() *MetricData {
	if x != nil {
		return x.Jitter
	}
	return nil
}

func (x *PingResults) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

type HTTPResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Size   uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data   string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HTTPResponseData) Reset() {
	*x = HTTPResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseData) ProtoMessage() {}

func (x *HTTPResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseData.ProtoReflect.Descriptor instead.
func (*HTTPResponseData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{20}
}

func (x *HTTPResponseData) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HTTPResponseData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HTTPResponseData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type HTTPResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string            `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Latency  *MetricData       `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
	Response *HTTPResponseData `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	DstIp    string            `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
}

func (x *HTTPResults) Reset() {
	*x = HTTPResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResults) ProtoMessage() {}

func (x *HTTPResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResults.ProtoReflect.Descriptor instead.
func (*HTTPResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{21}
}

func (x *HTTPResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HTTPResults) GetLatency() *MetricData {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *HTTPResults) GetResponse() *HTTPResponseData {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HTTPResults) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

type DNSResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DNSResponseData) Reset() {
	*x = DNSResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResponseData) ProtoMessage() {}

func (x *DNSResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResponseData.ProtoReflect.Descriptor instead.
func (*DNSResponseData) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{22}
}

func (x *DNSResponseData) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DNSResponseData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DNSResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string           `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Server   string           `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Latency  *MetricData      `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Response *DNSResponseData `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DNSResults) Reset() {
	*x = DNSResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResults) ProtoMessage() {}

func (x *DNSResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResults.ProtoReflect.Descriptor instead.
func (*DNSResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{23}
}

func (x *DNSResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DNSResults) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *DNSResults) GetLatency() *MetricData {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *DNSResults) GetResponse() *DNSResponseData {
	if x != nil {
		return x.Response
	}
	return nil
}

type TaskResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TaskType:
	//	*TaskResults_Ping
	//	*TaskResults_Http
	//	*TaskResults_Dns
	TaskType isTaskResults_TaskType `protobuf_oneof:"task_type"`
	Health   string                 `protobuf:"bytes,4,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *TaskResults) Reset() {
	*x = TaskResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResults) ProtoMessage() {}

func (x *TaskResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResults.ProtoReflect.Descriptor instead.
func (*TaskResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{24}
}

func (m *TaskResults) GetTaskType() isTaskResults_TaskType {
	if m != nil {
		return m.TaskType
	}
	return nil
}

func (x *TaskResults) GetPing() *PingResults {
	if x, ok := x.GetTaskType().(*TaskResults_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *TaskResults) GetHttp() *HTTPResults {
	if x, ok := x.GetTaskType().(*TaskResults_Http); ok {
		return x.Http
	}
	return nil
}

func (x *TaskResults) GetDns() *DNSResults {
	if x, ok := x.GetTaskType().(*TaskResults_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *TaskResults) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

type isTaskResults_TaskType interface {
	isTaskResults_TaskType()
}

type TaskResults_Ping struct {
	Ping *PingResults `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type TaskResults_Http struct {
	Http *HTTPResults `protobuf:"bytes,2,opt,name=http,proto3,oneof"`
}

type TaskResults_Dns struct {
	Dns *DNSResults `protobuf:"bytes,3,opt,name=dns,proto3,oneof"`
}

func (*TaskResults_Ping) isTaskResults_TaskType() {}

func (*TaskResults_Http) isTaskResults_TaskType() {}

func (*TaskResults_Dns) isTaskResults_TaskType() {}

type AgentResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string         `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Health  string         `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	Tasks   []*TaskResults `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *AgentResults) Reset() {
	*x = AgentResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResults) ProtoMessage() {}

func (x *AgentResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResults.ProtoReflect.Descriptor instead.
func (*AgentResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{25}
}

func (x *AgentResults) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentResults) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *AgentResults) GetTasks() []*TaskResults {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Time   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Health string                 `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	Agents []*AgentResults        `protobuf:"bytes,4,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *TestResults) Reset() {
	*x = TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults) ProtoMessage() {}

func (x *TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults.ProtoReflect.Descriptor instead.
func (*TestResults) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{26}
}

func (x *TestResults) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestResults) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TestResults) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *TestResults) GetAgents() []*AgentResults {
	if x != nil {
		return x.Agents
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Average int32 `protobuf:"varint,1,opt,name=average,proto3" json:"average,omitempty"`
	Min     int32 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Max     int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{27}
}

func (x *Stats) GetAverage() int32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *Stats) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Stats) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Country   string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Region    string  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	City      string  `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{28}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type NetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string    `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Asn      uint32    `protobuf:"varint,3,opt,name=asn,proto3" json:"asn,omitempty"`
	AsName   string    `protobuf:"bytes,4,opt,name=as_name,json=asName,proto3" json:"as_name,omitempty"`
	Location *Location `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	DnsName  string    `protobuf:"bytes,6,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	DeviceId string    `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SiteId   string    `protobuf:"bytes,8,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
}

func (x *NetNode) Reset() {
	*x = NetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetNode) ProtoMessage() {}

func (x *NetNode) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetNode.ProtoReflect.Descriptor instead.
func (*NetNode) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{29}
}

func (x *NetNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetNode) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *NetNode) GetAsName() string {
	if x != nil {
		return x.AsName
	}
	return ""
}

func (x *NetNode) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetNode) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *NetNode) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *NetNode) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type TraceHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latency int32  `protobuf:"varint,3,opt,name=latency,proto3" json:"latency,omitempty"`
	NodeId  string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *TraceHop) Reset() {
	*x = TraceHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceHop) ProtoMessage() {}

func (x *TraceHop) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceHop.ProtoReflect.Descriptor instead.
func (*TraceHop) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{30}
}

func (x *TraceHop) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *TraceHop) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type PathTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsPath     []int32     `protobuf:"varint,1,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	IsComplete bool        `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	Hops       []*TraceHop `protobuf:"bytes,6,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *PathTrace) Reset() {
	*x = PathTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTrace) ProtoMessage() {}

func (x *PathTrace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTrace.ProtoReflect.Descriptor instead.
func (*PathTrace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{31}
}

func (x *PathTrace) GetAsPath() []int32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *PathTrace) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *PathTrace) GetHops() []*TraceHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId         string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	TargetIp        string                 `protobuf:"bytes,3,opt,name=target_ip,json=targetIp,proto3" json:"target_ip,omitempty"`
	HopCount        *Stats                 `protobuf:"bytes,4,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	MaxAsPathLength int32                  `protobuf:"varint,7,opt,name=max_as_path_length,json=maxAsPathLength,proto3" json:"max_as_path_length,omitempty"`
	Traces          []*PathTrace           `protobuf:"bytes,8,rep,name=traces,proto3" json:"traces,omitempty"`
	Time            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{32}
}

func (x *Path) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Path) GetTargetIp() string {
	if x != nil {
		return x.TargetIp
	}
	return ""
}

func (x *Path) GetHopCount() *Stats {
	if x != nil {
		return x.HopCount
	}
	return nil
}

func (x *Path) GetMaxAsPathLength() int32 {
	if x != nil {
		return x.MaxAsPathLength
	}
	return 0
}

func (x *Path) GetTraces() []*PathTrace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *Path) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type GetResultsForTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds  []string               `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Targets   []string               `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	Aggregate bool                   `protobuf:"varint,6,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
}

func (x *GetResultsForTestsRequest) Reset() {
	*x = GetResultsForTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultsForTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultsForTestsRequest) ProtoMessage() {}

func (x *GetResultsForTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultsForTestsRequest.ProtoReflect.Descriptor instead.
func (*GetResultsForTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{33}
}

func (x *GetResultsForTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GetResultsForTestsRequest) GetAggregate() bool {
	if x != nil {
		return x.Aggregate
	}
	return false
}

type GetResultsForTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TestResults `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetResultsForTestsResponse) Reset() {
	*x = GetResultsForTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultsForTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultsForTestsResponse) ProtoMessage() {}

func (x *GetResultsForTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultsForTestsResponse.ProtoReflect.Descriptor instead.
func (*GetResultsForTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{34}
}

func (x *GetResultsForTestsResponse) GetResults() []*TestResults {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetTraceForTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds  []string               `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	TargetIps []string               `protobuf:"bytes,5,rep,name=target_ips,json=targetIps,proto3" json:"target_ips,omitempty"`
}

func (x *GetTraceForTestRequest) Reset() {
	*x = GetTraceForTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestRequest) ProtoMessage() {}

func (x *GetTraceForTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceForTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{35}
}

func (x *GetTraceForTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTraceForTestRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetTraceForTestRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetTraceForTestRequest) GetTargetIps() []string {
	if x != nil {
		return x.TargetIps
	}
	return nil
}

type GetTraceForTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes map[string]*NetNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Paths []*Path             `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *GetTraceForTestResponse) Reset() {
	*x = GetTraceForTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestResponse) ProtoMessage() {}

func (x *GetTraceForTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceForTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{36}
}

func (x *GetTraceForTestResponse) GetNodes() map[string]*NetNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetTraceForTestResponse) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

type ListAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{37}
}

type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents       []*Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	InvalidCount uint32   `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{38}
}

func (x *ListAgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

type GetAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{39}
}

func (x *GetAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *GetAgentResponse) Reset() {
	*x = GetAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentResponse) ProtoMessage() {}

func (x *GetAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{40}
}

func (x *GetAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type UpdateAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *UpdateAgentRequest) Reset() {
	*x = UpdateAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentRequest) ProtoMessage() {}

func (x *UpdateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type UpdateAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *UpdateAgentResponse) Reset() {
	*x = UpdateAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentResponse) ProtoMessage() {}

func (x *UpdateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentResponse.ProtoReflect.Descriptor instead.
func (*UpdateAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type DeleteAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAgentRequest) Reset() {
	*x = DeleteAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentRequest) ProtoMessage() {}

func (x *DeleteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAgentRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteAgentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAgentResponse) Reset() {
	*x = DeleteAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentResponse) ProtoMessage() {}

func (x *DeleteAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAgentResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{44}
}

type ListTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTestsRequest) Reset() {
	*x = ListTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsRequest) ProtoMessage() {}

func (x *ListTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsRequest.ProtoReflect.Descriptor instead.
func (*ListTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{45}
}

type ListTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests        []*Test `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	InvalidCount uint32  `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListTestsResponse) Reset() {
	*x = ListTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsResponse) ProtoMessage() {}

func (x *ListTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsResponse.ProtoReflect.Descriptor instead.
func (*ListTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{46}
}

func (x *ListTestsResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListTestsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

type CreateTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestRequest) Reset() {
	*x = CreateTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestRequest) ProtoMessage() {}

func (x *CreateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestRequest.ProtoReflect.Descriptor instead.
func (*CreateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{47}
}

func (x *CreateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestResponse) Reset() {
	*x = CreateTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResponse) ProtoMessage() {}

func (x *CreateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResponse.ProtoReflect.Descriptor instead.
func (*CreateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{48}
}

func (x *CreateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type GetTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{49}
}

func (x *GetTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{50}
}

func (x *GetTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type UpdateTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *UpdateTestRequest) Reset() {
	*x = UpdateTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestRequest) ProtoMessage() {}

func (x *UpdateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateTestRequest) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type UpdateTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *UpdateTestResponse) Reset() {
	*x = UpdateTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestResponse) ProtoMessage() {}

func (x *UpdateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateTestResponse) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type DeleteTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTestRequest) Reset() {
	*x = DeleteTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestRequest) ProtoMessage() {}

func (x *DeleteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestResponse) Reset() {
	*x = DeleteTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestResponse) ProtoMessage() {}

func (x *DeleteTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{54}
}

type SetTestStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status TestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.synthetics.v202202.TestStatus" json:"status,omitempty"`
}

func (x *SetTestStatusRequest) Reset() {
	*x = SetTestStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusRequest) ProtoMessage() {}

func (x *SetTestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTestStatusRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{55}
}

func (x *SetTestStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetTestStatusRequest) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

type SetTestStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTestStatusResponse) Reset() {
	*x = SetTestStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTestStatusResponse) ProtoMessage() {}

func (x *SetTestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTestStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTestStatusResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{56}
}

type AgentMetadata_IpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AgentMetadata_IpValue) Reset() {
	*x = AgentMetadata_IpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetadata_IpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadata_IpValue) ProtoMessage() {}

func (x *AgentMetadata_IpValue) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202202_synthetics_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadata_IpValue.ProtoReflect.Descriptor instead.
func (*AgentMetadata_IpValue) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AgentMetadata_IpValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_kentik_synthetics_v202202_synthetics_proto protoreflect.FileDescriptor

var file_kentik_synthetics_v202202_synthetics_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x0e,
	0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x49, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x22, 0x32,
	0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x28,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x7c, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x4f, 0x53,
	0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x56, 0x4d, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x49, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x18, 0x01, 0x92,
	0x41, 0x30, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x20, 0x28, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x70, 0x12, 0x4c, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x35, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x27,
	0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x73, 0x29, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x27,
	0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x73, 0x29, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2c, 0x92, 0x41, 0x25, 0x32,
	0x23, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2e, 0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28,
	0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x42, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x32, 0x2b, 0x41, 0x53, 0x4e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41,
	0x53, 0x20, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x27, 0x73,
	0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x03, 0x61, 0x73, 0x6e, 0x12, 0x58, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x69, 0x66,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x29, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x32, 0x1f, 0x43, 0x69, 0x74, 0x79, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x27, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30,
	0x92, 0x41, 0x29, 0x32, 0x27, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x18, 0x01, 0x92,
	0x41, 0x22, 0x32, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x50, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x4f, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x29, 0x20,
	0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28, 0x69, 0x66, 0x20,
	0x61, 0x6e, 0x79, 0x29, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6d, 0x70, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x32, 0x45, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x75, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xea, 0x04, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x20, 0x49, 0x50, 0x76, 0x34, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x49, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x1f, 0x32, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x49,
	0x50, 0x76, 0x34, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x49, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x49, 0x50, 0x76, 0x36, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x14,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x49, 0x50, 0x76, 0x36,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x13,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x1a, 0x1f, 0x0a, 0x07, 0x49, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x17, 0x32, 0x15, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x45, 0x2d, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x17, 0x32, 0x15, 0x46, 0x75, 0x6c, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x06, 0x0a, 0x04, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x17, 0x32, 0x15, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x54, 0x65, 0x73, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54,
	0x43, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a,
	0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x23, 0x32, 0x21, 0x4c,
	0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x38, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32,
	0x26, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x94, 0x0c, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x45, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x49, 0x70, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x3c, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44,
	0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x36, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x49, 0x70, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x12, 0x46, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x32, 0x2e, 0x44, 0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x47, 0x72, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32,
	0x39, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x75, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x55, 0x92, 0x41,
	0x52, 0x32, 0x50, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2c,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x32, 0x23, 0x50, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x71,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x54, 0x65, 0x73, 0x74, 0x20, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x28,
	0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2e, 0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f,
	0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x7f, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x32, 0x45, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x20, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x03, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32,
	0x30, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32,
	0x26, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x28, 0x69, 0x63, 0x6d, 0x70,
	0x20, 0x7c, 0x20, 0x74, 0x63, 0x70, 0x29, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x54, 0x43, 0x50, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x20, 0x28, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x49, 0x43,
	0x4d, 0x50, 0x29, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32,
	0x31, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32,
	0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x2d, 0x2d,
	0x2d, 0x20, 0x3c, 0x4e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x3e, 0x20, 0x2d, 0x2d, 0x2d, 0x52, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x22, 0x95, 0x04, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x20, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20,
	0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x28, 0x69, 0x63, 0x6d, 0x70, 0x20, 0x7c, 0x20, 0x74,
	0x63, 0x70, 0x20, 0x7c, 0x20, 0x75, 0x64, 0x70, 0x29, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x70,
	0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x54, 0x43, 0x50, 0x20, 0x6f, 0x72, 0x20, 0x55,
	0x44, 0x50, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x20, 0x28, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x49, 0x43, 0x4d, 0x50, 0x29, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x70, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x54, 0x54, 0x4c, 0x29, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x2d, 0x2d, 0x2d, 0x20, 0x3c, 0x4e, 0x6f, 0x74, 0x20, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x3e, 0x20,
	0x2d, 0x2d, 0x2d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x22, 0xc6, 0x03, 0x0a, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x5a, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x54,
	0x69, 0x6d, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x20, 0x28, 0x6d, 0x20, 0x7c, 0x20, 0x68, 0x29, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32,
	0x37, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x7c, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x66, 0x92, 0x41, 0x63, 0x32, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x74, 0x65, 0x73,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0xf0, 0x16, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x4e, 0x53,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x83,
	0x01, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x55, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x69, 0x6e,
	0x67, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x25, 0x29, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x73, 0x0a, 0x13,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x69,
	0x6e, 0x67, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x28,
	0x69, 0x6e, 0x20, 0x25, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x11,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x73, 0x0a, 0x0f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x32,
	0x45, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
	0x69, 0x6e, 0x67, 0x20, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0e, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x71, 0x0a, 0x0e, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x4a,
	0x92, 0x41, 0x47, 0x32, 0x45, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x28,
	0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0d, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x54, 0x92, 0x41, 0x51, 0x32, 0x4f,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x48, 0x54,
	0x54, 0x50, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x13, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x53, 0x92, 0x41, 0x50, 0x32, 0x4e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x28, 0x69,
	0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x10,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x64, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0xa9, 0x01, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x71, 0x92, 0x41, 0x6e, 0x32, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x69,
	0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0xa6, 0x01, 0x0a, 0x16,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x70, 0x92, 0x41,
	0x6d, 0x32, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72,
	0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x14,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x64, 0x64, 0x65, 0x76, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x32, 0x5b, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x70, 0x69, 0x6e, 0x67, 0x20, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x14, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x93, 0x01,
	0x0a, 0x15, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x5f, 0x92,
	0x41, 0x5c, 0x32, 0x5a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x13,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x12, 0xab, 0x01, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x64, 0x64, 0x65, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x32,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x19, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x12, 0xa8, 0x01, 0x0a, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x42, 0x69, 0x92, 0x41, 0x66, 0x32, 0x64, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x18, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0xad, 0x01, 0x0a,
	0x1b, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x28, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x75, 0x6e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x52, 0x19, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x53, 0x75, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x13,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x20, 0x6f, 0x66, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x64, 0x61, 0x79, 0x73, 0x29, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x14, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x32, 0x57, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20,
	0x6f, 0x66, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x64, 0x61, 0x79, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x64,
	0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x61, 0x32, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x20, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x41, 0x20, 0x6f, 0x72, 0x20, 0x41, 0x41,
	0x41, 0x41, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x70, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x46, 0x75, 0x6c, 0x6c,
	0x79, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x44, 0x4e, 0x53, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x48, 0x0a, 0x06, 0x49, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x7d, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x28, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x29,
	0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x22, 0x8b, 0x07, 0x0a, 0x08,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41, 0x6c, 0x32, 0x6a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x41, 0x53, 0x4e, 0x2c, 0x20, 0x43, 0x44, 0x4e, 0x2c,
	0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2c, 0x20, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x43, 0x69, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x28, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x20, 0x73, 0x75, 0x62, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x29, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x1e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x59, 0x92, 0x41, 0x56,
	0x32, 0x54, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6c, 0x6f,
	0x77, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32,
	0x34, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x49, 0x50, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d,
	0x6f, 0x75, 0x73, 0x6c, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x70, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x47,
	0x32, 0x45, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x70, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3e, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x28, 0x61, 0x73, 0x6e, 0x20, 0x7c, 0x20, 0x63, 0x64, 0x6e, 0x20, 0x7c, 0x20,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7c, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x20, 0x7c, 0x20, 0x63, 0x69, 0x74, 0x79, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa8,
	0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x80, 0x01, 0x92, 0x41, 0x7d, 0x32, 0x7b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x28, 0x73, 0x72, 0x63, 0x20, 0x3d, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x7c, 0x20, 0x64, 0x73, 0x74, 0x20,
	0x3d, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x29, 0x52, 0x0d, 0x69, 0x6e, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x5d, 0x32, 0x5b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x20, 0x28, 0x73, 0x72, 0x63, 0x20, 0x7c, 0x20, 0x64, 0x73, 0x74, 0x29, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x02, 0x0a, 0x07, 0x44, 0x6e,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x46, 0x75, 0x6c, 0x6c,
	0x79, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x44, 0x4e, 0x53, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x2d, 0x2d, 0x2d,
	0x20, 0x3c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x3e, 0x20, 0x2d, 0x2d,
	0x2d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x67, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x54, 0x79, 0x70, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc6, 0x04, 0x0a, 0x07, 0x55, 0x72, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x48, 0x54, 0x54, 0x50, 0x20,
	0x6f, 0x72, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x49, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x48, 0x54, 0x54, 0x50, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20,
	0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x29, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32,
	0x34, 0x48, 0x54, 0x54, 0x50, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x75, 0x73, 0x65, 0x20, 0x28, 0x47, 0x45, 0x54, 0x20, 0x7c, 0x20, 0x48, 0x45, 0x41, 0x44, 0x20,
	0x7c, 0x20, 0x50, 0x41, 0x54, 0x43, 0x48, 0x20, 0x7c, 0x20, 0x50, 0x4f, 0x53, 0x54, 0x20, 0x7c,
	0x20, 0x50, 0x55, 0x54, 0x29, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x7f, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x72, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x48, 0x54, 0x54,
	0x50, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x13, 0x32, 0x11, 0x48, 0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x62, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x79, 0x0a, 0x11, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x20, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xac, 0x05, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x48, 0x54, 0x54, 0x50, 0x20, 0x6f, 0x72,
	0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x49, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f,
	0x92, 0x41, 0x2c, 0x32, 0x2a, 0x48, 0x54, 0x54, 0x50, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x28, 0x69,
	0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x48, 0x54,
	0x54, 0x50, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x20, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x79, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32,
	0x48, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x54, 0x6c, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x63,
	0x73, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x73, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92,
	0x41, 0x33, 0x32, 0x31, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x53, 0x53, 0x20, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x63, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x43, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x68,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x32,
	0x57, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x28,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x29, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x70, 0x22, 0xc7, 0x02, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x5b, 0x0a, 0x0e,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x52, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x63, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x46,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x28, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x20, 0x7c, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x29, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xaf,
	0x01, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48,
	0x32, 0x46, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x28, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x20, 0x7c, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x29, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0xd6, 0x03, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x6e, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x6f, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x28, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x29, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x32, 0x17, 0x48, 0x54, 0x54, 0x50, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x73,
	0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x6f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x02, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x64, 0x20, 0x55, 0x52, 0x4c, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x6d, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2c, 0x92,
	0x41, 0x29, 0x32, 0x27, 0x48, 0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x76, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x32, 0x22, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x22, 0x87, 0x01, 0x0a,
	0x0f, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20,
	0x44, 0x4e, 0x53, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54, 0x65, 0x78, 0x74, 0x20, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x02, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x64, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x44, 0x4e, 0x53,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x6c, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32,
	0x26, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x74, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x32, 0x27, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20,
	0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x32, 0x22, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x61, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x44, 0x4e, 0x53, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42,
	0x0b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x02, 0x0a,
	0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x62, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4a, 0x92, 0x41, 0x47, 0x32, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x20, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x67, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x32, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xea, 0x02,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4b, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x32, 0x2d, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54,
	0x43, 0x29, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x87, 0x01, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32,
	0x41, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x6f, 0x6e, 0x20,
	0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xc1,
	0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x22, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x86, 0x05, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32,
	0x33, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x41, 0x53, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x61, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32,
	0x2d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x53, 0x20,
	0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x22, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x59, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x44, 0x4e, 0x53, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x29, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49,
	0x92, 0x41, 0x46, 0x32, 0x44, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x58, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x70, 0x12, 0x76, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x32, 0x57,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x74, 0x72, 0x69, 0x70, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x20, 0x69, 0x66, 0x20, 0x6e,
	0x6f, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x6f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x68, 0x6f, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x20, 0x6d, 0x61, 0x70, 0x20, 0x20, 0x2d, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x69, 0x66,
	0x20, 0x6e, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x41, 0x53, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x77,
	0x61, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x70, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x70, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73,
	0x22, 0xa8, 0x04, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x49, 0x50, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x12, 0x6a, 0x0a, 0x09, 0x68,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x48, 0x6f, 0x70, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x61, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x08, 0x68,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x53, 0x20, 0x70,
	0x61, 0x74, 0x68, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x32, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20,
	0x28, 0x55, 0x54, 0x43, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x05, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x79, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x3e, 0x92, 0x41, 0x37, 0x32, 0x35, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6c, 0x64, 0x65,
	0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x75, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3e, 0x92,
	0x41, 0x37, 0x32, 0x35, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3e,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20,
	0x28, 0x74, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x29,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6b, 0x92, 0x41, 0x68,
	0x32, 0x66, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2c, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x8a, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32,
	0x38, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x02, 0x69, 0x64, 0x12, 0x79, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3e, 0x92,
	0x41, 0x37, 0x32, 0x35, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3e, 0x92, 0x41, 0x37, 0x32, 0x35, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65,
	0x77, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x73,
	0x22, 0xe6, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92, 0x41, 0x33,
	0x32, 0x31, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20,
	0x49, 0x44, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32,
	0x23, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x5c, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd4,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x65,
	0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22,
	0x77, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1f, 0x32,
	0x1d, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x65,
	0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x20, 0x92, 0x41, 0x19, 0x32, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x65, 0x73,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x16, 0x32, 0x14, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x32, 0x17, 0x54, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22,
	0x72, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x2f, 0x32,
	0x2d, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1b, 0x92,
	0x41, 0x14, 0x32, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x61, 0x0a, 0x0d, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x55, 0x53, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x5d,
	0x0a, 0x08, 0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50,
	0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x56, 0x34, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x56, 0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x5f,
	0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x72, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x71, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xc8, 0x01, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41,
	0x41, 0x41, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x44, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x4e, 0x53, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x4d, 0x58, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x54, 0x52, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x41, 0x10, 0x08, 0x32,
	0xc6, 0x05, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01,
	0x92, 0x41, 0x73, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x46, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22,
	0x1b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xd0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x01, 0x92, 0x41, 0x9a,
	0x01, 0x12, 0x21, 0x47, 0x65, 0x74, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x1a, 0x64, 0x47, 0x65, 0x74, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x2a, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x0f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x3a,
	0x01, 0x2a, 0x1a, 0x24, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0a, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x32, 0xbc, 0x16, 0x0a, 0x16, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x8d, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa1, 0x01, 0x92, 0x41, 0x63, 0x12, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x2a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x8d, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x92, 0x41, 0x64, 0x12,
	0x1e, 0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a,
	0x38, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x2a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x12, 0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x97, 0x02, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa8, 0x01, 0x92, 0x41, 0x5b, 0x12, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x2a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x2a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x1a, 0x25, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x02,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x92,
	0x41, 0x7a, 0x12, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x1a, 0x5a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x2a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0xf2, 0xd7, 0x02, 0x16,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x32, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x02,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x92, 0x41, 0x60, 0x12, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x43, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x2a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0xf2, 0xd7, 0x02, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x8f, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x62, 0x12, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x2a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x92, 0x41,
	0x6b, 0x12, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x2a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x02, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x58, 0x12, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x2a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x23, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x02,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x92, 0x41, 0x81, 0x01,
	0x12, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x1a, 0x59, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x61, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x2e, 0x2a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x2a, 0x1e, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x97, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x92, 0x41, 0x55, 0x12, 0x21, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x2a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x1a, 0x25, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x2a, 0xca, 0x41, 0x13,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x42, 0x94, 0x3f, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x3b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x92, 0x41, 0xc6, 0x3e, 0x12, 0xdc, 0x3c, 0x0a, 0x19, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x12, 0xef, 0x3b, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73, 0x20, 0x5b, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x34, 0x2f, 0x4d, 0x61, 0x30, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x2e, 0x0a, 0x20, 0x54, 0x68,
	0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a,
	0x0a, 0x7c, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x7c, 0x20, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x0a,
	0x7c, 0x20, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x7c, 0x20, 0x43, 0x52, 0x55, 0x44, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x20, 0x7c, 0x20, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x20, 0x7c, 0x0a,
	0x0a, 0x42, 0x6f, 0x74, 0x68, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x52, 0x50, 0x43,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x0a,
	0x23, 0x23, 0x23, 0x20, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x0a, 0x2a, 0x20, 0x5f, 0x42, 0x47, 0x50,
	0x5f, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x5b, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20, 0x41, 0x50, 0x49, 0x5d,
	0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x6c, 0x6f,
	0x62, 0x2f, 0x63, 0x63, 0x66, 0x39, 0x39, 0x32, 0x37, 0x66, 0x65, 0x33, 0x63, 0x64, 0x37, 0x39,
	0x31, 0x38, 0x63, 0x38, 0x36, 0x63, 0x37, 0x63, 0x64, 0x63, 0x31, 0x32, 0x31, 0x32, 0x39, 0x33,
	0x36, 0x65, 0x38, 0x33, 0x36, 0x37, 0x34, 0x33, 0x66, 0x38, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x33, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0x0a, 0x2a, 0x20, 0x5f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x0a, 0x0a,
	0x23, 0x23, 0x23, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x0a,
	0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x20, 0x5b, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x64,
	0x6b, 0x5f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x0a, 0x5b,
	0x47, 0x6f, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x29, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x0a, 0x61, 0x6e, 0x64, 0x20, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73,
	0x2e, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x53, 0x44, 0x4b, 0x73, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73,
	0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x0a,
	0x41, 0x20, 0x5b, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2d, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x29, 0x20, 0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x23, 0x20, 0x41, 0x6e, 0x61, 0x74, 0x6f,
	0x6d, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x0a, 0x45, 0x61, 0x63, 0x68, 0x20, 0x5f, 0x54, 0x65, 0x73,
	0x74, 0x5f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6f,
	0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x5f, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x5f, 0x2e, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x5f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x20, 0x0a, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x28, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x29, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x3a, 0x0a, 0x7c, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x20, 0x7c,
	0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x7c, 0x0a, 0x7c, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x7c, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x54, 0x43, 0x50, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x7c, 0x0a, 0x7c, 0x20,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x28, 0x61, 0x2e, 0x6b, 0x2e,
	0x61, 0x2e, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x29, 0x7c, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x20, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20,
	0x7c, 0x0a, 0x7c, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x7c, 0x20, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x48, 0x54, 0x54, 0x50,
	0x2f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x7c,
	0x0a, 0x7c, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x7c, 0x20, 0x55,
	0x73, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20,
	0x61, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x64, 0x6e, 0x73, 0x20, 0x7c, 0x20,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x61, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x7c, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x2e, 0x0a,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x3a, 0x0a, 0x7c, 0x20, 0x41, 0x50, 0x49, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x7c, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x20, 0x28, 0x55, 0x49, 0x29, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x7c, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20,
	0x7c, 0x0a, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x0a, 0x7c, 0x20, 0x69, 0x70, 0x20,
	0x7c, 0x20, 0x49, 0x50, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7c, 0x20, 0x70,
	0x69, 0x6e, 0x67, 0x2c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20,
	0x7c, 0x0a, 0x7c, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7c, 0x20, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7c, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x20,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x20, 0x7c, 0x20, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x47, 0x72, 0x69, 0x64, 0x20, 0x7c, 0x20, 0x70, 0x69, 0x6e,
	0x67, 0x2c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7c, 0x0a,
	0x7c, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x7c, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x6f, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x7c, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x2c,
	0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x20,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x20, 0x7c, 0x20, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x4d, 0x65, 0x73, 0x68, 0x20, 0x7c, 0x20, 0x70, 0x69,
	0x6e, 0x67, 0x2c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7c,
	0x0a, 0x7c, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x7c, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x20, 0x54, 0x65, 0x73, 0x74, 0x73, 0x20, 0x28, 0x35, 0x20, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x29, 0x20, 0x7c, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x20,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x75,
	0x72, 0x6c, 0x20, 0x7c, 0x20, 0x48, 0x54, 0x54, 0x50, 0x28, 0x53, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x7c, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2c, 0x20, 0x70, 0x69, 0x6e, 0x67,
	0x20, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x2c, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x20, 0x7c, 0x20, 0x50, 0x61, 0x67, 0x65, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x20, 0x7c, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x2c, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x28,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x2c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29,
	0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x64, 0x6e, 0x73, 0x20, 0x7c, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x7c, 0x20,
	0x64, 0x6e, 0x73, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x64, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x69, 0x64,
	0x20, 0x7c, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x47, 0x72,
	0x69, 0x64, 0x20, 0x7c, 0x20, 0x64, 0x6e, 0x73, 0x20, 0x7c, 0x0a, 0x0a, 0x2a, 0x2a, 0x2a, 0x4e,
	0x6f, 0x74, 0x65, 0x3a, 0x2a, 0x2a, 0x2a, 0x20, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x20, 0x72, 0x75, 0x6e, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x28, 0x6e,
	0x6f, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x29, 0x2e, 0x0a, 0x0a, 0x23, 0x23, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2c, 0x20, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x0a, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x3a, 0x0a, 0x7c, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x20, 0x7c, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x7c, 0x20, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x0a, 0x7c, 0x20, 0x69, 0x64, 0x20, 0x7c, 0x20, 0x52,
	0x4f, 0x20, 0x7c, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7c, 0x20, 0x52, 0x57,
	0x20, 0x7c, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x28, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x7c, 0x20, 0x52, 0x4f, 0x20, 0x28, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7c, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x28, 0x73, 0x65, 0x74, 0x20,
	0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x20, 0x72, 0x65, 0x61,
	0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7c, 0x20,
	0x52, 0x57, 0x20, 0x7c, 0x20, 0x4c, 0x69, 0x66, 0x65, 0x2d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x63, 0x64, 0x61, 0x74, 0x65, 0x20, 0x7c, 0x20, 0x52,
	0x4f, 0x20, 0x7c, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x7c, 0x20, 0x52, 0x4f, 0x20, 0x7c, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x20, 0x7c, 0x20, 0x52, 0x4f, 0x20, 0x7c, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x7c, 0x20, 0x52, 0x4f, 0x20, 0x7c, 0x20, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x0a, 0x7c, 0x20,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7c, 0x20, 0x52, 0x57, 0x20, 0x7c, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x20, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x5f, 0x54, 0x65,
	0x73, 0x74, 0x5f, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x0a, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x61,
	0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x0a, 0x0a, 0x23, 0x23, 0x23, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0a, 0x54, 0x68, 0x65,
	0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x3a, 0x0a, 0x7c, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x20, 0x7c, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7c, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x7c, 0x0a, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x0a, 0x7c, 0x20, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x20, 0x20, 0x7c, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x20, 0x59, 0x45, 0x53, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x7c, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20,
	0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x7c, 0x20, 0x4e, 0x4f, 0x20,
	0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x36, 0x30, 0x73, 0x29, 0x20, 0x7c, 0x0a,
	0x7c, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x7c, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x20, 0x55, 0x73,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x75, 0x72, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x6e, 0x73, 0x2e, 0x20, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x7c, 0x20, 0x4e, 0x4f, 0x20, 0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x49, 0x50, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x29,
	0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x7c, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x20, 0x4e, 0x4f, 0x20, 0x28, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x29,
	0x0a, 0x7c, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x20, 0x7c, 0x20, 0x41, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x20, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x28, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x29, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x20, 0x7c, 0x20, 0x59, 0x45,
	0x53, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x41, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x20, 0x7c, 0x20, 0x4e, 0x4f, 0x20, 0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x20, 0x7c,
	0x20, 0x41, 0x20, 0x54, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x20, 0x4e, 0x4f, 0x20, 0x28, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x20, 0x7c, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x20, 0x59, 0x45, 0x53, 0x20, 0x7c, 0x0a, 0x0a, 0x23,
	0x23, 0x23, 0x20, 0x54, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0a, 0x45, 0x61, 0x63, 0x68, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73,
	0x20, 0x6f, 0x77, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x3a, 0x0a, 0x7c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x7c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7c, 0x0a, 0x7c, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x7c, 0x0a, 0x7c, 0x20, 0x69, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x69, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20,
	0x49, 0x70, 0x54, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x69,
	0x64, 0x20, 0x7c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x69, 0x64, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x49, 0x70,
	0x54, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x7c, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c,
	0x0a, 0x7c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x20,
	0x7c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x68, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x7c, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x7c,
	0x20, 0x75, 0x72, 0x6c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20,
	0x75, 0x72, 0x6c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c,
	0x20, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x64,
	0x6e, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x64, 0x6e,
	0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x44, 0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x64, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x7c, 0x20, 0x64, 0x6e, 0x73, 0x47, 0x72, 0x69, 0x64, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x44,
	0x6e, 0x73, 0x54, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x0a, 0x23, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20,
	0x73, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x74, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x0a, 0x0a, 0x47, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20,
	0x28, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x0a,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x69,
	0x73, 0x20, 0x31, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x20, 0x28, 0x65, 0x76, 0x65, 0x6e,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x3c, 0x20, 0x31,
	0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x29, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x6e, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x0a,
	0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x0a, 0x0a, 0x23, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x0a, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x0a, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x20, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x20, 0x0a, 0x54,
	0x68, 0x65, 0x20, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x70, 0x61,
	0x69, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x2d, 0x74, 0x72, 0x69, 0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x28, 0x52, 0x54, 0x54,
	0x29, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x68, 0x6f, 0x70, 0x2e, 0x20, 0x48,
	0x6f, 0x70, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61,
	0x20, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x5f, 0x2e, 0x20, 0x0a, 0x54, 0x68, 0x65, 0x20,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x73, 0x5f, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2c,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x70,
	0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x6d, 0x61, 0x70, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x0a, 0x69, 0x73, 0x20, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x20,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x0a, 0x0a, 0x23, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x7a, 0x65, 0x73, 0x20, 0x32, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x0a, 0x2a, 0x20, 0x2a, 0x2a, 0x2a, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2a, 0x2a, 0x2a, 0x20, 0x28, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x29, 0x3a, 0x20,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x2a, 0x2a, 0x2a, 0x41, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x61, 0x64,
	0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x2a, 0x2a, 0x2a, 0x0a, 0x2a, 0x20, 0x2a, 0x2a, 0x2a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2a, 0x2a, 0x2a, 0x3a, 0x20, 0x20, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x2c, 0x20, 0x61, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c,
	0x66, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x28, 0x76, 0x69, 0x61, 0x20, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x41, 0x50, 0x49, 0x29, 0x2e, 0x20, 0x4f, 0x6e, 0x63,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x76,
	0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x62, 0x79, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x20, 0x74, 0x6f, 0x20, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x5f, 0x2e, 0x0a, 0x2a, 0x2a, 0x2a, 0x4e, 0x6f, 0x74,
	0x65, 0x3a, 0x2a, 0x2a, 0x2a, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x65, 0x65, 0x20, 0x5b,
	0x2a, 0x2a, 0x2a, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x2a,
	0x2a, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x4d, 0x61, 0x30, 0x31,
	0x2e, 0x68, 0x74, 0x6d, 0x23, 0x4d, 0x61, 0x30, 0x31, 0x2d, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x2e, 0x0a, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32,
	0x06, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44,
	0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58,
	0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02,
	0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58,
	0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x60, 0x0a, 0x22,
	0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x4d, 0x61, 0x30,
	0x30, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x4d, 0x61, 0x30, 0x30, 0x2d, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_synthetics_v202202_synthetics_proto_rawDescOnce sync.Once
	file_kentik_synthetics_v202202_synthetics_proto_rawDescData = file_kentik_synthetics_v202202_synthetics_proto_rawDesc
)

func file_kentik_synthetics_v202202_synthetics_proto_rawDescGZIP() []byte {
	file_kentik_synthetics_v202202_synthetics_proto_rawDescOnce.Do(func() {
		file_kentik_synthetics_v202202_synthetics_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_synthetics_v202202_synthetics_proto_rawDescData)
	})
	return file_kentik_synthetics_v202202_synthetics_proto_rawDescData
}

var file_kentik_synthetics_v202202_synthetics_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kentik_synthetics_v202202_synthetics_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_kentik_synthetics_v202202_synthetics_proto_goTypes = []interface{}{
	(ImplementType)(0),                 // 0: kentik.synthetics.v202202.ImplementType
	(IPFamily)(0),                      // 1: kentik.synthetics.v202202.IPFamily
	(TestStatus)(0),                    // 2: kentik.synthetics.v202202.TestStatus
	(AgentStatus)(0),                   // 3: kentik.synthetics.v202202.AgentStatus
	(DNSRecord)(0),                     // 4: kentik.synthetics.v202202.DNSRecord
	(*Agent)(nil),                      // 5: kentik.synthetics.v202202.Agent
	(*AgentMetadata)(nil),              // 6: kentik.synthetics.v202202.AgentMetadata
	(*UserInfo)(nil),                   // 7: kentik.synthetics.v202202.UserInfo
	(*Test)(nil),                       // 8: kentik.synthetics.v202202.Test
	(*TestSettings)(nil),               // 9: kentik.synthetics.v202202.TestSettings
	(*TestPingSettings)(nil),           // 10: kentik.synthetics.v202202.TestPingSettings
	(*TestTraceSettings)(nil),          // 11: kentik.synthetics.v202202.TestTraceSettings
	(*ActivationSettings)(nil),         // 12: kentik.synthetics.v202202.ActivationSettings
	(*HealthSettings)(nil),             // 13: kentik.synthetics.v202202.HealthSettings
	(*HostnameTest)(nil),               // 14: kentik.synthetics.v202202.HostnameTest
	(*IpTest)(nil),                     // 15: kentik.synthetics.v202202.IpTest
	(*AgentTest)(nil),                  // 16: kentik.synthetics.v202202.AgentTest
	(*FlowTest)(nil),                   // 17: kentik.synthetics.v202202.FlowTest
	(*DnsTest)(nil),                    // 18: kentik.synthetics.v202202.DnsTest
	(*UrlTest)(nil),                    // 19: kentik.synthetics.v202202.UrlTest
	(*PageLoadTest)(nil),               // 20: kentik.synthetics.v202202.PageLoadTest
	(*NetworkMeshTest)(nil),            // 21: kentik.synthetics.v202202.NetworkMeshTest
	(*MetricData)(nil),                 // 22: kentik.synthetics.v202202.MetricData
	(*PacketLossData)(nil),             // 23: kentik.synthetics.v202202.PacketLossData
	(*PingResults)(nil),                // 24: kentik.synthetics.v202202.PingResults
	(*HTTPResponseData)(nil),           // 25: kentik.synthetics.v202202.HTTPResponseData
	(*HTTPResults)(nil),                // 26: kentik.synthetics.v202202.HTTPResults
	(*DNSResponseData)(nil),            // 27: kentik.synthetics.v202202.DNSResponseData
	(*DNSResults)(nil),                 // 28: kentik.synthetics.v202202.DNSResults
	(*TaskResults)(nil),                // 29: kentik.synthetics.v202202.TaskResults
	(*AgentResults)(nil),               // 30: kentik.synthetics.v202202.AgentResults
	(*TestResults)(nil),                // 31: kentik.synthetics.v202202.TestResults
	(*Stats)(nil),                      // 32: kentik.synthetics.v202202.Stats
	(*Location)(nil),                   // 33: kentik.synthetics.v202202.Location
	(*NetNode)(nil),                    // 34: kentik.synthetics.v202202.NetNode
	(*TraceHop)(nil),                   // 35: kentik.synthetics.v202202.TraceHop
	(*PathTrace)(nil),                  // 36: kentik.synthetics.v202202.PathTrace
	(*Path)(nil),                       // 37: kentik.synthetics.v202202.Path
	(*GetResultsForTestsRequest)(nil),  // 38: kentik.synthetics.v202202.GetResultsForTestsRequest
	(*GetResultsForTestsResponse)(nil), // 39: kentik.synthetics.v202202.GetResultsForTestsResponse
	(*GetTraceForTestRequest)(nil),     // 40: kentik.synthetics.v202202.GetTraceForTestRequest
	(*GetTraceForTestResponse)(nil),    // 41: kentik.synthetics.v202202.GetTraceForTestResponse
	(*ListAgentsRequest)(nil),          // 42: kentik.synthetics.v202202.ListAgentsRequest
	(*ListAgentsResponse)(nil),         // 43: kentik.synthetics.v202202.ListAgentsResponse
	(*GetAgentRequest)(nil),            // 44: kentik.synthetics.v202202.GetAgentRequest
	(*GetAgentResponse)(nil),           // 45: kentik.synthetics.v202202.GetAgentResponse
	(*UpdateAgentRequest)(nil),         // 46: kentik.synthetics.v202202.UpdateAgentRequest
	(*UpdateAgentResponse)(nil),        // 47: kentik.synthetics.v202202.UpdateAgentResponse
	(*DeleteAgentRequest)(nil),         // 48: kentik.synthetics.v202202.DeleteAgentRequest
	(*DeleteAgentResponse)(nil),        // 49: kentik.synthetics.v202202.DeleteAgentResponse
	(*ListTestsRequest)(nil),           // 50: kentik.synthetics.v202202.ListTestsRequest
	(*ListTestsResponse)(nil),          // 51: kentik.synthetics.v202202.ListTestsResponse
	(*CreateTestRequest)(nil),          // 52: kentik.synthetics.v202202.CreateTestRequest
	(*CreateTestResponse)(nil),         // 53: kentik.synthetics.v202202.CreateTestResponse
	(*GetTestRequest)(nil),             // 54: kentik.synthetics.v202202.GetTestRequest
	(*GetTestResponse)(nil),            // 55: kentik.synthetics.v202202.GetTestResponse
	(*UpdateTestRequest)(nil),          // 56: kentik.synthetics.v202202.UpdateTestRequest
	(*UpdateTestResponse)(nil),         // 57: kentik.synthetics.v202202.UpdateTestResponse
	(*DeleteTestRequest)(nil),          // 58: kentik.synthetics.v202202.DeleteTestRequest
	(*DeleteTestResponse)(nil),         // 59: kentik.synthetics.v202202.DeleteTestResponse
	(*SetTestStatusRequest)(nil),       // 60: kentik.synthetics.v202202.SetTestStatusRequest
	(*SetTestStatusResponse)(nil),      // 61: kentik.synthetics.v202202.SetTestStatusResponse
	(*AgentMetadata_IpValue)(nil),      // 62: kentik.synthetics.v202202.AgentMetadata.IpValue
	nil,                                // 63: kentik.synthetics.v202202.UrlTest.HeadersEntry
	nil,                                // 64: kentik.synthetics.v202202.PageLoadTest.HeadersEntry
	nil,                                // 65: kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntry
	nil,                                // 66: kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry
	(*timestamppb.Timestamp)(nil),      // 67: google.protobuf.Timestamp
}
var file_kentik_synthetics_v202202_synthetics_proto_depIdxs = []int32{
	3,  // 0: kentik.synthetics.v202202.Agent.status:type_name -> kentik.synthetics.v202202.AgentStatus
	67, // 1: kentik.synthetics.v202202.Agent.last_authed:type_name -> google.protobuf.Timestamp
	1,  // 2: kentik.synthetics.v202202.Agent.family:type_name -> kentik.synthetics.v202202.IPFamily
	0,  // 3: kentik.synthetics.v202202.Agent.agent_impl:type_name -> kentik.synthetics.v202202.ImplementType
	6,  // 4: kentik.synthetics.v202202.Agent.metadata:type_name -> kentik.synthetics.v202202.AgentMetadata
	62, // 5: kentik.synthetics.v202202.AgentMetadata.private_ipv4_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	62, // 6: kentik.synthetics.v202202.AgentMetadata.public_ipv4_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	62, // 7: kentik.synthetics.v202202.AgentMetadata.private_ipv6_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	62, // 8: kentik.synthetics.v202202.AgentMetadata.public_ipv6_addresses:type_name -> kentik.synthetics.v202202.AgentMetadata.IpValue
	2,  // 9: kentik.synthetics.v202202.Test.status:type_name -> kentik.synthetics.v202202.TestStatus
	9,  // 10: kentik.synthetics.v202202.Test.settings:type_name -> kentik.synthetics.v202202.TestSettings
	67, // 11: kentik.synthetics.v202202.Test.cdate:type_name -> google.protobuf.Timestamp
	67, // 12: kentik.synthetics.v202202.Test.edate:type_name -> google.protobuf.Timestamp
	7,  // 13: kentik.synthetics.v202202.Test.created_by:type_name -> kentik.synthetics.v202202.UserInfo
	7,  // 14: kentik.synthetics.v202202.Test.last_updated_by:type_name -> kentik.synthetics.v202202.UserInfo
	14, // 15: kentik.synthetics.v202202.TestSettings.hostname:type_name -> kentik.synthetics.v202202.HostnameTest
	15, // 16: kentik.synthetics.v202202.TestSettings.ip:type_name -> kentik.synthetics.v202202.IpTest
	16, // 17: kentik.synthetics.v202202.TestSettings.agent:type_name -> kentik.synthetics.v202202.AgentTest
	17, // 18: kentik.synthetics.v202202.TestSettings.flow:type_name -> kentik.synthetics.v202202.FlowTest
	18, // 19: kentik.synthetics.v202202.TestSettings.dns:type_name -> kentik.synthetics.v202202.DnsTest
	19, // 20: kentik.synthetics.v202202.TestSettings.url:type_name -> kentik.synthetics.v202202.UrlTest
	15, // 21: kentik.synthetics.v202202.TestSettings.network_grid:type_name -> kentik.synthetics.v202202.IpTest
	20, // 22: kentik.synthetics.v202202.TestSettings.page_load:type_name -> kentik.synthetics.v202202.PageLoadTest
	18, // 23: kentik.synthetics.v202202.TestSettings.dns_grid:type_name -> kentik.synthetics.v202202.DnsTest
	21, // 24: kentik.synthetics.v202202.TestSettings.network_mesh:type_name -> kentik.synthetics.v202202.NetworkMeshTest
	13, // 25: kentik.synthetics.v202202.TestSettings.health_settings:type_name -> kentik.synthetics.v202202.HealthSettings
	10, // 26: kentik.synthetics.v202202.TestSettings.ping:type_name -> kentik.synthetics.v202202.TestPingSettings
	11, // 27: kentik.synthetics.v202202.TestSettings.trace:type_name -> kentik.synthetics.v202202.TestTraceSettings
	1,  // 28: kentik.synthetics.v202202.TestSettings.family:type_name -> kentik.synthetics.v202202.IPFamily
	12, // 29: kentik.synthetics.v202202.HealthSettings.activation:type_name -> kentik.synthetics.v202202.ActivationSettings
	4,  // 30: kentik.synthetics.v202202.DnsTest.record_type:type_name -> kentik.synthetics.v202202.DNSRecord
	63, // 31: kentik.synthetics.v202202.UrlTest.headers:type_name -> kentik.synthetics.v202202.UrlTest.HeadersEntry
	64, // 32: kentik.synthetics.v202202.PageLoadTest.headers:type_name -> kentik.synthetics.v202202.PageLoadTest.HeadersEntry
	65, // 33: kentik.synthetics.v202202.PageLoadTest.css_selectors:type_name -> kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntry
	23, // 34: kentik.synthetics.v202202.PingResults.packet_loss:type_name -> kentik.synthetics.v202202.PacketLossData
	22, // 35: kentik.synthetics.v202202.PingResults.latency:type_name -> kentik.synthetics.v202202.MetricData
	22, // 36: kentik.synthetics.v202202.PingResults.jitter:type_name -> kentik.synthetics.v202202.MetricData
	22, // 37: kentik.synthetics.v202202.HTTPResults.latency:type_name -> kentik.synthetics.v202202.MetricData
	25, // 38: kentik.synthetics.v202202.HTTPResults.response:type_name -> kentik.synthetics.v202202.HTTPResponseData
	22, // 39: kentik.synthetics.v202202.DNSResults.latency:type_name -> kentik.synthetics.v202202.MetricData
	27, // 40: kentik.synthetics.v202202.DNSResults.response:type_name -> kentik.synthetics.v202202.DNSResponseData
	24, // 41: kentik.synthetics.v202202.TaskResults.ping:type_name -> kentik.synthetics.v202202.PingResults
	26, // 42: kentik.synthetics.v202202.TaskResults.http:type_name -> kentik.synthetics.v202202.HTTPResults
	28, // 43: kentik.synthetics.v202202.TaskResults.dns:type_name -> kentik.synthetics.v202202.DNSResults
	29, // 44: kentik.synthetics.v202202.AgentResults.tasks:type_name -> kentik.synthetics.v202202.TaskResults
	67, // 45: kentik.synthetics.v202202.TestResults.time:type_name -> google.protobuf.Timestamp
	30, // 46: kentik.synthetics.v202202.TestResults.agents:type_name -> kentik.synthetics.v202202.AgentResults
	33, // 47: kentik.synthetics.v202202.NetNode.location:type_name -> kentik.synthetics.v202202.Location
	35, // 48: kentik.synthetics.v202202.PathTrace.hops:type_name -> kentik.synthetics.v202202.TraceHop
	32, // 49: kentik.synthetics.v202202.Path.hop_count:type_name -> kentik.synthetics.v202202.Stats
	36, // 50: kentik.synthetics.v202202.Path.traces:type_name -> kentik.synthetics.v202202.PathTrace
	67, // 51: kentik.synthetics.v202202.Path.time:type_name -> google.protobuf.Timestamp
	67, // 52: kentik.synthetics.v202202.GetResultsForTestsRequest.start_time:type_name -> google.protobuf.Timestamp
	67, // 53: kentik.synthetics.v202202.GetResultsForTestsRequest.end_time:type_name -> google.protobuf.Timestamp
	31, // 54: kentik.synthetics.v202202.GetResultsForTestsResponse.results:type_name -> kentik.synthetics.v202202.TestResults
	67, // 55: kentik.synthetics.v202202.GetTraceForTestRequest.start_time:type_name -> google.protobuf.Timestamp
	67, // 56: kentik.synthetics.v202202.GetTraceForTestRequest.end_time:type_name -> google.protobuf.Timestamp
	66, // 57: kentik.synthetics.v202202.GetTraceForTestResponse.nodes:type_name -> kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry
	37, // 58: kentik.synthetics.v202202.GetTraceForTestResponse.paths:type_name -> kentik.synthetics.v202202.Path
	5,  // 59: kentik.synthetics.v202202.ListAgentsResponse.agents:type_name -> kentik.synthetics.v202202.Agent
	5,  // 60: kentik.synthetics.v202202.GetAgentResponse.agent:type_name -> kentik.synthetics.v202202.Agent
	5,  // 61: kentik.synthetics.v202202.UpdateAgentRequest.agent:type_name -> kentik.synthetics.v202202.Agent
	5,  // 62: kentik.synthetics.v202202.UpdateAgentResponse.agent:type_name -> kentik.synthetics.v202202.Agent
	8,  // 63: kentik.synthetics.v202202.ListTestsResponse.tests:type_name -> kentik.synthetics.v202202.Test
	8,  // 64: kentik.synthetics.v202202.CreateTestRequest.test:type_name -> kentik.synthetics.v202202.Test
	8,  // 65: kentik.synthetics.v202202.CreateTestResponse.test:type_name -> kentik.synthetics.v202202.Test
	8,  // 66: kentik.synthetics.v202202.GetTestResponse.test:type_name -> kentik.synthetics.v202202.Test
	8,  // 67: kentik.synthetics.v202202.UpdateTestRequest.test:type_name -> kentik.synthetics.v202202.Test
	8,  // 68: kentik.synthetics.v202202.UpdateTestResponse.test:type_name -> kentik.synthetics.v202202.Test
	2,  // 69: kentik.synthetics.v202202.SetTestStatusRequest.status:type_name -> kentik.synthetics.v202202.TestStatus
	34, // 70: kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry.value:type_name -> kentik.synthetics.v202202.NetNode
	38, // 71: kentik.synthetics.v202202.SyntheticsDataService.GetResultsForTests:input_type -> kentik.synthetics.v202202.GetResultsForTestsRequest
	40, // 72: kentik.synthetics.v202202.SyntheticsDataService.GetTraceForTest:input_type -> kentik.synthetics.v202202.GetTraceForTestRequest
	42, // 73: kentik.synthetics.v202202.SyntheticsAdminService.ListAgents:input_type -> kentik.synthetics.v202202.ListAgentsRequest
	44, // 74: kentik.synthetics.v202202.SyntheticsAdminService.GetAgent:input_type -> kentik.synthetics.v202202.GetAgentRequest
	46, // 75: kentik.synthetics.v202202.SyntheticsAdminService.UpdateAgent:input_type -> kentik.synthetics.v202202.UpdateAgentRequest
	48, // 76: kentik.synthetics.v202202.SyntheticsAdminService.DeleteAgent:input_type -> kentik.synthetics.v202202.DeleteAgentRequest
	50, // 77: kentik.synthetics.v202202.SyntheticsAdminService.ListTests:input_type -> kentik.synthetics.v202202.ListTestsRequest
	52, // 78: kentik.synthetics.v202202.SyntheticsAdminService.CreateTest:input_type -> kentik.synthetics.v202202.CreateTestRequest
	54, // 79: kentik.synthetics.v202202.SyntheticsAdminService.GetTest:input_type -> kentik.synthetics.v202202.GetTestRequest
	56, // 80: kentik.synthetics.v202202.SyntheticsAdminService.UpdateTest:input_type -> kentik.synthetics.v202202.UpdateTestRequest
	58, // 81: kentik.synthetics.v202202.SyntheticsAdminService.DeleteTest:input_type -> kentik.synthetics.v202202.DeleteTestRequest
	60, // 82: kentik.synthetics.v202202.SyntheticsAdminService.SetTestStatus:input_type -> kentik.synthetics.v202202.SetTestStatusRequest
	39, // 83: kentik.synthetics.v202202.SyntheticsDataService.GetResultsForTests:output_type -> kentik.synthetics.v202202.GetResultsForTestsResponse
	41, // 84: kentik.synthetics.v202202.SyntheticsDataService.GetTraceForTest:output_type -> kentik.synthetics.v202202.GetTraceForTestResponse
	43, // 85: kentik.synthetics.v202202.SyntheticsAdminService.ListAgents:output_type -> kentik.synthetics.v202202.ListAgentsResponse
	45, // 86: kentik.synthetics.v202202.SyntheticsAdminService.GetAgent:output_type -> kentik.synthetics.v202202.GetAgentResponse
	47, // 87: kentik.synthetics.v202202.SyntheticsAdminService.UpdateAgent:output_type -> kentik.synthetics.v202202.UpdateAgentResponse
	49, // 88: kentik.synthetics.v202202.SyntheticsAdminService.DeleteAgent:output_type -> kentik.synthetics.v202202.DeleteAgentResponse
	51, // 89: kentik.synthetics.v202202.SyntheticsAdminService.ListTests:output_type -> kentik.synthetics.v202202.ListTestsResponse
	53, // 90: kentik.synthetics.v202202.SyntheticsAdminService.CreateTest:output_type -> kentik.synthetics.v202202.CreateTestResponse
	55, // 91: kentik.synthetics.v202202.SyntheticsAdminService.GetTest:output_type -> kentik.synthetics.v202202.GetTestResponse
	57, // 92: kentik.synthetics.v202202.SyntheticsAdminService.UpdateTest:output_type -> kentik.synthetics.v202202.UpdateTestResponse
	59, // 93: kentik.synthetics.v202202.SyntheticsAdminService.DeleteTest:output_type -> kentik.synthetics.v202202.DeleteTestResponse
	61, // 94: kentik.synthetics.v202202.SyntheticsAdminService.SetTestStatus:output_type -> kentik.synthetics.v202202.SetTestStatusResponse
	83, // [83:95] is the sub-list for method output_type
	71, // [71:83] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_kentik_synthetics_v202202_synthetics_proto_init() }
func file_kentik_synthetics_v202202_synthetics_proto_init() {
	if File_kentik_synthetics_v202202_synthetics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTraceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnameTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageLoadTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMeshTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketLossData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultsForTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultsForTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTestStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTestStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202202_synthetics_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetadata_IpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_synthetics_v202202_synthetics_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TestSettings_Hostname)(nil),
		(*TestSettings_Ip)(nil),
		(*TestSettings_Agent)(nil),
		(*TestSettings_Flow)(nil),
		(*TestSettings_Dns)(nil),
		(*TestSettings_Url)(nil),
		(*TestSettings_NetworkGrid)(nil),
		(*TestSettings_PageLoad)(nil),
		(*TestSettings_DnsGrid)(nil),
		(*TestSettings_NetworkMesh)(nil),
	}
	file_kentik_synthetics_v202202_synthetics_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*TaskResults_Ping)(nil),
		(*TaskResults_Http)(nil),
		(*TaskResults_Dns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_synthetics_v202202_synthetics_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kentik_synthetics_v202202_synthetics_proto_goTypes,
		DependencyIndexes: file_kentik_synthetics_v202202_synthetics_proto_depIdxs,
		EnumInfos:         file_kentik_synthetics_v202202_synthetics_proto_enumTypes,
		MessageInfos:      file_kentik_synthetics_v202202_synthetics_proto_msgTypes,
	}.Build()
	File_kentik_synthetics_v202202_synthetics_proto = out.File
	file_kentik_synthetics_v202202_synthetics_proto_rawDesc = nil
	file_kentik_synthetics_v202202_synthetics_proto_goTypes = nil
	file_kentik_synthetics_v202202_synthetics_proto_depIdxs = nil
}
