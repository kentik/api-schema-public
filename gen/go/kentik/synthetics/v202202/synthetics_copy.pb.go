// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/synthetics/v202202/synthetics.proto

package synthetics

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Agent) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Agent:
		x.Id = v.GetId()
		x.SiteName = v.GetSiteName()
		x.Status = v.GetStatus()
		x.Alias = v.GetAlias()
		x.Type = v.GetType()
		x.Os = v.GetOs()
		x.Ip = v.GetIp()
		x.Lat = v.GetLat()
		x.Long = v.GetLong()
		x.LastAuthed = v.GetLastAuthed()
		x.Family = v.GetFamily()
		x.Asn = v.GetAsn()
		x.SiteId = v.GetSiteId()
		x.Version = v.GetVersion()
		x.City = v.GetCity()
		x.Region = v.GetRegion()
		x.Country = v.GetCountry()
		x.TestIds = v.GetTestIds()
		x.LocalIp = v.GetLocalIp()
		x.CloudRegion = v.GetCloudRegion()
		x.CloudProvider = v.GetCloudProvider()
		x.AgentImpl = v.GetAgentImpl()
		x.Labels = v.GetLabels()
		x.Metadata = v.GetMetadata()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetSiteName() string }); ok {
			x.SiteName = v.GetSiteName()
		}
		if v, ok := v.(interface{ GetStatus() AgentStatus }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetAlias() string }); ok {
			x.Alias = v.GetAlias()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetOs() string }); ok {
			x.Os = v.GetOs()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetLat() float64 }); ok {
			x.Lat = v.GetLat()
		}
		if v, ok := v.(interface{ GetLong() float64 }); ok {
			x.Long = v.GetLong()
		}
		if v, ok := v.(interface{ GetLastAuthed() *timestamppb.Timestamp }); ok {
			x.LastAuthed = v.GetLastAuthed()
		}
		if v, ok := v.(interface{ GetFamily() IPFamily }); ok {
			x.Family = v.GetFamily()
		}
		if v, ok := v.(interface{ GetAsn() uint32 }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetSiteId() string }); ok {
			x.SiteId = v.GetSiteId()
		}
		if v, ok := v.(interface{ GetVersion() string }); ok {
			x.Version = v.GetVersion()
		}
		if v, ok := v.(interface{ GetCity() string }); ok {
			x.City = v.GetCity()
		}
		if v, ok := v.(interface{ GetRegion() string }); ok {
			x.Region = v.GetRegion()
		}
		if v, ok := v.(interface{ GetCountry() string }); ok {
			x.Country = v.GetCountry()
		}
		if v, ok := v.(interface{ GetTestIds() []string }); ok {
			x.TestIds = v.GetTestIds()
		}
		if v, ok := v.(interface{ GetLocalIp() string }); ok {
			x.LocalIp = v.GetLocalIp()
		}
		if v, ok := v.(interface{ GetCloudRegion() string }); ok {
			x.CloudRegion = v.GetCloudRegion()
		}
		if v, ok := v.(interface{ GetCloudProvider() string }); ok {
			x.CloudProvider = v.GetCloudProvider()
		}
		if v, ok := v.(interface{ GetAgentImpl() ImplementType }); ok {
			x.AgentImpl = v.GetAgentImpl()
		}
		if v, ok := v.(interface{ GetLabels() []string }); ok {
			x.Labels = v.GetLabels()
		}
		if v, ok := v.(interface{ GetMetadata() *AgentMetadata }); ok {
			x.Metadata = v.GetMetadata()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Agent) Proto_ShallowClone() (c *Agent) {
	if x != nil {
		c = new(Agent)
		c.Id = x.Id
		c.SiteName = x.SiteName
		c.Status = x.Status
		c.Alias = x.Alias
		c.Type = x.Type
		c.Os = x.Os
		c.Ip = x.Ip
		c.Lat = x.Lat
		c.Long = x.Long
		c.LastAuthed = x.LastAuthed
		c.Family = x.Family
		c.Asn = x.Asn
		c.SiteId = x.SiteId
		c.Version = x.Version
		c.City = x.City
		c.Region = x.Region
		c.Country = x.Country
		c.TestIds = x.TestIds
		c.LocalIp = x.LocalIp
		c.CloudRegion = x.CloudRegion
		c.CloudProvider = x.CloudProvider
		c.AgentImpl = x.AgentImpl
		c.Labels = x.Labels
		c.Metadata = x.Metadata
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentMetadata) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentMetadata:
		x.PrivateIpv4Addresses = v.GetPrivateIpv4Addresses()
		x.PublicIpv4Addresses = v.GetPublicIpv4Addresses()
		x.PrivateIpv6Addresses = v.GetPrivateIpv6Addresses()
		x.PublicIpv6Addresses = v.GetPublicIpv6Addresses()
	default:
		if v, ok := v.(interface {
			GetPrivateIpv4Addresses() []*AgentMetadata_IpValue
		}); ok {
			x.PrivateIpv4Addresses = v.GetPrivateIpv4Addresses()
		}
		if v, ok := v.(interface {
			GetPublicIpv4Addresses() []*AgentMetadata_IpValue
		}); ok {
			x.PublicIpv4Addresses = v.GetPublicIpv4Addresses()
		}
		if v, ok := v.(interface {
			GetPrivateIpv6Addresses() []*AgentMetadata_IpValue
		}); ok {
			x.PrivateIpv6Addresses = v.GetPrivateIpv6Addresses()
		}
		if v, ok := v.(interface {
			GetPublicIpv6Addresses() []*AgentMetadata_IpValue
		}); ok {
			x.PublicIpv6Addresses = v.GetPublicIpv6Addresses()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentMetadata) Proto_ShallowClone() (c *AgentMetadata) {
	if x != nil {
		c = new(AgentMetadata)
		c.PrivateIpv4Addresses = x.PrivateIpv4Addresses
		c.PublicIpv4Addresses = x.PublicIpv4Addresses
		c.PrivateIpv6Addresses = x.PrivateIpv6Addresses
		c.PublicIpv6Addresses = x.PublicIpv6Addresses
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentMetadata_IpValue) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentMetadata_IpValue:
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetValue() string }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentMetadata_IpValue) Proto_ShallowClone() (c *AgentMetadata_IpValue) {
	if x != nil {
		c = new(AgentMetadata_IpValue)
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UserInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UserInfo:
		x.Id = v.GetId()
		x.Email = v.GetEmail()
		x.FullName = v.GetFullName()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetEmail() string }); ok {
			x.Email = v.GetEmail()
		}
		if v, ok := v.(interface{ GetFullName() string }); ok {
			x.FullName = v.GetFullName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UserInfo) Proto_ShallowClone() (c *UserInfo) {
	if x != nil {
		c = new(UserInfo)
		c.Id = x.Id
		c.Email = x.Email
		c.FullName = x.FullName
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Test) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Test:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Type = v.GetType()
		x.Status = v.GetStatus()
		x.Settings = v.GetSettings()
		x.Cdate = v.GetCdate()
		x.Edate = v.GetEdate()
		x.CreatedBy = v.GetCreatedBy()
		x.LastUpdatedBy = v.GetLastUpdatedBy()
		x.Labels = v.GetLabels()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetStatus() TestStatus }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetSettings() *TestSettings }); ok {
			x.Settings = v.GetSettings()
		}
		if v, ok := v.(interface{ GetCdate() *timestamppb.Timestamp }); ok {
			x.Cdate = v.GetCdate()
		}
		if v, ok := v.(interface{ GetEdate() *timestamppb.Timestamp }); ok {
			x.Edate = v.GetEdate()
		}
		if v, ok := v.(interface{ GetCreatedBy() *UserInfo }); ok {
			x.CreatedBy = v.GetCreatedBy()
		}
		if v, ok := v.(interface{ GetLastUpdatedBy() *UserInfo }); ok {
			x.LastUpdatedBy = v.GetLastUpdatedBy()
		}
		if v, ok := v.(interface{ GetLabels() []string }); ok {
			x.Labels = v.GetLabels()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Test) Proto_ShallowClone() (c *Test) {
	if x != nil {
		c = new(Test)
		c.Id = x.Id
		c.Name = x.Name
		c.Type = x.Type
		c.Status = x.Status
		c.Settings = x.Settings
		c.Cdate = x.Cdate
		c.Edate = x.Edate
		c.CreatedBy = x.CreatedBy
		c.LastUpdatedBy = x.LastUpdatedBy
		c.Labels = x.Labels
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestSettings:
		x.Definition = v.GetDefinition()
		x.AgentIds = v.GetAgentIds()
		x.Tasks = v.GetTasks()
		x.HealthSettings = v.GetHealthSettings()
		x.Ping = v.GetPing()
		x.Trace = v.GetTrace()
		x.Period = v.GetPeriod()
		x.Family = v.GetFamily()
		x.NotificationChannels = v.GetNotificationChannels()
		x.Notes = v.GetNotes()
	default:
		if v, ok := v.(interface {
			GetDefinition() isTestSettings_Definition
		}); ok {
			x.Definition = v.GetDefinition()
		} else {
			func() {
				if v, ok := v.(interface{ GetHostname() *HostnameTest }); ok {
					var defaultValue *HostnameTest
					if v := v.GetHostname(); v != defaultValue {
						x.Definition = &TestSettings_Hostname{Hostname: v}
						return
					}
				}
				if v, ok := v.(interface{ GetIp() *IpTest }); ok {
					var defaultValue *IpTest
					if v := v.GetIp(); v != defaultValue {
						x.Definition = &TestSettings_Ip{Ip: v}
						return
					}
				}
				if v, ok := v.(interface{ GetAgent() *AgentTest }); ok {
					var defaultValue *AgentTest
					if v := v.GetAgent(); v != defaultValue {
						x.Definition = &TestSettings_Agent{Agent: v}
						return
					}
				}
				if v, ok := v.(interface{ GetFlow() *FlowTest }); ok {
					var defaultValue *FlowTest
					if v := v.GetFlow(); v != defaultValue {
						x.Definition = &TestSettings_Flow{Flow: v}
						return
					}
				}
				if v, ok := v.(interface{ GetDns() *DnsTest }); ok {
					var defaultValue *DnsTest
					if v := v.GetDns(); v != defaultValue {
						x.Definition = &TestSettings_Dns{Dns: v}
						return
					}
				}
				if v, ok := v.(interface{ GetUrl() *UrlTest }); ok {
					var defaultValue *UrlTest
					if v := v.GetUrl(); v != defaultValue {
						x.Definition = &TestSettings_Url{Url: v}
						return
					}
				}
				if v, ok := v.(interface{ GetNetworkGrid() *IpTest }); ok {
					var defaultValue *IpTest
					if v := v.GetNetworkGrid(); v != defaultValue {
						x.Definition = &TestSettings_NetworkGrid{NetworkGrid: v}
						return
					}
				}
				if v, ok := v.(interface{ GetPageLoad() *PageLoadTest }); ok {
					var defaultValue *PageLoadTest
					if v := v.GetPageLoad(); v != defaultValue {
						x.Definition = &TestSettings_PageLoad{PageLoad: v}
						return
					}
				}
				if v, ok := v.(interface{ GetDnsGrid() *DnsTest }); ok {
					var defaultValue *DnsTest
					if v := v.GetDnsGrid(); v != defaultValue {
						x.Definition = &TestSettings_DnsGrid{DnsGrid: v}
						return
					}
				}
				if v, ok := v.(interface{ GetNetworkMesh() *NetworkMeshTest }); ok {
					var defaultValue *NetworkMeshTest
					if v := v.GetNetworkMesh(); v != defaultValue {
						x.Definition = &TestSettings_NetworkMesh{NetworkMesh: v}
						return
					}
				}
			}()
		}
		if v, ok := v.(interface{ GetAgentIds() []string }); ok {
			x.AgentIds = v.GetAgentIds()
		}
		if v, ok := v.(interface{ GetTasks() []string }); ok {
			x.Tasks = v.GetTasks()
		}
		if v, ok := v.(interface{ GetHealthSettings() *HealthSettings }); ok {
			x.HealthSettings = v.GetHealthSettings()
		}
		if v, ok := v.(interface{ GetPing() *TestPingSettings }); ok {
			x.Ping = v.GetPing()
		}
		if v, ok := v.(interface{ GetTrace() *TestTraceSettings }); ok {
			x.Trace = v.GetTrace()
		}
		if v, ok := v.(interface{ GetPeriod() uint32 }); ok {
			x.Period = v.GetPeriod()
		}
		if v, ok := v.(interface{ GetFamily() IPFamily }); ok {
			x.Family = v.GetFamily()
		}
		if v, ok := v.(interface{ GetNotificationChannels() []string }); ok {
			x.NotificationChannels = v.GetNotificationChannels()
		}
		if v, ok := v.(interface{ GetNotes() string }); ok {
			x.Notes = v.GetNotes()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestSettings) Proto_ShallowClone() (c *TestSettings) {
	if x != nil {
		c = new(TestSettings)
		c.Definition = x.Definition
		c.AgentIds = x.AgentIds
		c.Tasks = x.Tasks
		c.HealthSettings = x.HealthSettings
		c.Ping = x.Ping
		c.Trace = x.Trace
		c.Period = x.Period
		c.Family = x.Family
		c.NotificationChannels = x.NotificationChannels
		c.Notes = x.Notes
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestPingSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestPingSettings:
		x.Count = v.GetCount()
		x.Protocol = v.GetProtocol()
		x.Port = v.GetPort()
		x.Timeout = v.GetTimeout()
		x.Delay = v.GetDelay()
		x.Dscp = v.GetDscp()
	default:
		if v, ok := v.(interface{ GetCount() uint32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetProtocol() string }); ok {
			x.Protocol = v.GetProtocol()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
		if v, ok := v.(interface{ GetTimeout() uint32 }); ok {
			x.Timeout = v.GetTimeout()
		}
		if v, ok := v.(interface{ GetDelay() float32 }); ok {
			x.Delay = v.GetDelay()
		}
		if v, ok := v.(interface{ GetDscp() uint32 }); ok {
			x.Dscp = v.GetDscp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestPingSettings) Proto_ShallowClone() (c *TestPingSettings) {
	if x != nil {
		c = new(TestPingSettings)
		c.Count = x.Count
		c.Protocol = x.Protocol
		c.Port = x.Port
		c.Timeout = x.Timeout
		c.Delay = x.Delay
		c.Dscp = x.Dscp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestTraceSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestTraceSettings:
		x.Count = v.GetCount()
		x.Protocol = v.GetProtocol()
		x.Port = v.GetPort()
		x.Timeout = v.GetTimeout()
		x.Limit = v.GetLimit()
		x.Delay = v.GetDelay()
		x.Dscp = v.GetDscp()
	default:
		if v, ok := v.(interface{ GetCount() uint32 }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetProtocol() string }); ok {
			x.Protocol = v.GetProtocol()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
		if v, ok := v.(interface{ GetTimeout() uint32 }); ok {
			x.Timeout = v.GetTimeout()
		}
		if v, ok := v.(interface{ GetLimit() uint32 }); ok {
			x.Limit = v.GetLimit()
		}
		if v, ok := v.(interface{ GetDelay() float32 }); ok {
			x.Delay = v.GetDelay()
		}
		if v, ok := v.(interface{ GetDscp() uint32 }); ok {
			x.Dscp = v.GetDscp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestTraceSettings) Proto_ShallowClone() (c *TestTraceSettings) {
	if x != nil {
		c = new(TestTraceSettings)
		c.Count = x.Count
		c.Protocol = x.Protocol
		c.Port = x.Port
		c.Timeout = x.Timeout
		c.Limit = x.Limit
		c.Delay = x.Delay
		c.Dscp = x.Dscp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ActivationSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ActivationSettings:
		x.GracePeriod = v.GetGracePeriod()
		x.TimeUnit = v.GetTimeUnit()
		x.TimeWindow = v.GetTimeWindow()
		x.Times = v.GetTimes()
	default:
		if v, ok := v.(interface{ GetGracePeriod() string }); ok {
			x.GracePeriod = v.GetGracePeriod()
		}
		if v, ok := v.(interface{ GetTimeUnit() string }); ok {
			x.TimeUnit = v.GetTimeUnit()
		}
		if v, ok := v.(interface{ GetTimeWindow() string }); ok {
			x.TimeWindow = v.GetTimeWindow()
		}
		if v, ok := v.(interface{ GetTimes() string }); ok {
			x.Times = v.GetTimes()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ActivationSettings) Proto_ShallowClone() (c *ActivationSettings) {
	if x != nil {
		c = new(ActivationSettings)
		c.GracePeriod = x.GracePeriod
		c.TimeUnit = x.TimeUnit
		c.TimeWindow = x.TimeWindow
		c.Times = x.Times
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HealthSettings) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HealthSettings:
		x.LatencyCritical = v.GetLatencyCritical()
		x.LatencyWarning = v.GetLatencyWarning()
		x.PacketLossCritical = v.GetPacketLossCritical()
		x.PacketLossWarning = v.GetPacketLossWarning()
		x.JitterCritical = v.GetJitterCritical()
		x.JitterWarning = v.GetJitterWarning()
		x.HttpLatencyCritical = v.GetHttpLatencyCritical()
		x.HttpLatencyWarning = v.GetHttpLatencyWarning()
		x.HttpValidCodes = v.GetHttpValidCodes()
		x.DnsValidCodes = v.GetDnsValidCodes()
		x.LatencyCriticalStddev = v.GetLatencyCriticalStddev()
		x.LatencyWarningStddev = v.GetLatencyWarningStddev()
		x.JitterCriticalStddev = v.GetJitterCriticalStddev()
		x.JitterWarningStddev = v.GetJitterWarningStddev()
		x.HttpLatencyCriticalStddev = v.GetHttpLatencyCriticalStddev()
		x.HttpLatencyWarningStddev = v.GetHttpLatencyWarningStddev()
		x.UnhealthySubtestThreshold = v.GetUnhealthySubtestThreshold()
		x.Activation = v.GetActivation()
		x.CertExpiryWarning = v.GetCertExpiryWarning()
		x.CertExpiryCritical = v.GetCertExpiryCritical()
		x.DnsValidIps = v.GetDnsValidIps()
	default:
		if v, ok := v.(interface{ GetLatencyCritical() float32 }); ok {
			x.LatencyCritical = v.GetLatencyCritical()
		}
		if v, ok := v.(interface{ GetLatencyWarning() float32 }); ok {
			x.LatencyWarning = v.GetLatencyWarning()
		}
		if v, ok := v.(interface{ GetPacketLossCritical() float32 }); ok {
			x.PacketLossCritical = v.GetPacketLossCritical()
		}
		if v, ok := v.(interface{ GetPacketLossWarning() float32 }); ok {
			x.PacketLossWarning = v.GetPacketLossWarning()
		}
		if v, ok := v.(interface{ GetJitterCritical() float32 }); ok {
			x.JitterCritical = v.GetJitterCritical()
		}
		if v, ok := v.(interface{ GetJitterWarning() float32 }); ok {
			x.JitterWarning = v.GetJitterWarning()
		}
		if v, ok := v.(interface{ GetHttpLatencyCritical() float32 }); ok {
			x.HttpLatencyCritical = v.GetHttpLatencyCritical()
		}
		if v, ok := v.(interface{ GetHttpLatencyWarning() float32 }); ok {
			x.HttpLatencyWarning = v.GetHttpLatencyWarning()
		}
		if v, ok := v.(interface{ GetHttpValidCodes() []uint32 }); ok {
			x.HttpValidCodes = v.GetHttpValidCodes()
		}
		if v, ok := v.(interface{ GetDnsValidCodes() []uint32 }); ok {
			x.DnsValidCodes = v.GetDnsValidCodes()
		}
		if v, ok := v.(interface{ GetLatencyCriticalStddev() float32 }); ok {
			x.LatencyCriticalStddev = v.GetLatencyCriticalStddev()
		}
		if v, ok := v.(interface{ GetLatencyWarningStddev() float32 }); ok {
			x.LatencyWarningStddev = v.GetLatencyWarningStddev()
		}
		if v, ok := v.(interface{ GetJitterCriticalStddev() float32 }); ok {
			x.JitterCriticalStddev = v.GetJitterCriticalStddev()
		}
		if v, ok := v.(interface{ GetJitterWarningStddev() float32 }); ok {
			x.JitterWarningStddev = v.GetJitterWarningStddev()
		}
		if v, ok := v.(interface{ GetHttpLatencyCriticalStddev() float32 }); ok {
			x.HttpLatencyCriticalStddev = v.GetHttpLatencyCriticalStddev()
		}
		if v, ok := v.(interface{ GetHttpLatencyWarningStddev() float32 }); ok {
			x.HttpLatencyWarningStddev = v.GetHttpLatencyWarningStddev()
		}
		if v, ok := v.(interface{ GetUnhealthySubtestThreshold() uint32 }); ok {
			x.UnhealthySubtestThreshold = v.GetUnhealthySubtestThreshold()
		}
		if v, ok := v.(interface{ GetActivation() *ActivationSettings }); ok {
			x.Activation = v.GetActivation()
		}
		if v, ok := v.(interface{ GetCertExpiryWarning() uint32 }); ok {
			x.CertExpiryWarning = v.GetCertExpiryWarning()
		}
		if v, ok := v.(interface{ GetCertExpiryCritical() uint32 }); ok {
			x.CertExpiryCritical = v.GetCertExpiryCritical()
		}
		if v, ok := v.(interface{ GetDnsValidIps() string }); ok {
			x.DnsValidIps = v.GetDnsValidIps()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HealthSettings) Proto_ShallowClone() (c *HealthSettings) {
	if x != nil {
		c = new(HealthSettings)
		c.LatencyCritical = x.LatencyCritical
		c.LatencyWarning = x.LatencyWarning
		c.PacketLossCritical = x.PacketLossCritical
		c.PacketLossWarning = x.PacketLossWarning
		c.JitterCritical = x.JitterCritical
		c.JitterWarning = x.JitterWarning
		c.HttpLatencyCritical = x.HttpLatencyCritical
		c.HttpLatencyWarning = x.HttpLatencyWarning
		c.HttpValidCodes = x.HttpValidCodes
		c.DnsValidCodes = x.DnsValidCodes
		c.LatencyCriticalStddev = x.LatencyCriticalStddev
		c.LatencyWarningStddev = x.LatencyWarningStddev
		c.JitterCriticalStddev = x.JitterCriticalStddev
		c.JitterWarningStddev = x.JitterWarningStddev
		c.HttpLatencyCriticalStddev = x.HttpLatencyCriticalStddev
		c.HttpLatencyWarningStddev = x.HttpLatencyWarningStddev
		c.UnhealthySubtestThreshold = x.UnhealthySubtestThreshold
		c.Activation = x.Activation
		c.CertExpiryWarning = x.CertExpiryWarning
		c.CertExpiryCritical = x.CertExpiryCritical
		c.DnsValidIps = x.DnsValidIps
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HostnameTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HostnameTest:
		x.Target = v.GetTarget()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HostnameTest) Proto_ShallowClone() (c *HostnameTest) {
	if x != nil {
		c = new(HostnameTest)
		c.Target = x.Target
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *IpTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *IpTest:
		x.Targets = v.GetTargets()
	default:
		if v, ok := v.(interface{ GetTargets() []string }); ok {
			x.Targets = v.GetTargets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *IpTest) Proto_ShallowClone() (c *IpTest) {
	if x != nil {
		c = new(IpTest)
		c.Targets = x.Targets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentTest:
		x.Target = v.GetTarget()
		x.UseLocalIp = v.GetUseLocalIp()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetUseLocalIp() bool }); ok {
			x.UseLocalIp = v.GetUseLocalIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentTest) Proto_ShallowClone() (c *AgentTest) {
	if x != nil {
		c = new(AgentTest)
		c.Target = x.Target
		c.UseLocalIp = x.UseLocalIp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FlowTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FlowTest:
		x.Target = v.GetTarget()
		x.TargetRefreshIntervalMillis = v.GetTargetRefreshIntervalMillis()
		x.MaxProviders = v.GetMaxProviders()
		x.MaxIpTargets = v.GetMaxIpTargets()
		x.Type = v.GetType()
		x.InetDirection = v.GetInetDirection()
		x.Direction = v.GetDirection()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTargetRefreshIntervalMillis() uint32 }); ok {
			x.TargetRefreshIntervalMillis = v.GetTargetRefreshIntervalMillis()
		}
		if v, ok := v.(interface{ GetMaxProviders() uint32 }); ok {
			x.MaxProviders = v.GetMaxProviders()
		}
		if v, ok := v.(interface{ GetMaxIpTargets() uint32 }); ok {
			x.MaxIpTargets = v.GetMaxIpTargets()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetInetDirection() string }); ok {
			x.InetDirection = v.GetInetDirection()
		}
		if v, ok := v.(interface{ GetDirection() string }); ok {
			x.Direction = v.GetDirection()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FlowTest) Proto_ShallowClone() (c *FlowTest) {
	if x != nil {
		c = new(FlowTest)
		c.Target = x.Target
		c.TargetRefreshIntervalMillis = x.TargetRefreshIntervalMillis
		c.MaxProviders = x.MaxProviders
		c.MaxIpTargets = x.MaxIpTargets
		c.Type = x.Type
		c.InetDirection = x.InetDirection
		c.Direction = x.Direction
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DnsTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DnsTest:
		x.Target = v.GetTarget()
		x.Timeout = v.GetTimeout()
		x.RecordType = v.GetRecordType()
		x.Servers = v.GetServers()
		x.Port = v.GetPort()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTimeout() uint32 }); ok {
			x.Timeout = v.GetTimeout()
		}
		if v, ok := v.(interface{ GetRecordType() DNSRecord }); ok {
			x.RecordType = v.GetRecordType()
		}
		if v, ok := v.(interface{ GetServers() []string }); ok {
			x.Servers = v.GetServers()
		}
		if v, ok := v.(interface{ GetPort() uint32 }); ok {
			x.Port = v.GetPort()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DnsTest) Proto_ShallowClone() (c *DnsTest) {
	if x != nil {
		c = new(DnsTest)
		c.Target = x.Target
		c.Timeout = x.Timeout
		c.RecordType = x.RecordType
		c.Servers = x.Servers
		c.Port = x.Port
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UrlTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UrlTest:
		x.Target = v.GetTarget()
		x.Timeout = v.GetTimeout()
		x.Method = v.GetMethod()
		x.Headers = v.GetHeaders()
		x.Body = v.GetBody()
		x.IgnoreTlsErrors = v.GetIgnoreTlsErrors()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTimeout() uint32 }); ok {
			x.Timeout = v.GetTimeout()
		}
		if v, ok := v.(interface{ GetMethod() string }); ok {
			x.Method = v.GetMethod()
		}
		if v, ok := v.(interface{ GetHeaders() map[string]string }); ok {
			x.Headers = v.GetHeaders()
		}
		if v, ok := v.(interface{ GetBody() string }); ok {
			x.Body = v.GetBody()
		}
		if v, ok := v.(interface{ GetIgnoreTlsErrors() bool }); ok {
			x.IgnoreTlsErrors = v.GetIgnoreTlsErrors()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UrlTest) Proto_ShallowClone() (c *UrlTest) {
	if x != nil {
		c = new(UrlTest)
		c.Target = x.Target
		c.Timeout = x.Timeout
		c.Method = x.Method
		c.Headers = x.Headers
		c.Body = x.Body
		c.IgnoreTlsErrors = x.IgnoreTlsErrors
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PageLoadTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PageLoadTest:
		x.Target = v.GetTarget()
		x.Timeout = v.GetTimeout()
		x.Headers = v.GetHeaders()
		x.IgnoreTlsErrors = v.GetIgnoreTlsErrors()
		x.CssSelectors = v.GetCssSelectors()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTimeout() uint32 }); ok {
			x.Timeout = v.GetTimeout()
		}
		if v, ok := v.(interface{ GetHeaders() map[string]string }); ok {
			x.Headers = v.GetHeaders()
		}
		if v, ok := v.(interface{ GetIgnoreTlsErrors() bool }); ok {
			x.IgnoreTlsErrors = v.GetIgnoreTlsErrors()
		}
		if v, ok := v.(interface{ GetCssSelectors() map[string]string }); ok {
			x.CssSelectors = v.GetCssSelectors()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PageLoadTest) Proto_ShallowClone() (c *PageLoadTest) {
	if x != nil {
		c = new(PageLoadTest)
		c.Target = x.Target
		c.Timeout = x.Timeout
		c.Headers = x.Headers
		c.IgnoreTlsErrors = x.IgnoreTlsErrors
		c.CssSelectors = x.CssSelectors
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetworkMeshTest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetworkMeshTest:
		x.UseLocalIp = v.GetUseLocalIp()
	default:
		if v, ok := v.(interface{ GetUseLocalIp() bool }); ok {
			x.UseLocalIp = v.GetUseLocalIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetworkMeshTest) Proto_ShallowClone() (c *NetworkMeshTest) {
	if x != nil {
		c = new(NetworkMeshTest)
		c.UseLocalIp = x.UseLocalIp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MetricData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MetricData:
		x.Current = v.GetCurrent()
		x.RollingAvg = v.GetRollingAvg()
		x.RollingStddev = v.GetRollingStddev()
		x.Health = v.GetHealth()
	default:
		if v, ok := v.(interface{ GetCurrent() uint32 }); ok {
			x.Current = v.GetCurrent()
		}
		if v, ok := v.(interface{ GetRollingAvg() uint32 }); ok {
			x.RollingAvg = v.GetRollingAvg()
		}
		if v, ok := v.(interface{ GetRollingStddev() uint32 }); ok {
			x.RollingStddev = v.GetRollingStddev()
		}
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MetricData) Proto_ShallowClone() (c *MetricData) {
	if x != nil {
		c = new(MetricData)
		c.Current = x.Current
		c.RollingAvg = x.RollingAvg
		c.RollingStddev = x.RollingStddev
		c.Health = x.Health
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PacketLossData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PacketLossData:
		x.Current = v.GetCurrent()
		x.Health = v.GetHealth()
	default:
		if v, ok := v.(interface{ GetCurrent() float64 }); ok {
			x.Current = v.GetCurrent()
		}
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PacketLossData) Proto_ShallowClone() (c *PacketLossData) {
	if x != nil {
		c = new(PacketLossData)
		c.Current = x.Current
		c.Health = x.Health
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PingResults) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PingResults:
		x.Target = v.GetTarget()
		x.PacketLoss = v.GetPacketLoss()
		x.Latency = v.GetLatency()
		x.Jitter = v.GetJitter()
		x.DstIp = v.GetDstIp()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetPacketLoss() *PacketLossData }); ok {
			x.PacketLoss = v.GetPacketLoss()
		}
		if v, ok := v.(interface{ GetLatency() *MetricData }); ok {
			x.Latency = v.GetLatency()
		}
		if v, ok := v.(interface{ GetJitter() *MetricData }); ok {
			x.Jitter = v.GetJitter()
		}
		if v, ok := v.(interface{ GetDstIp() string }); ok {
			x.DstIp = v.GetDstIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PingResults) Proto_ShallowClone() (c *PingResults) {
	if x != nil {
		c = new(PingResults)
		c.Target = x.Target
		c.PacketLoss = x.PacketLoss
		c.Latency = x.Latency
		c.Jitter = x.Jitter
		c.DstIp = x.DstIp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HTTPResponseData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HTTPResponseData:
		x.Status = v.GetStatus()
		x.Size = v.GetSize()
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetStatus() uint32 }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetSize() uint32 }); ok {
			x.Size = v.GetSize()
		}
		if v, ok := v.(interface{ GetData() string }); ok {
			x.Data = v.GetData()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HTTPResponseData) Proto_ShallowClone() (c *HTTPResponseData) {
	if x != nil {
		c = new(HTTPResponseData)
		c.Status = x.Status
		c.Size = x.Size
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *HTTPResults) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *HTTPResults:
		x.Target = v.GetTarget()
		x.Latency = v.GetLatency()
		x.Response = v.GetResponse()
		x.DstIp = v.GetDstIp()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetLatency() *MetricData }); ok {
			x.Latency = v.GetLatency()
		}
		if v, ok := v.(interface{ GetResponse() *HTTPResponseData }); ok {
			x.Response = v.GetResponse()
		}
		if v, ok := v.(interface{ GetDstIp() string }); ok {
			x.DstIp = v.GetDstIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *HTTPResults) Proto_ShallowClone() (c *HTTPResults) {
	if x != nil {
		c = new(HTTPResults)
		c.Target = x.Target
		c.Latency = x.Latency
		c.Response = x.Response
		c.DstIp = x.DstIp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DNSResponseData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DNSResponseData:
		x.Status = v.GetStatus()
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetStatus() uint32 }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetData() string }); ok {
			x.Data = v.GetData()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DNSResponseData) Proto_ShallowClone() (c *DNSResponseData) {
	if x != nil {
		c = new(DNSResponseData)
		c.Status = x.Status
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DNSResults) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DNSResults:
		x.Target = v.GetTarget()
		x.Server = v.GetServer()
		x.Latency = v.GetLatency()
		x.Response = v.GetResponse()
	default:
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetServer() string }); ok {
			x.Server = v.GetServer()
		}
		if v, ok := v.(interface{ GetLatency() *MetricData }); ok {
			x.Latency = v.GetLatency()
		}
		if v, ok := v.(interface{ GetResponse() *DNSResponseData }); ok {
			x.Response = v.GetResponse()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DNSResults) Proto_ShallowClone() (c *DNSResults) {
	if x != nil {
		c = new(DNSResults)
		c.Target = x.Target
		c.Server = x.Server
		c.Latency = x.Latency
		c.Response = x.Response
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TaskResults) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TaskResults:
		x.TaskType = v.GetTaskType()
		x.Health = v.GetHealth()
	default:
		if v, ok := v.(interface{ GetTaskType() isTaskResults_TaskType }); ok {
			x.TaskType = v.GetTaskType()
		} else {
			func() {
				if v, ok := v.(interface{ GetPing() *PingResults }); ok {
					var defaultValue *PingResults
					if v := v.GetPing(); v != defaultValue {
						x.TaskType = &TaskResults_Ping{Ping: v}
						return
					}
				}
				if v, ok := v.(interface{ GetHttp() *HTTPResults }); ok {
					var defaultValue *HTTPResults
					if v := v.GetHttp(); v != defaultValue {
						x.TaskType = &TaskResults_Http{Http: v}
						return
					}
				}
				if v, ok := v.(interface{ GetDns() *DNSResults }); ok {
					var defaultValue *DNSResults
					if v := v.GetDns(); v != defaultValue {
						x.TaskType = &TaskResults_Dns{Dns: v}
						return
					}
				}
			}()
		}
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TaskResults) Proto_ShallowClone() (c *TaskResults) {
	if x != nil {
		c = new(TaskResults)
		c.TaskType = x.TaskType
		c.Health = x.Health
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AgentResults) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AgentResults:
		x.AgentId = v.GetAgentId()
		x.Health = v.GetHealth()
		x.Tasks = v.GetTasks()
	default:
		if v, ok := v.(interface{ GetAgentId() string }); ok {
			x.AgentId = v.GetAgentId()
		}
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
		if v, ok := v.(interface{ GetTasks() []*TaskResults }); ok {
			x.Tasks = v.GetTasks()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AgentResults) Proto_ShallowClone() (c *AgentResults) {
	if x != nil {
		c = new(AgentResults)
		c.AgentId = x.AgentId
		c.Health = x.Health
		c.Tasks = x.Tasks
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TestResults) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TestResults:
		x.TestId = v.GetTestId()
		x.Time = v.GetTime()
		x.Health = v.GetHealth()
		x.Agents = v.GetAgents()
	default:
		if v, ok := v.(interface{ GetTestId() string }); ok {
			x.TestId = v.GetTestId()
		}
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
		if v, ok := v.(interface{ GetHealth() string }); ok {
			x.Health = v.GetHealth()
		}
		if v, ok := v.(interface{ GetAgents() []*AgentResults }); ok {
			x.Agents = v.GetAgents()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TestResults) Proto_ShallowClone() (c *TestResults) {
	if x != nil {
		c = new(TestResults)
		c.TestId = x.TestId
		c.Time = x.Time
		c.Health = x.Health
		c.Agents = x.Agents
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Stats) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Stats:
		x.Average = v.GetAverage()
		x.Min = v.GetMin()
		x.Max = v.GetMax()
	default:
		if v, ok := v.(interface{ GetAverage() rune }); ok {
			x.Average = v.GetAverage()
		}
		if v, ok := v.(interface{ GetMin() rune }); ok {
			x.Min = v.GetMin()
		}
		if v, ok := v.(interface{ GetMax() rune }); ok {
			x.Max = v.GetMax()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Stats) Proto_ShallowClone() (c *Stats) {
	if x != nil {
		c = new(Stats)
		c.Average = x.Average
		c.Min = x.Min
		c.Max = x.Max
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Location) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Location:
		x.Latitude = v.GetLatitude()
		x.Longitude = v.GetLongitude()
		x.Country = v.GetCountry()
		x.Region = v.GetRegion()
		x.City = v.GetCity()
	default:
		if v, ok := v.(interface{ GetLatitude() float64 }); ok {
			x.Latitude = v.GetLatitude()
		}
		if v, ok := v.(interface{ GetLongitude() float64 }); ok {
			x.Longitude = v.GetLongitude()
		}
		if v, ok := v.(interface{ GetCountry() string }); ok {
			x.Country = v.GetCountry()
		}
		if v, ok := v.(interface{ GetRegion() string }); ok {
			x.Region = v.GetRegion()
		}
		if v, ok := v.(interface{ GetCity() string }); ok {
			x.City = v.GetCity()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Location) Proto_ShallowClone() (c *Location) {
	if x != nil {
		c = new(Location)
		c.Latitude = x.Latitude
		c.Longitude = x.Longitude
		c.Country = x.Country
		c.Region = x.Region
		c.City = x.City
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetNode) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetNode:
		x.Ip = v.GetIp()
		x.Asn = v.GetAsn()
		x.AsName = v.GetAsName()
		x.Location = v.GetLocation()
		x.DnsName = v.GetDnsName()
		x.DeviceId = v.GetDeviceId()
		x.SiteId = v.GetSiteId()
	default:
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetAsn() uint32 }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetAsName() string }); ok {
			x.AsName = v.GetAsName()
		}
		if v, ok := v.(interface{ GetLocation() *Location }); ok {
			x.Location = v.GetLocation()
		}
		if v, ok := v.(interface{ GetDnsName() string }); ok {
			x.DnsName = v.GetDnsName()
		}
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetSiteId() string }); ok {
			x.SiteId = v.GetSiteId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetNode) Proto_ShallowClone() (c *NetNode) {
	if x != nil {
		c = new(NetNode)
		c.Ip = x.Ip
		c.Asn = x.Asn
		c.AsName = x.AsName
		c.Location = x.Location
		c.DnsName = x.DnsName
		c.DeviceId = x.DeviceId
		c.SiteId = x.SiteId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TraceHop) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TraceHop:
		x.Latency = v.GetLatency()
		x.NodeId = v.GetNodeId()
	default:
		if v, ok := v.(interface{ GetLatency() rune }); ok {
			x.Latency = v.GetLatency()
		}
		if v, ok := v.(interface{ GetNodeId() string }); ok {
			x.NodeId = v.GetNodeId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TraceHop) Proto_ShallowClone() (c *TraceHop) {
	if x != nil {
		c = new(TraceHop)
		c.Latency = x.Latency
		c.NodeId = x.NodeId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PathTrace) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PathTrace:
		x.AsPath = v.GetAsPath()
		x.IsComplete = v.GetIsComplete()
		x.Hops = v.GetHops()
	default:
		if v, ok := v.(interface{ GetAsPath() []rune }); ok {
			x.AsPath = v.GetAsPath()
		}
		if v, ok := v.(interface{ GetIsComplete() bool }); ok {
			x.IsComplete = v.GetIsComplete()
		}
		if v, ok := v.(interface{ GetHops() []*TraceHop }); ok {
			x.Hops = v.GetHops()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PathTrace) Proto_ShallowClone() (c *PathTrace) {
	if x != nil {
		c = new(PathTrace)
		c.AsPath = x.AsPath
		c.IsComplete = x.IsComplete
		c.Hops = x.Hops
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Path) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Path:
		x.AgentId = v.GetAgentId()
		x.TargetIp = v.GetTargetIp()
		x.HopCount = v.GetHopCount()
		x.MaxAsPathLength = v.GetMaxAsPathLength()
		x.Traces = v.GetTraces()
		x.Time = v.GetTime()
	default:
		if v, ok := v.(interface{ GetAgentId() string }); ok {
			x.AgentId = v.GetAgentId()
		}
		if v, ok := v.(interface{ GetTargetIp() string }); ok {
			x.TargetIp = v.GetTargetIp()
		}
		if v, ok := v.(interface{ GetHopCount() *Stats }); ok {
			x.HopCount = v.GetHopCount()
		}
		if v, ok := v.(interface{ GetMaxAsPathLength() rune }); ok {
			x.MaxAsPathLength = v.GetMaxAsPathLength()
		}
		if v, ok := v.(interface{ GetTraces() []*PathTrace }); ok {
			x.Traces = v.GetTraces()
		}
		if v, ok := v.(interface{ GetTime() *timestamppb.Timestamp }); ok {
			x.Time = v.GetTime()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Path) Proto_ShallowClone() (c *Path) {
	if x != nil {
		c = new(Path)
		c.AgentId = x.AgentId
		c.TargetIp = x.TargetIp
		c.HopCount = x.HopCount
		c.MaxAsPathLength = x.MaxAsPathLength
		c.Traces = x.Traces
		c.Time = x.Time
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetResultsForTestsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetResultsForTestsRequest:
		x.Ids = v.GetIds()
		x.StartTime = v.GetStartTime()
		x.EndTime = v.GetEndTime()
		x.AgentIds = v.GetAgentIds()
		x.Targets = v.GetTargets()
		x.Aggregate = v.GetAggregate()
	default:
		if v, ok := v.(interface{ GetIds() []string }); ok {
			x.Ids = v.GetIds()
		}
		if v, ok := v.(interface{ GetStartTime() *timestamppb.Timestamp }); ok {
			x.StartTime = v.GetStartTime()
		}
		if v, ok := v.(interface{ GetEndTime() *timestamppb.Timestamp }); ok {
			x.EndTime = v.GetEndTime()
		}
		if v, ok := v.(interface{ GetAgentIds() []string }); ok {
			x.AgentIds = v.GetAgentIds()
		}
		if v, ok := v.(interface{ GetTargets() []string }); ok {
			x.Targets = v.GetTargets()
		}
		if v, ok := v.(interface{ GetAggregate() bool }); ok {
			x.Aggregate = v.GetAggregate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetResultsForTestsRequest) Proto_ShallowClone() (c *GetResultsForTestsRequest) {
	if x != nil {
		c = new(GetResultsForTestsRequest)
		c.Ids = x.Ids
		c.StartTime = x.StartTime
		c.EndTime = x.EndTime
		c.AgentIds = x.AgentIds
		c.Targets = x.Targets
		c.Aggregate = x.Aggregate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetResultsForTestsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetResultsForTestsResponse:
		x.Results = v.GetResults()
	default:
		if v, ok := v.(interface{ GetResults() []*TestResults }); ok {
			x.Results = v.GetResults()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetResultsForTestsResponse) Proto_ShallowClone() (c *GetResultsForTestsResponse) {
	if x != nil {
		c = new(GetResultsForTestsResponse)
		c.Results = x.Results
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTraceForTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTraceForTestRequest:
		x.Id = v.GetId()
		x.StartTime = v.GetStartTime()
		x.EndTime = v.GetEndTime()
		x.AgentIds = v.GetAgentIds()
		x.TargetIps = v.GetTargetIps()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetStartTime() *timestamppb.Timestamp }); ok {
			x.StartTime = v.GetStartTime()
		}
		if v, ok := v.(interface{ GetEndTime() *timestamppb.Timestamp }); ok {
			x.EndTime = v.GetEndTime()
		}
		if v, ok := v.(interface{ GetAgentIds() []string }); ok {
			x.AgentIds = v.GetAgentIds()
		}
		if v, ok := v.(interface{ GetTargetIps() []string }); ok {
			x.TargetIps = v.GetTargetIps()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTraceForTestRequest) Proto_ShallowClone() (c *GetTraceForTestRequest) {
	if x != nil {
		c = new(GetTraceForTestRequest)
		c.Id = x.Id
		c.StartTime = x.StartTime
		c.EndTime = x.EndTime
		c.AgentIds = x.AgentIds
		c.TargetIps = x.TargetIps
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTraceForTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTraceForTestResponse:
		x.Nodes = v.GetNodes()
		x.Paths = v.GetPaths()
	default:
		if v, ok := v.(interface{ GetNodes() map[string]*NetNode }); ok {
			x.Nodes = v.GetNodes()
		}
		if v, ok := v.(interface{ GetPaths() []*Path }); ok {
			x.Paths = v.GetPaths()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTraceForTestResponse) Proto_ShallowClone() (c *GetTraceForTestResponse) {
	if x != nil {
		c = new(GetTraceForTestResponse)
		c.Nodes = x.Nodes
		c.Paths = x.Paths
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListAgentsRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListAgentsRequest) Proto_ShallowClone() (c *ListAgentsRequest) {
	if x != nil {
		c = new(ListAgentsRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListAgentsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListAgentsResponse:
		x.Agents = v.GetAgents()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetAgents() []*Agent }); ok {
			x.Agents = v.GetAgents()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListAgentsResponse) Proto_ShallowClone() (c *ListAgentsResponse) {
	if x != nil {
		c = new(ListAgentsResponse)
		c.Agents = x.Agents
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetAgentRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetAgentRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetAgentRequest) Proto_ShallowClone() (c *GetAgentRequest) {
	if x != nil {
		c = new(GetAgentRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetAgentResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetAgentResponse:
		x.Agent = v.GetAgent()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetAgentResponse) Proto_ShallowClone() (c *GetAgentResponse) {
	if x != nil {
		c = new(GetAgentResponse)
		c.Agent = x.Agent
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateAgentRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateAgentRequest:
		x.Agent = v.GetAgent()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateAgentRequest) Proto_ShallowClone() (c *UpdateAgentRequest) {
	if x != nil {
		c = new(UpdateAgentRequest)
		c.Agent = x.Agent
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateAgentResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateAgentResponse:
		x.Agent = v.GetAgent()
	default:
		if v, ok := v.(interface{ GetAgent() *Agent }); ok {
			x.Agent = v.GetAgent()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateAgentResponse) Proto_ShallowClone() (c *UpdateAgentResponse) {
	if x != nil {
		c = new(UpdateAgentResponse)
		c.Agent = x.Agent
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteAgentRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteAgentRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteAgentRequest) Proto_ShallowClone() (c *DeleteAgentRequest) {
	if x != nil {
		c = new(DeleteAgentRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteAgentResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteAgentResponse) Proto_ShallowClone() (c *DeleteAgentResponse) {
	if x != nil {
		c = new(DeleteAgentResponse)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListTestsRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListTestsRequest) Proto_ShallowClone() (c *ListTestsRequest) {
	if x != nil {
		c = new(ListTestsRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListTestsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListTestsResponse:
		x.Tests = v.GetTests()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetTests() []*Test }); ok {
			x.Tests = v.GetTests()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListTestsResponse) Proto_ShallowClone() (c *ListTestsResponse) {
	if x != nil {
		c = new(ListTestsResponse)
		c.Tests = x.Tests
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateTestRequest:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateTestRequest) Proto_ShallowClone() (c *CreateTestRequest) {
	if x != nil {
		c = new(CreateTestRequest)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateTestResponse:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateTestResponse) Proto_ShallowClone() (c *CreateTestResponse) {
	if x != nil {
		c = new(CreateTestResponse)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTestRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTestRequest) Proto_ShallowClone() (c *GetTestRequest) {
	if x != nil {
		c = new(GetTestRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTestResponse:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTestResponse) Proto_ShallowClone() (c *GetTestResponse) {
	if x != nil {
		c = new(GetTestResponse)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateTestRequest:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateTestRequest) Proto_ShallowClone() (c *UpdateTestRequest) {
	if x != nil {
		c = new(UpdateTestRequest)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateTestResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateTestResponse:
		x.Test = v.GetTest()
	default:
		if v, ok := v.(interface{ GetTest() *Test }); ok {
			x.Test = v.GetTest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateTestResponse) Proto_ShallowClone() (c *UpdateTestResponse) {
	if x != nil {
		c = new(UpdateTestResponse)
		c.Test = x.Test
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteTestRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteTestRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteTestRequest) Proto_ShallowClone() (c *DeleteTestRequest) {
	if x != nil {
		c = new(DeleteTestRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteTestResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteTestResponse) Proto_ShallowClone() (c *DeleteTestResponse) {
	if x != nil {
		c = new(DeleteTestResponse)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SetTestStatusRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SetTestStatusRequest:
		x.Id = v.GetId()
		x.Status = v.GetStatus()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetStatus() TestStatus }); ok {
			x.Status = v.GetStatus()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SetTestStatusRequest) Proto_ShallowClone() (c *SetTestStatusRequest) {
	if x != nil {
		c = new(SetTestStatusRequest)
		c.Id = x.Id
		c.Status = x.Status
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SetTestStatusResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SetTestStatusResponse) Proto_ShallowClone() (c *SetTestStatusResponse) {
	if x != nil {
		c = new(SetTestStatusResponse)
	}
	return
}
