// Synthetics data and admin APIs

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/synthetics/v202309/synthetics.proto

package synthetics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SyntheticsDataService_GetResultsForTests_FullMethodName = "/kentik.synthetics.v202309.SyntheticsDataService/GetResultsForTests"
	SyntheticsDataService_GetTraceForTest_FullMethodName    = "/kentik.synthetics.v202309.SyntheticsDataService/GetTraceForTest"
)

// SyntheticsDataServiceClient is the client API for SyntheticsDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyntheticsDataServiceClient interface {
	// Get measurement results for a set of tests
	GetResultsForTests(ctx context.Context, in *GetResultsForTestsRequest, opts ...grpc.CallOption) (*GetResultsForTestsResponse, error)
	GetTraceForTest(ctx context.Context, in *GetTraceForTestRequest, opts ...grpc.CallOption) (*GetTraceForTestResponse, error)
}

type syntheticsDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyntheticsDataServiceClient(cc grpc.ClientConnInterface) SyntheticsDataServiceClient {
	return &syntheticsDataServiceClient{cc}
}

func (c *syntheticsDataServiceClient) GetResultsForTests(ctx context.Context, in *GetResultsForTestsRequest, opts ...grpc.CallOption) (*GetResultsForTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultsForTestsResponse)
	err := c.cc.Invoke(ctx, SyntheticsDataService_GetResultsForTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsDataServiceClient) GetTraceForTest(ctx context.Context, in *GetTraceForTestRequest, opts ...grpc.CallOption) (*GetTraceForTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTraceForTestResponse)
	err := c.cc.Invoke(ctx, SyntheticsDataService_GetTraceForTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyntheticsDataServiceServer is the server API for SyntheticsDataService service.
// All implementations should embed UnimplementedSyntheticsDataServiceServer
// for forward compatibility.
type SyntheticsDataServiceServer interface {
	// Get measurement results for a set of tests
	GetResultsForTests(context.Context, *GetResultsForTestsRequest) (*GetResultsForTestsResponse, error)
	GetTraceForTest(context.Context, *GetTraceForTestRequest) (*GetTraceForTestResponse, error)
}

// UnimplementedSyntheticsDataServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyntheticsDataServiceServer struct{}

func (UnimplementedSyntheticsDataServiceServer) GetResultsForTests(context.Context, *GetResultsForTestsRequest) (*GetResultsForTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultsForTests not implemented")
}
func (UnimplementedSyntheticsDataServiceServer) GetTraceForTest(context.Context, *GetTraceForTestRequest) (*GetTraceForTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraceForTest not implemented")
}
func (UnimplementedSyntheticsDataServiceServer) testEmbeddedByValue() {}

// UnsafeSyntheticsDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyntheticsDataServiceServer will
// result in compilation errors.
type UnsafeSyntheticsDataServiceServer interface {
	mustEmbedUnimplementedSyntheticsDataServiceServer()
}

func RegisterSyntheticsDataServiceServer(s grpc.ServiceRegistrar, srv SyntheticsDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyntheticsDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyntheticsDataService_ServiceDesc, srv)
}

func _SyntheticsDataService_GetResultsForTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultsForTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsDataServiceServer).GetResultsForTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsDataService_GetResultsForTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsDataServiceServer).GetResultsForTests(ctx, req.(*GetResultsForTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsDataService_GetTraceForTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceForTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsDataServiceServer).GetTraceForTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsDataService_GetTraceForTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsDataServiceServer).GetTraceForTest(ctx, req.(*GetTraceForTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyntheticsDataService_ServiceDesc is the grpc.ServiceDesc for SyntheticsDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyntheticsDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.synthetics.v202309.SyntheticsDataService",
	HandlerType: (*SyntheticsDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResultsForTests",
			Handler:    _SyntheticsDataService_GetResultsForTests_Handler,
		},
		{
			MethodName: "GetTraceForTest",
			Handler:    _SyntheticsDataService_GetTraceForTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/synthetics/v202309/synthetics.proto",
}

const (
	SyntheticsAdminService_ListAgents_FullMethodName       = "/kentik.synthetics.v202309.SyntheticsAdminService/ListAgents"
	SyntheticsAdminService_GetAgent_FullMethodName         = "/kentik.synthetics.v202309.SyntheticsAdminService/GetAgent"
	SyntheticsAdminService_UpdateAgent_FullMethodName      = "/kentik.synthetics.v202309.SyntheticsAdminService/UpdateAgent"
	SyntheticsAdminService_DeleteAgent_FullMethodName      = "/kentik.synthetics.v202309.SyntheticsAdminService/DeleteAgent"
	SyntheticsAdminService_ListTests_FullMethodName        = "/kentik.synthetics.v202309.SyntheticsAdminService/ListTests"
	SyntheticsAdminService_CreateTest_FullMethodName       = "/kentik.synthetics.v202309.SyntheticsAdminService/CreateTest"
	SyntheticsAdminService_GetTest_FullMethodName          = "/kentik.synthetics.v202309.SyntheticsAdminService/GetTest"
	SyntheticsAdminService_UpdateTest_FullMethodName       = "/kentik.synthetics.v202309.SyntheticsAdminService/UpdateTest"
	SyntheticsAdminService_DeleteTest_FullMethodName       = "/kentik.synthetics.v202309.SyntheticsAdminService/DeleteTest"
	SyntheticsAdminService_SetTestStatus_FullMethodName    = "/kentik.synthetics.v202309.SyntheticsAdminService/SetTestStatus"
	SyntheticsAdminService_CreateAgentAlert_FullMethodName = "/kentik.synthetics.v202309.SyntheticsAdminService/CreateAgentAlert"
	SyntheticsAdminService_UpdateAgentAlert_FullMethodName = "/kentik.synthetics.v202309.SyntheticsAdminService/UpdateAgentAlert"
	SyntheticsAdminService_GetAgentAlert_FullMethodName    = "/kentik.synthetics.v202309.SyntheticsAdminService/GetAgentAlert"
	SyntheticsAdminService_ListAgentAlerts_FullMethodName  = "/kentik.synthetics.v202309.SyntheticsAdminService/ListAgentAlerts"
	SyntheticsAdminService_DeleteAgentAlert_FullMethodName = "/kentik.synthetics.v202309.SyntheticsAdminService/DeleteAgentAlert"
)

// SyntheticsAdminServiceClient is the client API for SyntheticsAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyntheticsAdminServiceClient interface {
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error)
	DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error)
	ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error)
	CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error)
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error)
	UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error)
	DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*DeleteTestResponse, error)
	SetTestStatus(ctx context.Context, in *SetTestStatusRequest, opts ...grpc.CallOption) (*SetTestStatusResponse, error)
	CreateAgentAlert(ctx context.Context, in *CreateAgentAlertRequest, opts ...grpc.CallOption) (*CreateAgentAlertResponse, error)
	UpdateAgentAlert(ctx context.Context, in *UpdateAgentAlertRequest, opts ...grpc.CallOption) (*UpdateAgentAlertResponse, error)
	GetAgentAlert(ctx context.Context, in *GetAgentAlertRequest, opts ...grpc.CallOption) (*GetAgentAlertResponse, error)
	ListAgentAlerts(ctx context.Context, in *ListAgentAlertsRequest, opts ...grpc.CallOption) (*ListAgentAlertsResponse, error)
	DeleteAgentAlert(ctx context.Context, in *DeleteAgentAlertRequest, opts ...grpc.CallOption) (*DeleteAgentAlertResponse, error)
}

type syntheticsAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyntheticsAdminServiceClient(cc grpc.ClientConnInterface) SyntheticsAdminServiceClient {
	return &syntheticsAdminServiceClient{cc}
}

func (c *syntheticsAdminServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_ListAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_GetAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_UpdateAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_DeleteAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestsResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_ListTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_CreateTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTestResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_GetTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTestResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_UpdateTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*DeleteTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTestResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_DeleteTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) SetTestStatus(ctx context.Context, in *SetTestStatusRequest, opts ...grpc.CallOption) (*SetTestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTestStatusResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_SetTestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) CreateAgentAlert(ctx context.Context, in *CreateAgentAlertRequest, opts ...grpc.CallOption) (*CreateAgentAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentAlertResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_CreateAgentAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) UpdateAgentAlert(ctx context.Context, in *UpdateAgentAlertRequest, opts ...grpc.CallOption) (*UpdateAgentAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentAlertResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_UpdateAgentAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) GetAgentAlert(ctx context.Context, in *GetAgentAlertRequest, opts ...grpc.CallOption) (*GetAgentAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentAlertResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_GetAgentAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) ListAgentAlerts(ctx context.Context, in *ListAgentAlertsRequest, opts ...grpc.CallOption) (*ListAgentAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentAlertsResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_ListAgentAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syntheticsAdminServiceClient) DeleteAgentAlert(ctx context.Context, in *DeleteAgentAlertRequest, opts ...grpc.CallOption) (*DeleteAgentAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgentAlertResponse)
	err := c.cc.Invoke(ctx, SyntheticsAdminService_DeleteAgentAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyntheticsAdminServiceServer is the server API for SyntheticsAdminService service.
// All implementations should embed UnimplementedSyntheticsAdminServiceServer
// for forward compatibility.
type SyntheticsAdminServiceServer interface {
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
	DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error)
	ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error)
	CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error)
	GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error)
	UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error)
	DeleteTest(context.Context, *DeleteTestRequest) (*DeleteTestResponse, error)
	SetTestStatus(context.Context, *SetTestStatusRequest) (*SetTestStatusResponse, error)
	CreateAgentAlert(context.Context, *CreateAgentAlertRequest) (*CreateAgentAlertResponse, error)
	UpdateAgentAlert(context.Context, *UpdateAgentAlertRequest) (*UpdateAgentAlertResponse, error)
	GetAgentAlert(context.Context, *GetAgentAlertRequest) (*GetAgentAlertResponse, error)
	ListAgentAlerts(context.Context, *ListAgentAlertsRequest) (*ListAgentAlertsResponse, error)
	DeleteAgentAlert(context.Context, *DeleteAgentAlertRequest) (*DeleteAgentAlertResponse, error)
}

// UnimplementedSyntheticsAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyntheticsAdminServiceServer struct{}

func (UnimplementedSyntheticsAdminServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) DeleteTest(context.Context, *DeleteTestRequest) (*DeleteTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTest not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) SetTestStatus(context.Context, *SetTestStatusRequest) (*SetTestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTestStatus not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) CreateAgentAlert(context.Context, *CreateAgentAlertRequest) (*CreateAgentAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentAlert not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) UpdateAgentAlert(context.Context, *UpdateAgentAlertRequest) (*UpdateAgentAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentAlert not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) GetAgentAlert(context.Context, *GetAgentAlertRequest) (*GetAgentAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentAlert not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) ListAgentAlerts(context.Context, *ListAgentAlertsRequest) (*ListAgentAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentAlerts not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) DeleteAgentAlert(context.Context, *DeleteAgentAlertRequest) (*DeleteAgentAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentAlert not implemented")
}
func (UnimplementedSyntheticsAdminServiceServer) testEmbeddedByValue() {}

// UnsafeSyntheticsAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyntheticsAdminServiceServer will
// result in compilation errors.
type UnsafeSyntheticsAdminServiceServer interface {
	mustEmbedUnimplementedSyntheticsAdminServiceServer()
}

func RegisterSyntheticsAdminServiceServer(s grpc.ServiceRegistrar, srv SyntheticsAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyntheticsAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyntheticsAdminService_ServiceDesc, srv)
}

func _SyntheticsAdminService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_GetAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_UpdateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).UpdateAgent(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_DeleteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).DeleteAgent(ctx, req.(*DeleteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_ListTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).ListTests(ctx, req.(*ListTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_CreateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).CreateTest(ctx, req.(*CreateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_GetTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_UpdateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).UpdateTest(ctx, req.(*UpdateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_DeleteTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).DeleteTest(ctx, req.(*DeleteTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_SetTestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).SetTestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_SetTestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).SetTestStatus(ctx, req.(*SetTestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_CreateAgentAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).CreateAgentAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_CreateAgentAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).CreateAgentAlert(ctx, req.(*CreateAgentAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_UpdateAgentAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).UpdateAgentAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_UpdateAgentAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).UpdateAgentAlert(ctx, req.(*UpdateAgentAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_GetAgentAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).GetAgentAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_GetAgentAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).GetAgentAlert(ctx, req.(*GetAgentAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_ListAgentAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).ListAgentAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_ListAgentAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).ListAgentAlerts(ctx, req.(*ListAgentAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyntheticsAdminService_DeleteAgentAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyntheticsAdminServiceServer).DeleteAgentAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyntheticsAdminService_DeleteAgentAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyntheticsAdminServiceServer).DeleteAgentAlert(ctx, req.(*DeleteAgentAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyntheticsAdminService_ServiceDesc is the grpc.ServiceDesc for SyntheticsAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyntheticsAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.synthetics.v202309.SyntheticsAdminService",
	HandlerType: (*SyntheticsAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _SyntheticsAdminService_ListAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _SyntheticsAdminService_GetAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _SyntheticsAdminService_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _SyntheticsAdminService_DeleteAgent_Handler,
		},
		{
			MethodName: "ListTests",
			Handler:    _SyntheticsAdminService_ListTests_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _SyntheticsAdminService_CreateTest_Handler,
		},
		{
			MethodName: "GetTest",
			Handler:    _SyntheticsAdminService_GetTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _SyntheticsAdminService_UpdateTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _SyntheticsAdminService_DeleteTest_Handler,
		},
		{
			MethodName: "SetTestStatus",
			Handler:    _SyntheticsAdminService_SetTestStatus_Handler,
		},
		{
			MethodName: "CreateAgentAlert",
			Handler:    _SyntheticsAdminService_CreateAgentAlert_Handler,
		},
		{
			MethodName: "UpdateAgentAlert",
			Handler:    _SyntheticsAdminService_UpdateAgentAlert_Handler,
		},
		{
			MethodName: "GetAgentAlert",
			Handler:    _SyntheticsAdminService_GetAgentAlert_Handler,
		},
		{
			MethodName: "ListAgentAlerts",
			Handler:    _SyntheticsAdminService_ListAgentAlerts_Handler,
		},
		{
			MethodName: "DeleteAgentAlert",
			Handler:    _SyntheticsAdminService_DeleteAgentAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/synthetics/v202309/synthetics.proto",
}
