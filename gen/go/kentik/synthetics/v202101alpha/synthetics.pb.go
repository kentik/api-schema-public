// Synthetics data and admin APIs

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: kentik/synthetics/v202101alpha/synthetics.proto

package synthetics

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IPFamily int32

const (
	IPFamily_V4   IPFamily = 0
	IPFamily_V6   IPFamily = 1
	IPFamily_DUAL IPFamily = 2
)

// Enum value maps for IPFamily.
var (
	IPFamily_name = map[int32]string{
		0: "V4",
		1: "V6",
		2: "DUAL",
	}
	IPFamily_value = map[string]int32{
		"V4":   0,
		"V6":   1,
		"DUAL": 2,
	}
)

func (x IPFamily) Enum() *IPFamily {
	p := new(IPFamily)
	*p = x
	return p
}

func (x IPFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_enumTypes[0].Descriptor()
}

func (IPFamily) Type() protoreflect.EnumType {
	return &file_kentik_synthetics_v202101alpha_synthetics_proto_enumTypes[0]
}

func (x IPFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPFamily.Descriptor instead.
func (IPFamily) EnumDescriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{0}
}

// models
// -------------------------------------------------------
type GetHealthForTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` // All we need is a list of ids of the tests to get heath for.
	StartTime int64    `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds  []uint64 `protobuf:"varint,5,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"` // Allow looking at only a subset of agents.
	TaskIds   []uint64 `protobuf:"varint,6,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`    // Allow looking at only a subset of tasks -- this lets you limit targets.
	Augment   bool     `protobuf:"varint,7,opt,name=augment,proto3" json:"augment,omitempty"`
}

func (x *GetHealthForTestsRequest) Reset() {
	*x = GetHealthForTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthForTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsRequest) ProtoMessage() {}

func (x *GetHealthForTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsRequest.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{0}
}

func (x *GetHealthForTestsRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetHealthForTestsRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetHealthForTestsRequest) GetAgentIds() []uint64 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetTaskIds() []uint64 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *GetHealthForTestsRequest) GetAugment() bool {
	if x != nil {
		return x.Augment
	}
	return false
}

type GetHealthForTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Health []*TestHealth `protobuf:"bytes,2,rep,name=health,proto3" json:"health,omitempty"`
}

func (x *GetHealthForTestsResponse) Reset() {
	*x = GetHealthForTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthForTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthForTestsResponse) ProtoMessage() {}

func (x *GetHealthForTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthForTestsResponse.ProtoReflect.Descriptor instead.
func (*GetHealthForTestsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{1}
}

func (x *GetHealthForTestsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetHealthForTestsResponse) GetHealth() []*TestHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//	*Status_Ok
	//	*Status_Err
	Status isStatus_Status `protobuf_oneof:"status"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{2}
}

func (m *Status) GetStatus() isStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *Status) GetOk() bool {
	if x, ok := x.GetStatus().(*Status_Ok); ok {
		return x.Ok
	}
	return false
}

func (x *Status) GetErr() *Status_Error {
	if x, ok := x.GetStatus().(*Status_Err); ok {
		return x.Err
	}
	return nil
}

type isStatus_Status interface {
	isStatus_Status()
}

type Status_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type Status_Err struct {
	Err *Status_Error `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*Status_Ok) isStatus_Status() {}

func (*Status_Err) isStatus_Status() {}

type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health string `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"`
	Time   int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{3}
}

func (x *Health) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Health) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type TestHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId        uint64        `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Tasks         []*TaskHealth `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	OverallHealth *Health       `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	HealthTs      []*Health     `protobuf:"bytes,4,rep,name=health_ts,json=healthTs,proto3" json:"health_ts,omitempty"`
}

func (x *TestHealth) Reset() {
	*x = TestHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestHealth) ProtoMessage() {}

func (x *TestHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestHealth.ProtoReflect.Descriptor instead.
func (*TestHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{4}
}

func (x *TestHealth) GetTestId() uint64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestHealth) GetTasks() []*TaskHealth {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TestHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TestHealth) GetHealthTs() []*Health {
	if x != nil {
		return x.HealthTs
	}
	return nil
}

type TaskHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents        []*AgentHealth `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	OverallHealth *Health        `protobuf:"bytes,2,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
}

func (x *TaskHealth) Reset() {
	*x = TaskHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHealth) ProtoMessage() {}

func (x *TaskHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHealth.ProtoReflect.Descriptor instead.
func (*TaskHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{5}
}

func (x *TaskHealth) GetAgents() []*AgentHealth {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *TaskHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type AgentHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent         *Agent          `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Health        []*HealthMoment `protobuf:"bytes,2,rep,name=health,proto3" json:"health,omitempty"`
	OverallHealth *Health         `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
}

func (x *AgentHealth) Reset() {
	*x = AgentHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealth) ProtoMessage() {}

func (x *AgentHealth) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealth.ProtoReflect.Descriptor instead.
func (*AgentHealth) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{6}
}

func (x *AgentHealth) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *AgentHealth) GetHealth() []*HealthMoment {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *AgentHealth) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

type HealthMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                      int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SrcIp                     string  `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp                     string  `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	PacketLoss                uint32  `protobuf:"varint,4,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	AvgLatency                uint32  `protobuf:"varint,5,opt,name=avg_latency,json=avgLatency,proto3" json:"avg_latency,omitempty"`
	AvgWeightedLatency        uint32  `protobuf:"varint,6,opt,name=avg_weighted_latency,json=avgWeightedLatency,proto3" json:"avg_weighted_latency,omitempty"`
	RollingAvgLatency         uint32  `protobuf:"varint,7,opt,name=rolling_avg_latency,json=rollingAvgLatency,proto3" json:"rolling_avg_latency,omitempty"`
	RollingStddevLatency      uint32  `protobuf:"varint,8,opt,name=rolling_stddev_latency,json=rollingStddevLatency,proto3" json:"rolling_stddev_latency,omitempty"`
	RollingAvgWeightedLatency uint32  `protobuf:"varint,9,opt,name=rolling_avg_weighted_latency,json=rollingAvgWeightedLatency,proto3" json:"rolling_avg_weighted_latency,omitempty"`
	LatencyHealth             string  `protobuf:"bytes,10,opt,name=latency_health,json=latencyHealth,proto3" json:"latency_health,omitempty"`
	PacketLossHealth          string  `protobuf:"bytes,11,opt,name=packet_loss_health,json=packetLossHealth,proto3" json:"packet_loss_health,omitempty"`
	OverallHealth             *Health `protobuf:"bytes,12,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"`
	// fields return from backend grpc service
	AvgJitter        uint32 `protobuf:"varint,13,opt,name=avg_jitter,json=avgJitter,proto3" json:"avg_jitter,omitempty"`
	RollingAvgJitter uint32 `protobuf:"varint,14,opt,name=rolling_avg_jitter,json=rollingAvgJitter,proto3" json:"rolling_avg_jitter,omitempty"`
	RollingStdJitter uint32 `protobuf:"varint,15,opt,name=rolling_std_jitter,json=rollingStdJitter,proto3" json:"rolling_std_jitter,omitempty"`
	JitterHealth     string `protobuf:"bytes,16,opt,name=jitter_health,json=jitterHealth,proto3" json:"jitter_health,omitempty"`
	Data             string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`
	Size             uint32 `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`
	Status           uint32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	TaskType         string `protobuf:"bytes,20,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
}

func (x *HealthMoment) Reset() {
	*x = HealthMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMoment) ProtoMessage() {}

func (x *HealthMoment) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMoment.ProtoReflect.Descriptor instead.
func (*HealthMoment) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{7}
}

func (x *HealthMoment) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HealthMoment) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *HealthMoment) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *HealthMoment) GetPacketLoss() uint32 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *HealthMoment) GetAvgLatency() uint32 {
	if x != nil {
		return x.AvgLatency
	}
	return 0
}

func (x *HealthMoment) GetAvgWeightedLatency() uint32 {
	if x != nil {
		return x.AvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgLatency() uint32 {
	if x != nil {
		return x.RollingAvgLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingStddevLatency() uint32 {
	if x != nil {
		return x.RollingStddevLatency
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgWeightedLatency() uint32 {
	if x != nil {
		return x.RollingAvgWeightedLatency
	}
	return 0
}

func (x *HealthMoment) GetLatencyHealth() string {
	if x != nil {
		return x.LatencyHealth
	}
	return ""
}

func (x *HealthMoment) GetPacketLossHealth() string {
	if x != nil {
		return x.PacketLossHealth
	}
	return ""
}

func (x *HealthMoment) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *HealthMoment) GetAvgJitter() uint32 {
	if x != nil {
		return x.AvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingAvgJitter() uint32 {
	if x != nil {
		return x.RollingAvgJitter
	}
	return 0
}

func (x *HealthMoment) GetRollingStdJitter() uint32 {
	if x != nil {
		return x.RollingStdJitter
	}
	return 0
}

func (x *HealthMoment) GetJitterHealth() string {
	if x != nil {
		return x.JitterHealth
	}
	return ""
}

func (x *HealthMoment) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HealthMoment) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HealthMoment) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HealthMoment) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AgentName       string   `protobuf:"bytes,2,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	AgentStatus     string   `protobuf:"bytes,3,opt,name=agent_status,json=agentStatus,proto3" json:"agent_status,omitempty"`
	CompanyId       uint64   `protobuf:"varint,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	AgentAlias      string   `protobuf:"bytes,5,opt,name=agent_alias,json=agentAlias,proto3" json:"agent_alias,omitempty"`
	AgentType       string   `protobuf:"bytes,6,opt,name=agent_type,json=agentType,proto3" json:"agent_type,omitempty"`
	Os              string   `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	Ip              string   `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat             float64  `protobuf:"fixed64,9,opt,name=lat,proto3" json:"lat,omitempty"`
	Long            float64  `protobuf:"fixed64,10,opt,name=long,proto3" json:"long,omitempty"`
	AgentLastAuthed uint64   `protobuf:"varint,11,opt,name=agent_last_authed,json=agentLastAuthed,proto3" json:"agent_last_authed,omitempty"`
	Family          IPFamily `protobuf:"varint,12,opt,name=family,proto3,enum=kentik.synthetics.v202101alpha1.IPFamily" json:"family,omitempty"`
	Asn             uint32   `protobuf:"varint,13,opt,name=asn,proto3" json:"asn,omitempty"`
	AgentSiteId     uint64   `protobuf:"varint,14,opt,name=agent_site_id,json=agentSiteId,proto3" json:"agent_site_id,omitempty"`
	Version         string   `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	Challenge       string   `protobuf:"bytes,16,opt,name=challenge,proto3" json:"challenge,omitempty"`
	City            string   `protobuf:"bytes,17,opt,name=city,proto3" json:"city,omitempty"`
	Region          string   `protobuf:"bytes,18,opt,name=region,proto3" json:"region,omitempty"`
	Country         string   `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{8}
}

func (x *Agent) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Agent) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *Agent) GetAgentStatus() string {
	if x != nil {
		return x.AgentStatus
	}
	return ""
}

func (x *Agent) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *Agent) GetAgentAlias() string {
	if x != nil {
		return x.AgentAlias
	}
	return ""
}

func (x *Agent) GetAgentType() string {
	if x != nil {
		return x.AgentType
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Agent) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Agent) GetAgentLastAuthed() uint64 {
	if x != nil {
		return x.AgentLastAuthed
	}
	return 0
}

func (x *Agent) GetFamily() IPFamily {
	if x != nil {
		return x.Family
	}
	return IPFamily_V4
}

func (x *Agent) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Agent) GetAgentSiteId() uint64 {
	if x != nil {
		return x.AgentSiteId
	}
	return 0
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Agent) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *Agent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Agent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Agent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type PingTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Count  uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PingTaskDefinition) Reset() {
	*x = PingTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTaskDefinition) ProtoMessage() {}

func (x *PingTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTaskDefinition.ProtoReflect.Descriptor instead.
func (*PingTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{9}
}

func (x *PingTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PingTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *PingTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *PingTaskDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TraceTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Limit  uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TraceTaskDefinition) Reset() {
	*x = TraceTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTaskDefinition) ProtoMessage() {}

func (x *TraceTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTaskDefinition.ProtoReflect.Descriptor instead.
func (*TraceTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{10}
}

func (x *TraceTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TraceTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *TraceTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *TraceTaskDefinition) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type HTTPTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Period uint32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Expiry uint32 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *HTTPTaskDefinition) Reset() {
	*x = HTTPTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTaskDefinition) ProtoMessage() {}

func (x *HTTPTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTaskDefinition.ProtoReflect.Descriptor instead.
func (*HTTPTaskDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{11}
}

func (x *HTTPTaskDefinition) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HTTPTaskDefinition) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *HTTPTaskDefinition) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type GetTraceForTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // This is for a single test
	StartTime int64    `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgentIds  []uint64 `protobuf:"varint,5,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"` // Allow looking at only a subset of agents.
}

func (x *GetTraceForTestRequest) Reset() {
	*x = GetTraceForTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestRequest) ProtoMessage() {}

func (x *GetTraceForTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceForTestRequest) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{12}
}

func (x *GetTraceForTestRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTraceForTestRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTraceForTestRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTraceForTestRequest) GetAgentIds() []uint64 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type GetTraceForTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Trace  *Trace  `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (x *GetTraceForTestResponse) Reset() {
	*x = GetTraceForTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceForTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceForTestResponse) ProtoMessage() {}

func (x *GetTraceForTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceForTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceForTestResponse) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{13}
}

func (x *GetTraceForTestResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTraceForTestResponse) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops  []*TraceHop  `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	Links []*TraceLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{14}
}

func (x *Trace) GetHops() []*TraceHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *Trace) GetLinks() []*TraceLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type TraceHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               // an ID to use to ref this hop in links
	HopName   string  `protobuf:"bytes,2,opt,name=hop_name,json=hopName,proto3" json:"hop_name,omitempty"`       // this is either the device_name if we know it, or the IP of the hop
	HopDepth  uint32  `protobuf:"varint,3,opt,name=hop_depth,json=hopDepth,proto3" json:"hop_depth,omitempty"`   // 0 for agents, 100 for last hop regardless of intermediate hops
	Asn       uint32  `protobuf:"varint,4,opt,name=asn,proto3" json:"asn,omitempty"`                             // this is an augmentation: ip2asn
	InHealth  *Health `protobuf:"bytes,5,opt,name=in_health,json=inHealth,proto3" json:"in_health,omitempty"`    // a rollup of inbound link health
	OutHealth *Health `protobuf:"bytes,6,opt,name=out_health,json=outHealth,proto3" json:"out_health,omitempty"` // a rollup of outbound link health
}

func (x *TraceHop) Reset() {
	*x = TraceHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceHop) ProtoMessage() {}

func (x *TraceHop) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceHop.ProtoReflect.Descriptor instead.
func (*TraceHop) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{15}
}

func (x *TraceHop) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TraceHop) GetHopName() string {
	if x != nil {
		return x.HopName
	}
	return ""
}

func (x *TraceHop) GetHopDepth() uint32 {
	if x != nil {
		return x.HopDepth
	}
	return 0
}

func (x *TraceHop) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *TraceHop) GetInHealth() *Health {
	if x != nil {
		return x.InHealth
	}
	return nil
}

func (x *TraceHop) GetOutHealth() *Health {
	if x != nil {
		return x.OutHealth
	}
	return nil
}

type TraceLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcHopId      uint32          `protobuf:"varint,1,opt,name=src_hop_id,json=srcHopId,proto3" json:"src_hop_id,omitempty"`             // id of the src hop
	DstHopId      uint32          `protobuf:"varint,2,opt,name=dst_hop_id,json=dstHopId,proto3" json:"dst_hop_id,omitempty"`             // id of the dst hop
	OverallHealth *Health         `protobuf:"bytes,3,opt,name=overall_health,json=overallHealth,proto3" json:"overall_health,omitempty"` // rollup of health moment health
	Health        []*HealthMoment `protobuf:"bytes,4,rep,name=health,proto3" json:"health,omitempty"`                                    // src_ip is optional if we have it from topology; dst_ip is the dst_hop ip
}

func (x *TraceLink) Reset() {
	*x = TraceLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceLink) ProtoMessage() {}

func (x *TraceLink) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceLink.ProtoReflect.Descriptor instead.
func (*TraceLink) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{16}
}

func (x *TraceLink) GetSrcHopId() uint32 {
	if x != nil {
		return x.SrcHopId
	}
	return 0
}

func (x *TraceLink) GetDstHopId() uint32 {
	if x != nil {
		return x.DstHopId
	}
	return 0
}

func (x *TraceLink) GetOverallHealth() *Health {
	if x != nil {
		return x.OverallHealth
	}
	return nil
}

func (x *TraceLink) GetHealth() []*HealthMoment {
	if x != nil {
		return x.Health
	}
	return nil
}

type Status_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Retry  uint32 `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *Status_Error) Reset() {
	*x = Status_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Error) ProtoMessage() {}

func (x *Status_Error) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Error.ProtoReflect.Descriptor instead.
func (*Status_Error) Descriptor() ([]byte, []int) {
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Status_Error) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Status_Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Status_Error) GetRetry() uint32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

var File_kentik_synthetics_v202101alpha_synthetics_proto protoreflect.FileDescriptor

var file_kentik_synthetics_v202101alpha_synthetics_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xb0, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x41, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x47, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfe,
	0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x44,
	0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x8d, 0x06, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x76,
	0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0d, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x67, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x76, 0x67, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x76, 0x67, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x64, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x04, 0x0a, 0x05, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x72, 0x0a,
	0x12, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x73, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5c, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x98, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73,
	0x12, 0x40, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x70, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68,
	0x6f, 0x70, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x08, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x46, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xde, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x48, 0x6f,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x73, 0x74, 0x48, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x45, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2a, 0x24, 0x0a, 0x08, 0x49, 0x50, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x56, 0x36, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x32, 0xcf,
	0x03, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x12, 0xc0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x1a, 0x2a, 0xca, 0x41, 0x19, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0a, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x32, 0x4a, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x30, 0xca, 0x41, 0x19, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x32, 0x48, 0x0a, 0x19,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x2b, 0xca, 0x41, 0x19, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x73, 0x75, 0x64, 0x6f, 0x42, 0xa2, 0x03, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x92, 0x41, 0xce, 0x02, 0x12, 0x5c, 0x0a,
	0x19, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x20, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x22, 0x37, 0x0a, 0x16, 0x4b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x61, 0x70, 0x69, 0x32, 0x06, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5a, 0x5c, 0x0a, 0x30, 0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74,
	0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a,
	0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x0a, 0x28, 0x0a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41,
	0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58,
	0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02,
	0x62, 0x32, 0x0a, 0x17, 0x0a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x41, 0x50, 0x49, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x17, 0x0a, 0x13, 0x58,
	0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x1b,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescOnce sync.Once
	file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescData = file_kentik_synthetics_v202101alpha_synthetics_proto_rawDesc
)

func file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescGZIP() []byte {
	file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescOnce.Do(func() {
		file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescData)
	})
	return file_kentik_synthetics_v202101alpha_synthetics_proto_rawDescData
}

var file_kentik_synthetics_v202101alpha_synthetics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_kentik_synthetics_v202101alpha_synthetics_proto_goTypes = []interface{}{
	(IPFamily)(0),                     // 0: kentik.synthetics.v202101alpha1.IPFamily
	(*GetHealthForTestsRequest)(nil),  // 1: kentik.synthetics.v202101alpha1.GetHealthForTestsRequest
	(*GetHealthForTestsResponse)(nil), // 2: kentik.synthetics.v202101alpha1.GetHealthForTestsResponse
	(*Status)(nil),                    // 3: kentik.synthetics.v202101alpha1.Status
	(*Health)(nil),                    // 4: kentik.synthetics.v202101alpha1.Health
	(*TestHealth)(nil),                // 5: kentik.synthetics.v202101alpha1.TestHealth
	(*TaskHealth)(nil),                // 6: kentik.synthetics.v202101alpha1.TaskHealth
	(*AgentHealth)(nil),               // 7: kentik.synthetics.v202101alpha1.AgentHealth
	(*HealthMoment)(nil),              // 8: kentik.synthetics.v202101alpha1.HealthMoment
	(*Agent)(nil),                     // 9: kentik.synthetics.v202101alpha1.Agent
	(*PingTaskDefinition)(nil),        // 10: kentik.synthetics.v202101alpha1.PingTaskDefinition
	(*TraceTaskDefinition)(nil),       // 11: kentik.synthetics.v202101alpha1.TraceTaskDefinition
	(*HTTPTaskDefinition)(nil),        // 12: kentik.synthetics.v202101alpha1.HTTPTaskDefinition
	(*GetTraceForTestRequest)(nil),    // 13: kentik.synthetics.v202101alpha1.GetTraceForTestRequest
	(*GetTraceForTestResponse)(nil),   // 14: kentik.synthetics.v202101alpha1.GetTraceForTestResponse
	(*Trace)(nil),                     // 15: kentik.synthetics.v202101alpha1.Trace
	(*TraceHop)(nil),                  // 16: kentik.synthetics.v202101alpha1.TraceHop
	(*TraceLink)(nil),                 // 17: kentik.synthetics.v202101alpha1.TraceLink
	(*Status_Error)(nil),              // 18: kentik.synthetics.v202101alpha1.Status.Error
}
var file_kentik_synthetics_v202101alpha_synthetics_proto_depIdxs = []int32{
	3,  // 0: kentik.synthetics.v202101alpha1.GetHealthForTestsResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	5,  // 1: kentik.synthetics.v202101alpha1.GetHealthForTestsResponse.health:type_name -> kentik.synthetics.v202101alpha1.TestHealth
	18, // 2: kentik.synthetics.v202101alpha1.Status.err:type_name -> kentik.synthetics.v202101alpha1.Status.Error
	6,  // 3: kentik.synthetics.v202101alpha1.TestHealth.tasks:type_name -> kentik.synthetics.v202101alpha1.TaskHealth
	4,  // 4: kentik.synthetics.v202101alpha1.TestHealth.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	4,  // 5: kentik.synthetics.v202101alpha1.TestHealth.health_ts:type_name -> kentik.synthetics.v202101alpha1.Health
	7,  // 6: kentik.synthetics.v202101alpha1.TaskHealth.agents:type_name -> kentik.synthetics.v202101alpha1.AgentHealth
	4,  // 7: kentik.synthetics.v202101alpha1.TaskHealth.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	9,  // 8: kentik.synthetics.v202101alpha1.AgentHealth.agent:type_name -> kentik.synthetics.v202101alpha1.Agent
	8,  // 9: kentik.synthetics.v202101alpha1.AgentHealth.health:type_name -> kentik.synthetics.v202101alpha1.HealthMoment
	4,  // 10: kentik.synthetics.v202101alpha1.AgentHealth.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	4,  // 11: kentik.synthetics.v202101alpha1.HealthMoment.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	0,  // 12: kentik.synthetics.v202101alpha1.Agent.family:type_name -> kentik.synthetics.v202101alpha1.IPFamily
	3,  // 13: kentik.synthetics.v202101alpha1.GetTraceForTestResponse.status:type_name -> kentik.synthetics.v202101alpha1.Status
	15, // 14: kentik.synthetics.v202101alpha1.GetTraceForTestResponse.trace:type_name -> kentik.synthetics.v202101alpha1.Trace
	16, // 15: kentik.synthetics.v202101alpha1.Trace.hops:type_name -> kentik.synthetics.v202101alpha1.TraceHop
	17, // 16: kentik.synthetics.v202101alpha1.Trace.links:type_name -> kentik.synthetics.v202101alpha1.TraceLink
	4,  // 17: kentik.synthetics.v202101alpha1.TraceHop.in_health:type_name -> kentik.synthetics.v202101alpha1.Health
	4,  // 18: kentik.synthetics.v202101alpha1.TraceHop.out_health:type_name -> kentik.synthetics.v202101alpha1.Health
	4,  // 19: kentik.synthetics.v202101alpha1.TraceLink.overall_health:type_name -> kentik.synthetics.v202101alpha1.Health
	8,  // 20: kentik.synthetics.v202101alpha1.TraceLink.health:type_name -> kentik.synthetics.v202101alpha1.HealthMoment
	1,  // 21: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetHealthForTests:input_type -> kentik.synthetics.v202101alpha1.GetHealthForTestsRequest
	13, // 22: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetTraceForTest:input_type -> kentik.synthetics.v202101alpha1.GetTraceForTestRequest
	2,  // 23: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetHealthForTests:output_type -> kentik.synthetics.v202101alpha1.GetHealthForTestsResponse
	14, // 24: kentik.synthetics.v202101alpha1.SyntheticsDataService.GetTraceForTest:output_type -> kentik.synthetics.v202101alpha1.GetTraceForTestResponse
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_kentik_synthetics_v202101alpha_synthetics_proto_init() }
func file_kentik_synthetics_v202101alpha_synthetics_proto_init() {
	if File_kentik_synthetics_v202101alpha_synthetics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthForTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthForTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceForTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Status_Ok)(nil),
		(*Status_Err)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_synthetics_v202101alpha_synthetics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_kentik_synthetics_v202101alpha_synthetics_proto_goTypes,
		DependencyIndexes: file_kentik_synthetics_v202101alpha_synthetics_proto_depIdxs,
		EnumInfos:         file_kentik_synthetics_v202101alpha_synthetics_proto_enumTypes,
		MessageInfos:      file_kentik_synthetics_v202101alpha_synthetics_proto_msgTypes,
	}.Build()
	File_kentik_synthetics_v202101alpha_synthetics_proto = out.File
	file_kentik_synthetics_v202101alpha_synthetics_proto_rawDesc = nil
	file_kentik_synthetics_v202101alpha_synthetics_proto_goTypes = nil
	file_kentik_synthetics_v202101alpha_synthetics_proto_depIdxs = nil
}
