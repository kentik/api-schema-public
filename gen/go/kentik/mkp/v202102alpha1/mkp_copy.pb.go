// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/mkp/v202102alpha1/mkp.proto

package mkp

import "google.golang.org/protobuf/types/known/fieldmaskpb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Alert) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Alert:
		x.Saved = v.GetSaved()
		x.PolicyId = v.GetPolicyId()
		x.Thresholds = v.GetThresholds()
		x.PrimaryMetric = v.GetPrimaryMetric()
		x.SecondaryMetrics = v.GetSecondaryMetrics()
		x.IsTemplate = v.GetIsTemplate()
		x.SubpolicyId = v.GetSubpolicyId()
	default:
		if v, ok := v.(interface{ GetSaved() bool }); ok {
			x.Saved = v.GetSaved()
		}
		if v, ok := v.(interface{ GetPolicyId() uint64 }); ok {
			x.PolicyId = v.GetPolicyId()
		}
		if v, ok := v.(interface{ GetThresholds() []*Threshold }); ok {
			x.Thresholds = v.GetThresholds()
		}
		if v, ok := v.(interface{ GetPrimaryMetric() string }); ok {
			x.PrimaryMetric = v.GetPrimaryMetric()
		}
		if v, ok := v.(interface{ GetSecondaryMetrics() []string }); ok {
			x.SecondaryMetrics = v.GetSecondaryMetrics()
		}
		if v, ok := v.(interface{ GetIsTemplate() bool }); ok {
			x.IsTemplate = v.GetIsTemplate()
		}
		if v, ok := v.(interface{ GetSubpolicyId() string }); ok {
			x.SubpolicyId = v.GetSubpolicyId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Alert) Proto_ShallowClone() (c *Alert) {
	if x != nil {
		c = new(Alert)
		c.Saved = x.Saved
		c.PolicyId = x.PolicyId
		c.Thresholds = x.Thresholds
		c.PrimaryMetric = x.PrimaryMetric
		c.SecondaryMetrics = x.SecondaryMetrics
		c.IsTemplate = x.IsTemplate
		c.SubpolicyId = x.SubpolicyId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Asset) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Asset:
		x.Reports = v.GetReports()
		x.DefaultReport = v.GetDefaultReport()
	default:
		if v, ok := v.(interface{ GetReports() []*Asset_Report }); ok {
			x.Reports = v.GetReports()
		}
		if v, ok := v.(interface{ GetDefaultReport() *Asset_Report }); ok {
			x.DefaultReport = v.GetDefaultReport()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Asset) Proto_ShallowClone() (c *Asset) {
	if x != nil {
		c = new(Asset)
		c.Reports = x.Reports
		c.DefaultReport = x.DefaultReport
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Asset_Report) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Asset_Report:
		x.Id = v.GetId()
		x.Type = v.GetType()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Asset_Report) Proto_ShallowClone() (c *Asset_Report) {
	if x != nil {
		c = new(Asset_Report)
		c.Id = x.Id
		c.Type = x.Type
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Threshold) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Threshold:
		x.Id = v.GetId()
		x.Activate = v.GetActivate()
		x.Severity = v.GetSeverity()
		x.Conditions = v.GetConditions()
		x.Mitigations = v.GetMitigations()
		x.NotificationChannels = v.GetNotificationChannels()
		x.ThresholdAckRequired = v.GetThresholdAckRequired()
		x.EnableTenantNotifications = v.GetEnableTenantNotifications()
		x.ReceiveLandlordNotifications = v.GetReceiveLandlordNotifications()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetActivate() *Activate }); ok {
			x.Activate = v.GetActivate()
		}
		if v, ok := v.(interface{ GetSeverity() string }); ok {
			x.Severity = v.GetSeverity()
		}
		if v, ok := v.(interface{ GetConditions() []*Condition }); ok {
			x.Conditions = v.GetConditions()
		}
		if v, ok := v.(interface{ GetMitigations() []*Mitigation }); ok {
			x.Mitigations = v.GetMitigations()
		}
		if v, ok := v.(interface{ GetNotificationChannels() []*NotificationChannel }); ok {
			x.NotificationChannels = v.GetNotificationChannels()
		}
		if v, ok := v.(interface{ GetThresholdAckRequired() bool }); ok {
			x.ThresholdAckRequired = v.GetThresholdAckRequired()
		}
		if v, ok := v.(interface{ GetEnableTenantNotifications() bool }); ok {
			x.EnableTenantNotifications = v.GetEnableTenantNotifications()
		}
		if v, ok := v.(interface{ GetReceiveLandlordNotifications() bool }); ok {
			x.ReceiveLandlordNotifications = v.GetReceiveLandlordNotifications()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Threshold) Proto_ShallowClone() (c *Threshold) {
	if x != nil {
		c = new(Threshold)
		c.Id = x.Id
		c.Activate = x.Activate
		c.Severity = x.Severity
		c.Conditions = x.Conditions
		c.Mitigations = x.Mitigations
		c.NotificationChannels = x.NotificationChannels
		c.ThresholdAckRequired = x.ThresholdAckRequired
		c.EnableTenantNotifications = x.EnableTenantNotifications
		c.ReceiveLandlordNotifications = x.ReceiveLandlordNotifications
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Activate) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Activate:
		x.Times = v.GetTimes()
		x.Operator = v.GetOperator()
		x.TimeUnit = v.GetTimeUnit()
		x.TimeWindow = v.GetTimeWindow()
		x.GracePeriod = v.GetGracePeriod()
	default:
		if v, ok := v.(interface{ GetTimes() uint32 }); ok {
			x.Times = v.GetTimes()
		}
		if v, ok := v.(interface{ GetOperator() string }); ok {
			x.Operator = v.GetOperator()
		}
		if v, ok := v.(interface{ GetTimeUnit() string }); ok {
			x.TimeUnit = v.GetTimeUnit()
		}
		if v, ok := v.(interface{ GetTimeWindow() uint32 }); ok {
			x.TimeWindow = v.GetTimeWindow()
		}
		if v, ok := v.(interface{ GetGracePeriod() uint32 }); ok {
			x.GracePeriod = v.GetGracePeriod()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Activate) Proto_ShallowClone() (c *Activate) {
	if x != nil {
		c = new(Activate)
		c.Times = x.Times
		c.Operator = x.Operator
		c.TimeUnit = x.TimeUnit
		c.TimeWindow = x.TimeWindow
		c.GracePeriod = x.GracePeriod
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Condition) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Condition:
		x.Type = v.GetType()
		x.Value = v.GetValue()
		x.Metric = v.GetMetric()
		x.Operator = v.GetOperator()
		x.ValueType = v.GetValueType()
		x.ValueSelect = v.GetValueSelect()
	default:
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetValue() uint32 }); ok {
			x.Value = v.GetValue()
		}
		if v, ok := v.(interface{ GetMetric() string }); ok {
			x.Metric = v.GetMetric()
		}
		if v, ok := v.(interface{ GetOperator() string }); ok {
			x.Operator = v.GetOperator()
		}
		if v, ok := v.(interface{ GetValueType() string }); ok {
			x.ValueType = v.GetValueType()
		}
		if v, ok := v.(interface{ GetValueSelect() string }); ok {
			x.ValueSelect = v.GetValueSelect()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Condition) Proto_ShallowClone() (c *Condition) {
	if x != nil {
		c = new(Condition)
		c.Type = x.Type
		c.Value = x.Value
		c.Metric = x.Metric
		c.Operator = x.Operator
		c.ValueType = x.ValueType
		c.ValueSelect = x.ValueSelect
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Mitigation) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Mitigation:
		x.Id = v.GetId()
		x.Status = v.GetStatus()
		x.CompanyId = v.GetCompanyId()
		x.PairingId = v.GetPairingId()
		x.ThresholdId = v.GetThresholdId()
		x.IsMethodOverridable = v.GetIsMethodOverridable()
		x.MitigationApplyType = v.GetMitigationApplyType()
		x.MitigationClearType = v.GetMitigationClearType()
		x.MitigationApplyTimer = v.GetMitigationApplyTimer()
		x.MitigationClearTimer = v.GetMitigationClearTimer()
		x.IsPlatformOverridable = v.GetIsPlatformOverridable()
		x.Cdate = v.GetCdate()
		x.Edate = v.GetEdate()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetStatus() string }); ok {
			x.Status = v.GetStatus()
		}
		if v, ok := v.(interface{ GetCompanyId() uint64 }); ok {
			x.CompanyId = v.GetCompanyId()
		}
		if v, ok := v.(interface{ GetPairingId() uint64 }); ok {
			x.PairingId = v.GetPairingId()
		}
		if v, ok := v.(interface{ GetThresholdId() uint64 }); ok {
			x.ThresholdId = v.GetThresholdId()
		}
		if v, ok := v.(interface{ GetIsMethodOverridable() bool }); ok {
			x.IsMethodOverridable = v.GetIsMethodOverridable()
		}
		if v, ok := v.(interface{ GetMitigationApplyType() string }); ok {
			x.MitigationApplyType = v.GetMitigationApplyType()
		}
		if v, ok := v.(interface{ GetMitigationClearType() string }); ok {
			x.MitigationClearType = v.GetMitigationClearType()
		}
		if v, ok := v.(interface{ GetMitigationApplyTimer() uint32 }); ok {
			x.MitigationApplyTimer = v.GetMitigationApplyTimer()
		}
		if v, ok := v.(interface{ GetMitigationClearTimer() uint32 }); ok {
			x.MitigationClearTimer = v.GetMitigationClearTimer()
		}
		if v, ok := v.(interface{ GetIsPlatformOverridable() bool }); ok {
			x.IsPlatformOverridable = v.GetIsPlatformOverridable()
		}
		if v, ok := v.(interface{ GetCdate() string }); ok {
			x.Cdate = v.GetCdate()
		}
		if v, ok := v.(interface{ GetEdate() string }); ok {
			x.Edate = v.GetEdate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Mitigation) Proto_ShallowClone() (c *Mitigation) {
	if x != nil {
		c = new(Mitigation)
		c.Id = x.Id
		c.Status = x.Status
		c.CompanyId = x.CompanyId
		c.PairingId = x.PairingId
		c.ThresholdId = x.ThresholdId
		c.IsMethodOverridable = x.IsMethodOverridable
		c.MitigationApplyType = x.MitigationApplyType
		c.MitigationClearType = x.MitigationClearType
		c.MitigationApplyTimer = x.MitigationApplyTimer
		c.MitigationClearTimer = x.MitigationClearTimer
		c.IsPlatformOverridable = x.IsPlatformOverridable
		c.Cdate = x.Cdate
		c.Edate = x.Edate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NotificationChannel) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NotificationChannel:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NotificationChannel) Proto_ShallowClone() (c *NotificationChannel) {
	if x != nil {
		c = new(NotificationChannel)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *User) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *User:
		x.Id = v.GetId()
		x.CompanyId = v.GetCompanyId()
		x.UserEmail = v.GetUserEmail()
		x.UserName = v.GetUserName()
		x.UserFullName = v.GetUserFullName()
		x.UserGroupId = v.GetUserGroupId()
		x.LastLogin = v.GetLastLogin()
		x.PermissionOverrides = v.GetPermissionOverrides()
		x.Role = v.GetRole()
		x.UserLevel = v.GetUserLevel()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetCompanyId() uint64 }); ok {
			x.CompanyId = v.GetCompanyId()
		}
		if v, ok := v.(interface{ GetUserEmail() string }); ok {
			x.UserEmail = v.GetUserEmail()
		}
		if v, ok := v.(interface{ GetUserName() string }); ok {
			x.UserName = v.GetUserName()
		}
		if v, ok := v.(interface{ GetUserFullName() string }); ok {
			x.UserFullName = v.GetUserFullName()
		}
		if v, ok := v.(interface{ GetUserGroupId() uint64 }); ok {
			x.UserGroupId = v.GetUserGroupId()
		}
		if v, ok := v.(interface{ GetLastLogin() string }); ok {
			x.LastLogin = v.GetLastLogin()
		}
		if v, ok := v.(interface{ GetPermissionOverrides() bool }); ok {
			x.PermissionOverrides = v.GetPermissionOverrides()
		}
		if v, ok := v.(interface{ GetRole() string }); ok {
			x.Role = v.GetRole()
		}
		if v, ok := v.(interface{ GetUserLevel() uint32 }); ok {
			x.UserLevel = v.GetUserLevel()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *User) Proto_ShallowClone() (c *User) {
	if x != nil {
		c = new(User)
		c.Id = x.Id
		c.CompanyId = x.CompanyId
		c.UserEmail = x.UserEmail
		c.UserName = x.UserName
		c.UserFullName = x.UserFullName
		c.UserGroupId = x.UserGroupId
		c.LastLogin = x.LastLogin
		c.PermissionOverrides = x.PermissionOverrides
		c.Role = x.Role
		c.UserLevel = x.UserLevel
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TenantLink) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TenantLink:
		x.Id = v.GetId()
		x.PivotTemplateId = v.GetPivotTemplateId()
		x.PivotUserGroupId = v.GetPivotUserGroupId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetPivotTemplateId() uint64 }); ok {
			x.PivotTemplateId = v.GetPivotTemplateId()
		}
		if v, ok := v.(interface{ GetPivotUserGroupId() uint64 }); ok {
			x.PivotUserGroupId = v.GetPivotUserGroupId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TenantLink) Proto_ShallowClone() (c *TenantLink) {
	if x != nil {
		c = new(TenantLink)
		c.Id = x.Id
		c.PivotTemplateId = x.PivotTemplateId
		c.PivotUserGroupId = x.PivotUserGroupId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Package) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Package:
		x.Id = v.GetId()
		x.CompanyId = v.GetCompanyId()
		x.Name = v.GetName()
		x.Description = v.GetDescription()
		x.Icon = v.GetIcon()
		x.Color = v.GetColor()
		x.Alerts = v.GetAlerts()
		x.Assets = v.GetAssets()
		x.IsDefault = v.GetIsDefault()
		x.Tenants = v.GetTenants()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetCompanyId() uint64 }); ok {
			x.CompanyId = v.GetCompanyId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetDescription() string }); ok {
			x.Description = v.GetDescription()
		}
		if v, ok := v.(interface{ GetIcon() string }); ok {
			x.Icon = v.GetIcon()
		}
		if v, ok := v.(interface{ GetColor() string }); ok {
			x.Color = v.GetColor()
		}
		if v, ok := v.(interface{ GetAlerts() []*Alert }); ok {
			x.Alerts = v.GetAlerts()
		}
		if v, ok := v.(interface{ GetAssets() *Asset }); ok {
			x.Assets = v.GetAssets()
		}
		if v, ok := v.(interface{ GetIsDefault() bool }); ok {
			x.IsDefault = v.GetIsDefault()
		}
		if v, ok := v.(interface{ GetTenants() []*TenantLink }); ok {
			x.Tenants = v.GetTenants()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Package) Proto_ShallowClone() (c *Package) {
	if x != nil {
		c = new(Package)
		c.Id = x.Id
		c.CompanyId = x.CompanyId
		c.Name = x.Name
		c.Description = x.Description
		c.Icon = x.Icon
		c.Color = x.Color
		c.Alerts = x.Alerts
		c.Assets = x.Assets
		c.IsDefault = x.IsDefault
		c.Tenants = x.Tenants
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CustomDimension) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CustomDimension:
		x.Dimension = v.GetDimension()
		x.Populator = v.GetPopulator()
	default:
		if v, ok := v.(interface{ GetDimension() string }); ok {
			x.Dimension = v.GetDimension()
		}
		if v, ok := v.(interface{ GetPopulator() string }); ok {
			x.Populator = v.GetPopulator()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CustomDimension) Proto_ShallowClone() (c *CustomDimension) {
	if x != nil {
		c = new(CustomDimension)
		c.Dimension = x.Dimension
		c.Populator = x.Populator
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Device) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Device:
		x.AllDevices = v.GetAllDevices()
		x.DeviceTypes = v.GetDeviceTypes()
		x.DeviceLabels = v.GetDeviceLabels()
		x.DeviceSites = v.GetDeviceSites()
		x.DeviceName = v.GetDeviceName()
	default:
		if v, ok := v.(interface{ GetAllDevices() bool }); ok {
			x.AllDevices = v.GetAllDevices()
		}
		if v, ok := v.(interface{ GetDeviceTypes() []string }); ok {
			x.DeviceTypes = v.GetDeviceTypes()
		}
		if v, ok := v.(interface{ GetDeviceLabels() []uint32 }); ok {
			x.DeviceLabels = v.GetDeviceLabels()
		}
		if v, ok := v.(interface{ GetDeviceSites() []uint32 }); ok {
			x.DeviceSites = v.GetDeviceSites()
		}
		if v, ok := v.(interface{ GetDeviceName() []string }); ok {
			x.DeviceName = v.GetDeviceName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Device) Proto_ShallowClone() (c *Device) {
	if x != nil {
		c = new(Device)
		c.AllDevices = x.AllDevices
		c.DeviceTypes = x.DeviceTypes
		c.DeviceLabels = x.DeviceLabels
		c.DeviceSites = x.DeviceSites
		c.DeviceName = x.DeviceName
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *FilterField) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *FilterField:
		x.FilterField = v.GetFilterField()
		x.Operator = v.GetOperator()
		x.FilterValue = v.GetFilterValue()
	default:
		if v, ok := v.(interface{ GetFilterField() string }); ok {
			x.FilterField = v.GetFilterField()
		}
		if v, ok := v.(interface{ GetOperator() string }); ok {
			x.Operator = v.GetOperator()
		}
		if v, ok := v.(interface{ GetFilterValue() string }); ok {
			x.FilterValue = v.GetFilterValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *FilterField) Proto_ShallowClone() (c *FilterField) {
	if x != nil {
		c = new(FilterField)
		c.FilterField = x.FilterField
		c.Operator = x.Operator
		c.FilterValue = x.FilterValue
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Filter) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Filter:
		x.Name = v.GetName()
		x.Named = v.GetNamed()
		x.Connector = v.GetConnector()
		x.Not = v.GetNot()
		x.AutoAdded = v.GetAutoAdded()
		x.SavedFilters = v.GetSavedFilters()
		x.Filters = v.GetFilters()
		x.FilterGroups = v.GetFilterGroups()
		x.Metric = v.GetMetric()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetNamed() bool }); ok {
			x.Named = v.GetNamed()
		}
		if v, ok := v.(interface{ GetConnector() string }); ok {
			x.Connector = v.GetConnector()
		}
		if v, ok := v.(interface{ GetNot() bool }); ok {
			x.Not = v.GetNot()
		}
		if v, ok := v.(interface{ GetAutoAdded() string }); ok {
			x.AutoAdded = v.GetAutoAdded()
		}
		if v, ok := v.(interface{ GetSavedFilters() []string }); ok {
			x.SavedFilters = v.GetSavedFilters()
		}
		if v, ok := v.(interface{ GetFilters() []*FilterField }); ok {
			x.Filters = v.GetFilters()
		}
		if v, ok := v.(interface{ GetFilterGroups() []*Filter }); ok {
			x.FilterGroups = v.GetFilterGroups()
		}
		if v, ok := v.(interface{ GetMetric() []string }); ok {
			x.Metric = v.GetMetric()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Filter) Proto_ShallowClone() (c *Filter) {
	if x != nil {
		c = new(Filter)
		c.Name = x.Name
		c.Named = x.Named
		c.Connector = x.Connector
		c.Not = x.Not
		c.AutoAdded = x.AutoAdded
		c.SavedFilters = x.SavedFilters
		c.Filters = x.Filters
		c.FilterGroups = x.FilterGroups
		c.Metric = x.Metric
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Tenant) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Tenant:
		x.Id = v.GetId()
		x.CompanyId = v.GetCompanyId()
		x.Name = v.GetName()
		x.Description = v.GetDescription()
		x.Type = v.GetType()
		x.Enabled = v.GetEnabled()
		x.Alerts = v.GetAlerts()
		x.Assets = v.GetAssets()
		x.Asn = v.GetAsn()
		x.Cidr = v.GetCidr()
		x.CustomDimensions = v.GetCustomDimensions()
		x.Devices = v.GetDevices()
		x.Filters = v.GetFilters()
		x.InterfaceName = v.GetInterfaceName()
		x.SnmpAlias = v.GetSnmpAlias()
		x.Packages = v.GetPackages()
		x.Users = v.GetUsers()
		x.TemplateId = v.GetTemplateId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetCompanyId() uint64 }); ok {
			x.CompanyId = v.GetCompanyId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetDescription() string }); ok {
			x.Description = v.GetDescription()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetEnabled() bool }); ok {
			x.Enabled = v.GetEnabled()
		}
		if v, ok := v.(interface{ GetAlerts() []*Alert }); ok {
			x.Alerts = v.GetAlerts()
		}
		if v, ok := v.(interface{ GetAssets() *Asset }); ok {
			x.Assets = v.GetAssets()
		}
		if v, ok := v.(interface{ GetAsn() string }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetCidr() string }); ok {
			x.Cidr = v.GetCidr()
		}
		if v, ok := v.(interface{ GetCustomDimensions() []*CustomDimension }); ok {
			x.CustomDimensions = v.GetCustomDimensions()
		}
		if v, ok := v.(interface{ GetDevices() *Device }); ok {
			x.Devices = v.GetDevices()
		}
		if v, ok := v.(interface{ GetFilters() *Filter }); ok {
			x.Filters = v.GetFilters()
		}
		if v, ok := v.(interface{ GetInterfaceName() string }); ok {
			x.InterfaceName = v.GetInterfaceName()
		}
		if v, ok := v.(interface{ GetSnmpAlias() string }); ok {
			x.SnmpAlias = v.GetSnmpAlias()
		}
		if v, ok := v.(interface{ GetPackages() []*Package }); ok {
			x.Packages = v.GetPackages()
		}
		if v, ok := v.(interface{ GetUsers() []*User }); ok {
			x.Users = v.GetUsers()
		}
		if v, ok := v.(interface{ GetTemplateId() uint32 }); ok {
			x.TemplateId = v.GetTemplateId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Tenant) Proto_ShallowClone() (c *Tenant) {
	if x != nil {
		c = new(Tenant)
		c.Id = x.Id
		c.CompanyId = x.CompanyId
		c.Name = x.Name
		c.Description = x.Description
		c.Type = x.Type
		c.Enabled = x.Enabled
		c.Alerts = x.Alerts
		c.Assets = x.Assets
		c.Asn = x.Asn
		c.Cidr = x.Cidr
		c.CustomDimensions = x.CustomDimensions
		c.Devices = x.Devices
		c.Filters = x.Filters
		c.InterfaceName = x.InterfaceName
		c.SnmpAlias = x.SnmpAlias
		c.Packages = x.Packages
		c.Users = x.Users
		c.TemplateId = x.TemplateId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListPackageRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListPackageRequest) Proto_ShallowClone() (c *ListPackageRequest) {
	if x != nil {
		c = new(ListPackageRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListPackageResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListPackageResponse:
		x.Packages = v.GetPackages()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetPackages() []*Package }); ok {
			x.Packages = v.GetPackages()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListPackageResponse) Proto_ShallowClone() (c *ListPackageResponse) {
	if x != nil {
		c = new(ListPackageResponse)
		c.Packages = x.Packages
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetPackageRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetPackageRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetPackageRequest) Proto_ShallowClone() (c *GetPackageRequest) {
	if x != nil {
		c = new(GetPackageRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetPackageResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetPackageResponse:
		x.Package = v.GetPackage()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetPackageResponse) Proto_ShallowClone() (c *GetPackageResponse) {
	if x != nil {
		c = new(GetPackageResponse)
		c.Package = x.Package
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreatePackageRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreatePackageRequest:
		x.Package = v.GetPackage()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreatePackageRequest) Proto_ShallowClone() (c *CreatePackageRequest) {
	if x != nil {
		c = new(CreatePackageRequest)
		c.Package = x.Package
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreatePackageResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreatePackageResponse:
		x.Package = v.GetPackage()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreatePackageResponse) Proto_ShallowClone() (c *CreatePackageResponse) {
	if x != nil {
		c = new(CreatePackageResponse)
		c.Package = x.Package
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdatePackageRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdatePackageRequest:
		x.Package = v.GetPackage()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdatePackageRequest) Proto_ShallowClone() (c *UpdatePackageRequest) {
	if x != nil {
		c = new(UpdatePackageRequest)
		c.Package = x.Package
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdatePackageResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdatePackageResponse:
		x.Package = v.GetPackage()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdatePackageResponse) Proto_ShallowClone() (c *UpdatePackageResponse) {
	if x != nil {
		c = new(UpdatePackageResponse)
		c.Package = x.Package
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchPackageRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchPackageRequest:
		x.Package = v.GetPackage()
		x.Mask = v.GetMask()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
		if v, ok := v.(interface{ GetMask() *fieldmaskpb.FieldMask }); ok {
			x.Mask = v.GetMask()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchPackageRequest) Proto_ShallowClone() (c *PatchPackageRequest) {
	if x != nil {
		c = new(PatchPackageRequest)
		c.Package = x.Package
		c.Mask = x.Mask
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchPackageResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchPackageResponse:
		x.Package = v.GetPackage()
	default:
		if v, ok := v.(interface{ GetPackage() *Package }); ok {
			x.Package = v.GetPackage()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchPackageResponse) Proto_ShallowClone() (c *PatchPackageResponse) {
	if x != nil {
		c = new(PatchPackageResponse)
		c.Package = x.Package
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeletePackageRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeletePackageRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeletePackageRequest) Proto_ShallowClone() (c *DeletePackageRequest) {
	if x != nil {
		c = new(DeletePackageRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeletePackageResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeletePackageResponse) Proto_ShallowClone() (c *DeletePackageResponse) {
	if x != nil {
		c = new(DeletePackageResponse)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListTenantRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListTenantRequest) Proto_ShallowClone() (c *ListTenantRequest) {
	if x != nil {
		c = new(ListTenantRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListTenantResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListTenantResponse:
		x.Tenants = v.GetTenants()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetTenants() []*Tenant }); ok {
			x.Tenants = v.GetTenants()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListTenantResponse) Proto_ShallowClone() (c *ListTenantResponse) {
	if x != nil {
		c = new(ListTenantResponse)
		c.Tenants = x.Tenants
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTenantRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTenantRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTenantRequest) Proto_ShallowClone() (c *GetTenantRequest) {
	if x != nil {
		c = new(GetTenantRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTenantResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTenantResponse:
		x.Tenant = v.GetTenant()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTenantResponse) Proto_ShallowClone() (c *GetTenantResponse) {
	if x != nil {
		c = new(GetTenantResponse)
		c.Tenant = x.Tenant
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateTenantRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateTenantRequest:
		x.Tenant = v.GetTenant()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateTenantRequest) Proto_ShallowClone() (c *CreateTenantRequest) {
	if x != nil {
		c = new(CreateTenantRequest)
		c.Tenant = x.Tenant
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateTenantResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateTenantResponse:
		x.Tenant = v.GetTenant()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateTenantResponse) Proto_ShallowClone() (c *CreateTenantResponse) {
	if x != nil {
		c = new(CreateTenantResponse)
		c.Tenant = x.Tenant
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateTenantRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateTenantRequest:
		x.Tenant = v.GetTenant()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateTenantRequest) Proto_ShallowClone() (c *UpdateTenantRequest) {
	if x != nil {
		c = new(UpdateTenantRequest)
		c.Tenant = x.Tenant
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateTenantResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateTenantResponse:
		x.Tenant = v.GetTenant()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateTenantResponse) Proto_ShallowClone() (c *UpdateTenantResponse) {
	if x != nil {
		c = new(UpdateTenantResponse)
		c.Tenant = x.Tenant
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchTenantRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchTenantRequest:
		x.Tenant = v.GetTenant()
		x.Mask = v.GetMask()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
		if v, ok := v.(interface{ GetMask() *fieldmaskpb.FieldMask }); ok {
			x.Mask = v.GetMask()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchTenantRequest) Proto_ShallowClone() (c *PatchTenantRequest) {
	if x != nil {
		c = new(PatchTenantRequest)
		c.Tenant = x.Tenant
		c.Mask = x.Mask
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *PatchTenantResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *PatchTenantResponse:
		x.Tenant = v.GetTenant()
	default:
		if v, ok := v.(interface{ GetTenant() *Tenant }); ok {
			x.Tenant = v.GetTenant()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *PatchTenantResponse) Proto_ShallowClone() (c *PatchTenantResponse) {
	if x != nil {
		c = new(PatchTenantResponse)
		c.Tenant = x.Tenant
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteTenantRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteTenantRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() uint64 }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteTenantRequest) Proto_ShallowClone() (c *DeleteTenantRequest) {
	if x != nil {
		c = new(DeleteTenantRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteTenantResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteTenantResponse) Proto_ShallowClone() (c *DeleteTenantResponse) {
	if x != nil {
		c = new(DeleteTenantResponse)
	}
	return
}
