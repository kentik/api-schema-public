// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/user/v202106alpha1/user.proto

package user

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *User) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *User:
		x.Id = v.GetId()
		x.UserEmail = v.GetUserEmail()
		x.Username = v.GetUsername()
		x.UserFullName = v.GetUserFullName()
		x.Role = v.GetRole()
		x.LastLogin = v.GetLastLogin()
		x.CreatedDate = v.GetCreatedDate()
		x.UpdatedDate = v.GetUpdatedDate()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetUserEmail() string }); ok {
			x.UserEmail = v.GetUserEmail()
		}
		if v, ok := v.(interface{ GetUsername() string }); ok {
			x.Username = v.GetUsername()
		}
		if v, ok := v.(interface{ GetUserFullName() string }); ok {
			x.UserFullName = v.GetUserFullName()
		}
		if v, ok := v.(interface{ GetRole() Role }); ok {
			x.Role = v.GetRole()
		}
		if v, ok := v.(interface{ GetLastLogin() *timestamppb.Timestamp }); ok {
			x.LastLogin = v.GetLastLogin()
		}
		if v, ok := v.(interface{ GetCreatedDate() *timestamppb.Timestamp }); ok {
			x.CreatedDate = v.GetCreatedDate()
		}
		if v, ok := v.(interface{ GetUpdatedDate() *timestamppb.Timestamp }); ok {
			x.UpdatedDate = v.GetUpdatedDate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *User) Proto_ShallowClone() (c *User) {
	if x != nil {
		c = new(User)
		c.Id = x.Id
		c.UserEmail = x.UserEmail
		c.Username = x.Username
		c.UserFullName = x.UserFullName
		c.Role = x.Role
		c.LastLogin = x.LastLogin
		c.CreatedDate = x.CreatedDate
		c.UpdatedDate = x.UpdatedDate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListUserRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListUserRequest) Proto_ShallowClone() (c *ListUserRequest) {
	if x != nil {
		c = new(ListUserRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListUserResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListUserResponse:
		x.Users = v.GetUsers()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetUsers() []*User }); ok {
			x.Users = v.GetUsers()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListUserResponse) Proto_ShallowClone() (c *ListUserResponse) {
	if x != nil {
		c = new(ListUserResponse)
		c.Users = x.Users
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetUserRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetUserRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetUserRequest) Proto_ShallowClone() (c *GetUserRequest) {
	if x != nil {
		c = new(GetUserRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetUserResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetUserResponse:
		x.User = v.GetUser()
	default:
		if v, ok := v.(interface{ GetUser() *User }); ok {
			x.User = v.GetUser()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetUserResponse) Proto_ShallowClone() (c *GetUserResponse) {
	if x != nil {
		c = new(GetUserResponse)
		c.User = x.User
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateUserRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateUserRequest:
		x.User = v.GetUser()
	default:
		if v, ok := v.(interface{ GetUser() *User }); ok {
			x.User = v.GetUser()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateUserRequest) Proto_ShallowClone() (c *CreateUserRequest) {
	if x != nil {
		c = new(CreateUserRequest)
		c.User = x.User
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateUserResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateUserResponse:
		x.User = v.GetUser()
	default:
		if v, ok := v.(interface{ GetUser() *User }); ok {
			x.User = v.GetUser()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateUserResponse) Proto_ShallowClone() (c *CreateUserResponse) {
	if x != nil {
		c = new(CreateUserResponse)
		c.User = x.User
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateUserRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateUserRequest:
		x.User = v.GetUser()
	default:
		if v, ok := v.(interface{ GetUser() *User }); ok {
			x.User = v.GetUser()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateUserRequest) Proto_ShallowClone() (c *UpdateUserRequest) {
	if x != nil {
		c = new(UpdateUserRequest)
		c.User = x.User
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateUserResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateUserResponse:
		x.User = v.GetUser()
	default:
		if v, ok := v.(interface{ GetUser() *User }); ok {
			x.User = v.GetUser()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateUserResponse) Proto_ShallowClone() (c *UpdateUserResponse) {
	if x != nil {
		c = new(UpdateUserResponse)
		c.User = x.User
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteUserRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteUserRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteUserRequest) Proto_ShallowClone() (c *DeleteUserRequest) {
	if x != nil {
		c = new(DeleteUserRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteUserResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteUserResponse) Proto_ShallowClone() (c *DeleteUserResponse) {
	if x != nil {
		c = new(DeleteUserResponse)
	}
	return
}
