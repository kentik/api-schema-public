// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cloud_maps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudMapsServiceClient is the client API for CloudMapsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudMapsServiceClient interface {
	ProvideAwsMetadataStorageLocation(ctx context.Context, in *ProvideAwsMetadataStorageLocationRequest, opts ...grpc.CallOption) (*ProvideAwsMetadataStorageLocationResponse, error)
	GetAwsCrawlerConfiguration(ctx context.Context, in *GetAwsCrawlerConfigurationRequest, opts ...grpc.CallOption) (*GetAwsCrawlerConfigurationResponse, error)
}

type cloudMapsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudMapsServiceClient(cc grpc.ClientConnInterface) CloudMapsServiceClient {
	return &cloudMapsServiceClient{cc}
}

func (c *cloudMapsServiceClient) ProvideAwsMetadataStorageLocation(ctx context.Context, in *ProvideAwsMetadataStorageLocationRequest, opts ...grpc.CallOption) (*ProvideAwsMetadataStorageLocationResponse, error) {
	out := new(ProvideAwsMetadataStorageLocationResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_maps.v202201alpha1.CloudMapsService/ProvideAwsMetadataStorageLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudMapsServiceClient) GetAwsCrawlerConfiguration(ctx context.Context, in *GetAwsCrawlerConfigurationRequest, opts ...grpc.CallOption) (*GetAwsCrawlerConfigurationResponse, error) {
	out := new(GetAwsCrawlerConfigurationResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_maps.v202201alpha1.CloudMapsService/GetAwsCrawlerConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudMapsServiceServer is the server API for CloudMapsService service.
// All implementations should embed UnimplementedCloudMapsServiceServer
// for forward compatibility
type CloudMapsServiceServer interface {
	ProvideAwsMetadataStorageLocation(context.Context, *ProvideAwsMetadataStorageLocationRequest) (*ProvideAwsMetadataStorageLocationResponse, error)
	GetAwsCrawlerConfiguration(context.Context, *GetAwsCrawlerConfigurationRequest) (*GetAwsCrawlerConfigurationResponse, error)
}

// UnimplementedCloudMapsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCloudMapsServiceServer struct {
}

func (UnimplementedCloudMapsServiceServer) ProvideAwsMetadataStorageLocation(context.Context, *ProvideAwsMetadataStorageLocationRequest) (*ProvideAwsMetadataStorageLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideAwsMetadataStorageLocation not implemented")
}
func (UnimplementedCloudMapsServiceServer) GetAwsCrawlerConfiguration(context.Context, *GetAwsCrawlerConfigurationRequest) (*GetAwsCrawlerConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsCrawlerConfiguration not implemented")
}

// UnsafeCloudMapsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudMapsServiceServer will
// result in compilation errors.
type UnsafeCloudMapsServiceServer interface {
	mustEmbedUnimplementedCloudMapsServiceServer()
}

func RegisterCloudMapsServiceServer(s grpc.ServiceRegistrar, srv CloudMapsServiceServer) {
	s.RegisterService(&CloudMapsService_ServiceDesc, srv)
}

func _CloudMapsService_ProvideAwsMetadataStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideAwsMetadataStorageLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMapsServiceServer).ProvideAwsMetadataStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_maps.v202201alpha1.CloudMapsService/ProvideAwsMetadataStorageLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMapsServiceServer).ProvideAwsMetadataStorageLocation(ctx, req.(*ProvideAwsMetadataStorageLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudMapsService_GetAwsCrawlerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsCrawlerConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMapsServiceServer).GetAwsCrawlerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_maps.v202201alpha1.CloudMapsService/GetAwsCrawlerConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMapsServiceServer).GetAwsCrawlerConfiguration(ctx, req.(*GetAwsCrawlerConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudMapsService_ServiceDesc is the grpc.ServiceDesc for CloudMapsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudMapsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cloud_maps.v202201alpha1.CloudMapsService",
	HandlerType: (*CloudMapsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvideAwsMetadataStorageLocation",
			Handler:    _CloudMapsService_ProvideAwsMetadataStorageLocation_Handler,
		},
		{
			MethodName: "GetAwsCrawlerConfiguration",
			Handler:    _CloudMapsService_GetAwsCrawlerConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cloud_maps/v202201alpha1/cloud_maps.proto",
}
