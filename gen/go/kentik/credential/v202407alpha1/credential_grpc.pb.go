// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/credential/v202407alpha1/credential.proto

package credential

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CredentialService_GetCredentialGroup_FullMethodName  = "/kentik.credential.v202407alpha1.CredentialService/GetCredentialGroup"
	CredentialService_ListCredentialGroup_FullMethodName = "/kentik.credential.v202407alpha1.CredentialService/ListCredentialGroup"
)

// CredentialServiceClient is the client API for CredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialServiceClient interface {
	GetCredentialGroup(ctx context.Context, in *GetCredentialGroupRequest, opts ...grpc.CallOption) (*GetCredentialGroupResponse, error)
	ListCredentialGroup(ctx context.Context, in *ListCredentialGroupRequest, opts ...grpc.CallOption) (*ListCredentialGroupResponse, error)
}

type credentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialServiceClient(cc grpc.ClientConnInterface) CredentialServiceClient {
	return &credentialServiceClient{cc}
}

func (c *credentialServiceClient) GetCredentialGroup(ctx context.Context, in *GetCredentialGroupRequest, opts ...grpc.CallOption) (*GetCredentialGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialGroupResponse)
	err := c.cc.Invoke(ctx, CredentialService_GetCredentialGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) ListCredentialGroup(ctx context.Context, in *ListCredentialGroupRequest, opts ...grpc.CallOption) (*ListCredentialGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCredentialGroupResponse)
	err := c.cc.Invoke(ctx, CredentialService_ListCredentialGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialServiceServer is the server API for CredentialService service.
// All implementations should embed UnimplementedCredentialServiceServer
// for forward compatibility.
type CredentialServiceServer interface {
	GetCredentialGroup(context.Context, *GetCredentialGroupRequest) (*GetCredentialGroupResponse, error)
	ListCredentialGroup(context.Context, *ListCredentialGroupRequest) (*ListCredentialGroupResponse, error)
}

// UnimplementedCredentialServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCredentialServiceServer struct{}

func (UnimplementedCredentialServiceServer) GetCredentialGroup(context.Context, *GetCredentialGroupRequest) (*GetCredentialGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialGroup not implemented")
}
func (UnimplementedCredentialServiceServer) ListCredentialGroup(context.Context, *ListCredentialGroupRequest) (*ListCredentialGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialGroup not implemented")
}
func (UnimplementedCredentialServiceServer) testEmbeddedByValue() {}

// UnsafeCredentialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialServiceServer will
// result in compilation errors.
type UnsafeCredentialServiceServer interface {
	mustEmbedUnimplementedCredentialServiceServer()
}

func RegisterCredentialServiceServer(s grpc.ServiceRegistrar, srv CredentialServiceServer) {
	// If the following call pancis, it indicates UnimplementedCredentialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CredentialService_ServiceDesc, srv)
}

func _CredentialService_GetCredentialGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).GetCredentialGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_GetCredentialGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).GetCredentialGroup(ctx, req.(*GetCredentialGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_ListCredentialGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).ListCredentialGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_ListCredentialGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).ListCredentialGroup(ctx, req.(*ListCredentialGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialService_ServiceDesc is the grpc.ServiceDesc for CredentialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.credential.v202407alpha1.CredentialService",
	HandlerType: (*CredentialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredentialGroup",
			Handler:    _CredentialService_GetCredentialGroup_Handler,
		},
		{
			MethodName: "ListCredentialGroup",
			Handler:    _CredentialService_ListCredentialGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/credential/v202407alpha1/credential.proto",
}
