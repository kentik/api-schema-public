// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/vault/v202312alpha1/vault.proto

package vault

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type SecretType int32

const (
	SecretType_SECRET_TYPE_UNSPECIFIED         SecretType = 0
	SecretType_SECRET_TYPE_BASIC_AUTH          SecretType = 1
	SecretType_SECRET_TYPE_SNMP_V1             SecretType = 2
	SecretType_SECRET_TYPE_SNMP_V2C            SecretType = 3
	SecretType_SECRET_TYPE_SNMP_V3             SecretType = 4
	SecretType_SECRET_TYPE_STREAMING_TELEMETRY SecretType = 5
	SecretType_SECRET_TYPE_BGP_MD5             SecretType = 6
	SecretType_SECRET_TYPE_API_TOKEN           SecretType = 7
	SecretType_SECRET_TYPE_OTHER               SecretType = 8
)

// Enum value maps for SecretType.
var (
	SecretType_name = map[int32]string{
		0: "SECRET_TYPE_UNSPECIFIED",
		1: "SECRET_TYPE_BASIC_AUTH",
		2: "SECRET_TYPE_SNMP_V1",
		3: "SECRET_TYPE_SNMP_V2C",
		4: "SECRET_TYPE_SNMP_V3",
		5: "SECRET_TYPE_STREAMING_TELEMETRY",
		6: "SECRET_TYPE_BGP_MD5",
		7: "SECRET_TYPE_API_TOKEN",
		8: "SECRET_TYPE_OTHER",
	}
	SecretType_value = map[string]int32{
		"SECRET_TYPE_UNSPECIFIED":         0,
		"SECRET_TYPE_BASIC_AUTH":          1,
		"SECRET_TYPE_SNMP_V1":             2,
		"SECRET_TYPE_SNMP_V2C":            3,
		"SECRET_TYPE_SNMP_V3":             4,
		"SECRET_TYPE_STREAMING_TELEMETRY": 5,
		"SECRET_TYPE_BGP_MD5":             6,
		"SECRET_TYPE_API_TOKEN":           7,
		"SECRET_TYPE_OTHER":               8,
	}
)

func (x SecretType) Enum() *SecretType {
	p := new(SecretType)
	*p = x
	return p
}

func (x SecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_vault_v202312alpha1_vault_proto_enumTypes[0].Descriptor()
}

func (SecretType) Type() protoreflect.EnumType {
	return &file_kentik_vault_v202312alpha1_vault_proto_enumTypes[0]
}

func (x SecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretType.Descriptor instead.
func (SecretType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value       string     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version     uint32     `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Description string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        SecretType `protobuf:"varint,5,opt,name=type,proto3,enum=kentik.vault.v202312alpha1.SecretType" json:"type,omitempty"`
	Id          string     `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP(), []int{0}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Secret) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Secret) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Secret) GetType() SecretType {
	if x != nil {
		return x.Type
	}
	return SecretType_SECRET_TYPE_UNSPECIFIED
}

func (x *Secret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSecretRequest) Reset() {
	*x = GetSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecretRequest) ProtoMessage() {}

func (x *GetSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecretRequest.ProtoReflect.Descriptor instead.
func (*GetSecretRequest) Descriptor() ([]byte, []int) {
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP(), []int{1}
}

func (x *GetSecretRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// {{.Name}}
type GetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret *Secret `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *GetSecretResponse) Reset() {
	*x = GetSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecretResponse) ProtoMessage() {}

func (x *GetSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecretResponse.ProtoReflect.Descriptor instead.
func (*GetSecretResponse) Descriptor() ([]byte, []int) {
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP(), []int{2}
}

func (x *GetSecretResponse) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

// {{.Name}}
type ListSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ListSecretRequest) Reset() {
	*x = ListSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretRequest) ProtoMessage() {}

func (x *ListSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretRequest.ProtoReflect.Descriptor instead.
func (*ListSecretRequest) Descriptor() ([]byte, []int) {
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP(), []int{3}
}

func (x *ListSecretRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type ListSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secrets                []*Secret `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
	InvalidCredentialCount uint32    `protobuf:"varint,2,opt,name=invalid_credential_count,json=invalidCredentialCount,proto3" json:"invalid_credential_count,omitempty"`
}

func (x *ListSecretResponse) Reset() {
	*x = ListSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretResponse) ProtoMessage() {}

func (x *ListSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_vault_v202312alpha1_vault_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretResponse.ProtoReflect.Descriptor instead.
func (*ListSecretResponse) Descriptor() ([]byte, []int) {
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP(), []int{4}
}

func (x *ListSecretResponse) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *ListSecretResponse) GetInvalidCredentialCount() uint32 {
	if x != nil {
		return x.InvalidCredentialCount
	}
	return 0
}

var File_kentik_vault_v202312alpha1_vault_proto protoreflect.FileDescriptor

var file_kentik_vault_v202312alpha1_vault_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x31, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x27, 0x73,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92,
	0x41, 0x1b, 0x32, 0x19, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x27, 0x73,
	0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x32, 0x14, 0x54,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x27, 0x73, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x27, 0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x19, 0x32, 0x17, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x27,
	0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xe0, 0x41, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x27, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x0e, 0x92, 0x41, 0x08, 0x32, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x44, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x13,
	0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x27, 0x73, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xfa, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x17, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x18,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x52,
	0x92, 0x41, 0x4f, 0x32, 0x4d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x28, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x29, 0x2e, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x81, 0x02, 0x0a, 0x0a, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x43,
	0x52, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x56, 0x31, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x5f,
	0x56, 0x32, 0x43, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x56, 0x33, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52,
	0x59, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x32, 0xa2,
	0x04, 0x0a, 0x0c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xf9, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2c, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x52,
	0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x62,
	0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x1a, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x20, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x2a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0xf2, 0xd7, 0x02, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xf5, 0x01, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x31,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x31, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x92, 0x41, 0x52, 0x12,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x1a, 0x35,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x2a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0xf2, 0xd7, 0x02, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x1a, 0x1e, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xf8, 0xd7, 0x02, 0x01, 0x90,
	0xd8, 0x02, 0x00, 0x42, 0xf8, 0x03, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x92, 0x41, 0xa7, 0x03, 0x12, 0xc0, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x41, 0x50, 0x49, 0x12, 0x5d, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x0a, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x0d, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02,
	0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02,
	0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72,
	0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x30, 0x2f, 0x41, 0x62, 0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x39,
	0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_vault_v202312alpha1_vault_proto_rawDescOnce sync.Once
	file_kentik_vault_v202312alpha1_vault_proto_rawDescData = file_kentik_vault_v202312alpha1_vault_proto_rawDesc
)

func file_kentik_vault_v202312alpha1_vault_proto_rawDescGZIP() []byte {
	file_kentik_vault_v202312alpha1_vault_proto_rawDescOnce.Do(func() {
		file_kentik_vault_v202312alpha1_vault_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_vault_v202312alpha1_vault_proto_rawDescData)
	})
	return file_kentik_vault_v202312alpha1_vault_proto_rawDescData
}

var file_kentik_vault_v202312alpha1_vault_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_vault_v202312alpha1_vault_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kentik_vault_v202312alpha1_vault_proto_goTypes = []interface{}{
	(SecretType)(0),            // 0: kentik.vault.v202312alpha1.SecretType
	(*Secret)(nil),             // 1: kentik.vault.v202312alpha1.Secret
	(*GetSecretRequest)(nil),   // 2: kentik.vault.v202312alpha1.GetSecretRequest
	(*GetSecretResponse)(nil),  // 3: kentik.vault.v202312alpha1.GetSecretResponse
	(*ListSecretRequest)(nil),  // 4: kentik.vault.v202312alpha1.ListSecretRequest
	(*ListSecretResponse)(nil), // 5: kentik.vault.v202312alpha1.ListSecretResponse
}
var file_kentik_vault_v202312alpha1_vault_proto_depIdxs = []int32{
	0, // 0: kentik.vault.v202312alpha1.Secret.type:type_name -> kentik.vault.v202312alpha1.SecretType
	1, // 1: kentik.vault.v202312alpha1.GetSecretResponse.secret:type_name -> kentik.vault.v202312alpha1.Secret
	1, // 2: kentik.vault.v202312alpha1.ListSecretResponse.secrets:type_name -> kentik.vault.v202312alpha1.Secret
	2, // 3: kentik.vault.v202312alpha1.VaultService.GetSecret:input_type -> kentik.vault.v202312alpha1.GetSecretRequest
	4, // 4: kentik.vault.v202312alpha1.VaultService.ListSecret:input_type -> kentik.vault.v202312alpha1.ListSecretRequest
	3, // 5: kentik.vault.v202312alpha1.VaultService.GetSecret:output_type -> kentik.vault.v202312alpha1.GetSecretResponse
	5, // 6: kentik.vault.v202312alpha1.VaultService.ListSecret:output_type -> kentik.vault.v202312alpha1.ListSecretResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_kentik_vault_v202312alpha1_vault_proto_init() }
func file_kentik_vault_v202312alpha1_vault_proto_init() {
	if File_kentik_vault_v202312alpha1_vault_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_vault_v202312alpha1_vault_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_vault_v202312alpha1_vault_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_vault_v202312alpha1_vault_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_vault_v202312alpha1_vault_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_vault_v202312alpha1_vault_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_vault_v202312alpha1_vault_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_vault_v202312alpha1_vault_proto_goTypes,
		DependencyIndexes: file_kentik_vault_v202312alpha1_vault_proto_depIdxs,
		EnumInfos:         file_kentik_vault_v202312alpha1_vault_proto_enumTypes,
		MessageInfos:      file_kentik_vault_v202312alpha1_vault_proto_msgTypes,
	}.Build()
	File_kentik_vault_v202312alpha1_vault_proto = out.File
	file_kentik_vault_v202312alpha1_vault_proto_rawDesc = nil
	file_kentik_vault_v202312alpha1_vault_proto_goTypes = nil
	file_kentik_vault_v202312alpha1_vault_proto_depIdxs = nil
}
