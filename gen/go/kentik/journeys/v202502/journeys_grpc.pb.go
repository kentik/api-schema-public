// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package journeys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JourneysDataServiceClient is the client API for JourneysDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JourneysDataServiceClient interface {
	Journeys(ctx context.Context, in *JourneysRequest, opts ...grpc.CallOption) (*JourneysResponse, error)
}

type journeysDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJourneysDataServiceClient(cc grpc.ClientConnInterface) JourneysDataServiceClient {
	return &journeysDataServiceClient{cc}
}

func (c *journeysDataServiceClient) Journeys(ctx context.Context, in *JourneysRequest, opts ...grpc.CallOption) (*JourneysResponse, error) {
	out := new(JourneysResponse)
	err := c.cc.Invoke(ctx, "/kentik.journeys.v202502.JourneysDataService/Journeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JourneysDataServiceServer is the server API for JourneysDataService service.
// All implementations should embed UnimplementedJourneysDataServiceServer
// for forward compatibility
type JourneysDataServiceServer interface {
	Journeys(context.Context, *JourneysRequest) (*JourneysResponse, error)
}

// UnimplementedJourneysDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJourneysDataServiceServer struct {
}

func (UnimplementedJourneysDataServiceServer) Journeys(context.Context, *JourneysRequest) (*JourneysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Journeys not implemented")
}

// UnsafeJourneysDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JourneysDataServiceServer will
// result in compilation errors.
type UnsafeJourneysDataServiceServer interface {
	mustEmbedUnimplementedJourneysDataServiceServer()
}

func RegisterJourneysDataServiceServer(s grpc.ServiceRegistrar, srv JourneysDataServiceServer) {
	s.RegisterService(&JourneysDataService_ServiceDesc, srv)
}

func _JourneysDataService_Journeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JourneysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneysDataServiceServer).Journeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.journeys.v202502.JourneysDataService/Journeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneysDataServiceServer).Journeys(ctx, req.(*JourneysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JourneysDataService_ServiceDesc is the grpc.ServiceDesc for JourneysDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JourneysDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.journeys.v202502.JourneysDataService",
	HandlerType: (*JourneysDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Journeys",
			Handler:    _JourneysDataService_Journeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/journeys/v202502/journeys.proto",
}
