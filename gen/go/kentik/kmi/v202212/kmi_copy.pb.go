// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/kmi/v202212/kmi.proto

package kmi

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *Market) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Market:
		x.MarketId = v.GetMarketId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetMarketId() string }); ok {
			x.MarketId = v.GetMarketId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Market) Proto_ShallowClone() (c *Market) {
	if x != nil {
		c = new(Market)
		c.MarketId = x.MarketId
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *Ranking) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Ranking:
		x.Name = v.GetName()
		if v != nil {
			x.Asn = v.Asn
			x.Rank = v.Rank
			x.RankChange = v.RankChange
			x.Score = v.Score
			x.ScoreChange = v.ScoreChange
		} else {
			x.Asn = nil
			x.Rank = nil
			x.RankChange = nil
			x.Score = nil
			x.ScoreChange = nil
		}
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Ranking) Proto_ShallowClone() (c *Ranking) {
	if x != nil {
		c = new(Ranking)
		c.Asn = x.Asn
		c.Name = x.Name
		c.Rank = x.Rank
		c.RankChange = x.RankChange
		c.Score = x.Score
		c.ScoreChange = x.ScoreChange
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *CustomerProvider) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CustomerProvider:
		x.Name = v.GetName()
		if v != nil {
			x.Asn = v.Asn
			x.Score = v.Score
			x.SinglehomedCustomer = v.SinglehomedCustomer
			x.MutualCustomer = v.MutualCustomer
			x.MutualProvider = v.MutualProvider
		} else {
			x.Asn = nil
			x.Score = nil
			x.SinglehomedCustomer = nil
			x.MutualCustomer = nil
			x.MutualProvider = nil
		}
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CustomerProvider) Proto_ShallowClone() (c *CustomerProvider) {
	if x != nil {
		c = new(CustomerProvider)
		c.Asn = x.Asn
		c.Name = x.Name
		c.Score = x.Score
		c.SinglehomedCustomer = x.SinglehomedCustomer
		c.MutualCustomer = x.MutualCustomer
		c.MutualProvider = x.MutualProvider
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *Peer) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Peer:
		x.Name = v.GetName()
		if v != nil {
			x.Asn = v.Asn
			x.PfxCount = v.PfxCount
		} else {
			x.Asn = nil
			x.PfxCount = nil
		}
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Peer) Proto_ShallowClone() (c *Peer) {
	if x != nil {
		c = new(Peer)
		c.Asn = x.Asn
		c.Name = x.Name
		c.PfxCount = x.PfxCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ASNDetails) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ASNDetails:
		x.Name = v.GetName()
		x.CountryName = v.GetCountryName()
		x.Customers = v.GetCustomers()
		x.Providers = v.GetProviders()
		x.Peers = v.GetPeers()
		if v != nil {
			x.Asn = v.Asn
		} else {
			x.Asn = nil
		}
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetCountryName() string }); ok {
			x.CountryName = v.GetCountryName()
		}
		if v, ok := v.(interface{ GetCustomers() []*CustomerProvider }); ok {
			x.Customers = v.GetCustomers()
		}
		if v, ok := v.(interface{ GetProviders() []*CustomerProvider }); ok {
			x.Providers = v.GetProviders()
		}
		if v, ok := v.(interface{ GetPeers() []*Peer }); ok {
			x.Peers = v.GetPeers()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ASNDetails) Proto_ShallowClone() (c *ASNDetails) {
	if x != nil {
		c = new(ASNDetails)
		c.Asn = x.Asn
		c.Name = x.Name
		c.CountryName = x.CountryName
		c.Customers = x.Customers
		c.Providers = x.Providers
		c.Peers = x.Peers
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ListMarketsRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListMarketsRequest) Proto_ShallowClone() (c *ListMarketsRequest) {
	if x != nil {
		c = new(ListMarketsRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ListMarketsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListMarketsResponse:
		x.Markets = v.GetMarkets()
	default:
		if v, ok := v.(interface{ GetMarkets() []*Market }); ok {
			x.Markets = v.GetMarkets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListMarketsResponse) Proto_ShallowClone() (c *ListMarketsResponse) {
	if x != nil {
		c = new(ListMarketsResponse)
		c.Markets = x.Markets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *GetRankingsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetRankingsRequest:
		x.MarketId = v.GetMarketId()
		x.RankType = v.GetRankType()
		x.Ip = v.GetIp()
		if v != nil {
			x.Limit = v.Limit
		} else {
			x.Limit = nil
		}
	default:
		if v, ok := v.(interface{ GetMarketId() string }); ok {
			x.MarketId = v.GetMarketId()
		}
		if v, ok := v.(interface{ GetRankType() string }); ok {
			x.RankType = v.GetRankType()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetRankingsRequest) Proto_ShallowClone() (c *GetRankingsRequest) {
	if x != nil {
		c = new(GetRankingsRequest)
		c.MarketId = x.MarketId
		c.RankType = x.RankType
		c.Ip = x.Ip
		c.Limit = x.Limit
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *GetRankingsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetRankingsResponse:
		x.Rankings = v.GetRankings()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetRankings() []*Ranking }); ok {
			x.Rankings = v.GetRankings()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetRankingsResponse) Proto_ShallowClone() (c *GetRankingsResponse) {
	if x != nil {
		c = new(GetRankingsResponse)
		c.Rankings = x.Rankings
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *GetASNDetailsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetASNDetailsRequest:
		x.MarketId = v.GetMarketId()
		x.Asn = v.GetAsn()
		x.Ip = v.GetIp()
		x.Type = v.GetType()
		x.MutualProvider = v.GetMutualProvider()
		x.MutualCustomer = v.GetMutualCustomer()
		x.SinglehomedCustomer = v.GetSinglehomedCustomer()
	default:
		if v, ok := v.(interface{ GetMarketId() string }); ok {
			x.MarketId = v.GetMarketId()
		}
		if v, ok := v.(interface{ GetAsn() string }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetIp() string }); ok {
			x.Ip = v.GetIp()
		}
		if v, ok := v.(interface{ GetType() string }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetMutualProvider() string }); ok {
			x.MutualProvider = v.GetMutualProvider()
		}
		if v, ok := v.(interface{ GetMutualCustomer() string }); ok {
			x.MutualCustomer = v.GetMutualCustomer()
		}
		if v, ok := v.(interface{ GetSinglehomedCustomer() string }); ok {
			x.SinglehomedCustomer = v.GetSinglehomedCustomer()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetASNDetailsRequest) Proto_ShallowClone() (c *GetASNDetailsRequest) {
	if x != nil {
		c = new(GetASNDetailsRequest)
		c.MarketId = x.MarketId
		c.Asn = x.Asn
		c.Ip = x.Ip
		c.Type = x.Type
		c.MutualProvider = x.MutualProvider
		c.MutualCustomer = x.MutualCustomer
		c.SinglehomedCustomer = x.SinglehomedCustomer
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *GetASNDetailsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetASNDetailsResponse:
		x.AsnDetails = v.GetAsnDetails()
	default:
		if v, ok := v.(interface{ GetAsnDetails() *ASNDetails }); ok {
			x.AsnDetails = v.GetAsnDetails()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetASNDetailsResponse) Proto_ShallowClone() (c *GetASNDetailsResponse) {
	if x != nil {
		c = new(GetASNDetailsResponse)
		c.AsnDetails = x.AsnDetails
	}
	return
}
