// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/kmi/v202212/kmi.proto

package kmi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KmiService_ListMarkets_FullMethodName       = "/kentik.kmi.v202212.KmiService/ListMarkets"
	KmiService_GetRankings_FullMethodName       = "/kentik.kmi.v202212.KmiService/GetRankings"
	KmiService_GetASNDetails_FullMethodName     = "/kentik.kmi.v202212.KmiService/GetASNDetails"
	KmiService_GetGlobalInsights_FullMethodName = "/kentik.kmi.v202212.KmiService/GetGlobalInsights"
	KmiService_GetASNInsights_FullMethodName    = "/kentik.kmi.v202212.KmiService/GetASNInsights"
)

// KmiServiceClient is the client API for KmiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KmiServiceClient interface {
	ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error)
	GetRankings(ctx context.Context, in *GetRankingsRequest, opts ...grpc.CallOption) (*GetRankingsResponse, error)
	GetASNDetails(ctx context.Context, in *GetASNDetailsRequest, opts ...grpc.CallOption) (*GetASNDetailsResponse, error)
	GetGlobalInsights(ctx context.Context, in *GetGlobalInsightsRequest, opts ...grpc.CallOption) (*GetGlobalInsightsResponse, error)
	GetASNInsights(ctx context.Context, in *GetASNInsightsRequest, opts ...grpc.CallOption) (*GetASNInsightsResponse, error)
}

type kmiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKmiServiceClient(cc grpc.ClientConnInterface) KmiServiceClient {
	return &kmiServiceClient{cc}
}

func (c *kmiServiceClient) ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMarketsResponse)
	err := c.cc.Invoke(ctx, KmiService_ListMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmiServiceClient) GetRankings(ctx context.Context, in *GetRankingsRequest, opts ...grpc.CallOption) (*GetRankingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankingsResponse)
	err := c.cc.Invoke(ctx, KmiService_GetRankings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmiServiceClient) GetASNDetails(ctx context.Context, in *GetASNDetailsRequest, opts ...grpc.CallOption) (*GetASNDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetASNDetailsResponse)
	err := c.cc.Invoke(ctx, KmiService_GetASNDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmiServiceClient) GetGlobalInsights(ctx context.Context, in *GetGlobalInsightsRequest, opts ...grpc.CallOption) (*GetGlobalInsightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGlobalInsightsResponse)
	err := c.cc.Invoke(ctx, KmiService_GetGlobalInsights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmiServiceClient) GetASNInsights(ctx context.Context, in *GetASNInsightsRequest, opts ...grpc.CallOption) (*GetASNInsightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetASNInsightsResponse)
	err := c.cc.Invoke(ctx, KmiService_GetASNInsights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KmiServiceServer is the server API for KmiService service.
// All implementations should embed UnimplementedKmiServiceServer
// for forward compatibility.
type KmiServiceServer interface {
	ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error)
	GetRankings(context.Context, *GetRankingsRequest) (*GetRankingsResponse, error)
	GetASNDetails(context.Context, *GetASNDetailsRequest) (*GetASNDetailsResponse, error)
	GetGlobalInsights(context.Context, *GetGlobalInsightsRequest) (*GetGlobalInsightsResponse, error)
	GetASNInsights(context.Context, *GetASNInsightsRequest) (*GetASNInsightsResponse, error)
}

// UnimplementedKmiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKmiServiceServer struct{}

func (UnimplementedKmiServiceServer) ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarkets not implemented")
}
func (UnimplementedKmiServiceServer) GetRankings(context.Context, *GetRankingsRequest) (*GetRankingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankings not implemented")
}
func (UnimplementedKmiServiceServer) GetASNDetails(context.Context, *GetASNDetailsRequest) (*GetASNDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetASNDetails not implemented")
}
func (UnimplementedKmiServiceServer) GetGlobalInsights(context.Context, *GetGlobalInsightsRequest) (*GetGlobalInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalInsights not implemented")
}
func (UnimplementedKmiServiceServer) GetASNInsights(context.Context, *GetASNInsightsRequest) (*GetASNInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetASNInsights not implemented")
}
func (UnimplementedKmiServiceServer) testEmbeddedByValue() {}

// UnsafeKmiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KmiServiceServer will
// result in compilation errors.
type UnsafeKmiServiceServer interface {
	mustEmbedUnimplementedKmiServiceServer()
}

func RegisterKmiServiceServer(s grpc.ServiceRegistrar, srv KmiServiceServer) {
	// If the following call pancis, it indicates UnimplementedKmiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KmiService_ServiceDesc, srv)
}

func _KmiService_ListMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmiServiceServer).ListMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmiService_ListMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmiServiceServer).ListMarkets(ctx, req.(*ListMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmiService_GetRankings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmiServiceServer).GetRankings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmiService_GetRankings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmiServiceServer).GetRankings(ctx, req.(*GetRankingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmiService_GetASNDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetASNDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmiServiceServer).GetASNDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmiService_GetASNDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmiServiceServer).GetASNDetails(ctx, req.(*GetASNDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmiService_GetGlobalInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmiServiceServer).GetGlobalInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmiService_GetGlobalInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmiServiceServer).GetGlobalInsights(ctx, req.(*GetGlobalInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmiService_GetASNInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetASNInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmiServiceServer).GetASNInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmiService_GetASNInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmiServiceServer).GetASNInsights(ctx, req.(*GetASNInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KmiService_ServiceDesc is the grpc.ServiceDesc for KmiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KmiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.kmi.v202212.KmiService",
	HandlerType: (*KmiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMarkets",
			Handler:    _KmiService_ListMarkets_Handler,
		},
		{
			MethodName: "GetRankings",
			Handler:    _KmiService_GetRankings_Handler,
		},
		{
			MethodName: "GetASNDetails",
			Handler:    _KmiService_GetASNDetails_Handler,
		},
		{
			MethodName: "GetGlobalInsights",
			Handler:    _KmiService_GetGlobalInsights_Handler,
		},
		{
			MethodName: "GetASNInsights",
			Handler:    _KmiService_GetASNInsights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/kmi/v202212/kmi.proto",
}
