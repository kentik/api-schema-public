// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/kmi/v202212/kmi.proto

package kmi

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GeoScope   string   `protobuf:"bytes,3,opt,name=geo_scope,json=geoScope,proto3" json:"geo_scope,omitempty"`
	GeoName    string   `protobuf:"bytes,4,opt,name=geo_name,json=geoName,proto3" json:"geo_name,omitempty"`
	ChildList  []string `protobuf:"bytes,5,rep,name=child_list,json=childList,proto3" json:"child_list,omitempty"`
	ParentList []string `protobuf:"bytes,6,rep,name=parent_list,json=parentList,proto3" json:"parent_list,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{0}
}

func (x *Market) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Market) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Market) GetGeoScope() string {
	if x != nil {
		return x.GeoScope
	}
	return ""
}

func (x *Market) GetGeoName() string {
	if x != nil {
		return x.GeoName
	}
	return ""
}

func (x *Market) GetChildList() []string {
	if x != nil {
		return x.ChildList
	}
	return nil
}

func (x *Market) GetParentList() []string {
	if x != nil {
		return x.ParentList
	}
	return nil
}

// {{.Name}}
type Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn         *uint32 `protobuf:"varint,1,opt,name=asn,proto3,oneof" json:"asn,omitempty"`
	GeoScope    string  `protobuf:"bytes,2,opt,name=geo_scope,json=geoScope,proto3" json:"geo_scope,omitempty"`
	GeoName     string  `protobuf:"bytes,3,opt,name=geo_name,json=geoName,proto3" json:"geo_name,omitempty"`
	Name        string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Rank        *uint32 `protobuf:"varint,5,opt,name=rank,proto3,oneof" json:"rank,omitempty"`
	RankChange  *uint32 `protobuf:"varint,6,opt,name=rank_change,json=rankChange,proto3,oneof" json:"rank_change,omitempty"`
	Score       *uint32 `protobuf:"varint,7,opt,name=score,proto3,oneof" json:"score,omitempty"`
	ScoreChange *uint32 `protobuf:"varint,8,opt,name=score_change,json=scoreChange,proto3,oneof" json:"score_change,omitempty"`
}

func (x *Ranking) Reset() {
	*x = Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranking) ProtoMessage() {}

func (x *Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranking.ProtoReflect.Descriptor instead.
func (*Ranking) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{1}
}

func (x *Ranking) GetAsn() uint32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *Ranking) GetGeoScope() string {
	if x != nil {
		return x.GeoScope
	}
	return ""
}

func (x *Ranking) GetGeoName() string {
	if x != nil {
		return x.GeoName
	}
	return ""
}

func (x *Ranking) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ranking) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *Ranking) GetRankChange() uint32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *Ranking) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *Ranking) GetScoreChange() uint32 {
	if x != nil && x.ScoreChange != nil {
		return *x.ScoreChange
	}
	return 0
}

// {{.Name}}
type CustomerProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn                 *uint32 `protobuf:"varint,1,opt,name=asn,proto3,oneof" json:"asn,omitempty"`
	EdgeType            *uint32 `protobuf:"varint,2,opt,name=edge_type,json=edgeType,proto3,oneof" json:"edge_type,omitempty"`
	GeoName             string  `protobuf:"bytes,3,opt,name=geo_name,json=geoName,proto3" json:"geo_name,omitempty"`
	GeoScope            string  `protobuf:"bytes,4,opt,name=geo_scope,json=geoScope,proto3" json:"geo_scope,omitempty"`
	Name                string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Score               *uint32 `protobuf:"varint,6,opt,name=score,proto3,oneof" json:"score,omitempty"`
	SinglehomedCustomer *bool   `protobuf:"varint,7,opt,name=singlehomed_customer,json=singlehomedCustomer,proto3,oneof" json:"singlehomed_customer,omitempty"`
	MutualCustomer      *bool   `protobuf:"varint,8,opt,name=mutual_customer,json=mutualCustomer,proto3,oneof" json:"mutual_customer,omitempty"`
	MutualProvider      *bool   `protobuf:"varint,9,opt,name=mutual_provider,json=mutualProvider,proto3,oneof" json:"mutual_provider,omitempty"`
}

func (x *CustomerProvider) Reset() {
	*x = CustomerProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerProvider) ProtoMessage() {}

func (x *CustomerProvider) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerProvider.ProtoReflect.Descriptor instead.
func (*CustomerProvider) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerProvider) GetAsn() uint32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *CustomerProvider) GetEdgeType() uint32 {
	if x != nil && x.EdgeType != nil {
		return *x.EdgeType
	}
	return 0
}

func (x *CustomerProvider) GetGeoName() string {
	if x != nil {
		return x.GeoName
	}
	return ""
}

func (x *CustomerProvider) GetGeoScope() string {
	if x != nil {
		return x.GeoScope
	}
	return ""
}

func (x *CustomerProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomerProvider) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CustomerProvider) GetSinglehomedCustomer() bool {
	if x != nil && x.SinglehomedCustomer != nil {
		return *x.SinglehomedCustomer
	}
	return false
}

func (x *CustomerProvider) GetMutualCustomer() bool {
	if x != nil && x.MutualCustomer != nil {
		return *x.MutualCustomer
	}
	return false
}

func (x *CustomerProvider) GetMutualProvider() bool {
	if x != nil && x.MutualProvider != nil {
		return *x.MutualProvider
	}
	return false
}

// {{.Name}}
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn      *uint32 `protobuf:"varint,1,opt,name=asn,proto3,oneof" json:"asn,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PfxCount *uint32 `protobuf:"varint,3,opt,name=pfx_count,json=pfxCount,proto3,oneof" json:"pfx_count,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{3}
}

func (x *Peer) GetAsn() uint32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *Peer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Peer) GetPfxCount() uint32 {
	if x != nil && x.PfxCount != nil {
		return *x.PfxCount
	}
	return 0
}

// {{.Name}}
type ASNDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn         *uint32             `protobuf:"varint,1,opt,name=asn,proto3,oneof" json:"asn,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CountryName string              `protobuf:"bytes,3,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	Customers   []*CustomerProvider `protobuf:"bytes,4,rep,name=customers,proto3" json:"customers,omitempty"`
	Providers   []*CustomerProvider `protobuf:"bytes,5,rep,name=providers,proto3" json:"providers,omitempty"`
	Peers       []*Peer             `protobuf:"bytes,6,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *ASNDetails) Reset() {
	*x = ASNDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASNDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASNDetails) ProtoMessage() {}

func (x *ASNDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASNDetails.ProtoReflect.Descriptor instead.
func (*ASNDetails) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{4}
}

func (x *ASNDetails) GetAsn() uint32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *ASNDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ASNDetails) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *ASNDetails) GetCustomers() []*CustomerProvider {
	if x != nil {
		return x.Customers
	}
	return nil
}

func (x *ASNDetails) GetProviders() []*CustomerProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *ASNDetails) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// {{.Name}}
type ListMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMarketsRequest) Reset() {
	*x = ListMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsRequest) ProtoMessage() {}

func (x *ListMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListMarketsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{5}
}

// {{.Name}}
type ListMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markets []*Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *ListMarketsResponse) Reset() {
	*x = ListMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsResponse) ProtoMessage() {}

func (x *ListMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsResponse.ProtoReflect.Descriptor instead.
func (*ListMarketsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{6}
}

func (x *ListMarketsResponse) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

// {{.Name}}
type GetRankingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId string  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	RankType string  `protobuf:"bytes,2,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
	Ip       string  `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Limit    *uint32 `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *GetRankingsRequest) Reset() {
	*x = GetRankingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingsRequest) ProtoMessage() {}

func (x *GetRankingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingsRequest.ProtoReflect.Descriptor instead.
func (*GetRankingsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{7}
}

func (x *GetRankingsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *GetRankingsRequest) GetRankType() string {
	if x != nil {
		return x.RankType
	}
	return ""
}

func (x *GetRankingsRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetRankingsRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// {{.Name}}
type GetRankingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankings     []*Ranking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings,omitempty"`
	InvalidCount uint32     `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *GetRankingsResponse) Reset() {
	*x = GetRankingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankingsResponse) ProtoMessage() {}

func (x *GetRankingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankingsResponse.ProtoReflect.Descriptor instead.
func (*GetRankingsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{8}
}

func (x *GetRankingsResponse) GetRankings() []*Ranking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *GetRankingsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetASNDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId            string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Asn                 string `protobuf:"bytes,2,opt,name=asn,proto3" json:"asn,omitempty"`
	Ip                  string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Type                string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	MutualProvider      string `protobuf:"bytes,5,opt,name=mutual_provider,json=mutualProvider,proto3" json:"mutual_provider,omitempty"`
	MutualCustomer      string `protobuf:"bytes,6,opt,name=mutual_customer,json=mutualCustomer,proto3" json:"mutual_customer,omitempty"`
	SinglehomedCustomer string `protobuf:"bytes,7,opt,name=singlehomed_customer,json=singlehomedCustomer,proto3" json:"singlehomed_customer,omitempty"`
}

func (x *GetASNDetailsRequest) Reset() {
	*x = GetASNDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetASNDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetASNDetailsRequest) ProtoMessage() {}

func (x *GetASNDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetASNDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetASNDetailsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{9}
}

func (x *GetASNDetailsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *GetASNDetailsRequest) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *GetASNDetailsRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetASNDetailsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetASNDetailsRequest) GetMutualProvider() string {
	if x != nil {
		return x.MutualProvider
	}
	return ""
}

func (x *GetASNDetailsRequest) GetMutualCustomer() string {
	if x != nil {
		return x.MutualCustomer
	}
	return ""
}

func (x *GetASNDetailsRequest) GetSinglehomedCustomer() string {
	if x != nil {
		return x.SinglehomedCustomer
	}
	return ""
}

// {{.Name}}
type GetASNDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsnDetails *ASNDetails `protobuf:"bytes,1,opt,name=asn_details,json=asnDetails,proto3" json:"asn_details,omitempty"`
}

func (x *GetASNDetailsResponse) Reset() {
	*x = GetASNDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetASNDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetASNDetailsResponse) ProtoMessage() {}

func (x *GetASNDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_kmi_v202212_kmi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetASNDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetASNDetailsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_kmi_v202212_kmi_proto_rawDescGZIP(), []int{10}
}

func (x *GetASNDetailsResponse) GetAsnDetails() *ASNDetails {
	if x != nil {
		return x.AsnDetails
	}
	return nil
}

var File_kentik_kmi_v202212_kmi_proto protoreflect.FileDescriptor

var file_kentik_kmi_v202212_kmi_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x6d, 0x69, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2f, 0x6b, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x05, 0x0a, 0x06, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0x92, 0x41, 0x73, 0x32, 0x71, 0x47, 0x65, 0x6f, 0x20, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x27, 0x63, 0x63, 0x24, 0x55, 0x53, 0x27, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x27,
	0x55, 0x53, 0x27, 0x20, 0x69, 0x73, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x08, 0x67, 0x65, 0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x67,
	0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7c, 0x92,
	0x41, 0x75, 0x32, 0x73, 0x47, 0x65, 0x6f, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x65, 0x2e,
	0x67, 0x2e, 0x20, 0x27, 0x55, 0x53, 0x27, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x27, 0x63, 0x63, 0x24, 0x55, 0x53, 0x2c,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x55, 0x53, 0x27, 0x20, 0x69, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x63, 0x63, 0x27,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x67, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x6e, 0x92, 0x41, 0x67, 0x32, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x27, 0x63, 0x63, 0x24, 0x55, 0x53, 0x27, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x20, 0x27, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x6a, 0x5f, 0x72, 0x65, 0x67, 0x24, 0x55,
	0x53, 0x4d, 0x57, 0x27, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x69, 0x32,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x27, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x6a, 0x5f, 0x72,
	0x65, 0x67, 0x24, 0x55, 0x53, 0x4d, 0x57, 0x27, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20,
	0x27, 0x63, 0x63, 0x24, 0x55, 0x53, 0x27, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x05, 0x0a, 0x07, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0xe2, 0x41, 0x01, 0x03, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x97,
	0x01, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x7a, 0x92, 0x41, 0x73, 0x32, 0x71, 0x47, 0x65, 0x6f, 0x20, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x27,
	0x63, 0x63, 0x24, 0x55, 0x53, 0x27, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x27, 0x55, 0x53,
	0x27, 0x20, 0x69, 0x73, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08,
	0x67, 0x65, 0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x67, 0x65, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7c, 0x92, 0x41, 0x75,
	0x32, 0x73, 0x47, 0x65, 0x6f, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0x27, 0x55, 0x53, 0x27, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x27, 0x63, 0x63, 0x24, 0x55, 0x53, 0x2c, 0x20, 0x6e,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x55, 0x53, 0x27, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x06, 0x32, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x06, 0x32, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0xe2, 0x41,
	0x01, 0x03, 0x48, 0x01, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x20, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x07, 0x32, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xe2, 0x41, 0x01,
	0x03, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x73, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xcc, 0x06, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0xe2, 0x41, 0x01, 0x03, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x09, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x45, 0x64, 0x67, 0x65, 0x20, 0x54, 0x79, 0x70,
	0x65, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x01, 0x52, 0x08, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7c, 0x92, 0x41, 0x75, 0x32, 0x73, 0x47, 0x65,
	0x6f, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x55, 0x53,
	0x27, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x27, 0x63, 0x63, 0x24, 0x55, 0x53, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x27, 0x55, 0x53, 0x27, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x97,
	0x01, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x7a, 0x92, 0x41, 0x73, 0x32, 0x71, 0x47, 0x65, 0x6f, 0x20, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x27,
	0x63, 0x63, 0x24, 0x55, 0x53, 0x27, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x27, 0x55, 0x53,
	0x27, 0x20, 0x69, 0x73, 0x20, 0x27, 0x63, 0x63, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08,
	0x67, 0x65, 0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x06, 0x32, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x07, 0x32,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x68, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0x92, 0x41, 0x16, 0x32, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x68, 0x6f, 0x6d, 0x65, 0x64, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0xe2,
	0x41, 0x01, 0x03, 0x48, 0x03, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x68, 0x6f, 0x6d,
	0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x4d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03,
	0x48, 0x04, 0x52, 0x0e, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x05, 0x52, 0x0e, 0x6d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x61, 0x73, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x68, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xb2,
	0x01, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6e,
	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0x92, 0x41, 0x06, 0x32, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x66, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0xe2, 0x41, 0x01, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x66, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x61, 0x73, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x66, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x0a, 0x41, 0x53, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73,
	0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xe2, 0x41,
	0x01, 0x03, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x06, 0x32,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x12, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d,
	0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x12, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x42, 0x0e, 0x92, 0x41, 0x07, 0x32, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x73,
	0x6e, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x10, 0x92, 0x41, 0x09,
	0x32, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x46, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20,
	0x28, 0x61, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x20,
	0x52, 0x50, 0x43, 0x29, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0xe2, 0x01, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc4, 0x01, 0x92, 0x41, 0xc0, 0x01, 0x32, 0xbd, 0x01,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x27,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x27, 0x2c, 0x20,
	0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x6f, 0x6d, 0x65,
	0x27, 0x2c, 0x20, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x27, 0x2c, 0x20,
	0x27, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x27, 0x29, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x27, 0x2e, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x49, 0x50, 0x20, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x28, 0x27, 0x76, 0x34,
	0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x76, 0x36, 0x27, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x76, 0x34,
	0x27, 0x2e, 0x52, 0x02, 0x69, 0x70, 0x12, 0x53, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x20,
	0x28, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x20, 0x36, 0x30, 0x30, 0x29, 0x2e, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x92, 0x41,
	0x12, 0x32, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x65, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe2, 0x05, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x53, 0x4e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x46, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20,
	0x28, 0x61, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x20,
	0x52, 0x50, 0x43, 0x29, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73,
	0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x48, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x49, 0x50, 0x20, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x28, 0x27, 0x76, 0x34,
	0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x76, 0x36, 0x27, 0x29, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x76, 0x34, 0x27, 0x2e, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x6e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5a, 0x92, 0x41, 0x57, 0x32, 0x55, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x41, 0x53, 0x4e, 0x20,
	0x28, 0x27, 0x61, 0x6c, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x27, 0x2c, 0x20, 0x27, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x27, 0x2c, 0x20,
	0x27, 0x70, 0x65, 0x65, 0x72, 0x27, 0x29, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x61, 0x6c, 0x6c, 0x27, 0x2e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x76, 0x0a, 0x0f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32,
	0x48, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28, 0x27, 0x61, 0x6c, 0x6c,
	0x27, 0x2c, 0x20, 0x27, 0x6f, 0x6e, 0x6c, 0x79, 0x27, 0x2c, 0x20, 0x27, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x27, 0x29, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x27, 0x61, 0x6c, 0x6c, 0x27, 0x2e, 0x52, 0x0e, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0f, 0x6d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x62, 0x79, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x20, 0x28, 0x27, 0x61, 0x6c, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x6f, 0x6e, 0x6c, 0x79,
	0x27, 0x2c, 0x20, 0x27, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x27, 0x29, 0x2e, 0x20, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x61, 0x6c, 0x6c, 0x27,
	0x2e, 0x52, 0x0e, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x68, 0x6f, 0x6d, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x52, 0x92, 0x41, 0x4f, 0x32, 0x4d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79,
	0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x68, 0x6f, 0x6d, 0x65, 0x64, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x28, 0x27, 0x61, 0x6c, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x6f,
	0x6e, 0x6c, 0x79, 0x27, 0x2c, 0x20, 0x27, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x27, 0x29,
	0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x61,
	0x6c, 0x6c, 0x27, 0x2e, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x68, 0x6f, 0x6d, 0x65,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x53, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x61, 0x73, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x41,
	0x53, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2c, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41, 0x53, 0x4e, 0x52, 0x0a, 0x61, 0x73,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xe4, 0x06, 0x0a, 0x0a, 0x4b, 0x6d, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdb, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x92, 0x41, 0x4a, 0x12, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x4b, 0x4d, 0x49, 0x2e, 0x1a, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4b, 0x4d, 0x49, 0x2e, 0x2a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0xf2, 0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x6b, 0x6d, 0x69, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x6b, 0x6d, 0x69, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0xf9, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b,
	0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x92, 0x41, 0x44, 0x12, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x4b, 0x4d, 0x49, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x1a, 0x1d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x4b, 0x4d, 0x49, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x2a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0xf2, 0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x6d, 0x69, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x34, 0x2f, 0x6b, 0x6d, 0x69, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x7b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0xd6, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x53, 0x4e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x53, 0x4e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x6d, 0x69, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x53, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef, 0x01, 0x92, 0x41, 0x9a, 0x01, 0x12,
	0x42, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2c,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41,
	0x53, 0x4e, 0x2e, 0x1a, 0x45, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41, 0x53, 0x4e, 0x2e, 0x2a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x53, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0xf2, 0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x6b, 0x6d, 0x69, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x22, 0x34, 0x2f, 0x6b, 0x6d, 0x69, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x7b, 0x61, 0x73, 0x6e, 0x7d,
	0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0xca, 0x41, 0x13, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x6d, 0x69, 0x42,
	0x81, 0x04, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b,
	0x6d, 0x69, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x3b, 0x6b, 0x6d, 0x69, 0x92, 0x41,
	0xc1, 0x03, 0x12, 0xda, 0x01, 0x0a, 0x24, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x28, 0x4b, 0x4d, 0x49, 0x29, 0x20, 0x41, 0x50, 0x49, 0x12, 0x62, 0x23, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x28, 0x4b, 0x4d, 0x49, 0x29, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x4b, 0x4d, 0x49, 0x20, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x0a, 0x22,
	0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2a,
	0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68,
	0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68,
	0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62, 0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d,
	0x23, 0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_kmi_v202212_kmi_proto_rawDescOnce sync.Once
	file_kentik_kmi_v202212_kmi_proto_rawDescData = file_kentik_kmi_v202212_kmi_proto_rawDesc
)

func file_kentik_kmi_v202212_kmi_proto_rawDescGZIP() []byte {
	file_kentik_kmi_v202212_kmi_proto_rawDescOnce.Do(func() {
		file_kentik_kmi_v202212_kmi_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_kmi_v202212_kmi_proto_rawDescData)
	})
	return file_kentik_kmi_v202212_kmi_proto_rawDescData
}

var file_kentik_kmi_v202212_kmi_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_kentik_kmi_v202212_kmi_proto_goTypes = []interface{}{
	(*Market)(nil),                // 0: kentik.kmi.v202212.Market
	(*Ranking)(nil),               // 1: kentik.kmi.v202212.Ranking
	(*CustomerProvider)(nil),      // 2: kentik.kmi.v202212.CustomerProvider
	(*Peer)(nil),                  // 3: kentik.kmi.v202212.Peer
	(*ASNDetails)(nil),            // 4: kentik.kmi.v202212.ASNDetails
	(*ListMarketsRequest)(nil),    // 5: kentik.kmi.v202212.ListMarketsRequest
	(*ListMarketsResponse)(nil),   // 6: kentik.kmi.v202212.ListMarketsResponse
	(*GetRankingsRequest)(nil),    // 7: kentik.kmi.v202212.GetRankingsRequest
	(*GetRankingsResponse)(nil),   // 8: kentik.kmi.v202212.GetRankingsResponse
	(*GetASNDetailsRequest)(nil),  // 9: kentik.kmi.v202212.GetASNDetailsRequest
	(*GetASNDetailsResponse)(nil), // 10: kentik.kmi.v202212.GetASNDetailsResponse
}
var file_kentik_kmi_v202212_kmi_proto_depIdxs = []int32{
	2,  // 0: kentik.kmi.v202212.ASNDetails.customers:type_name -> kentik.kmi.v202212.CustomerProvider
	2,  // 1: kentik.kmi.v202212.ASNDetails.providers:type_name -> kentik.kmi.v202212.CustomerProvider
	3,  // 2: kentik.kmi.v202212.ASNDetails.peers:type_name -> kentik.kmi.v202212.Peer
	0,  // 3: kentik.kmi.v202212.ListMarketsResponse.markets:type_name -> kentik.kmi.v202212.Market
	1,  // 4: kentik.kmi.v202212.GetRankingsResponse.rankings:type_name -> kentik.kmi.v202212.Ranking
	4,  // 5: kentik.kmi.v202212.GetASNDetailsResponse.asn_details:type_name -> kentik.kmi.v202212.ASNDetails
	5,  // 6: kentik.kmi.v202212.KmiService.ListMarkets:input_type -> kentik.kmi.v202212.ListMarketsRequest
	7,  // 7: kentik.kmi.v202212.KmiService.GetRankings:input_type -> kentik.kmi.v202212.GetRankingsRequest
	9,  // 8: kentik.kmi.v202212.KmiService.GetASNDetails:input_type -> kentik.kmi.v202212.GetASNDetailsRequest
	6,  // 9: kentik.kmi.v202212.KmiService.ListMarkets:output_type -> kentik.kmi.v202212.ListMarketsResponse
	8,  // 10: kentik.kmi.v202212.KmiService.GetRankings:output_type -> kentik.kmi.v202212.GetRankingsResponse
	10, // 11: kentik.kmi.v202212.KmiService.GetASNDetails:output_type -> kentik.kmi.v202212.GetASNDetailsResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_kentik_kmi_v202212_kmi_proto_init() }
func file_kentik_kmi_v202212_kmi_proto_init() {
	if File_kentik_kmi_v202212_kmi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_kmi_v202212_kmi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASNDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetASNDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_kmi_v202212_kmi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetASNDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_kmi_v202212_kmi_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_kentik_kmi_v202212_kmi_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_kentik_kmi_v202212_kmi_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_kentik_kmi_v202212_kmi_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_kentik_kmi_v202212_kmi_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_kmi_v202212_kmi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_kmi_v202212_kmi_proto_goTypes,
		DependencyIndexes: file_kentik_kmi_v202212_kmi_proto_depIdxs,
		MessageInfos:      file_kentik_kmi_v202212_kmi_proto_msgTypes,
	}.Build()
	File_kentik_kmi_v202212_kmi_proto = out.File
	file_kentik_kmi_v202212_kmi_proto_rawDesc = nil
	file_kentik_kmi_v202212_kmi_proto_goTypes = nil
	file_kentik_kmi_v202212_kmi_proto_depIdxs = nil
}
